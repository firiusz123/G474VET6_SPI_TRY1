
communication_try01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000926c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000368  0800944c  0800944c  0000a44c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097b4  080097b4  0000b06c  2**0
                  CONTENTS
  4 .ARM          00000008  080097b4  080097b4  0000a7b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097bc  080097bc  0000b06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097bc  080097bc  0000a7bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080097c0  080097c0  0000a7c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080097c4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000450  2000006c  08009830  0000b06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004bc  08009830  0000b4bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001707b  00000000  00000000  0000b09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ffc  00000000  00000000  00022117  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c0  00000000  00000000  00025118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f64  00000000  00000000  000264d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028045  00000000  00000000  0002743c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018500  00000000  00000000  0004f481  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ffee3  00000000  00000000  00067981  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00167864  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005eb8  00000000  00000000  001678a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  0016d760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009434 	.word	0x08009434

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	08009434 	.word	0x08009434

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <command_checker>:
uint32_t diff=0;
uint32_t diff1=0;


char* command_checker(uint8_t* buffer)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
    int8_t ending_condition = 1;
 80005e8:	2301      	movs	r3, #1
 80005ea:	73fb      	strb	r3, [r7, #15]
    int8_t index = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	73bb      	strb	r3, [r7, #14]

    while (ending_condition)
 80005f0:	e00f      	b.n	8000612 <command_checker+0x32>
    {
        if (buffer[index] == '#')
 80005f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005f6:	687a      	ldr	r2, [r7, #4]
 80005f8:	4413      	add	r3, r2
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b23      	cmp	r3, #35	@ 0x23
 80005fe:	d102      	bne.n	8000606 <command_checker+0x26>
        {
            ending_condition = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	73fb      	strb	r3, [r7, #15]
 8000604:	e005      	b.n	8000612 <command_checker+0x32>
        }
        else
        {
            index++;
 8000606:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800060a:	b2db      	uxtb	r3, r3
 800060c:	3301      	adds	r3, #1
 800060e:	b2db      	uxtb	r3, r3
 8000610:	73bb      	strb	r3, [r7, #14]
    while (ending_condition)
 8000612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d1eb      	bne.n	80005f2 <command_checker+0x12>
        }

    }

    // Allocate memory for the command string with an extra byte for the null terminator
    char* command = (char*)malloc(index + 1);
 800061a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800061e:	3301      	adds	r3, #1
 8000620:	4618      	mov	r0, r3
 8000622:	f007 fa2d 	bl	8007a80 <malloc>
 8000626:	4603      	mov	r3, r0
 8000628:	60bb      	str	r3, [r7, #8]
    if (command == NULL)
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d101      	bne.n	8000634 <command_checker+0x54>
    {
        return NULL;  // Allocation failed
 8000630:	2300      	movs	r3, #0
 8000632:	e00d      	b.n	8000650 <command_checker+0x70>
    }

    // Copy the command part from buffer to the newly allocated string
    strncpy(command, (char*)buffer, index);
 8000634:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000638:	461a      	mov	r2, r3
 800063a:	6879      	ldr	r1, [r7, #4]
 800063c:	68b8      	ldr	r0, [r7, #8]
 800063e:	f007 fd29 	bl	8008094 <strncpy>
    command[index] = '\0';  // Null-terminate the string
 8000642:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000646:	68ba      	ldr	r2, [r7, #8]
 8000648:	4413      	add	r3, r2
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]

    return command;
 800064e:	68bb      	ldr	r3, [r7, #8]
}
 8000650:	4618      	mov	r0, r3
 8000652:	3710      	adds	r7, #16
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <head_control>:
char* head_control(void) {
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
    //char RxBuffer1[RX_BUFFER_SIZE];
    //memset(RxBuffer1, '\0', sizeof(RxBuffer1)); // Clear the buffer

    char received_char1;
    int8_t index = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	73fb      	strb	r3, [r7, #15]
    memset(RxBuffer1, '\0', sizeof(RxBuffer1));
 8000662:	2220      	movs	r2, #32
 8000664:	2100      	movs	r1, #0
 8000666:	4836      	ldr	r0, [pc, #216]	@ (8000740 <head_control+0xe8>)
 8000668:	f007 fd0c 	bl	8008084 <memset>
    // Continue to receive characters until the character '$' is found

    uint32_t start_time=HAL_GetTick();
 800066c:	f001 feb6 	bl	80023dc <HAL_GetTick>
 8000670:	60b8      	str	r0, [r7, #8]
    uint32_t timeout1=7000;
 8000672:	f641 3358 	movw	r3, #7000	@ 0x1b58
 8000676:	607b      	str	r3, [r7, #4]


    while (1) {
        // Receive one character at a time
		diff1=HAL_GetTick()-start_time;
 8000678:	f001 feb0 	bl	80023dc <HAL_GetTick>
 800067c:	4602      	mov	r2, r0
 800067e:	68bb      	ldr	r3, [r7, #8]
 8000680:	1ad3      	subs	r3, r2, r3
 8000682:	4a30      	ldr	r2, [pc, #192]	@ (8000744 <head_control+0xec>)
 8000684:	6013      	str	r3, [r2, #0]
		if(diff1>=timeout1){
 8000686:	4b2f      	ldr	r3, [pc, #188]	@ (8000744 <head_control+0xec>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	687a      	ldr	r2, [r7, #4]
 800068c:	429a      	cmp	r2, r3
 800068e:	d801      	bhi.n	8000694 <head_control+0x3c>
		return "error$"; }
 8000690:	4b2d      	ldr	r3, [pc, #180]	@ (8000748 <head_control+0xf0>)
 8000692:	e050      	b.n	8000736 <head_control+0xde>

    	if (HAL_UART_Receive(&huart5, (uint8_t*)&received_char1, 1, 100) == HAL_OK) {
 8000694:	1cf9      	adds	r1, r7, #3
 8000696:	2364      	movs	r3, #100	@ 0x64
 8000698:	2201      	movs	r2, #1
 800069a:	482c      	ldr	r0, [pc, #176]	@ (800074c <head_control+0xf4>)
 800069c:	f005 ff66 	bl	800656c <HAL_UART_Receive>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d1e8      	bne.n	8000678 <head_control+0x20>
        //if (HAL_UART_Receive(&huart5, (uint8_t*)&received_char1, 1, HAL_MAX_DELAY) == HAL_OK) {
        //if (HAL_UART_Receive(&huart5, (uint8_t*)received_char1, 1, HAL_MAX_DELAY) == HAL_OK) {
            // Skip adding to buffer if the received character is '\0'
    		if (received_char1=='H'){
 80006a6:	78fb      	ldrb	r3, [r7, #3]
 80006a8:	2b48      	cmp	r3, #72	@ 0x48
 80006aa:	d135      	bne.n	8000718 <head_control+0xc0>
    			RxBuffer1[index++] = received_char1;
 80006ac:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80006b0:	b2d3      	uxtb	r3, r2
 80006b2:	3301      	adds	r3, #1
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	73fb      	strb	r3, [r7, #15]
 80006b8:	78f9      	ldrb	r1, [r7, #3]
 80006ba:	4b21      	ldr	r3, [pc, #132]	@ (8000740 <head_control+0xe8>)
 80006bc:	5499      	strb	r1, [r3, r2]

    			while(1){
    				diff=HAL_GetTick()-start_time;
 80006be:	f001 fe8d 	bl	80023dc <HAL_GetTick>
 80006c2:	4602      	mov	r2, r0
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	1ad3      	subs	r3, r2, r3
 80006c8:	4a21      	ldr	r2, [pc, #132]	@ (8000750 <head_control+0xf8>)
 80006ca:	6013      	str	r3, [r2, #0]
    				if(diff>=timeout1){
 80006cc:	4b20      	ldr	r3, [pc, #128]	@ (8000750 <head_control+0xf8>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	687a      	ldr	r2, [r7, #4]
 80006d2:	429a      	cmp	r2, r3
 80006d4:	d91f      	bls.n	8000716 <head_control+0xbe>
    				break;}
    				if (HAL_UART_Receive(&huart5, (uint8_t*)&received_char1, 1, 100) == HAL_OK) {
 80006d6:	1cf9      	adds	r1, r7, #3
 80006d8:	2364      	movs	r3, #100	@ 0x64
 80006da:	2201      	movs	r2, #1
 80006dc:	481b      	ldr	r0, [pc, #108]	@ (800074c <head_control+0xf4>)
 80006de:	f005 ff45 	bl	800656c <HAL_UART_Receive>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d1ea      	bne.n	80006be <head_control+0x66>


    						if (received_char1 == '\0') {
 80006e8:	78fb      	ldrb	r3, [r7, #3]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d011      	beq.n	8000712 <head_control+0xba>
    							continue;
    						}


    						RxBuffer1[index++] = received_char1;
 80006ee:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80006f2:	b2d3      	uxtb	r3, r2
 80006f4:	3301      	adds	r3, #1
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	73fb      	strb	r3, [r7, #15]
 80006fa:	78f9      	ldrb	r1, [r7, #3]
 80006fc:	4b10      	ldr	r3, [pc, #64]	@ (8000740 <head_control+0xe8>)
 80006fe:	5499      	strb	r1, [r3, r2]
            //HAL_Delay(1);
            // Break the loop if the end of the buffer is reached or if '$' is received
    						if (index >= RX_BUFFER_SIZE || received_char1 == '$') {
 8000700:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000704:	2b1f      	cmp	r3, #31
 8000706:	dc02      	bgt.n	800070e <head_control+0xb6>
 8000708:	78fb      	ldrb	r3, [r7, #3]
 800070a:	2b24      	cmp	r3, #36	@ 0x24
 800070c:	d1d7      	bne.n	80006be <head_control+0x66>
    							return RxBuffer1;
 800070e:	4b0c      	ldr	r3, [pc, #48]	@ (8000740 <head_control+0xe8>)
 8000710:	e011      	b.n	8000736 <head_control+0xde>
    							continue;
 8000712:	bf00      	nop
    				diff=HAL_GetTick()-start_time;
 8000714:	e7d3      	b.n	80006be <head_control+0x66>
    				break;}
 8000716:	bf00      	nop
    						}
    						//else {break;}
    					}
    				}
    			}
    		if (index >= RX_BUFFER_SIZE || received_char1 == '$') {
 8000718:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800071c:	2b1f      	cmp	r3, #31
 800071e:	dc02      	bgt.n	8000726 <head_control+0xce>
 8000720:	78fb      	ldrb	r3, [r7, #3]
 8000722:	2b24      	cmp	r3, #36	@ 0x24
 8000724:	d101      	bne.n	800072a <head_control+0xd2>
    			return RxBuffer1;
 8000726:	4b06      	ldr	r3, [pc, #24]	@ (8000740 <head_control+0xe8>)
 8000728:	e005      	b.n	8000736 <head_control+0xde>
    		    						}
			if(diff>=timeout1){
 800072a:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <head_control+0xf8>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	687a      	ldr	r2, [r7, #4]
 8000730:	429a      	cmp	r2, r3
 8000732:	d8a1      	bhi.n	8000678 <head_control+0x20>
				return "error$";}
 8000734:	4b04      	ldr	r3, [pc, #16]	@ (8000748 <head_control+0xf0>)

    // Null-terminate the string
    RxBuffer1[index] = '\0';

    return RxBuffer1;
}
 8000736:	4618      	mov	r0, r3
 8000738:	3710      	adds	r7, #16
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	200000c8 	.word	0x200000c8
 8000744:	200000f0 	.word	0x200000f0
 8000748:	0800944c 	.word	0x0800944c
 800074c:	200002d0 	.word	0x200002d0
 8000750:	200000ec 	.word	0x200000ec

08000754 <swtch_control>:

char* swtch_control(void){ //odbiór stanów czujników obrotu kafelka
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0

		memset(RxBuffer1, '\0', sizeof(RxBuffer1)); // Clear the buffer
 800075a:	2220      	movs	r2, #32
 800075c:	2100      	movs	r1, #0
 800075e:	4817      	ldr	r0, [pc, #92]	@ (80007bc <swtch_control+0x68>)
 8000760:	f007 fc90 	bl	8008084 <memset>

	    char received_char2;
	    int8_t index = 0;
 8000764:	2300      	movs	r3, #0
 8000766:	71fb      	strb	r3, [r7, #7]

	    // Continue to receive characters until the character '$' is found
	    while (1) {
	            // Receive one character at a time
	        	if (HAL_UART_Receive(&huart5, (uint8_t*)&received_char2, 1, 1000) == HAL_OK) {
 8000768:	1db9      	adds	r1, r7, #6
 800076a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800076e:	2201      	movs	r2, #1
 8000770:	4813      	ldr	r0, [pc, #76]	@ (80007c0 <swtch_control+0x6c>)
 8000772:	f005 fefb 	bl	800656c <HAL_UART_Receive>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d1f5      	bne.n	8000768 <swtch_control+0x14>

	        		// Skip adding to buffer if the received character is '\0'
	                if (received_char2 == '\0') {
 800077c:	79bb      	ldrb	r3, [r7, #6]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d010      	beq.n	80007a4 <swtch_control+0x50>
	                    continue;
	                }

	                RxBuffer1[index++] = received_char2;
 8000782:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000786:	b2d3      	uxtb	r3, r2
 8000788:	3301      	adds	r3, #1
 800078a:	b2db      	uxtb	r3, r3
 800078c:	71fb      	strb	r3, [r7, #7]
 800078e:	79b9      	ldrb	r1, [r7, #6]
 8000790:	4b0a      	ldr	r3, [pc, #40]	@ (80007bc <swtch_control+0x68>)
 8000792:	5499      	strb	r1, [r3, r2]
	                //HAL_Delay(1);
	                // Break the loop if the end of the buffer is reached or if '$' is received
	                if (index >= RX_BUFFER_SIZE || received_char2 == '$') {
 8000794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000798:	2b1f      	cmp	r3, #31
 800079a:	dc05      	bgt.n	80007a8 <swtch_control+0x54>
 800079c:	79bb      	ldrb	r3, [r7, #6]
 800079e:	2b24      	cmp	r3, #36	@ 0x24
 80007a0:	d002      	beq.n	80007a8 <swtch_control+0x54>
 80007a2:	e7e1      	b.n	8000768 <swtch_control+0x14>
	                    continue;
 80007a4:	bf00      	nop
	        	if (HAL_UART_Receive(&huart5, (uint8_t*)&received_char2, 1, 1000) == HAL_OK) {
 80007a6:	e7df      	b.n	8000768 <swtch_control+0x14>

	                }
	            }
	    }
	        // Null-terminate the string
	        RxBuffer1[index] = '\0';
 80007a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ac:	4a03      	ldr	r2, [pc, #12]	@ (80007bc <swtch_control+0x68>)
 80007ae:	2100      	movs	r1, #0
 80007b0:	54d1      	strb	r1, [r2, r3]

	        return RxBuffer1;
 80007b2:	4b02      	ldr	r3, [pc, #8]	@ (80007bc <swtch_control+0x68>)
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	200000c8 	.word	0x200000c8
 80007c0:	200002d0 	.word	0x200002d0

080007c4 <gaps_control>:
char* gaps_control(void){ //odbiór stanów czujników szczelinowych w odkręcaczach
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0

		memset(RxBuffer1, '\0', sizeof(RxBuffer1)); // Clear the buffer
 80007ca:	2220      	movs	r2, #32
 80007cc:	2100      	movs	r1, #0
 80007ce:	4817      	ldr	r0, [pc, #92]	@ (800082c <gaps_control+0x68>)
 80007d0:	f007 fc58 	bl	8008084 <memset>

	    char received_char2;
	    int8_t index = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	71fb      	strb	r3, [r7, #7]

	    // Continue to receive characters until the character '$' is found
	    while (1) {
	            // Receive one character at a time
	        	if (HAL_UART_Receive(&huart5, (uint8_t*)&received_char2, 1, 1000) == HAL_OK) {
 80007d8:	1db9      	adds	r1, r7, #6
 80007da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007de:	2201      	movs	r2, #1
 80007e0:	4813      	ldr	r0, [pc, #76]	@ (8000830 <gaps_control+0x6c>)
 80007e2:	f005 fec3 	bl	800656c <HAL_UART_Receive>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d1f5      	bne.n	80007d8 <gaps_control+0x14>

	        		// Skip adding to buffer if the received character is '\0'
	                if (received_char2 == '\0') {
 80007ec:	79bb      	ldrb	r3, [r7, #6]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d010      	beq.n	8000814 <gaps_control+0x50>
	                    continue;
	                }

	                RxBuffer1[index++] = received_char2;
 80007f2:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80007f6:	b2d3      	uxtb	r3, r2
 80007f8:	3301      	adds	r3, #1
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	71fb      	strb	r3, [r7, #7]
 80007fe:	79b9      	ldrb	r1, [r7, #6]
 8000800:	4b0a      	ldr	r3, [pc, #40]	@ (800082c <gaps_control+0x68>)
 8000802:	5499      	strb	r1, [r3, r2]
	                //HAL_Delay(1);
	                // Break the loop if the end of the buffer is reached or if '$' is received
	                if (index >= RX_BUFFER_SIZE || received_char2 == '$') {
 8000804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000808:	2b1f      	cmp	r3, #31
 800080a:	dc05      	bgt.n	8000818 <gaps_control+0x54>
 800080c:	79bb      	ldrb	r3, [r7, #6]
 800080e:	2b24      	cmp	r3, #36	@ 0x24
 8000810:	d002      	beq.n	8000818 <gaps_control+0x54>
 8000812:	e7e1      	b.n	80007d8 <gaps_control+0x14>
	                    continue;
 8000814:	bf00      	nop
	        	if (HAL_UART_Receive(&huart5, (uint8_t*)&received_char2, 1, 1000) == HAL_OK) {
 8000816:	e7df      	b.n	80007d8 <gaps_control+0x14>

	                }
	            }
	    }
	        // Null-terminate the string
	        RxBuffer1[index] = '\0';
 8000818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081c:	4a03      	ldr	r2, [pc, #12]	@ (800082c <gaps_control+0x68>)
 800081e:	2100      	movs	r1, #0
 8000820:	54d1      	strb	r1, [r2, r3]

	        return RxBuffer1;
 8000822:	4b02      	ldr	r3, [pc, #8]	@ (800082c <gaps_control+0x68>)
}
 8000824:	4618      	mov	r0, r3
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	200000c8 	.word	0x200000c8
 8000830:	200002d0 	.word	0x200002d0

08000834 <SPI_Communication>:
void SPI_Communication(void)
{
 8000834:	b590      	push	{r4, r7, lr}
 8000836:	b09d      	sub	sp, #116	@ 0x74
 8000838:	af02      	add	r7, sp, #8

    int8_t index = 0;
 800083a:	2300      	movs	r3, #0
 800083c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    uint8_t receivedData;
    uint8_t pinstate = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 8000840:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000844:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000848:	f002 f948 	bl	8002adc <HAL_GPIO_ReadPin>
 800084c:	4603      	mov	r3, r0
 800084e:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66


    if (!pinstate) {memset(RxBuffer, 0, sizeof(RxBuffer));}
 8000852:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8000856:	2b00      	cmp	r3, #0
 8000858:	f040 8269 	bne.w	8000d2e <SPI_Communication+0x4fa>
 800085c:	2220      	movs	r2, #32
 800085e:	2100      	movs	r1, #0
 8000860:	48a4      	ldr	r0, [pc, #656]	@ (8000af4 <SPI_Communication+0x2c0>)
 8000862:	f007 fc0f 	bl	8008084 <memset>

    while (!pinstate) {
 8000866:	e262      	b.n	8000d2e <SPI_Communication+0x4fa>
        // Receive data from SPI
        HAL_SPI_Receive(&hspi1, &receivedData, 1, HAL_MAX_DELAY);
 8000868:	f107 011b 	add.w	r1, r7, #27
 800086c:	f04f 33ff 	mov.w	r3, #4294967295
 8000870:	2201      	movs	r2, #1
 8000872:	48a1      	ldr	r0, [pc, #644]	@ (8000af8 <SPI_Communication+0x2c4>)
 8000874:	f003 fbcc 	bl	8004010 <HAL_SPI_Receive>

        // Check for buffer overflow
        if (index < MAX_BUFFER_SIZE)
 8000878:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 800087c:	2b1f      	cmp	r3, #31
 800087e:	f300 8256 	bgt.w	8000d2e <SPI_Communication+0x4fa>
        {
            // Store received data in buffer
            RxBuffer[index++] = (char)receivedData;
 8000882:	f997 2067 	ldrsb.w	r2, [r7, #103]	@ 0x67
 8000886:	b2d3      	uxtb	r3, r2
 8000888:	3301      	adds	r3, #1
 800088a:	b2db      	uxtb	r3, r3
 800088c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8000890:	7ef9      	ldrb	r1, [r7, #27]
 8000892:	4b98      	ldr	r3, [pc, #608]	@ (8000af4 <SPI_Communication+0x2c0>)
 8000894:	5499      	strb	r1, [r3, r2]

            // Check if end of message
            if ((char)receivedData == END_OF_MESSAGE)
 8000896:	7efb      	ldrb	r3, [r7, #27]
 8000898:	2b24      	cmp	r3, #36	@ 0x24
 800089a:	f040 823f 	bne.w	8000d1c <SPI_Communication+0x4e8>
            {
            	char* command = command_checker(RxBuffer);
 800089e:	4895      	ldr	r0, [pc, #596]	@ (8000af4 <SPI_Communication+0x2c0>)
 80008a0:	f7ff fe9e 	bl	80005e0 <command_checker>
 80008a4:	6638      	str	r0, [r7, #96]	@ 0x60
            	if(command == NULL){command = "MEM#ERR";}
 80008a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d102      	bne.n	80008b2 <SPI_Communication+0x7e>
 80008ac:	4b93      	ldr	r3, [pc, #588]	@ (8000afc <SPI_Communication+0x2c8>)
 80008ae:	663b      	str	r3, [r7, #96]	@ 0x60
 80008b0:	e221      	b.n	8000cf6 <SPI_Communication+0x4c2>
////////////////////////////////////////////////////////////////////////////////////////////////////////////
            	else if(strcmp(command, "HEAD") == 0)
 80008b2:	4993      	ldr	r1, [pc, #588]	@ (8000b00 <SPI_Communication+0x2cc>)
 80008b4:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80008b6:	f7ff fcb3 	bl	8000220 <strcmp>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d159      	bne.n	8000974 <SPI_Communication+0x140>
            	{
            		HAL_UART_Transmit(&huart5, (uint8_t *)RxBuffer, strlen(RxBuffer), 100);
 80008c0:	488c      	ldr	r0, [pc, #560]	@ (8000af4 <SPI_Communication+0x2c0>)
 80008c2:	f7ff fcb7 	bl	8000234 <strlen>
 80008c6:	4603      	mov	r3, r0
 80008c8:	b29a      	uxth	r2, r3
 80008ca:	2364      	movs	r3, #100	@ 0x64
 80008cc:	4989      	ldr	r1, [pc, #548]	@ (8000af4 <SPI_Communication+0x2c0>)
 80008ce:	488d      	ldr	r0, [pc, #564]	@ (8000b04 <SPI_Communication+0x2d0>)
 80008d0:	f005 fdbe 	bl	8006450 <HAL_UART_Transmit>
            		char* received_data = head_control();
 80008d4:	f7ff fec0 	bl	8000658 <head_control>
 80008d8:	61f8      	str	r0, [r7, #28]
            		char* str;
            		memset(TxBuffer, '\0', sizeof(TxBuffer));
 80008da:	2220      	movs	r2, #32
 80008dc:	2100      	movs	r1, #0
 80008de:	488a      	ldr	r0, [pc, #552]	@ (8000b08 <SPI_Communication+0x2d4>)
 80008e0:	f007 fbd0 	bl	8008084 <memset>
            		if(strcmp(received_data, "HEAD#0#F0F0F0F0$") == 0 ){str = "HEAD#0#NOK$";}
 80008e4:	4989      	ldr	r1, [pc, #548]	@ (8000b0c <SPI_Communication+0x2d8>)
 80008e6:	69f8      	ldr	r0, [r7, #28]
 80008e8:	f7ff fc9a 	bl	8000220 <strcmp>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d102      	bne.n	80008f8 <SPI_Communication+0xc4>
 80008f2:	4b87      	ldr	r3, [pc, #540]	@ (8000b10 <SPI_Communication+0x2dc>)
 80008f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80008f6:	e01b      	b.n	8000930 <SPI_Communication+0xfc>

            		else if(strcmp(received_data, "HEAD#1#F0F0F0F0$") == 0 ) {str = "HEAD#1#NOK$";}
 80008f8:	4986      	ldr	r1, [pc, #536]	@ (8000b14 <SPI_Communication+0x2e0>)
 80008fa:	69f8      	ldr	r0, [r7, #28]
 80008fc:	f7ff fc90 	bl	8000220 <strcmp>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d102      	bne.n	800090c <SPI_Communication+0xd8>
 8000906:	4b84      	ldr	r3, [pc, #528]	@ (8000b18 <SPI_Communication+0x2e4>)
 8000908:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800090a:	e011      	b.n	8000930 <SPI_Communication+0xfc>
            		else if (received_data[5]=='0'){str = "HEAD#0#OK$";}
 800090c:	69fb      	ldr	r3, [r7, #28]
 800090e:	3305      	adds	r3, #5
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	2b30      	cmp	r3, #48	@ 0x30
 8000914:	d102      	bne.n	800091c <SPI_Communication+0xe8>
 8000916:	4b81      	ldr	r3, [pc, #516]	@ (8000b1c <SPI_Communication+0x2e8>)
 8000918:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800091a:	e009      	b.n	8000930 <SPI_Communication+0xfc>
            		else if (received_data[5]=='1'){str="HEAD#1#OK$";}
 800091c:	69fb      	ldr	r3, [r7, #28]
 800091e:	3305      	adds	r3, #5
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	2b31      	cmp	r3, #49	@ 0x31
 8000924:	d102      	bne.n	800092c <SPI_Communication+0xf8>
 8000926:	4b7e      	ldr	r3, [pc, #504]	@ (8000b20 <SPI_Communication+0x2ec>)
 8000928:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800092a:	e001      	b.n	8000930 <SPI_Communication+0xfc>
            		else{str="HEAD#0#NOK$";}
 800092c:	4b78      	ldr	r3, [pc, #480]	@ (8000b10 <SPI_Communication+0x2dc>)
 800092e:	65fb      	str	r3, [r7, #92]	@ 0x5c

            		if (strcmp(received_data,"error$") == 0){
 8000930:	497c      	ldr	r1, [pc, #496]	@ (8000b24 <SPI_Communication+0x2f0>)
 8000932:	69f8      	ldr	r0, [r7, #28]
 8000934:	f7ff fc74 	bl	8000220 <strcmp>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d10f      	bne.n	800095e <SPI_Communication+0x12a>
            			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 800093e:	2110      	movs	r1, #16
 8000940:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000944:	f002 f8fa 	bl	8002b3c <HAL_GPIO_TogglePin>
            			HAL_Delay(500);
 8000948:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800094c:	f001 fd52 	bl	80023f4 <HAL_Delay>
            			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8000950:	2110      	movs	r1, #16
 8000952:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000956:	f002 f8f1 	bl	8002b3c <HAL_GPIO_TogglePin>
            			str = "error$";}
 800095a:	4b72      	ldr	r3, [pc, #456]	@ (8000b24 <SPI_Communication+0x2f0>)
 800095c:	65fb      	str	r3, [r7, #92]	@ 0x5c

            		strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
 800095e:	221f      	movs	r2, #31
 8000960:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8000962:	4869      	ldr	r0, [pc, #420]	@ (8000b08 <SPI_Communication+0x2d4>)
 8000964:	f007 fb96 	bl	8008094 <strncpy>
            		memset(RxBuffer, '\0', sizeof(RxBuffer));
 8000968:	2220      	movs	r2, #32
 800096a:	2100      	movs	r1, #0
 800096c:	4861      	ldr	r0, [pc, #388]	@ (8000af4 <SPI_Communication+0x2c0>)
 800096e:	f007 fb89 	bl	8008084 <memset>
 8000972:	e1c0      	b.n	8000cf6 <SPI_Communication+0x4c2>


            	 }
///////////////////////////////////////////////////////////////////////////////////////////////////////////
            	else if(strcmp(command, "MAGNET") == 0)
 8000974:	496c      	ldr	r1, [pc, #432]	@ (8000b28 <SPI_Communication+0x2f4>)
 8000976:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8000978:	f7ff fc52 	bl	8000220 <strcmp>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d144      	bne.n	8000a0c <SPI_Communication+0x1d8>
            	{


            		int8_t MagState;

            		HAL_UART_Transmit(&huart5, (uint8_t *)RxBuffer, strlen(RxBuffer), HAL_MAX_DELAY);
 8000982:	485c      	ldr	r0, [pc, #368]	@ (8000af4 <SPI_Communication+0x2c0>)
 8000984:	f7ff fc56 	bl	8000234 <strlen>
 8000988:	4603      	mov	r3, r0
 800098a:	b29a      	uxth	r2, r3
 800098c:	f04f 33ff 	mov.w	r3, #4294967295
 8000990:	4958      	ldr	r1, [pc, #352]	@ (8000af4 <SPI_Communication+0x2c0>)
 8000992:	485c      	ldr	r0, [pc, #368]	@ (8000b04 <SPI_Communication+0x2d0>)
 8000994:	f005 fd5c 	bl	8006450 <HAL_UART_Transmit>
            		memset(TxBuffer, '\0', sizeof(TxBuffer));
 8000998:	2220      	movs	r2, #32
 800099a:	2100      	movs	r1, #0
 800099c:	485a      	ldr	r0, [pc, #360]	@ (8000b08 <SPI_Communication+0x2d4>)
 800099e:	f007 fb71 	bl	8008084 <memset>
					sscanf(RxBuffer, "MAGNET#%d$", &MagState);
 80009a2:	f107 031a 	add.w	r3, r7, #26
 80009a6:	461a      	mov	r2, r3
 80009a8:	4960      	ldr	r1, [pc, #384]	@ (8000b2c <SPI_Communication+0x2f8>)
 80009aa:	4852      	ldr	r0, [pc, #328]	@ (8000af4 <SPI_Communication+0x2c0>)
 80009ac:	f007 fa66 	bl	8007e7c <siscanf>
					if(MagState != 0){TileON = 1 ;}
 80009b0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d003      	beq.n	80009c0 <SPI_Communication+0x18c>
 80009b8:	4b5d      	ldr	r3, [pc, #372]	@ (8000b30 <SPI_Communication+0x2fc>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	701a      	strb	r2, [r3, #0]
 80009be:	e002      	b.n	80009c6 <SPI_Communication+0x192>
					else{TileON = 0 ;}
 80009c0:	4b5b      	ldr	r3, [pc, #364]	@ (8000b30 <SPI_Communication+0x2fc>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	701a      	strb	r2, [r3, #0]
					//power=char(MagState);
					if(MagState==0){
 80009c6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d10a      	bne.n	80009e4 <SPI_Communication+0x1b0>
						char *str = "MAGNET#0#OK$";
 80009ce:	4b59      	ldr	r3, [pc, #356]	@ (8000b34 <SPI_Communication+0x300>)
 80009d0:	623b      	str	r3, [r7, #32]
						HAL_Delay(200);
 80009d2:	20c8      	movs	r0, #200	@ 0xc8
 80009d4:	f001 fd0e 	bl	80023f4 <HAL_Delay>
						strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
 80009d8:	221f      	movs	r2, #31
 80009da:	6a39      	ldr	r1, [r7, #32]
 80009dc:	484a      	ldr	r0, [pc, #296]	@ (8000b08 <SPI_Communication+0x2d4>)
 80009de:	f007 fb59 	bl	8008094 <strncpy>
 80009e2:	e00d      	b.n	8000a00 <SPI_Communication+0x1cc>
					}
					else if(MagState==4){
 80009e4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80009e8:	2b04      	cmp	r3, #4
 80009ea:	d109      	bne.n	8000a00 <SPI_Communication+0x1cc>
						char *str = "MAGNET#4#OK$";
 80009ec:	4b52      	ldr	r3, [pc, #328]	@ (8000b38 <SPI_Communication+0x304>)
 80009ee:	627b      	str	r3, [r7, #36]	@ 0x24
						HAL_Delay(200);
 80009f0:	20c8      	movs	r0, #200	@ 0xc8
 80009f2:	f001 fcff 	bl	80023f4 <HAL_Delay>
	            		strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
 80009f6:	221f      	movs	r2, #31
 80009f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80009fa:	4843      	ldr	r0, [pc, #268]	@ (8000b08 <SPI_Communication+0x2d4>)
 80009fc:	f007 fb4a 	bl	8008094 <strncpy>
					//char *str = "MAGNET#4#OK$";
					//HAL_Delay(200);
					//strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
            		//HAL_Delay(200);

            		memset(RxBuffer, '\0', sizeof(RxBuffer));
 8000a00:	2220      	movs	r2, #32
 8000a02:	2100      	movs	r1, #0
 8000a04:	483b      	ldr	r0, [pc, #236]	@ (8000af4 <SPI_Communication+0x2c0>)
 8000a06:	f007 fb3d 	bl	8008084 <memset>
 8000a0a:	e174      	b.n	8000cf6 <SPI_Communication+0x4c2>
            	}
///////////////////////////////////////////////////////////////////////////////////////////////////////////
            	else if(strcmp(command,"ROT")==0)
 8000a0c:	494b      	ldr	r1, [pc, #300]	@ (8000b3c <SPI_Communication+0x308>)
 8000a0e:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8000a10:	f7ff fc06 	bl	8000220 <strcmp>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d11d      	bne.n	8000a56 <SPI_Communication+0x222>
            	{
            		    int number;
            		    sscanf(RxBuffer, "ROT#%d$", &number);
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	461a      	mov	r2, r3
 8000a20:	4947      	ldr	r1, [pc, #284]	@ (8000b40 <SPI_Communication+0x30c>)
 8000a22:	4834      	ldr	r0, [pc, #208]	@ (8000af4 <SPI_Communication+0x2c0>)
 8000a24:	f007 fa2a 	bl	8007e7c <siscanf>
            		    Motor_Steer(number);
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	b25b      	sxtb	r3, r3
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f000 fd3d 	bl	80014ac <Motor_Steer>
            		memset(TxBuffer, '\0', sizeof(TxBuffer));
 8000a32:	2220      	movs	r2, #32
 8000a34:	2100      	movs	r1, #0
 8000a36:	4834      	ldr	r0, [pc, #208]	@ (8000b08 <SPI_Communication+0x2d4>)
 8000a38:	f007 fb24 	bl	8008084 <memset>
            		char *str = "ROT#OK$";
 8000a3c:	4b41      	ldr	r3, [pc, #260]	@ (8000b44 <SPI_Communication+0x310>)
 8000a3e:	62bb      	str	r3, [r7, #40]	@ 0x28
            		strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
 8000a40:	221f      	movs	r2, #31
 8000a42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000a44:	4830      	ldr	r0, [pc, #192]	@ (8000b08 <SPI_Communication+0x2d4>)
 8000a46:	f007 fb25 	bl	8008094 <strncpy>
            		memset(RxBuffer, '\0', sizeof(RxBuffer));
 8000a4a:	2220      	movs	r2, #32
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4829      	ldr	r0, [pc, #164]	@ (8000af4 <SPI_Communication+0x2c0>)
 8000a50:	f007 fb18 	bl	8008084 <memset>
 8000a54:	e14f      	b.n	8000cf6 <SPI_Communication+0x4c2>
            	}
/////////////////////////////////////////////////////////////////////////////////////////////////////////
            	else if(strcmp(command,"AROT")==0)
 8000a56:	493c      	ldr	r1, [pc, #240]	@ (8000b48 <SPI_Communication+0x314>)
 8000a58:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8000a5a:	f7ff fbe1 	bl	8000220 <strcmp>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d17d      	bne.n	8000b60 <SPI_Communication+0x32c>
            	{
            	    uint32_t start_time=HAL_GetTick();
 8000a64:	f001 fcba 	bl	80023dc <HAL_GetTick>
 8000a68:	6438      	str	r0, [r7, #64]	@ 0x40
            	    uint32_t timeout1=10000;
 8000a6a:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c

            		 int number;
            		 sscanf(RxBuffer, "AROT#%d$", &number);
 8000a70:	f107 0310 	add.w	r3, r7, #16
 8000a74:	461a      	mov	r2, r3
 8000a76:	4935      	ldr	r1, [pc, #212]	@ (8000b4c <SPI_Communication+0x318>)
 8000a78:	481e      	ldr	r0, [pc, #120]	@ (8000af4 <SPI_Communication+0x2c0>)
 8000a7a:	f007 f9ff 	bl	8007e7c <siscanf>


            		 ABSRotateHead(number);
 8000a7e:	693b      	ldr	r3, [r7, #16]
 8000a80:	b25b      	sxtb	r3, r3
 8000a82:	4618      	mov	r0, r3
 8000a84:	f000 fdb4 	bl	80015f0 <ABSRotateHead>
            		 //char number1=number;
            		 memset(TxBuffer, '\0', sizeof(TxBuffer));
 8000a88:	2220      	movs	r2, #32
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	481e      	ldr	r0, [pc, #120]	@ (8000b08 <SPI_Communication+0x2d4>)
 8000a8e:	f007 faf9 	bl	8008084 <memset>
            		 //if ()
            		 if (number== 1){
 8000a92:	693b      	ldr	r3, [r7, #16]
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d107      	bne.n	8000aa8 <SPI_Communication+0x274>
            		 	 char *str = "AROT#1#OK$";
 8000a98:	4b2d      	ldr	r3, [pc, #180]	@ (8000b50 <SPI_Communication+0x31c>)
 8000a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            		 	 strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
 8000a9c:	221f      	movs	r2, #31
 8000a9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000aa0:	4819      	ldr	r0, [pc, #100]	@ (8000b08 <SPI_Communication+0x2d4>)
 8000aa2:	f007 faf7 	bl	8008094 <strncpy>
 8000aa6:	e01f      	b.n	8000ae8 <SPI_Communication+0x2b4>
            		 }
            		 else if (number==0){
 8000aa8:	693b      	ldr	r3, [r7, #16]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d107      	bne.n	8000abe <SPI_Communication+0x28a>
            			 char *str = "AROT#0#OK$";
 8000aae:	4b29      	ldr	r3, [pc, #164]	@ (8000b54 <SPI_Communication+0x320>)
 8000ab0:	633b      	str	r3, [r7, #48]	@ 0x30
            			 strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
 8000ab2:	221f      	movs	r2, #31
 8000ab4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000ab6:	4814      	ldr	r0, [pc, #80]	@ (8000b08 <SPI_Communication+0x2d4>)
 8000ab8:	f007 faec 	bl	8008094 <strncpy>
 8000abc:	e014      	b.n	8000ae8 <SPI_Communication+0x2b4>
            		 }
            		 else if (number==2){
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	2b02      	cmp	r3, #2
 8000ac2:	d107      	bne.n	8000ad4 <SPI_Communication+0x2a0>
            		 	 char *str = "AROT#2#OK$";
 8000ac4:	4b24      	ldr	r3, [pc, #144]	@ (8000b58 <SPI_Communication+0x324>)
 8000ac6:	637b      	str	r3, [r7, #52]	@ 0x34
            		 	 strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
 8000ac8:	221f      	movs	r2, #31
 8000aca:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000acc:	480e      	ldr	r0, [pc, #56]	@ (8000b08 <SPI_Communication+0x2d4>)
 8000ace:	f007 fae1 	bl	8008094 <strncpy>
 8000ad2:	e009      	b.n	8000ae8 <SPI_Communication+0x2b4>
            		 }
            		 else if (number==3){
 8000ad4:	693b      	ldr	r3, [r7, #16]
 8000ad6:	2b03      	cmp	r3, #3
 8000ad8:	d106      	bne.n	8000ae8 <SPI_Communication+0x2b4>
            		 	 char *str = "AROT#3#OK$";
 8000ada:	4b20      	ldr	r3, [pc, #128]	@ (8000b5c <SPI_Communication+0x328>)
 8000adc:	63bb      	str	r3, [r7, #56]	@ 0x38
            		 	 strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
 8000ade:	221f      	movs	r2, #31
 8000ae0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8000ae2:	4809      	ldr	r0, [pc, #36]	@ (8000b08 <SPI_Communication+0x2d4>)
 8000ae4:	f007 fad6 	bl	8008094 <strncpy>
            		 }
            		// strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
            		 memset(RxBuffer, '\0', sizeof(RxBuffer));
 8000ae8:	2220      	movs	r2, #32
 8000aea:	2100      	movs	r1, #0
 8000aec:	4801      	ldr	r0, [pc, #4]	@ (8000af4 <SPI_Communication+0x2c0>)
 8000aee:	f007 fac9 	bl	8008084 <memset>
 8000af2:	e100      	b.n	8000cf6 <SPI_Communication+0x4c2>
 8000af4:	20000088 	.word	0x20000088
 8000af8:	200000f4 	.word	0x200000f4
 8000afc:	08009454 	.word	0x08009454
 8000b00:	0800945c 	.word	0x0800945c
 8000b04:	200002d0 	.word	0x200002d0
 8000b08:	200000a8 	.word	0x200000a8
 8000b0c:	08009464 	.word	0x08009464
 8000b10:	08009478 	.word	0x08009478
 8000b14:	08009484 	.word	0x08009484
 8000b18:	08009498 	.word	0x08009498
 8000b1c:	080094a4 	.word	0x080094a4
 8000b20:	080094b0 	.word	0x080094b0
 8000b24:	0800944c 	.word	0x0800944c
 8000b28:	080094bc 	.word	0x080094bc
 8000b2c:	080094c4 	.word	0x080094c4
 8000b30:	200000e9 	.word	0x200000e9
 8000b34:	080094d0 	.word	0x080094d0
 8000b38:	080094e0 	.word	0x080094e0
 8000b3c:	080094f0 	.word	0x080094f0
 8000b40:	080094f4 	.word	0x080094f4
 8000b44:	080094fc 	.word	0x080094fc
 8000b48:	08009504 	.word	0x08009504
 8000b4c:	0800950c 	.word	0x0800950c
 8000b50:	08009518 	.word	0x08009518
 8000b54:	08009524 	.word	0x08009524
 8000b58:	08009530 	.word	0x08009530
 8000b5c:	0800953c 	.word	0x0800953c
            	}
/////////////////////////////////////////////////////////////////////////////////////////////////////////
            	else if(strcmp(command,"TILEBASE")==0) //bazowanie obortu kafelka
 8000b60:	4978      	ldr	r1, [pc, #480]	@ (8000d44 <SPI_Communication+0x510>)
 8000b62:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8000b64:	f7ff fb5c 	bl	8000220 <strcmp>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d12a      	bne.n	8000bc4 <SPI_Communication+0x390>
            	{
            		HeadBase();
 8000b6e:	f000 ffd9 	bl	8001b24 <HeadBase>

            		memset(TxBuffer, '\0', sizeof(TxBuffer));
 8000b72:	2220      	movs	r2, #32
 8000b74:	2100      	movs	r1, #0
 8000b76:	4874      	ldr	r0, [pc, #464]	@ (8000d48 <SPI_Communication+0x514>)
 8000b78:	f007 fa84 	bl	8008084 <memset>
            		GPIO_PinState current_state = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7); // Read pin state
 8000b7c:	2180      	movs	r1, #128	@ 0x80
 8000b7e:	4873      	ldr	r0, [pc, #460]	@ (8000d4c <SPI_Communication+0x518>)
 8000b80:	f001 ffac 	bl	8002adc <HAL_GPIO_ReadPin>
 8000b84:	4603      	mov	r3, r0
 8000b86:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            		if (current_state == GPIO_PIN_SET){
 8000b8a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d107      	bne.n	8000ba2 <SPI_Communication+0x36e>
            			char* str = "TILEBASE#OK$";
 8000b92:	4b6f      	ldr	r3, [pc, #444]	@ (8000d50 <SPI_Communication+0x51c>)
 8000b94:	647b      	str	r3, [r7, #68]	@ 0x44
            			strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
 8000b96:	221f      	movs	r2, #31
 8000b98:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8000b9a:	486b      	ldr	r0, [pc, #428]	@ (8000d48 <SPI_Communication+0x514>)
 8000b9c:	f007 fa7a 	bl	8008094 <strncpy>
 8000ba0:	e00a      	b.n	8000bb8 <SPI_Communication+0x384>
            		}
            		else if (current_state == GPIO_PIN_RESET){
 8000ba2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d106      	bne.n	8000bb8 <SPI_Communication+0x384>
            			char* str = "TILEBASE#NOK$";
 8000baa:	4b6a      	ldr	r3, [pc, #424]	@ (8000d54 <SPI_Communication+0x520>)
 8000bac:	64bb      	str	r3, [r7, #72]	@ 0x48
            			strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
 8000bae:	221f      	movs	r2, #31
 8000bb0:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8000bb2:	4865      	ldr	r0, [pc, #404]	@ (8000d48 <SPI_Communication+0x514>)
 8000bb4:	f007 fa6e 	bl	8008094 <strncpy>
            		}
            		//strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
            		memset(RxBuffer, '\0', sizeof(RxBuffer));
 8000bb8:	2220      	movs	r2, #32
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4866      	ldr	r0, [pc, #408]	@ (8000d58 <SPI_Communication+0x524>)
 8000bbe:	f007 fa61 	bl	8008084 <memset>
 8000bc2:	e098      	b.n	8000cf6 <SPI_Communication+0x4c2>
            	}
////////////////////////////////////////////////////////////////////////////////////////////////////////
            	else if(strcmp(command,"SWTCH")==0) //Wysyłka stanu obrotu czujnika 0-wcisniety, 1-pusty
 8000bc4:	4965      	ldr	r1, [pc, #404]	@ (8000d5c <SPI_Communication+0x528>)
 8000bc6:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8000bc8:	f7ff fb2a 	bl	8000220 <strcmp>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d151      	bne.n	8000c76 <SPI_Communication+0x442>
            	{
            		HAL_UART_Transmit(&huart5, (uint8_t *)RxBuffer, strlen(RxBuffer), HAL_MAX_DELAY);
 8000bd2:	4861      	ldr	r0, [pc, #388]	@ (8000d58 <SPI_Communication+0x524>)
 8000bd4:	f7ff fb2e 	bl	8000234 <strlen>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	b29a      	uxth	r2, r3
 8000bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8000be0:	495d      	ldr	r1, [pc, #372]	@ (8000d58 <SPI_Communication+0x524>)
 8000be2:	485f      	ldr	r0, [pc, #380]	@ (8000d60 <SPI_Communication+0x52c>)
 8000be4:	f005 fc34 	bl	8006450 <HAL_UART_Transmit>
            		//HAL_Delay(1);
            		char* received_data = swtch_control();
 8000be8:	f7ff fdb4 	bl	8000754 <swtch_control>
 8000bec:	6538      	str	r0, [r7, #80]	@ 0x50
            		char* str;
            		memset(TxBuffer, '\0', sizeof(TxBuffer));
 8000bee:	2220      	movs	r2, #32
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4855      	ldr	r0, [pc, #340]	@ (8000d48 <SPI_Communication+0x514>)
 8000bf4:	f007 fa46 	bl	8008084 <memset>
            		if((strcmp(received_data, "S#0000$")==0)){str = "SWTCH#0#0#0#0$";}
 8000bf8:	495a      	ldr	r1, [pc, #360]	@ (8000d64 <SPI_Communication+0x530>)
 8000bfa:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8000bfc:	f7ff fb10 	bl	8000220 <strcmp>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d102      	bne.n	8000c0c <SPI_Communication+0x3d8>
 8000c06:	4b58      	ldr	r3, [pc, #352]	@ (8000d68 <SPI_Communication+0x534>)
 8000c08:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000c0a:	e029      	b.n	8000c60 <SPI_Communication+0x42c>
            		else if ((strcmp(received_data, "S#1000$")==0)){str = "SWTCH#1#0#0#0$";}
 8000c0c:	4957      	ldr	r1, [pc, #348]	@ (8000d6c <SPI_Communication+0x538>)
 8000c0e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8000c10:	f7ff fb06 	bl	8000220 <strcmp>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d102      	bne.n	8000c20 <SPI_Communication+0x3ec>
 8000c1a:	4b55      	ldr	r3, [pc, #340]	@ (8000d70 <SPI_Communication+0x53c>)
 8000c1c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000c1e:	e01f      	b.n	8000c60 <SPI_Communication+0x42c>
            		else if ((strcmp(received_data, "S#0100$")==0)){str = "SWTCH#0#1#0#0$";}
 8000c20:	4954      	ldr	r1, [pc, #336]	@ (8000d74 <SPI_Communication+0x540>)
 8000c22:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8000c24:	f7ff fafc 	bl	8000220 <strcmp>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d102      	bne.n	8000c34 <SPI_Communication+0x400>
 8000c2e:	4b52      	ldr	r3, [pc, #328]	@ (8000d78 <SPI_Communication+0x544>)
 8000c30:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000c32:	e015      	b.n	8000c60 <SPI_Communication+0x42c>
            		else if ((strcmp(received_data, "S#0010$")==0)){str = "SWTCH#0#0#1#0$";}
 8000c34:	4951      	ldr	r1, [pc, #324]	@ (8000d7c <SPI_Communication+0x548>)
 8000c36:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8000c38:	f7ff faf2 	bl	8000220 <strcmp>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d102      	bne.n	8000c48 <SPI_Communication+0x414>
 8000c42:	4b4f      	ldr	r3, [pc, #316]	@ (8000d80 <SPI_Communication+0x54c>)
 8000c44:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000c46:	e00b      	b.n	8000c60 <SPI_Communication+0x42c>
            		else if ((strcmp(received_data, "S#0001$")==0)){str = "SWTCH#0#0#0#1$";}
 8000c48:	494e      	ldr	r1, [pc, #312]	@ (8000d84 <SPI_Communication+0x550>)
 8000c4a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8000c4c:	f7ff fae8 	bl	8000220 <strcmp>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d102      	bne.n	8000c5c <SPI_Communication+0x428>
 8000c56:	4b4c      	ldr	r3, [pc, #304]	@ (8000d88 <SPI_Communication+0x554>)
 8000c58:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000c5a:	e001      	b.n	8000c60 <SPI_Communication+0x42c>
            		else{str="SWTCH#ERR$";}
 8000c5c:	4b4b      	ldr	r3, [pc, #300]	@ (8000d8c <SPI_Communication+0x558>)
 8000c5e:	65bb      	str	r3, [r7, #88]	@ 0x58

            		strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
 8000c60:	221f      	movs	r2, #31
 8000c62:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8000c64:	4838      	ldr	r0, [pc, #224]	@ (8000d48 <SPI_Communication+0x514>)
 8000c66:	f007 fa15 	bl	8008094 <strncpy>
            		memset(RxBuffer, '\0', sizeof(RxBuffer));
 8000c6a:	2220      	movs	r2, #32
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	483a      	ldr	r0, [pc, #232]	@ (8000d58 <SPI_Communication+0x524>)
 8000c70:	f007 fa08 	bl	8008084 <memset>
 8000c74:	e03f      	b.n	8000cf6 <SPI_Communication+0x4c2>

            	}
            	////////////////////////////////////////////////////////////////////////////////////////////////////////
            	else if(strcmp(command,"GAPS")==0) //Wysyłka stanu obrotu czujnika 0-wcisniety, 1-pusty
 8000c76:	4946      	ldr	r1, [pc, #280]	@ (8000d90 <SPI_Communication+0x55c>)
 8000c78:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8000c7a:	f7ff fad1 	bl	8000220 <strcmp>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d138      	bne.n	8000cf6 <SPI_Communication+0x4c2>
            	{
            		HAL_UART_Transmit(&huart5, (uint8_t *)RxBuffer, strlen(RxBuffer), HAL_MAX_DELAY);
 8000c84:	4834      	ldr	r0, [pc, #208]	@ (8000d58 <SPI_Communication+0x524>)
 8000c86:	f7ff fad5 	bl	8000234 <strlen>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	b29a      	uxth	r2, r3
 8000c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c92:	4931      	ldr	r1, [pc, #196]	@ (8000d58 <SPI_Communication+0x524>)
 8000c94:	4832      	ldr	r0, [pc, #200]	@ (8000d60 <SPI_Communication+0x52c>)
 8000c96:	f005 fbdb 	bl	8006450 <HAL_UART_Transmit>
            		//HAL_Delay(1);
            		char* received_data = gaps_control();
 8000c9a:	f7ff fd93 	bl	80007c4 <gaps_control>
 8000c9e:	6578      	str	r0, [r7, #84]	@ 0x54
            		char output[11];
            		sprintf(output,"G#%c#%c#%c#%c$",received_data[2],received_data[3],received_data[4],received_data[5] );
 8000ca0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000ca2:	3302      	adds	r3, #2
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000caa:	3303      	adds	r3, #3
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	461c      	mov	r4, r3
 8000cb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000cb2:	3304      	adds	r3, #4
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000cba:	3305      	adds	r3, #5
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	1d38      	adds	r0, r7, #4
 8000cc0:	9301      	str	r3, [sp, #4]
 8000cc2:	9200      	str	r2, [sp, #0]
 8000cc4:	4623      	mov	r3, r4
 8000cc6:	460a      	mov	r2, r1
 8000cc8:	4932      	ldr	r1, [pc, #200]	@ (8000d94 <SPI_Communication+0x560>)
 8000cca:	f007 f8b7 	bl	8007e3c <siprintf>
            		printf("%s\n", output);
 8000cce:	1d3b      	adds	r3, r7, #4
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f007 f8ab 	bl	8007e2c <puts>
            		memset(TxBuffer, '\0', sizeof(TxBuffer));
 8000cd6:	2220      	movs	r2, #32
 8000cd8:	2100      	movs	r1, #0
 8000cda:	481b      	ldr	r0, [pc, #108]	@ (8000d48 <SPI_Communication+0x514>)
 8000cdc:	f007 f9d2 	bl	8008084 <memset>

            		strncpy(TxBuffer, output, sizeof(TxBuffer) - 1);
 8000ce0:	1d3b      	adds	r3, r7, #4
 8000ce2:	221f      	movs	r2, #31
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4818      	ldr	r0, [pc, #96]	@ (8000d48 <SPI_Communication+0x514>)
 8000ce8:	f007 f9d4 	bl	8008094 <strncpy>
            		memset(RxBuffer, '\0', sizeof(RxBuffer));
 8000cec:	2220      	movs	r2, #32
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4819      	ldr	r0, [pc, #100]	@ (8000d58 <SPI_Communication+0x524>)
 8000cf2:	f007 f9c7 	bl	8008084 <memset>

            	}

                HAL_SPI_Transmit(&hspi1, (uint8_t *)TxBuffer, strlen(TxBuffer), HAL_MAX_DELAY);
 8000cf6:	4814      	ldr	r0, [pc, #80]	@ (8000d48 <SPI_Communication+0x514>)
 8000cf8:	f7ff fa9c 	bl	8000234 <strlen>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	b29a      	uxth	r2, r3
 8000d00:	f04f 33ff 	mov.w	r3, #4294967295
 8000d04:	4910      	ldr	r1, [pc, #64]	@ (8000d48 <SPI_Communication+0x514>)
 8000d06:	4824      	ldr	r0, [pc, #144]	@ (8000d98 <SPI_Communication+0x564>)
 8000d08:	f003 f80d 	bl	8003d26 <HAL_SPI_Transmit>
            	//HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)TxBuffer, strlen(TxBuffer));
                index = 0; // Reset buffer index
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
                //memset(TxBuffer, '\0', sizeof(TxBuffer));
                free(command);
 8000d12:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8000d14:	f006 febc 	bl	8007a90 <free>
                command = NULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	663b      	str	r3, [r7, #96]	@ 0x60
        }

        // Update pin state
        pinstate = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 8000d1c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d24:	f001 feda 	bl	8002adc <HAL_GPIO_ReadPin>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
    while (!pinstate) {
 8000d2e:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f43f ad98 	beq.w	8000868 <SPI_Communication+0x34>

    }
    }
}
 8000d38:	bf00      	nop
 8000d3a:	bf00      	nop
 8000d3c:	376c      	adds	r7, #108	@ 0x6c
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd90      	pop	{r4, r7, pc}
 8000d42:	bf00      	nop
 8000d44:	08009548 	.word	0x08009548
 8000d48:	200000a8 	.word	0x200000a8
 8000d4c:	48001000 	.word	0x48001000
 8000d50:	08009554 	.word	0x08009554
 8000d54:	08009564 	.word	0x08009564
 8000d58:	20000088 	.word	0x20000088
 8000d5c:	08009574 	.word	0x08009574
 8000d60:	200002d0 	.word	0x200002d0
 8000d64:	0800957c 	.word	0x0800957c
 8000d68:	08009584 	.word	0x08009584
 8000d6c:	08009594 	.word	0x08009594
 8000d70:	0800959c 	.word	0x0800959c
 8000d74:	080095ac 	.word	0x080095ac
 8000d78:	080095b4 	.word	0x080095b4
 8000d7c:	080095c4 	.word	0x080095c4
 8000d80:	080095cc 	.word	0x080095cc
 8000d84:	080095dc 	.word	0x080095dc
 8000d88:	080095e4 	.word	0x080095e4
 8000d8c:	080095f4 	.word	0x080095f4
 8000d90:	08009600 	.word	0x08009600
 8000d94:	08009608 	.word	0x08009608
 8000d98:	200000f4 	.word	0x200000f4

08000d9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000da0:	f001 fab7 	bl	8002312 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000da4:	f000 f811 	bl	8000dca <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000da8:	f000 faac 	bl	8001304 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000dac:	f000 f85a 	bl	8000e64 <MX_SPI1_Init>
  MX_UART5_Init();
 8000db0:	f000 fa5c 	bl	800126c <MX_UART5_Init>
  MX_UART4_Init();
 8000db4:	f000 fa0e 	bl	80011d4 <MX_UART4_Init>
  MX_TIM1_Init();
 8000db8:	f000 f88c 	bl	8000ed4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000dbc:	f000 f95e 	bl	800107c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000dc0:	f000 f9b2 	bl	8001128 <MX_TIM4_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  SPI_Communication();
 8000dc4:	f7ff fd36 	bl	8000834 <SPI_Communication>
 8000dc8:	e7fc      	b.n	8000dc4 <main+0x28>

08000dca <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b094      	sub	sp, #80	@ 0x50
 8000dce:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dd0:	f107 0318 	add.w	r3, r7, #24
 8000dd4:	2238      	movs	r2, #56	@ 0x38
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f007 f953 	bl	8008084 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dde:	1d3b      	adds	r3, r7, #4
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dec:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000df0:	f001 febe 	bl	8002b70 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000df4:	2302      	movs	r3, #2
 8000df6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000df8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000dfc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dfe:	2340      	movs	r3, #64	@ 0x40
 8000e00:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e02:	2302      	movs	r3, #2
 8000e04:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e06:	2302      	movs	r3, #2
 8000e08:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000e0e:	2308      	movs	r3, #8
 8000e10:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e12:	2302      	movs	r3, #2
 8000e14:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e16:	2302      	movs	r3, #2
 8000e18:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e1e:	f107 0318 	add.w	r3, r7, #24
 8000e22:	4618      	mov	r0, r3
 8000e24:	f001 ff58 	bl	8002cd8 <HAL_RCC_OscConfig>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000e2e:	f000 fb23 	bl	8001478 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e32:	230f      	movs	r3, #15
 8000e34:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e36:	2303      	movs	r3, #3
 8000e38:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000e3a:	2380      	movs	r3, #128	@ 0x80
 8000e3c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e46:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f002 fa55 	bl	80032fc <HAL_RCC_ClockConfig>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000e58:	f000 fb0e 	bl	8001478 <Error_Handler>
  }
}
 8000e5c:	bf00      	nop
 8000e5e:	3750      	adds	r7, #80	@ 0x50
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e68:	4b18      	ldr	r3, [pc, #96]	@ (8000ecc <MX_SPI1_Init+0x68>)
 8000e6a:	4a19      	ldr	r2, [pc, #100]	@ (8000ed0 <MX_SPI1_Init+0x6c>)
 8000e6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000e6e:	4b17      	ldr	r3, [pc, #92]	@ (8000ecc <MX_SPI1_Init+0x68>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e74:	4b15      	ldr	r3, [pc, #84]	@ (8000ecc <MX_SPI1_Init+0x68>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e7a:	4b14      	ldr	r3, [pc, #80]	@ (8000ecc <MX_SPI1_Init+0x68>)
 8000e7c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000e80:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e82:	4b12      	ldr	r3, [pc, #72]	@ (8000ecc <MX_SPI1_Init+0x68>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e88:	4b10      	ldr	r3, [pc, #64]	@ (8000ecc <MX_SPI1_Init+0x68>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000e8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000ecc <MX_SPI1_Init+0x68>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e94:	4b0d      	ldr	r3, [pc, #52]	@ (8000ecc <MX_SPI1_Init+0x68>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000ecc <MX_SPI1_Init+0x68>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8000ecc <MX_SPI1_Init+0x68>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ea6:	4b09      	ldr	r3, [pc, #36]	@ (8000ecc <MX_SPI1_Init+0x68>)
 8000ea8:	2207      	movs	r2, #7
 8000eaa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000eac:	4b07      	ldr	r3, [pc, #28]	@ (8000ecc <MX_SPI1_Init+0x68>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000eb2:	4b06      	ldr	r3, [pc, #24]	@ (8000ecc <MX_SPI1_Init+0x68>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000eb8:	4804      	ldr	r0, [pc, #16]	@ (8000ecc <MX_SPI1_Init+0x68>)
 8000eba:	f002 fe89 	bl	8003bd0 <HAL_SPI_Init>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8000ec4:	f000 fad8 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	200000f4 	.word	0x200000f4
 8000ed0:	40013000 	.word	0x40013000

08000ed4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b09c      	sub	sp, #112	@ 0x70
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eda:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	605a      	str	r2, [r3, #4]
 8000ee4:	609a      	str	r2, [r3, #8]
 8000ee6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ef4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
 8000f04:	615a      	str	r2, [r3, #20]
 8000f06:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f08:	1d3b      	adds	r3, r7, #4
 8000f0a:	2234      	movs	r2, #52	@ 0x34
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f007 f8b8 	bl	8008084 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f14:	4b57      	ldr	r3, [pc, #348]	@ (8001074 <MX_TIM1_Init+0x1a0>)
 8000f16:	4a58      	ldr	r2, [pc, #352]	@ (8001078 <MX_TIM1_Init+0x1a4>)
 8000f18:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f1a:	4b56      	ldr	r3, [pc, #344]	@ (8001074 <MX_TIM1_Init+0x1a0>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f20:	4b54      	ldr	r3, [pc, #336]	@ (8001074 <MX_TIM1_Init+0x1a0>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 399;
 8000f26:	4b53      	ldr	r3, [pc, #332]	@ (8001074 <MX_TIM1_Init+0x1a0>)
 8000f28:	f240 128f 	movw	r2, #399	@ 0x18f
 8000f2c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f2e:	4b51      	ldr	r3, [pc, #324]	@ (8001074 <MX_TIM1_Init+0x1a0>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f34:	4b4f      	ldr	r3, [pc, #316]	@ (8001074 <MX_TIM1_Init+0x1a0>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f3a:	4b4e      	ldr	r3, [pc, #312]	@ (8001074 <MX_TIM1_Init+0x1a0>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f40:	484c      	ldr	r0, [pc, #304]	@ (8001074 <MX_TIM1_Init+0x1a0>)
 8000f42:	f003 fd7b 	bl	8004a3c <HAL_TIM_Base_Init>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000f4c:	f000 fa94 	bl	8001478 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f54:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f56:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4845      	ldr	r0, [pc, #276]	@ (8001074 <MX_TIM1_Init+0x1a0>)
 8000f5e:	f004 facf 	bl	8005500 <HAL_TIM_ConfigClockSource>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000f68:	f000 fa86 	bl	8001478 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f6c:	4841      	ldr	r0, [pc, #260]	@ (8001074 <MX_TIM1_Init+0x1a0>)
 8000f6e:	f003 fdbc 	bl	8004aea <HAL_TIM_PWM_Init>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000f78:	f000 fa7e 	bl	8001478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f80:	2300      	movs	r3, #0
 8000f82:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f84:	2300      	movs	r3, #0
 8000f86:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f88:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4839      	ldr	r0, [pc, #228]	@ (8001074 <MX_TIM1_Init+0x1a0>)
 8000f90:	f005 f89e 	bl	80060d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000f9a:	f000 fa6d 	bl	8001478 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f9e:	2360      	movs	r3, #96	@ 0x60
 8000fa0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000faa:	2300      	movs	r3, #0
 8000fac:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fba:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	482c      	ldr	r0, [pc, #176]	@ (8001074 <MX_TIM1_Init+0x1a0>)
 8000fc4:	f004 f988 	bl	80052d8 <HAL_TIM_PWM_ConfigChannel>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000fce:	f000 fa53 	bl	8001478 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fd2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000fd6:	2204      	movs	r2, #4
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4826      	ldr	r0, [pc, #152]	@ (8001074 <MX_TIM1_Init+0x1a0>)
 8000fdc:	f004 f97c 	bl	80052d8 <HAL_TIM_PWM_ConfigChannel>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000fe6:	f000 fa47 	bl	8001478 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000fea:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000fee:	2208      	movs	r2, #8
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4820      	ldr	r0, [pc, #128]	@ (8001074 <MX_TIM1_Init+0x1a0>)
 8000ff4:	f004 f970 	bl	80052d8 <HAL_TIM_PWM_ConfigChannel>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000ffe:	f000 fa3b 	bl	8001478 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001002:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001006:	220c      	movs	r2, #12
 8001008:	4619      	mov	r1, r3
 800100a:	481a      	ldr	r0, [pc, #104]	@ (8001074 <MX_TIM1_Init+0x1a0>)
 800100c:	f004 f964 	bl	80052d8 <HAL_TIM_PWM_ConfigChannel>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8001016:	f000 fa2f 	bl	8001478 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800101a:	2300      	movs	r3, #0
 800101c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800101e:	2300      	movs	r3, #0
 8001020:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800102a:	2300      	movs	r3, #0
 800102c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800102e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001032:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001034:	2300      	movs	r3, #0
 8001036:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001038:	2300      	movs	r3, #0
 800103a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800103c:	2300      	movs	r3, #0
 800103e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001040:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001044:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800104a:	2300      	movs	r3, #0
 800104c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800104e:	2300      	movs	r3, #0
 8001050:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001052:	1d3b      	adds	r3, r7, #4
 8001054:	4619      	mov	r1, r3
 8001056:	4807      	ldr	r0, [pc, #28]	@ (8001074 <MX_TIM1_Init+0x1a0>)
 8001058:	f005 f8d0 	bl	80061fc <HAL_TIMEx_ConfigBreakDeadTime>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_TIM1_Init+0x192>
  {
    Error_Handler();
 8001062:	f000 fa09 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001066:	4803      	ldr	r0, [pc, #12]	@ (8001074 <MX_TIM1_Init+0x1a0>)
 8001068:	f000 ff22 	bl	8001eb0 <HAL_TIM_MspPostInit>

}
 800106c:	bf00      	nop
 800106e:	3770      	adds	r7, #112	@ 0x70
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000158 	.word	0x20000158
 8001078:	40012c00 	.word	0x40012c00

0800107c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08c      	sub	sp, #48	@ 0x30
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001082:	f107 030c 	add.w	r3, r7, #12
 8001086:	2224      	movs	r2, #36	@ 0x24
 8001088:	2100      	movs	r1, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f006 fffa 	bl	8008084 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001090:	463b      	mov	r3, r7
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800109a:	4b21      	ldr	r3, [pc, #132]	@ (8001120 <MX_TIM3_Init+0xa4>)
 800109c:	4a21      	ldr	r2, [pc, #132]	@ (8001124 <MX_TIM3_Init+0xa8>)
 800109e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80010a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001120 <MX_TIM3_Init+0xa4>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001120 <MX_TIM3_Init+0xa4>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80010ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001120 <MX_TIM3_Init+0xa4>)
 80010ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010b2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001120 <MX_TIM3_Init+0xa4>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ba:	4b19      	ldr	r3, [pc, #100]	@ (8001120 <MX_TIM3_Init+0xa4>)
 80010bc:	2200      	movs	r2, #0
 80010be:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80010c0:	2303      	movs	r3, #3
 80010c2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010c4:	2300      	movs	r3, #0
 80010c6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010c8:	2301      	movs	r3, #1
 80010ca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010cc:	2300      	movs	r3, #0
 80010ce:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010d4:	2300      	movs	r3, #0
 80010d6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010d8:	2301      	movs	r3, #1
 80010da:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010dc:	2300      	movs	r3, #0
 80010de:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80010e4:	f107 030c 	add.w	r3, r7, #12
 80010e8:	4619      	mov	r1, r3
 80010ea:	480d      	ldr	r0, [pc, #52]	@ (8001120 <MX_TIM3_Init+0xa4>)
 80010ec:	f003 fe70 	bl	8004dd0 <HAL_TIM_Encoder_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80010f6:	f000 f9bf 	bl	8001478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010fa:	2300      	movs	r3, #0
 80010fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010fe:	2300      	movs	r3, #0
 8001100:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001102:	463b      	mov	r3, r7
 8001104:	4619      	mov	r1, r3
 8001106:	4806      	ldr	r0, [pc, #24]	@ (8001120 <MX_TIM3_Init+0xa4>)
 8001108:	f004 ffe2 	bl	80060d0 <HAL_TIMEx_MasterConfigSynchronization>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001112:	f000 f9b1 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001116:	bf00      	nop
 8001118:	3730      	adds	r7, #48	@ 0x30
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	200001a4 	.word	0x200001a4
 8001124:	40000400 	.word	0x40000400

08001128 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08c      	sub	sp, #48	@ 0x30
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800112e:	f107 030c 	add.w	r3, r7, #12
 8001132:	2224      	movs	r2, #36	@ 0x24
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f006 ffa4 	bl	8008084 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800113c:	463b      	mov	r3, r7
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001146:	4b21      	ldr	r3, [pc, #132]	@ (80011cc <MX_TIM4_Init+0xa4>)
 8001148:	4a21      	ldr	r2, [pc, #132]	@ (80011d0 <MX_TIM4_Init+0xa8>)
 800114a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 800114c:	4b1f      	ldr	r3, [pc, #124]	@ (80011cc <MX_TIM4_Init+0xa4>)
 800114e:	2201      	movs	r2, #1
 8001150:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001152:	4b1e      	ldr	r3, [pc, #120]	@ (80011cc <MX_TIM4_Init+0xa4>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001158:	4b1c      	ldr	r3, [pc, #112]	@ (80011cc <MX_TIM4_Init+0xa4>)
 800115a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800115e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001160:	4b1a      	ldr	r3, [pc, #104]	@ (80011cc <MX_TIM4_Init+0xa4>)
 8001162:	2200      	movs	r2, #0
 8001164:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001166:	4b19      	ldr	r3, [pc, #100]	@ (80011cc <MX_TIM4_Init+0xa4>)
 8001168:	2280      	movs	r2, #128	@ 0x80
 800116a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800116c:	2303      	movs	r3, #3
 800116e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001170:	2300      	movs	r3, #0
 8001172:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001174:	2301      	movs	r3, #1
 8001176:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001178:	2300      	movs	r3, #0
 800117a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 800117c:	2301      	movs	r3, #1
 800117e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001180:	2300      	movs	r3, #0
 8001182:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001184:	2301      	movs	r3, #1
 8001186:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001188:	2300      	movs	r3, #0
 800118a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 1;
 800118c:	2301      	movs	r3, #1
 800118e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001190:	f107 030c 	add.w	r3, r7, #12
 8001194:	4619      	mov	r1, r3
 8001196:	480d      	ldr	r0, [pc, #52]	@ (80011cc <MX_TIM4_Init+0xa4>)
 8001198:	f003 fe1a 	bl	8004dd0 <HAL_TIM_Encoder_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80011a2:	f000 f969 	bl	8001478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011a6:	2300      	movs	r3, #0
 80011a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011aa:	2300      	movs	r3, #0
 80011ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011ae:	463b      	mov	r3, r7
 80011b0:	4619      	mov	r1, r3
 80011b2:	4806      	ldr	r0, [pc, #24]	@ (80011cc <MX_TIM4_Init+0xa4>)
 80011b4:	f004 ff8c 	bl	80060d0 <HAL_TIMEx_MasterConfigSynchronization>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80011be:	f000 f95b 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80011c2:	bf00      	nop
 80011c4:	3730      	adds	r7, #48	@ 0x30
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	200001f0 	.word	0x200001f0
 80011d0:	40000800 	.word	0x40000800

080011d4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80011d8:	4b22      	ldr	r3, [pc, #136]	@ (8001264 <MX_UART4_Init+0x90>)
 80011da:	4a23      	ldr	r2, [pc, #140]	@ (8001268 <MX_UART4_Init+0x94>)
 80011dc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80011de:	4b21      	ldr	r3, [pc, #132]	@ (8001264 <MX_UART4_Init+0x90>)
 80011e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011e4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80011e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001264 <MX_UART4_Init+0x90>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80011ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001264 <MX_UART4_Init+0x90>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80011f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001264 <MX_UART4_Init+0x90>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80011f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001264 <MX_UART4_Init+0x90>)
 80011fa:	220c      	movs	r2, #12
 80011fc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011fe:	4b19      	ldr	r3, [pc, #100]	@ (8001264 <MX_UART4_Init+0x90>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001204:	4b17      	ldr	r3, [pc, #92]	@ (8001264 <MX_UART4_Init+0x90>)
 8001206:	2200      	movs	r2, #0
 8001208:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800120a:	4b16      	ldr	r3, [pc, #88]	@ (8001264 <MX_UART4_Init+0x90>)
 800120c:	2200      	movs	r2, #0
 800120e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001210:	4b14      	ldr	r3, [pc, #80]	@ (8001264 <MX_UART4_Init+0x90>)
 8001212:	2200      	movs	r2, #0
 8001214:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001216:	4b13      	ldr	r3, [pc, #76]	@ (8001264 <MX_UART4_Init+0x90>)
 8001218:	2200      	movs	r2, #0
 800121a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800121c:	4811      	ldr	r0, [pc, #68]	@ (8001264 <MX_UART4_Init+0x90>)
 800121e:	f005 f8c7 	bl	80063b0 <HAL_UART_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001228:	f000 f926 	bl	8001478 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800122c:	2100      	movs	r1, #0
 800122e:	480d      	ldr	r0, [pc, #52]	@ (8001264 <MX_UART4_Init+0x90>)
 8001230:	f006 fb5b 	bl	80078ea <HAL_UARTEx_SetTxFifoThreshold>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800123a:	f000 f91d 	bl	8001478 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800123e:	2100      	movs	r1, #0
 8001240:	4808      	ldr	r0, [pc, #32]	@ (8001264 <MX_UART4_Init+0x90>)
 8001242:	f006 fb90 	bl	8007966 <HAL_UARTEx_SetRxFifoThreshold>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 800124c:	f000 f914 	bl	8001478 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001250:	4804      	ldr	r0, [pc, #16]	@ (8001264 <MX_UART4_Init+0x90>)
 8001252:	f006 fb11 	bl	8007878 <HAL_UARTEx_DisableFifoMode>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 800125c:	f000 f90c 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}
 8001264:	2000023c 	.word	0x2000023c
 8001268:	40004c00 	.word	0x40004c00

0800126c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001270:	4b22      	ldr	r3, [pc, #136]	@ (80012fc <MX_UART5_Init+0x90>)
 8001272:	4a23      	ldr	r2, [pc, #140]	@ (8001300 <MX_UART5_Init+0x94>)
 8001274:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001276:	4b21      	ldr	r3, [pc, #132]	@ (80012fc <MX_UART5_Init+0x90>)
 8001278:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800127c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800127e:	4b1f      	ldr	r3, [pc, #124]	@ (80012fc <MX_UART5_Init+0x90>)
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001284:	4b1d      	ldr	r3, [pc, #116]	@ (80012fc <MX_UART5_Init+0x90>)
 8001286:	2200      	movs	r2, #0
 8001288:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800128a:	4b1c      	ldr	r3, [pc, #112]	@ (80012fc <MX_UART5_Init+0x90>)
 800128c:	2200      	movs	r2, #0
 800128e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001290:	4b1a      	ldr	r3, [pc, #104]	@ (80012fc <MX_UART5_Init+0x90>)
 8001292:	220c      	movs	r2, #12
 8001294:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001296:	4b19      	ldr	r3, [pc, #100]	@ (80012fc <MX_UART5_Init+0x90>)
 8001298:	2200      	movs	r2, #0
 800129a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800129c:	4b17      	ldr	r3, [pc, #92]	@ (80012fc <MX_UART5_Init+0x90>)
 800129e:	2200      	movs	r2, #0
 80012a0:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012a2:	4b16      	ldr	r3, [pc, #88]	@ (80012fc <MX_UART5_Init+0x90>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012a8:	4b14      	ldr	r3, [pc, #80]	@ (80012fc <MX_UART5_Init+0x90>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012ae:	4b13      	ldr	r3, [pc, #76]	@ (80012fc <MX_UART5_Init+0x90>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80012b4:	4811      	ldr	r0, [pc, #68]	@ (80012fc <MX_UART5_Init+0x90>)
 80012b6:	f005 f87b 	bl	80063b0 <HAL_UART_Init>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 80012c0:	f000 f8da 	bl	8001478 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012c4:	2100      	movs	r1, #0
 80012c6:	480d      	ldr	r0, [pc, #52]	@ (80012fc <MX_UART5_Init+0x90>)
 80012c8:	f006 fb0f 	bl	80078ea <HAL_UARTEx_SetTxFifoThreshold>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 80012d2:	f000 f8d1 	bl	8001478 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012d6:	2100      	movs	r1, #0
 80012d8:	4808      	ldr	r0, [pc, #32]	@ (80012fc <MX_UART5_Init+0x90>)
 80012da:	f006 fb44 	bl	8007966 <HAL_UARTEx_SetRxFifoThreshold>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 80012e4:	f000 f8c8 	bl	8001478 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80012e8:	4804      	ldr	r0, [pc, #16]	@ (80012fc <MX_UART5_Init+0x90>)
 80012ea:	f006 fac5 	bl	8007878 <HAL_UARTEx_DisableFifoMode>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 80012f4:	f000 f8c0 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80012f8:	bf00      	nop
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	200002d0 	.word	0x200002d0
 8001300:	40005000 	.word	0x40005000

08001304 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08c      	sub	sp, #48	@ 0x30
 8001308:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130a:	f107 031c 	add.w	r3, r7, #28
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	609a      	str	r2, [r3, #8]
 8001316:	60da      	str	r2, [r3, #12]
 8001318:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800131a:	4b54      	ldr	r3, [pc, #336]	@ (800146c <MX_GPIO_Init+0x168>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131e:	4a53      	ldr	r2, [pc, #332]	@ (800146c <MX_GPIO_Init+0x168>)
 8001320:	f043 0310 	orr.w	r3, r3, #16
 8001324:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001326:	4b51      	ldr	r3, [pc, #324]	@ (800146c <MX_GPIO_Init+0x168>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132a:	f003 0310 	and.w	r3, r3, #16
 800132e:	61bb      	str	r3, [r7, #24]
 8001330:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001332:	4b4e      	ldr	r3, [pc, #312]	@ (800146c <MX_GPIO_Init+0x168>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001336:	4a4d      	ldr	r2, [pc, #308]	@ (800146c <MX_GPIO_Init+0x168>)
 8001338:	f043 0320 	orr.w	r3, r3, #32
 800133c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800133e:	4b4b      	ldr	r3, [pc, #300]	@ (800146c <MX_GPIO_Init+0x168>)
 8001340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001342:	f003 0320 	and.w	r3, r3, #32
 8001346:	617b      	str	r3, [r7, #20]
 8001348:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800134a:	4b48      	ldr	r3, [pc, #288]	@ (800146c <MX_GPIO_Init+0x168>)
 800134c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134e:	4a47      	ldr	r2, [pc, #284]	@ (800146c <MX_GPIO_Init+0x168>)
 8001350:	f043 0304 	orr.w	r3, r3, #4
 8001354:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001356:	4b45      	ldr	r3, [pc, #276]	@ (800146c <MX_GPIO_Init+0x168>)
 8001358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800135a:	f003 0304 	and.w	r3, r3, #4
 800135e:	613b      	str	r3, [r7, #16]
 8001360:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001362:	4b42      	ldr	r3, [pc, #264]	@ (800146c <MX_GPIO_Init+0x168>)
 8001364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001366:	4a41      	ldr	r2, [pc, #260]	@ (800146c <MX_GPIO_Init+0x168>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800136e:	4b3f      	ldr	r3, [pc, #252]	@ (800146c <MX_GPIO_Init+0x168>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800137a:	4b3c      	ldr	r3, [pc, #240]	@ (800146c <MX_GPIO_Init+0x168>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137e:	4a3b      	ldr	r2, [pc, #236]	@ (800146c <MX_GPIO_Init+0x168>)
 8001380:	f043 0308 	orr.w	r3, r3, #8
 8001384:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001386:	4b39      	ldr	r3, [pc, #228]	@ (800146c <MX_GPIO_Init+0x168>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138a:	f003 0308 	and.w	r3, r3, #8
 800138e:	60bb      	str	r3, [r7, #8]
 8001390:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001392:	4b36      	ldr	r3, [pc, #216]	@ (800146c <MX_GPIO_Init+0x168>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001396:	4a35      	ldr	r2, [pc, #212]	@ (800146c <MX_GPIO_Init+0x168>)
 8001398:	f043 0302 	orr.w	r3, r3, #2
 800139c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800139e:	4b33      	ldr	r3, [pc, #204]	@ (800146c <MX_GPIO_Init+0x168>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	607b      	str	r3, [r7, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|Side_Board_Reset_Pin, GPIO_PIN_SET);
 80013aa:	2201      	movs	r2, #1
 80013ac:	2118      	movs	r1, #24
 80013ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013b2:	f001 fbab 	bl	8002b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 80013b6:	2201      	movs	r2, #1
 80013b8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80013bc:	482c      	ldr	r0, [pc, #176]	@ (8001470 <MX_GPIO_Init+0x16c>)
 80013be:	f001 fba5 	bl	8002b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80013c2:	237f      	movs	r3, #127	@ 0x7f
 80013c4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c6:	2300      	movs	r3, #0
 80013c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013ce:	f107 031c 	add.w	r3, r7, #28
 80013d2:	4619      	mov	r1, r3
 80013d4:	4826      	ldr	r0, [pc, #152]	@ (8001470 <MX_GPIO_Init+0x16c>)
 80013d6:	f001 f9ff 	bl	80027d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 Side_Board_Reset_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|Side_Board_Reset_Pin;
 80013da:	2318      	movs	r3, #24
 80013dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013de:	2301      	movs	r3, #1
 80013e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	2300      	movs	r3, #0
 80013e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ea:	f107 031c 	add.w	r3, r7, #28
 80013ee:	4619      	mov	r1, r3
 80013f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013f4:	f001 f9f0 	bl	80027d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80013f8:	2380      	movs	r3, #128	@ 0x80
 80013fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013fc:	2300      	movs	r3, #0
 80013fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001400:	2302      	movs	r3, #2
 8001402:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001404:	f107 031c 	add.w	r3, r7, #28
 8001408:	4619      	mov	r1, r3
 800140a:	4819      	ldr	r0, [pc, #100]	@ (8001470 <MX_GPIO_Init+0x16c>)
 800140c:	f001 f9e4 	bl	80027d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001410:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001414:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001416:	2301      	movs	r3, #1
 8001418:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141e:	2300      	movs	r3, #0
 8001420:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001422:	f107 031c 	add.w	r3, r7, #28
 8001426:	4619      	mov	r1, r3
 8001428:	4811      	ldr	r0, [pc, #68]	@ (8001470 <MX_GPIO_Init+0x16c>)
 800142a:	f001 f9d5 	bl	80027d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Limiter_switch_j19_Pin LS_DRV2_NO_Pin */
  GPIO_InitStruct.Pin = Limiter_switch_j19_Pin|LS_DRV2_NO_Pin;
 800142e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001432:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001434:	2300      	movs	r3, #0
 8001436:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001438:	2301      	movs	r3, #1
 800143a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800143c:	f107 031c 	add.w	r3, r7, #28
 8001440:	4619      	mov	r1, r3
 8001442:	480c      	ldr	r0, [pc, #48]	@ (8001474 <MX_GPIO_Init+0x170>)
 8001444:	f001 f9c8 	bl	80027d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LS2_DRV1_NO_Pin LS1_DRV1_NO_Pin */
  GPIO_InitStruct.Pin = LS2_DRV1_NO_Pin|LS1_DRV1_NO_Pin;
 8001448:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 800144c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800144e:	2300      	movs	r3, #0
 8001450:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001456:	f107 031c 	add.w	r3, r7, #28
 800145a:	4619      	mov	r1, r3
 800145c:	4805      	ldr	r0, [pc, #20]	@ (8001474 <MX_GPIO_Init+0x170>)
 800145e:	f001 f9bb 	bl	80027d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001462:	bf00      	nop
 8001464:	3730      	adds	r7, #48	@ 0x30
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40021000 	.word	0x40021000
 8001470:	48001000 	.word	0x48001000
 8001474:	48000c00 	.word	0x48000c00

08001478 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800147c:	b672      	cpsid	i
}
 800147e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001480:	bf00      	nop
 8001482:	e7fd      	b.n	8001480 <Error_Handler+0x8>

08001484 <Motor_Init>:
uint8_t pinstate1=1;

#define MOTOR_SPEED_TILE_ON 250
#define MOTOR_SPEED_TILE_OFF 115

void Motor_Init(void) {
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001488:	2108      	movs	r1, #8
 800148a:	4806      	ldr	r0, [pc, #24]	@ (80014a4 <Motor_Init+0x20>)
 800148c:	f003 fb8e 	bl	8004bac <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001490:	210c      	movs	r1, #12
 8001492:	4804      	ldr	r0, [pc, #16]	@ (80014a4 <Motor_Init+0x20>)
 8001494:	f003 fb8a 	bl	8004bac <HAL_TIM_PWM_Start>
	  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001498:	213c      	movs	r1, #60	@ 0x3c
 800149a:	4803      	ldr	r0, [pc, #12]	@ (80014a8 <Motor_Init+0x24>)
 800149c:	f003 fd3e 	bl	8004f1c <HAL_TIM_Encoder_Start>
    // Initialize motor control here (if any initialization is needed)
}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	20000158 	.word	0x20000158
 80014a8:	200001f0 	.word	0x200001f0

080014ac <Motor_Steer>:

void Motor_Steer(int8_t target)
{	SlotSensor_Init();
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	71fb      	strb	r3, [r7, #7]
 80014b6:	f000 fb8b 	bl	8001bd0 <SlotSensor_Init>
	Motor_Init();
 80014ba:	f7ff ffe3 	bl	8001484 <Motor_Init>
	int8_t count = 0 ;
 80014be:	2300      	movs	r3, #0
 80014c0:	73fb      	strb	r3, [r7, #15]
	int16_t Motorspeed;




	if(TileON)
 80014c2:	4b49      	ldr	r3, [pc, #292]	@ (80015e8 <Motor_Steer+0x13c>)
 80014c4:	f993 3000 	ldrsb.w	r3, [r3]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d044      	beq.n	8001556 <Motor_Steer+0xaa>
	{

		Motorspeed = MOTOR_SPEED_TILE_ON - 1 ;
 80014cc:	23f9      	movs	r3, #249	@ 0xf9
 80014ce:	81bb      	strh	r3, [r7, #12]
		if(target > 0)
 80014d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	dd1c      	ble.n	8001512 <Motor_Steer+0x66>
		{

			while(count < target)
 80014d8:	e00c      	b.n	80014f4 <Motor_Steer+0x48>
			{	  count = SlotSensor_Update();
 80014da:	f000 fb8f 	bl	8001bfc <SlotSensor_Update>
 80014de:	4603      	mov	r3, r0
 80014e0:	73fb      	strb	r3, [r7, #15]
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, Motorspeed);
 80014e2:	4b42      	ldr	r3, [pc, #264]	@ (80015ec <Motor_Steer+0x140>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80014ea:	63da      	str	r2, [r3, #60]	@ 0x3c
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 80014ec:	4b3f      	ldr	r3, [pc, #252]	@ (80015ec <Motor_Steer+0x140>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2200      	movs	r2, #0
 80014f2:	641a      	str	r2, [r3, #64]	@ 0x40
			while(count < target)
 80014f4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80014f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	dbec      	blt.n	80014da <Motor_Steer+0x2e>
			}
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001500:	4b3a      	ldr	r3, [pc, #232]	@ (80015ec <Motor_Steer+0x140>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2200      	movs	r2, #0
 8001506:	63da      	str	r2, [r3, #60]	@ 0x3c
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001508:	4b38      	ldr	r3, [pc, #224]	@ (80015ec <Motor_Steer+0x140>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2200      	movs	r2, #0
 800150e:	641a      	str	r2, [r3, #64]	@ 0x40
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
		}

	}

}
 8001510:	e065      	b.n	80015de <Motor_Steer+0x132>
		else if(target< 0)
 8001512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001516:	2b00      	cmp	r3, #0
 8001518:	da61      	bge.n	80015de <Motor_Steer+0x132>
			while(count < -target)
 800151a:	e00c      	b.n	8001536 <Motor_Steer+0x8a>
					{	  count = SlotSensor_Update();
 800151c:	f000 fb6e 	bl	8001bfc <SlotSensor_Update>
 8001520:	4603      	mov	r3, r0
 8001522:	73fb      	strb	r3, [r7, #15]
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001524:	4b31      	ldr	r3, [pc, #196]	@ (80015ec <Motor_Steer+0x140>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2200      	movs	r2, #0
 800152a:	63da      	str	r2, [r3, #60]	@ 0x3c
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, Motorspeed);
 800152c:	4b2f      	ldr	r3, [pc, #188]	@ (80015ec <Motor_Steer+0x140>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001534:	641a      	str	r2, [r3, #64]	@ 0x40
			while(count < -target)
 8001536:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800153a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153e:	425b      	negs	r3, r3
 8001540:	429a      	cmp	r2, r3
 8001542:	dbeb      	blt.n	800151c <Motor_Steer+0x70>
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001544:	4b29      	ldr	r3, [pc, #164]	@ (80015ec <Motor_Steer+0x140>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2200      	movs	r2, #0
 800154a:	63da      	str	r2, [r3, #60]	@ 0x3c
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 800154c:	4b27      	ldr	r3, [pc, #156]	@ (80015ec <Motor_Steer+0x140>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2200      	movs	r2, #0
 8001552:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001554:	e043      	b.n	80015de <Motor_Steer+0x132>
		Motorspeed = MOTOR_SPEED_TILE_OFF -1 ;
 8001556:	2372      	movs	r3, #114	@ 0x72
 8001558:	81bb      	strh	r3, [r7, #12]
		if(target > 0){
 800155a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155e:	2b00      	cmp	r3, #0
 8001560:	dd1c      	ble.n	800159c <Motor_Steer+0xf0>
					while(count < target)
 8001562:	e00c      	b.n	800157e <Motor_Steer+0xd2>
						count = SlotSensor_Update();
 8001564:	f000 fb4a 	bl	8001bfc <SlotSensor_Update>
 8001568:	4603      	mov	r3, r0
 800156a:	73fb      	strb	r3, [r7, #15]
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, Motorspeed);
 800156c:	4b1f      	ldr	r3, [pc, #124]	@ (80015ec <Motor_Steer+0x140>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001574:	63da      	str	r2, [r3, #60]	@ 0x3c
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001576:	4b1d      	ldr	r3, [pc, #116]	@ (80015ec <Motor_Steer+0x140>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2200      	movs	r2, #0
 800157c:	641a      	str	r2, [r3, #64]	@ 0x40
					while(count < target)
 800157e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001586:	429a      	cmp	r2, r3
 8001588:	dbec      	blt.n	8001564 <Motor_Steer+0xb8>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 800158a:	4b18      	ldr	r3, [pc, #96]	@ (80015ec <Motor_Steer+0x140>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2200      	movs	r2, #0
 8001590:	63da      	str	r2, [r3, #60]	@ 0x3c
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001592:	4b16      	ldr	r3, [pc, #88]	@ (80015ec <Motor_Steer+0x140>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2200      	movs	r2, #0
 8001598:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800159a:	e020      	b.n	80015de <Motor_Steer+0x132>
		else if(target< 0)
 800159c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	da1c      	bge.n	80015de <Motor_Steer+0x132>
			while(count < -target)
 80015a4:	e00c      	b.n	80015c0 <Motor_Steer+0x114>
				count = SlotSensor_Update();
 80015a6:	f000 fb29 	bl	8001bfc <SlotSensor_Update>
 80015aa:	4603      	mov	r3, r0
 80015ac:	73fb      	strb	r3, [r7, #15]
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80015ae:	4b0f      	ldr	r3, [pc, #60]	@ (80015ec <Motor_Steer+0x140>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2200      	movs	r2, #0
 80015b4:	63da      	str	r2, [r3, #60]	@ 0x3c
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, Motorspeed);
 80015b6:	4b0d      	ldr	r3, [pc, #52]	@ (80015ec <Motor_Steer+0x140>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80015be:	641a      	str	r2, [r3, #64]	@ 0x40
			while(count < -target)
 80015c0:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80015c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c8:	425b      	negs	r3, r3
 80015ca:	429a      	cmp	r2, r3
 80015cc:	dbeb      	blt.n	80015a6 <Motor_Steer+0xfa>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80015ce:	4b07      	ldr	r3, [pc, #28]	@ (80015ec <Motor_Steer+0x140>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2200      	movs	r2, #0
 80015d4:	63da      	str	r2, [r3, #60]	@ 0x3c
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 80015d6:	4b05      	ldr	r3, [pc, #20]	@ (80015ec <Motor_Steer+0x140>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2200      	movs	r2, #0
 80015dc:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80015de:	bf00      	nop
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	200000e9 	.word	0x200000e9
 80015ec:	20000158 	.word	0x20000158

080015f0 <ABSRotateHead>:
	Motor_Steer(target_position);


}
int8_t ABSRotateHead(int8_t target_position)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	71fb      	strb	r3, [r7, #7]
	Motor_Init();
 80015fa:	f7ff ff43 	bl	8001484 <Motor_Init>

	GPIO_PinState current_state1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7); // Read pin state
 80015fe:	2180      	movs	r1, #128	@ 0x80
 8001600:	48a9      	ldr	r0, [pc, #676]	@ (80018a8 <ABSRotateHead+0x2b8>)
 8001602:	f001 fa6b 	bl	8002adc <HAL_GPIO_ReadPin>
 8001606:	4603      	mov	r3, r0
 8001608:	75fb      	strb	r3, [r7, #23]
	GPIO_PinState last_state1=current_state1;
 800160a:	7dfb      	ldrb	r3, [r7, #23]
 800160c:	73fb      	strb	r3, [r7, #15]
	if(current_state1==GPIO_PIN_RESET){
 800160e:	7dfb      	ldrb	r3, [r7, #23]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d11a      	bne.n	800164a <ABSRotateHead+0x5a>
		while (current_state1 == last_state1){
 8001614:	e00d      	b.n	8001632 <ABSRotateHead+0x42>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 8001616:	4ba5      	ldr	r3, [pc, #660]	@ (80018ac <ABSRotateHead+0x2bc>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2200      	movs	r2, #0
 800161c:	63da      	str	r2, [r3, #60]	@ 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 100);
 800161e:	4ba3      	ldr	r3, [pc, #652]	@ (80018ac <ABSRotateHead+0x2bc>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2264      	movs	r2, #100	@ 0x64
 8001624:	641a      	str	r2, [r3, #64]	@ 0x40
			current_state1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7);
 8001626:	2180      	movs	r1, #128	@ 0x80
 8001628:	489f      	ldr	r0, [pc, #636]	@ (80018a8 <ABSRotateHead+0x2b8>)
 800162a:	f001 fa57 	bl	8002adc <HAL_GPIO_ReadPin>
 800162e:	4603      	mov	r3, r0
 8001630:	75fb      	strb	r3, [r7, #23]
		while (current_state1 == last_state1){
 8001632:	7dfa      	ldrb	r2, [r7, #23]
 8001634:	7bfb      	ldrb	r3, [r7, #15]
 8001636:	429a      	cmp	r2, r3
 8001638:	d0ed      	beq.n	8001616 <ABSRotateHead+0x26>
		}

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 800163a:	4b9c      	ldr	r3, [pc, #624]	@ (80018ac <ABSRotateHead+0x2bc>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2200      	movs	r2, #0
 8001640:	63da      	str	r2, [r3, #60]	@ 0x3c
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001642:	4b9a      	ldr	r3, [pc, #616]	@ (80018ac <ABSRotateHead+0x2bc>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2200      	movs	r2, #0
 8001648:	641a      	str	r2, [r3, #64]	@ 0x40

	}
	HAL_Delay(200);
 800164a:	20c8      	movs	r0, #200	@ 0xc8
 800164c:	f000 fed2 	bl	80023f4 <HAL_Delay>
	int8_t absolute_target_position = target_position*5 - posABS;
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	461a      	mov	r2, r3
 8001654:	0092      	lsls	r2, r2, #2
 8001656:	4413      	add	r3, r2
 8001658:	b2da      	uxtb	r2, r3
 800165a:	4b95      	ldr	r3, [pc, #596]	@ (80018b0 <ABSRotateHead+0x2c0>)
 800165c:	f993 3000 	ldrsb.w	r3, [r3]
 8001660:	b2db      	uxtb	r3, r3
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	b2db      	uxtb	r3, r3
 8001666:	73bb      	strb	r3, [r7, #14]
	SlotSensor_Init();
 8001668:	f000 fab2 	bl	8001bd0 <SlotSensor_Init>
	Motor_Init();
 800166c:	f7ff ff0a 	bl	8001484 <Motor_Init>
	int8_t count = 0 ;
 8001670:	2300      	movs	r3, #0
 8001672:	75bb      	strb	r3, [r7, #22]
	int16_t Motorspeed;



		if(TileON)
 8001674:	4b8f      	ldr	r3, [pc, #572]	@ (80018b4 <ABSRotateHead+0x2c4>)
 8001676:	f993 3000 	ldrsb.w	r3, [r3]
 800167a:	2b00      	cmp	r3, #0
 800167c:	f000 811c 	beq.w	80018b8 <ABSRotateHead+0x2c8>
		{
			Motorspeed = MOTOR_SPEED_TILE_ON - 1 ;
 8001680:	23f9      	movs	r3, #249	@ 0xf9
 8001682:	82bb      	strh	r3, [r7, #20]
			if(absolute_target_position > 0)
 8001684:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001688:	2b00      	cmp	r3, #0
 800168a:	f340 8082 	ble.w	8001792 <ABSRotateHead+0x1a2>
			{
				if (absolute_target_position-count==5){
 800168e:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001692:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b05      	cmp	r3, #5
 800169a:	d114      	bne.n	80016c6 <ABSRotateHead+0xd6>
										if(target_position==1){
 800169c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d102      	bne.n	80016aa <ABSRotateHead+0xba>
										Motorspeed = 220;}
 80016a4:	23dc      	movs	r3, #220	@ 0xdc
 80016a6:	82bb      	strh	r3, [r7, #20]
 80016a8:	e03a      	b.n	8001720 <ABSRotateHead+0x130>
										else if(target_position==2){
 80016aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d102      	bne.n	80016b8 <ABSRotateHead+0xc8>
											Motorspeed=215;
 80016b2:	23d7      	movs	r3, #215	@ 0xd7
 80016b4:	82bb      	strh	r3, [r7, #20]
 80016b6:	e033      	b.n	8001720 <ABSRotateHead+0x130>
										}
										else if (target_position==3){
 80016b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016bc:	2b03      	cmp	r3, #3
 80016be:	d12f      	bne.n	8001720 <ABSRotateHead+0x130>
											Motorspeed=215;
 80016c0:	23d7      	movs	r3, #215	@ 0xd7
 80016c2:	82bb      	strh	r3, [r7, #20]
 80016c4:	e02c      	b.n	8001720 <ABSRotateHead+0x130>
										}
									}
									else if (absolute_target_position-count==10){
 80016c6:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80016ca:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b0a      	cmp	r3, #10
 80016d2:	d10d      	bne.n	80016f0 <ABSRotateHead+0x100>
										if (target_position==2){
 80016d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d102      	bne.n	80016e2 <ABSRotateHead+0xf2>
										Motorspeed=250;}
 80016dc:	23fa      	movs	r3, #250	@ 0xfa
 80016de:	82bb      	strh	r3, [r7, #20]
 80016e0:	e01e      	b.n	8001720 <ABSRotateHead+0x130>
										else if(target_position==3){
 80016e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e6:	2b03      	cmp	r3, #3
 80016e8:	d11a      	bne.n	8001720 <ABSRotateHead+0x130>
											Motorspeed=250;
 80016ea:	23fa      	movs	r3, #250	@ 0xfa
 80016ec:	82bb      	strh	r3, [r7, #20]
 80016ee:	e017      	b.n	8001720 <ABSRotateHead+0x130>
										}
									}
									else if (absolute_target_position-count==15){
 80016f0:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80016f4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b0f      	cmp	r3, #15
 80016fc:	d110      	bne.n	8001720 <ABSRotateHead+0x130>
										Motorspeed=258;
 80016fe:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001702:	82bb      	strh	r3, [r7, #20]
									}

				while(count < absolute_target_position)
 8001704:	e00c      	b.n	8001720 <ABSRotateHead+0x130>
				{	  count = SlotSensor_Update();
 8001706:	f000 fa79 	bl	8001bfc <SlotSensor_Update>
 800170a:	4603      	mov	r3, r0
 800170c:	75bb      	strb	r3, [r7, #22]
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, Motorspeed);
 800170e:	4b67      	ldr	r3, [pc, #412]	@ (80018ac <ABSRotateHead+0x2bc>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001716:	63da      	str	r2, [r3, #60]	@ 0x3c
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001718:	4b64      	ldr	r3, [pc, #400]	@ (80018ac <ABSRotateHead+0x2bc>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2200      	movs	r2, #0
 800171e:	641a      	str	r2, [r3, #64]	@ 0x40
				while(count < absolute_target_position)
 8001720:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8001724:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001728:	429a      	cmp	r2, r3
 800172a:	dbec      	blt.n	8001706 <ABSRotateHead+0x116>
				}

				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 800172c:	4b5f      	ldr	r3, [pc, #380]	@ (80018ac <ABSRotateHead+0x2bc>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2200      	movs	r2, #0
 8001732:	63da      	str	r2, [r3, #60]	@ 0x3c
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001734:	4b5d      	ldr	r3, [pc, #372]	@ (80018ac <ABSRotateHead+0x2bc>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2200      	movs	r2, #0
 800173a:	641a      	str	r2, [r3, #64]	@ 0x40
				HAL_Delay(200);
 800173c:	20c8      	movs	r0, #200	@ 0xc8
 800173e:	f000 fe59 	bl	80023f4 <HAL_Delay>
				GPIO_PinState current_state1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7); // Read pin state
 8001742:	2180      	movs	r1, #128	@ 0x80
 8001744:	4858      	ldr	r0, [pc, #352]	@ (80018a8 <ABSRotateHead+0x2b8>)
 8001746:	f001 f9c9 	bl	8002adc <HAL_GPIO_ReadPin>
 800174a:	4603      	mov	r3, r0
 800174c:	74fb      	strb	r3, [r7, #19]
				GPIO_PinState last_state1=current_state1;
 800174e:	7cfb      	ldrb	r3, [r7, #19]
 8001750:	72bb      	strb	r3, [r7, #10]
				if(current_state1==GPIO_PIN_RESET){
 8001752:	7cfb      	ldrb	r3, [r7, #19]
 8001754:	2b00      	cmp	r3, #0
 8001756:	f040 81bf 	bne.w	8001ad8 <ABSRotateHead+0x4e8>
						while (current_state1 == last_state1){
 800175a:	e00d      	b.n	8001778 <ABSRotateHead+0x188>
								__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0 );
 800175c:	4b53      	ldr	r3, [pc, #332]	@ (80018ac <ABSRotateHead+0x2bc>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2200      	movs	r2, #0
 8001762:	63da      	str	r2, [r3, #60]	@ 0x3c
								__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 100);
 8001764:	4b51      	ldr	r3, [pc, #324]	@ (80018ac <ABSRotateHead+0x2bc>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2264      	movs	r2, #100	@ 0x64
 800176a:	641a      	str	r2, [r3, #64]	@ 0x40
								current_state1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7);
 800176c:	2180      	movs	r1, #128	@ 0x80
 800176e:	484e      	ldr	r0, [pc, #312]	@ (80018a8 <ABSRotateHead+0x2b8>)
 8001770:	f001 f9b4 	bl	8002adc <HAL_GPIO_ReadPin>
 8001774:	4603      	mov	r3, r0
 8001776:	74fb      	strb	r3, [r7, #19]
						while (current_state1 == last_state1){
 8001778:	7cfa      	ldrb	r2, [r7, #19]
 800177a:	7abb      	ldrb	r3, [r7, #10]
 800177c:	429a      	cmp	r2, r3
 800177e:	d0ed      	beq.n	800175c <ABSRotateHead+0x16c>
								}

					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001780:	4b4a      	ldr	r3, [pc, #296]	@ (80018ac <ABSRotateHead+0x2bc>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2200      	movs	r2, #0
 8001786:	63da      	str	r2, [r3, #60]	@ 0x3c
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001788:	4b48      	ldr	r3, [pc, #288]	@ (80018ac <ABSRotateHead+0x2bc>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2200      	movs	r2, #0
 800178e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001790:	e1a2      	b.n	8001ad8 <ABSRotateHead+0x4e8>

			}
			}
			else if(absolute_target_position< 0)
 8001792:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001796:	2b00      	cmp	r3, #0
 8001798:	f280 819e 	bge.w	8001ad8 <ABSRotateHead+0x4e8>
			{
				if (absolute_target_position-count==-5){
 800179c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80017a0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	f113 0f05 	cmn.w	r3, #5
 80017aa:	d114      	bne.n	80017d6 <ABSRotateHead+0x1e6>
						if(target_position==0){
 80017ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d102      	bne.n	80017ba <ABSRotateHead+0x1ca>
							Motorspeed = 220;}
 80017b4:	23dc      	movs	r3, #220	@ 0xdc
 80017b6:	82bb      	strh	r3, [r7, #20]
 80017b8:	e03c      	b.n	8001834 <ABSRotateHead+0x244>
						else if(target_position==1){
 80017ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d102      	bne.n	80017c8 <ABSRotateHead+0x1d8>
								Motorspeed=210;
 80017c2:	23d2      	movs	r3, #210	@ 0xd2
 80017c4:	82bb      	strh	r3, [r7, #20]
 80017c6:	e035      	b.n	8001834 <ABSRotateHead+0x244>
								}
						else if (target_position==2){
 80017c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d131      	bne.n	8001834 <ABSRotateHead+0x244>
								Motorspeed=210;
 80017d0:	23d2      	movs	r3, #210	@ 0xd2
 80017d2:	82bb      	strh	r3, [r7, #20]
 80017d4:	e02e      	b.n	8001834 <ABSRotateHead+0x244>
								}
								}
				else if (absolute_target_position-count==-10){
 80017d6:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80017da:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	f113 0f0a 	cmn.w	r3, #10
 80017e4:	d10e      	bne.n	8001804 <ABSRotateHead+0x214>
						if (target_position==0){
 80017e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d102      	bne.n	80017f4 <ABSRotateHead+0x204>
							Motorspeed=255;}
 80017ee:	23ff      	movs	r3, #255	@ 0xff
 80017f0:	82bb      	strh	r3, [r7, #20]
 80017f2:	e01f      	b.n	8001834 <ABSRotateHead+0x244>
						else if(target_position==1){
 80017f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d11b      	bne.n	8001834 <ABSRotateHead+0x244>
									Motorspeed=258;
 80017fc:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001800:	82bb      	strh	r3, [r7, #20]
 8001802:	e017      	b.n	8001834 <ABSRotateHead+0x244>
														}
													}
						else if (absolute_target_position-count==-15){
 8001804:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001808:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	f113 0f0f 	cmn.w	r3, #15
 8001812:	d10f      	bne.n	8001834 <ABSRotateHead+0x244>
								Motorspeed=255;
 8001814:	23ff      	movs	r3, #255	@ 0xff
 8001816:	82bb      	strh	r3, [r7, #20]
						}

				while(count < -absolute_target_position)
 8001818:	e00c      	b.n	8001834 <ABSRotateHead+0x244>
						{	  count = SlotSensor_Update();
 800181a:	f000 f9ef 	bl	8001bfc <SlotSensor_Update>
 800181e:	4603      	mov	r3, r0
 8001820:	75bb      	strb	r3, [r7, #22]
							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001822:	4b22      	ldr	r3, [pc, #136]	@ (80018ac <ABSRotateHead+0x2bc>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2200      	movs	r2, #0
 8001828:	63da      	str	r2, [r3, #60]	@ 0x3c
							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, Motorspeed);
 800182a:	4b20      	ldr	r3, [pc, #128]	@ (80018ac <ABSRotateHead+0x2bc>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001832:	641a      	str	r2, [r3, #64]	@ 0x40
				while(count < -absolute_target_position)
 8001834:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8001838:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800183c:	425b      	negs	r3, r3
 800183e:	429a      	cmp	r2, r3
 8001840:	dbeb      	blt.n	800181a <ABSRotateHead+0x22a>
						}

				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001842:	4b1a      	ldr	r3, [pc, #104]	@ (80018ac <ABSRotateHead+0x2bc>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2200      	movs	r2, #0
 8001848:	63da      	str	r2, [r3, #60]	@ 0x3c
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 800184a:	4b18      	ldr	r3, [pc, #96]	@ (80018ac <ABSRotateHead+0x2bc>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2200      	movs	r2, #0
 8001850:	641a      	str	r2, [r3, #64]	@ 0x40
				HAL_Delay(200);
 8001852:	20c8      	movs	r0, #200	@ 0xc8
 8001854:	f000 fdce 	bl	80023f4 <HAL_Delay>
				GPIO_PinState current_state1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7); // Read pin state
 8001858:	2180      	movs	r1, #128	@ 0x80
 800185a:	4813      	ldr	r0, [pc, #76]	@ (80018a8 <ABSRotateHead+0x2b8>)
 800185c:	f001 f93e 	bl	8002adc <HAL_GPIO_ReadPin>
 8001860:	4603      	mov	r3, r0
 8001862:	74bb      	strb	r3, [r7, #18]
				GPIO_PinState last_state1=current_state1;
 8001864:	7cbb      	ldrb	r3, [r7, #18]
 8001866:	72fb      	strb	r3, [r7, #11]
				if(current_state1==GPIO_PIN_RESET){
 8001868:	7cbb      	ldrb	r3, [r7, #18]
 800186a:	2b00      	cmp	r3, #0
 800186c:	f040 8134 	bne.w	8001ad8 <ABSRotateHead+0x4e8>
						while (current_state1 == last_state1){
 8001870:	e00d      	b.n	800188e <ABSRotateHead+0x29e>
								__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,100 );
 8001872:	4b0e      	ldr	r3, [pc, #56]	@ (80018ac <ABSRotateHead+0x2bc>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2264      	movs	r2, #100	@ 0x64
 8001878:	63da      	str	r2, [r3, #60]	@ 0x3c
								__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 800187a:	4b0c      	ldr	r3, [pc, #48]	@ (80018ac <ABSRotateHead+0x2bc>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2200      	movs	r2, #0
 8001880:	641a      	str	r2, [r3, #64]	@ 0x40
								current_state1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7);
 8001882:	2180      	movs	r1, #128	@ 0x80
 8001884:	4808      	ldr	r0, [pc, #32]	@ (80018a8 <ABSRotateHead+0x2b8>)
 8001886:	f001 f929 	bl	8002adc <HAL_GPIO_ReadPin>
 800188a:	4603      	mov	r3, r0
 800188c:	74bb      	strb	r3, [r7, #18]
						while (current_state1 == last_state1){
 800188e:	7cba      	ldrb	r2, [r7, #18]
 8001890:	7afb      	ldrb	r3, [r7, #11]
 8001892:	429a      	cmp	r2, r3
 8001894:	d0ed      	beq.n	8001872 <ABSRotateHead+0x282>
								}


							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001896:	4b05      	ldr	r3, [pc, #20]	@ (80018ac <ABSRotateHead+0x2bc>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2200      	movs	r2, #0
 800189c:	63da      	str	r2, [r3, #60]	@ 0x3c
							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 800189e:	4b03      	ldr	r3, [pc, #12]	@ (80018ac <ABSRotateHead+0x2bc>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2200      	movs	r2, #0
 80018a4:	641a      	str	r2, [r3, #64]	@ 0x40
 80018a6:	e117      	b.n	8001ad8 <ABSRotateHead+0x4e8>
 80018a8:	48001000 	.word	0x48001000
 80018ac:	20000158 	.word	0x20000158
 80018b0:	200000e8 	.word	0x200000e8
 80018b4:	200000e9 	.word	0x200000e9

		}
		else
		{

			Motorspeed = MOTOR_SPEED_TILE_OFF -1 ;
 80018b8:	2372      	movs	r3, #114	@ 0x72
 80018ba:	82bb      	strh	r3, [r7, #20]
			if(absolute_target_position > 0){
 80018bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f340 8081 	ble.w	80019c8 <ABSRotateHead+0x3d8>
					if (absolute_target_position-count==5){
 80018c6:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80018ca:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b05      	cmp	r3, #5
 80018d2:	d114      	bne.n	80018fe <ABSRotateHead+0x30e>
						if(target_position==1){
 80018d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d102      	bne.n	80018e2 <ABSRotateHead+0x2f2>
						Motorspeed = 120;}
 80018dc:	2378      	movs	r3, #120	@ 0x78
 80018de:	82bb      	strh	r3, [r7, #20]
 80018e0:	e039      	b.n	8001956 <ABSRotateHead+0x366>
						else if(target_position==2){
 80018e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d102      	bne.n	80018f0 <ABSRotateHead+0x300>
							Motorspeed=145;
 80018ea:	2391      	movs	r3, #145	@ 0x91
 80018ec:	82bb      	strh	r3, [r7, #20]
 80018ee:	e032      	b.n	8001956 <ABSRotateHead+0x366>
						}
						else if (target_position==3){
 80018f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f4:	2b03      	cmp	r3, #3
 80018f6:	d12e      	bne.n	8001956 <ABSRotateHead+0x366>
							Motorspeed=145;
 80018f8:	2391      	movs	r3, #145	@ 0x91
 80018fa:	82bb      	strh	r3, [r7, #20]
 80018fc:	e02b      	b.n	8001956 <ABSRotateHead+0x366>
						}
					}
					else if (absolute_target_position-count==10){
 80018fe:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001902:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b0a      	cmp	r3, #10
 800190a:	d10d      	bne.n	8001928 <ABSRotateHead+0x338>
						if (target_position==2){
 800190c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001910:	2b02      	cmp	r3, #2
 8001912:	d102      	bne.n	800191a <ABSRotateHead+0x32a>
						Motorspeed=115;}
 8001914:	2373      	movs	r3, #115	@ 0x73
 8001916:	82bb      	strh	r3, [r7, #20]
 8001918:	e01d      	b.n	8001956 <ABSRotateHead+0x366>
						else if(target_position==3){
 800191a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191e:	2b03      	cmp	r3, #3
 8001920:	d119      	bne.n	8001956 <ABSRotateHead+0x366>
							Motorspeed=170;
 8001922:	23aa      	movs	r3, #170	@ 0xaa
 8001924:	82bb      	strh	r3, [r7, #20]
 8001926:	e016      	b.n	8001956 <ABSRotateHead+0x366>
						}
					}
					else if (absolute_target_position-count==15){
 8001928:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800192c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b0f      	cmp	r3, #15
 8001934:	d10f      	bne.n	8001956 <ABSRotateHead+0x366>
						Motorspeed=180;
 8001936:	23b4      	movs	r3, #180	@ 0xb4
 8001938:	82bb      	strh	r3, [r7, #20]
					}
						while(count < absolute_target_position)
 800193a:	e00c      	b.n	8001956 <ABSRotateHead+0x366>
						{
							count = SlotSensor_Update();
 800193c:	f000 f95e 	bl	8001bfc <SlotSensor_Update>
 8001940:	4603      	mov	r3, r0
 8001942:	75bb      	strb	r3, [r7, #22]
							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, Motorspeed);
 8001944:	4b73      	ldr	r3, [pc, #460]	@ (8001b14 <ABSRotateHead+0x524>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800194c:	63da      	str	r2, [r3, #60]	@ 0x3c
							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 800194e:	4b71      	ldr	r3, [pc, #452]	@ (8001b14 <ABSRotateHead+0x524>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2200      	movs	r2, #0
 8001954:	641a      	str	r2, [r3, #64]	@ 0x40
						while(count < absolute_target_position)
 8001956:	f997 2016 	ldrsb.w	r2, [r7, #22]
 800195a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800195e:	429a      	cmp	r2, r3
 8001960:	dbec      	blt.n	800193c <ABSRotateHead+0x34c>
						}

					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001962:	4b6c      	ldr	r3, [pc, #432]	@ (8001b14 <ABSRotateHead+0x524>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2200      	movs	r2, #0
 8001968:	63da      	str	r2, [r3, #60]	@ 0x3c
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 800196a:	4b6a      	ldr	r3, [pc, #424]	@ (8001b14 <ABSRotateHead+0x524>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2200      	movs	r2, #0
 8001970:	641a      	str	r2, [r3, #64]	@ 0x40
					HAL_Delay(200);
 8001972:	20c8      	movs	r0, #200	@ 0xc8
 8001974:	f000 fd3e 	bl	80023f4 <HAL_Delay>

					GPIO_PinState current_state1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7); // Read pin state
 8001978:	2180      	movs	r1, #128	@ 0x80
 800197a:	4867      	ldr	r0, [pc, #412]	@ (8001b18 <ABSRotateHead+0x528>)
 800197c:	f001 f8ae 	bl	8002adc <HAL_GPIO_ReadPin>
 8001980:	4603      	mov	r3, r0
 8001982:	747b      	strb	r3, [r7, #17]
					GPIO_PinState last_state1=current_state1;
 8001984:	7c7b      	ldrb	r3, [r7, #17]
 8001986:	733b      	strb	r3, [r7, #12]
					if(current_state1==GPIO_PIN_RESET){
 8001988:	7c7b      	ldrb	r3, [r7, #17]
 800198a:	2b00      	cmp	r3, #0
 800198c:	f040 80a4 	bne.w	8001ad8 <ABSRotateHead+0x4e8>
						while (current_state1 == last_state1){
 8001990:	e00d      	b.n	80019ae <ABSRotateHead+0x3be>
							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0 );
 8001992:	4b60      	ldr	r3, [pc, #384]	@ (8001b14 <ABSRotateHead+0x524>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2200      	movs	r2, #0
 8001998:	63da      	str	r2, [r3, #60]	@ 0x3c
							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 100);
 800199a:	4b5e      	ldr	r3, [pc, #376]	@ (8001b14 <ABSRotateHead+0x524>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2264      	movs	r2, #100	@ 0x64
 80019a0:	641a      	str	r2, [r3, #64]	@ 0x40
							current_state1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7);
 80019a2:	2180      	movs	r1, #128	@ 0x80
 80019a4:	485c      	ldr	r0, [pc, #368]	@ (8001b18 <ABSRotateHead+0x528>)
 80019a6:	f001 f899 	bl	8002adc <HAL_GPIO_ReadPin>
 80019aa:	4603      	mov	r3, r0
 80019ac:	747b      	strb	r3, [r7, #17]
						while (current_state1 == last_state1){
 80019ae:	7c7a      	ldrb	r2, [r7, #17]
 80019b0:	7b3b      	ldrb	r3, [r7, #12]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d0ed      	beq.n	8001992 <ABSRotateHead+0x3a2>

					}
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80019b6:	4b57      	ldr	r3, [pc, #348]	@ (8001b14 <ABSRotateHead+0x524>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2200      	movs	r2, #0
 80019bc:	63da      	str	r2, [r3, #60]	@ 0x3c
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 80019be:	4b55      	ldr	r3, [pc, #340]	@ (8001b14 <ABSRotateHead+0x524>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2200      	movs	r2, #0
 80019c4:	641a      	str	r2, [r3, #64]	@ 0x40
 80019c6:	e087      	b.n	8001ad8 <ABSRotateHead+0x4e8>

					}
					}
			else if(absolute_target_position< 0)
 80019c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	f280 8083 	bge.w	8001ad8 <ABSRotateHead+0x4e8>
			{
				if (absolute_target_position-count==-5){
 80019d2:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80019d6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	f113 0f05 	cmn.w	r3, #5
 80019e0:	d114      	bne.n	8001a0c <ABSRotateHead+0x41c>
										if(target_position==0){
 80019e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d102      	bne.n	80019f0 <ABSRotateHead+0x400>
										Motorspeed = 131;}
 80019ea:	2383      	movs	r3, #131	@ 0x83
 80019ec:	82bb      	strh	r3, [r7, #20]
 80019ee:	e03b      	b.n	8001a68 <ABSRotateHead+0x478>
										else if(target_position==1){
 80019f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d102      	bne.n	80019fe <ABSRotateHead+0x40e>
											Motorspeed=131;
 80019f8:	2383      	movs	r3, #131	@ 0x83
 80019fa:	82bb      	strh	r3, [r7, #20]
 80019fc:	e034      	b.n	8001a68 <ABSRotateHead+0x478>
										}
										else if (target_position==2){
 80019fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d130      	bne.n	8001a68 <ABSRotateHead+0x478>
											Motorspeed=129;
 8001a06:	2381      	movs	r3, #129	@ 0x81
 8001a08:	82bb      	strh	r3, [r7, #20]
 8001a0a:	e02d      	b.n	8001a68 <ABSRotateHead+0x478>
										}
									}
									else if (absolute_target_position-count==-10){
 8001a0c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001a10:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	f113 0f0a 	cmn.w	r3, #10
 8001a1a:	d10d      	bne.n	8001a38 <ABSRotateHead+0x448>
										if (target_position==0){
 8001a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d102      	bne.n	8001a2a <ABSRotateHead+0x43a>
										Motorspeed=195;}
 8001a24:	23c3      	movs	r3, #195	@ 0xc3
 8001a26:	82bb      	strh	r3, [r7, #20]
 8001a28:	e01e      	b.n	8001a68 <ABSRotateHead+0x478>
										else if(target_position==1){
 8001a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d11a      	bne.n	8001a68 <ABSRotateHead+0x478>
											Motorspeed=180;
 8001a32:	23b4      	movs	r3, #180	@ 0xb4
 8001a34:	82bb      	strh	r3, [r7, #20]
 8001a36:	e017      	b.n	8001a68 <ABSRotateHead+0x478>
										}
									}
									else if (absolute_target_position-count==-15){
 8001a38:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001a3c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	f113 0f0f 	cmn.w	r3, #15
 8001a46:	d10f      	bne.n	8001a68 <ABSRotateHead+0x478>
										Motorspeed=210;
 8001a48:	23d2      	movs	r3, #210	@ 0xd2
 8001a4a:	82bb      	strh	r3, [r7, #20]
									}

				while(count < -absolute_target_position)
 8001a4c:	e00c      	b.n	8001a68 <ABSRotateHead+0x478>
				{
					count = SlotSensor_Update();
 8001a4e:	f000 f8d5 	bl	8001bfc <SlotSensor_Update>
 8001a52:	4603      	mov	r3, r0
 8001a54:	75bb      	strb	r3, [r7, #22]
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001a56:	4b2f      	ldr	r3, [pc, #188]	@ (8001b14 <ABSRotateHead+0x524>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	63da      	str	r2, [r3, #60]	@ 0x3c
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, Motorspeed);
 8001a5e:	4b2d      	ldr	r3, [pc, #180]	@ (8001b14 <ABSRotateHead+0x524>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001a66:	641a      	str	r2, [r3, #64]	@ 0x40
				while(count < -absolute_target_position)
 8001a68:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8001a6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001a70:	425b      	negs	r3, r3
 8001a72:	429a      	cmp	r2, r3
 8001a74:	dbeb      	blt.n	8001a4e <ABSRotateHead+0x45e>
				}

					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001a76:	4b27      	ldr	r3, [pc, #156]	@ (8001b14 <ABSRotateHead+0x524>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	63da      	str	r2, [r3, #60]	@ 0x3c
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001a7e:	4b25      	ldr	r3, [pc, #148]	@ (8001b14 <ABSRotateHead+0x524>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2200      	movs	r2, #0
 8001a84:	641a      	str	r2, [r3, #64]	@ 0x40
					HAL_Delay(200);
 8001a86:	20c8      	movs	r0, #200	@ 0xc8
 8001a88:	f000 fcb4 	bl	80023f4 <HAL_Delay>
					GPIO_PinState current_state1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7); // Read pin state
 8001a8c:	2180      	movs	r1, #128	@ 0x80
 8001a8e:	4822      	ldr	r0, [pc, #136]	@ (8001b18 <ABSRotateHead+0x528>)
 8001a90:	f001 f824 	bl	8002adc <HAL_GPIO_ReadPin>
 8001a94:	4603      	mov	r3, r0
 8001a96:	743b      	strb	r3, [r7, #16]
					GPIO_PinState last_state1=current_state1;
 8001a98:	7c3b      	ldrb	r3, [r7, #16]
 8001a9a:	737b      	strb	r3, [r7, #13]
					if(current_state1==GPIO_PIN_RESET){
 8001a9c:	7c3b      	ldrb	r3, [r7, #16]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d11a      	bne.n	8001ad8 <ABSRotateHead+0x4e8>
							while (current_state1 == last_state1){
 8001aa2:	e00d      	b.n	8001ac0 <ABSRotateHead+0x4d0>
									__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,100 );
 8001aa4:	4b1b      	ldr	r3, [pc, #108]	@ (8001b14 <ABSRotateHead+0x524>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2264      	movs	r2, #100	@ 0x64
 8001aaa:	63da      	str	r2, [r3, #60]	@ 0x3c
									__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001aac:	4b19      	ldr	r3, [pc, #100]	@ (8001b14 <ABSRotateHead+0x524>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	641a      	str	r2, [r3, #64]	@ 0x40
									current_state1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7);
 8001ab4:	2180      	movs	r1, #128	@ 0x80
 8001ab6:	4818      	ldr	r0, [pc, #96]	@ (8001b18 <ABSRotateHead+0x528>)
 8001ab8:	f001 f810 	bl	8002adc <HAL_GPIO_ReadPin>
 8001abc:	4603      	mov	r3, r0
 8001abe:	743b      	strb	r3, [r7, #16]
							while (current_state1 == last_state1){
 8001ac0:	7c3a      	ldrb	r2, [r7, #16]
 8001ac2:	7b7b      	ldrb	r3, [r7, #13]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d0ed      	beq.n	8001aa4 <ABSRotateHead+0x4b4>
									}
							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001ac8:	4b12      	ldr	r3, [pc, #72]	@ (8001b14 <ABSRotateHead+0x524>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2200      	movs	r2, #0
 8001ace:	63da      	str	r2, [r3, #60]	@ 0x3c
							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001ad0:	4b10      	ldr	r3, [pc, #64]	@ (8001b14 <ABSRotateHead+0x524>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	641a      	str	r2, [r3, #64]	@ 0x40
			}

		}

	//Motor_Steer(absolute_target_position);
	if(target_position*5 != posABS){posABS = target_position*5;}
 8001ad8:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001adc:	4613      	mov	r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	4a0e      	ldr	r2, [pc, #56]	@ (8001b1c <ABSRotateHead+0x52c>)
 8001ae4:	f992 2000 	ldrsb.w	r2, [r2]
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d008      	beq.n	8001afe <ABSRotateHead+0x50e>
 8001aec:	79fb      	ldrb	r3, [r7, #7]
 8001aee:	461a      	mov	r2, r3
 8001af0:	0092      	lsls	r2, r2, #2
 8001af2:	4413      	add	r3, r2
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	b25a      	sxtb	r2, r3
 8001af8:	4b08      	ldr	r3, [pc, #32]	@ (8001b1c <ABSRotateHead+0x52c>)
 8001afa:	701a      	strb	r2, [r3, #0]
 8001afc:	e004      	b.n	8001b08 <ABSRotateHead+0x518>
	else{HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);}
 8001afe:	2200      	movs	r2, #0
 8001b00:	2110      	movs	r1, #16
 8001b02:	4807      	ldr	r0, [pc, #28]	@ (8001b20 <ABSRotateHead+0x530>)
 8001b04:	f001 f802 	bl	8002b0c <HAL_GPIO_WritePin>
return 1;
 8001b08:	2301      	movs	r3, #1


}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3718      	adds	r7, #24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	20000158 	.word	0x20000158
 8001b18:	48001000 	.word	0x48001000
 8001b1c:	200000e8 	.word	0x200000e8
 8001b20:	48000400 	.word	0x48000400

08001b24 <HeadBase>:
void HeadBase(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0

	int16_t BaseSpeed = 250;
 8001b2a:	23fa      	movs	r3, #250	@ 0xfa
 8001b2c:	80fb      	strh	r3, [r7, #6]
	Motor_Init();
 8001b2e:	f7ff fca9 	bl	8001484 <Motor_Init>
	//uint8_t pinstate1;
	pinstate1 = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8);
 8001b32:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b36:	4822      	ldr	r0, [pc, #136]	@ (8001bc0 <HeadBase+0x9c>)
 8001b38:	f000 ffd0 	bl	8002adc <HAL_GPIO_ReadPin>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	461a      	mov	r2, r3
 8001b40:	4b20      	ldr	r3, [pc, #128]	@ (8001bc4 <HeadBase+0xa0>)
 8001b42:	701a      	strb	r2, [r3, #0]

	while(pinstate1)
 8001b44:	e022      	b.n	8001b8c <HeadBase+0x68>
	{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001b46:	4b20      	ldr	r3, [pc, #128]	@ (8001bc8 <HeadBase+0xa4>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	63da      	str	r2, [r3, #60]	@ 0x3c
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, BaseSpeed-1);
 8001b4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b52:	1e5a      	subs	r2, r3, #1
 8001b54:	4b1c      	ldr	r3, [pc, #112]	@ (8001bc8 <HeadBase+0xa4>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	641a      	str	r2, [r3, #64]	@ 0x40

		pinstate1 = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8);
 8001b5a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b5e:	4818      	ldr	r0, [pc, #96]	@ (8001bc0 <HeadBase+0x9c>)
 8001b60:	f000 ffbc 	bl	8002adc <HAL_GPIO_ReadPin>
 8001b64:	4603      	mov	r3, r0
 8001b66:	461a      	mov	r2, r3
 8001b68:	4b16      	ldr	r3, [pc, #88]	@ (8001bc4 <HeadBase+0xa0>)
 8001b6a:	701a      	strb	r2, [r3, #0]
		 if (pinstate1==0){
 8001b6c:	4b15      	ldr	r3, [pc, #84]	@ (8001bc4 <HeadBase+0xa0>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d10b      	bne.n	8001b8c <HeadBase+0x68>
			 HAL_Delay(200);
 8001b74:	20c8      	movs	r0, #200	@ 0xc8
 8001b76:	f000 fc3d 	bl	80023f4 <HAL_Delay>
			 pinstate1 = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8);
 8001b7a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b7e:	4810      	ldr	r0, [pc, #64]	@ (8001bc0 <HeadBase+0x9c>)
 8001b80:	f000 ffac 	bl	8002adc <HAL_GPIO_ReadPin>
 8001b84:	4603      	mov	r3, r0
 8001b86:	461a      	mov	r2, r3
 8001b88:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc4 <HeadBase+0xa0>)
 8001b8a:	701a      	strb	r2, [r3, #0]
	while(pinstate1)
 8001b8c:	4b0d      	ldr	r3, [pc, #52]	@ (8001bc4 <HeadBase+0xa0>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d1d8      	bne.n	8001b46 <HeadBase+0x22>
		 }

	}

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001b94:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc8 <HeadBase+0xa4>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc8 <HeadBase+0xa4>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	641a      	str	r2, [r3, #64]	@ 0x40
	HAL_Delay(2000);
 8001ba4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001ba8:	f000 fc24 	bl	80023f4 <HAL_Delay>
	Motor_Steer(3);
 8001bac:	2003      	movs	r0, #3
 8001bae:	f7ff fc7d 	bl	80014ac <Motor_Steer>
	posABS=0;
 8001bb2:	4b06      	ldr	r3, [pc, #24]	@ (8001bcc <HeadBase+0xa8>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	701a      	strb	r2, [r3, #0]

}
 8001bb8:	bf00      	nop
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	48000c00 	.word	0x48000c00
 8001bc4:	20000000 	.word	0x20000000
 8001bc8:	20000158 	.word	0x20000158
 8001bcc:	200000e8 	.word	0x200000e8

08001bd0 <SlotSensor_Init>:

// Counter for slot sensor
static GPIO_PinState last_state = GPIO_PIN_RESET; // Last state of the sensor
int8_t counter = 0;

void SlotSensor_Init(void) {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
	counter = 0;
 8001bd4:	4b06      	ldr	r3, [pc, #24]	@ (8001bf0 <SlotSensor_Init+0x20>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	701a      	strb	r2, [r3, #0]
    // Initialize the last state
    last_state = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7);
 8001bda:	2180      	movs	r1, #128	@ 0x80
 8001bdc:	4805      	ldr	r0, [pc, #20]	@ (8001bf4 <SlotSensor_Init+0x24>)
 8001bde:	f000 ff7d 	bl	8002adc <HAL_GPIO_ReadPin>
 8001be2:	4603      	mov	r3, r0
 8001be4:	461a      	mov	r2, r3
 8001be6:	4b04      	ldr	r3, [pc, #16]	@ (8001bf8 <SlotSensor_Init+0x28>)
 8001be8:	701a      	strb	r2, [r3, #0]
}
 8001bea:	bf00      	nop
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20000365 	.word	0x20000365
 8001bf4:	48001000 	.word	0x48001000
 8001bf8:	20000364 	.word	0x20000364

08001bfc <SlotSensor_Update>:

int SlotSensor_Update(void) {
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
    GPIO_PinState current_state = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7); // Read pin state
 8001c02:	2180      	movs	r1, #128	@ 0x80
 8001c04:	4815      	ldr	r0, [pc, #84]	@ (8001c5c <SlotSensor_Update+0x60>)
 8001c06:	f000 ff69 	bl	8002adc <HAL_GPIO_ReadPin>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	71fb      	strb	r3, [r7, #7]

    // Check for a change in state
    if (current_state == GPIO_PIN_SET && last_state == GPIO_PIN_RESET) {
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d118      	bne.n	8001c46 <SlotSensor_Update+0x4a>
 8001c14:	4b12      	ldr	r3, [pc, #72]	@ (8001c60 <SlotSensor_Update+0x64>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d114      	bne.n	8001c46 <SlotSensor_Update+0x4a>
    	HAL_Delay(1);
 8001c1c:	2001      	movs	r0, #1
 8001c1e:	f000 fbe9 	bl	80023f4 <HAL_Delay>
    	current_state = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7);
 8001c22:	2180      	movs	r1, #128	@ 0x80
 8001c24:	480d      	ldr	r0, [pc, #52]	@ (8001c5c <SlotSensor_Update+0x60>)
 8001c26:	f000 ff59 	bl	8002adc <HAL_GPIO_ReadPin>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	71fb      	strb	r3, [r7, #7]
    	if(current_state == GPIO_PIN_SET){
 8001c2e:	79fb      	ldrb	r3, [r7, #7]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d108      	bne.n	8001c46 <SlotSensor_Update+0x4a>
        counter++;} // Increment counter on state change
 8001c34:	4b0b      	ldr	r3, [pc, #44]	@ (8001c64 <SlotSensor_Update+0x68>)
 8001c36:	f993 3000 	ldrsb.w	r3, [r3]
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	b25a      	sxtb	r2, r3
 8001c42:	4b08      	ldr	r3, [pc, #32]	@ (8001c64 <SlotSensor_Update+0x68>)
 8001c44:	701a      	strb	r2, [r3, #0]
         // Update last state
    }
    last_state = current_state;
 8001c46:	4a06      	ldr	r2, [pc, #24]	@ (8001c60 <SlotSensor_Update+0x64>)
 8001c48:	79fb      	ldrb	r3, [r7, #7]
 8001c4a:	7013      	strb	r3, [r2, #0]
    return counter ;
 8001c4c:	4b05      	ldr	r3, [pc, #20]	@ (8001c64 <SlotSensor_Update+0x68>)
 8001c4e:	f993 3000 	ldrsb.w	r3, [r3]
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	48001000 	.word	0x48001000
 8001c60:	20000364 	.word	0x20000364
 8001c64:	20000365 	.word	0x20000365

08001c68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c6e:	4b0f      	ldr	r3, [pc, #60]	@ (8001cac <HAL_MspInit+0x44>)
 8001c70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c72:	4a0e      	ldr	r2, [pc, #56]	@ (8001cac <HAL_MspInit+0x44>)
 8001c74:	f043 0301 	orr.w	r3, r3, #1
 8001c78:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001cac <HAL_MspInit+0x44>)
 8001c7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	607b      	str	r3, [r7, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c86:	4b09      	ldr	r3, [pc, #36]	@ (8001cac <HAL_MspInit+0x44>)
 8001c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c8a:	4a08      	ldr	r2, [pc, #32]	@ (8001cac <HAL_MspInit+0x44>)
 8001c8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c90:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c92:	4b06      	ldr	r3, [pc, #24]	@ (8001cac <HAL_MspInit+0x44>)
 8001c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c9a:	603b      	str	r3, [r7, #0]
 8001c9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001c9e:	f001 f80b 	bl	8002cb8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40021000 	.word	0x40021000

08001cb0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b08a      	sub	sp, #40	@ 0x28
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb8:	f107 0314 	add.w	r3, r7, #20
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	605a      	str	r2, [r3, #4]
 8001cc2:	609a      	str	r2, [r3, #8]
 8001cc4:	60da      	str	r2, [r3, #12]
 8001cc6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a26      	ldr	r2, [pc, #152]	@ (8001d68 <HAL_SPI_MspInit+0xb8>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d145      	bne.n	8001d5e <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cd2:	4b26      	ldr	r3, [pc, #152]	@ (8001d6c <HAL_SPI_MspInit+0xbc>)
 8001cd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cd6:	4a25      	ldr	r2, [pc, #148]	@ (8001d6c <HAL_SPI_MspInit+0xbc>)
 8001cd8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001cdc:	6613      	str	r3, [r2, #96]	@ 0x60
 8001cde:	4b23      	ldr	r3, [pc, #140]	@ (8001d6c <HAL_SPI_MspInit+0xbc>)
 8001ce0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ce2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ce6:	613b      	str	r3, [r7, #16]
 8001ce8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cea:	4b20      	ldr	r3, [pc, #128]	@ (8001d6c <HAL_SPI_MspInit+0xbc>)
 8001cec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cee:	4a1f      	ldr	r2, [pc, #124]	@ (8001d6c <HAL_SPI_MspInit+0xbc>)
 8001cf0:	f043 0301 	orr.w	r3, r3, #1
 8001cf4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cf6:	4b1d      	ldr	r3, [pc, #116]	@ (8001d6c <HAL_SPI_MspInit+0xbc>)
 8001cf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d02:	4b1a      	ldr	r3, [pc, #104]	@ (8001d6c <HAL_SPI_MspInit+0xbc>)
 8001d04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d06:	4a19      	ldr	r2, [pc, #100]	@ (8001d6c <HAL_SPI_MspInit+0xbc>)
 8001d08:	f043 0302 	orr.w	r3, r3, #2
 8001d0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d0e:	4b17      	ldr	r3, [pc, #92]	@ (8001d6c <HAL_SPI_MspInit+0xbc>)
 8001d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	60bb      	str	r3, [r7, #8]
 8001d18:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d20:	2302      	movs	r3, #2
 8001d22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d2c:	2305      	movs	r3, #5
 8001d2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d30:	f107 0314 	add.w	r3, r7, #20
 8001d34:	4619      	mov	r1, r3
 8001d36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d3a:	f000 fd4d 	bl	80027d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001d3e:	2338      	movs	r3, #56	@ 0x38
 8001d40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d42:	2302      	movs	r3, #2
 8001d44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d4e:	2305      	movs	r3, #5
 8001d50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d52:	f107 0314 	add.w	r3, r7, #20
 8001d56:	4619      	mov	r1, r3
 8001d58:	4805      	ldr	r0, [pc, #20]	@ (8001d70 <HAL_SPI_MspInit+0xc0>)
 8001d5a:	f000 fd3d 	bl	80027d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001d5e:	bf00      	nop
 8001d60:	3728      	adds	r7, #40	@ 0x28
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40013000 	.word	0x40013000
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	48000400 	.word	0x48000400

08001d74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a0a      	ldr	r2, [pc, #40]	@ (8001dac <HAL_TIM_Base_MspInit+0x38>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d10b      	bne.n	8001d9e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d86:	4b0a      	ldr	r3, [pc, #40]	@ (8001db0 <HAL_TIM_Base_MspInit+0x3c>)
 8001d88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d8a:	4a09      	ldr	r2, [pc, #36]	@ (8001db0 <HAL_TIM_Base_MspInit+0x3c>)
 8001d8c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d90:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d92:	4b07      	ldr	r3, [pc, #28]	@ (8001db0 <HAL_TIM_Base_MspInit+0x3c>)
 8001d94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001d9e:	bf00      	nop
 8001da0:	3714      	adds	r7, #20
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	40012c00 	.word	0x40012c00
 8001db0:	40021000 	.word	0x40021000

08001db4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08c      	sub	sp, #48	@ 0x30
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dbc:	f107 031c 	add.w	r3, r7, #28
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	60da      	str	r2, [r3, #12]
 8001dca:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a33      	ldr	r2, [pc, #204]	@ (8001ea0 <HAL_TIM_Encoder_MspInit+0xec>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d128      	bne.n	8001e28 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001dd6:	4b33      	ldr	r3, [pc, #204]	@ (8001ea4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dda:	4a32      	ldr	r2, [pc, #200]	@ (8001ea4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001ddc:	f043 0302 	orr.w	r3, r3, #2
 8001de0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001de2:	4b30      	ldr	r3, [pc, #192]	@ (8001ea4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	61bb      	str	r3, [r7, #24]
 8001dec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dee:	4b2d      	ldr	r3, [pc, #180]	@ (8001ea4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001df0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001df2:	4a2c      	ldr	r2, [pc, #176]	@ (8001ea4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001df4:	f043 0304 	orr.w	r3, r3, #4
 8001df8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dfa:	4b2a      	ldr	r3, [pc, #168]	@ (8001ea4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001dfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dfe:	f003 0304 	and.w	r3, r3, #4
 8001e02:	617b      	str	r3, [r7, #20]
 8001e04:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Motor_B_EN_CH1_Pin|Motor_B_EN_CH2_Pin;
 8001e06:	23c0      	movs	r3, #192	@ 0xc0
 8001e08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e12:	2300      	movs	r3, #0
 8001e14:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e16:	2302      	movs	r3, #2
 8001e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e1a:	f107 031c 	add.w	r3, r7, #28
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4821      	ldr	r0, [pc, #132]	@ (8001ea8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001e22:	f000 fcd9 	bl	80027d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001e26:	e036      	b.n	8001e96 <HAL_TIM_Encoder_MspInit+0xe2>
  else if(htim_encoder->Instance==TIM4)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a1f      	ldr	r2, [pc, #124]	@ (8001eac <HAL_TIM_Encoder_MspInit+0xf8>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d131      	bne.n	8001e96 <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e32:	4b1c      	ldr	r3, [pc, #112]	@ (8001ea4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e36:	4a1b      	ldr	r2, [pc, #108]	@ (8001ea4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001e38:	f043 0304 	orr.w	r3, r3, #4
 8001e3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e3e:	4b19      	ldr	r3, [pc, #100]	@ (8001ea4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e42:	f003 0304 	and.w	r3, r3, #4
 8001e46:	613b      	str	r3, [r7, #16]
 8001e48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4a:	4b16      	ldr	r3, [pc, #88]	@ (8001ea4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001e4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e4e:	4a15      	ldr	r2, [pc, #84]	@ (8001ea4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e56:	4b13      	ldr	r3, [pc, #76]	@ (8001ea4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Motor_A_EN_CH2_Pin|Motor_A_EN_CH1_Pin;
 8001e62:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001e66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e70:	2300      	movs	r3, #0
 8001e72:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001e74:	230a      	movs	r3, #10
 8001e76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e78:	f107 031c 	add.w	r3, r7, #28
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e82:	f000 fca9 	bl	80027d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001e86:	2200      	movs	r2, #0
 8001e88:	2100      	movs	r1, #0
 8001e8a:	201e      	movs	r0, #30
 8001e8c:	f000 fbaf 	bl	80025ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001e90:	201e      	movs	r0, #30
 8001e92:	f000 fbc6 	bl	8002622 <HAL_NVIC_EnableIRQ>
}
 8001e96:	bf00      	nop
 8001e98:	3730      	adds	r7, #48	@ 0x30
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40000400 	.word	0x40000400
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	48000800 	.word	0x48000800
 8001eac:	40000800 	.word	0x40000800

08001eb0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b088      	sub	sp, #32
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb8:	f107 030c 	add.w	r3, r7, #12
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	605a      	str	r2, [r3, #4]
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	60da      	str	r2, [r3, #12]
 8001ec6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a11      	ldr	r2, [pc, #68]	@ (8001f14 <HAL_TIM_MspPostInit+0x64>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d11b      	bne.n	8001f0a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ed2:	4b11      	ldr	r3, [pc, #68]	@ (8001f18 <HAL_TIM_MspPostInit+0x68>)
 8001ed4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ed6:	4a10      	ldr	r2, [pc, #64]	@ (8001f18 <HAL_TIM_MspPostInit+0x68>)
 8001ed8:	f043 0304 	orr.w	r3, r3, #4
 8001edc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ede:	4b0e      	ldr	r3, [pc, #56]	@ (8001f18 <HAL_TIM_MspPostInit+0x68>)
 8001ee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ee2:	f003 0304 	and.w	r3, r3, #4
 8001ee6:	60bb      	str	r3, [r7, #8]
 8001ee8:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Motor_A_CH1_Pin|Motor_A_CH2_Pin|Motor_B_CH3_Pin|Motor_A_CH4_Pin;
 8001eea:	230f      	movs	r3, #15
 8001eec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eee:	2302      	movs	r3, #2
 8001ef0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001efa:	2302      	movs	r3, #2
 8001efc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001efe:	f107 030c 	add.w	r3, r7, #12
 8001f02:	4619      	mov	r1, r3
 8001f04:	4805      	ldr	r0, [pc, #20]	@ (8001f1c <HAL_TIM_MspPostInit+0x6c>)
 8001f06:	f000 fc67 	bl	80027d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001f0a:	bf00      	nop
 8001f0c:	3720      	adds	r7, #32
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40012c00 	.word	0x40012c00
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	48000800 	.word	0x48000800

08001f20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b0a2      	sub	sp, #136	@ 0x88
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f28:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	60da      	str	r2, [r3, #12]
 8001f36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f38:	f107 0320 	add.w	r3, r7, #32
 8001f3c:	2254      	movs	r2, #84	@ 0x54
 8001f3e:	2100      	movs	r1, #0
 8001f40:	4618      	mov	r0, r3
 8001f42:	f006 f89f 	bl	8008084 <memset>
  if(huart->Instance==UART4)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a56      	ldr	r2, [pc, #344]	@ (80020a4 <HAL_UART_MspInit+0x184>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d141      	bne.n	8001fd4 <HAL_UART_MspInit+0xb4>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001f50:	2308      	movs	r3, #8
 8001f52:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001f54:	2300      	movs	r3, #0
 8001f56:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f58:	f107 0320 	add.w	r3, r7, #32
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f001 fbe9 	bl	8003734 <HAL_RCCEx_PeriphCLKConfig>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f68:	f7ff fa86 	bl	8001478 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001f6c:	4b4e      	ldr	r3, [pc, #312]	@ (80020a8 <HAL_UART_MspInit+0x188>)
 8001f6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f70:	4a4d      	ldr	r2, [pc, #308]	@ (80020a8 <HAL_UART_MspInit+0x188>)
 8001f72:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001f76:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f78:	4b4b      	ldr	r3, [pc, #300]	@ (80020a8 <HAL_UART_MspInit+0x188>)
 8001f7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f7c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f80:	61fb      	str	r3, [r7, #28]
 8001f82:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f84:	4b48      	ldr	r3, [pc, #288]	@ (80020a8 <HAL_UART_MspInit+0x188>)
 8001f86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f88:	4a47      	ldr	r2, [pc, #284]	@ (80020a8 <HAL_UART_MspInit+0x188>)
 8001f8a:	f043 0304 	orr.w	r3, r3, #4
 8001f8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f90:	4b45      	ldr	r3, [pc, #276]	@ (80020a8 <HAL_UART_MspInit+0x188>)
 8001f92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f94:	f003 0304 	and.w	r3, r3, #4
 8001f98:	61bb      	str	r3, [r7, #24]
 8001f9a:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001f9c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001fa0:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001faa:	2300      	movs	r3, #0
 8001fac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8001fb0:	2305      	movs	r3, #5
 8001fb2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fb6:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001fba:	4619      	mov	r1, r3
 8001fbc:	483b      	ldr	r0, [pc, #236]	@ (80020ac <HAL_UART_MspInit+0x18c>)
 8001fbe:	f000 fc0b 	bl	80027d8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	2034      	movs	r0, #52	@ 0x34
 8001fc8:	f000 fb11 	bl	80025ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001fcc:	2034      	movs	r0, #52	@ 0x34
 8001fce:	f000 fb28 	bl	8002622 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8001fd2:	e063      	b.n	800209c <HAL_UART_MspInit+0x17c>
  else if(huart->Instance==UART5)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a35      	ldr	r2, [pc, #212]	@ (80020b0 <HAL_UART_MspInit+0x190>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d15e      	bne.n	800209c <HAL_UART_MspInit+0x17c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001fde:	2310      	movs	r3, #16
 8001fe0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fe6:	f107 0320 	add.w	r3, r7, #32
 8001fea:	4618      	mov	r0, r3
 8001fec:	f001 fba2 	bl	8003734 <HAL_RCCEx_PeriphCLKConfig>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <HAL_UART_MspInit+0xda>
      Error_Handler();
 8001ff6:	f7ff fa3f 	bl	8001478 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001ffa:	4b2b      	ldr	r3, [pc, #172]	@ (80020a8 <HAL_UART_MspInit+0x188>)
 8001ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ffe:	4a2a      	ldr	r2, [pc, #168]	@ (80020a8 <HAL_UART_MspInit+0x188>)
 8002000:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002004:	6593      	str	r3, [r2, #88]	@ 0x58
 8002006:	4b28      	ldr	r3, [pc, #160]	@ (80020a8 <HAL_UART_MspInit+0x188>)
 8002008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800200a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800200e:	617b      	str	r3, [r7, #20]
 8002010:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002012:	4b25      	ldr	r3, [pc, #148]	@ (80020a8 <HAL_UART_MspInit+0x188>)
 8002014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002016:	4a24      	ldr	r2, [pc, #144]	@ (80020a8 <HAL_UART_MspInit+0x188>)
 8002018:	f043 0304 	orr.w	r3, r3, #4
 800201c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800201e:	4b22      	ldr	r3, [pc, #136]	@ (80020a8 <HAL_UART_MspInit+0x188>)
 8002020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002022:	f003 0304 	and.w	r3, r3, #4
 8002026:	613b      	str	r3, [r7, #16]
 8002028:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800202a:	4b1f      	ldr	r3, [pc, #124]	@ (80020a8 <HAL_UART_MspInit+0x188>)
 800202c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800202e:	4a1e      	ldr	r2, [pc, #120]	@ (80020a8 <HAL_UART_MspInit+0x188>)
 8002030:	f043 0308 	orr.w	r3, r3, #8
 8002034:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002036:	4b1c      	ldr	r3, [pc, #112]	@ (80020a8 <HAL_UART_MspInit+0x188>)
 8002038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800203a:	f003 0308 	and.w	r3, r3, #8
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002042:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002046:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002048:	2302      	movs	r3, #2
 800204a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204c:	2300      	movs	r3, #0
 800204e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002050:	2300      	movs	r3, #0
 8002052:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8002056:	2305      	movs	r3, #5
 8002058:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800205c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002060:	4619      	mov	r1, r3
 8002062:	4812      	ldr	r0, [pc, #72]	@ (80020ac <HAL_UART_MspInit+0x18c>)
 8002064:	f000 fbb8 	bl	80027d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002068:	2304      	movs	r3, #4
 800206a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206c:	2302      	movs	r3, #2
 800206e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002070:	2300      	movs	r3, #0
 8002072:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002074:	2300      	movs	r3, #0
 8002076:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 800207a:	2305      	movs	r3, #5
 800207c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002080:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002084:	4619      	mov	r1, r3
 8002086:	480b      	ldr	r0, [pc, #44]	@ (80020b4 <HAL_UART_MspInit+0x194>)
 8002088:	f000 fba6 	bl	80027d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800208c:	2200      	movs	r2, #0
 800208e:	2100      	movs	r1, #0
 8002090:	2035      	movs	r0, #53	@ 0x35
 8002092:	f000 faac 	bl	80025ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002096:	2035      	movs	r0, #53	@ 0x35
 8002098:	f000 fac3 	bl	8002622 <HAL_NVIC_EnableIRQ>
}
 800209c:	bf00      	nop
 800209e:	3788      	adds	r7, #136	@ 0x88
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40004c00 	.word	0x40004c00
 80020a8:	40021000 	.word	0x40021000
 80020ac:	48000800 	.word	0x48000800
 80020b0:	40005000 	.word	0x40005000
 80020b4:	48000c00 	.word	0x48000c00

080020b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020bc:	bf00      	nop
 80020be:	e7fd      	b.n	80020bc <NMI_Handler+0x4>

080020c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020c4:	bf00      	nop
 80020c6:	e7fd      	b.n	80020c4 <HardFault_Handler+0x4>

080020c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020cc:	bf00      	nop
 80020ce:	e7fd      	b.n	80020cc <MemManage_Handler+0x4>

080020d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020d4:	bf00      	nop
 80020d6:	e7fd      	b.n	80020d4 <BusFault_Handler+0x4>

080020d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020dc:	bf00      	nop
 80020de:	e7fd      	b.n	80020dc <UsageFault_Handler+0x4>

080020e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020e4:	bf00      	nop
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020ee:	b480      	push	{r7}
 80020f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020f2:	bf00      	nop
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002100:	bf00      	nop
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800210e:	f000 f953 	bl	80023b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002112:	bf00      	nop
 8002114:	bd80      	pop	{r7, pc}
	...

08002118 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800211c:	4802      	ldr	r0, [pc, #8]	@ (8002128 <TIM4_IRQHandler+0x10>)
 800211e:	f002 ff8b 	bl	8005038 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002122:	bf00      	nop
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	200001f0 	.word	0x200001f0

0800212c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002130:	4802      	ldr	r0, [pc, #8]	@ (800213c <UART4_IRQHandler+0x10>)
 8002132:	f004 fae3 	bl	80066fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002136:	bf00      	nop
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	2000023c 	.word	0x2000023c

08002140 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt / UART5 wake-up interrupt through EXTI line 35.
  */
void UART5_IRQHandler(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002144:	4802      	ldr	r0, [pc, #8]	@ (8002150 <UART5_IRQHandler+0x10>)
 8002146:	f004 fad9 	bl	80066fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800214a:	bf00      	nop
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	200002d0 	.word	0x200002d0

08002154 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]
 8002164:	e00a      	b.n	800217c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002166:	f3af 8000 	nop.w
 800216a:	4601      	mov	r1, r0
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	1c5a      	adds	r2, r3, #1
 8002170:	60ba      	str	r2, [r7, #8]
 8002172:	b2ca      	uxtb	r2, r1
 8002174:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	3301      	adds	r3, #1
 800217a:	617b      	str	r3, [r7, #20]
 800217c:	697a      	ldr	r2, [r7, #20]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	429a      	cmp	r2, r3
 8002182:	dbf0      	blt.n	8002166 <_read+0x12>
  }

  return len;
 8002184:	687b      	ldr	r3, [r7, #4]
}
 8002186:	4618      	mov	r0, r3
 8002188:	3718      	adds	r7, #24
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b086      	sub	sp, #24
 8002192:	af00      	add	r7, sp, #0
 8002194:	60f8      	str	r0, [r7, #12]
 8002196:	60b9      	str	r1, [r7, #8]
 8002198:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800219a:	2300      	movs	r3, #0
 800219c:	617b      	str	r3, [r7, #20]
 800219e:	e009      	b.n	80021b4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	1c5a      	adds	r2, r3, #1
 80021a4:	60ba      	str	r2, [r7, #8]
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	3301      	adds	r3, #1
 80021b2:	617b      	str	r3, [r7, #20]
 80021b4:	697a      	ldr	r2, [r7, #20]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	dbf1      	blt.n	80021a0 <_write+0x12>
  }
  return len;
 80021bc:	687b      	ldr	r3, [r7, #4]
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3718      	adds	r7, #24
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <_close>:

int _close(int file)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
 80021e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021ee:	605a      	str	r2, [r3, #4]
  return 0;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <_isatty>:

int _isatty(int file)
{
 80021fe:	b480      	push	{r7}
 8002200:	b083      	sub	sp, #12
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002206:	2301      	movs	r3, #1
}
 8002208:	4618      	mov	r0, r3
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
	...

08002230 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002238:	4a14      	ldr	r2, [pc, #80]	@ (800228c <_sbrk+0x5c>)
 800223a:	4b15      	ldr	r3, [pc, #84]	@ (8002290 <_sbrk+0x60>)
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002244:	4b13      	ldr	r3, [pc, #76]	@ (8002294 <_sbrk+0x64>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d102      	bne.n	8002252 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800224c:	4b11      	ldr	r3, [pc, #68]	@ (8002294 <_sbrk+0x64>)
 800224e:	4a12      	ldr	r2, [pc, #72]	@ (8002298 <_sbrk+0x68>)
 8002250:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002252:	4b10      	ldr	r3, [pc, #64]	@ (8002294 <_sbrk+0x64>)
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4413      	add	r3, r2
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	429a      	cmp	r2, r3
 800225e:	d207      	bcs.n	8002270 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002260:	f005 ff82 	bl	8008168 <__errno>
 8002264:	4603      	mov	r3, r0
 8002266:	220c      	movs	r2, #12
 8002268:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800226a:	f04f 33ff 	mov.w	r3, #4294967295
 800226e:	e009      	b.n	8002284 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002270:	4b08      	ldr	r3, [pc, #32]	@ (8002294 <_sbrk+0x64>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002276:	4b07      	ldr	r3, [pc, #28]	@ (8002294 <_sbrk+0x64>)
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4413      	add	r3, r2
 800227e:	4a05      	ldr	r2, [pc, #20]	@ (8002294 <_sbrk+0x64>)
 8002280:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002282:	68fb      	ldr	r3, [r7, #12]
}
 8002284:	4618      	mov	r0, r3
 8002286:	3718      	adds	r7, #24
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	20020000 	.word	0x20020000
 8002290:	00000400 	.word	0x00000400
 8002294:	20000368 	.word	0x20000368
 8002298:	200004c0 	.word	0x200004c0

0800229c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80022a0:	4b06      	ldr	r3, [pc, #24]	@ (80022bc <SystemInit+0x20>)
 80022a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022a6:	4a05      	ldr	r2, [pc, #20]	@ (80022bc <SystemInit+0x20>)
 80022a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022b0:	bf00      	nop
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	e000ed00 	.word	0xe000ed00

080022c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80022c0:	480d      	ldr	r0, [pc, #52]	@ (80022f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80022c2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022c4:	f7ff ffea 	bl	800229c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022c8:	480c      	ldr	r0, [pc, #48]	@ (80022fc <LoopForever+0x6>)
  ldr r1, =_edata
 80022ca:	490d      	ldr	r1, [pc, #52]	@ (8002300 <LoopForever+0xa>)
  ldr r2, =_sidata
 80022cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002304 <LoopForever+0xe>)
  movs r3, #0
 80022ce:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80022d0:	e002      	b.n	80022d8 <LoopCopyDataInit>

080022d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022d6:	3304      	adds	r3, #4

080022d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022dc:	d3f9      	bcc.n	80022d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022de:	4a0a      	ldr	r2, [pc, #40]	@ (8002308 <LoopForever+0x12>)
  ldr r4, =_ebss
 80022e0:	4c0a      	ldr	r4, [pc, #40]	@ (800230c <LoopForever+0x16>)
  movs r3, #0
 80022e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022e4:	e001      	b.n	80022ea <LoopFillZerobss>

080022e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022e8:	3204      	adds	r2, #4

080022ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022ec:	d3fb      	bcc.n	80022e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022ee:	f005 ff41 	bl	8008174 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022f2:	f7fe fd53 	bl	8000d9c <main>

080022f6 <LoopForever>:

LoopForever:
    b LoopForever
 80022f6:	e7fe      	b.n	80022f6 <LoopForever>
  ldr   r0, =_estack
 80022f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002300:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002304:	080097c4 	.word	0x080097c4
  ldr r2, =_sbss
 8002308:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800230c:	200004bc 	.word	0x200004bc

08002310 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002310:	e7fe      	b.n	8002310 <ADC1_2_IRQHandler>

08002312 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b082      	sub	sp, #8
 8002316:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002318:	2300      	movs	r3, #0
 800231a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800231c:	2003      	movs	r0, #3
 800231e:	f000 f95b 	bl	80025d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002322:	200f      	movs	r0, #15
 8002324:	f000 f80e 	bl	8002344 <HAL_InitTick>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d002      	beq.n	8002334 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	71fb      	strb	r3, [r7, #7]
 8002332:	e001      	b.n	8002338 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002334:	f7ff fc98 	bl	8001c68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002338:	79fb      	ldrb	r3, [r7, #7]

}
 800233a:	4618      	mov	r0, r3
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
	...

08002344 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800234c:	2300      	movs	r3, #0
 800234e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002350:	4b16      	ldr	r3, [pc, #88]	@ (80023ac <HAL_InitTick+0x68>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d022      	beq.n	800239e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002358:	4b15      	ldr	r3, [pc, #84]	@ (80023b0 <HAL_InitTick+0x6c>)
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	4b13      	ldr	r3, [pc, #76]	@ (80023ac <HAL_InitTick+0x68>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002364:	fbb1 f3f3 	udiv	r3, r1, r3
 8002368:	fbb2 f3f3 	udiv	r3, r2, r3
 800236c:	4618      	mov	r0, r3
 800236e:	f000 f966 	bl	800263e <HAL_SYSTICK_Config>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d10f      	bne.n	8002398 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2b0f      	cmp	r3, #15
 800237c:	d809      	bhi.n	8002392 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800237e:	2200      	movs	r2, #0
 8002380:	6879      	ldr	r1, [r7, #4]
 8002382:	f04f 30ff 	mov.w	r0, #4294967295
 8002386:	f000 f932 	bl	80025ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800238a:	4a0a      	ldr	r2, [pc, #40]	@ (80023b4 <HAL_InitTick+0x70>)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6013      	str	r3, [r2, #0]
 8002390:	e007      	b.n	80023a2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	73fb      	strb	r3, [r7, #15]
 8002396:	e004      	b.n	80023a2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	73fb      	strb	r3, [r7, #15]
 800239c:	e001      	b.n	80023a2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80023a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3710      	adds	r7, #16
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	2000000c 	.word	0x2000000c
 80023b0:	20000004 	.word	0x20000004
 80023b4:	20000008 	.word	0x20000008

080023b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023bc:	4b05      	ldr	r3, [pc, #20]	@ (80023d4 <HAL_IncTick+0x1c>)
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	4b05      	ldr	r3, [pc, #20]	@ (80023d8 <HAL_IncTick+0x20>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4413      	add	r3, r2
 80023c6:	4a03      	ldr	r2, [pc, #12]	@ (80023d4 <HAL_IncTick+0x1c>)
 80023c8:	6013      	str	r3, [r2, #0]
}
 80023ca:	bf00      	nop
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	2000036c 	.word	0x2000036c
 80023d8:	2000000c 	.word	0x2000000c

080023dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  return uwTick;
 80023e0:	4b03      	ldr	r3, [pc, #12]	@ (80023f0 <HAL_GetTick+0x14>)
 80023e2:	681b      	ldr	r3, [r3, #0]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	2000036c 	.word	0x2000036c

080023f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023fc:	f7ff ffee 	bl	80023dc <HAL_GetTick>
 8002400:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800240c:	d004      	beq.n	8002418 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800240e:	4b09      	ldr	r3, [pc, #36]	@ (8002434 <HAL_Delay+0x40>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	4413      	add	r3, r2
 8002416:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002418:	bf00      	nop
 800241a:	f7ff ffdf 	bl	80023dc <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	429a      	cmp	r2, r3
 8002428:	d8f7      	bhi.n	800241a <HAL_Delay+0x26>
  {
  }
}
 800242a:	bf00      	nop
 800242c:	bf00      	nop
 800242e:	3710      	adds	r7, #16
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	2000000c 	.word	0x2000000c

08002438 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f003 0307 	and.w	r3, r3, #7
 8002446:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002448:	4b0c      	ldr	r3, [pc, #48]	@ (800247c <__NVIC_SetPriorityGrouping+0x44>)
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800244e:	68ba      	ldr	r2, [r7, #8]
 8002450:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002454:	4013      	ands	r3, r2
 8002456:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002460:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002464:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002468:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800246a:	4a04      	ldr	r2, [pc, #16]	@ (800247c <__NVIC_SetPriorityGrouping+0x44>)
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	60d3      	str	r3, [r2, #12]
}
 8002470:	bf00      	nop
 8002472:	3714      	adds	r7, #20
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	e000ed00 	.word	0xe000ed00

08002480 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002484:	4b04      	ldr	r3, [pc, #16]	@ (8002498 <__NVIC_GetPriorityGrouping+0x18>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	0a1b      	lsrs	r3, r3, #8
 800248a:	f003 0307 	and.w	r3, r3, #7
}
 800248e:	4618      	mov	r0, r3
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	e000ed00 	.word	0xe000ed00

0800249c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	db0b      	blt.n	80024c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ae:	79fb      	ldrb	r3, [r7, #7]
 80024b0:	f003 021f 	and.w	r2, r3, #31
 80024b4:	4907      	ldr	r1, [pc, #28]	@ (80024d4 <__NVIC_EnableIRQ+0x38>)
 80024b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ba:	095b      	lsrs	r3, r3, #5
 80024bc:	2001      	movs	r0, #1
 80024be:	fa00 f202 	lsl.w	r2, r0, r2
 80024c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	e000e100 	.word	0xe000e100

080024d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	4603      	mov	r3, r0
 80024e0:	6039      	str	r1, [r7, #0]
 80024e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	db0a      	blt.n	8002502 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	b2da      	uxtb	r2, r3
 80024f0:	490c      	ldr	r1, [pc, #48]	@ (8002524 <__NVIC_SetPriority+0x4c>)
 80024f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f6:	0112      	lsls	r2, r2, #4
 80024f8:	b2d2      	uxtb	r2, r2
 80024fa:	440b      	add	r3, r1
 80024fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002500:	e00a      	b.n	8002518 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	b2da      	uxtb	r2, r3
 8002506:	4908      	ldr	r1, [pc, #32]	@ (8002528 <__NVIC_SetPriority+0x50>)
 8002508:	79fb      	ldrb	r3, [r7, #7]
 800250a:	f003 030f 	and.w	r3, r3, #15
 800250e:	3b04      	subs	r3, #4
 8002510:	0112      	lsls	r2, r2, #4
 8002512:	b2d2      	uxtb	r2, r2
 8002514:	440b      	add	r3, r1
 8002516:	761a      	strb	r2, [r3, #24]
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr
 8002524:	e000e100 	.word	0xe000e100
 8002528:	e000ed00 	.word	0xe000ed00

0800252c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800252c:	b480      	push	{r7}
 800252e:	b089      	sub	sp, #36	@ 0x24
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	f1c3 0307 	rsb	r3, r3, #7
 8002546:	2b04      	cmp	r3, #4
 8002548:	bf28      	it	cs
 800254a:	2304      	movcs	r3, #4
 800254c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	3304      	adds	r3, #4
 8002552:	2b06      	cmp	r3, #6
 8002554:	d902      	bls.n	800255c <NVIC_EncodePriority+0x30>
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	3b03      	subs	r3, #3
 800255a:	e000      	b.n	800255e <NVIC_EncodePriority+0x32>
 800255c:	2300      	movs	r3, #0
 800255e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002560:	f04f 32ff 	mov.w	r2, #4294967295
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	43da      	mvns	r2, r3
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	401a      	ands	r2, r3
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002574:	f04f 31ff 	mov.w	r1, #4294967295
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	fa01 f303 	lsl.w	r3, r1, r3
 800257e:	43d9      	mvns	r1, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002584:	4313      	orrs	r3, r2
         );
}
 8002586:	4618      	mov	r0, r3
 8002588:	3724      	adds	r7, #36	@ 0x24
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
	...

08002594 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3b01      	subs	r3, #1
 80025a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025a4:	d301      	bcc.n	80025aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025a6:	2301      	movs	r3, #1
 80025a8:	e00f      	b.n	80025ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025aa:	4a0a      	ldr	r2, [pc, #40]	@ (80025d4 <SysTick_Config+0x40>)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	3b01      	subs	r3, #1
 80025b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025b2:	210f      	movs	r1, #15
 80025b4:	f04f 30ff 	mov.w	r0, #4294967295
 80025b8:	f7ff ff8e 	bl	80024d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025bc:	4b05      	ldr	r3, [pc, #20]	@ (80025d4 <SysTick_Config+0x40>)
 80025be:	2200      	movs	r2, #0
 80025c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025c2:	4b04      	ldr	r3, [pc, #16]	@ (80025d4 <SysTick_Config+0x40>)
 80025c4:	2207      	movs	r2, #7
 80025c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	e000e010 	.word	0xe000e010

080025d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f7ff ff29 	bl	8002438 <__NVIC_SetPriorityGrouping>
}
 80025e6:	bf00      	nop
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b086      	sub	sp, #24
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	4603      	mov	r3, r0
 80025f6:	60b9      	str	r1, [r7, #8]
 80025f8:	607a      	str	r2, [r7, #4]
 80025fa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80025fc:	f7ff ff40 	bl	8002480 <__NVIC_GetPriorityGrouping>
 8002600:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	68b9      	ldr	r1, [r7, #8]
 8002606:	6978      	ldr	r0, [r7, #20]
 8002608:	f7ff ff90 	bl	800252c <NVIC_EncodePriority>
 800260c:	4602      	mov	r2, r0
 800260e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002612:	4611      	mov	r1, r2
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff ff5f 	bl	80024d8 <__NVIC_SetPriority>
}
 800261a:	bf00      	nop
 800261c:	3718      	adds	r7, #24
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b082      	sub	sp, #8
 8002626:	af00      	add	r7, sp, #0
 8002628:	4603      	mov	r3, r0
 800262a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800262c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff ff33 	bl	800249c <__NVIC_EnableIRQ>
}
 8002636:	bf00      	nop
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b082      	sub	sp, #8
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7ff ffa4 	bl	8002594 <SysTick_Config>
 800264c:	4603      	mov	r3, r0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002656:	b480      	push	{r7}
 8002658:	b085      	sub	sp, #20
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800265e:	2300      	movs	r3, #0
 8002660:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d005      	beq.n	800267a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2204      	movs	r2, #4
 8002672:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	73fb      	strb	r3, [r7, #15]
 8002678:	e037      	b.n	80026ea <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f022 020e 	bic.w	r2, r2, #14
 8002688:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002694:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002698:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 0201 	bic.w	r2, r2, #1
 80026a8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ae:	f003 021f 	and.w	r2, r3, #31
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b6:	2101      	movs	r1, #1
 80026b8:	fa01 f202 	lsl.w	r2, r1, r2
 80026bc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80026c6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00c      	beq.n	80026ea <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026da:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026de:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80026e8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80026fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3714      	adds	r7, #20
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002710:	2300      	movs	r3, #0
 8002712:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800271a:	b2db      	uxtb	r3, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d00d      	beq.n	800273c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2204      	movs	r2, #4
 8002724:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	73fb      	strb	r3, [r7, #15]
 800273a:	e047      	b.n	80027cc <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f022 020e 	bic.w	r2, r2, #14
 800274a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 0201 	bic.w	r2, r2, #1
 800275a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002766:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800276a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002770:	f003 021f 	and.w	r2, r3, #31
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002778:	2101      	movs	r1, #1
 800277a:	fa01 f202 	lsl.w	r2, r1, r2
 800277e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002788:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00c      	beq.n	80027ac <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800279c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027a0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80027aa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d003      	beq.n	80027cc <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	4798      	blx	r3
    }
  }
  return status;
 80027cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
	...

080027d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027d8:	b480      	push	{r7}
 80027da:	b087      	sub	sp, #28
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80027e2:	2300      	movs	r3, #0
 80027e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80027e6:	e15a      	b.n	8002a9e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	2101      	movs	r1, #1
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	fa01 f303 	lsl.w	r3, r1, r3
 80027f4:	4013      	ands	r3, r2
 80027f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f000 814c 	beq.w	8002a98 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f003 0303 	and.w	r3, r3, #3
 8002808:	2b01      	cmp	r3, #1
 800280a:	d005      	beq.n	8002818 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002814:	2b02      	cmp	r3, #2
 8002816:	d130      	bne.n	800287a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	2203      	movs	r2, #3
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	43db      	mvns	r3, r3
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	4013      	ands	r3, r2
 800282e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	68da      	ldr	r2, [r3, #12]
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	4313      	orrs	r3, r2
 8002840:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800284e:	2201      	movs	r2, #1
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	43db      	mvns	r3, r3
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	4013      	ands	r3, r2
 800285c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	091b      	lsrs	r3, r3, #4
 8002864:	f003 0201 	and.w	r2, r3, #1
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	4313      	orrs	r3, r2
 8002872:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f003 0303 	and.w	r3, r3, #3
 8002882:	2b03      	cmp	r3, #3
 8002884:	d017      	beq.n	80028b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	2203      	movs	r2, #3
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	43db      	mvns	r3, r3
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	4013      	ands	r3, r2
 800289c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	689a      	ldr	r2, [r3, #8]
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f003 0303 	and.w	r3, r3, #3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d123      	bne.n	800290a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	08da      	lsrs	r2, r3, #3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	3208      	adds	r2, #8
 80028ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	f003 0307 	and.w	r3, r3, #7
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	220f      	movs	r2, #15
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	43db      	mvns	r3, r3
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	4013      	ands	r3, r2
 80028e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	691a      	ldr	r2, [r3, #16]
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	f003 0307 	and.w	r3, r3, #7
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	08da      	lsrs	r2, r3, #3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3208      	adds	r2, #8
 8002904:	6939      	ldr	r1, [r7, #16]
 8002906:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	2203      	movs	r2, #3
 8002916:	fa02 f303 	lsl.w	r3, r2, r3
 800291a:	43db      	mvns	r3, r3
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	4013      	ands	r3, r2
 8002920:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f003 0203 	and.w	r2, r3, #3
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	4313      	orrs	r3, r2
 8002936:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	693a      	ldr	r2, [r7, #16]
 800293c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002946:	2b00      	cmp	r3, #0
 8002948:	f000 80a6 	beq.w	8002a98 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800294c:	4b5b      	ldr	r3, [pc, #364]	@ (8002abc <HAL_GPIO_Init+0x2e4>)
 800294e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002950:	4a5a      	ldr	r2, [pc, #360]	@ (8002abc <HAL_GPIO_Init+0x2e4>)
 8002952:	f043 0301 	orr.w	r3, r3, #1
 8002956:	6613      	str	r3, [r2, #96]	@ 0x60
 8002958:	4b58      	ldr	r3, [pc, #352]	@ (8002abc <HAL_GPIO_Init+0x2e4>)
 800295a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	60bb      	str	r3, [r7, #8]
 8002962:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002964:	4a56      	ldr	r2, [pc, #344]	@ (8002ac0 <HAL_GPIO_Init+0x2e8>)
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	089b      	lsrs	r3, r3, #2
 800296a:	3302      	adds	r3, #2
 800296c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002970:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	f003 0303 	and.w	r3, r3, #3
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	220f      	movs	r2, #15
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	43db      	mvns	r3, r3
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	4013      	ands	r3, r2
 8002986:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800298e:	d01f      	beq.n	80029d0 <HAL_GPIO_Init+0x1f8>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4a4c      	ldr	r2, [pc, #304]	@ (8002ac4 <HAL_GPIO_Init+0x2ec>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d019      	beq.n	80029cc <HAL_GPIO_Init+0x1f4>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a4b      	ldr	r2, [pc, #300]	@ (8002ac8 <HAL_GPIO_Init+0x2f0>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d013      	beq.n	80029c8 <HAL_GPIO_Init+0x1f0>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a4a      	ldr	r2, [pc, #296]	@ (8002acc <HAL_GPIO_Init+0x2f4>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d00d      	beq.n	80029c4 <HAL_GPIO_Init+0x1ec>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a49      	ldr	r2, [pc, #292]	@ (8002ad0 <HAL_GPIO_Init+0x2f8>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d007      	beq.n	80029c0 <HAL_GPIO_Init+0x1e8>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a48      	ldr	r2, [pc, #288]	@ (8002ad4 <HAL_GPIO_Init+0x2fc>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d101      	bne.n	80029bc <HAL_GPIO_Init+0x1e4>
 80029b8:	2305      	movs	r3, #5
 80029ba:	e00a      	b.n	80029d2 <HAL_GPIO_Init+0x1fa>
 80029bc:	2306      	movs	r3, #6
 80029be:	e008      	b.n	80029d2 <HAL_GPIO_Init+0x1fa>
 80029c0:	2304      	movs	r3, #4
 80029c2:	e006      	b.n	80029d2 <HAL_GPIO_Init+0x1fa>
 80029c4:	2303      	movs	r3, #3
 80029c6:	e004      	b.n	80029d2 <HAL_GPIO_Init+0x1fa>
 80029c8:	2302      	movs	r3, #2
 80029ca:	e002      	b.n	80029d2 <HAL_GPIO_Init+0x1fa>
 80029cc:	2301      	movs	r3, #1
 80029ce:	e000      	b.n	80029d2 <HAL_GPIO_Init+0x1fa>
 80029d0:	2300      	movs	r3, #0
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	f002 0203 	and.w	r2, r2, #3
 80029d8:	0092      	lsls	r2, r2, #2
 80029da:	4093      	lsls	r3, r2
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	4313      	orrs	r3, r2
 80029e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029e2:	4937      	ldr	r1, [pc, #220]	@ (8002ac0 <HAL_GPIO_Init+0x2e8>)
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	089b      	lsrs	r3, r3, #2
 80029e8:	3302      	adds	r3, #2
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029f0:	4b39      	ldr	r3, [pc, #228]	@ (8002ad8 <HAL_GPIO_Init+0x300>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	43db      	mvns	r3, r3
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	4013      	ands	r3, r2
 80029fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d003      	beq.n	8002a14 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a14:	4a30      	ldr	r2, [pc, #192]	@ (8002ad8 <HAL_GPIO_Init+0x300>)
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a1a:	4b2f      	ldr	r3, [pc, #188]	@ (8002ad8 <HAL_GPIO_Init+0x300>)
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	43db      	mvns	r3, r3
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	4013      	ands	r3, r2
 8002a28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d003      	beq.n	8002a3e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a3e:	4a26      	ldr	r2, [pc, #152]	@ (8002ad8 <HAL_GPIO_Init+0x300>)
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002a44:	4b24      	ldr	r3, [pc, #144]	@ (8002ad8 <HAL_GPIO_Init+0x300>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	4013      	ands	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d003      	beq.n	8002a68 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a68:	4a1b      	ldr	r2, [pc, #108]	@ (8002ad8 <HAL_GPIO_Init+0x300>)
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002a6e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ad8 <HAL_GPIO_Init+0x300>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	43db      	mvns	r3, r3
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a92:	4a11      	ldr	r2, [pc, #68]	@ (8002ad8 <HAL_GPIO_Init+0x300>)
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f47f ae9d 	bne.w	80027e8 <HAL_GPIO_Init+0x10>
  }
}
 8002aae:	bf00      	nop
 8002ab0:	bf00      	nop
 8002ab2:	371c      	adds	r7, #28
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	40010000 	.word	0x40010000
 8002ac4:	48000400 	.word	0x48000400
 8002ac8:	48000800 	.word	0x48000800
 8002acc:	48000c00 	.word	0x48000c00
 8002ad0:	48001000 	.word	0x48001000
 8002ad4:	48001400 	.word	0x48001400
 8002ad8:	40010400 	.word	0x40010400

08002adc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	691a      	ldr	r2, [r3, #16]
 8002aec:	887b      	ldrh	r3, [r7, #2]
 8002aee:	4013      	ands	r3, r2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d002      	beq.n	8002afa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002af4:	2301      	movs	r3, #1
 8002af6:	73fb      	strb	r3, [r7, #15]
 8002af8:	e001      	b.n	8002afe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002afa:	2300      	movs	r3, #0
 8002afc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3714      	adds	r7, #20
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	460b      	mov	r3, r1
 8002b16:	807b      	strh	r3, [r7, #2]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b1c:	787b      	ldrb	r3, [r7, #1]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b22:	887a      	ldrh	r2, [r7, #2]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b28:	e002      	b.n	8002b30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b2a:	887a      	ldrh	r2, [r7, #2]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	460b      	mov	r3, r1
 8002b46:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b4e:	887a      	ldrh	r2, [r7, #2]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	4013      	ands	r3, r2
 8002b54:	041a      	lsls	r2, r3, #16
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	43d9      	mvns	r1, r3
 8002b5a:	887b      	ldrh	r3, [r7, #2]
 8002b5c:	400b      	ands	r3, r1
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	619a      	str	r2, [r3, #24]
}
 8002b64:	bf00      	nop
 8002b66:	3714      	adds	r7, #20
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b085      	sub	sp, #20
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d141      	bne.n	8002c02 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b7e:	4b4b      	ldr	r3, [pc, #300]	@ (8002cac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002b86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b8a:	d131      	bne.n	8002bf0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b8c:	4b47      	ldr	r3, [pc, #284]	@ (8002cac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b92:	4a46      	ldr	r2, [pc, #280]	@ (8002cac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b98:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b9c:	4b43      	ldr	r3, [pc, #268]	@ (8002cac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ba4:	4a41      	ldr	r2, [pc, #260]	@ (8002cac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ba6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002baa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002bac:	4b40      	ldr	r3, [pc, #256]	@ (8002cb0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2232      	movs	r2, #50	@ 0x32
 8002bb2:	fb02 f303 	mul.w	r3, r2, r3
 8002bb6:	4a3f      	ldr	r2, [pc, #252]	@ (8002cb4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bbc:	0c9b      	lsrs	r3, r3, #18
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bc2:	e002      	b.n	8002bca <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bca:	4b38      	ldr	r3, [pc, #224]	@ (8002cac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bd6:	d102      	bne.n	8002bde <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1f2      	bne.n	8002bc4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002bde:	4b33      	ldr	r3, [pc, #204]	@ (8002cac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002be6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bea:	d158      	bne.n	8002c9e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e057      	b.n	8002ca0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002bf0:	4b2e      	ldr	r3, [pc, #184]	@ (8002cac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002bf6:	4a2d      	ldr	r2, [pc, #180]	@ (8002cac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bf8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002bfc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002c00:	e04d      	b.n	8002c9e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c08:	d141      	bne.n	8002c8e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c0a:	4b28      	ldr	r3, [pc, #160]	@ (8002cac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c16:	d131      	bne.n	8002c7c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c18:	4b24      	ldr	r3, [pc, #144]	@ (8002cac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c1e:	4a23      	ldr	r2, [pc, #140]	@ (8002cac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c24:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c28:	4b20      	ldr	r3, [pc, #128]	@ (8002cac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c30:	4a1e      	ldr	r2, [pc, #120]	@ (8002cac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c36:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c38:	4b1d      	ldr	r3, [pc, #116]	@ (8002cb0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2232      	movs	r2, #50	@ 0x32
 8002c3e:	fb02 f303 	mul.w	r3, r2, r3
 8002c42:	4a1c      	ldr	r2, [pc, #112]	@ (8002cb4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c44:	fba2 2303 	umull	r2, r3, r2, r3
 8002c48:	0c9b      	lsrs	r3, r3, #18
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c4e:	e002      	b.n	8002c56 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	3b01      	subs	r3, #1
 8002c54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c56:	4b15      	ldr	r3, [pc, #84]	@ (8002cac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c62:	d102      	bne.n	8002c6a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1f2      	bne.n	8002c50 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c6a:	4b10      	ldr	r3, [pc, #64]	@ (8002cac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c76:	d112      	bne.n	8002c9e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e011      	b.n	8002ca0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002cac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c82:	4a0a      	ldr	r2, [pc, #40]	@ (8002cac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c88:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002c8c:	e007      	b.n	8002c9e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c8e:	4b07      	ldr	r3, [pc, #28]	@ (8002cac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c96:	4a05      	ldr	r2, [pc, #20]	@ (8002cac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c98:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c9c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3714      	adds	r7, #20
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr
 8002cac:	40007000 	.word	0x40007000
 8002cb0:	20000004 	.word	0x20000004
 8002cb4:	431bde83 	.word	0x431bde83

08002cb8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002cbc:	4b05      	ldr	r3, [pc, #20]	@ (8002cd4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	4a04      	ldr	r2, [pc, #16]	@ (8002cd4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002cc2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cc6:	6093      	str	r3, [r2, #8]
}
 8002cc8:	bf00      	nop
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	40007000 	.word	0x40007000

08002cd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b088      	sub	sp, #32
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e2fe      	b.n	80032e8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d075      	beq.n	8002de2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cf6:	4b97      	ldr	r3, [pc, #604]	@ (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 030c 	and.w	r3, r3, #12
 8002cfe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d00:	4b94      	ldr	r3, [pc, #592]	@ (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	f003 0303 	and.w	r3, r3, #3
 8002d08:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	2b0c      	cmp	r3, #12
 8002d0e:	d102      	bne.n	8002d16 <HAL_RCC_OscConfig+0x3e>
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	2b03      	cmp	r3, #3
 8002d14:	d002      	beq.n	8002d1c <HAL_RCC_OscConfig+0x44>
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	2b08      	cmp	r3, #8
 8002d1a:	d10b      	bne.n	8002d34 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d1c:	4b8d      	ldr	r3, [pc, #564]	@ (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d05b      	beq.n	8002de0 <HAL_RCC_OscConfig+0x108>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d157      	bne.n	8002de0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e2d9      	b.n	80032e8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d3c:	d106      	bne.n	8002d4c <HAL_RCC_OscConfig+0x74>
 8002d3e:	4b85      	ldr	r3, [pc, #532]	@ (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a84      	ldr	r2, [pc, #528]	@ (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002d44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d48:	6013      	str	r3, [r2, #0]
 8002d4a:	e01d      	b.n	8002d88 <HAL_RCC_OscConfig+0xb0>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d54:	d10c      	bne.n	8002d70 <HAL_RCC_OscConfig+0x98>
 8002d56:	4b7f      	ldr	r3, [pc, #508]	@ (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a7e      	ldr	r2, [pc, #504]	@ (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002d5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d60:	6013      	str	r3, [r2, #0]
 8002d62:	4b7c      	ldr	r3, [pc, #496]	@ (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a7b      	ldr	r2, [pc, #492]	@ (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002d68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d6c:	6013      	str	r3, [r2, #0]
 8002d6e:	e00b      	b.n	8002d88 <HAL_RCC_OscConfig+0xb0>
 8002d70:	4b78      	ldr	r3, [pc, #480]	@ (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a77      	ldr	r2, [pc, #476]	@ (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002d76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d7a:	6013      	str	r3, [r2, #0]
 8002d7c:	4b75      	ldr	r3, [pc, #468]	@ (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a74      	ldr	r2, [pc, #464]	@ (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002d82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d013      	beq.n	8002db8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d90:	f7ff fb24 	bl	80023dc <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d98:	f7ff fb20 	bl	80023dc <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b64      	cmp	r3, #100	@ 0x64
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e29e      	b.n	80032e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002daa:	4b6a      	ldr	r3, [pc, #424]	@ (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d0f0      	beq.n	8002d98 <HAL_RCC_OscConfig+0xc0>
 8002db6:	e014      	b.n	8002de2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db8:	f7ff fb10 	bl	80023dc <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dc0:	f7ff fb0c 	bl	80023dc <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b64      	cmp	r3, #100	@ 0x64
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e28a      	b.n	80032e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dd2:	4b60      	ldr	r3, [pc, #384]	@ (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1f0      	bne.n	8002dc0 <HAL_RCC_OscConfig+0xe8>
 8002dde:	e000      	b.n	8002de2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002de0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d075      	beq.n	8002eda <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dee:	4b59      	ldr	r3, [pc, #356]	@ (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f003 030c 	and.w	r3, r3, #12
 8002df6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002df8:	4b56      	ldr	r3, [pc, #344]	@ (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	f003 0303 	and.w	r3, r3, #3
 8002e00:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	2b0c      	cmp	r3, #12
 8002e06:	d102      	bne.n	8002e0e <HAL_RCC_OscConfig+0x136>
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d002      	beq.n	8002e14 <HAL_RCC_OscConfig+0x13c>
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	2b04      	cmp	r3, #4
 8002e12:	d11f      	bne.n	8002e54 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e14:	4b4f      	ldr	r3, [pc, #316]	@ (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d005      	beq.n	8002e2c <HAL_RCC_OscConfig+0x154>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d101      	bne.n	8002e2c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e25d      	b.n	80032e8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e2c:	4b49      	ldr	r3, [pc, #292]	@ (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	061b      	lsls	r3, r3, #24
 8002e3a:	4946      	ldr	r1, [pc, #280]	@ (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002e40:	4b45      	ldr	r3, [pc, #276]	@ (8002f58 <HAL_RCC_OscConfig+0x280>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7ff fa7d 	bl	8002344 <HAL_InitTick>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d043      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e249      	b.n	80032e8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d023      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e5c:	4b3d      	ldr	r3, [pc, #244]	@ (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a3c      	ldr	r2, [pc, #240]	@ (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002e62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e68:	f7ff fab8 	bl	80023dc <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e70:	f7ff fab4 	bl	80023dc <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e232      	b.n	80032e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e82:	4b34      	ldr	r3, [pc, #208]	@ (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d0f0      	beq.n	8002e70 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e8e:	4b31      	ldr	r3, [pc, #196]	@ (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	061b      	lsls	r3, r3, #24
 8002e9c:	492d      	ldr	r1, [pc, #180]	@ (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	604b      	str	r3, [r1, #4]
 8002ea2:	e01a      	b.n	8002eda <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ea4:	4b2b      	ldr	r3, [pc, #172]	@ (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a2a      	ldr	r2, [pc, #168]	@ (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002eaa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002eae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb0:	f7ff fa94 	bl	80023dc <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eb8:	f7ff fa90 	bl	80023dc <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e20e      	b.n	80032e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002eca:	4b22      	ldr	r3, [pc, #136]	@ (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1f0      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x1e0>
 8002ed6:	e000      	b.n	8002eda <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ed8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0308 	and.w	r3, r3, #8
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d041      	beq.n	8002f6a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d01c      	beq.n	8002f28 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eee:	4b19      	ldr	r3, [pc, #100]	@ (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002ef0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ef4:	4a17      	ldr	r2, [pc, #92]	@ (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002ef6:	f043 0301 	orr.w	r3, r3, #1
 8002efa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002efe:	f7ff fa6d 	bl	80023dc <HAL_GetTick>
 8002f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f04:	e008      	b.n	8002f18 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f06:	f7ff fa69 	bl	80023dc <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d901      	bls.n	8002f18 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e1e7      	b.n	80032e8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f18:	4b0e      	ldr	r3, [pc, #56]	@ (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002f1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0ef      	beq.n	8002f06 <HAL_RCC_OscConfig+0x22e>
 8002f26:	e020      	b.n	8002f6a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f28:	4b0a      	ldr	r3, [pc, #40]	@ (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002f2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f2e:	4a09      	ldr	r2, [pc, #36]	@ (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002f30:	f023 0301 	bic.w	r3, r3, #1
 8002f34:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f38:	f7ff fa50 	bl	80023dc <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f3e:	e00d      	b.n	8002f5c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f40:	f7ff fa4c 	bl	80023dc <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d906      	bls.n	8002f5c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e1ca      	b.n	80032e8 <HAL_RCC_OscConfig+0x610>
 8002f52:	bf00      	nop
 8002f54:	40021000 	.word	0x40021000
 8002f58:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f5c:	4b8c      	ldr	r3, [pc, #560]	@ (8003190 <HAL_RCC_OscConfig+0x4b8>)
 8002f5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1ea      	bne.n	8002f40 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0304 	and.w	r3, r3, #4
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f000 80a6 	beq.w	80030c4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f7c:	4b84      	ldr	r3, [pc, #528]	@ (8003190 <HAL_RCC_OscConfig+0x4b8>)
 8002f7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d101      	bne.n	8002f8c <HAL_RCC_OscConfig+0x2b4>
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e000      	b.n	8002f8e <HAL_RCC_OscConfig+0x2b6>
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00d      	beq.n	8002fae <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f92:	4b7f      	ldr	r3, [pc, #508]	@ (8003190 <HAL_RCC_OscConfig+0x4b8>)
 8002f94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f96:	4a7e      	ldr	r2, [pc, #504]	@ (8003190 <HAL_RCC_OscConfig+0x4b8>)
 8002f98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f9e:	4b7c      	ldr	r3, [pc, #496]	@ (8003190 <HAL_RCC_OscConfig+0x4b8>)
 8002fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fa6:	60fb      	str	r3, [r7, #12]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002faa:	2301      	movs	r3, #1
 8002fac:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fae:	4b79      	ldr	r3, [pc, #484]	@ (8003194 <HAL_RCC_OscConfig+0x4bc>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d118      	bne.n	8002fec <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fba:	4b76      	ldr	r3, [pc, #472]	@ (8003194 <HAL_RCC_OscConfig+0x4bc>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a75      	ldr	r2, [pc, #468]	@ (8003194 <HAL_RCC_OscConfig+0x4bc>)
 8002fc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fc6:	f7ff fa09 	bl	80023dc <HAL_GetTick>
 8002fca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fcc:	e008      	b.n	8002fe0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fce:	f7ff fa05 	bl	80023dc <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e183      	b.n	80032e8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fe0:	4b6c      	ldr	r3, [pc, #432]	@ (8003194 <HAL_RCC_OscConfig+0x4bc>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d0f0      	beq.n	8002fce <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d108      	bne.n	8003006 <HAL_RCC_OscConfig+0x32e>
 8002ff4:	4b66      	ldr	r3, [pc, #408]	@ (8003190 <HAL_RCC_OscConfig+0x4b8>)
 8002ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ffa:	4a65      	ldr	r2, [pc, #404]	@ (8003190 <HAL_RCC_OscConfig+0x4b8>)
 8002ffc:	f043 0301 	orr.w	r3, r3, #1
 8003000:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003004:	e024      	b.n	8003050 <HAL_RCC_OscConfig+0x378>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	2b05      	cmp	r3, #5
 800300c:	d110      	bne.n	8003030 <HAL_RCC_OscConfig+0x358>
 800300e:	4b60      	ldr	r3, [pc, #384]	@ (8003190 <HAL_RCC_OscConfig+0x4b8>)
 8003010:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003014:	4a5e      	ldr	r2, [pc, #376]	@ (8003190 <HAL_RCC_OscConfig+0x4b8>)
 8003016:	f043 0304 	orr.w	r3, r3, #4
 800301a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800301e:	4b5c      	ldr	r3, [pc, #368]	@ (8003190 <HAL_RCC_OscConfig+0x4b8>)
 8003020:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003024:	4a5a      	ldr	r2, [pc, #360]	@ (8003190 <HAL_RCC_OscConfig+0x4b8>)
 8003026:	f043 0301 	orr.w	r3, r3, #1
 800302a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800302e:	e00f      	b.n	8003050 <HAL_RCC_OscConfig+0x378>
 8003030:	4b57      	ldr	r3, [pc, #348]	@ (8003190 <HAL_RCC_OscConfig+0x4b8>)
 8003032:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003036:	4a56      	ldr	r2, [pc, #344]	@ (8003190 <HAL_RCC_OscConfig+0x4b8>)
 8003038:	f023 0301 	bic.w	r3, r3, #1
 800303c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003040:	4b53      	ldr	r3, [pc, #332]	@ (8003190 <HAL_RCC_OscConfig+0x4b8>)
 8003042:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003046:	4a52      	ldr	r2, [pc, #328]	@ (8003190 <HAL_RCC_OscConfig+0x4b8>)
 8003048:	f023 0304 	bic.w	r3, r3, #4
 800304c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d016      	beq.n	8003086 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003058:	f7ff f9c0 	bl	80023dc <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800305e:	e00a      	b.n	8003076 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003060:	f7ff f9bc 	bl	80023dc <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800306e:	4293      	cmp	r3, r2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e138      	b.n	80032e8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003076:	4b46      	ldr	r3, [pc, #280]	@ (8003190 <HAL_RCC_OscConfig+0x4b8>)
 8003078:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d0ed      	beq.n	8003060 <HAL_RCC_OscConfig+0x388>
 8003084:	e015      	b.n	80030b2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003086:	f7ff f9a9 	bl	80023dc <HAL_GetTick>
 800308a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800308c:	e00a      	b.n	80030a4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800308e:	f7ff f9a5 	bl	80023dc <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	f241 3288 	movw	r2, #5000	@ 0x1388
 800309c:	4293      	cmp	r3, r2
 800309e:	d901      	bls.n	80030a4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e121      	b.n	80032e8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030a4:	4b3a      	ldr	r3, [pc, #232]	@ (8003190 <HAL_RCC_OscConfig+0x4b8>)
 80030a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1ed      	bne.n	800308e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030b2:	7ffb      	ldrb	r3, [r7, #31]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d105      	bne.n	80030c4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030b8:	4b35      	ldr	r3, [pc, #212]	@ (8003190 <HAL_RCC_OscConfig+0x4b8>)
 80030ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030bc:	4a34      	ldr	r2, [pc, #208]	@ (8003190 <HAL_RCC_OscConfig+0x4b8>)
 80030be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030c2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0320 	and.w	r3, r3, #32
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d03c      	beq.n	800314a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d01c      	beq.n	8003112 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80030d8:	4b2d      	ldr	r3, [pc, #180]	@ (8003190 <HAL_RCC_OscConfig+0x4b8>)
 80030da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80030de:	4a2c      	ldr	r2, [pc, #176]	@ (8003190 <HAL_RCC_OscConfig+0x4b8>)
 80030e0:	f043 0301 	orr.w	r3, r3, #1
 80030e4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e8:	f7ff f978 	bl	80023dc <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030f0:	f7ff f974 	bl	80023dc <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e0f2      	b.n	80032e8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003102:	4b23      	ldr	r3, [pc, #140]	@ (8003190 <HAL_RCC_OscConfig+0x4b8>)
 8003104:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d0ef      	beq.n	80030f0 <HAL_RCC_OscConfig+0x418>
 8003110:	e01b      	b.n	800314a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003112:	4b1f      	ldr	r3, [pc, #124]	@ (8003190 <HAL_RCC_OscConfig+0x4b8>)
 8003114:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003118:	4a1d      	ldr	r2, [pc, #116]	@ (8003190 <HAL_RCC_OscConfig+0x4b8>)
 800311a:	f023 0301 	bic.w	r3, r3, #1
 800311e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003122:	f7ff f95b 	bl	80023dc <HAL_GetTick>
 8003126:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003128:	e008      	b.n	800313c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800312a:	f7ff f957 	bl	80023dc <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b02      	cmp	r3, #2
 8003136:	d901      	bls.n	800313c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e0d5      	b.n	80032e8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800313c:	4b14      	ldr	r3, [pc, #80]	@ (8003190 <HAL_RCC_OscConfig+0x4b8>)
 800313e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1ef      	bne.n	800312a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	2b00      	cmp	r3, #0
 8003150:	f000 80c9 	beq.w	80032e6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003154:	4b0e      	ldr	r3, [pc, #56]	@ (8003190 <HAL_RCC_OscConfig+0x4b8>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f003 030c 	and.w	r3, r3, #12
 800315c:	2b0c      	cmp	r3, #12
 800315e:	f000 8083 	beq.w	8003268 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	69db      	ldr	r3, [r3, #28]
 8003166:	2b02      	cmp	r3, #2
 8003168:	d15e      	bne.n	8003228 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800316a:	4b09      	ldr	r3, [pc, #36]	@ (8003190 <HAL_RCC_OscConfig+0x4b8>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a08      	ldr	r2, [pc, #32]	@ (8003190 <HAL_RCC_OscConfig+0x4b8>)
 8003170:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003174:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003176:	f7ff f931 	bl	80023dc <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800317c:	e00c      	b.n	8003198 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800317e:	f7ff f92d 	bl	80023dc <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d905      	bls.n	8003198 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e0ab      	b.n	80032e8 <HAL_RCC_OscConfig+0x610>
 8003190:	40021000 	.word	0x40021000
 8003194:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003198:	4b55      	ldr	r3, [pc, #340]	@ (80032f0 <HAL_RCC_OscConfig+0x618>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1ec      	bne.n	800317e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031a4:	4b52      	ldr	r3, [pc, #328]	@ (80032f0 <HAL_RCC_OscConfig+0x618>)
 80031a6:	68da      	ldr	r2, [r3, #12]
 80031a8:	4b52      	ldr	r3, [pc, #328]	@ (80032f4 <HAL_RCC_OscConfig+0x61c>)
 80031aa:	4013      	ands	r3, r2
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	6a11      	ldr	r1, [r2, #32]
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80031b4:	3a01      	subs	r2, #1
 80031b6:	0112      	lsls	r2, r2, #4
 80031b8:	4311      	orrs	r1, r2
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80031be:	0212      	lsls	r2, r2, #8
 80031c0:	4311      	orrs	r1, r2
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80031c6:	0852      	lsrs	r2, r2, #1
 80031c8:	3a01      	subs	r2, #1
 80031ca:	0552      	lsls	r2, r2, #21
 80031cc:	4311      	orrs	r1, r2
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80031d2:	0852      	lsrs	r2, r2, #1
 80031d4:	3a01      	subs	r2, #1
 80031d6:	0652      	lsls	r2, r2, #25
 80031d8:	4311      	orrs	r1, r2
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80031de:	06d2      	lsls	r2, r2, #27
 80031e0:	430a      	orrs	r2, r1
 80031e2:	4943      	ldr	r1, [pc, #268]	@ (80032f0 <HAL_RCC_OscConfig+0x618>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031e8:	4b41      	ldr	r3, [pc, #260]	@ (80032f0 <HAL_RCC_OscConfig+0x618>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a40      	ldr	r2, [pc, #256]	@ (80032f0 <HAL_RCC_OscConfig+0x618>)
 80031ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031f2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031f4:	4b3e      	ldr	r3, [pc, #248]	@ (80032f0 <HAL_RCC_OscConfig+0x618>)
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	4a3d      	ldr	r2, [pc, #244]	@ (80032f0 <HAL_RCC_OscConfig+0x618>)
 80031fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031fe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003200:	f7ff f8ec 	bl	80023dc <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003208:	f7ff f8e8 	bl	80023dc <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e066      	b.n	80032e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800321a:	4b35      	ldr	r3, [pc, #212]	@ (80032f0 <HAL_RCC_OscConfig+0x618>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d0f0      	beq.n	8003208 <HAL_RCC_OscConfig+0x530>
 8003226:	e05e      	b.n	80032e6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003228:	4b31      	ldr	r3, [pc, #196]	@ (80032f0 <HAL_RCC_OscConfig+0x618>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a30      	ldr	r2, [pc, #192]	@ (80032f0 <HAL_RCC_OscConfig+0x618>)
 800322e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003232:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003234:	f7ff f8d2 	bl	80023dc <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800323a:	e008      	b.n	800324e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800323c:	f7ff f8ce 	bl	80023dc <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b02      	cmp	r3, #2
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e04c      	b.n	80032e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800324e:	4b28      	ldr	r3, [pc, #160]	@ (80032f0 <HAL_RCC_OscConfig+0x618>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1f0      	bne.n	800323c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800325a:	4b25      	ldr	r3, [pc, #148]	@ (80032f0 <HAL_RCC_OscConfig+0x618>)
 800325c:	68da      	ldr	r2, [r3, #12]
 800325e:	4924      	ldr	r1, [pc, #144]	@ (80032f0 <HAL_RCC_OscConfig+0x618>)
 8003260:	4b25      	ldr	r3, [pc, #148]	@ (80032f8 <HAL_RCC_OscConfig+0x620>)
 8003262:	4013      	ands	r3, r2
 8003264:	60cb      	str	r3, [r1, #12]
 8003266:	e03e      	b.n	80032e6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	69db      	ldr	r3, [r3, #28]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d101      	bne.n	8003274 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e039      	b.n	80032e8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003274:	4b1e      	ldr	r3, [pc, #120]	@ (80032f0 <HAL_RCC_OscConfig+0x618>)
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	f003 0203 	and.w	r2, r3, #3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	429a      	cmp	r2, r3
 8003286:	d12c      	bne.n	80032e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003292:	3b01      	subs	r3, #1
 8003294:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003296:	429a      	cmp	r2, r3
 8003298:	d123      	bne.n	80032e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d11b      	bne.n	80032e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d113      	bne.n	80032e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c4:	085b      	lsrs	r3, r3, #1
 80032c6:	3b01      	subs	r3, #1
 80032c8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d109      	bne.n	80032e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032d8:	085b      	lsrs	r3, r3, #1
 80032da:	3b01      	subs	r3, #1
 80032dc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032de:	429a      	cmp	r2, r3
 80032e0:	d001      	beq.n	80032e6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e000      	b.n	80032e8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3720      	adds	r7, #32
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	40021000 	.word	0x40021000
 80032f4:	019f800c 	.word	0x019f800c
 80032f8:	feeefffc 	.word	0xfeeefffc

080032fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003306:	2300      	movs	r3, #0
 8003308:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d101      	bne.n	8003314 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e11e      	b.n	8003552 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003314:	4b91      	ldr	r3, [pc, #580]	@ (800355c <HAL_RCC_ClockConfig+0x260>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 030f 	and.w	r3, r3, #15
 800331c:	683a      	ldr	r2, [r7, #0]
 800331e:	429a      	cmp	r2, r3
 8003320:	d910      	bls.n	8003344 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003322:	4b8e      	ldr	r3, [pc, #568]	@ (800355c <HAL_RCC_ClockConfig+0x260>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f023 020f 	bic.w	r2, r3, #15
 800332a:	498c      	ldr	r1, [pc, #560]	@ (800355c <HAL_RCC_ClockConfig+0x260>)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	4313      	orrs	r3, r2
 8003330:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003332:	4b8a      	ldr	r3, [pc, #552]	@ (800355c <HAL_RCC_ClockConfig+0x260>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 030f 	and.w	r3, r3, #15
 800333a:	683a      	ldr	r2, [r7, #0]
 800333c:	429a      	cmp	r2, r3
 800333e:	d001      	beq.n	8003344 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e106      	b.n	8003552 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	2b00      	cmp	r3, #0
 800334e:	d073      	beq.n	8003438 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	2b03      	cmp	r3, #3
 8003356:	d129      	bne.n	80033ac <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003358:	4b81      	ldr	r3, [pc, #516]	@ (8003560 <HAL_RCC_ClockConfig+0x264>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d101      	bne.n	8003368 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e0f4      	b.n	8003552 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003368:	f000 f99e 	bl	80036a8 <RCC_GetSysClockFreqFromPLLSource>
 800336c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	4a7c      	ldr	r2, [pc, #496]	@ (8003564 <HAL_RCC_ClockConfig+0x268>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d93f      	bls.n	80033f6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003376:	4b7a      	ldr	r3, [pc, #488]	@ (8003560 <HAL_RCC_ClockConfig+0x264>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d009      	beq.n	8003396 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800338a:	2b00      	cmp	r3, #0
 800338c:	d033      	beq.n	80033f6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003392:	2b00      	cmp	r3, #0
 8003394:	d12f      	bne.n	80033f6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003396:	4b72      	ldr	r3, [pc, #456]	@ (8003560 <HAL_RCC_ClockConfig+0x264>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800339e:	4a70      	ldr	r2, [pc, #448]	@ (8003560 <HAL_RCC_ClockConfig+0x264>)
 80033a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033a4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80033a6:	2380      	movs	r3, #128	@ 0x80
 80033a8:	617b      	str	r3, [r7, #20]
 80033aa:	e024      	b.n	80033f6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d107      	bne.n	80033c4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033b4:	4b6a      	ldr	r3, [pc, #424]	@ (8003560 <HAL_RCC_ClockConfig+0x264>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d109      	bne.n	80033d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e0c6      	b.n	8003552 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033c4:	4b66      	ldr	r3, [pc, #408]	@ (8003560 <HAL_RCC_ClockConfig+0x264>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d101      	bne.n	80033d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e0be      	b.n	8003552 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80033d4:	f000 f8ce 	bl	8003574 <HAL_RCC_GetSysClockFreq>
 80033d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	4a61      	ldr	r2, [pc, #388]	@ (8003564 <HAL_RCC_ClockConfig+0x268>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d909      	bls.n	80033f6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80033e2:	4b5f      	ldr	r3, [pc, #380]	@ (8003560 <HAL_RCC_ClockConfig+0x264>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80033ea:	4a5d      	ldr	r2, [pc, #372]	@ (8003560 <HAL_RCC_ClockConfig+0x264>)
 80033ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033f0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80033f2:	2380      	movs	r3, #128	@ 0x80
 80033f4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033f6:	4b5a      	ldr	r3, [pc, #360]	@ (8003560 <HAL_RCC_ClockConfig+0x264>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f023 0203 	bic.w	r2, r3, #3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	4957      	ldr	r1, [pc, #348]	@ (8003560 <HAL_RCC_ClockConfig+0x264>)
 8003404:	4313      	orrs	r3, r2
 8003406:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003408:	f7fe ffe8 	bl	80023dc <HAL_GetTick>
 800340c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800340e:	e00a      	b.n	8003426 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003410:	f7fe ffe4 	bl	80023dc <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800341e:	4293      	cmp	r3, r2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e095      	b.n	8003552 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003426:	4b4e      	ldr	r3, [pc, #312]	@ (8003560 <HAL_RCC_ClockConfig+0x264>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f003 020c 	and.w	r2, r3, #12
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	429a      	cmp	r2, r3
 8003436:	d1eb      	bne.n	8003410 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d023      	beq.n	800348c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0304 	and.w	r3, r3, #4
 800344c:	2b00      	cmp	r3, #0
 800344e:	d005      	beq.n	800345c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003450:	4b43      	ldr	r3, [pc, #268]	@ (8003560 <HAL_RCC_ClockConfig+0x264>)
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	4a42      	ldr	r2, [pc, #264]	@ (8003560 <HAL_RCC_ClockConfig+0x264>)
 8003456:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800345a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0308 	and.w	r3, r3, #8
 8003464:	2b00      	cmp	r3, #0
 8003466:	d007      	beq.n	8003478 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003468:	4b3d      	ldr	r3, [pc, #244]	@ (8003560 <HAL_RCC_ClockConfig+0x264>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003470:	4a3b      	ldr	r2, [pc, #236]	@ (8003560 <HAL_RCC_ClockConfig+0x264>)
 8003472:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003476:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003478:	4b39      	ldr	r3, [pc, #228]	@ (8003560 <HAL_RCC_ClockConfig+0x264>)
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	4936      	ldr	r1, [pc, #216]	@ (8003560 <HAL_RCC_ClockConfig+0x264>)
 8003486:	4313      	orrs	r3, r2
 8003488:	608b      	str	r3, [r1, #8]
 800348a:	e008      	b.n	800349e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	2b80      	cmp	r3, #128	@ 0x80
 8003490:	d105      	bne.n	800349e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003492:	4b33      	ldr	r3, [pc, #204]	@ (8003560 <HAL_RCC_ClockConfig+0x264>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	4a32      	ldr	r2, [pc, #200]	@ (8003560 <HAL_RCC_ClockConfig+0x264>)
 8003498:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800349c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800349e:	4b2f      	ldr	r3, [pc, #188]	@ (800355c <HAL_RCC_ClockConfig+0x260>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 030f 	and.w	r3, r3, #15
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d21d      	bcs.n	80034e8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ac:	4b2b      	ldr	r3, [pc, #172]	@ (800355c <HAL_RCC_ClockConfig+0x260>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f023 020f 	bic.w	r2, r3, #15
 80034b4:	4929      	ldr	r1, [pc, #164]	@ (800355c <HAL_RCC_ClockConfig+0x260>)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80034bc:	f7fe ff8e 	bl	80023dc <HAL_GetTick>
 80034c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034c2:	e00a      	b.n	80034da <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034c4:	f7fe ff8a 	bl	80023dc <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e03b      	b.n	8003552 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034da:	4b20      	ldr	r3, [pc, #128]	@ (800355c <HAL_RCC_ClockConfig+0x260>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 030f 	and.w	r3, r3, #15
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d1ed      	bne.n	80034c4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0304 	and.w	r3, r3, #4
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d008      	beq.n	8003506 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034f4:	4b1a      	ldr	r3, [pc, #104]	@ (8003560 <HAL_RCC_ClockConfig+0x264>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	4917      	ldr	r1, [pc, #92]	@ (8003560 <HAL_RCC_ClockConfig+0x264>)
 8003502:	4313      	orrs	r3, r2
 8003504:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0308 	and.w	r3, r3, #8
 800350e:	2b00      	cmp	r3, #0
 8003510:	d009      	beq.n	8003526 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003512:	4b13      	ldr	r3, [pc, #76]	@ (8003560 <HAL_RCC_ClockConfig+0x264>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	490f      	ldr	r1, [pc, #60]	@ (8003560 <HAL_RCC_ClockConfig+0x264>)
 8003522:	4313      	orrs	r3, r2
 8003524:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003526:	f000 f825 	bl	8003574 <HAL_RCC_GetSysClockFreq>
 800352a:	4602      	mov	r2, r0
 800352c:	4b0c      	ldr	r3, [pc, #48]	@ (8003560 <HAL_RCC_ClockConfig+0x264>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	091b      	lsrs	r3, r3, #4
 8003532:	f003 030f 	and.w	r3, r3, #15
 8003536:	490c      	ldr	r1, [pc, #48]	@ (8003568 <HAL_RCC_ClockConfig+0x26c>)
 8003538:	5ccb      	ldrb	r3, [r1, r3]
 800353a:	f003 031f 	and.w	r3, r3, #31
 800353e:	fa22 f303 	lsr.w	r3, r2, r3
 8003542:	4a0a      	ldr	r2, [pc, #40]	@ (800356c <HAL_RCC_ClockConfig+0x270>)
 8003544:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003546:	4b0a      	ldr	r3, [pc, #40]	@ (8003570 <HAL_RCC_ClockConfig+0x274>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4618      	mov	r0, r3
 800354c:	f7fe fefa 	bl	8002344 <HAL_InitTick>
 8003550:	4603      	mov	r3, r0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3718      	adds	r7, #24
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40022000 	.word	0x40022000
 8003560:	40021000 	.word	0x40021000
 8003564:	04c4b400 	.word	0x04c4b400
 8003568:	08009624 	.word	0x08009624
 800356c:	20000004 	.word	0x20000004
 8003570:	20000008 	.word	0x20000008

08003574 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003574:	b480      	push	{r7}
 8003576:	b087      	sub	sp, #28
 8003578:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800357a:	4b2c      	ldr	r3, [pc, #176]	@ (800362c <HAL_RCC_GetSysClockFreq+0xb8>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f003 030c 	and.w	r3, r3, #12
 8003582:	2b04      	cmp	r3, #4
 8003584:	d102      	bne.n	800358c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003586:	4b2a      	ldr	r3, [pc, #168]	@ (8003630 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003588:	613b      	str	r3, [r7, #16]
 800358a:	e047      	b.n	800361c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800358c:	4b27      	ldr	r3, [pc, #156]	@ (800362c <HAL_RCC_GetSysClockFreq+0xb8>)
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f003 030c 	and.w	r3, r3, #12
 8003594:	2b08      	cmp	r3, #8
 8003596:	d102      	bne.n	800359e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003598:	4b26      	ldr	r3, [pc, #152]	@ (8003634 <HAL_RCC_GetSysClockFreq+0xc0>)
 800359a:	613b      	str	r3, [r7, #16]
 800359c:	e03e      	b.n	800361c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800359e:	4b23      	ldr	r3, [pc, #140]	@ (800362c <HAL_RCC_GetSysClockFreq+0xb8>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f003 030c 	and.w	r3, r3, #12
 80035a6:	2b0c      	cmp	r3, #12
 80035a8:	d136      	bne.n	8003618 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80035aa:	4b20      	ldr	r3, [pc, #128]	@ (800362c <HAL_RCC_GetSysClockFreq+0xb8>)
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	f003 0303 	and.w	r3, r3, #3
 80035b2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80035b4:	4b1d      	ldr	r3, [pc, #116]	@ (800362c <HAL_RCC_GetSysClockFreq+0xb8>)
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	091b      	lsrs	r3, r3, #4
 80035ba:	f003 030f 	and.w	r3, r3, #15
 80035be:	3301      	adds	r3, #1
 80035c0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2b03      	cmp	r3, #3
 80035c6:	d10c      	bne.n	80035e2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035c8:	4a1a      	ldr	r2, [pc, #104]	@ (8003634 <HAL_RCC_GetSysClockFreq+0xc0>)
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d0:	4a16      	ldr	r2, [pc, #88]	@ (800362c <HAL_RCC_GetSysClockFreq+0xb8>)
 80035d2:	68d2      	ldr	r2, [r2, #12]
 80035d4:	0a12      	lsrs	r2, r2, #8
 80035d6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80035da:	fb02 f303 	mul.w	r3, r2, r3
 80035de:	617b      	str	r3, [r7, #20]
      break;
 80035e0:	e00c      	b.n	80035fc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035e2:	4a13      	ldr	r2, [pc, #76]	@ (8003630 <HAL_RCC_GetSysClockFreq+0xbc>)
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ea:	4a10      	ldr	r2, [pc, #64]	@ (800362c <HAL_RCC_GetSysClockFreq+0xb8>)
 80035ec:	68d2      	ldr	r2, [r2, #12]
 80035ee:	0a12      	lsrs	r2, r2, #8
 80035f0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80035f4:	fb02 f303 	mul.w	r3, r2, r3
 80035f8:	617b      	str	r3, [r7, #20]
      break;
 80035fa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80035fc:	4b0b      	ldr	r3, [pc, #44]	@ (800362c <HAL_RCC_GetSysClockFreq+0xb8>)
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	0e5b      	lsrs	r3, r3, #25
 8003602:	f003 0303 	and.w	r3, r3, #3
 8003606:	3301      	adds	r3, #1
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800360c:	697a      	ldr	r2, [r7, #20]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	fbb2 f3f3 	udiv	r3, r2, r3
 8003614:	613b      	str	r3, [r7, #16]
 8003616:	e001      	b.n	800361c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003618:	2300      	movs	r3, #0
 800361a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800361c:	693b      	ldr	r3, [r7, #16]
}
 800361e:	4618      	mov	r0, r3
 8003620:	371c      	adds	r7, #28
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	40021000 	.word	0x40021000
 8003630:	00f42400 	.word	0x00f42400
 8003634:	016e3600 	.word	0x016e3600

08003638 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800363c:	4b03      	ldr	r3, [pc, #12]	@ (800364c <HAL_RCC_GetHCLKFreq+0x14>)
 800363e:	681b      	ldr	r3, [r3, #0]
}
 8003640:	4618      	mov	r0, r3
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	20000004 	.word	0x20000004

08003650 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003654:	f7ff fff0 	bl	8003638 <HAL_RCC_GetHCLKFreq>
 8003658:	4602      	mov	r2, r0
 800365a:	4b06      	ldr	r3, [pc, #24]	@ (8003674 <HAL_RCC_GetPCLK1Freq+0x24>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	0a1b      	lsrs	r3, r3, #8
 8003660:	f003 0307 	and.w	r3, r3, #7
 8003664:	4904      	ldr	r1, [pc, #16]	@ (8003678 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003666:	5ccb      	ldrb	r3, [r1, r3]
 8003668:	f003 031f 	and.w	r3, r3, #31
 800366c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003670:	4618      	mov	r0, r3
 8003672:	bd80      	pop	{r7, pc}
 8003674:	40021000 	.word	0x40021000
 8003678:	08009634 	.word	0x08009634

0800367c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003680:	f7ff ffda 	bl	8003638 <HAL_RCC_GetHCLKFreq>
 8003684:	4602      	mov	r2, r0
 8003686:	4b06      	ldr	r3, [pc, #24]	@ (80036a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	0adb      	lsrs	r3, r3, #11
 800368c:	f003 0307 	and.w	r3, r3, #7
 8003690:	4904      	ldr	r1, [pc, #16]	@ (80036a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003692:	5ccb      	ldrb	r3, [r1, r3]
 8003694:	f003 031f 	and.w	r3, r3, #31
 8003698:	fa22 f303 	lsr.w	r3, r2, r3
}
 800369c:	4618      	mov	r0, r3
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	40021000 	.word	0x40021000
 80036a4:	08009634 	.word	0x08009634

080036a8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b087      	sub	sp, #28
 80036ac:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003728 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	f003 0303 	and.w	r3, r3, #3
 80036b6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003728 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	091b      	lsrs	r3, r3, #4
 80036be:	f003 030f 	and.w	r3, r3, #15
 80036c2:	3301      	adds	r3, #1
 80036c4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	2b03      	cmp	r3, #3
 80036ca:	d10c      	bne.n	80036e6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036cc:	4a17      	ldr	r2, [pc, #92]	@ (800372c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d4:	4a14      	ldr	r2, [pc, #80]	@ (8003728 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036d6:	68d2      	ldr	r2, [r2, #12]
 80036d8:	0a12      	lsrs	r2, r2, #8
 80036da:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80036de:	fb02 f303 	mul.w	r3, r2, r3
 80036e2:	617b      	str	r3, [r7, #20]
    break;
 80036e4:	e00c      	b.n	8003700 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036e6:	4a12      	ldr	r2, [pc, #72]	@ (8003730 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ee:	4a0e      	ldr	r2, [pc, #56]	@ (8003728 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036f0:	68d2      	ldr	r2, [r2, #12]
 80036f2:	0a12      	lsrs	r2, r2, #8
 80036f4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80036f8:	fb02 f303 	mul.w	r3, r2, r3
 80036fc:	617b      	str	r3, [r7, #20]
    break;
 80036fe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003700:	4b09      	ldr	r3, [pc, #36]	@ (8003728 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	0e5b      	lsrs	r3, r3, #25
 8003706:	f003 0303 	and.w	r3, r3, #3
 800370a:	3301      	adds	r3, #1
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003710:	697a      	ldr	r2, [r7, #20]
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	fbb2 f3f3 	udiv	r3, r2, r3
 8003718:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800371a:	687b      	ldr	r3, [r7, #4]
}
 800371c:	4618      	mov	r0, r3
 800371e:	371c      	adds	r7, #28
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr
 8003728:	40021000 	.word	0x40021000
 800372c:	016e3600 	.word	0x016e3600
 8003730:	00f42400 	.word	0x00f42400

08003734 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800373c:	2300      	movs	r3, #0
 800373e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003740:	2300      	movs	r3, #0
 8003742:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800374c:	2b00      	cmp	r3, #0
 800374e:	f000 8098 	beq.w	8003882 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003752:	2300      	movs	r3, #0
 8003754:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003756:	4b43      	ldr	r3, [pc, #268]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800375a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d10d      	bne.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003762:	4b40      	ldr	r3, [pc, #256]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003766:	4a3f      	ldr	r2, [pc, #252]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003768:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800376c:	6593      	str	r3, [r2, #88]	@ 0x58
 800376e:	4b3d      	ldr	r3, [pc, #244]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003770:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003772:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003776:	60bb      	str	r3, [r7, #8]
 8003778:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800377a:	2301      	movs	r3, #1
 800377c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800377e:	4b3a      	ldr	r3, [pc, #232]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a39      	ldr	r2, [pc, #228]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003784:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003788:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800378a:	f7fe fe27 	bl	80023dc <HAL_GetTick>
 800378e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003790:	e009      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003792:	f7fe fe23 	bl	80023dc <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b02      	cmp	r3, #2
 800379e:	d902      	bls.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	74fb      	strb	r3, [r7, #19]
        break;
 80037a4:	e005      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037a6:	4b30      	ldr	r3, [pc, #192]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d0ef      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80037b2:	7cfb      	ldrb	r3, [r7, #19]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d159      	bne.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80037b8:	4b2a      	ldr	r3, [pc, #168]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037c2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d01e      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d019      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037d4:	4b23      	ldr	r3, [pc, #140]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037de:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037e0:	4b20      	ldr	r3, [pc, #128]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037e6:	4a1f      	ldr	r2, [pc, #124]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037f0:	4b1c      	ldr	r3, [pc, #112]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037f6:	4a1b      	ldr	r2, [pc, #108]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003800:	4a18      	ldr	r2, [pc, #96]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b00      	cmp	r3, #0
 8003810:	d016      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003812:	f7fe fde3 	bl	80023dc <HAL_GetTick>
 8003816:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003818:	e00b      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800381a:	f7fe fddf 	bl	80023dc <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003828:	4293      	cmp	r3, r2
 800382a:	d902      	bls.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	74fb      	strb	r3, [r7, #19]
            break;
 8003830:	e006      	b.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003832:	4b0c      	ldr	r3, [pc, #48]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003834:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d0ec      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003840:	7cfb      	ldrb	r3, [r7, #19]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10b      	bne.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003846:	4b07      	ldr	r3, [pc, #28]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003848:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800384c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003854:	4903      	ldr	r1, [pc, #12]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003856:	4313      	orrs	r3, r2
 8003858:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800385c:	e008      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800385e:	7cfb      	ldrb	r3, [r7, #19]
 8003860:	74bb      	strb	r3, [r7, #18]
 8003862:	e005      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003864:	40021000 	.word	0x40021000
 8003868:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800386c:	7cfb      	ldrb	r3, [r7, #19]
 800386e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003870:	7c7b      	ldrb	r3, [r7, #17]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d105      	bne.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003876:	4ba7      	ldr	r3, [pc, #668]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800387a:	4aa6      	ldr	r2, [pc, #664]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800387c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003880:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00a      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800388e:	4ba1      	ldr	r3, [pc, #644]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003894:	f023 0203 	bic.w	r2, r3, #3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	499d      	ldr	r1, [pc, #628]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00a      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038b0:	4b98      	ldr	r3, [pc, #608]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038b6:	f023 020c 	bic.w	r2, r3, #12
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	4995      	ldr	r1, [pc, #596]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0304 	and.w	r3, r3, #4
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00a      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038d2:	4b90      	ldr	r3, [pc, #576]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038d8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	498c      	ldr	r1, [pc, #560]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0308 	and.w	r3, r3, #8
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00a      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038f4:	4b87      	ldr	r3, [pc, #540]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038fa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	4984      	ldr	r1, [pc, #528]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003904:	4313      	orrs	r3, r2
 8003906:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0310 	and.w	r3, r3, #16
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00a      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003916:	4b7f      	ldr	r3, [pc, #508]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003918:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800391c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	695b      	ldr	r3, [r3, #20]
 8003924:	497b      	ldr	r1, [pc, #492]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003926:	4313      	orrs	r3, r2
 8003928:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0320 	and.w	r3, r3, #32
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00a      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003938:	4b76      	ldr	r3, [pc, #472]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800393a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800393e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	4973      	ldr	r1, [pc, #460]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003948:	4313      	orrs	r3, r2
 800394a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00a      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800395a:	4b6e      	ldr	r3, [pc, #440]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800395c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003960:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	69db      	ldr	r3, [r3, #28]
 8003968:	496a      	ldr	r1, [pc, #424]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800396a:	4313      	orrs	r3, r2
 800396c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00a      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800397c:	4b65      	ldr	r3, [pc, #404]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800397e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003982:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	4962      	ldr	r1, [pc, #392]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800398c:	4313      	orrs	r3, r2
 800398e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00a      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800399e:	4b5d      	ldr	r3, [pc, #372]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039a4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ac:	4959      	ldr	r1, [pc, #356]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00a      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80039c0:	4b54      	ldr	r3, [pc, #336]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80039c6:	f023 0203 	bic.w	r2, r3, #3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ce:	4951      	ldr	r1, [pc, #324]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00a      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039e2:	4b4c      	ldr	r3, [pc, #304]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039e8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f0:	4948      	ldr	r1, [pc, #288]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d015      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a04:	4b43      	ldr	r3, [pc, #268]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a0a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a12:	4940      	ldr	r1, [pc, #256]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a22:	d105      	bne.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a24:	4b3b      	ldr	r3, [pc, #236]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	4a3a      	ldr	r2, [pc, #232]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a2e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d015      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a3c:	4b35      	ldr	r3, [pc, #212]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a42:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a4a:	4932      	ldr	r1, [pc, #200]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a5a:	d105      	bne.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a5c:	4b2d      	ldr	r3, [pc, #180]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	4a2c      	ldr	r2, [pc, #176]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a66:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d015      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a74:	4b27      	ldr	r3, [pc, #156]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a7a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a82:	4924      	ldr	r1, [pc, #144]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a92:	d105      	bne.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a94:	4b1f      	ldr	r3, [pc, #124]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	4a1e      	ldr	r2, [pc, #120]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a9e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d015      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003aac:	4b19      	ldr	r3, [pc, #100]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ab2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aba:	4916      	ldr	r1, [pc, #88]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ac6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003aca:	d105      	bne.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003acc:	4b11      	ldr	r3, [pc, #68]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	4a10      	ldr	r2, [pc, #64]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ad2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ad6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d019      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af2:	4908      	ldr	r1, [pc, #32]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003afe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b02:	d109      	bne.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b04:	4b03      	ldr	r3, [pc, #12]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	4a02      	ldr	r2, [pc, #8]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b0e:	60d3      	str	r3, [r2, #12]
 8003b10:	e002      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003b12:	bf00      	nop
 8003b14:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d015      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003b24:	4b29      	ldr	r3, [pc, #164]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b2a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b32:	4926      	ldr	r1, [pc, #152]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b42:	d105      	bne.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003b44:	4b21      	ldr	r3, [pc, #132]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	4a20      	ldr	r2, [pc, #128]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b4e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d015      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003b5c:	4b1b      	ldr	r3, [pc, #108]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b62:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b6a:	4918      	ldr	r1, [pc, #96]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b7a:	d105      	bne.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003b7c:	4b13      	ldr	r3, [pc, #76]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	4a12      	ldr	r2, [pc, #72]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b86:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d015      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003b94:	4b0d      	ldr	r3, [pc, #52]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b96:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003b9a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ba2:	490a      	ldr	r1, [pc, #40]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003bb2:	d105      	bne.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bb4:	4b05      	ldr	r3, [pc, #20]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	4a04      	ldr	r2, [pc, #16]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003bbe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003bc0:	7cbb      	ldrb	r3, [r7, #18]
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3718      	adds	r7, #24
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	40021000 	.word	0x40021000

08003bd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e09d      	b.n	8003d1e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d108      	bne.n	8003bfc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003bf2:	d009      	beq.n	8003c08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	61da      	str	r2, [r3, #28]
 8003bfa:	e005      	b.n	8003c08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d106      	bne.n	8003c28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f7fe f844 	bl	8001cb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c3e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003c48:	d902      	bls.n	8003c50 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	60fb      	str	r3, [r7, #12]
 8003c4e:	e002      	b.n	8003c56 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003c50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003c54:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003c5e:	d007      	beq.n	8003c70 <HAL_SPI_Init+0xa0>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003c68:	d002      	beq.n	8003c70 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003c80:	431a      	orrs	r2, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	431a      	orrs	r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c9e:	431a      	orrs	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	69db      	ldr	r3, [r3, #28]
 8003ca4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ca8:	431a      	orrs	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cb2:	ea42 0103 	orr.w	r1, r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cba:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	0c1b      	lsrs	r3, r3, #16
 8003ccc:	f003 0204 	and.w	r2, r3, #4
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd4:	f003 0310 	and.w	r3, r3, #16
 8003cd8:	431a      	orrs	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cde:	f003 0308 	and.w	r3, r3, #8
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003cec:	ea42 0103 	orr.w	r1, r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	69da      	ldr	r2, [r3, #28]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d0c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b088      	sub	sp, #32
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	60f8      	str	r0, [r7, #12]
 8003d2e:	60b9      	str	r1, [r7, #8]
 8003d30:	603b      	str	r3, [r7, #0]
 8003d32:	4613      	mov	r3, r2
 8003d34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d36:	2300      	movs	r3, #0
 8003d38:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d101      	bne.n	8003d48 <HAL_SPI_Transmit+0x22>
 8003d44:	2302      	movs	r3, #2
 8003d46:	e15f      	b.n	8004008 <HAL_SPI_Transmit+0x2e2>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d50:	f7fe fb44 	bl	80023dc <HAL_GetTick>
 8003d54:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003d56:	88fb      	ldrh	r3, [r7, #6]
 8003d58:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d002      	beq.n	8003d6c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003d66:	2302      	movs	r3, #2
 8003d68:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d6a:	e148      	b.n	8003ffe <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d002      	beq.n	8003d78 <HAL_SPI_Transmit+0x52>
 8003d72:	88fb      	ldrh	r3, [r7, #6]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d102      	bne.n	8003d7e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d7c:	e13f      	b.n	8003ffe <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2203      	movs	r2, #3
 8003d82:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	88fa      	ldrh	r2, [r7, #6]
 8003d96:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	88fa      	ldrh	r2, [r7, #6]
 8003d9c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dc8:	d10f      	bne.n	8003dea <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003dd8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003de8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003df4:	2b40      	cmp	r3, #64	@ 0x40
 8003df6:	d007      	beq.n	8003e08 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e06:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003e10:	d94f      	bls.n	8003eb2 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d002      	beq.n	8003e20 <HAL_SPI_Transmit+0xfa>
 8003e1a:	8afb      	ldrh	r3, [r7, #22]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d142      	bne.n	8003ea6 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e24:	881a      	ldrh	r2, [r3, #0]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e30:	1c9a      	adds	r2, r3, #2
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	b29a      	uxth	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003e44:	e02f      	b.n	8003ea6 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d112      	bne.n	8003e7a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e58:	881a      	ldrh	r2, [r3, #0]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e64:	1c9a      	adds	r2, r3, #2
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	3b01      	subs	r3, #1
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003e78:	e015      	b.n	8003ea6 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e7a:	f7fe faaf 	bl	80023dc <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d803      	bhi.n	8003e92 <HAL_SPI_Transmit+0x16c>
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e90:	d102      	bne.n	8003e98 <HAL_SPI_Transmit+0x172>
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d106      	bne.n	8003ea6 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003ea4:	e0ab      	b.n	8003ffe <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1ca      	bne.n	8003e46 <HAL_SPI_Transmit+0x120>
 8003eb0:	e080      	b.n	8003fb4 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d002      	beq.n	8003ec0 <HAL_SPI_Transmit+0x19a>
 8003eba:	8afb      	ldrh	r3, [r7, #22]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d174      	bne.n	8003faa <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d912      	bls.n	8003ef0 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ece:	881a      	ldrh	r2, [r3, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eda:	1c9a      	adds	r2, r3, #2
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	3b02      	subs	r3, #2
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003eee:	e05c      	b.n	8003faa <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	330c      	adds	r3, #12
 8003efa:	7812      	ldrb	r2, [r2, #0]
 8003efc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f02:	1c5a      	adds	r2, r3, #1
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003f16:	e048      	b.n	8003faa <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d12b      	bne.n	8003f7e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d912      	bls.n	8003f56 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f34:	881a      	ldrh	r2, [r3, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f40:	1c9a      	adds	r2, r3, #2
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	3b02      	subs	r3, #2
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003f54:	e029      	b.n	8003faa <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	330c      	adds	r3, #12
 8003f60:	7812      	ldrb	r2, [r2, #0]
 8003f62:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f68:	1c5a      	adds	r2, r3, #1
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	3b01      	subs	r3, #1
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003f7c:	e015      	b.n	8003faa <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f7e:	f7fe fa2d 	bl	80023dc <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	683a      	ldr	r2, [r7, #0]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d803      	bhi.n	8003f96 <HAL_SPI_Transmit+0x270>
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f94:	d102      	bne.n	8003f9c <HAL_SPI_Transmit+0x276>
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d106      	bne.n	8003faa <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003fa8:	e029      	b.n	8003ffe <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1b1      	bne.n	8003f18 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fb4:	69ba      	ldr	r2, [r7, #24]
 8003fb6:	6839      	ldr	r1, [r7, #0]
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f000 fcf9 	bl	80049b0 <SPI_EndRxTxTransaction>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d002      	beq.n	8003fca <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10a      	bne.n	8003fe8 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	613b      	str	r3, [r7, #16]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	613b      	str	r3, [r7, #16]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	613b      	str	r3, [r7, #16]
 8003fe6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d002      	beq.n	8003ff6 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	77fb      	strb	r3, [r7, #31]
 8003ff4:	e003      	b.n	8003ffe <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004006:	7ffb      	ldrb	r3, [r7, #31]
}
 8004008:	4618      	mov	r0, r3
 800400a:	3720      	adds	r7, #32
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b088      	sub	sp, #32
 8004014:	af02      	add	r7, sp, #8
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	603b      	str	r3, [r7, #0]
 800401c:	4613      	mov	r3, r2
 800401e:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004020:	2300      	movs	r3, #0
 8004022:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b01      	cmp	r3, #1
 800402e:	d002      	beq.n	8004036 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004030:	2302      	movs	r3, #2
 8004032:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004034:	e11a      	b.n	800426c <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800403e:	d112      	bne.n	8004066 <HAL_SPI_Receive+0x56>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d10e      	bne.n	8004066 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2204      	movs	r2, #4
 800404c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004050:	88fa      	ldrh	r2, [r7, #6]
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	9300      	str	r3, [sp, #0]
 8004056:	4613      	mov	r3, r2
 8004058:	68ba      	ldr	r2, [r7, #8]
 800405a:	68b9      	ldr	r1, [r7, #8]
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	f000 f90e 	bl	800427e <HAL_SPI_TransmitReceive>
 8004062:	4603      	mov	r3, r0
 8004064:	e107      	b.n	8004276 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800406c:	2b01      	cmp	r3, #1
 800406e:	d101      	bne.n	8004074 <HAL_SPI_Receive+0x64>
 8004070:	2302      	movs	r3, #2
 8004072:	e100      	b.n	8004276 <HAL_SPI_Receive+0x266>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800407c:	f7fe f9ae 	bl	80023dc <HAL_GetTick>
 8004080:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d002      	beq.n	800408e <HAL_SPI_Receive+0x7e>
 8004088:	88fb      	ldrh	r3, [r7, #6]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d102      	bne.n	8004094 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004092:	e0eb      	b.n	800426c <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2204      	movs	r2, #4
 8004098:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	68ba      	ldr	r2, [r7, #8]
 80040a6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	88fa      	ldrh	r2, [r7, #6]
 80040ac:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	88fa      	ldrh	r2, [r7, #6]
 80040b4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80040de:	d908      	bls.n	80040f2 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80040ee:	605a      	str	r2, [r3, #4]
 80040f0:	e007      	b.n	8004102 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	685a      	ldr	r2, [r3, #4]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004100:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800410a:	d10f      	bne.n	800412c <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800411a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800412a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004136:	2b40      	cmp	r3, #64	@ 0x40
 8004138:	d007      	beq.n	800414a <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004148:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004152:	d86f      	bhi.n	8004234 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004154:	e034      	b.n	80041c0 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	2b01      	cmp	r3, #1
 8004162:	d117      	bne.n	8004194 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f103 020c 	add.w	r2, r3, #12
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004170:	7812      	ldrb	r2, [r2, #0]
 8004172:	b2d2      	uxtb	r2, r2
 8004174:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800417a:	1c5a      	adds	r2, r3, #1
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004186:	b29b      	uxth	r3, r3
 8004188:	3b01      	subs	r3, #1
 800418a:	b29a      	uxth	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8004192:	e015      	b.n	80041c0 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004194:	f7fe f922 	bl	80023dc <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	683a      	ldr	r2, [r7, #0]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d803      	bhi.n	80041ac <HAL_SPI_Receive+0x19c>
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041aa:	d102      	bne.n	80041b2 <HAL_SPI_Receive+0x1a2>
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d106      	bne.n	80041c0 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80041be:	e055      	b.n	800426c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1c4      	bne.n	8004156 <HAL_SPI_Receive+0x146>
 80041cc:	e038      	b.n	8004240 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d115      	bne.n	8004208 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68da      	ldr	r2, [r3, #12]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e6:	b292      	uxth	r2, r2
 80041e8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ee:	1c9a      	adds	r2, r3, #2
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	3b01      	subs	r3, #1
 80041fe:	b29a      	uxth	r2, r3
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8004206:	e015      	b.n	8004234 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004208:	f7fe f8e8 	bl	80023dc <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	683a      	ldr	r2, [r7, #0]
 8004214:	429a      	cmp	r2, r3
 8004216:	d803      	bhi.n	8004220 <HAL_SPI_Receive+0x210>
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800421e:	d102      	bne.n	8004226 <HAL_SPI_Receive+0x216>
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d106      	bne.n	8004234 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2201      	movs	r2, #1
 800422e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004232:	e01b      	b.n	800426c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800423a:	b29b      	uxth	r3, r3
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1c6      	bne.n	80041ce <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	6839      	ldr	r1, [r7, #0]
 8004244:	68f8      	ldr	r0, [r7, #12]
 8004246:	f000 fb5b 	bl	8004900 <SPI_EndRxTransaction>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d002      	beq.n	8004256 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2220      	movs	r2, #32
 8004254:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800425a:	2b00      	cmp	r3, #0
 800425c:	d002      	beq.n	8004264 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	75fb      	strb	r3, [r7, #23]
 8004262:	e003      	b.n	800426c <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004274:	7dfb      	ldrb	r3, [r7, #23]
}
 8004276:	4618      	mov	r0, r3
 8004278:	3718      	adds	r7, #24
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b08a      	sub	sp, #40	@ 0x28
 8004282:	af00      	add	r7, sp, #0
 8004284:	60f8      	str	r0, [r7, #12]
 8004286:	60b9      	str	r1, [r7, #8]
 8004288:	607a      	str	r2, [r7, #4]
 800428a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800428c:	2301      	movs	r3, #1
 800428e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004290:	2300      	movs	r3, #0
 8004292:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800429c:	2b01      	cmp	r3, #1
 800429e:	d101      	bne.n	80042a4 <HAL_SPI_TransmitReceive+0x26>
 80042a0:	2302      	movs	r3, #2
 80042a2:	e20a      	b.n	80046ba <HAL_SPI_TransmitReceive+0x43c>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042ac:	f7fe f896 	bl	80023dc <HAL_GetTick>
 80042b0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80042b8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80042c0:	887b      	ldrh	r3, [r7, #2]
 80042c2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80042c4:	887b      	ldrh	r3, [r7, #2]
 80042c6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80042c8:	7efb      	ldrb	r3, [r7, #27]
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d00e      	beq.n	80042ec <HAL_SPI_TransmitReceive+0x6e>
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80042d4:	d106      	bne.n	80042e4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d102      	bne.n	80042e4 <HAL_SPI_TransmitReceive+0x66>
 80042de:	7efb      	ldrb	r3, [r7, #27]
 80042e0:	2b04      	cmp	r3, #4
 80042e2:	d003      	beq.n	80042ec <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80042e4:	2302      	movs	r3, #2
 80042e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80042ea:	e1e0      	b.n	80046ae <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d005      	beq.n	80042fe <HAL_SPI_TransmitReceive+0x80>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d002      	beq.n	80042fe <HAL_SPI_TransmitReceive+0x80>
 80042f8:	887b      	ldrh	r3, [r7, #2]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d103      	bne.n	8004306 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8004304:	e1d3      	b.n	80046ae <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b04      	cmp	r3, #4
 8004310:	d003      	beq.n	800431a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2205      	movs	r2, #5
 8004316:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	887a      	ldrh	r2, [r7, #2]
 800432a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	887a      	ldrh	r2, [r7, #2]
 8004332:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	68ba      	ldr	r2, [r7, #8]
 800433a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	887a      	ldrh	r2, [r7, #2]
 8004340:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	887a      	ldrh	r2, [r7, #2]
 8004346:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800435c:	d802      	bhi.n	8004364 <HAL_SPI_TransmitReceive+0xe6>
 800435e:	8a3b      	ldrh	r3, [r7, #16]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d908      	bls.n	8004376 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685a      	ldr	r2, [r3, #4]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004372:	605a      	str	r2, [r3, #4]
 8004374:	e007      	b.n	8004386 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	685a      	ldr	r2, [r3, #4]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004384:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004390:	2b40      	cmp	r3, #64	@ 0x40
 8004392:	d007      	beq.n	80043a4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80043a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80043ac:	f240 8081 	bls.w	80044b2 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d002      	beq.n	80043be <HAL_SPI_TransmitReceive+0x140>
 80043b8:	8a7b      	ldrh	r3, [r7, #18]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d16d      	bne.n	800449a <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043c2:	881a      	ldrh	r2, [r3, #0]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ce:	1c9a      	adds	r2, r3, #2
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043d8:	b29b      	uxth	r3, r3
 80043da:	3b01      	subs	r3, #1
 80043dc:	b29a      	uxth	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043e2:	e05a      	b.n	800449a <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f003 0302 	and.w	r3, r3, #2
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d11b      	bne.n	800442a <HAL_SPI_TransmitReceive+0x1ac>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d016      	beq.n	800442a <HAL_SPI_TransmitReceive+0x1ac>
 80043fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d113      	bne.n	800442a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004406:	881a      	ldrh	r2, [r3, #0]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004412:	1c9a      	adds	r2, r3, #2
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800441c:	b29b      	uxth	r3, r3
 800441e:	3b01      	subs	r3, #1
 8004420:	b29a      	uxth	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004426:	2300      	movs	r3, #0
 8004428:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	f003 0301 	and.w	r3, r3, #1
 8004434:	2b01      	cmp	r3, #1
 8004436:	d11c      	bne.n	8004472 <HAL_SPI_TransmitReceive+0x1f4>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800443e:	b29b      	uxth	r3, r3
 8004440:	2b00      	cmp	r3, #0
 8004442:	d016      	beq.n	8004472 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68da      	ldr	r2, [r3, #12]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444e:	b292      	uxth	r2, r2
 8004450:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004456:	1c9a      	adds	r2, r3, #2
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004462:	b29b      	uxth	r3, r3
 8004464:	3b01      	subs	r3, #1
 8004466:	b29a      	uxth	r2, r3
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800446e:	2301      	movs	r3, #1
 8004470:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004472:	f7fd ffb3 	bl	80023dc <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800447e:	429a      	cmp	r2, r3
 8004480:	d80b      	bhi.n	800449a <HAL_SPI_TransmitReceive+0x21c>
 8004482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004488:	d007      	beq.n	800449a <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8004498:	e109      	b.n	80046ae <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800449e:	b29b      	uxth	r3, r3
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d19f      	bne.n	80043e4 <HAL_SPI_TransmitReceive+0x166>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d199      	bne.n	80043e4 <HAL_SPI_TransmitReceive+0x166>
 80044b0:	e0e3      	b.n	800467a <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d003      	beq.n	80044c2 <HAL_SPI_TransmitReceive+0x244>
 80044ba:	8a7b      	ldrh	r3, [r7, #18]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	f040 80cf 	bne.w	8004660 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d912      	bls.n	80044f2 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044d0:	881a      	ldrh	r2, [r3, #0]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044dc:	1c9a      	adds	r2, r3, #2
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	3b02      	subs	r3, #2
 80044ea:	b29a      	uxth	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80044f0:	e0b6      	b.n	8004660 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	330c      	adds	r3, #12
 80044fc:	7812      	ldrb	r2, [r2, #0]
 80044fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004504:	1c5a      	adds	r2, r3, #1
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800450e:	b29b      	uxth	r3, r3
 8004510:	3b01      	subs	r3, #1
 8004512:	b29a      	uxth	r2, r3
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004518:	e0a2      	b.n	8004660 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f003 0302 	and.w	r3, r3, #2
 8004524:	2b02      	cmp	r3, #2
 8004526:	d134      	bne.n	8004592 <HAL_SPI_TransmitReceive+0x314>
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800452c:	b29b      	uxth	r3, r3
 800452e:	2b00      	cmp	r3, #0
 8004530:	d02f      	beq.n	8004592 <HAL_SPI_TransmitReceive+0x314>
 8004532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004534:	2b01      	cmp	r3, #1
 8004536:	d12c      	bne.n	8004592 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800453c:	b29b      	uxth	r3, r3
 800453e:	2b01      	cmp	r3, #1
 8004540:	d912      	bls.n	8004568 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004546:	881a      	ldrh	r2, [r3, #0]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004552:	1c9a      	adds	r2, r3, #2
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800455c:	b29b      	uxth	r3, r3
 800455e:	3b02      	subs	r3, #2
 8004560:	b29a      	uxth	r2, r3
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004566:	e012      	b.n	800458e <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	330c      	adds	r3, #12
 8004572:	7812      	ldrb	r2, [r2, #0]
 8004574:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800457a:	1c5a      	adds	r2, r3, #1
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004584:	b29b      	uxth	r3, r3
 8004586:	3b01      	subs	r3, #1
 8004588:	b29a      	uxth	r2, r3
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800458e:	2300      	movs	r3, #0
 8004590:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f003 0301 	and.w	r3, r3, #1
 800459c:	2b01      	cmp	r3, #1
 800459e:	d148      	bne.n	8004632 <HAL_SPI_TransmitReceive+0x3b4>
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d042      	beq.n	8004632 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d923      	bls.n	8004600 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68da      	ldr	r2, [r3, #12]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c2:	b292      	uxth	r2, r2
 80045c4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ca:	1c9a      	adds	r2, r3, #2
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	3b02      	subs	r3, #2
 80045da:	b29a      	uxth	r2, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d81f      	bhi.n	800462e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	685a      	ldr	r2, [r3, #4]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80045fc:	605a      	str	r2, [r3, #4]
 80045fe:	e016      	b.n	800462e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f103 020c 	add.w	r2, r3, #12
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800460c:	7812      	ldrb	r2, [r2, #0]
 800460e:	b2d2      	uxtb	r2, r2
 8004610:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004616:	1c5a      	adds	r2, r3, #1
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004622:	b29b      	uxth	r3, r3
 8004624:	3b01      	subs	r3, #1
 8004626:	b29a      	uxth	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800462e:	2301      	movs	r3, #1
 8004630:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004632:	f7fd fed3 	bl	80023dc <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800463e:	429a      	cmp	r2, r3
 8004640:	d803      	bhi.n	800464a <HAL_SPI_TransmitReceive+0x3cc>
 8004642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004648:	d102      	bne.n	8004650 <HAL_SPI_TransmitReceive+0x3d2>
 800464a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800464c:	2b00      	cmp	r3, #0
 800464e:	d107      	bne.n	8004660 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800465e:	e026      	b.n	80046ae <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004664:	b29b      	uxth	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	f47f af57 	bne.w	800451a <HAL_SPI_TransmitReceive+0x29c>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004672:	b29b      	uxth	r3, r3
 8004674:	2b00      	cmp	r3, #0
 8004676:	f47f af50 	bne.w	800451a <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800467a:	69fa      	ldr	r2, [r7, #28]
 800467c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f000 f996 	bl	80049b0 <SPI_EndRxTxTransaction>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d005      	beq.n	8004696 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2220      	movs	r2, #32
 8004694:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800469a:	2b00      	cmp	r3, #0
 800469c:	d003      	beq.n	80046a6 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046a4:	e003      	b.n	80046ae <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80046b6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3728      	adds	r7, #40	@ 0x28
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
	...

080046c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b088      	sub	sp, #32
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	603b      	str	r3, [r7, #0]
 80046d0:	4613      	mov	r3, r2
 80046d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80046d4:	f7fd fe82 	bl	80023dc <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046dc:	1a9b      	subs	r3, r3, r2
 80046de:	683a      	ldr	r2, [r7, #0]
 80046e0:	4413      	add	r3, r2
 80046e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80046e4:	f7fd fe7a 	bl	80023dc <HAL_GetTick>
 80046e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80046ea:	4b39      	ldr	r3, [pc, #228]	@ (80047d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	015b      	lsls	r3, r3, #5
 80046f0:	0d1b      	lsrs	r3, r3, #20
 80046f2:	69fa      	ldr	r2, [r7, #28]
 80046f4:	fb02 f303 	mul.w	r3, r2, r3
 80046f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046fa:	e054      	b.n	80047a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004702:	d050      	beq.n	80047a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004704:	f7fd fe6a 	bl	80023dc <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	69fa      	ldr	r2, [r7, #28]
 8004710:	429a      	cmp	r2, r3
 8004712:	d902      	bls.n	800471a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d13d      	bne.n	8004796 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	685a      	ldr	r2, [r3, #4]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004728:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004732:	d111      	bne.n	8004758 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800473c:	d004      	beq.n	8004748 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004746:	d107      	bne.n	8004758 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004756:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800475c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004760:	d10f      	bne.n	8004782 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004770:	601a      	str	r2, [r3, #0]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004780:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e017      	b.n	80047c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d101      	bne.n	80047a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800479c:	2300      	movs	r3, #0
 800479e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	3b01      	subs	r3, #1
 80047a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	689a      	ldr	r2, [r3, #8]
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	4013      	ands	r3, r2
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	bf0c      	ite	eq
 80047b6:	2301      	moveq	r3, #1
 80047b8:	2300      	movne	r3, #0
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	461a      	mov	r2, r3
 80047be:	79fb      	ldrb	r3, [r7, #7]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d19b      	bne.n	80046fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3720      	adds	r7, #32
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	20000004 	.word	0x20000004

080047d4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b08a      	sub	sp, #40	@ 0x28
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
 80047e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80047e2:	2300      	movs	r3, #0
 80047e4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80047e6:	f7fd fdf9 	bl	80023dc <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ee:	1a9b      	subs	r3, r3, r2
 80047f0:	683a      	ldr	r2, [r7, #0]
 80047f2:	4413      	add	r3, r2
 80047f4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80047f6:	f7fd fdf1 	bl	80023dc <HAL_GetTick>
 80047fa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	330c      	adds	r3, #12
 8004802:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004804:	4b3d      	ldr	r3, [pc, #244]	@ (80048fc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	4613      	mov	r3, r2
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	4413      	add	r3, r2
 800480e:	00da      	lsls	r2, r3, #3
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	0d1b      	lsrs	r3, r3, #20
 8004814:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004816:	fb02 f303 	mul.w	r3, r2, r3
 800481a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800481c:	e060      	b.n	80048e0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004824:	d107      	bne.n	8004836 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d104      	bne.n	8004836 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	b2db      	uxtb	r3, r3
 8004832:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004834:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800483c:	d050      	beq.n	80048e0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800483e:	f7fd fdcd 	bl	80023dc <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	6a3b      	ldr	r3, [r7, #32]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800484a:	429a      	cmp	r2, r3
 800484c:	d902      	bls.n	8004854 <SPI_WaitFifoStateUntilTimeout+0x80>
 800484e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004850:	2b00      	cmp	r3, #0
 8004852:	d13d      	bne.n	80048d0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	685a      	ldr	r2, [r3, #4]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004862:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800486c:	d111      	bne.n	8004892 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004876:	d004      	beq.n	8004882 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004880:	d107      	bne.n	8004892 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004890:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004896:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800489a:	d10f      	bne.n	80048bc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80048aa:	601a      	str	r2, [r3, #0]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80048ba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e010      	b.n	80048f2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80048d6:	2300      	movs	r3, #0
 80048d8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	3b01      	subs	r3, #1
 80048de:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	689a      	ldr	r2, [r3, #8]
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	4013      	ands	r3, r2
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d196      	bne.n	800481e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3728      	adds	r7, #40	@ 0x28
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	20000004 	.word	0x20000004

08004900 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b086      	sub	sp, #24
 8004904:	af02      	add	r7, sp, #8
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004914:	d111      	bne.n	800493a <SPI_EndRxTransaction+0x3a>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800491e:	d004      	beq.n	800492a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004928:	d107      	bne.n	800493a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004938:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	9300      	str	r3, [sp, #0]
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	2200      	movs	r2, #0
 8004942:	2180      	movs	r1, #128	@ 0x80
 8004944:	68f8      	ldr	r0, [r7, #12]
 8004946:	f7ff febd 	bl	80046c4 <SPI_WaitFlagStateUntilTimeout>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d007      	beq.n	8004960 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004954:	f043 0220 	orr.w	r2, r3, #32
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e023      	b.n	80049a8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004968:	d11d      	bne.n	80049a6 <SPI_EndRxTransaction+0xa6>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004972:	d004      	beq.n	800497e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800497c:	d113      	bne.n	80049a6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	9300      	str	r3, [sp, #0]
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	2200      	movs	r2, #0
 8004986:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800498a:	68f8      	ldr	r0, [r7, #12]
 800498c:	f7ff ff22 	bl	80047d4 <SPI_WaitFifoStateUntilTimeout>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d007      	beq.n	80049a6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800499a:	f043 0220 	orr.w	r2, r3, #32
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e000      	b.n	80049a8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b086      	sub	sp, #24
 80049b4:	af02      	add	r7, sp, #8
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	9300      	str	r3, [sp, #0]
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80049c8:	68f8      	ldr	r0, [r7, #12]
 80049ca:	f7ff ff03 	bl	80047d4 <SPI_WaitFifoStateUntilTimeout>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d007      	beq.n	80049e4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049d8:	f043 0220 	orr.w	r2, r3, #32
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	e027      	b.n	8004a34 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	9300      	str	r3, [sp, #0]
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	2200      	movs	r2, #0
 80049ec:	2180      	movs	r1, #128	@ 0x80
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f7ff fe68 	bl	80046c4 <SPI_WaitFlagStateUntilTimeout>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d007      	beq.n	8004a0a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049fe:	f043 0220 	orr.w	r2, r3, #32
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e014      	b.n	8004a34 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	9300      	str	r3, [sp, #0]
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004a16:	68f8      	ldr	r0, [r7, #12]
 8004a18:	f7ff fedc 	bl	80047d4 <SPI_WaitFifoStateUntilTimeout>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d007      	beq.n	8004a32 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a26:	f043 0220 	orr.w	r2, r3, #32
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e000      	b.n	8004a34 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3710      	adds	r7, #16
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d101      	bne.n	8004a4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e049      	b.n	8004ae2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d106      	bne.n	8004a68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f7fd f986 	bl	8001d74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	3304      	adds	r3, #4
 8004a78:	4619      	mov	r1, r3
 8004a7a:	4610      	mov	r0, r2
 8004a7c:	f000 fe88 	bl	8005790 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3708      	adds	r7, #8
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b082      	sub	sp, #8
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d101      	bne.n	8004afc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e049      	b.n	8004b90 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d106      	bne.n	8004b16 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 f841 	bl	8004b98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2202      	movs	r2, #2
 8004b1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	3304      	adds	r3, #4
 8004b26:	4619      	mov	r1, r3
 8004b28:	4610      	mov	r0, r2
 8004b2a:	f000 fe31 	bl	8005790 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2201      	movs	r2, #1
 8004b32:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2201      	movs	r2, #1
 8004b42:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2201      	movs	r2, #1
 8004b52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2201      	movs	r2, #1
 8004b62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2201      	movs	r2, #1
 8004b72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3708      	adds	r7, #8
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d109      	bne.n	8004bd0 <HAL_TIM_PWM_Start+0x24>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	bf14      	ite	ne
 8004bc8:	2301      	movne	r3, #1
 8004bca:	2300      	moveq	r3, #0
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	e03c      	b.n	8004c4a <HAL_TIM_PWM_Start+0x9e>
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	2b04      	cmp	r3, #4
 8004bd4:	d109      	bne.n	8004bea <HAL_TIM_PWM_Start+0x3e>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	bf14      	ite	ne
 8004be2:	2301      	movne	r3, #1
 8004be4:	2300      	moveq	r3, #0
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	e02f      	b.n	8004c4a <HAL_TIM_PWM_Start+0x9e>
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	2b08      	cmp	r3, #8
 8004bee:	d109      	bne.n	8004c04 <HAL_TIM_PWM_Start+0x58>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	bf14      	ite	ne
 8004bfc:	2301      	movne	r3, #1
 8004bfe:	2300      	moveq	r3, #0
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	e022      	b.n	8004c4a <HAL_TIM_PWM_Start+0x9e>
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	2b0c      	cmp	r3, #12
 8004c08:	d109      	bne.n	8004c1e <HAL_TIM_PWM_Start+0x72>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	bf14      	ite	ne
 8004c16:	2301      	movne	r3, #1
 8004c18:	2300      	moveq	r3, #0
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	e015      	b.n	8004c4a <HAL_TIM_PWM_Start+0x9e>
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	2b10      	cmp	r3, #16
 8004c22:	d109      	bne.n	8004c38 <HAL_TIM_PWM_Start+0x8c>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	bf14      	ite	ne
 8004c30:	2301      	movne	r3, #1
 8004c32:	2300      	moveq	r3, #0
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	e008      	b.n	8004c4a <HAL_TIM_PWM_Start+0x9e>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	bf14      	ite	ne
 8004c44:	2301      	movne	r3, #1
 8004c46:	2300      	moveq	r3, #0
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d001      	beq.n	8004c52 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e0a6      	b.n	8004da0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d104      	bne.n	8004c62 <HAL_TIM_PWM_Start+0xb6>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2202      	movs	r2, #2
 8004c5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c60:	e023      	b.n	8004caa <HAL_TIM_PWM_Start+0xfe>
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	2b04      	cmp	r3, #4
 8004c66:	d104      	bne.n	8004c72 <HAL_TIM_PWM_Start+0xc6>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2202      	movs	r2, #2
 8004c6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c70:	e01b      	b.n	8004caa <HAL_TIM_PWM_Start+0xfe>
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	2b08      	cmp	r3, #8
 8004c76:	d104      	bne.n	8004c82 <HAL_TIM_PWM_Start+0xd6>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2202      	movs	r2, #2
 8004c7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c80:	e013      	b.n	8004caa <HAL_TIM_PWM_Start+0xfe>
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	2b0c      	cmp	r3, #12
 8004c86:	d104      	bne.n	8004c92 <HAL_TIM_PWM_Start+0xe6>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2202      	movs	r2, #2
 8004c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004c90:	e00b      	b.n	8004caa <HAL_TIM_PWM_Start+0xfe>
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	2b10      	cmp	r3, #16
 8004c96:	d104      	bne.n	8004ca2 <HAL_TIM_PWM_Start+0xf6>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2202      	movs	r2, #2
 8004c9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ca0:	e003      	b.n	8004caa <HAL_TIM_PWM_Start+0xfe>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2202      	movs	r2, #2
 8004ca6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	6839      	ldr	r1, [r7, #0]
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f001 f9e6 	bl	8006084 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a3a      	ldr	r2, [pc, #232]	@ (8004da8 <HAL_TIM_PWM_Start+0x1fc>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d018      	beq.n	8004cf4 <HAL_TIM_PWM_Start+0x148>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a39      	ldr	r2, [pc, #228]	@ (8004dac <HAL_TIM_PWM_Start+0x200>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d013      	beq.n	8004cf4 <HAL_TIM_PWM_Start+0x148>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a37      	ldr	r2, [pc, #220]	@ (8004db0 <HAL_TIM_PWM_Start+0x204>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d00e      	beq.n	8004cf4 <HAL_TIM_PWM_Start+0x148>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a36      	ldr	r2, [pc, #216]	@ (8004db4 <HAL_TIM_PWM_Start+0x208>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d009      	beq.n	8004cf4 <HAL_TIM_PWM_Start+0x148>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a34      	ldr	r2, [pc, #208]	@ (8004db8 <HAL_TIM_PWM_Start+0x20c>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d004      	beq.n	8004cf4 <HAL_TIM_PWM_Start+0x148>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a33      	ldr	r2, [pc, #204]	@ (8004dbc <HAL_TIM_PWM_Start+0x210>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d101      	bne.n	8004cf8 <HAL_TIM_PWM_Start+0x14c>
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e000      	b.n	8004cfa <HAL_TIM_PWM_Start+0x14e>
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d007      	beq.n	8004d0e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004d0c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a25      	ldr	r2, [pc, #148]	@ (8004da8 <HAL_TIM_PWM_Start+0x1fc>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d022      	beq.n	8004d5e <HAL_TIM_PWM_Start+0x1b2>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d20:	d01d      	beq.n	8004d5e <HAL_TIM_PWM_Start+0x1b2>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a26      	ldr	r2, [pc, #152]	@ (8004dc0 <HAL_TIM_PWM_Start+0x214>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d018      	beq.n	8004d5e <HAL_TIM_PWM_Start+0x1b2>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a24      	ldr	r2, [pc, #144]	@ (8004dc4 <HAL_TIM_PWM_Start+0x218>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d013      	beq.n	8004d5e <HAL_TIM_PWM_Start+0x1b2>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a23      	ldr	r2, [pc, #140]	@ (8004dc8 <HAL_TIM_PWM_Start+0x21c>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d00e      	beq.n	8004d5e <HAL_TIM_PWM_Start+0x1b2>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a19      	ldr	r2, [pc, #100]	@ (8004dac <HAL_TIM_PWM_Start+0x200>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d009      	beq.n	8004d5e <HAL_TIM_PWM_Start+0x1b2>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a18      	ldr	r2, [pc, #96]	@ (8004db0 <HAL_TIM_PWM_Start+0x204>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d004      	beq.n	8004d5e <HAL_TIM_PWM_Start+0x1b2>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a18      	ldr	r2, [pc, #96]	@ (8004dbc <HAL_TIM_PWM_Start+0x210>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d115      	bne.n	8004d8a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	689a      	ldr	r2, [r3, #8]
 8004d64:	4b19      	ldr	r3, [pc, #100]	@ (8004dcc <HAL_TIM_PWM_Start+0x220>)
 8004d66:	4013      	ands	r3, r2
 8004d68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2b06      	cmp	r3, #6
 8004d6e:	d015      	beq.n	8004d9c <HAL_TIM_PWM_Start+0x1f0>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d76:	d011      	beq.n	8004d9c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f042 0201 	orr.w	r2, r2, #1
 8004d86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d88:	e008      	b.n	8004d9c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f042 0201 	orr.w	r2, r2, #1
 8004d98:	601a      	str	r2, [r3, #0]
 8004d9a:	e000      	b.n	8004d9e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d9c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3710      	adds	r7, #16
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	40012c00 	.word	0x40012c00
 8004dac:	40013400 	.word	0x40013400
 8004db0:	40014000 	.word	0x40014000
 8004db4:	40014400 	.word	0x40014400
 8004db8:	40014800 	.word	0x40014800
 8004dbc:	40015000 	.word	0x40015000
 8004dc0:	40000400 	.word	0x40000400
 8004dc4:	40000800 	.word	0x40000800
 8004dc8:	40000c00 	.word	0x40000c00
 8004dcc:	00010007 	.word	0x00010007

08004dd0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b086      	sub	sp, #24
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d101      	bne.n	8004de4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e097      	b.n	8004f14 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d106      	bne.n	8004dfe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f7fc ffdb 	bl	8001db4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2202      	movs	r2, #2
 8004e02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	6812      	ldr	r2, [r2, #0]
 8004e10:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8004e14:	f023 0307 	bic.w	r3, r3, #7
 8004e18:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	3304      	adds	r3, #4
 8004e22:	4619      	mov	r1, r3
 8004e24:	4610      	mov	r0, r2
 8004e26:	f000 fcb3 	bl	8005790 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	699b      	ldr	r3, [r3, #24]
 8004e38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	6a1b      	ldr	r3, [r3, #32]
 8004e40:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	697a      	ldr	r2, [r7, #20]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e52:	f023 0303 	bic.w	r3, r3, #3
 8004e56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	689a      	ldr	r2, [r3, #8]
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	021b      	lsls	r3, r3, #8
 8004e62:	4313      	orrs	r3, r2
 8004e64:	693a      	ldr	r2, [r7, #16]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004e70:	f023 030c 	bic.w	r3, r3, #12
 8004e74:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004e7c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	68da      	ldr	r2, [r3, #12]
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	69db      	ldr	r3, [r3, #28]
 8004e8a:	021b      	lsls	r3, r3, #8
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	693a      	ldr	r2, [r7, #16]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	011a      	lsls	r2, r3, #4
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	031b      	lsls	r3, r3, #12
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004eae:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004eb6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	685a      	ldr	r2, [r3, #4]
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	695b      	ldr	r3, [r3, #20]
 8004ec0:	011b      	lsls	r3, r3, #4
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	697a      	ldr	r2, [r7, #20]
 8004ed0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2201      	movs	r2, #1
 8004f06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3718      	adds	r7, #24
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f2c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004f34:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f3c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f44:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d110      	bne.n	8004f6e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f4c:	7bfb      	ldrb	r3, [r7, #15]
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d102      	bne.n	8004f58 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f52:	7b7b      	ldrb	r3, [r7, #13]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d001      	beq.n	8004f5c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e069      	b.n	8005030 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2202      	movs	r2, #2
 8004f60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2202      	movs	r2, #2
 8004f68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f6c:	e031      	b.n	8004fd2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	2b04      	cmp	r3, #4
 8004f72:	d110      	bne.n	8004f96 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f74:	7bbb      	ldrb	r3, [r7, #14]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d102      	bne.n	8004f80 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f7a:	7b3b      	ldrb	r3, [r7, #12]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d001      	beq.n	8004f84 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e055      	b.n	8005030 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2202      	movs	r2, #2
 8004f88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2202      	movs	r2, #2
 8004f90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f94:	e01d      	b.n	8004fd2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f96:	7bfb      	ldrb	r3, [r7, #15]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d108      	bne.n	8004fae <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f9c:	7bbb      	ldrb	r3, [r7, #14]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d105      	bne.n	8004fae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004fa2:	7b7b      	ldrb	r3, [r7, #13]
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d102      	bne.n	8004fae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004fa8:	7b3b      	ldrb	r3, [r7, #12]
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d001      	beq.n	8004fb2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e03e      	b.n	8005030 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2202      	movs	r2, #2
 8004fb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2202      	movs	r2, #2
 8004fbe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2202      	movs	r2, #2
 8004fc6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2202      	movs	r2, #2
 8004fce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d003      	beq.n	8004fe0 <HAL_TIM_Encoder_Start+0xc4>
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	2b04      	cmp	r3, #4
 8004fdc:	d008      	beq.n	8004ff0 <HAL_TIM_Encoder_Start+0xd4>
 8004fde:	e00f      	b.n	8005000 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	2100      	movs	r1, #0
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f001 f84b 	bl	8006084 <TIM_CCxChannelCmd>
      break;
 8004fee:	e016      	b.n	800501e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	2104      	movs	r1, #4
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f001 f843 	bl	8006084 <TIM_CCxChannelCmd>
      break;
 8004ffe:	e00e      	b.n	800501e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2201      	movs	r2, #1
 8005006:	2100      	movs	r1, #0
 8005008:	4618      	mov	r0, r3
 800500a:	f001 f83b 	bl	8006084 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2201      	movs	r2, #1
 8005014:	2104      	movs	r1, #4
 8005016:	4618      	mov	r0, r3
 8005018:	f001 f834 	bl	8006084 <TIM_CCxChannelCmd>
      break;
 800501c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f042 0201 	orr.w	r2, r2, #1
 800502c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	3710      	adds	r7, #16
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	f003 0302 	and.w	r3, r3, #2
 8005056:	2b00      	cmp	r3, #0
 8005058:	d020      	beq.n	800509c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f003 0302 	and.w	r3, r3, #2
 8005060:	2b00      	cmp	r3, #0
 8005062:	d01b      	beq.n	800509c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f06f 0202 	mvn.w	r2, #2
 800506c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2201      	movs	r2, #1
 8005072:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	f003 0303 	and.w	r3, r3, #3
 800507e:	2b00      	cmp	r3, #0
 8005080:	d003      	beq.n	800508a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 fb66 	bl	8005754 <HAL_TIM_IC_CaptureCallback>
 8005088:	e005      	b.n	8005096 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 fb58 	bl	8005740 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f000 fb69 	bl	8005768 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	f003 0304 	and.w	r3, r3, #4
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d020      	beq.n	80050e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f003 0304 	and.w	r3, r3, #4
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d01b      	beq.n	80050e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f06f 0204 	mvn.w	r2, #4
 80050b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2202      	movs	r2, #2
 80050be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	699b      	ldr	r3, [r3, #24]
 80050c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d003      	beq.n	80050d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 fb40 	bl	8005754 <HAL_TIM_IC_CaptureCallback>
 80050d4:	e005      	b.n	80050e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 fb32 	bl	8005740 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 fb43 	bl	8005768 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	f003 0308 	and.w	r3, r3, #8
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d020      	beq.n	8005134 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f003 0308 	and.w	r3, r3, #8
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d01b      	beq.n	8005134 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f06f 0208 	mvn.w	r2, #8
 8005104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2204      	movs	r2, #4
 800510a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	69db      	ldr	r3, [r3, #28]
 8005112:	f003 0303 	and.w	r3, r3, #3
 8005116:	2b00      	cmp	r3, #0
 8005118:	d003      	beq.n	8005122 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 fb1a 	bl	8005754 <HAL_TIM_IC_CaptureCallback>
 8005120:	e005      	b.n	800512e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 fb0c 	bl	8005740 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 fb1d 	bl	8005768 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	f003 0310 	and.w	r3, r3, #16
 800513a:	2b00      	cmp	r3, #0
 800513c:	d020      	beq.n	8005180 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f003 0310 	and.w	r3, r3, #16
 8005144:	2b00      	cmp	r3, #0
 8005146:	d01b      	beq.n	8005180 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f06f 0210 	mvn.w	r2, #16
 8005150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2208      	movs	r2, #8
 8005156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	69db      	ldr	r3, [r3, #28]
 800515e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005162:	2b00      	cmp	r3, #0
 8005164:	d003      	beq.n	800516e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 faf4 	bl	8005754 <HAL_TIM_IC_CaptureCallback>
 800516c:	e005      	b.n	800517a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 fae6 	bl	8005740 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 faf7 	bl	8005768 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	f003 0301 	and.w	r3, r3, #1
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00c      	beq.n	80051a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f003 0301 	and.w	r3, r3, #1
 8005190:	2b00      	cmp	r3, #0
 8005192:	d007      	beq.n	80051a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f06f 0201 	mvn.w	r2, #1
 800519c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 fac4 	bl	800572c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d104      	bne.n	80051b8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d00c      	beq.n	80051d2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d007      	beq.n	80051d2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80051ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f001 f8b3 	bl	8006338 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00c      	beq.n	80051f6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d007      	beq.n	80051f6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80051ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f001 f8ab 	bl	800634c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d00c      	beq.n	800521a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005206:	2b00      	cmp	r3, #0
 8005208:	d007      	beq.n	800521a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005212:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f000 fab1 	bl	800577c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	f003 0320 	and.w	r3, r3, #32
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00c      	beq.n	800523e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f003 0320 	and.w	r3, r3, #32
 800522a:	2b00      	cmp	r3, #0
 800522c:	d007      	beq.n	800523e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f06f 0220 	mvn.w	r2, #32
 8005236:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f001 f873 	bl	8006324 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d00c      	beq.n	8005262 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800524e:	2b00      	cmp	r3, #0
 8005250:	d007      	beq.n	8005262 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800525a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f001 f87f 	bl	8006360 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005268:	2b00      	cmp	r3, #0
 800526a:	d00c      	beq.n	8005286 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d007      	beq.n	8005286 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800527e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f001 f877 	bl	8006374 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00c      	beq.n	80052aa <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d007      	beq.n	80052aa <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80052a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f001 f86f 	bl	8006388 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00c      	beq.n	80052ce <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d007      	beq.n	80052ce <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80052c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f001 f867 	bl	800639c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052ce:	bf00      	nop
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
	...

080052d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b086      	sub	sp, #24
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052e4:	2300      	movs	r3, #0
 80052e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d101      	bne.n	80052f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80052f2:	2302      	movs	r3, #2
 80052f4:	e0ff      	b.n	80054f6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2201      	movs	r2, #1
 80052fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2b14      	cmp	r3, #20
 8005302:	f200 80f0 	bhi.w	80054e6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005306:	a201      	add	r2, pc, #4	@ (adr r2, 800530c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800530c:	08005361 	.word	0x08005361
 8005310:	080054e7 	.word	0x080054e7
 8005314:	080054e7 	.word	0x080054e7
 8005318:	080054e7 	.word	0x080054e7
 800531c:	080053a1 	.word	0x080053a1
 8005320:	080054e7 	.word	0x080054e7
 8005324:	080054e7 	.word	0x080054e7
 8005328:	080054e7 	.word	0x080054e7
 800532c:	080053e3 	.word	0x080053e3
 8005330:	080054e7 	.word	0x080054e7
 8005334:	080054e7 	.word	0x080054e7
 8005338:	080054e7 	.word	0x080054e7
 800533c:	08005423 	.word	0x08005423
 8005340:	080054e7 	.word	0x080054e7
 8005344:	080054e7 	.word	0x080054e7
 8005348:	080054e7 	.word	0x080054e7
 800534c:	08005465 	.word	0x08005465
 8005350:	080054e7 	.word	0x080054e7
 8005354:	080054e7 	.word	0x080054e7
 8005358:	080054e7 	.word	0x080054e7
 800535c:	080054a5 	.word	0x080054a5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68b9      	ldr	r1, [r7, #8]
 8005366:	4618      	mov	r0, r3
 8005368:	f000 fac6 	bl	80058f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	699a      	ldr	r2, [r3, #24]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f042 0208 	orr.w	r2, r2, #8
 800537a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	699a      	ldr	r2, [r3, #24]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f022 0204 	bic.w	r2, r2, #4
 800538a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	6999      	ldr	r1, [r3, #24]
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	691a      	ldr	r2, [r3, #16]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	430a      	orrs	r2, r1
 800539c:	619a      	str	r2, [r3, #24]
      break;
 800539e:	e0a5      	b.n	80054ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68b9      	ldr	r1, [r7, #8]
 80053a6:	4618      	mov	r0, r3
 80053a8:	f000 fb40 	bl	8005a2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	699a      	ldr	r2, [r3, #24]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80053ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	699a      	ldr	r2, [r3, #24]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	6999      	ldr	r1, [r3, #24]
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	021a      	lsls	r2, r3, #8
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	430a      	orrs	r2, r1
 80053de:	619a      	str	r2, [r3, #24]
      break;
 80053e0:	e084      	b.n	80054ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68b9      	ldr	r1, [r7, #8]
 80053e8:	4618      	mov	r0, r3
 80053ea:	f000 fbb3 	bl	8005b54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	69da      	ldr	r2, [r3, #28]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f042 0208 	orr.w	r2, r2, #8
 80053fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	69da      	ldr	r2, [r3, #28]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f022 0204 	bic.w	r2, r2, #4
 800540c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	69d9      	ldr	r1, [r3, #28]
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	691a      	ldr	r2, [r3, #16]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	430a      	orrs	r2, r1
 800541e:	61da      	str	r2, [r3, #28]
      break;
 8005420:	e064      	b.n	80054ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68b9      	ldr	r1, [r7, #8]
 8005428:	4618      	mov	r0, r3
 800542a:	f000 fc25 	bl	8005c78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	69da      	ldr	r2, [r3, #28]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800543c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	69da      	ldr	r2, [r3, #28]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800544c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	69d9      	ldr	r1, [r3, #28]
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	691b      	ldr	r3, [r3, #16]
 8005458:	021a      	lsls	r2, r3, #8
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	430a      	orrs	r2, r1
 8005460:	61da      	str	r2, [r3, #28]
      break;
 8005462:	e043      	b.n	80054ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68b9      	ldr	r1, [r7, #8]
 800546a:	4618      	mov	r0, r3
 800546c:	f000 fc98 	bl	8005da0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f042 0208 	orr.w	r2, r2, #8
 800547e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f022 0204 	bic.w	r2, r2, #4
 800548e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	691a      	ldr	r2, [r3, #16]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	430a      	orrs	r2, r1
 80054a0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80054a2:	e023      	b.n	80054ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68b9      	ldr	r1, [r7, #8]
 80054aa:	4618      	mov	r0, r3
 80054ac:	f000 fce2 	bl	8005e74 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054be:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054ce:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	021a      	lsls	r2, r3, #8
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	430a      	orrs	r2, r1
 80054e2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80054e4:	e002      	b.n	80054ec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	75fb      	strb	r3, [r7, #23]
      break;
 80054ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80054f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3718      	adds	r7, #24
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop

08005500 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800550a:	2300      	movs	r3, #0
 800550c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005514:	2b01      	cmp	r3, #1
 8005516:	d101      	bne.n	800551c <HAL_TIM_ConfigClockSource+0x1c>
 8005518:	2302      	movs	r3, #2
 800551a:	e0f6      	b.n	800570a <HAL_TIM_ConfigClockSource+0x20a>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2202      	movs	r2, #2
 8005528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800553a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800553e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005546:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68ba      	ldr	r2, [r7, #8]
 800554e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a6f      	ldr	r2, [pc, #444]	@ (8005714 <HAL_TIM_ConfigClockSource+0x214>)
 8005556:	4293      	cmp	r3, r2
 8005558:	f000 80c1 	beq.w	80056de <HAL_TIM_ConfigClockSource+0x1de>
 800555c:	4a6d      	ldr	r2, [pc, #436]	@ (8005714 <HAL_TIM_ConfigClockSource+0x214>)
 800555e:	4293      	cmp	r3, r2
 8005560:	f200 80c6 	bhi.w	80056f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005564:	4a6c      	ldr	r2, [pc, #432]	@ (8005718 <HAL_TIM_ConfigClockSource+0x218>)
 8005566:	4293      	cmp	r3, r2
 8005568:	f000 80b9 	beq.w	80056de <HAL_TIM_ConfigClockSource+0x1de>
 800556c:	4a6a      	ldr	r2, [pc, #424]	@ (8005718 <HAL_TIM_ConfigClockSource+0x218>)
 800556e:	4293      	cmp	r3, r2
 8005570:	f200 80be 	bhi.w	80056f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005574:	4a69      	ldr	r2, [pc, #420]	@ (800571c <HAL_TIM_ConfigClockSource+0x21c>)
 8005576:	4293      	cmp	r3, r2
 8005578:	f000 80b1 	beq.w	80056de <HAL_TIM_ConfigClockSource+0x1de>
 800557c:	4a67      	ldr	r2, [pc, #412]	@ (800571c <HAL_TIM_ConfigClockSource+0x21c>)
 800557e:	4293      	cmp	r3, r2
 8005580:	f200 80b6 	bhi.w	80056f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005584:	4a66      	ldr	r2, [pc, #408]	@ (8005720 <HAL_TIM_ConfigClockSource+0x220>)
 8005586:	4293      	cmp	r3, r2
 8005588:	f000 80a9 	beq.w	80056de <HAL_TIM_ConfigClockSource+0x1de>
 800558c:	4a64      	ldr	r2, [pc, #400]	@ (8005720 <HAL_TIM_ConfigClockSource+0x220>)
 800558e:	4293      	cmp	r3, r2
 8005590:	f200 80ae 	bhi.w	80056f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005594:	4a63      	ldr	r2, [pc, #396]	@ (8005724 <HAL_TIM_ConfigClockSource+0x224>)
 8005596:	4293      	cmp	r3, r2
 8005598:	f000 80a1 	beq.w	80056de <HAL_TIM_ConfigClockSource+0x1de>
 800559c:	4a61      	ldr	r2, [pc, #388]	@ (8005724 <HAL_TIM_ConfigClockSource+0x224>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	f200 80a6 	bhi.w	80056f0 <HAL_TIM_ConfigClockSource+0x1f0>
 80055a4:	4a60      	ldr	r2, [pc, #384]	@ (8005728 <HAL_TIM_ConfigClockSource+0x228>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	f000 8099 	beq.w	80056de <HAL_TIM_ConfigClockSource+0x1de>
 80055ac:	4a5e      	ldr	r2, [pc, #376]	@ (8005728 <HAL_TIM_ConfigClockSource+0x228>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	f200 809e 	bhi.w	80056f0 <HAL_TIM_ConfigClockSource+0x1f0>
 80055b4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80055b8:	f000 8091 	beq.w	80056de <HAL_TIM_ConfigClockSource+0x1de>
 80055bc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80055c0:	f200 8096 	bhi.w	80056f0 <HAL_TIM_ConfigClockSource+0x1f0>
 80055c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055c8:	f000 8089 	beq.w	80056de <HAL_TIM_ConfigClockSource+0x1de>
 80055cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055d0:	f200 808e 	bhi.w	80056f0 <HAL_TIM_ConfigClockSource+0x1f0>
 80055d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055d8:	d03e      	beq.n	8005658 <HAL_TIM_ConfigClockSource+0x158>
 80055da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055de:	f200 8087 	bhi.w	80056f0 <HAL_TIM_ConfigClockSource+0x1f0>
 80055e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055e6:	f000 8086 	beq.w	80056f6 <HAL_TIM_ConfigClockSource+0x1f6>
 80055ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055ee:	d87f      	bhi.n	80056f0 <HAL_TIM_ConfigClockSource+0x1f0>
 80055f0:	2b70      	cmp	r3, #112	@ 0x70
 80055f2:	d01a      	beq.n	800562a <HAL_TIM_ConfigClockSource+0x12a>
 80055f4:	2b70      	cmp	r3, #112	@ 0x70
 80055f6:	d87b      	bhi.n	80056f0 <HAL_TIM_ConfigClockSource+0x1f0>
 80055f8:	2b60      	cmp	r3, #96	@ 0x60
 80055fa:	d050      	beq.n	800569e <HAL_TIM_ConfigClockSource+0x19e>
 80055fc:	2b60      	cmp	r3, #96	@ 0x60
 80055fe:	d877      	bhi.n	80056f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005600:	2b50      	cmp	r3, #80	@ 0x50
 8005602:	d03c      	beq.n	800567e <HAL_TIM_ConfigClockSource+0x17e>
 8005604:	2b50      	cmp	r3, #80	@ 0x50
 8005606:	d873      	bhi.n	80056f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005608:	2b40      	cmp	r3, #64	@ 0x40
 800560a:	d058      	beq.n	80056be <HAL_TIM_ConfigClockSource+0x1be>
 800560c:	2b40      	cmp	r3, #64	@ 0x40
 800560e:	d86f      	bhi.n	80056f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005610:	2b30      	cmp	r3, #48	@ 0x30
 8005612:	d064      	beq.n	80056de <HAL_TIM_ConfigClockSource+0x1de>
 8005614:	2b30      	cmp	r3, #48	@ 0x30
 8005616:	d86b      	bhi.n	80056f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005618:	2b20      	cmp	r3, #32
 800561a:	d060      	beq.n	80056de <HAL_TIM_ConfigClockSource+0x1de>
 800561c:	2b20      	cmp	r3, #32
 800561e:	d867      	bhi.n	80056f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005620:	2b00      	cmp	r3, #0
 8005622:	d05c      	beq.n	80056de <HAL_TIM_ConfigClockSource+0x1de>
 8005624:	2b10      	cmp	r3, #16
 8005626:	d05a      	beq.n	80056de <HAL_TIM_ConfigClockSource+0x1de>
 8005628:	e062      	b.n	80056f0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800563a:	f000 fd03 	bl	8006044 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800564c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68ba      	ldr	r2, [r7, #8]
 8005654:	609a      	str	r2, [r3, #8]
      break;
 8005656:	e04f      	b.n	80056f8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005668:	f000 fcec 	bl	8006044 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	689a      	ldr	r2, [r3, #8]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800567a:	609a      	str	r2, [r3, #8]
      break;
 800567c:	e03c      	b.n	80056f8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800568a:	461a      	mov	r2, r3
 800568c:	f000 fc5e 	bl	8005f4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2150      	movs	r1, #80	@ 0x50
 8005696:	4618      	mov	r0, r3
 8005698:	f000 fcb7 	bl	800600a <TIM_ITRx_SetConfig>
      break;
 800569c:	e02c      	b.n	80056f8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056aa:	461a      	mov	r2, r3
 80056ac:	f000 fc7d 	bl	8005faa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2160      	movs	r1, #96	@ 0x60
 80056b6:	4618      	mov	r0, r3
 80056b8:	f000 fca7 	bl	800600a <TIM_ITRx_SetConfig>
      break;
 80056bc:	e01c      	b.n	80056f8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056ca:	461a      	mov	r2, r3
 80056cc:	f000 fc3e 	bl	8005f4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2140      	movs	r1, #64	@ 0x40
 80056d6:	4618      	mov	r0, r3
 80056d8:	f000 fc97 	bl	800600a <TIM_ITRx_SetConfig>
      break;
 80056dc:	e00c      	b.n	80056f8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4619      	mov	r1, r3
 80056e8:	4610      	mov	r0, r2
 80056ea:	f000 fc8e 	bl	800600a <TIM_ITRx_SetConfig>
      break;
 80056ee:	e003      	b.n	80056f8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	73fb      	strb	r3, [r7, #15]
      break;
 80056f4:	e000      	b.n	80056f8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80056f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005708:	7bfb      	ldrb	r3, [r7, #15]
}
 800570a:	4618      	mov	r0, r3
 800570c:	3710      	adds	r7, #16
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	00100070 	.word	0x00100070
 8005718:	00100060 	.word	0x00100060
 800571c:	00100050 	.word	0x00100050
 8005720:	00100040 	.word	0x00100040
 8005724:	00100030 	.word	0x00100030
 8005728:	00100020 	.word	0x00100020

0800572c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005748:	bf00      	nop
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800575c:	bf00      	nop
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005770:	bf00      	nop
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005784:	bf00      	nop
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a4c      	ldr	r2, [pc, #304]	@ (80058d4 <TIM_Base_SetConfig+0x144>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d017      	beq.n	80057d8 <TIM_Base_SetConfig+0x48>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057ae:	d013      	beq.n	80057d8 <TIM_Base_SetConfig+0x48>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a49      	ldr	r2, [pc, #292]	@ (80058d8 <TIM_Base_SetConfig+0x148>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d00f      	beq.n	80057d8 <TIM_Base_SetConfig+0x48>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a48      	ldr	r2, [pc, #288]	@ (80058dc <TIM_Base_SetConfig+0x14c>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d00b      	beq.n	80057d8 <TIM_Base_SetConfig+0x48>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a47      	ldr	r2, [pc, #284]	@ (80058e0 <TIM_Base_SetConfig+0x150>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d007      	beq.n	80057d8 <TIM_Base_SetConfig+0x48>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a46      	ldr	r2, [pc, #280]	@ (80058e4 <TIM_Base_SetConfig+0x154>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d003      	beq.n	80057d8 <TIM_Base_SetConfig+0x48>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a45      	ldr	r2, [pc, #276]	@ (80058e8 <TIM_Base_SetConfig+0x158>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d108      	bne.n	80057ea <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a39      	ldr	r2, [pc, #228]	@ (80058d4 <TIM_Base_SetConfig+0x144>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d023      	beq.n	800583a <TIM_Base_SetConfig+0xaa>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057f8:	d01f      	beq.n	800583a <TIM_Base_SetConfig+0xaa>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a36      	ldr	r2, [pc, #216]	@ (80058d8 <TIM_Base_SetConfig+0x148>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d01b      	beq.n	800583a <TIM_Base_SetConfig+0xaa>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a35      	ldr	r2, [pc, #212]	@ (80058dc <TIM_Base_SetConfig+0x14c>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d017      	beq.n	800583a <TIM_Base_SetConfig+0xaa>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a34      	ldr	r2, [pc, #208]	@ (80058e0 <TIM_Base_SetConfig+0x150>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d013      	beq.n	800583a <TIM_Base_SetConfig+0xaa>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a33      	ldr	r2, [pc, #204]	@ (80058e4 <TIM_Base_SetConfig+0x154>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d00f      	beq.n	800583a <TIM_Base_SetConfig+0xaa>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a33      	ldr	r2, [pc, #204]	@ (80058ec <TIM_Base_SetConfig+0x15c>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d00b      	beq.n	800583a <TIM_Base_SetConfig+0xaa>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a32      	ldr	r2, [pc, #200]	@ (80058f0 <TIM_Base_SetConfig+0x160>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d007      	beq.n	800583a <TIM_Base_SetConfig+0xaa>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a31      	ldr	r2, [pc, #196]	@ (80058f4 <TIM_Base_SetConfig+0x164>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d003      	beq.n	800583a <TIM_Base_SetConfig+0xaa>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a2c      	ldr	r2, [pc, #176]	@ (80058e8 <TIM_Base_SetConfig+0x158>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d108      	bne.n	800584c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005840:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	4313      	orrs	r3, r2
 800584a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	4313      	orrs	r3, r2
 8005858:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	689a      	ldr	r2, [r3, #8]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a18      	ldr	r2, [pc, #96]	@ (80058d4 <TIM_Base_SetConfig+0x144>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d013      	beq.n	80058a0 <TIM_Base_SetConfig+0x110>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a1a      	ldr	r2, [pc, #104]	@ (80058e4 <TIM_Base_SetConfig+0x154>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d00f      	beq.n	80058a0 <TIM_Base_SetConfig+0x110>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a1a      	ldr	r2, [pc, #104]	@ (80058ec <TIM_Base_SetConfig+0x15c>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d00b      	beq.n	80058a0 <TIM_Base_SetConfig+0x110>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a19      	ldr	r2, [pc, #100]	@ (80058f0 <TIM_Base_SetConfig+0x160>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d007      	beq.n	80058a0 <TIM_Base_SetConfig+0x110>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a18      	ldr	r2, [pc, #96]	@ (80058f4 <TIM_Base_SetConfig+0x164>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d003      	beq.n	80058a0 <TIM_Base_SetConfig+0x110>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a13      	ldr	r2, [pc, #76]	@ (80058e8 <TIM_Base_SetConfig+0x158>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d103      	bne.n	80058a8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	691a      	ldr	r2, [r3, #16]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	f003 0301 	and.w	r3, r3, #1
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d105      	bne.n	80058c6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	f023 0201 	bic.w	r2, r3, #1
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	611a      	str	r2, [r3, #16]
  }
}
 80058c6:	bf00      	nop
 80058c8:	3714      	adds	r7, #20
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	40012c00 	.word	0x40012c00
 80058d8:	40000400 	.word	0x40000400
 80058dc:	40000800 	.word	0x40000800
 80058e0:	40000c00 	.word	0x40000c00
 80058e4:	40013400 	.word	0x40013400
 80058e8:	40015000 	.word	0x40015000
 80058ec:	40014000 	.word	0x40014000
 80058f0:	40014400 	.word	0x40014400
 80058f4:	40014800 	.word	0x40014800

080058f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b087      	sub	sp, #28
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a1b      	ldr	r3, [r3, #32]
 8005906:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a1b      	ldr	r3, [r3, #32]
 800590c:	f023 0201 	bic.w	r2, r3, #1
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005926:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800592a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f023 0303 	bic.w	r3, r3, #3
 8005932:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	4313      	orrs	r3, r2
 800593c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	f023 0302 	bic.w	r3, r3, #2
 8005944:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	697a      	ldr	r2, [r7, #20]
 800594c:	4313      	orrs	r3, r2
 800594e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a30      	ldr	r2, [pc, #192]	@ (8005a14 <TIM_OC1_SetConfig+0x11c>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d013      	beq.n	8005980 <TIM_OC1_SetConfig+0x88>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4a2f      	ldr	r2, [pc, #188]	@ (8005a18 <TIM_OC1_SetConfig+0x120>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d00f      	beq.n	8005980 <TIM_OC1_SetConfig+0x88>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4a2e      	ldr	r2, [pc, #184]	@ (8005a1c <TIM_OC1_SetConfig+0x124>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d00b      	beq.n	8005980 <TIM_OC1_SetConfig+0x88>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a2d      	ldr	r2, [pc, #180]	@ (8005a20 <TIM_OC1_SetConfig+0x128>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d007      	beq.n	8005980 <TIM_OC1_SetConfig+0x88>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a2c      	ldr	r2, [pc, #176]	@ (8005a24 <TIM_OC1_SetConfig+0x12c>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d003      	beq.n	8005980 <TIM_OC1_SetConfig+0x88>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a2b      	ldr	r2, [pc, #172]	@ (8005a28 <TIM_OC1_SetConfig+0x130>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d10c      	bne.n	800599a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	f023 0308 	bic.w	r3, r3, #8
 8005986:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	697a      	ldr	r2, [r7, #20]
 800598e:	4313      	orrs	r3, r2
 8005990:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	f023 0304 	bic.w	r3, r3, #4
 8005998:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a1d      	ldr	r2, [pc, #116]	@ (8005a14 <TIM_OC1_SetConfig+0x11c>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d013      	beq.n	80059ca <TIM_OC1_SetConfig+0xd2>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a1c      	ldr	r2, [pc, #112]	@ (8005a18 <TIM_OC1_SetConfig+0x120>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d00f      	beq.n	80059ca <TIM_OC1_SetConfig+0xd2>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a1b      	ldr	r2, [pc, #108]	@ (8005a1c <TIM_OC1_SetConfig+0x124>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d00b      	beq.n	80059ca <TIM_OC1_SetConfig+0xd2>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a1a      	ldr	r2, [pc, #104]	@ (8005a20 <TIM_OC1_SetConfig+0x128>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d007      	beq.n	80059ca <TIM_OC1_SetConfig+0xd2>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a19      	ldr	r2, [pc, #100]	@ (8005a24 <TIM_OC1_SetConfig+0x12c>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d003      	beq.n	80059ca <TIM_OC1_SetConfig+0xd2>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a18      	ldr	r2, [pc, #96]	@ (8005a28 <TIM_OC1_SetConfig+0x130>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d111      	bne.n	80059ee <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80059d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	695b      	ldr	r3, [r3, #20]
 80059de:	693a      	ldr	r2, [r7, #16]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	693a      	ldr	r2, [r7, #16]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	693a      	ldr	r2, [r7, #16]
 80059f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	685a      	ldr	r2, [r3, #4]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	697a      	ldr	r2, [r7, #20]
 8005a06:	621a      	str	r2, [r3, #32]
}
 8005a08:	bf00      	nop
 8005a0a:	371c      	adds	r7, #28
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr
 8005a14:	40012c00 	.word	0x40012c00
 8005a18:	40013400 	.word	0x40013400
 8005a1c:	40014000 	.word	0x40014000
 8005a20:	40014400 	.word	0x40014400
 8005a24:	40014800 	.word	0x40014800
 8005a28:	40015000 	.word	0x40015000

08005a2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b087      	sub	sp, #28
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6a1b      	ldr	r3, [r3, #32]
 8005a40:	f023 0210 	bic.w	r2, r3, #16
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	021b      	lsls	r3, r3, #8
 8005a6e:	68fa      	ldr	r2, [r7, #12]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	f023 0320 	bic.w	r3, r3, #32
 8005a7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	011b      	lsls	r3, r3, #4
 8005a82:	697a      	ldr	r2, [r7, #20]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a2c      	ldr	r2, [pc, #176]	@ (8005b3c <TIM_OC2_SetConfig+0x110>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d007      	beq.n	8005aa0 <TIM_OC2_SetConfig+0x74>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a2b      	ldr	r2, [pc, #172]	@ (8005b40 <TIM_OC2_SetConfig+0x114>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d003      	beq.n	8005aa0 <TIM_OC2_SetConfig+0x74>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a2a      	ldr	r2, [pc, #168]	@ (8005b44 <TIM_OC2_SetConfig+0x118>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d10d      	bne.n	8005abc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005aa6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	011b      	lsls	r3, r3, #4
 8005aae:	697a      	ldr	r2, [r7, #20]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005aba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a1f      	ldr	r2, [pc, #124]	@ (8005b3c <TIM_OC2_SetConfig+0x110>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d013      	beq.n	8005aec <TIM_OC2_SetConfig+0xc0>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a1e      	ldr	r2, [pc, #120]	@ (8005b40 <TIM_OC2_SetConfig+0x114>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d00f      	beq.n	8005aec <TIM_OC2_SetConfig+0xc0>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a1e      	ldr	r2, [pc, #120]	@ (8005b48 <TIM_OC2_SetConfig+0x11c>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d00b      	beq.n	8005aec <TIM_OC2_SetConfig+0xc0>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a1d      	ldr	r2, [pc, #116]	@ (8005b4c <TIM_OC2_SetConfig+0x120>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d007      	beq.n	8005aec <TIM_OC2_SetConfig+0xc0>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a1c      	ldr	r2, [pc, #112]	@ (8005b50 <TIM_OC2_SetConfig+0x124>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d003      	beq.n	8005aec <TIM_OC2_SetConfig+0xc0>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a17      	ldr	r2, [pc, #92]	@ (8005b44 <TIM_OC2_SetConfig+0x118>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d113      	bne.n	8005b14 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005af2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005afa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	695b      	ldr	r3, [r3, #20]
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	693a      	ldr	r2, [r7, #16]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	699b      	ldr	r3, [r3, #24]
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	693a      	ldr	r2, [r7, #16]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	693a      	ldr	r2, [r7, #16]
 8005b18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	685a      	ldr	r2, [r3, #4]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	621a      	str	r2, [r3, #32]
}
 8005b2e:	bf00      	nop
 8005b30:	371c      	adds	r7, #28
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	40012c00 	.word	0x40012c00
 8005b40:	40013400 	.word	0x40013400
 8005b44:	40015000 	.word	0x40015000
 8005b48:	40014000 	.word	0x40014000
 8005b4c:	40014400 	.word	0x40014400
 8005b50:	40014800 	.word	0x40014800

08005b54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b087      	sub	sp, #28
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a1b      	ldr	r3, [r3, #32]
 8005b62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6a1b      	ldr	r3, [r3, #32]
 8005b68:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	69db      	ldr	r3, [r3, #28]
 8005b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f023 0303 	bic.w	r3, r3, #3
 8005b8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ba0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	021b      	lsls	r3, r3, #8
 8005ba8:	697a      	ldr	r2, [r7, #20]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a2b      	ldr	r2, [pc, #172]	@ (8005c60 <TIM_OC3_SetConfig+0x10c>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d007      	beq.n	8005bc6 <TIM_OC3_SetConfig+0x72>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a2a      	ldr	r2, [pc, #168]	@ (8005c64 <TIM_OC3_SetConfig+0x110>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d003      	beq.n	8005bc6 <TIM_OC3_SetConfig+0x72>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a29      	ldr	r2, [pc, #164]	@ (8005c68 <TIM_OC3_SetConfig+0x114>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d10d      	bne.n	8005be2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005bcc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	021b      	lsls	r3, r3, #8
 8005bd4:	697a      	ldr	r2, [r7, #20]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005be0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a1e      	ldr	r2, [pc, #120]	@ (8005c60 <TIM_OC3_SetConfig+0x10c>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d013      	beq.n	8005c12 <TIM_OC3_SetConfig+0xbe>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a1d      	ldr	r2, [pc, #116]	@ (8005c64 <TIM_OC3_SetConfig+0x110>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d00f      	beq.n	8005c12 <TIM_OC3_SetConfig+0xbe>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a1d      	ldr	r2, [pc, #116]	@ (8005c6c <TIM_OC3_SetConfig+0x118>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d00b      	beq.n	8005c12 <TIM_OC3_SetConfig+0xbe>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a1c      	ldr	r2, [pc, #112]	@ (8005c70 <TIM_OC3_SetConfig+0x11c>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d007      	beq.n	8005c12 <TIM_OC3_SetConfig+0xbe>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a1b      	ldr	r2, [pc, #108]	@ (8005c74 <TIM_OC3_SetConfig+0x120>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d003      	beq.n	8005c12 <TIM_OC3_SetConfig+0xbe>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a16      	ldr	r2, [pc, #88]	@ (8005c68 <TIM_OC3_SetConfig+0x114>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d113      	bne.n	8005c3a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	695b      	ldr	r3, [r3, #20]
 8005c26:	011b      	lsls	r3, r3, #4
 8005c28:	693a      	ldr	r2, [r7, #16]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	699b      	ldr	r3, [r3, #24]
 8005c32:	011b      	lsls	r3, r3, #4
 8005c34:	693a      	ldr	r2, [r7, #16]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	693a      	ldr	r2, [r7, #16]
 8005c3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	685a      	ldr	r2, [r3, #4]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	697a      	ldr	r2, [r7, #20]
 8005c52:	621a      	str	r2, [r3, #32]
}
 8005c54:	bf00      	nop
 8005c56:	371c      	adds	r7, #28
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr
 8005c60:	40012c00 	.word	0x40012c00
 8005c64:	40013400 	.word	0x40013400
 8005c68:	40015000 	.word	0x40015000
 8005c6c:	40014000 	.word	0x40014000
 8005c70:	40014400 	.word	0x40014400
 8005c74:	40014800 	.word	0x40014800

08005c78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b087      	sub	sp, #28
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a1b      	ldr	r3, [r3, #32]
 8005c86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6a1b      	ldr	r3, [r3, #32]
 8005c8c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	69db      	ldr	r3, [r3, #28]
 8005c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ca6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005caa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	021b      	lsls	r3, r3, #8
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005cc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	031b      	lsls	r3, r3, #12
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a2c      	ldr	r2, [pc, #176]	@ (8005d88 <TIM_OC4_SetConfig+0x110>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d007      	beq.n	8005cec <TIM_OC4_SetConfig+0x74>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a2b      	ldr	r2, [pc, #172]	@ (8005d8c <TIM_OC4_SetConfig+0x114>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d003      	beq.n	8005cec <TIM_OC4_SetConfig+0x74>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a2a      	ldr	r2, [pc, #168]	@ (8005d90 <TIM_OC4_SetConfig+0x118>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d10d      	bne.n	8005d08 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005cf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	031b      	lsls	r3, r3, #12
 8005cfa:	697a      	ldr	r2, [r7, #20]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d06:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a1f      	ldr	r2, [pc, #124]	@ (8005d88 <TIM_OC4_SetConfig+0x110>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d013      	beq.n	8005d38 <TIM_OC4_SetConfig+0xc0>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a1e      	ldr	r2, [pc, #120]	@ (8005d8c <TIM_OC4_SetConfig+0x114>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d00f      	beq.n	8005d38 <TIM_OC4_SetConfig+0xc0>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a1e      	ldr	r2, [pc, #120]	@ (8005d94 <TIM_OC4_SetConfig+0x11c>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d00b      	beq.n	8005d38 <TIM_OC4_SetConfig+0xc0>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a1d      	ldr	r2, [pc, #116]	@ (8005d98 <TIM_OC4_SetConfig+0x120>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d007      	beq.n	8005d38 <TIM_OC4_SetConfig+0xc0>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a1c      	ldr	r2, [pc, #112]	@ (8005d9c <TIM_OC4_SetConfig+0x124>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d003      	beq.n	8005d38 <TIM_OC4_SetConfig+0xc0>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a17      	ldr	r2, [pc, #92]	@ (8005d90 <TIM_OC4_SetConfig+0x118>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d113      	bne.n	8005d60 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d3e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005d46:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	695b      	ldr	r3, [r3, #20]
 8005d4c:	019b      	lsls	r3, r3, #6
 8005d4e:	693a      	ldr	r2, [r7, #16]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	699b      	ldr	r3, [r3, #24]
 8005d58:	019b      	lsls	r3, r3, #6
 8005d5a:	693a      	ldr	r2, [r7, #16]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	693a      	ldr	r2, [r7, #16]
 8005d64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	685a      	ldr	r2, [r3, #4]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	621a      	str	r2, [r3, #32]
}
 8005d7a:	bf00      	nop
 8005d7c:	371c      	adds	r7, #28
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop
 8005d88:	40012c00 	.word	0x40012c00
 8005d8c:	40013400 	.word	0x40013400
 8005d90:	40015000 	.word	0x40015000
 8005d94:	40014000 	.word	0x40014000
 8005d98:	40014400 	.word	0x40014400
 8005d9c:	40014800 	.word	0x40014800

08005da0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b087      	sub	sp, #28
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6a1b      	ldr	r3, [r3, #32]
 8005db4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005dce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005de4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	041b      	lsls	r3, r3, #16
 8005dec:	693a      	ldr	r2, [r7, #16]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a19      	ldr	r2, [pc, #100]	@ (8005e5c <TIM_OC5_SetConfig+0xbc>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d013      	beq.n	8005e22 <TIM_OC5_SetConfig+0x82>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a18      	ldr	r2, [pc, #96]	@ (8005e60 <TIM_OC5_SetConfig+0xc0>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d00f      	beq.n	8005e22 <TIM_OC5_SetConfig+0x82>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a17      	ldr	r2, [pc, #92]	@ (8005e64 <TIM_OC5_SetConfig+0xc4>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d00b      	beq.n	8005e22 <TIM_OC5_SetConfig+0x82>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a16      	ldr	r2, [pc, #88]	@ (8005e68 <TIM_OC5_SetConfig+0xc8>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d007      	beq.n	8005e22 <TIM_OC5_SetConfig+0x82>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a15      	ldr	r2, [pc, #84]	@ (8005e6c <TIM_OC5_SetConfig+0xcc>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d003      	beq.n	8005e22 <TIM_OC5_SetConfig+0x82>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a14      	ldr	r2, [pc, #80]	@ (8005e70 <TIM_OC5_SetConfig+0xd0>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d109      	bne.n	8005e36 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e28:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	695b      	ldr	r3, [r3, #20]
 8005e2e:	021b      	lsls	r3, r3, #8
 8005e30:	697a      	ldr	r2, [r7, #20]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	697a      	ldr	r2, [r7, #20]
 8005e3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	685a      	ldr	r2, [r3, #4]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	693a      	ldr	r2, [r7, #16]
 8005e4e:	621a      	str	r2, [r3, #32]
}
 8005e50:	bf00      	nop
 8005e52:	371c      	adds	r7, #28
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr
 8005e5c:	40012c00 	.word	0x40012c00
 8005e60:	40013400 	.word	0x40013400
 8005e64:	40014000 	.word	0x40014000
 8005e68:	40014400 	.word	0x40014400
 8005e6c:	40014800 	.word	0x40014800
 8005e70:	40015000 	.word	0x40015000

08005e74 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b087      	sub	sp, #28
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a1b      	ldr	r3, [r3, #32]
 8005e82:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a1b      	ldr	r3, [r3, #32]
 8005e88:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ea2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ea6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	021b      	lsls	r3, r3, #8
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005eba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	051b      	lsls	r3, r3, #20
 8005ec2:	693a      	ldr	r2, [r7, #16]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a1a      	ldr	r2, [pc, #104]	@ (8005f34 <TIM_OC6_SetConfig+0xc0>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d013      	beq.n	8005ef8 <TIM_OC6_SetConfig+0x84>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4a19      	ldr	r2, [pc, #100]	@ (8005f38 <TIM_OC6_SetConfig+0xc4>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d00f      	beq.n	8005ef8 <TIM_OC6_SetConfig+0x84>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a18      	ldr	r2, [pc, #96]	@ (8005f3c <TIM_OC6_SetConfig+0xc8>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d00b      	beq.n	8005ef8 <TIM_OC6_SetConfig+0x84>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4a17      	ldr	r2, [pc, #92]	@ (8005f40 <TIM_OC6_SetConfig+0xcc>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d007      	beq.n	8005ef8 <TIM_OC6_SetConfig+0x84>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4a16      	ldr	r2, [pc, #88]	@ (8005f44 <TIM_OC6_SetConfig+0xd0>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d003      	beq.n	8005ef8 <TIM_OC6_SetConfig+0x84>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a15      	ldr	r2, [pc, #84]	@ (8005f48 <TIM_OC6_SetConfig+0xd4>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d109      	bne.n	8005f0c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005efe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	695b      	ldr	r3, [r3, #20]
 8005f04:	029b      	lsls	r3, r3, #10
 8005f06:	697a      	ldr	r2, [r7, #20]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	685a      	ldr	r2, [r3, #4]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	621a      	str	r2, [r3, #32]
}
 8005f26:	bf00      	nop
 8005f28:	371c      	adds	r7, #28
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
 8005f32:	bf00      	nop
 8005f34:	40012c00 	.word	0x40012c00
 8005f38:	40013400 	.word	0x40013400
 8005f3c:	40014000 	.word	0x40014000
 8005f40:	40014400 	.word	0x40014400
 8005f44:	40014800 	.word	0x40014800
 8005f48:	40015000 	.word	0x40015000

08005f4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b087      	sub	sp, #28
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6a1b      	ldr	r3, [r3, #32]
 8005f5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6a1b      	ldr	r3, [r3, #32]
 8005f62:	f023 0201 	bic.w	r2, r3, #1
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	699b      	ldr	r3, [r3, #24]
 8005f6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	011b      	lsls	r3, r3, #4
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	f023 030a 	bic.w	r3, r3, #10
 8005f88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	693a      	ldr	r2, [r7, #16]
 8005f96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	697a      	ldr	r2, [r7, #20]
 8005f9c:	621a      	str	r2, [r3, #32]
}
 8005f9e:	bf00      	nop
 8005fa0:	371c      	adds	r7, #28
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr

08005faa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005faa:	b480      	push	{r7}
 8005fac:	b087      	sub	sp, #28
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	60f8      	str	r0, [r7, #12]
 8005fb2:	60b9      	str	r1, [r7, #8]
 8005fb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6a1b      	ldr	r3, [r3, #32]
 8005fba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6a1b      	ldr	r3, [r3, #32]
 8005fc0:	f023 0210 	bic.w	r2, r3, #16
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	699b      	ldr	r3, [r3, #24]
 8005fcc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005fd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	031b      	lsls	r3, r3, #12
 8005fda:	693a      	ldr	r2, [r7, #16]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005fe6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	011b      	lsls	r3, r3, #4
 8005fec:	697a      	ldr	r2, [r7, #20]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	693a      	ldr	r2, [r7, #16]
 8005ff6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	697a      	ldr	r2, [r7, #20]
 8005ffc:	621a      	str	r2, [r3, #32]
}
 8005ffe:	bf00      	nop
 8006000:	371c      	adds	r7, #28
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr

0800600a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800600a:	b480      	push	{r7}
 800600c:	b085      	sub	sp, #20
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
 8006012:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006020:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006024:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006026:	683a      	ldr	r2, [r7, #0]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	4313      	orrs	r3, r2
 800602c:	f043 0307 	orr.w	r3, r3, #7
 8006030:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	609a      	str	r2, [r3, #8]
}
 8006038:	bf00      	nop
 800603a:	3714      	adds	r7, #20
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006044:	b480      	push	{r7}
 8006046:	b087      	sub	sp, #28
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	607a      	str	r2, [r7, #4]
 8006050:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800605e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	021a      	lsls	r2, r3, #8
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	431a      	orrs	r2, r3
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	4313      	orrs	r3, r2
 800606c:	697a      	ldr	r2, [r7, #20]
 800606e:	4313      	orrs	r3, r2
 8006070:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	697a      	ldr	r2, [r7, #20]
 8006076:	609a      	str	r2, [r3, #8]
}
 8006078:	bf00      	nop
 800607a:	371c      	adds	r7, #28
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006084:	b480      	push	{r7}
 8006086:	b087      	sub	sp, #28
 8006088:	af00      	add	r7, sp, #0
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	f003 031f 	and.w	r3, r3, #31
 8006096:	2201      	movs	r2, #1
 8006098:	fa02 f303 	lsl.w	r3, r2, r3
 800609c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6a1a      	ldr	r2, [r3, #32]
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	43db      	mvns	r3, r3
 80060a6:	401a      	ands	r2, r3
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6a1a      	ldr	r2, [r3, #32]
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	f003 031f 	and.w	r3, r3, #31
 80060b6:	6879      	ldr	r1, [r7, #4]
 80060b8:	fa01 f303 	lsl.w	r3, r1, r3
 80060bc:	431a      	orrs	r2, r3
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	621a      	str	r2, [r3, #32]
}
 80060c2:	bf00      	nop
 80060c4:	371c      	adds	r7, #28
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr
	...

080060d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d101      	bne.n	80060e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060e4:	2302      	movs	r3, #2
 80060e6:	e074      	b.n	80061d2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2202      	movs	r2, #2
 80060f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a34      	ldr	r2, [pc, #208]	@ (80061e0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d009      	beq.n	8006126 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a33      	ldr	r2, [pc, #204]	@ (80061e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d004      	beq.n	8006126 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a31      	ldr	r2, [pc, #196]	@ (80061e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d108      	bne.n	8006138 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800612c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	4313      	orrs	r3, r2
 8006136:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800613e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006142:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	68fa      	ldr	r2, [r7, #12]
 800614a:	4313      	orrs	r3, r2
 800614c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68fa      	ldr	r2, [r7, #12]
 8006154:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a21      	ldr	r2, [pc, #132]	@ (80061e0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d022      	beq.n	80061a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006168:	d01d      	beq.n	80061a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a1f      	ldr	r2, [pc, #124]	@ (80061ec <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d018      	beq.n	80061a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a1d      	ldr	r2, [pc, #116]	@ (80061f0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d013      	beq.n	80061a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a1c      	ldr	r2, [pc, #112]	@ (80061f4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d00e      	beq.n	80061a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a15      	ldr	r2, [pc, #84]	@ (80061e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d009      	beq.n	80061a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a18      	ldr	r2, [pc, #96]	@ (80061f8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d004      	beq.n	80061a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a11      	ldr	r2, [pc, #68]	@ (80061e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d10c      	bne.n	80061c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	68ba      	ldr	r2, [r7, #8]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	68ba      	ldr	r2, [r7, #8]
 80061be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3714      	adds	r7, #20
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	40012c00 	.word	0x40012c00
 80061e4:	40013400 	.word	0x40013400
 80061e8:	40015000 	.word	0x40015000
 80061ec:	40000400 	.word	0x40000400
 80061f0:	40000800 	.word	0x40000800
 80061f4:	40000c00 	.word	0x40000c00
 80061f8:	40014000 	.word	0x40014000

080061fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b085      	sub	sp, #20
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006206:	2300      	movs	r3, #0
 8006208:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006210:	2b01      	cmp	r3, #1
 8006212:	d101      	bne.n	8006218 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006214:	2302      	movs	r3, #2
 8006216:	e078      	b.n	800630a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	4313      	orrs	r3, r2
 800622c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	4313      	orrs	r3, r2
 800623a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	4313      	orrs	r3, r2
 8006248:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4313      	orrs	r3, r2
 8006256:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	4313      	orrs	r3, r2
 8006264:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	695b      	ldr	r3, [r3, #20]
 8006270:	4313      	orrs	r3, r2
 8006272:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800627e:	4313      	orrs	r3, r2
 8006280:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	699b      	ldr	r3, [r3, #24]
 800628c:	041b      	lsls	r3, r3, #16
 800628e:	4313      	orrs	r3, r2
 8006290:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	69db      	ldr	r3, [r3, #28]
 800629c:	4313      	orrs	r3, r2
 800629e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a1c      	ldr	r2, [pc, #112]	@ (8006318 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d009      	beq.n	80062be <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a1b      	ldr	r2, [pc, #108]	@ (800631c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d004      	beq.n	80062be <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a19      	ldr	r2, [pc, #100]	@ (8006320 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d11c      	bne.n	80062f8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062c8:	051b      	lsls	r3, r3, #20
 80062ca:	4313      	orrs	r3, r2
 80062cc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	6a1b      	ldr	r3, [r3, #32]
 80062d8:	4313      	orrs	r3, r2
 80062da:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e6:	4313      	orrs	r3, r2
 80062e8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062f4:	4313      	orrs	r3, r2
 80062f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68fa      	ldr	r2, [r7, #12]
 80062fe:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3714      	adds	r7, #20
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop
 8006318:	40012c00 	.word	0x40012c00
 800631c:	40013400 	.word	0x40013400
 8006320:	40015000 	.word	0x40015000

08006324 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800632c:	bf00      	nop
 800632e:	370c      	adds	r7, #12
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006340:	bf00      	nop
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006354:	bf00      	nop
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006368:	bf00      	nop
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800637c:	bf00      	nop
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006390:	bf00      	nop
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80063a4:	bf00      	nop
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d101      	bne.n	80063c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	e042      	b.n	8006448 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d106      	bne.n	80063da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f7fb fda3 	bl	8001f20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2224      	movs	r2, #36	@ 0x24
 80063de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f022 0201 	bic.w	r2, r2, #1
 80063f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d002      	beq.n	8006400 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 ffbe 	bl	800737c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 fcbf 	bl	8006d84 <UART_SetConfig>
 8006406:	4603      	mov	r3, r0
 8006408:	2b01      	cmp	r3, #1
 800640a:	d101      	bne.n	8006410 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	e01b      	b.n	8006448 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	685a      	ldr	r2, [r3, #4]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800641e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	689a      	ldr	r2, [r3, #8]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800642e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f042 0201 	orr.w	r2, r2, #1
 800643e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f001 f83d 	bl	80074c0 <UART_CheckIdleState>
 8006446:	4603      	mov	r3, r0
}
 8006448:	4618      	mov	r0, r3
 800644a:	3708      	adds	r7, #8
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b08a      	sub	sp, #40	@ 0x28
 8006454:	af02      	add	r7, sp, #8
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	603b      	str	r3, [r7, #0]
 800645c:	4613      	mov	r3, r2
 800645e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006466:	2b20      	cmp	r3, #32
 8006468:	d17b      	bne.n	8006562 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d002      	beq.n	8006476 <HAL_UART_Transmit+0x26>
 8006470:	88fb      	ldrh	r3, [r7, #6]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d101      	bne.n	800647a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e074      	b.n	8006564 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2221      	movs	r2, #33	@ 0x21
 8006486:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800648a:	f7fb ffa7 	bl	80023dc <HAL_GetTick>
 800648e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	88fa      	ldrh	r2, [r7, #6]
 8006494:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	88fa      	ldrh	r2, [r7, #6]
 800649c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064a8:	d108      	bne.n	80064bc <HAL_UART_Transmit+0x6c>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d104      	bne.n	80064bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80064b2:	2300      	movs	r3, #0
 80064b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	61bb      	str	r3, [r7, #24]
 80064ba:	e003      	b.n	80064c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064c0:	2300      	movs	r3, #0
 80064c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80064c4:	e030      	b.n	8006528 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	9300      	str	r3, [sp, #0]
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	2200      	movs	r2, #0
 80064ce:	2180      	movs	r1, #128	@ 0x80
 80064d0:	68f8      	ldr	r0, [r7, #12]
 80064d2:	f001 f89f 	bl	8007614 <UART_WaitOnFlagUntilTimeout>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d005      	beq.n	80064e8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2220      	movs	r2, #32
 80064e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80064e4:	2303      	movs	r3, #3
 80064e6:	e03d      	b.n	8006564 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d10b      	bne.n	8006506 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	881b      	ldrh	r3, [r3, #0]
 80064f2:	461a      	mov	r2, r3
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064fc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	3302      	adds	r3, #2
 8006502:	61bb      	str	r3, [r7, #24]
 8006504:	e007      	b.n	8006516 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	781a      	ldrb	r2, [r3, #0]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	3301      	adds	r3, #1
 8006514:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800651c:	b29b      	uxth	r3, r3
 800651e:	3b01      	subs	r3, #1
 8006520:	b29a      	uxth	r2, r3
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800652e:	b29b      	uxth	r3, r3
 8006530:	2b00      	cmp	r3, #0
 8006532:	d1c8      	bne.n	80064c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	9300      	str	r3, [sp, #0]
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	2200      	movs	r2, #0
 800653c:	2140      	movs	r1, #64	@ 0x40
 800653e:	68f8      	ldr	r0, [r7, #12]
 8006540:	f001 f868 	bl	8007614 <UART_WaitOnFlagUntilTimeout>
 8006544:	4603      	mov	r3, r0
 8006546:	2b00      	cmp	r3, #0
 8006548:	d005      	beq.n	8006556 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2220      	movs	r2, #32
 800654e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006552:	2303      	movs	r3, #3
 8006554:	e006      	b.n	8006564 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2220      	movs	r2, #32
 800655a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800655e:	2300      	movs	r3, #0
 8006560:	e000      	b.n	8006564 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006562:	2302      	movs	r3, #2
  }
}
 8006564:	4618      	mov	r0, r3
 8006566:	3720      	adds	r7, #32
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b08a      	sub	sp, #40	@ 0x28
 8006570:	af02      	add	r7, sp, #8
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	603b      	str	r3, [r7, #0]
 8006578:	4613      	mov	r3, r2
 800657a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006582:	2b20      	cmp	r3, #32
 8006584:	f040 80b5 	bne.w	80066f2 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d002      	beq.n	8006594 <HAL_UART_Receive+0x28>
 800658e:	88fb      	ldrh	r3, [r7, #6]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d101      	bne.n	8006598 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	e0ad      	b.n	80066f4 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2200      	movs	r2, #0
 800659c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2222      	movs	r2, #34	@ 0x22
 80065a4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2200      	movs	r2, #0
 80065ac:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065ae:	f7fb ff15 	bl	80023dc <HAL_GetTick>
 80065b2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	88fa      	ldrh	r2, [r7, #6]
 80065b8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	88fa      	ldrh	r2, [r7, #6]
 80065c0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065cc:	d10e      	bne.n	80065ec <HAL_UART_Receive+0x80>
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d105      	bne.n	80065e2 <HAL_UART_Receive+0x76>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80065dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80065e0:	e02d      	b.n	800663e <HAL_UART_Receive+0xd2>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	22ff      	movs	r2, #255	@ 0xff
 80065e6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80065ea:	e028      	b.n	800663e <HAL_UART_Receive+0xd2>
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d10d      	bne.n	8006610 <HAL_UART_Receive+0xa4>
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	691b      	ldr	r3, [r3, #16]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d104      	bne.n	8006606 <HAL_UART_Receive+0x9a>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	22ff      	movs	r2, #255	@ 0xff
 8006600:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006604:	e01b      	b.n	800663e <HAL_UART_Receive+0xd2>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	227f      	movs	r2, #127	@ 0x7f
 800660a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800660e:	e016      	b.n	800663e <HAL_UART_Receive+0xd2>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006618:	d10d      	bne.n	8006636 <HAL_UART_Receive+0xca>
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d104      	bne.n	800662c <HAL_UART_Receive+0xc0>
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	227f      	movs	r2, #127	@ 0x7f
 8006626:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800662a:	e008      	b.n	800663e <HAL_UART_Receive+0xd2>
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	223f      	movs	r2, #63	@ 0x3f
 8006630:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006634:	e003      	b.n	800663e <HAL_UART_Receive+0xd2>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006644:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800664e:	d108      	bne.n	8006662 <HAL_UART_Receive+0xf6>
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	691b      	ldr	r3, [r3, #16]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d104      	bne.n	8006662 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006658:	2300      	movs	r3, #0
 800665a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	61bb      	str	r3, [r7, #24]
 8006660:	e003      	b.n	800666a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006666:	2300      	movs	r3, #0
 8006668:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800666a:	e036      	b.n	80066da <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	9300      	str	r3, [sp, #0]
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	2200      	movs	r2, #0
 8006674:	2120      	movs	r1, #32
 8006676:	68f8      	ldr	r0, [r7, #12]
 8006678:	f000 ffcc 	bl	8007614 <UART_WaitOnFlagUntilTimeout>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d005      	beq.n	800668e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2220      	movs	r2, #32
 8006686:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800668a:	2303      	movs	r3, #3
 800668c:	e032      	b.n	80066f4 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d10c      	bne.n	80066ae <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800669a:	b29a      	uxth	r2, r3
 800669c:	8a7b      	ldrh	r3, [r7, #18]
 800669e:	4013      	ands	r3, r2
 80066a0:	b29a      	uxth	r2, r3
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	3302      	adds	r3, #2
 80066aa:	61bb      	str	r3, [r7, #24]
 80066ac:	e00c      	b.n	80066c8 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066b4:	b2da      	uxtb	r2, r3
 80066b6:	8a7b      	ldrh	r3, [r7, #18]
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	4013      	ands	r3, r2
 80066bc:	b2da      	uxtb	r2, r3
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	3301      	adds	r3, #1
 80066c6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	3b01      	subs	r3, #1
 80066d2:	b29a      	uxth	r2, r3
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d1c2      	bne.n	800666c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2220      	movs	r2, #32
 80066ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80066ee:	2300      	movs	r3, #0
 80066f0:	e000      	b.n	80066f4 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80066f2:	2302      	movs	r3, #2
  }
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3720      	adds	r7, #32
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b0ba      	sub	sp, #232	@ 0xe8
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	69db      	ldr	r3, [r3, #28]
 800670a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006722:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006726:	f640 030f 	movw	r3, #2063	@ 0x80f
 800672a:	4013      	ands	r3, r2
 800672c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006730:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006734:	2b00      	cmp	r3, #0
 8006736:	d11b      	bne.n	8006770 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800673c:	f003 0320 	and.w	r3, r3, #32
 8006740:	2b00      	cmp	r3, #0
 8006742:	d015      	beq.n	8006770 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006748:	f003 0320 	and.w	r3, r3, #32
 800674c:	2b00      	cmp	r3, #0
 800674e:	d105      	bne.n	800675c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006750:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006754:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006758:	2b00      	cmp	r3, #0
 800675a:	d009      	beq.n	8006770 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006760:	2b00      	cmp	r3, #0
 8006762:	f000 82e3 	beq.w	8006d2c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	4798      	blx	r3
      }
      return;
 800676e:	e2dd      	b.n	8006d2c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006770:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006774:	2b00      	cmp	r3, #0
 8006776:	f000 8123 	beq.w	80069c0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800677a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800677e:	4b8d      	ldr	r3, [pc, #564]	@ (80069b4 <HAL_UART_IRQHandler+0x2b8>)
 8006780:	4013      	ands	r3, r2
 8006782:	2b00      	cmp	r3, #0
 8006784:	d106      	bne.n	8006794 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006786:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800678a:	4b8b      	ldr	r3, [pc, #556]	@ (80069b8 <HAL_UART_IRQHandler+0x2bc>)
 800678c:	4013      	ands	r3, r2
 800678e:	2b00      	cmp	r3, #0
 8006790:	f000 8116 	beq.w	80069c0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006798:	f003 0301 	and.w	r3, r3, #1
 800679c:	2b00      	cmp	r3, #0
 800679e:	d011      	beq.n	80067c4 <HAL_UART_IRQHandler+0xc8>
 80067a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d00b      	beq.n	80067c4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2201      	movs	r2, #1
 80067b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067ba:	f043 0201 	orr.w	r2, r3, #1
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80067c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067c8:	f003 0302 	and.w	r3, r3, #2
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d011      	beq.n	80067f4 <HAL_UART_IRQHandler+0xf8>
 80067d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067d4:	f003 0301 	and.w	r3, r3, #1
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d00b      	beq.n	80067f4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2202      	movs	r2, #2
 80067e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067ea:	f043 0204 	orr.w	r2, r3, #4
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80067f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067f8:	f003 0304 	and.w	r3, r3, #4
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d011      	beq.n	8006824 <HAL_UART_IRQHandler+0x128>
 8006800:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006804:	f003 0301 	and.w	r3, r3, #1
 8006808:	2b00      	cmp	r3, #0
 800680a:	d00b      	beq.n	8006824 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2204      	movs	r2, #4
 8006812:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800681a:	f043 0202 	orr.w	r2, r3, #2
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006828:	f003 0308 	and.w	r3, r3, #8
 800682c:	2b00      	cmp	r3, #0
 800682e:	d017      	beq.n	8006860 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006834:	f003 0320 	and.w	r3, r3, #32
 8006838:	2b00      	cmp	r3, #0
 800683a:	d105      	bne.n	8006848 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800683c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006840:	4b5c      	ldr	r3, [pc, #368]	@ (80069b4 <HAL_UART_IRQHandler+0x2b8>)
 8006842:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006844:	2b00      	cmp	r3, #0
 8006846:	d00b      	beq.n	8006860 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2208      	movs	r2, #8
 800684e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006856:	f043 0208 	orr.w	r2, r3, #8
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006860:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006864:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006868:	2b00      	cmp	r3, #0
 800686a:	d012      	beq.n	8006892 <HAL_UART_IRQHandler+0x196>
 800686c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006870:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00c      	beq.n	8006892 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006880:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006888:	f043 0220 	orr.w	r2, r3, #32
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006898:	2b00      	cmp	r3, #0
 800689a:	f000 8249 	beq.w	8006d30 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800689e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068a2:	f003 0320 	and.w	r3, r3, #32
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d013      	beq.n	80068d2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80068aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068ae:	f003 0320 	and.w	r3, r3, #32
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d105      	bne.n	80068c2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80068b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d007      	beq.n	80068d2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d003      	beq.n	80068d2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068d8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068e6:	2b40      	cmp	r3, #64	@ 0x40
 80068e8:	d005      	beq.n	80068f6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80068ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80068ee:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d054      	beq.n	80069a0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 fef9 	bl	80076ee <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006906:	2b40      	cmp	r3, #64	@ 0x40
 8006908:	d146      	bne.n	8006998 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	3308      	adds	r3, #8
 8006910:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006914:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006918:	e853 3f00 	ldrex	r3, [r3]
 800691c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006920:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006924:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006928:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	3308      	adds	r3, #8
 8006932:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006936:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800693a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006942:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006946:	e841 2300 	strex	r3, r2, [r1]
 800694a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800694e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1d9      	bne.n	800690a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800695c:	2b00      	cmp	r3, #0
 800695e:	d017      	beq.n	8006990 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006966:	4a15      	ldr	r2, [pc, #84]	@ (80069bc <HAL_UART_IRQHandler+0x2c0>)
 8006968:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006970:	4618      	mov	r0, r3
 8006972:	f7fb fec9 	bl	8002708 <HAL_DMA_Abort_IT>
 8006976:	4603      	mov	r3, r0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d019      	beq.n	80069b0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800698a:	4610      	mov	r0, r2
 800698c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800698e:	e00f      	b.n	80069b0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 f9e1 	bl	8006d58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006996:	e00b      	b.n	80069b0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 f9dd 	bl	8006d58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800699e:	e007      	b.n	80069b0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 f9d9 	bl	8006d58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80069ae:	e1bf      	b.n	8006d30 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069b0:	bf00      	nop
    return;
 80069b2:	e1bd      	b.n	8006d30 <HAL_UART_IRQHandler+0x634>
 80069b4:	10000001 	.word	0x10000001
 80069b8:	04000120 	.word	0x04000120
 80069bc:	080077bb 	.word	0x080077bb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	f040 8153 	bne.w	8006c70 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80069ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069ce:	f003 0310 	and.w	r3, r3, #16
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	f000 814c 	beq.w	8006c70 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80069d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069dc:	f003 0310 	and.w	r3, r3, #16
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	f000 8145 	beq.w	8006c70 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2210      	movs	r2, #16
 80069ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069f8:	2b40      	cmp	r3, #64	@ 0x40
 80069fa:	f040 80bb 	bne.w	8006b74 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a0c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	f000 818f 	beq.w	8006d34 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006a1c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006a20:	429a      	cmp	r2, r3
 8006a22:	f080 8187 	bcs.w	8006d34 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006a2c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 0320 	and.w	r3, r3, #32
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	f040 8087 	bne.w	8006b52 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006a50:	e853 3f00 	ldrex	r3, [r3]
 8006a54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006a58:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006a5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a60:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	461a      	mov	r2, r3
 8006a6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006a6e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006a72:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a76:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006a7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006a7e:	e841 2300 	strex	r3, r2, [r1]
 8006a82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006a86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d1da      	bne.n	8006a44 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	3308      	adds	r3, #8
 8006a94:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a96:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006a98:	e853 3f00 	ldrex	r3, [r3]
 8006a9c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006a9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006aa0:	f023 0301 	bic.w	r3, r3, #1
 8006aa4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	3308      	adds	r3, #8
 8006aae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006ab2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006ab6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006aba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006abe:	e841 2300 	strex	r3, r2, [r1]
 8006ac2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006ac4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d1e1      	bne.n	8006a8e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	3308      	adds	r3, #8
 8006ad0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ad4:	e853 3f00 	ldrex	r3, [r3]
 8006ad8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006ada:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006adc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ae0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	3308      	adds	r3, #8
 8006aea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006aee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006af0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006af4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006af6:	e841 2300 	strex	r3, r2, [r1]
 8006afa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006afc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d1e3      	bne.n	8006aca <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2220      	movs	r2, #32
 8006b06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b18:	e853 3f00 	ldrex	r3, [r3]
 8006b1c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006b1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b20:	f023 0310 	bic.w	r3, r3, #16
 8006b24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b32:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b34:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b36:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006b38:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006b3a:	e841 2300 	strex	r3, r2, [r1]
 8006b3e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006b40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d1e4      	bne.n	8006b10 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f7fb fd82 	bl	8002656 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2202      	movs	r2, #2
 8006b56:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	1ad3      	subs	r3, r2, r3
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 f8fd 	bl	8006d6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006b72:	e0df      	b.n	8006d34 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	1ad3      	subs	r3, r2, r3
 8006b84:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	f000 80d1 	beq.w	8006d38 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8006b96:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	f000 80cc 	beq.w	8006d38 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ba8:	e853 3f00 	ldrex	r3, [r3]
 8006bac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006bae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bb0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006bb4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006bc2:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bc4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006bc8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006bca:	e841 2300 	strex	r3, r2, [r1]
 8006bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006bd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1e4      	bne.n	8006ba0 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	3308      	adds	r3, #8
 8006bdc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be0:	e853 3f00 	ldrex	r3, [r3]
 8006be4:	623b      	str	r3, [r7, #32]
   return(result);
 8006be6:	6a3b      	ldr	r3, [r7, #32]
 8006be8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006bec:	f023 0301 	bic.w	r3, r3, #1
 8006bf0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	3308      	adds	r3, #8
 8006bfa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006bfe:	633a      	str	r2, [r7, #48]	@ 0x30
 8006c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c06:	e841 2300 	strex	r3, r2, [r1]
 8006c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d1e1      	bne.n	8006bd6 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2220      	movs	r2, #32
 8006c16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	e853 3f00 	ldrex	r3, [r3]
 8006c32:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f023 0310 	bic.w	r3, r3, #16
 8006c3a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	461a      	mov	r2, r3
 8006c44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006c48:	61fb      	str	r3, [r7, #28]
 8006c4a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c4c:	69b9      	ldr	r1, [r7, #24]
 8006c4e:	69fa      	ldr	r2, [r7, #28]
 8006c50:	e841 2300 	strex	r3, r2, [r1]
 8006c54:	617b      	str	r3, [r7, #20]
   return(result);
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d1e4      	bne.n	8006c26 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2202      	movs	r2, #2
 8006c60:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c62:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c66:	4619      	mov	r1, r3
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 f87f 	bl	8006d6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006c6e:	e063      	b.n	8006d38 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006c70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d00e      	beq.n	8006c9a <HAL_UART_IRQHandler+0x59e>
 8006c7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d008      	beq.n	8006c9a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006c90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 fdd2 	bl	800783c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c98:	e051      	b.n	8006d3e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d014      	beq.n	8006cd0 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006ca6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006caa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d105      	bne.n	8006cbe <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006cb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006cb6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d008      	beq.n	8006cd0 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d03a      	beq.n	8006d3c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	4798      	blx	r3
    }
    return;
 8006cce:	e035      	b.n	8006d3c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d009      	beq.n	8006cf0 <HAL_UART_IRQHandler+0x5f4>
 8006cdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ce0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d003      	beq.n	8006cf0 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 fd7c 	bl	80077e6 <UART_EndTransmit_IT>
    return;
 8006cee:	e026      	b.n	8006d3e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006cf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cf4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d009      	beq.n	8006d10 <HAL_UART_IRQHandler+0x614>
 8006cfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d00:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d003      	beq.n	8006d10 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f000 fdab 	bl	8007864 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d0e:	e016      	b.n	8006d3e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d010      	beq.n	8006d3e <HAL_UART_IRQHandler+0x642>
 8006d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	da0c      	bge.n	8006d3e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 fd93 	bl	8007850 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d2a:	e008      	b.n	8006d3e <HAL_UART_IRQHandler+0x642>
      return;
 8006d2c:	bf00      	nop
 8006d2e:	e006      	b.n	8006d3e <HAL_UART_IRQHandler+0x642>
    return;
 8006d30:	bf00      	nop
 8006d32:	e004      	b.n	8006d3e <HAL_UART_IRQHandler+0x642>
      return;
 8006d34:	bf00      	nop
 8006d36:	e002      	b.n	8006d3e <HAL_UART_IRQHandler+0x642>
      return;
 8006d38:	bf00      	nop
 8006d3a:	e000      	b.n	8006d3e <HAL_UART_IRQHandler+0x642>
    return;
 8006d3c:	bf00      	nop
  }
}
 8006d3e:	37e8      	adds	r7, #232	@ 0xe8
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006d4c:	bf00      	nop
 8006d4e:	370c      	adds	r7, #12
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr

08006d58 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006d60:	bf00      	nop
 8006d62:	370c      	adds	r7, #12
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr

08006d6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	460b      	mov	r3, r1
 8006d76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d78:	bf00      	nop
 8006d7a:	370c      	adds	r7, #12
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d88:	b08c      	sub	sp, #48	@ 0x30
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	689a      	ldr	r2, [r3, #8]
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	691b      	ldr	r3, [r3, #16]
 8006d9c:	431a      	orrs	r2, r3
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	695b      	ldr	r3, [r3, #20]
 8006da2:	431a      	orrs	r2, r3
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	69db      	ldr	r3, [r3, #28]
 8006da8:	4313      	orrs	r3, r2
 8006daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	4baa      	ldr	r3, [pc, #680]	@ (800705c <UART_SetConfig+0x2d8>)
 8006db4:	4013      	ands	r3, r2
 8006db6:	697a      	ldr	r2, [r7, #20]
 8006db8:	6812      	ldr	r2, [r2, #0]
 8006dba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006dbc:	430b      	orrs	r3, r1
 8006dbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	68da      	ldr	r2, [r3, #12]
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	430a      	orrs	r2, r1
 8006dd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	699b      	ldr	r3, [r3, #24]
 8006dda:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a9f      	ldr	r2, [pc, #636]	@ (8007060 <UART_SetConfig+0x2dc>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d004      	beq.n	8006df0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	6a1b      	ldr	r3, [r3, #32]
 8006dea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006dec:	4313      	orrs	r3, r2
 8006dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006dfa:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006dfe:	697a      	ldr	r2, [r7, #20]
 8006e00:	6812      	ldr	r2, [r2, #0]
 8006e02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e04:	430b      	orrs	r3, r1
 8006e06:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e0e:	f023 010f 	bic.w	r1, r3, #15
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	430a      	orrs	r2, r1
 8006e1c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a90      	ldr	r2, [pc, #576]	@ (8007064 <UART_SetConfig+0x2e0>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d125      	bne.n	8006e74 <UART_SetConfig+0xf0>
 8006e28:	4b8f      	ldr	r3, [pc, #572]	@ (8007068 <UART_SetConfig+0x2e4>)
 8006e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e2e:	f003 0303 	and.w	r3, r3, #3
 8006e32:	2b03      	cmp	r3, #3
 8006e34:	d81a      	bhi.n	8006e6c <UART_SetConfig+0xe8>
 8006e36:	a201      	add	r2, pc, #4	@ (adr r2, 8006e3c <UART_SetConfig+0xb8>)
 8006e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e3c:	08006e4d 	.word	0x08006e4d
 8006e40:	08006e5d 	.word	0x08006e5d
 8006e44:	08006e55 	.word	0x08006e55
 8006e48:	08006e65 	.word	0x08006e65
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e52:	e116      	b.n	8007082 <UART_SetConfig+0x2fe>
 8006e54:	2302      	movs	r3, #2
 8006e56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e5a:	e112      	b.n	8007082 <UART_SetConfig+0x2fe>
 8006e5c:	2304      	movs	r3, #4
 8006e5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e62:	e10e      	b.n	8007082 <UART_SetConfig+0x2fe>
 8006e64:	2308      	movs	r3, #8
 8006e66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e6a:	e10a      	b.n	8007082 <UART_SetConfig+0x2fe>
 8006e6c:	2310      	movs	r3, #16
 8006e6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e72:	e106      	b.n	8007082 <UART_SetConfig+0x2fe>
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a7c      	ldr	r2, [pc, #496]	@ (800706c <UART_SetConfig+0x2e8>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d138      	bne.n	8006ef0 <UART_SetConfig+0x16c>
 8006e7e:	4b7a      	ldr	r3, [pc, #488]	@ (8007068 <UART_SetConfig+0x2e4>)
 8006e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e84:	f003 030c 	and.w	r3, r3, #12
 8006e88:	2b0c      	cmp	r3, #12
 8006e8a:	d82d      	bhi.n	8006ee8 <UART_SetConfig+0x164>
 8006e8c:	a201      	add	r2, pc, #4	@ (adr r2, 8006e94 <UART_SetConfig+0x110>)
 8006e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e92:	bf00      	nop
 8006e94:	08006ec9 	.word	0x08006ec9
 8006e98:	08006ee9 	.word	0x08006ee9
 8006e9c:	08006ee9 	.word	0x08006ee9
 8006ea0:	08006ee9 	.word	0x08006ee9
 8006ea4:	08006ed9 	.word	0x08006ed9
 8006ea8:	08006ee9 	.word	0x08006ee9
 8006eac:	08006ee9 	.word	0x08006ee9
 8006eb0:	08006ee9 	.word	0x08006ee9
 8006eb4:	08006ed1 	.word	0x08006ed1
 8006eb8:	08006ee9 	.word	0x08006ee9
 8006ebc:	08006ee9 	.word	0x08006ee9
 8006ec0:	08006ee9 	.word	0x08006ee9
 8006ec4:	08006ee1 	.word	0x08006ee1
 8006ec8:	2300      	movs	r3, #0
 8006eca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ece:	e0d8      	b.n	8007082 <UART_SetConfig+0x2fe>
 8006ed0:	2302      	movs	r3, #2
 8006ed2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ed6:	e0d4      	b.n	8007082 <UART_SetConfig+0x2fe>
 8006ed8:	2304      	movs	r3, #4
 8006eda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ede:	e0d0      	b.n	8007082 <UART_SetConfig+0x2fe>
 8006ee0:	2308      	movs	r3, #8
 8006ee2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ee6:	e0cc      	b.n	8007082 <UART_SetConfig+0x2fe>
 8006ee8:	2310      	movs	r3, #16
 8006eea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006eee:	e0c8      	b.n	8007082 <UART_SetConfig+0x2fe>
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a5e      	ldr	r2, [pc, #376]	@ (8007070 <UART_SetConfig+0x2ec>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d125      	bne.n	8006f46 <UART_SetConfig+0x1c2>
 8006efa:	4b5b      	ldr	r3, [pc, #364]	@ (8007068 <UART_SetConfig+0x2e4>)
 8006efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f00:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006f04:	2b30      	cmp	r3, #48	@ 0x30
 8006f06:	d016      	beq.n	8006f36 <UART_SetConfig+0x1b2>
 8006f08:	2b30      	cmp	r3, #48	@ 0x30
 8006f0a:	d818      	bhi.n	8006f3e <UART_SetConfig+0x1ba>
 8006f0c:	2b20      	cmp	r3, #32
 8006f0e:	d00a      	beq.n	8006f26 <UART_SetConfig+0x1a2>
 8006f10:	2b20      	cmp	r3, #32
 8006f12:	d814      	bhi.n	8006f3e <UART_SetConfig+0x1ba>
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d002      	beq.n	8006f1e <UART_SetConfig+0x19a>
 8006f18:	2b10      	cmp	r3, #16
 8006f1a:	d008      	beq.n	8006f2e <UART_SetConfig+0x1aa>
 8006f1c:	e00f      	b.n	8006f3e <UART_SetConfig+0x1ba>
 8006f1e:	2300      	movs	r3, #0
 8006f20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f24:	e0ad      	b.n	8007082 <UART_SetConfig+0x2fe>
 8006f26:	2302      	movs	r3, #2
 8006f28:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f2c:	e0a9      	b.n	8007082 <UART_SetConfig+0x2fe>
 8006f2e:	2304      	movs	r3, #4
 8006f30:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f34:	e0a5      	b.n	8007082 <UART_SetConfig+0x2fe>
 8006f36:	2308      	movs	r3, #8
 8006f38:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f3c:	e0a1      	b.n	8007082 <UART_SetConfig+0x2fe>
 8006f3e:	2310      	movs	r3, #16
 8006f40:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f44:	e09d      	b.n	8007082 <UART_SetConfig+0x2fe>
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a4a      	ldr	r2, [pc, #296]	@ (8007074 <UART_SetConfig+0x2f0>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d125      	bne.n	8006f9c <UART_SetConfig+0x218>
 8006f50:	4b45      	ldr	r3, [pc, #276]	@ (8007068 <UART_SetConfig+0x2e4>)
 8006f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f56:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006f5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f5c:	d016      	beq.n	8006f8c <UART_SetConfig+0x208>
 8006f5e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f60:	d818      	bhi.n	8006f94 <UART_SetConfig+0x210>
 8006f62:	2b80      	cmp	r3, #128	@ 0x80
 8006f64:	d00a      	beq.n	8006f7c <UART_SetConfig+0x1f8>
 8006f66:	2b80      	cmp	r3, #128	@ 0x80
 8006f68:	d814      	bhi.n	8006f94 <UART_SetConfig+0x210>
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d002      	beq.n	8006f74 <UART_SetConfig+0x1f0>
 8006f6e:	2b40      	cmp	r3, #64	@ 0x40
 8006f70:	d008      	beq.n	8006f84 <UART_SetConfig+0x200>
 8006f72:	e00f      	b.n	8006f94 <UART_SetConfig+0x210>
 8006f74:	2300      	movs	r3, #0
 8006f76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f7a:	e082      	b.n	8007082 <UART_SetConfig+0x2fe>
 8006f7c:	2302      	movs	r3, #2
 8006f7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f82:	e07e      	b.n	8007082 <UART_SetConfig+0x2fe>
 8006f84:	2304      	movs	r3, #4
 8006f86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f8a:	e07a      	b.n	8007082 <UART_SetConfig+0x2fe>
 8006f8c:	2308      	movs	r3, #8
 8006f8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f92:	e076      	b.n	8007082 <UART_SetConfig+0x2fe>
 8006f94:	2310      	movs	r3, #16
 8006f96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f9a:	e072      	b.n	8007082 <UART_SetConfig+0x2fe>
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a35      	ldr	r2, [pc, #212]	@ (8007078 <UART_SetConfig+0x2f4>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d12a      	bne.n	8006ffc <UART_SetConfig+0x278>
 8006fa6:	4b30      	ldr	r3, [pc, #192]	@ (8007068 <UART_SetConfig+0x2e4>)
 8006fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fb0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006fb4:	d01a      	beq.n	8006fec <UART_SetConfig+0x268>
 8006fb6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006fba:	d81b      	bhi.n	8006ff4 <UART_SetConfig+0x270>
 8006fbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fc0:	d00c      	beq.n	8006fdc <UART_SetConfig+0x258>
 8006fc2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fc6:	d815      	bhi.n	8006ff4 <UART_SetConfig+0x270>
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d003      	beq.n	8006fd4 <UART_SetConfig+0x250>
 8006fcc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fd0:	d008      	beq.n	8006fe4 <UART_SetConfig+0x260>
 8006fd2:	e00f      	b.n	8006ff4 <UART_SetConfig+0x270>
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fda:	e052      	b.n	8007082 <UART_SetConfig+0x2fe>
 8006fdc:	2302      	movs	r3, #2
 8006fde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fe2:	e04e      	b.n	8007082 <UART_SetConfig+0x2fe>
 8006fe4:	2304      	movs	r3, #4
 8006fe6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fea:	e04a      	b.n	8007082 <UART_SetConfig+0x2fe>
 8006fec:	2308      	movs	r3, #8
 8006fee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ff2:	e046      	b.n	8007082 <UART_SetConfig+0x2fe>
 8006ff4:	2310      	movs	r3, #16
 8006ff6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ffa:	e042      	b.n	8007082 <UART_SetConfig+0x2fe>
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a17      	ldr	r2, [pc, #92]	@ (8007060 <UART_SetConfig+0x2dc>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d13a      	bne.n	800707c <UART_SetConfig+0x2f8>
 8007006:	4b18      	ldr	r3, [pc, #96]	@ (8007068 <UART_SetConfig+0x2e4>)
 8007008:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800700c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007010:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007014:	d01a      	beq.n	800704c <UART_SetConfig+0x2c8>
 8007016:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800701a:	d81b      	bhi.n	8007054 <UART_SetConfig+0x2d0>
 800701c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007020:	d00c      	beq.n	800703c <UART_SetConfig+0x2b8>
 8007022:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007026:	d815      	bhi.n	8007054 <UART_SetConfig+0x2d0>
 8007028:	2b00      	cmp	r3, #0
 800702a:	d003      	beq.n	8007034 <UART_SetConfig+0x2b0>
 800702c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007030:	d008      	beq.n	8007044 <UART_SetConfig+0x2c0>
 8007032:	e00f      	b.n	8007054 <UART_SetConfig+0x2d0>
 8007034:	2300      	movs	r3, #0
 8007036:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800703a:	e022      	b.n	8007082 <UART_SetConfig+0x2fe>
 800703c:	2302      	movs	r3, #2
 800703e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007042:	e01e      	b.n	8007082 <UART_SetConfig+0x2fe>
 8007044:	2304      	movs	r3, #4
 8007046:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800704a:	e01a      	b.n	8007082 <UART_SetConfig+0x2fe>
 800704c:	2308      	movs	r3, #8
 800704e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007052:	e016      	b.n	8007082 <UART_SetConfig+0x2fe>
 8007054:	2310      	movs	r3, #16
 8007056:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800705a:	e012      	b.n	8007082 <UART_SetConfig+0x2fe>
 800705c:	cfff69f3 	.word	0xcfff69f3
 8007060:	40008000 	.word	0x40008000
 8007064:	40013800 	.word	0x40013800
 8007068:	40021000 	.word	0x40021000
 800706c:	40004400 	.word	0x40004400
 8007070:	40004800 	.word	0x40004800
 8007074:	40004c00 	.word	0x40004c00
 8007078:	40005000 	.word	0x40005000
 800707c:	2310      	movs	r3, #16
 800707e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4aae      	ldr	r2, [pc, #696]	@ (8007340 <UART_SetConfig+0x5bc>)
 8007088:	4293      	cmp	r3, r2
 800708a:	f040 8097 	bne.w	80071bc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800708e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007092:	2b08      	cmp	r3, #8
 8007094:	d823      	bhi.n	80070de <UART_SetConfig+0x35a>
 8007096:	a201      	add	r2, pc, #4	@ (adr r2, 800709c <UART_SetConfig+0x318>)
 8007098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800709c:	080070c1 	.word	0x080070c1
 80070a0:	080070df 	.word	0x080070df
 80070a4:	080070c9 	.word	0x080070c9
 80070a8:	080070df 	.word	0x080070df
 80070ac:	080070cf 	.word	0x080070cf
 80070b0:	080070df 	.word	0x080070df
 80070b4:	080070df 	.word	0x080070df
 80070b8:	080070df 	.word	0x080070df
 80070bc:	080070d7 	.word	0x080070d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070c0:	f7fc fac6 	bl	8003650 <HAL_RCC_GetPCLK1Freq>
 80070c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80070c6:	e010      	b.n	80070ea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070c8:	4b9e      	ldr	r3, [pc, #632]	@ (8007344 <UART_SetConfig+0x5c0>)
 80070ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80070cc:	e00d      	b.n	80070ea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070ce:	f7fc fa51 	bl	8003574 <HAL_RCC_GetSysClockFreq>
 80070d2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80070d4:	e009      	b.n	80070ea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80070dc:	e005      	b.n	80070ea <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80070de:	2300      	movs	r3, #0
 80070e0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80070e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80070ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	f000 8130 	beq.w	8007352 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070f6:	4a94      	ldr	r2, [pc, #592]	@ (8007348 <UART_SetConfig+0x5c4>)
 80070f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070fc:	461a      	mov	r2, r3
 80070fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007100:	fbb3 f3f2 	udiv	r3, r3, r2
 8007104:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	685a      	ldr	r2, [r3, #4]
 800710a:	4613      	mov	r3, r2
 800710c:	005b      	lsls	r3, r3, #1
 800710e:	4413      	add	r3, r2
 8007110:	69ba      	ldr	r2, [r7, #24]
 8007112:	429a      	cmp	r2, r3
 8007114:	d305      	bcc.n	8007122 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800711c:	69ba      	ldr	r2, [r7, #24]
 800711e:	429a      	cmp	r2, r3
 8007120:	d903      	bls.n	800712a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007128:	e113      	b.n	8007352 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800712a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800712c:	2200      	movs	r2, #0
 800712e:	60bb      	str	r3, [r7, #8]
 8007130:	60fa      	str	r2, [r7, #12]
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007136:	4a84      	ldr	r2, [pc, #528]	@ (8007348 <UART_SetConfig+0x5c4>)
 8007138:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800713c:	b29b      	uxth	r3, r3
 800713e:	2200      	movs	r2, #0
 8007140:	603b      	str	r3, [r7, #0]
 8007142:	607a      	str	r2, [r7, #4]
 8007144:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007148:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800714c:	f7f9 f8d0 	bl	80002f0 <__aeabi_uldivmod>
 8007150:	4602      	mov	r2, r0
 8007152:	460b      	mov	r3, r1
 8007154:	4610      	mov	r0, r2
 8007156:	4619      	mov	r1, r3
 8007158:	f04f 0200 	mov.w	r2, #0
 800715c:	f04f 0300 	mov.w	r3, #0
 8007160:	020b      	lsls	r3, r1, #8
 8007162:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007166:	0202      	lsls	r2, r0, #8
 8007168:	6979      	ldr	r1, [r7, #20]
 800716a:	6849      	ldr	r1, [r1, #4]
 800716c:	0849      	lsrs	r1, r1, #1
 800716e:	2000      	movs	r0, #0
 8007170:	460c      	mov	r4, r1
 8007172:	4605      	mov	r5, r0
 8007174:	eb12 0804 	adds.w	r8, r2, r4
 8007178:	eb43 0905 	adc.w	r9, r3, r5
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	469a      	mov	sl, r3
 8007184:	4693      	mov	fp, r2
 8007186:	4652      	mov	r2, sl
 8007188:	465b      	mov	r3, fp
 800718a:	4640      	mov	r0, r8
 800718c:	4649      	mov	r1, r9
 800718e:	f7f9 f8af 	bl	80002f0 <__aeabi_uldivmod>
 8007192:	4602      	mov	r2, r0
 8007194:	460b      	mov	r3, r1
 8007196:	4613      	mov	r3, r2
 8007198:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800719a:	6a3b      	ldr	r3, [r7, #32]
 800719c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071a0:	d308      	bcc.n	80071b4 <UART_SetConfig+0x430>
 80071a2:	6a3b      	ldr	r3, [r7, #32]
 80071a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80071a8:	d204      	bcs.n	80071b4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	6a3a      	ldr	r2, [r7, #32]
 80071b0:	60da      	str	r2, [r3, #12]
 80071b2:	e0ce      	b.n	8007352 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80071b4:	2301      	movs	r3, #1
 80071b6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80071ba:	e0ca      	b.n	8007352 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	69db      	ldr	r3, [r3, #28]
 80071c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80071c4:	d166      	bne.n	8007294 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80071c6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80071ca:	2b08      	cmp	r3, #8
 80071cc:	d827      	bhi.n	800721e <UART_SetConfig+0x49a>
 80071ce:	a201      	add	r2, pc, #4	@ (adr r2, 80071d4 <UART_SetConfig+0x450>)
 80071d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d4:	080071f9 	.word	0x080071f9
 80071d8:	08007201 	.word	0x08007201
 80071dc:	08007209 	.word	0x08007209
 80071e0:	0800721f 	.word	0x0800721f
 80071e4:	0800720f 	.word	0x0800720f
 80071e8:	0800721f 	.word	0x0800721f
 80071ec:	0800721f 	.word	0x0800721f
 80071f0:	0800721f 	.word	0x0800721f
 80071f4:	08007217 	.word	0x08007217
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071f8:	f7fc fa2a 	bl	8003650 <HAL_RCC_GetPCLK1Freq>
 80071fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80071fe:	e014      	b.n	800722a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007200:	f7fc fa3c 	bl	800367c <HAL_RCC_GetPCLK2Freq>
 8007204:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007206:	e010      	b.n	800722a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007208:	4b4e      	ldr	r3, [pc, #312]	@ (8007344 <UART_SetConfig+0x5c0>)
 800720a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800720c:	e00d      	b.n	800722a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800720e:	f7fc f9b1 	bl	8003574 <HAL_RCC_GetSysClockFreq>
 8007212:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007214:	e009      	b.n	800722a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007216:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800721a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800721c:	e005      	b.n	800722a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800721e:	2300      	movs	r3, #0
 8007220:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007228:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800722a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800722c:	2b00      	cmp	r3, #0
 800722e:	f000 8090 	beq.w	8007352 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007236:	4a44      	ldr	r2, [pc, #272]	@ (8007348 <UART_SetConfig+0x5c4>)
 8007238:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800723c:	461a      	mov	r2, r3
 800723e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007240:	fbb3 f3f2 	udiv	r3, r3, r2
 8007244:	005a      	lsls	r2, r3, #1
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	085b      	lsrs	r3, r3, #1
 800724c:	441a      	add	r2, r3
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	fbb2 f3f3 	udiv	r3, r2, r3
 8007256:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007258:	6a3b      	ldr	r3, [r7, #32]
 800725a:	2b0f      	cmp	r3, #15
 800725c:	d916      	bls.n	800728c <UART_SetConfig+0x508>
 800725e:	6a3b      	ldr	r3, [r7, #32]
 8007260:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007264:	d212      	bcs.n	800728c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007266:	6a3b      	ldr	r3, [r7, #32]
 8007268:	b29b      	uxth	r3, r3
 800726a:	f023 030f 	bic.w	r3, r3, #15
 800726e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007270:	6a3b      	ldr	r3, [r7, #32]
 8007272:	085b      	lsrs	r3, r3, #1
 8007274:	b29b      	uxth	r3, r3
 8007276:	f003 0307 	and.w	r3, r3, #7
 800727a:	b29a      	uxth	r2, r3
 800727c:	8bfb      	ldrh	r3, [r7, #30]
 800727e:	4313      	orrs	r3, r2
 8007280:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	8bfa      	ldrh	r2, [r7, #30]
 8007288:	60da      	str	r2, [r3, #12]
 800728a:	e062      	b.n	8007352 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800728c:	2301      	movs	r3, #1
 800728e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007292:	e05e      	b.n	8007352 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007294:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007298:	2b08      	cmp	r3, #8
 800729a:	d828      	bhi.n	80072ee <UART_SetConfig+0x56a>
 800729c:	a201      	add	r2, pc, #4	@ (adr r2, 80072a4 <UART_SetConfig+0x520>)
 800729e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072a2:	bf00      	nop
 80072a4:	080072c9 	.word	0x080072c9
 80072a8:	080072d1 	.word	0x080072d1
 80072ac:	080072d9 	.word	0x080072d9
 80072b0:	080072ef 	.word	0x080072ef
 80072b4:	080072df 	.word	0x080072df
 80072b8:	080072ef 	.word	0x080072ef
 80072bc:	080072ef 	.word	0x080072ef
 80072c0:	080072ef 	.word	0x080072ef
 80072c4:	080072e7 	.word	0x080072e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072c8:	f7fc f9c2 	bl	8003650 <HAL_RCC_GetPCLK1Freq>
 80072cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80072ce:	e014      	b.n	80072fa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072d0:	f7fc f9d4 	bl	800367c <HAL_RCC_GetPCLK2Freq>
 80072d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80072d6:	e010      	b.n	80072fa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072d8:	4b1a      	ldr	r3, [pc, #104]	@ (8007344 <UART_SetConfig+0x5c0>)
 80072da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80072dc:	e00d      	b.n	80072fa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072de:	f7fc f949 	bl	8003574 <HAL_RCC_GetSysClockFreq>
 80072e2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80072e4:	e009      	b.n	80072fa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80072ec:	e005      	b.n	80072fa <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80072ee:	2300      	movs	r3, #0
 80072f0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80072f8:	bf00      	nop
    }

    if (pclk != 0U)
 80072fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d028      	beq.n	8007352 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007304:	4a10      	ldr	r2, [pc, #64]	@ (8007348 <UART_SetConfig+0x5c4>)
 8007306:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800730a:	461a      	mov	r2, r3
 800730c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800730e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	085b      	lsrs	r3, r3, #1
 8007318:	441a      	add	r2, r3
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007322:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007324:	6a3b      	ldr	r3, [r7, #32]
 8007326:	2b0f      	cmp	r3, #15
 8007328:	d910      	bls.n	800734c <UART_SetConfig+0x5c8>
 800732a:	6a3b      	ldr	r3, [r7, #32]
 800732c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007330:	d20c      	bcs.n	800734c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007332:	6a3b      	ldr	r3, [r7, #32]
 8007334:	b29a      	uxth	r2, r3
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	60da      	str	r2, [r3, #12]
 800733c:	e009      	b.n	8007352 <UART_SetConfig+0x5ce>
 800733e:	bf00      	nop
 8007340:	40008000 	.word	0x40008000
 8007344:	00f42400 	.word	0x00f42400
 8007348:	0800963c 	.word	0x0800963c
      }
      else
      {
        ret = HAL_ERROR;
 800734c:	2301      	movs	r3, #1
 800734e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	2201      	movs	r2, #1
 8007356:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	2201      	movs	r2, #1
 800735e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	2200      	movs	r2, #0
 8007366:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	2200      	movs	r2, #0
 800736c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800736e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007372:	4618      	mov	r0, r3
 8007374:	3730      	adds	r7, #48	@ 0x30
 8007376:	46bd      	mov	sp, r7
 8007378:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800737c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007388:	f003 0308 	and.w	r3, r3, #8
 800738c:	2b00      	cmp	r3, #0
 800738e:	d00a      	beq.n	80073a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	430a      	orrs	r2, r1
 80073a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073aa:	f003 0301 	and.w	r3, r3, #1
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d00a      	beq.n	80073c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	430a      	orrs	r2, r1
 80073c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073cc:	f003 0302 	and.w	r3, r3, #2
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d00a      	beq.n	80073ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	430a      	orrs	r2, r1
 80073e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073ee:	f003 0304 	and.w	r3, r3, #4
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d00a      	beq.n	800740c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	430a      	orrs	r2, r1
 800740a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007410:	f003 0310 	and.w	r3, r3, #16
 8007414:	2b00      	cmp	r3, #0
 8007416:	d00a      	beq.n	800742e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	430a      	orrs	r2, r1
 800742c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007432:	f003 0320 	and.w	r3, r3, #32
 8007436:	2b00      	cmp	r3, #0
 8007438:	d00a      	beq.n	8007450 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	430a      	orrs	r2, r1
 800744e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007454:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007458:	2b00      	cmp	r3, #0
 800745a:	d01a      	beq.n	8007492 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	430a      	orrs	r2, r1
 8007470:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007476:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800747a:	d10a      	bne.n	8007492 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	430a      	orrs	r2, r1
 8007490:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800749a:	2b00      	cmp	r3, #0
 800749c:	d00a      	beq.n	80074b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	430a      	orrs	r2, r1
 80074b2:	605a      	str	r2, [r3, #4]
  }
}
 80074b4:	bf00      	nop
 80074b6:	370c      	adds	r7, #12
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr

080074c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b098      	sub	sp, #96	@ 0x60
 80074c4:	af02      	add	r7, sp, #8
 80074c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80074d0:	f7fa ff84 	bl	80023dc <HAL_GetTick>
 80074d4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f003 0308 	and.w	r3, r3, #8
 80074e0:	2b08      	cmp	r3, #8
 80074e2:	d12f      	bne.n	8007544 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80074e8:	9300      	str	r3, [sp, #0]
 80074ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074ec:	2200      	movs	r2, #0
 80074ee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 f88e 	bl	8007614 <UART_WaitOnFlagUntilTimeout>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d022      	beq.n	8007544 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007506:	e853 3f00 	ldrex	r3, [r3]
 800750a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800750c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800750e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007512:	653b      	str	r3, [r7, #80]	@ 0x50
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	461a      	mov	r2, r3
 800751a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800751c:	647b      	str	r3, [r7, #68]	@ 0x44
 800751e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007520:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007522:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007524:	e841 2300 	strex	r3, r2, [r1]
 8007528:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800752a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800752c:	2b00      	cmp	r3, #0
 800752e:	d1e6      	bne.n	80074fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2220      	movs	r2, #32
 8007534:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007540:	2303      	movs	r3, #3
 8007542:	e063      	b.n	800760c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f003 0304 	and.w	r3, r3, #4
 800754e:	2b04      	cmp	r3, #4
 8007550:	d149      	bne.n	80075e6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007552:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007556:	9300      	str	r3, [sp, #0]
 8007558:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800755a:	2200      	movs	r2, #0
 800755c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 f857 	bl	8007614 <UART_WaitOnFlagUntilTimeout>
 8007566:	4603      	mov	r3, r0
 8007568:	2b00      	cmp	r3, #0
 800756a:	d03c      	beq.n	80075e6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007574:	e853 3f00 	ldrex	r3, [r3]
 8007578:	623b      	str	r3, [r7, #32]
   return(result);
 800757a:	6a3b      	ldr	r3, [r7, #32]
 800757c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007580:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	461a      	mov	r2, r3
 8007588:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800758a:	633b      	str	r3, [r7, #48]	@ 0x30
 800758c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800758e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007590:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007592:	e841 2300 	strex	r3, r2, [r1]
 8007596:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800759a:	2b00      	cmp	r3, #0
 800759c:	d1e6      	bne.n	800756c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	3308      	adds	r3, #8
 80075a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	e853 3f00 	ldrex	r3, [r3]
 80075ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	f023 0301 	bic.w	r3, r3, #1
 80075b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	3308      	adds	r3, #8
 80075bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80075be:	61fa      	str	r2, [r7, #28]
 80075c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c2:	69b9      	ldr	r1, [r7, #24]
 80075c4:	69fa      	ldr	r2, [r7, #28]
 80075c6:	e841 2300 	strex	r3, r2, [r1]
 80075ca:	617b      	str	r3, [r7, #20]
   return(result);
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d1e5      	bne.n	800759e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2220      	movs	r2, #32
 80075d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2200      	movs	r2, #0
 80075de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075e2:	2303      	movs	r3, #3
 80075e4:	e012      	b.n	800760c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2220      	movs	r2, #32
 80075ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2220      	movs	r2, #32
 80075f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2200      	movs	r2, #0
 80075fa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2200      	movs	r2, #0
 8007606:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800760a:	2300      	movs	r3, #0
}
 800760c:	4618      	mov	r0, r3
 800760e:	3758      	adds	r7, #88	@ 0x58
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b084      	sub	sp, #16
 8007618:	af00      	add	r7, sp, #0
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	60b9      	str	r1, [r7, #8]
 800761e:	603b      	str	r3, [r7, #0]
 8007620:	4613      	mov	r3, r2
 8007622:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007624:	e04f      	b.n	80076c6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007626:	69bb      	ldr	r3, [r7, #24]
 8007628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800762c:	d04b      	beq.n	80076c6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800762e:	f7fa fed5 	bl	80023dc <HAL_GetTick>
 8007632:	4602      	mov	r2, r0
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	1ad3      	subs	r3, r2, r3
 8007638:	69ba      	ldr	r2, [r7, #24]
 800763a:	429a      	cmp	r2, r3
 800763c:	d302      	bcc.n	8007644 <UART_WaitOnFlagUntilTimeout+0x30>
 800763e:	69bb      	ldr	r3, [r7, #24]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d101      	bne.n	8007648 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007644:	2303      	movs	r3, #3
 8007646:	e04e      	b.n	80076e6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f003 0304 	and.w	r3, r3, #4
 8007652:	2b00      	cmp	r3, #0
 8007654:	d037      	beq.n	80076c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	2b80      	cmp	r3, #128	@ 0x80
 800765a:	d034      	beq.n	80076c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	2b40      	cmp	r3, #64	@ 0x40
 8007660:	d031      	beq.n	80076c6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	69db      	ldr	r3, [r3, #28]
 8007668:	f003 0308 	and.w	r3, r3, #8
 800766c:	2b08      	cmp	r3, #8
 800766e:	d110      	bne.n	8007692 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	2208      	movs	r2, #8
 8007676:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007678:	68f8      	ldr	r0, [r7, #12]
 800767a:	f000 f838 	bl	80076ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2208      	movs	r2, #8
 8007682:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2200      	movs	r2, #0
 800768a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	e029      	b.n	80076e6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	69db      	ldr	r3, [r3, #28]
 8007698:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800769c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076a0:	d111      	bne.n	80076c6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80076aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80076ac:	68f8      	ldr	r0, [r7, #12]
 80076ae:	f000 f81e 	bl	80076ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2220      	movs	r2, #32
 80076b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2200      	movs	r2, #0
 80076be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80076c2:	2303      	movs	r3, #3
 80076c4:	e00f      	b.n	80076e6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	69da      	ldr	r2, [r3, #28]
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	4013      	ands	r3, r2
 80076d0:	68ba      	ldr	r2, [r7, #8]
 80076d2:	429a      	cmp	r2, r3
 80076d4:	bf0c      	ite	eq
 80076d6:	2301      	moveq	r3, #1
 80076d8:	2300      	movne	r3, #0
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	461a      	mov	r2, r3
 80076de:	79fb      	ldrb	r3, [r7, #7]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d0a0      	beq.n	8007626 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80076e4:	2300      	movs	r3, #0
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3710      	adds	r7, #16
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}

080076ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80076ee:	b480      	push	{r7}
 80076f0:	b095      	sub	sp, #84	@ 0x54
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076fe:	e853 3f00 	ldrex	r3, [r3]
 8007702:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007706:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800770a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	461a      	mov	r2, r3
 8007712:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007714:	643b      	str	r3, [r7, #64]	@ 0x40
 8007716:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007718:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800771a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800771c:	e841 2300 	strex	r3, r2, [r1]
 8007720:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007724:	2b00      	cmp	r3, #0
 8007726:	d1e6      	bne.n	80076f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	3308      	adds	r3, #8
 800772e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007730:	6a3b      	ldr	r3, [r7, #32]
 8007732:	e853 3f00 	ldrex	r3, [r3]
 8007736:	61fb      	str	r3, [r7, #28]
   return(result);
 8007738:	69fb      	ldr	r3, [r7, #28]
 800773a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800773e:	f023 0301 	bic.w	r3, r3, #1
 8007742:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	3308      	adds	r3, #8
 800774a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800774c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800774e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007750:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007752:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007754:	e841 2300 	strex	r3, r2, [r1]
 8007758:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800775a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800775c:	2b00      	cmp	r3, #0
 800775e:	d1e3      	bne.n	8007728 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007764:	2b01      	cmp	r3, #1
 8007766:	d118      	bne.n	800779a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	e853 3f00 	ldrex	r3, [r3]
 8007774:	60bb      	str	r3, [r7, #8]
   return(result);
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	f023 0310 	bic.w	r3, r3, #16
 800777c:	647b      	str	r3, [r7, #68]	@ 0x44
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	461a      	mov	r2, r3
 8007784:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007786:	61bb      	str	r3, [r7, #24]
 8007788:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800778a:	6979      	ldr	r1, [r7, #20]
 800778c:	69ba      	ldr	r2, [r7, #24]
 800778e:	e841 2300 	strex	r3, r2, [r1]
 8007792:	613b      	str	r3, [r7, #16]
   return(result);
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d1e6      	bne.n	8007768 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2220      	movs	r2, #32
 800779e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80077ae:	bf00      	nop
 80077b0:	3754      	adds	r7, #84	@ 0x54
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr

080077ba <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80077ba:	b580      	push	{r7, lr}
 80077bc:	b084      	sub	sp, #16
 80077be:	af00      	add	r7, sp, #0
 80077c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2200      	movs	r2, #0
 80077cc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2200      	movs	r2, #0
 80077d4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80077d8:	68f8      	ldr	r0, [r7, #12]
 80077da:	f7ff fabd 	bl	8006d58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077de:	bf00      	nop
 80077e0:	3710      	adds	r7, #16
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}

080077e6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80077e6:	b580      	push	{r7, lr}
 80077e8:	b088      	sub	sp, #32
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	e853 3f00 	ldrex	r3, [r3]
 80077fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007802:	61fb      	str	r3, [r7, #28]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	461a      	mov	r2, r3
 800780a:	69fb      	ldr	r3, [r7, #28]
 800780c:	61bb      	str	r3, [r7, #24]
 800780e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007810:	6979      	ldr	r1, [r7, #20]
 8007812:	69ba      	ldr	r2, [r7, #24]
 8007814:	e841 2300 	strex	r3, r2, [r1]
 8007818:	613b      	str	r3, [r7, #16]
   return(result);
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d1e6      	bne.n	80077ee <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2220      	movs	r2, #32
 8007824:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f7ff fa88 	bl	8006d44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007834:	bf00      	nop
 8007836:	3720      	adds	r7, #32
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800783c:	b480      	push	{r7}
 800783e:	b083      	sub	sp, #12
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007844:	bf00      	nop
 8007846:	370c      	adds	r7, #12
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr

08007850 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007850:	b480      	push	{r7}
 8007852:	b083      	sub	sp, #12
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007858:	bf00      	nop
 800785a:	370c      	adds	r7, #12
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr

08007864 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800786c:	bf00      	nop
 800786e:	370c      	adds	r7, #12
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007878:	b480      	push	{r7}
 800787a:	b085      	sub	sp, #20
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007886:	2b01      	cmp	r3, #1
 8007888:	d101      	bne.n	800788e <HAL_UARTEx_DisableFifoMode+0x16>
 800788a:	2302      	movs	r3, #2
 800788c:	e027      	b.n	80078de <HAL_UARTEx_DisableFifoMode+0x66>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2201      	movs	r2, #1
 8007892:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2224      	movs	r2, #36	@ 0x24
 800789a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f022 0201 	bic.w	r2, r2, #1
 80078b4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80078bc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2200      	movs	r2, #0
 80078c2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	68fa      	ldr	r2, [r7, #12]
 80078ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2220      	movs	r2, #32
 80078d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2200      	movs	r2, #0
 80078d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80078dc:	2300      	movs	r3, #0
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3714      	adds	r7, #20
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr

080078ea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80078ea:	b580      	push	{r7, lr}
 80078ec:	b084      	sub	sp, #16
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]
 80078f2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d101      	bne.n	8007902 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80078fe:	2302      	movs	r3, #2
 8007900:	e02d      	b.n	800795e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2201      	movs	r2, #1
 8007906:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2224      	movs	r2, #36	@ 0x24
 800790e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f022 0201 	bic.w	r2, r2, #1
 8007928:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	683a      	ldr	r2, [r7, #0]
 800793a:	430a      	orrs	r2, r1
 800793c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 f850 	bl	80079e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	68fa      	ldr	r2, [r7, #12]
 800794a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2220      	movs	r2, #32
 8007950:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800795c:	2300      	movs	r3, #0
}
 800795e:	4618      	mov	r0, r3
 8007960:	3710      	adds	r7, #16
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}

08007966 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007966:	b580      	push	{r7, lr}
 8007968:	b084      	sub	sp, #16
 800796a:	af00      	add	r7, sp, #0
 800796c:	6078      	str	r0, [r7, #4]
 800796e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007976:	2b01      	cmp	r3, #1
 8007978:	d101      	bne.n	800797e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800797a:	2302      	movs	r3, #2
 800797c:	e02d      	b.n	80079da <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2201      	movs	r2, #1
 8007982:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2224      	movs	r2, #36	@ 0x24
 800798a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f022 0201 	bic.w	r2, r2, #1
 80079a4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	689b      	ldr	r3, [r3, #8]
 80079ac:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	683a      	ldr	r2, [r7, #0]
 80079b6:	430a      	orrs	r2, r1
 80079b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 f812 	bl	80079e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	68fa      	ldr	r2, [r7, #12]
 80079c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2220      	movs	r2, #32
 80079cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80079d8:	2300      	movs	r3, #0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3710      	adds	r7, #16
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
	...

080079e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b085      	sub	sp, #20
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d108      	bne.n	8007a06 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2201      	movs	r2, #1
 80079f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2201      	movs	r2, #1
 8007a00:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007a04:	e031      	b.n	8007a6a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007a06:	2308      	movs	r3, #8
 8007a08:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007a0a:	2308      	movs	r3, #8
 8007a0c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	0e5b      	lsrs	r3, r3, #25
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	f003 0307 	and.w	r3, r3, #7
 8007a1c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	0f5b      	lsrs	r3, r3, #29
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	f003 0307 	and.w	r3, r3, #7
 8007a2c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a2e:	7bbb      	ldrb	r3, [r7, #14]
 8007a30:	7b3a      	ldrb	r2, [r7, #12]
 8007a32:	4911      	ldr	r1, [pc, #68]	@ (8007a78 <UARTEx_SetNbDataToProcess+0x94>)
 8007a34:	5c8a      	ldrb	r2, [r1, r2]
 8007a36:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007a3a:	7b3a      	ldrb	r2, [r7, #12]
 8007a3c:	490f      	ldr	r1, [pc, #60]	@ (8007a7c <UARTEx_SetNbDataToProcess+0x98>)
 8007a3e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a40:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a44:	b29a      	uxth	r2, r3
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a4c:	7bfb      	ldrb	r3, [r7, #15]
 8007a4e:	7b7a      	ldrb	r2, [r7, #13]
 8007a50:	4909      	ldr	r1, [pc, #36]	@ (8007a78 <UARTEx_SetNbDataToProcess+0x94>)
 8007a52:	5c8a      	ldrb	r2, [r1, r2]
 8007a54:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007a58:	7b7a      	ldrb	r2, [r7, #13]
 8007a5a:	4908      	ldr	r1, [pc, #32]	@ (8007a7c <UARTEx_SetNbDataToProcess+0x98>)
 8007a5c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a5e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a62:	b29a      	uxth	r2, r3
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007a6a:	bf00      	nop
 8007a6c:	3714      	adds	r7, #20
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr
 8007a76:	bf00      	nop
 8007a78:	08009654 	.word	0x08009654
 8007a7c:	0800965c 	.word	0x0800965c

08007a80 <malloc>:
 8007a80:	4b02      	ldr	r3, [pc, #8]	@ (8007a8c <malloc+0xc>)
 8007a82:	4601      	mov	r1, r0
 8007a84:	6818      	ldr	r0, [r3, #0]
 8007a86:	f000 b82d 	b.w	8007ae4 <_malloc_r>
 8007a8a:	bf00      	nop
 8007a8c:	2000001c 	.word	0x2000001c

08007a90 <free>:
 8007a90:	4b02      	ldr	r3, [pc, #8]	@ (8007a9c <free+0xc>)
 8007a92:	4601      	mov	r1, r0
 8007a94:	6818      	ldr	r0, [r3, #0]
 8007a96:	f000 bb95 	b.w	80081c4 <_free_r>
 8007a9a:	bf00      	nop
 8007a9c:	2000001c 	.word	0x2000001c

08007aa0 <sbrk_aligned>:
 8007aa0:	b570      	push	{r4, r5, r6, lr}
 8007aa2:	4e0f      	ldr	r6, [pc, #60]	@ (8007ae0 <sbrk_aligned+0x40>)
 8007aa4:	460c      	mov	r4, r1
 8007aa6:	6831      	ldr	r1, [r6, #0]
 8007aa8:	4605      	mov	r5, r0
 8007aaa:	b911      	cbnz	r1, 8007ab2 <sbrk_aligned+0x12>
 8007aac:	f000 fb3a 	bl	8008124 <_sbrk_r>
 8007ab0:	6030      	str	r0, [r6, #0]
 8007ab2:	4621      	mov	r1, r4
 8007ab4:	4628      	mov	r0, r5
 8007ab6:	f000 fb35 	bl	8008124 <_sbrk_r>
 8007aba:	1c43      	adds	r3, r0, #1
 8007abc:	d103      	bne.n	8007ac6 <sbrk_aligned+0x26>
 8007abe:	f04f 34ff 	mov.w	r4, #4294967295
 8007ac2:	4620      	mov	r0, r4
 8007ac4:	bd70      	pop	{r4, r5, r6, pc}
 8007ac6:	1cc4      	adds	r4, r0, #3
 8007ac8:	f024 0403 	bic.w	r4, r4, #3
 8007acc:	42a0      	cmp	r0, r4
 8007ace:	d0f8      	beq.n	8007ac2 <sbrk_aligned+0x22>
 8007ad0:	1a21      	subs	r1, r4, r0
 8007ad2:	4628      	mov	r0, r5
 8007ad4:	f000 fb26 	bl	8008124 <_sbrk_r>
 8007ad8:	3001      	adds	r0, #1
 8007ada:	d1f2      	bne.n	8007ac2 <sbrk_aligned+0x22>
 8007adc:	e7ef      	b.n	8007abe <sbrk_aligned+0x1e>
 8007ade:	bf00      	nop
 8007ae0:	20000370 	.word	0x20000370

08007ae4 <_malloc_r>:
 8007ae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ae8:	1ccd      	adds	r5, r1, #3
 8007aea:	f025 0503 	bic.w	r5, r5, #3
 8007aee:	3508      	adds	r5, #8
 8007af0:	2d0c      	cmp	r5, #12
 8007af2:	bf38      	it	cc
 8007af4:	250c      	movcc	r5, #12
 8007af6:	2d00      	cmp	r5, #0
 8007af8:	4606      	mov	r6, r0
 8007afa:	db01      	blt.n	8007b00 <_malloc_r+0x1c>
 8007afc:	42a9      	cmp	r1, r5
 8007afe:	d904      	bls.n	8007b0a <_malloc_r+0x26>
 8007b00:	230c      	movs	r3, #12
 8007b02:	6033      	str	r3, [r6, #0]
 8007b04:	2000      	movs	r0, #0
 8007b06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007be0 <_malloc_r+0xfc>
 8007b0e:	f000 f869 	bl	8007be4 <__malloc_lock>
 8007b12:	f8d8 3000 	ldr.w	r3, [r8]
 8007b16:	461c      	mov	r4, r3
 8007b18:	bb44      	cbnz	r4, 8007b6c <_malloc_r+0x88>
 8007b1a:	4629      	mov	r1, r5
 8007b1c:	4630      	mov	r0, r6
 8007b1e:	f7ff ffbf 	bl	8007aa0 <sbrk_aligned>
 8007b22:	1c43      	adds	r3, r0, #1
 8007b24:	4604      	mov	r4, r0
 8007b26:	d158      	bne.n	8007bda <_malloc_r+0xf6>
 8007b28:	f8d8 4000 	ldr.w	r4, [r8]
 8007b2c:	4627      	mov	r7, r4
 8007b2e:	2f00      	cmp	r7, #0
 8007b30:	d143      	bne.n	8007bba <_malloc_r+0xd6>
 8007b32:	2c00      	cmp	r4, #0
 8007b34:	d04b      	beq.n	8007bce <_malloc_r+0xea>
 8007b36:	6823      	ldr	r3, [r4, #0]
 8007b38:	4639      	mov	r1, r7
 8007b3a:	4630      	mov	r0, r6
 8007b3c:	eb04 0903 	add.w	r9, r4, r3
 8007b40:	f000 faf0 	bl	8008124 <_sbrk_r>
 8007b44:	4581      	cmp	r9, r0
 8007b46:	d142      	bne.n	8007bce <_malloc_r+0xea>
 8007b48:	6821      	ldr	r1, [r4, #0]
 8007b4a:	1a6d      	subs	r5, r5, r1
 8007b4c:	4629      	mov	r1, r5
 8007b4e:	4630      	mov	r0, r6
 8007b50:	f7ff ffa6 	bl	8007aa0 <sbrk_aligned>
 8007b54:	3001      	adds	r0, #1
 8007b56:	d03a      	beq.n	8007bce <_malloc_r+0xea>
 8007b58:	6823      	ldr	r3, [r4, #0]
 8007b5a:	442b      	add	r3, r5
 8007b5c:	6023      	str	r3, [r4, #0]
 8007b5e:	f8d8 3000 	ldr.w	r3, [r8]
 8007b62:	685a      	ldr	r2, [r3, #4]
 8007b64:	bb62      	cbnz	r2, 8007bc0 <_malloc_r+0xdc>
 8007b66:	f8c8 7000 	str.w	r7, [r8]
 8007b6a:	e00f      	b.n	8007b8c <_malloc_r+0xa8>
 8007b6c:	6822      	ldr	r2, [r4, #0]
 8007b6e:	1b52      	subs	r2, r2, r5
 8007b70:	d420      	bmi.n	8007bb4 <_malloc_r+0xd0>
 8007b72:	2a0b      	cmp	r2, #11
 8007b74:	d917      	bls.n	8007ba6 <_malloc_r+0xc2>
 8007b76:	1961      	adds	r1, r4, r5
 8007b78:	42a3      	cmp	r3, r4
 8007b7a:	6025      	str	r5, [r4, #0]
 8007b7c:	bf18      	it	ne
 8007b7e:	6059      	strne	r1, [r3, #4]
 8007b80:	6863      	ldr	r3, [r4, #4]
 8007b82:	bf08      	it	eq
 8007b84:	f8c8 1000 	streq.w	r1, [r8]
 8007b88:	5162      	str	r2, [r4, r5]
 8007b8a:	604b      	str	r3, [r1, #4]
 8007b8c:	4630      	mov	r0, r6
 8007b8e:	f000 f82f 	bl	8007bf0 <__malloc_unlock>
 8007b92:	f104 000b 	add.w	r0, r4, #11
 8007b96:	1d23      	adds	r3, r4, #4
 8007b98:	f020 0007 	bic.w	r0, r0, #7
 8007b9c:	1ac2      	subs	r2, r0, r3
 8007b9e:	bf1c      	itt	ne
 8007ba0:	1a1b      	subne	r3, r3, r0
 8007ba2:	50a3      	strne	r3, [r4, r2]
 8007ba4:	e7af      	b.n	8007b06 <_malloc_r+0x22>
 8007ba6:	6862      	ldr	r2, [r4, #4]
 8007ba8:	42a3      	cmp	r3, r4
 8007baa:	bf0c      	ite	eq
 8007bac:	f8c8 2000 	streq.w	r2, [r8]
 8007bb0:	605a      	strne	r2, [r3, #4]
 8007bb2:	e7eb      	b.n	8007b8c <_malloc_r+0xa8>
 8007bb4:	4623      	mov	r3, r4
 8007bb6:	6864      	ldr	r4, [r4, #4]
 8007bb8:	e7ae      	b.n	8007b18 <_malloc_r+0x34>
 8007bba:	463c      	mov	r4, r7
 8007bbc:	687f      	ldr	r7, [r7, #4]
 8007bbe:	e7b6      	b.n	8007b2e <_malloc_r+0x4a>
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	42a3      	cmp	r3, r4
 8007bc6:	d1fb      	bne.n	8007bc0 <_malloc_r+0xdc>
 8007bc8:	2300      	movs	r3, #0
 8007bca:	6053      	str	r3, [r2, #4]
 8007bcc:	e7de      	b.n	8007b8c <_malloc_r+0xa8>
 8007bce:	230c      	movs	r3, #12
 8007bd0:	6033      	str	r3, [r6, #0]
 8007bd2:	4630      	mov	r0, r6
 8007bd4:	f000 f80c 	bl	8007bf0 <__malloc_unlock>
 8007bd8:	e794      	b.n	8007b04 <_malloc_r+0x20>
 8007bda:	6005      	str	r5, [r0, #0]
 8007bdc:	e7d6      	b.n	8007b8c <_malloc_r+0xa8>
 8007bde:	bf00      	nop
 8007be0:	20000374 	.word	0x20000374

08007be4 <__malloc_lock>:
 8007be4:	4801      	ldr	r0, [pc, #4]	@ (8007bec <__malloc_lock+0x8>)
 8007be6:	f000 baea 	b.w	80081be <__retarget_lock_acquire_recursive>
 8007bea:	bf00      	nop
 8007bec:	200004b8 	.word	0x200004b8

08007bf0 <__malloc_unlock>:
 8007bf0:	4801      	ldr	r0, [pc, #4]	@ (8007bf8 <__malloc_unlock+0x8>)
 8007bf2:	f000 bae5 	b.w	80081c0 <__retarget_lock_release_recursive>
 8007bf6:	bf00      	nop
 8007bf8:	200004b8 	.word	0x200004b8

08007bfc <std>:
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	b510      	push	{r4, lr}
 8007c00:	4604      	mov	r4, r0
 8007c02:	e9c0 3300 	strd	r3, r3, [r0]
 8007c06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c0a:	6083      	str	r3, [r0, #8]
 8007c0c:	8181      	strh	r1, [r0, #12]
 8007c0e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007c10:	81c2      	strh	r2, [r0, #14]
 8007c12:	6183      	str	r3, [r0, #24]
 8007c14:	4619      	mov	r1, r3
 8007c16:	2208      	movs	r2, #8
 8007c18:	305c      	adds	r0, #92	@ 0x5c
 8007c1a:	f000 fa33 	bl	8008084 <memset>
 8007c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8007c54 <std+0x58>)
 8007c20:	6263      	str	r3, [r4, #36]	@ 0x24
 8007c22:	4b0d      	ldr	r3, [pc, #52]	@ (8007c58 <std+0x5c>)
 8007c24:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007c26:	4b0d      	ldr	r3, [pc, #52]	@ (8007c5c <std+0x60>)
 8007c28:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8007c60 <std+0x64>)
 8007c2c:	6323      	str	r3, [r4, #48]	@ 0x30
 8007c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8007c64 <std+0x68>)
 8007c30:	6224      	str	r4, [r4, #32]
 8007c32:	429c      	cmp	r4, r3
 8007c34:	d006      	beq.n	8007c44 <std+0x48>
 8007c36:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007c3a:	4294      	cmp	r4, r2
 8007c3c:	d002      	beq.n	8007c44 <std+0x48>
 8007c3e:	33d0      	adds	r3, #208	@ 0xd0
 8007c40:	429c      	cmp	r4, r3
 8007c42:	d105      	bne.n	8007c50 <std+0x54>
 8007c44:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c4c:	f000 bab6 	b.w	80081bc <__retarget_lock_init_recursive>
 8007c50:	bd10      	pop	{r4, pc}
 8007c52:	bf00      	nop
 8007c54:	08007ed1 	.word	0x08007ed1
 8007c58:	08007ef7 	.word	0x08007ef7
 8007c5c:	08007f2f 	.word	0x08007f2f
 8007c60:	08007f53 	.word	0x08007f53
 8007c64:	20000378 	.word	0x20000378

08007c68 <stdio_exit_handler>:
 8007c68:	4a02      	ldr	r2, [pc, #8]	@ (8007c74 <stdio_exit_handler+0xc>)
 8007c6a:	4903      	ldr	r1, [pc, #12]	@ (8007c78 <stdio_exit_handler+0x10>)
 8007c6c:	4803      	ldr	r0, [pc, #12]	@ (8007c7c <stdio_exit_handler+0x14>)
 8007c6e:	f000 b869 	b.w	8007d44 <_fwalk_sglue>
 8007c72:	bf00      	nop
 8007c74:	20000010 	.word	0x20000010
 8007c78:	08008f61 	.word	0x08008f61
 8007c7c:	20000020 	.word	0x20000020

08007c80 <cleanup_stdio>:
 8007c80:	6841      	ldr	r1, [r0, #4]
 8007c82:	4b0c      	ldr	r3, [pc, #48]	@ (8007cb4 <cleanup_stdio+0x34>)
 8007c84:	4299      	cmp	r1, r3
 8007c86:	b510      	push	{r4, lr}
 8007c88:	4604      	mov	r4, r0
 8007c8a:	d001      	beq.n	8007c90 <cleanup_stdio+0x10>
 8007c8c:	f001 f968 	bl	8008f60 <_fflush_r>
 8007c90:	68a1      	ldr	r1, [r4, #8]
 8007c92:	4b09      	ldr	r3, [pc, #36]	@ (8007cb8 <cleanup_stdio+0x38>)
 8007c94:	4299      	cmp	r1, r3
 8007c96:	d002      	beq.n	8007c9e <cleanup_stdio+0x1e>
 8007c98:	4620      	mov	r0, r4
 8007c9a:	f001 f961 	bl	8008f60 <_fflush_r>
 8007c9e:	68e1      	ldr	r1, [r4, #12]
 8007ca0:	4b06      	ldr	r3, [pc, #24]	@ (8007cbc <cleanup_stdio+0x3c>)
 8007ca2:	4299      	cmp	r1, r3
 8007ca4:	d004      	beq.n	8007cb0 <cleanup_stdio+0x30>
 8007ca6:	4620      	mov	r0, r4
 8007ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cac:	f001 b958 	b.w	8008f60 <_fflush_r>
 8007cb0:	bd10      	pop	{r4, pc}
 8007cb2:	bf00      	nop
 8007cb4:	20000378 	.word	0x20000378
 8007cb8:	200003e0 	.word	0x200003e0
 8007cbc:	20000448 	.word	0x20000448

08007cc0 <global_stdio_init.part.0>:
 8007cc0:	b510      	push	{r4, lr}
 8007cc2:	4b0b      	ldr	r3, [pc, #44]	@ (8007cf0 <global_stdio_init.part.0+0x30>)
 8007cc4:	4c0b      	ldr	r4, [pc, #44]	@ (8007cf4 <global_stdio_init.part.0+0x34>)
 8007cc6:	4a0c      	ldr	r2, [pc, #48]	@ (8007cf8 <global_stdio_init.part.0+0x38>)
 8007cc8:	601a      	str	r2, [r3, #0]
 8007cca:	4620      	mov	r0, r4
 8007ccc:	2200      	movs	r2, #0
 8007cce:	2104      	movs	r1, #4
 8007cd0:	f7ff ff94 	bl	8007bfc <std>
 8007cd4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007cd8:	2201      	movs	r2, #1
 8007cda:	2109      	movs	r1, #9
 8007cdc:	f7ff ff8e 	bl	8007bfc <std>
 8007ce0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007ce4:	2202      	movs	r2, #2
 8007ce6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cea:	2112      	movs	r1, #18
 8007cec:	f7ff bf86 	b.w	8007bfc <std>
 8007cf0:	200004b0 	.word	0x200004b0
 8007cf4:	20000378 	.word	0x20000378
 8007cf8:	08007c69 	.word	0x08007c69

08007cfc <__sfp_lock_acquire>:
 8007cfc:	4801      	ldr	r0, [pc, #4]	@ (8007d04 <__sfp_lock_acquire+0x8>)
 8007cfe:	f000 ba5e 	b.w	80081be <__retarget_lock_acquire_recursive>
 8007d02:	bf00      	nop
 8007d04:	200004b9 	.word	0x200004b9

08007d08 <__sfp_lock_release>:
 8007d08:	4801      	ldr	r0, [pc, #4]	@ (8007d10 <__sfp_lock_release+0x8>)
 8007d0a:	f000 ba59 	b.w	80081c0 <__retarget_lock_release_recursive>
 8007d0e:	bf00      	nop
 8007d10:	200004b9 	.word	0x200004b9

08007d14 <__sinit>:
 8007d14:	b510      	push	{r4, lr}
 8007d16:	4604      	mov	r4, r0
 8007d18:	f7ff fff0 	bl	8007cfc <__sfp_lock_acquire>
 8007d1c:	6a23      	ldr	r3, [r4, #32]
 8007d1e:	b11b      	cbz	r3, 8007d28 <__sinit+0x14>
 8007d20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d24:	f7ff bff0 	b.w	8007d08 <__sfp_lock_release>
 8007d28:	4b04      	ldr	r3, [pc, #16]	@ (8007d3c <__sinit+0x28>)
 8007d2a:	6223      	str	r3, [r4, #32]
 8007d2c:	4b04      	ldr	r3, [pc, #16]	@ (8007d40 <__sinit+0x2c>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d1f5      	bne.n	8007d20 <__sinit+0xc>
 8007d34:	f7ff ffc4 	bl	8007cc0 <global_stdio_init.part.0>
 8007d38:	e7f2      	b.n	8007d20 <__sinit+0xc>
 8007d3a:	bf00      	nop
 8007d3c:	08007c81 	.word	0x08007c81
 8007d40:	200004b0 	.word	0x200004b0

08007d44 <_fwalk_sglue>:
 8007d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d48:	4607      	mov	r7, r0
 8007d4a:	4688      	mov	r8, r1
 8007d4c:	4614      	mov	r4, r2
 8007d4e:	2600      	movs	r6, #0
 8007d50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d54:	f1b9 0901 	subs.w	r9, r9, #1
 8007d58:	d505      	bpl.n	8007d66 <_fwalk_sglue+0x22>
 8007d5a:	6824      	ldr	r4, [r4, #0]
 8007d5c:	2c00      	cmp	r4, #0
 8007d5e:	d1f7      	bne.n	8007d50 <_fwalk_sglue+0xc>
 8007d60:	4630      	mov	r0, r6
 8007d62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d66:	89ab      	ldrh	r3, [r5, #12]
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d907      	bls.n	8007d7c <_fwalk_sglue+0x38>
 8007d6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d70:	3301      	adds	r3, #1
 8007d72:	d003      	beq.n	8007d7c <_fwalk_sglue+0x38>
 8007d74:	4629      	mov	r1, r5
 8007d76:	4638      	mov	r0, r7
 8007d78:	47c0      	blx	r8
 8007d7a:	4306      	orrs	r6, r0
 8007d7c:	3568      	adds	r5, #104	@ 0x68
 8007d7e:	e7e9      	b.n	8007d54 <_fwalk_sglue+0x10>

08007d80 <_puts_r>:
 8007d80:	6a03      	ldr	r3, [r0, #32]
 8007d82:	b570      	push	{r4, r5, r6, lr}
 8007d84:	6884      	ldr	r4, [r0, #8]
 8007d86:	4605      	mov	r5, r0
 8007d88:	460e      	mov	r6, r1
 8007d8a:	b90b      	cbnz	r3, 8007d90 <_puts_r+0x10>
 8007d8c:	f7ff ffc2 	bl	8007d14 <__sinit>
 8007d90:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007d92:	07db      	lsls	r3, r3, #31
 8007d94:	d405      	bmi.n	8007da2 <_puts_r+0x22>
 8007d96:	89a3      	ldrh	r3, [r4, #12]
 8007d98:	0598      	lsls	r0, r3, #22
 8007d9a:	d402      	bmi.n	8007da2 <_puts_r+0x22>
 8007d9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d9e:	f000 fa0e 	bl	80081be <__retarget_lock_acquire_recursive>
 8007da2:	89a3      	ldrh	r3, [r4, #12]
 8007da4:	0719      	lsls	r1, r3, #28
 8007da6:	d502      	bpl.n	8007dae <_puts_r+0x2e>
 8007da8:	6923      	ldr	r3, [r4, #16]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d135      	bne.n	8007e1a <_puts_r+0x9a>
 8007dae:	4621      	mov	r1, r4
 8007db0:	4628      	mov	r0, r5
 8007db2:	f000 f911 	bl	8007fd8 <__swsetup_r>
 8007db6:	b380      	cbz	r0, 8007e1a <_puts_r+0x9a>
 8007db8:	f04f 35ff 	mov.w	r5, #4294967295
 8007dbc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007dbe:	07da      	lsls	r2, r3, #31
 8007dc0:	d405      	bmi.n	8007dce <_puts_r+0x4e>
 8007dc2:	89a3      	ldrh	r3, [r4, #12]
 8007dc4:	059b      	lsls	r3, r3, #22
 8007dc6:	d402      	bmi.n	8007dce <_puts_r+0x4e>
 8007dc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007dca:	f000 f9f9 	bl	80081c0 <__retarget_lock_release_recursive>
 8007dce:	4628      	mov	r0, r5
 8007dd0:	bd70      	pop	{r4, r5, r6, pc}
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	da04      	bge.n	8007de0 <_puts_r+0x60>
 8007dd6:	69a2      	ldr	r2, [r4, #24]
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	dc17      	bgt.n	8007e0c <_puts_r+0x8c>
 8007ddc:	290a      	cmp	r1, #10
 8007dde:	d015      	beq.n	8007e0c <_puts_r+0x8c>
 8007de0:	6823      	ldr	r3, [r4, #0]
 8007de2:	1c5a      	adds	r2, r3, #1
 8007de4:	6022      	str	r2, [r4, #0]
 8007de6:	7019      	strb	r1, [r3, #0]
 8007de8:	68a3      	ldr	r3, [r4, #8]
 8007dea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007dee:	3b01      	subs	r3, #1
 8007df0:	60a3      	str	r3, [r4, #8]
 8007df2:	2900      	cmp	r1, #0
 8007df4:	d1ed      	bne.n	8007dd2 <_puts_r+0x52>
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	da11      	bge.n	8007e1e <_puts_r+0x9e>
 8007dfa:	4622      	mov	r2, r4
 8007dfc:	210a      	movs	r1, #10
 8007dfe:	4628      	mov	r0, r5
 8007e00:	f000 f8ab 	bl	8007f5a <__swbuf_r>
 8007e04:	3001      	adds	r0, #1
 8007e06:	d0d7      	beq.n	8007db8 <_puts_r+0x38>
 8007e08:	250a      	movs	r5, #10
 8007e0a:	e7d7      	b.n	8007dbc <_puts_r+0x3c>
 8007e0c:	4622      	mov	r2, r4
 8007e0e:	4628      	mov	r0, r5
 8007e10:	f000 f8a3 	bl	8007f5a <__swbuf_r>
 8007e14:	3001      	adds	r0, #1
 8007e16:	d1e7      	bne.n	8007de8 <_puts_r+0x68>
 8007e18:	e7ce      	b.n	8007db8 <_puts_r+0x38>
 8007e1a:	3e01      	subs	r6, #1
 8007e1c:	e7e4      	b.n	8007de8 <_puts_r+0x68>
 8007e1e:	6823      	ldr	r3, [r4, #0]
 8007e20:	1c5a      	adds	r2, r3, #1
 8007e22:	6022      	str	r2, [r4, #0]
 8007e24:	220a      	movs	r2, #10
 8007e26:	701a      	strb	r2, [r3, #0]
 8007e28:	e7ee      	b.n	8007e08 <_puts_r+0x88>
	...

08007e2c <puts>:
 8007e2c:	4b02      	ldr	r3, [pc, #8]	@ (8007e38 <puts+0xc>)
 8007e2e:	4601      	mov	r1, r0
 8007e30:	6818      	ldr	r0, [r3, #0]
 8007e32:	f7ff bfa5 	b.w	8007d80 <_puts_r>
 8007e36:	bf00      	nop
 8007e38:	2000001c 	.word	0x2000001c

08007e3c <siprintf>:
 8007e3c:	b40e      	push	{r1, r2, r3}
 8007e3e:	b500      	push	{lr}
 8007e40:	b09c      	sub	sp, #112	@ 0x70
 8007e42:	ab1d      	add	r3, sp, #116	@ 0x74
 8007e44:	9002      	str	r0, [sp, #8]
 8007e46:	9006      	str	r0, [sp, #24]
 8007e48:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007e4c:	4809      	ldr	r0, [pc, #36]	@ (8007e74 <siprintf+0x38>)
 8007e4e:	9107      	str	r1, [sp, #28]
 8007e50:	9104      	str	r1, [sp, #16]
 8007e52:	4909      	ldr	r1, [pc, #36]	@ (8007e78 <siprintf+0x3c>)
 8007e54:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e58:	9105      	str	r1, [sp, #20]
 8007e5a:	6800      	ldr	r0, [r0, #0]
 8007e5c:	9301      	str	r3, [sp, #4]
 8007e5e:	a902      	add	r1, sp, #8
 8007e60:	f000 fa56 	bl	8008310 <_svfiprintf_r>
 8007e64:	9b02      	ldr	r3, [sp, #8]
 8007e66:	2200      	movs	r2, #0
 8007e68:	701a      	strb	r2, [r3, #0]
 8007e6a:	b01c      	add	sp, #112	@ 0x70
 8007e6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e70:	b003      	add	sp, #12
 8007e72:	4770      	bx	lr
 8007e74:	2000001c 	.word	0x2000001c
 8007e78:	ffff0208 	.word	0xffff0208

08007e7c <siscanf>:
 8007e7c:	b40e      	push	{r1, r2, r3}
 8007e7e:	b530      	push	{r4, r5, lr}
 8007e80:	b09c      	sub	sp, #112	@ 0x70
 8007e82:	ac1f      	add	r4, sp, #124	@ 0x7c
 8007e84:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8007e88:	f854 5b04 	ldr.w	r5, [r4], #4
 8007e8c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007e90:	9002      	str	r0, [sp, #8]
 8007e92:	9006      	str	r0, [sp, #24]
 8007e94:	f7f8 f9ce 	bl	8000234 <strlen>
 8007e98:	4b0b      	ldr	r3, [pc, #44]	@ (8007ec8 <siscanf+0x4c>)
 8007e9a:	9003      	str	r0, [sp, #12]
 8007e9c:	9007      	str	r0, [sp, #28]
 8007e9e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ea0:	480a      	ldr	r0, [pc, #40]	@ (8007ecc <siscanf+0x50>)
 8007ea2:	9401      	str	r4, [sp, #4]
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007ea8:	9314      	str	r3, [sp, #80]	@ 0x50
 8007eaa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007eae:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007eb2:	462a      	mov	r2, r5
 8007eb4:	4623      	mov	r3, r4
 8007eb6:	a902      	add	r1, sp, #8
 8007eb8:	6800      	ldr	r0, [r0, #0]
 8007eba:	f000 fb7d 	bl	80085b8 <__ssvfiscanf_r>
 8007ebe:	b01c      	add	sp, #112	@ 0x70
 8007ec0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ec4:	b003      	add	sp, #12
 8007ec6:	4770      	bx	lr
 8007ec8:	08007ef3 	.word	0x08007ef3
 8007ecc:	2000001c 	.word	0x2000001c

08007ed0 <__sread>:
 8007ed0:	b510      	push	{r4, lr}
 8007ed2:	460c      	mov	r4, r1
 8007ed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ed8:	f000 f912 	bl	8008100 <_read_r>
 8007edc:	2800      	cmp	r0, #0
 8007ede:	bfab      	itete	ge
 8007ee0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007ee2:	89a3      	ldrhlt	r3, [r4, #12]
 8007ee4:	181b      	addge	r3, r3, r0
 8007ee6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007eea:	bfac      	ite	ge
 8007eec:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007eee:	81a3      	strhlt	r3, [r4, #12]
 8007ef0:	bd10      	pop	{r4, pc}

08007ef2 <__seofread>:
 8007ef2:	2000      	movs	r0, #0
 8007ef4:	4770      	bx	lr

08007ef6 <__swrite>:
 8007ef6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007efa:	461f      	mov	r7, r3
 8007efc:	898b      	ldrh	r3, [r1, #12]
 8007efe:	05db      	lsls	r3, r3, #23
 8007f00:	4605      	mov	r5, r0
 8007f02:	460c      	mov	r4, r1
 8007f04:	4616      	mov	r6, r2
 8007f06:	d505      	bpl.n	8007f14 <__swrite+0x1e>
 8007f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f0c:	2302      	movs	r3, #2
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f000 f8e4 	bl	80080dc <_lseek_r>
 8007f14:	89a3      	ldrh	r3, [r4, #12]
 8007f16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f1e:	81a3      	strh	r3, [r4, #12]
 8007f20:	4632      	mov	r2, r6
 8007f22:	463b      	mov	r3, r7
 8007f24:	4628      	mov	r0, r5
 8007f26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f2a:	f000 b90b 	b.w	8008144 <_write_r>

08007f2e <__sseek>:
 8007f2e:	b510      	push	{r4, lr}
 8007f30:	460c      	mov	r4, r1
 8007f32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f36:	f000 f8d1 	bl	80080dc <_lseek_r>
 8007f3a:	1c43      	adds	r3, r0, #1
 8007f3c:	89a3      	ldrh	r3, [r4, #12]
 8007f3e:	bf15      	itete	ne
 8007f40:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007f42:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007f46:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007f4a:	81a3      	strheq	r3, [r4, #12]
 8007f4c:	bf18      	it	ne
 8007f4e:	81a3      	strhne	r3, [r4, #12]
 8007f50:	bd10      	pop	{r4, pc}

08007f52 <__sclose>:
 8007f52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f56:	f000 b8b1 	b.w	80080bc <_close_r>

08007f5a <__swbuf_r>:
 8007f5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f5c:	460e      	mov	r6, r1
 8007f5e:	4614      	mov	r4, r2
 8007f60:	4605      	mov	r5, r0
 8007f62:	b118      	cbz	r0, 8007f6c <__swbuf_r+0x12>
 8007f64:	6a03      	ldr	r3, [r0, #32]
 8007f66:	b90b      	cbnz	r3, 8007f6c <__swbuf_r+0x12>
 8007f68:	f7ff fed4 	bl	8007d14 <__sinit>
 8007f6c:	69a3      	ldr	r3, [r4, #24]
 8007f6e:	60a3      	str	r3, [r4, #8]
 8007f70:	89a3      	ldrh	r3, [r4, #12]
 8007f72:	071a      	lsls	r2, r3, #28
 8007f74:	d501      	bpl.n	8007f7a <__swbuf_r+0x20>
 8007f76:	6923      	ldr	r3, [r4, #16]
 8007f78:	b943      	cbnz	r3, 8007f8c <__swbuf_r+0x32>
 8007f7a:	4621      	mov	r1, r4
 8007f7c:	4628      	mov	r0, r5
 8007f7e:	f000 f82b 	bl	8007fd8 <__swsetup_r>
 8007f82:	b118      	cbz	r0, 8007f8c <__swbuf_r+0x32>
 8007f84:	f04f 37ff 	mov.w	r7, #4294967295
 8007f88:	4638      	mov	r0, r7
 8007f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f8c:	6823      	ldr	r3, [r4, #0]
 8007f8e:	6922      	ldr	r2, [r4, #16]
 8007f90:	1a98      	subs	r0, r3, r2
 8007f92:	6963      	ldr	r3, [r4, #20]
 8007f94:	b2f6      	uxtb	r6, r6
 8007f96:	4283      	cmp	r3, r0
 8007f98:	4637      	mov	r7, r6
 8007f9a:	dc05      	bgt.n	8007fa8 <__swbuf_r+0x4e>
 8007f9c:	4621      	mov	r1, r4
 8007f9e:	4628      	mov	r0, r5
 8007fa0:	f000 ffde 	bl	8008f60 <_fflush_r>
 8007fa4:	2800      	cmp	r0, #0
 8007fa6:	d1ed      	bne.n	8007f84 <__swbuf_r+0x2a>
 8007fa8:	68a3      	ldr	r3, [r4, #8]
 8007faa:	3b01      	subs	r3, #1
 8007fac:	60a3      	str	r3, [r4, #8]
 8007fae:	6823      	ldr	r3, [r4, #0]
 8007fb0:	1c5a      	adds	r2, r3, #1
 8007fb2:	6022      	str	r2, [r4, #0]
 8007fb4:	701e      	strb	r6, [r3, #0]
 8007fb6:	6962      	ldr	r2, [r4, #20]
 8007fb8:	1c43      	adds	r3, r0, #1
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d004      	beq.n	8007fc8 <__swbuf_r+0x6e>
 8007fbe:	89a3      	ldrh	r3, [r4, #12]
 8007fc0:	07db      	lsls	r3, r3, #31
 8007fc2:	d5e1      	bpl.n	8007f88 <__swbuf_r+0x2e>
 8007fc4:	2e0a      	cmp	r6, #10
 8007fc6:	d1df      	bne.n	8007f88 <__swbuf_r+0x2e>
 8007fc8:	4621      	mov	r1, r4
 8007fca:	4628      	mov	r0, r5
 8007fcc:	f000 ffc8 	bl	8008f60 <_fflush_r>
 8007fd0:	2800      	cmp	r0, #0
 8007fd2:	d0d9      	beq.n	8007f88 <__swbuf_r+0x2e>
 8007fd4:	e7d6      	b.n	8007f84 <__swbuf_r+0x2a>
	...

08007fd8 <__swsetup_r>:
 8007fd8:	b538      	push	{r3, r4, r5, lr}
 8007fda:	4b29      	ldr	r3, [pc, #164]	@ (8008080 <__swsetup_r+0xa8>)
 8007fdc:	4605      	mov	r5, r0
 8007fde:	6818      	ldr	r0, [r3, #0]
 8007fe0:	460c      	mov	r4, r1
 8007fe2:	b118      	cbz	r0, 8007fec <__swsetup_r+0x14>
 8007fe4:	6a03      	ldr	r3, [r0, #32]
 8007fe6:	b90b      	cbnz	r3, 8007fec <__swsetup_r+0x14>
 8007fe8:	f7ff fe94 	bl	8007d14 <__sinit>
 8007fec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ff0:	0719      	lsls	r1, r3, #28
 8007ff2:	d422      	bmi.n	800803a <__swsetup_r+0x62>
 8007ff4:	06da      	lsls	r2, r3, #27
 8007ff6:	d407      	bmi.n	8008008 <__swsetup_r+0x30>
 8007ff8:	2209      	movs	r2, #9
 8007ffa:	602a      	str	r2, [r5, #0]
 8007ffc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008000:	81a3      	strh	r3, [r4, #12]
 8008002:	f04f 30ff 	mov.w	r0, #4294967295
 8008006:	e033      	b.n	8008070 <__swsetup_r+0x98>
 8008008:	0758      	lsls	r0, r3, #29
 800800a:	d512      	bpl.n	8008032 <__swsetup_r+0x5a>
 800800c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800800e:	b141      	cbz	r1, 8008022 <__swsetup_r+0x4a>
 8008010:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008014:	4299      	cmp	r1, r3
 8008016:	d002      	beq.n	800801e <__swsetup_r+0x46>
 8008018:	4628      	mov	r0, r5
 800801a:	f000 f8d3 	bl	80081c4 <_free_r>
 800801e:	2300      	movs	r3, #0
 8008020:	6363      	str	r3, [r4, #52]	@ 0x34
 8008022:	89a3      	ldrh	r3, [r4, #12]
 8008024:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008028:	81a3      	strh	r3, [r4, #12]
 800802a:	2300      	movs	r3, #0
 800802c:	6063      	str	r3, [r4, #4]
 800802e:	6923      	ldr	r3, [r4, #16]
 8008030:	6023      	str	r3, [r4, #0]
 8008032:	89a3      	ldrh	r3, [r4, #12]
 8008034:	f043 0308 	orr.w	r3, r3, #8
 8008038:	81a3      	strh	r3, [r4, #12]
 800803a:	6923      	ldr	r3, [r4, #16]
 800803c:	b94b      	cbnz	r3, 8008052 <__swsetup_r+0x7a>
 800803e:	89a3      	ldrh	r3, [r4, #12]
 8008040:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008044:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008048:	d003      	beq.n	8008052 <__swsetup_r+0x7a>
 800804a:	4621      	mov	r1, r4
 800804c:	4628      	mov	r0, r5
 800804e:	f000 ffd5 	bl	8008ffc <__smakebuf_r>
 8008052:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008056:	f013 0201 	ands.w	r2, r3, #1
 800805a:	d00a      	beq.n	8008072 <__swsetup_r+0x9a>
 800805c:	2200      	movs	r2, #0
 800805e:	60a2      	str	r2, [r4, #8]
 8008060:	6962      	ldr	r2, [r4, #20]
 8008062:	4252      	negs	r2, r2
 8008064:	61a2      	str	r2, [r4, #24]
 8008066:	6922      	ldr	r2, [r4, #16]
 8008068:	b942      	cbnz	r2, 800807c <__swsetup_r+0xa4>
 800806a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800806e:	d1c5      	bne.n	8007ffc <__swsetup_r+0x24>
 8008070:	bd38      	pop	{r3, r4, r5, pc}
 8008072:	0799      	lsls	r1, r3, #30
 8008074:	bf58      	it	pl
 8008076:	6962      	ldrpl	r2, [r4, #20]
 8008078:	60a2      	str	r2, [r4, #8]
 800807a:	e7f4      	b.n	8008066 <__swsetup_r+0x8e>
 800807c:	2000      	movs	r0, #0
 800807e:	e7f7      	b.n	8008070 <__swsetup_r+0x98>
 8008080:	2000001c 	.word	0x2000001c

08008084 <memset>:
 8008084:	4402      	add	r2, r0
 8008086:	4603      	mov	r3, r0
 8008088:	4293      	cmp	r3, r2
 800808a:	d100      	bne.n	800808e <memset+0xa>
 800808c:	4770      	bx	lr
 800808e:	f803 1b01 	strb.w	r1, [r3], #1
 8008092:	e7f9      	b.n	8008088 <memset+0x4>

08008094 <strncpy>:
 8008094:	b510      	push	{r4, lr}
 8008096:	3901      	subs	r1, #1
 8008098:	4603      	mov	r3, r0
 800809a:	b132      	cbz	r2, 80080aa <strncpy+0x16>
 800809c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80080a0:	f803 4b01 	strb.w	r4, [r3], #1
 80080a4:	3a01      	subs	r2, #1
 80080a6:	2c00      	cmp	r4, #0
 80080a8:	d1f7      	bne.n	800809a <strncpy+0x6>
 80080aa:	441a      	add	r2, r3
 80080ac:	2100      	movs	r1, #0
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d100      	bne.n	80080b4 <strncpy+0x20>
 80080b2:	bd10      	pop	{r4, pc}
 80080b4:	f803 1b01 	strb.w	r1, [r3], #1
 80080b8:	e7f9      	b.n	80080ae <strncpy+0x1a>
	...

080080bc <_close_r>:
 80080bc:	b538      	push	{r3, r4, r5, lr}
 80080be:	4d06      	ldr	r5, [pc, #24]	@ (80080d8 <_close_r+0x1c>)
 80080c0:	2300      	movs	r3, #0
 80080c2:	4604      	mov	r4, r0
 80080c4:	4608      	mov	r0, r1
 80080c6:	602b      	str	r3, [r5, #0]
 80080c8:	f7fa f87d 	bl	80021c6 <_close>
 80080cc:	1c43      	adds	r3, r0, #1
 80080ce:	d102      	bne.n	80080d6 <_close_r+0x1a>
 80080d0:	682b      	ldr	r3, [r5, #0]
 80080d2:	b103      	cbz	r3, 80080d6 <_close_r+0x1a>
 80080d4:	6023      	str	r3, [r4, #0]
 80080d6:	bd38      	pop	{r3, r4, r5, pc}
 80080d8:	200004b4 	.word	0x200004b4

080080dc <_lseek_r>:
 80080dc:	b538      	push	{r3, r4, r5, lr}
 80080de:	4d07      	ldr	r5, [pc, #28]	@ (80080fc <_lseek_r+0x20>)
 80080e0:	4604      	mov	r4, r0
 80080e2:	4608      	mov	r0, r1
 80080e4:	4611      	mov	r1, r2
 80080e6:	2200      	movs	r2, #0
 80080e8:	602a      	str	r2, [r5, #0]
 80080ea:	461a      	mov	r2, r3
 80080ec:	f7fa f892 	bl	8002214 <_lseek>
 80080f0:	1c43      	adds	r3, r0, #1
 80080f2:	d102      	bne.n	80080fa <_lseek_r+0x1e>
 80080f4:	682b      	ldr	r3, [r5, #0]
 80080f6:	b103      	cbz	r3, 80080fa <_lseek_r+0x1e>
 80080f8:	6023      	str	r3, [r4, #0]
 80080fa:	bd38      	pop	{r3, r4, r5, pc}
 80080fc:	200004b4 	.word	0x200004b4

08008100 <_read_r>:
 8008100:	b538      	push	{r3, r4, r5, lr}
 8008102:	4d07      	ldr	r5, [pc, #28]	@ (8008120 <_read_r+0x20>)
 8008104:	4604      	mov	r4, r0
 8008106:	4608      	mov	r0, r1
 8008108:	4611      	mov	r1, r2
 800810a:	2200      	movs	r2, #0
 800810c:	602a      	str	r2, [r5, #0]
 800810e:	461a      	mov	r2, r3
 8008110:	f7fa f820 	bl	8002154 <_read>
 8008114:	1c43      	adds	r3, r0, #1
 8008116:	d102      	bne.n	800811e <_read_r+0x1e>
 8008118:	682b      	ldr	r3, [r5, #0]
 800811a:	b103      	cbz	r3, 800811e <_read_r+0x1e>
 800811c:	6023      	str	r3, [r4, #0]
 800811e:	bd38      	pop	{r3, r4, r5, pc}
 8008120:	200004b4 	.word	0x200004b4

08008124 <_sbrk_r>:
 8008124:	b538      	push	{r3, r4, r5, lr}
 8008126:	4d06      	ldr	r5, [pc, #24]	@ (8008140 <_sbrk_r+0x1c>)
 8008128:	2300      	movs	r3, #0
 800812a:	4604      	mov	r4, r0
 800812c:	4608      	mov	r0, r1
 800812e:	602b      	str	r3, [r5, #0]
 8008130:	f7fa f87e 	bl	8002230 <_sbrk>
 8008134:	1c43      	adds	r3, r0, #1
 8008136:	d102      	bne.n	800813e <_sbrk_r+0x1a>
 8008138:	682b      	ldr	r3, [r5, #0]
 800813a:	b103      	cbz	r3, 800813e <_sbrk_r+0x1a>
 800813c:	6023      	str	r3, [r4, #0]
 800813e:	bd38      	pop	{r3, r4, r5, pc}
 8008140:	200004b4 	.word	0x200004b4

08008144 <_write_r>:
 8008144:	b538      	push	{r3, r4, r5, lr}
 8008146:	4d07      	ldr	r5, [pc, #28]	@ (8008164 <_write_r+0x20>)
 8008148:	4604      	mov	r4, r0
 800814a:	4608      	mov	r0, r1
 800814c:	4611      	mov	r1, r2
 800814e:	2200      	movs	r2, #0
 8008150:	602a      	str	r2, [r5, #0]
 8008152:	461a      	mov	r2, r3
 8008154:	f7fa f81b 	bl	800218e <_write>
 8008158:	1c43      	adds	r3, r0, #1
 800815a:	d102      	bne.n	8008162 <_write_r+0x1e>
 800815c:	682b      	ldr	r3, [r5, #0]
 800815e:	b103      	cbz	r3, 8008162 <_write_r+0x1e>
 8008160:	6023      	str	r3, [r4, #0]
 8008162:	bd38      	pop	{r3, r4, r5, pc}
 8008164:	200004b4 	.word	0x200004b4

08008168 <__errno>:
 8008168:	4b01      	ldr	r3, [pc, #4]	@ (8008170 <__errno+0x8>)
 800816a:	6818      	ldr	r0, [r3, #0]
 800816c:	4770      	bx	lr
 800816e:	bf00      	nop
 8008170:	2000001c 	.word	0x2000001c

08008174 <__libc_init_array>:
 8008174:	b570      	push	{r4, r5, r6, lr}
 8008176:	4d0d      	ldr	r5, [pc, #52]	@ (80081ac <__libc_init_array+0x38>)
 8008178:	4c0d      	ldr	r4, [pc, #52]	@ (80081b0 <__libc_init_array+0x3c>)
 800817a:	1b64      	subs	r4, r4, r5
 800817c:	10a4      	asrs	r4, r4, #2
 800817e:	2600      	movs	r6, #0
 8008180:	42a6      	cmp	r6, r4
 8008182:	d109      	bne.n	8008198 <__libc_init_array+0x24>
 8008184:	4d0b      	ldr	r5, [pc, #44]	@ (80081b4 <__libc_init_array+0x40>)
 8008186:	4c0c      	ldr	r4, [pc, #48]	@ (80081b8 <__libc_init_array+0x44>)
 8008188:	f001 f954 	bl	8009434 <_init>
 800818c:	1b64      	subs	r4, r4, r5
 800818e:	10a4      	asrs	r4, r4, #2
 8008190:	2600      	movs	r6, #0
 8008192:	42a6      	cmp	r6, r4
 8008194:	d105      	bne.n	80081a2 <__libc_init_array+0x2e>
 8008196:	bd70      	pop	{r4, r5, r6, pc}
 8008198:	f855 3b04 	ldr.w	r3, [r5], #4
 800819c:	4798      	blx	r3
 800819e:	3601      	adds	r6, #1
 80081a0:	e7ee      	b.n	8008180 <__libc_init_array+0xc>
 80081a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80081a6:	4798      	blx	r3
 80081a8:	3601      	adds	r6, #1
 80081aa:	e7f2      	b.n	8008192 <__libc_init_array+0x1e>
 80081ac:	080097bc 	.word	0x080097bc
 80081b0:	080097bc 	.word	0x080097bc
 80081b4:	080097bc 	.word	0x080097bc
 80081b8:	080097c0 	.word	0x080097c0

080081bc <__retarget_lock_init_recursive>:
 80081bc:	4770      	bx	lr

080081be <__retarget_lock_acquire_recursive>:
 80081be:	4770      	bx	lr

080081c0 <__retarget_lock_release_recursive>:
 80081c0:	4770      	bx	lr
	...

080081c4 <_free_r>:
 80081c4:	b538      	push	{r3, r4, r5, lr}
 80081c6:	4605      	mov	r5, r0
 80081c8:	2900      	cmp	r1, #0
 80081ca:	d041      	beq.n	8008250 <_free_r+0x8c>
 80081cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081d0:	1f0c      	subs	r4, r1, #4
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	bfb8      	it	lt
 80081d6:	18e4      	addlt	r4, r4, r3
 80081d8:	f7ff fd04 	bl	8007be4 <__malloc_lock>
 80081dc:	4a1d      	ldr	r2, [pc, #116]	@ (8008254 <_free_r+0x90>)
 80081de:	6813      	ldr	r3, [r2, #0]
 80081e0:	b933      	cbnz	r3, 80081f0 <_free_r+0x2c>
 80081e2:	6063      	str	r3, [r4, #4]
 80081e4:	6014      	str	r4, [r2, #0]
 80081e6:	4628      	mov	r0, r5
 80081e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081ec:	f7ff bd00 	b.w	8007bf0 <__malloc_unlock>
 80081f0:	42a3      	cmp	r3, r4
 80081f2:	d908      	bls.n	8008206 <_free_r+0x42>
 80081f4:	6820      	ldr	r0, [r4, #0]
 80081f6:	1821      	adds	r1, r4, r0
 80081f8:	428b      	cmp	r3, r1
 80081fa:	bf01      	itttt	eq
 80081fc:	6819      	ldreq	r1, [r3, #0]
 80081fe:	685b      	ldreq	r3, [r3, #4]
 8008200:	1809      	addeq	r1, r1, r0
 8008202:	6021      	streq	r1, [r4, #0]
 8008204:	e7ed      	b.n	80081e2 <_free_r+0x1e>
 8008206:	461a      	mov	r2, r3
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	b10b      	cbz	r3, 8008210 <_free_r+0x4c>
 800820c:	42a3      	cmp	r3, r4
 800820e:	d9fa      	bls.n	8008206 <_free_r+0x42>
 8008210:	6811      	ldr	r1, [r2, #0]
 8008212:	1850      	adds	r0, r2, r1
 8008214:	42a0      	cmp	r0, r4
 8008216:	d10b      	bne.n	8008230 <_free_r+0x6c>
 8008218:	6820      	ldr	r0, [r4, #0]
 800821a:	4401      	add	r1, r0
 800821c:	1850      	adds	r0, r2, r1
 800821e:	4283      	cmp	r3, r0
 8008220:	6011      	str	r1, [r2, #0]
 8008222:	d1e0      	bne.n	80081e6 <_free_r+0x22>
 8008224:	6818      	ldr	r0, [r3, #0]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	6053      	str	r3, [r2, #4]
 800822a:	4408      	add	r0, r1
 800822c:	6010      	str	r0, [r2, #0]
 800822e:	e7da      	b.n	80081e6 <_free_r+0x22>
 8008230:	d902      	bls.n	8008238 <_free_r+0x74>
 8008232:	230c      	movs	r3, #12
 8008234:	602b      	str	r3, [r5, #0]
 8008236:	e7d6      	b.n	80081e6 <_free_r+0x22>
 8008238:	6820      	ldr	r0, [r4, #0]
 800823a:	1821      	adds	r1, r4, r0
 800823c:	428b      	cmp	r3, r1
 800823e:	bf04      	itt	eq
 8008240:	6819      	ldreq	r1, [r3, #0]
 8008242:	685b      	ldreq	r3, [r3, #4]
 8008244:	6063      	str	r3, [r4, #4]
 8008246:	bf04      	itt	eq
 8008248:	1809      	addeq	r1, r1, r0
 800824a:	6021      	streq	r1, [r4, #0]
 800824c:	6054      	str	r4, [r2, #4]
 800824e:	e7ca      	b.n	80081e6 <_free_r+0x22>
 8008250:	bd38      	pop	{r3, r4, r5, pc}
 8008252:	bf00      	nop
 8008254:	20000374 	.word	0x20000374

08008258 <__ssputs_r>:
 8008258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800825c:	688e      	ldr	r6, [r1, #8]
 800825e:	461f      	mov	r7, r3
 8008260:	42be      	cmp	r6, r7
 8008262:	680b      	ldr	r3, [r1, #0]
 8008264:	4682      	mov	sl, r0
 8008266:	460c      	mov	r4, r1
 8008268:	4690      	mov	r8, r2
 800826a:	d82d      	bhi.n	80082c8 <__ssputs_r+0x70>
 800826c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008270:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008274:	d026      	beq.n	80082c4 <__ssputs_r+0x6c>
 8008276:	6965      	ldr	r5, [r4, #20]
 8008278:	6909      	ldr	r1, [r1, #16]
 800827a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800827e:	eba3 0901 	sub.w	r9, r3, r1
 8008282:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008286:	1c7b      	adds	r3, r7, #1
 8008288:	444b      	add	r3, r9
 800828a:	106d      	asrs	r5, r5, #1
 800828c:	429d      	cmp	r5, r3
 800828e:	bf38      	it	cc
 8008290:	461d      	movcc	r5, r3
 8008292:	0553      	lsls	r3, r2, #21
 8008294:	d527      	bpl.n	80082e6 <__ssputs_r+0x8e>
 8008296:	4629      	mov	r1, r5
 8008298:	f7ff fc24 	bl	8007ae4 <_malloc_r>
 800829c:	4606      	mov	r6, r0
 800829e:	b360      	cbz	r0, 80082fa <__ssputs_r+0xa2>
 80082a0:	6921      	ldr	r1, [r4, #16]
 80082a2:	464a      	mov	r2, r9
 80082a4:	f000 ff96 	bl	80091d4 <memcpy>
 80082a8:	89a3      	ldrh	r3, [r4, #12]
 80082aa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80082ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082b2:	81a3      	strh	r3, [r4, #12]
 80082b4:	6126      	str	r6, [r4, #16]
 80082b6:	6165      	str	r5, [r4, #20]
 80082b8:	444e      	add	r6, r9
 80082ba:	eba5 0509 	sub.w	r5, r5, r9
 80082be:	6026      	str	r6, [r4, #0]
 80082c0:	60a5      	str	r5, [r4, #8]
 80082c2:	463e      	mov	r6, r7
 80082c4:	42be      	cmp	r6, r7
 80082c6:	d900      	bls.n	80082ca <__ssputs_r+0x72>
 80082c8:	463e      	mov	r6, r7
 80082ca:	6820      	ldr	r0, [r4, #0]
 80082cc:	4632      	mov	r2, r6
 80082ce:	4641      	mov	r1, r8
 80082d0:	f000 ff43 	bl	800915a <memmove>
 80082d4:	68a3      	ldr	r3, [r4, #8]
 80082d6:	1b9b      	subs	r3, r3, r6
 80082d8:	60a3      	str	r3, [r4, #8]
 80082da:	6823      	ldr	r3, [r4, #0]
 80082dc:	4433      	add	r3, r6
 80082de:	6023      	str	r3, [r4, #0]
 80082e0:	2000      	movs	r0, #0
 80082e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082e6:	462a      	mov	r2, r5
 80082e8:	f000 ff82 	bl	80091f0 <_realloc_r>
 80082ec:	4606      	mov	r6, r0
 80082ee:	2800      	cmp	r0, #0
 80082f0:	d1e0      	bne.n	80082b4 <__ssputs_r+0x5c>
 80082f2:	6921      	ldr	r1, [r4, #16]
 80082f4:	4650      	mov	r0, sl
 80082f6:	f7ff ff65 	bl	80081c4 <_free_r>
 80082fa:	230c      	movs	r3, #12
 80082fc:	f8ca 3000 	str.w	r3, [sl]
 8008300:	89a3      	ldrh	r3, [r4, #12]
 8008302:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008306:	81a3      	strh	r3, [r4, #12]
 8008308:	f04f 30ff 	mov.w	r0, #4294967295
 800830c:	e7e9      	b.n	80082e2 <__ssputs_r+0x8a>
	...

08008310 <_svfiprintf_r>:
 8008310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008314:	4698      	mov	r8, r3
 8008316:	898b      	ldrh	r3, [r1, #12]
 8008318:	061b      	lsls	r3, r3, #24
 800831a:	b09d      	sub	sp, #116	@ 0x74
 800831c:	4607      	mov	r7, r0
 800831e:	460d      	mov	r5, r1
 8008320:	4614      	mov	r4, r2
 8008322:	d510      	bpl.n	8008346 <_svfiprintf_r+0x36>
 8008324:	690b      	ldr	r3, [r1, #16]
 8008326:	b973      	cbnz	r3, 8008346 <_svfiprintf_r+0x36>
 8008328:	2140      	movs	r1, #64	@ 0x40
 800832a:	f7ff fbdb 	bl	8007ae4 <_malloc_r>
 800832e:	6028      	str	r0, [r5, #0]
 8008330:	6128      	str	r0, [r5, #16]
 8008332:	b930      	cbnz	r0, 8008342 <_svfiprintf_r+0x32>
 8008334:	230c      	movs	r3, #12
 8008336:	603b      	str	r3, [r7, #0]
 8008338:	f04f 30ff 	mov.w	r0, #4294967295
 800833c:	b01d      	add	sp, #116	@ 0x74
 800833e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008342:	2340      	movs	r3, #64	@ 0x40
 8008344:	616b      	str	r3, [r5, #20]
 8008346:	2300      	movs	r3, #0
 8008348:	9309      	str	r3, [sp, #36]	@ 0x24
 800834a:	2320      	movs	r3, #32
 800834c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008350:	f8cd 800c 	str.w	r8, [sp, #12]
 8008354:	2330      	movs	r3, #48	@ 0x30
 8008356:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80084f4 <_svfiprintf_r+0x1e4>
 800835a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800835e:	f04f 0901 	mov.w	r9, #1
 8008362:	4623      	mov	r3, r4
 8008364:	469a      	mov	sl, r3
 8008366:	f813 2b01 	ldrb.w	r2, [r3], #1
 800836a:	b10a      	cbz	r2, 8008370 <_svfiprintf_r+0x60>
 800836c:	2a25      	cmp	r2, #37	@ 0x25
 800836e:	d1f9      	bne.n	8008364 <_svfiprintf_r+0x54>
 8008370:	ebba 0b04 	subs.w	fp, sl, r4
 8008374:	d00b      	beq.n	800838e <_svfiprintf_r+0x7e>
 8008376:	465b      	mov	r3, fp
 8008378:	4622      	mov	r2, r4
 800837a:	4629      	mov	r1, r5
 800837c:	4638      	mov	r0, r7
 800837e:	f7ff ff6b 	bl	8008258 <__ssputs_r>
 8008382:	3001      	adds	r0, #1
 8008384:	f000 80a7 	beq.w	80084d6 <_svfiprintf_r+0x1c6>
 8008388:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800838a:	445a      	add	r2, fp
 800838c:	9209      	str	r2, [sp, #36]	@ 0x24
 800838e:	f89a 3000 	ldrb.w	r3, [sl]
 8008392:	2b00      	cmp	r3, #0
 8008394:	f000 809f 	beq.w	80084d6 <_svfiprintf_r+0x1c6>
 8008398:	2300      	movs	r3, #0
 800839a:	f04f 32ff 	mov.w	r2, #4294967295
 800839e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083a2:	f10a 0a01 	add.w	sl, sl, #1
 80083a6:	9304      	str	r3, [sp, #16]
 80083a8:	9307      	str	r3, [sp, #28]
 80083aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80083ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80083b0:	4654      	mov	r4, sl
 80083b2:	2205      	movs	r2, #5
 80083b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083b8:	484e      	ldr	r0, [pc, #312]	@ (80084f4 <_svfiprintf_r+0x1e4>)
 80083ba:	f7f7 ff49 	bl	8000250 <memchr>
 80083be:	9a04      	ldr	r2, [sp, #16]
 80083c0:	b9d8      	cbnz	r0, 80083fa <_svfiprintf_r+0xea>
 80083c2:	06d0      	lsls	r0, r2, #27
 80083c4:	bf44      	itt	mi
 80083c6:	2320      	movmi	r3, #32
 80083c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083cc:	0711      	lsls	r1, r2, #28
 80083ce:	bf44      	itt	mi
 80083d0:	232b      	movmi	r3, #43	@ 0x2b
 80083d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083d6:	f89a 3000 	ldrb.w	r3, [sl]
 80083da:	2b2a      	cmp	r3, #42	@ 0x2a
 80083dc:	d015      	beq.n	800840a <_svfiprintf_r+0xfa>
 80083de:	9a07      	ldr	r2, [sp, #28]
 80083e0:	4654      	mov	r4, sl
 80083e2:	2000      	movs	r0, #0
 80083e4:	f04f 0c0a 	mov.w	ip, #10
 80083e8:	4621      	mov	r1, r4
 80083ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083ee:	3b30      	subs	r3, #48	@ 0x30
 80083f0:	2b09      	cmp	r3, #9
 80083f2:	d94b      	bls.n	800848c <_svfiprintf_r+0x17c>
 80083f4:	b1b0      	cbz	r0, 8008424 <_svfiprintf_r+0x114>
 80083f6:	9207      	str	r2, [sp, #28]
 80083f8:	e014      	b.n	8008424 <_svfiprintf_r+0x114>
 80083fa:	eba0 0308 	sub.w	r3, r0, r8
 80083fe:	fa09 f303 	lsl.w	r3, r9, r3
 8008402:	4313      	orrs	r3, r2
 8008404:	9304      	str	r3, [sp, #16]
 8008406:	46a2      	mov	sl, r4
 8008408:	e7d2      	b.n	80083b0 <_svfiprintf_r+0xa0>
 800840a:	9b03      	ldr	r3, [sp, #12]
 800840c:	1d19      	adds	r1, r3, #4
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	9103      	str	r1, [sp, #12]
 8008412:	2b00      	cmp	r3, #0
 8008414:	bfbb      	ittet	lt
 8008416:	425b      	neglt	r3, r3
 8008418:	f042 0202 	orrlt.w	r2, r2, #2
 800841c:	9307      	strge	r3, [sp, #28]
 800841e:	9307      	strlt	r3, [sp, #28]
 8008420:	bfb8      	it	lt
 8008422:	9204      	strlt	r2, [sp, #16]
 8008424:	7823      	ldrb	r3, [r4, #0]
 8008426:	2b2e      	cmp	r3, #46	@ 0x2e
 8008428:	d10a      	bne.n	8008440 <_svfiprintf_r+0x130>
 800842a:	7863      	ldrb	r3, [r4, #1]
 800842c:	2b2a      	cmp	r3, #42	@ 0x2a
 800842e:	d132      	bne.n	8008496 <_svfiprintf_r+0x186>
 8008430:	9b03      	ldr	r3, [sp, #12]
 8008432:	1d1a      	adds	r2, r3, #4
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	9203      	str	r2, [sp, #12]
 8008438:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800843c:	3402      	adds	r4, #2
 800843e:	9305      	str	r3, [sp, #20]
 8008440:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008504 <_svfiprintf_r+0x1f4>
 8008444:	7821      	ldrb	r1, [r4, #0]
 8008446:	2203      	movs	r2, #3
 8008448:	4650      	mov	r0, sl
 800844a:	f7f7 ff01 	bl	8000250 <memchr>
 800844e:	b138      	cbz	r0, 8008460 <_svfiprintf_r+0x150>
 8008450:	9b04      	ldr	r3, [sp, #16]
 8008452:	eba0 000a 	sub.w	r0, r0, sl
 8008456:	2240      	movs	r2, #64	@ 0x40
 8008458:	4082      	lsls	r2, r0
 800845a:	4313      	orrs	r3, r2
 800845c:	3401      	adds	r4, #1
 800845e:	9304      	str	r3, [sp, #16]
 8008460:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008464:	4824      	ldr	r0, [pc, #144]	@ (80084f8 <_svfiprintf_r+0x1e8>)
 8008466:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800846a:	2206      	movs	r2, #6
 800846c:	f7f7 fef0 	bl	8000250 <memchr>
 8008470:	2800      	cmp	r0, #0
 8008472:	d036      	beq.n	80084e2 <_svfiprintf_r+0x1d2>
 8008474:	4b21      	ldr	r3, [pc, #132]	@ (80084fc <_svfiprintf_r+0x1ec>)
 8008476:	bb1b      	cbnz	r3, 80084c0 <_svfiprintf_r+0x1b0>
 8008478:	9b03      	ldr	r3, [sp, #12]
 800847a:	3307      	adds	r3, #7
 800847c:	f023 0307 	bic.w	r3, r3, #7
 8008480:	3308      	adds	r3, #8
 8008482:	9303      	str	r3, [sp, #12]
 8008484:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008486:	4433      	add	r3, r6
 8008488:	9309      	str	r3, [sp, #36]	@ 0x24
 800848a:	e76a      	b.n	8008362 <_svfiprintf_r+0x52>
 800848c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008490:	460c      	mov	r4, r1
 8008492:	2001      	movs	r0, #1
 8008494:	e7a8      	b.n	80083e8 <_svfiprintf_r+0xd8>
 8008496:	2300      	movs	r3, #0
 8008498:	3401      	adds	r4, #1
 800849a:	9305      	str	r3, [sp, #20]
 800849c:	4619      	mov	r1, r3
 800849e:	f04f 0c0a 	mov.w	ip, #10
 80084a2:	4620      	mov	r0, r4
 80084a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084a8:	3a30      	subs	r2, #48	@ 0x30
 80084aa:	2a09      	cmp	r2, #9
 80084ac:	d903      	bls.n	80084b6 <_svfiprintf_r+0x1a6>
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d0c6      	beq.n	8008440 <_svfiprintf_r+0x130>
 80084b2:	9105      	str	r1, [sp, #20]
 80084b4:	e7c4      	b.n	8008440 <_svfiprintf_r+0x130>
 80084b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80084ba:	4604      	mov	r4, r0
 80084bc:	2301      	movs	r3, #1
 80084be:	e7f0      	b.n	80084a2 <_svfiprintf_r+0x192>
 80084c0:	ab03      	add	r3, sp, #12
 80084c2:	9300      	str	r3, [sp, #0]
 80084c4:	462a      	mov	r2, r5
 80084c6:	4b0e      	ldr	r3, [pc, #56]	@ (8008500 <_svfiprintf_r+0x1f0>)
 80084c8:	a904      	add	r1, sp, #16
 80084ca:	4638      	mov	r0, r7
 80084cc:	f3af 8000 	nop.w
 80084d0:	1c42      	adds	r2, r0, #1
 80084d2:	4606      	mov	r6, r0
 80084d4:	d1d6      	bne.n	8008484 <_svfiprintf_r+0x174>
 80084d6:	89ab      	ldrh	r3, [r5, #12]
 80084d8:	065b      	lsls	r3, r3, #25
 80084da:	f53f af2d 	bmi.w	8008338 <_svfiprintf_r+0x28>
 80084de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80084e0:	e72c      	b.n	800833c <_svfiprintf_r+0x2c>
 80084e2:	ab03      	add	r3, sp, #12
 80084e4:	9300      	str	r3, [sp, #0]
 80084e6:	462a      	mov	r2, r5
 80084e8:	4b05      	ldr	r3, [pc, #20]	@ (8008500 <_svfiprintf_r+0x1f0>)
 80084ea:	a904      	add	r1, sp, #16
 80084ec:	4638      	mov	r0, r7
 80084ee:	f000 fa45 	bl	800897c <_printf_i>
 80084f2:	e7ed      	b.n	80084d0 <_svfiprintf_r+0x1c0>
 80084f4:	08009664 	.word	0x08009664
 80084f8:	0800966e 	.word	0x0800966e
 80084fc:	00000000 	.word	0x00000000
 8008500:	08008259 	.word	0x08008259
 8008504:	0800966a 	.word	0x0800966a

08008508 <_sungetc_r>:
 8008508:	b538      	push	{r3, r4, r5, lr}
 800850a:	1c4b      	adds	r3, r1, #1
 800850c:	4614      	mov	r4, r2
 800850e:	d103      	bne.n	8008518 <_sungetc_r+0x10>
 8008510:	f04f 35ff 	mov.w	r5, #4294967295
 8008514:	4628      	mov	r0, r5
 8008516:	bd38      	pop	{r3, r4, r5, pc}
 8008518:	8993      	ldrh	r3, [r2, #12]
 800851a:	f023 0320 	bic.w	r3, r3, #32
 800851e:	8193      	strh	r3, [r2, #12]
 8008520:	6853      	ldr	r3, [r2, #4]
 8008522:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008524:	b2cd      	uxtb	r5, r1
 8008526:	b18a      	cbz	r2, 800854c <_sungetc_r+0x44>
 8008528:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800852a:	429a      	cmp	r2, r3
 800852c:	dd08      	ble.n	8008540 <_sungetc_r+0x38>
 800852e:	6823      	ldr	r3, [r4, #0]
 8008530:	1e5a      	subs	r2, r3, #1
 8008532:	6022      	str	r2, [r4, #0]
 8008534:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008538:	6863      	ldr	r3, [r4, #4]
 800853a:	3301      	adds	r3, #1
 800853c:	6063      	str	r3, [r4, #4]
 800853e:	e7e9      	b.n	8008514 <_sungetc_r+0xc>
 8008540:	4621      	mov	r1, r4
 8008542:	f000 fdd0 	bl	80090e6 <__submore>
 8008546:	2800      	cmp	r0, #0
 8008548:	d0f1      	beq.n	800852e <_sungetc_r+0x26>
 800854a:	e7e1      	b.n	8008510 <_sungetc_r+0x8>
 800854c:	6921      	ldr	r1, [r4, #16]
 800854e:	6822      	ldr	r2, [r4, #0]
 8008550:	b141      	cbz	r1, 8008564 <_sungetc_r+0x5c>
 8008552:	4291      	cmp	r1, r2
 8008554:	d206      	bcs.n	8008564 <_sungetc_r+0x5c>
 8008556:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800855a:	42a9      	cmp	r1, r5
 800855c:	d102      	bne.n	8008564 <_sungetc_r+0x5c>
 800855e:	3a01      	subs	r2, #1
 8008560:	6022      	str	r2, [r4, #0]
 8008562:	e7ea      	b.n	800853a <_sungetc_r+0x32>
 8008564:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8008568:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800856c:	6363      	str	r3, [r4, #52]	@ 0x34
 800856e:	2303      	movs	r3, #3
 8008570:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008572:	4623      	mov	r3, r4
 8008574:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008578:	6023      	str	r3, [r4, #0]
 800857a:	2301      	movs	r3, #1
 800857c:	e7de      	b.n	800853c <_sungetc_r+0x34>

0800857e <__ssrefill_r>:
 800857e:	b510      	push	{r4, lr}
 8008580:	460c      	mov	r4, r1
 8008582:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8008584:	b169      	cbz	r1, 80085a2 <__ssrefill_r+0x24>
 8008586:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800858a:	4299      	cmp	r1, r3
 800858c:	d001      	beq.n	8008592 <__ssrefill_r+0x14>
 800858e:	f7ff fe19 	bl	80081c4 <_free_r>
 8008592:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008594:	6063      	str	r3, [r4, #4]
 8008596:	2000      	movs	r0, #0
 8008598:	6360      	str	r0, [r4, #52]	@ 0x34
 800859a:	b113      	cbz	r3, 80085a2 <__ssrefill_r+0x24>
 800859c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800859e:	6023      	str	r3, [r4, #0]
 80085a0:	bd10      	pop	{r4, pc}
 80085a2:	6923      	ldr	r3, [r4, #16]
 80085a4:	6023      	str	r3, [r4, #0]
 80085a6:	2300      	movs	r3, #0
 80085a8:	6063      	str	r3, [r4, #4]
 80085aa:	89a3      	ldrh	r3, [r4, #12]
 80085ac:	f043 0320 	orr.w	r3, r3, #32
 80085b0:	81a3      	strh	r3, [r4, #12]
 80085b2:	f04f 30ff 	mov.w	r0, #4294967295
 80085b6:	e7f3      	b.n	80085a0 <__ssrefill_r+0x22>

080085b8 <__ssvfiscanf_r>:
 80085b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085bc:	460c      	mov	r4, r1
 80085be:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80085c2:	2100      	movs	r1, #0
 80085c4:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80085c8:	49a5      	ldr	r1, [pc, #660]	@ (8008860 <__ssvfiscanf_r+0x2a8>)
 80085ca:	91a0      	str	r1, [sp, #640]	@ 0x280
 80085cc:	f10d 0804 	add.w	r8, sp, #4
 80085d0:	49a4      	ldr	r1, [pc, #656]	@ (8008864 <__ssvfiscanf_r+0x2ac>)
 80085d2:	4fa5      	ldr	r7, [pc, #660]	@ (8008868 <__ssvfiscanf_r+0x2b0>)
 80085d4:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80085d8:	4606      	mov	r6, r0
 80085da:	91a1      	str	r1, [sp, #644]	@ 0x284
 80085dc:	9300      	str	r3, [sp, #0]
 80085de:	7813      	ldrb	r3, [r2, #0]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	f000 8158 	beq.w	8008896 <__ssvfiscanf_r+0x2de>
 80085e6:	5cf9      	ldrb	r1, [r7, r3]
 80085e8:	f011 0108 	ands.w	r1, r1, #8
 80085ec:	f102 0501 	add.w	r5, r2, #1
 80085f0:	d019      	beq.n	8008626 <__ssvfiscanf_r+0x6e>
 80085f2:	6863      	ldr	r3, [r4, #4]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	dd0f      	ble.n	8008618 <__ssvfiscanf_r+0x60>
 80085f8:	6823      	ldr	r3, [r4, #0]
 80085fa:	781a      	ldrb	r2, [r3, #0]
 80085fc:	5cba      	ldrb	r2, [r7, r2]
 80085fe:	0712      	lsls	r2, r2, #28
 8008600:	d401      	bmi.n	8008606 <__ssvfiscanf_r+0x4e>
 8008602:	462a      	mov	r2, r5
 8008604:	e7eb      	b.n	80085de <__ssvfiscanf_r+0x26>
 8008606:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008608:	3201      	adds	r2, #1
 800860a:	9245      	str	r2, [sp, #276]	@ 0x114
 800860c:	6862      	ldr	r2, [r4, #4]
 800860e:	3301      	adds	r3, #1
 8008610:	3a01      	subs	r2, #1
 8008612:	6062      	str	r2, [r4, #4]
 8008614:	6023      	str	r3, [r4, #0]
 8008616:	e7ec      	b.n	80085f2 <__ssvfiscanf_r+0x3a>
 8008618:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800861a:	4621      	mov	r1, r4
 800861c:	4630      	mov	r0, r6
 800861e:	4798      	blx	r3
 8008620:	2800      	cmp	r0, #0
 8008622:	d0e9      	beq.n	80085f8 <__ssvfiscanf_r+0x40>
 8008624:	e7ed      	b.n	8008602 <__ssvfiscanf_r+0x4a>
 8008626:	2b25      	cmp	r3, #37	@ 0x25
 8008628:	d012      	beq.n	8008650 <__ssvfiscanf_r+0x98>
 800862a:	4699      	mov	r9, r3
 800862c:	6863      	ldr	r3, [r4, #4]
 800862e:	2b00      	cmp	r3, #0
 8008630:	f340 8093 	ble.w	800875a <__ssvfiscanf_r+0x1a2>
 8008634:	6822      	ldr	r2, [r4, #0]
 8008636:	7813      	ldrb	r3, [r2, #0]
 8008638:	454b      	cmp	r3, r9
 800863a:	f040 812c 	bne.w	8008896 <__ssvfiscanf_r+0x2de>
 800863e:	6863      	ldr	r3, [r4, #4]
 8008640:	3b01      	subs	r3, #1
 8008642:	6063      	str	r3, [r4, #4]
 8008644:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8008646:	3201      	adds	r2, #1
 8008648:	3301      	adds	r3, #1
 800864a:	6022      	str	r2, [r4, #0]
 800864c:	9345      	str	r3, [sp, #276]	@ 0x114
 800864e:	e7d8      	b.n	8008602 <__ssvfiscanf_r+0x4a>
 8008650:	9141      	str	r1, [sp, #260]	@ 0x104
 8008652:	9143      	str	r1, [sp, #268]	@ 0x10c
 8008654:	7853      	ldrb	r3, [r2, #1]
 8008656:	2b2a      	cmp	r3, #42	@ 0x2a
 8008658:	bf02      	ittt	eq
 800865a:	2310      	moveq	r3, #16
 800865c:	1c95      	addeq	r5, r2, #2
 800865e:	9341      	streq	r3, [sp, #260]	@ 0x104
 8008660:	220a      	movs	r2, #10
 8008662:	46a9      	mov	r9, r5
 8008664:	f819 1b01 	ldrb.w	r1, [r9], #1
 8008668:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800866c:	2b09      	cmp	r3, #9
 800866e:	d91e      	bls.n	80086ae <__ssvfiscanf_r+0xf6>
 8008670:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800886c <__ssvfiscanf_r+0x2b4>
 8008674:	2203      	movs	r2, #3
 8008676:	4650      	mov	r0, sl
 8008678:	f7f7 fdea 	bl	8000250 <memchr>
 800867c:	b138      	cbz	r0, 800868e <__ssvfiscanf_r+0xd6>
 800867e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008680:	eba0 000a 	sub.w	r0, r0, sl
 8008684:	2301      	movs	r3, #1
 8008686:	4083      	lsls	r3, r0
 8008688:	4313      	orrs	r3, r2
 800868a:	9341      	str	r3, [sp, #260]	@ 0x104
 800868c:	464d      	mov	r5, r9
 800868e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008692:	2b78      	cmp	r3, #120	@ 0x78
 8008694:	d806      	bhi.n	80086a4 <__ssvfiscanf_r+0xec>
 8008696:	2b57      	cmp	r3, #87	@ 0x57
 8008698:	d810      	bhi.n	80086bc <__ssvfiscanf_r+0x104>
 800869a:	2b25      	cmp	r3, #37	@ 0x25
 800869c:	d0c5      	beq.n	800862a <__ssvfiscanf_r+0x72>
 800869e:	d857      	bhi.n	8008750 <__ssvfiscanf_r+0x198>
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d065      	beq.n	8008770 <__ssvfiscanf_r+0x1b8>
 80086a4:	2303      	movs	r3, #3
 80086a6:	9347      	str	r3, [sp, #284]	@ 0x11c
 80086a8:	230a      	movs	r3, #10
 80086aa:	9342      	str	r3, [sp, #264]	@ 0x108
 80086ac:	e078      	b.n	80087a0 <__ssvfiscanf_r+0x1e8>
 80086ae:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80086b0:	fb02 1103 	mla	r1, r2, r3, r1
 80086b4:	3930      	subs	r1, #48	@ 0x30
 80086b6:	9143      	str	r1, [sp, #268]	@ 0x10c
 80086b8:	464d      	mov	r5, r9
 80086ba:	e7d2      	b.n	8008662 <__ssvfiscanf_r+0xaa>
 80086bc:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80086c0:	2a20      	cmp	r2, #32
 80086c2:	d8ef      	bhi.n	80086a4 <__ssvfiscanf_r+0xec>
 80086c4:	a101      	add	r1, pc, #4	@ (adr r1, 80086cc <__ssvfiscanf_r+0x114>)
 80086c6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80086ca:	bf00      	nop
 80086cc:	0800877f 	.word	0x0800877f
 80086d0:	080086a5 	.word	0x080086a5
 80086d4:	080086a5 	.word	0x080086a5
 80086d8:	080087d9 	.word	0x080087d9
 80086dc:	080086a5 	.word	0x080086a5
 80086e0:	080086a5 	.word	0x080086a5
 80086e4:	080086a5 	.word	0x080086a5
 80086e8:	080086a5 	.word	0x080086a5
 80086ec:	080086a5 	.word	0x080086a5
 80086f0:	080086a5 	.word	0x080086a5
 80086f4:	080086a5 	.word	0x080086a5
 80086f8:	080087ef 	.word	0x080087ef
 80086fc:	080087d5 	.word	0x080087d5
 8008700:	08008757 	.word	0x08008757
 8008704:	08008757 	.word	0x08008757
 8008708:	08008757 	.word	0x08008757
 800870c:	080086a5 	.word	0x080086a5
 8008710:	08008791 	.word	0x08008791
 8008714:	080086a5 	.word	0x080086a5
 8008718:	080086a5 	.word	0x080086a5
 800871c:	080086a5 	.word	0x080086a5
 8008720:	080086a5 	.word	0x080086a5
 8008724:	080087ff 	.word	0x080087ff
 8008728:	08008799 	.word	0x08008799
 800872c:	08008777 	.word	0x08008777
 8008730:	080086a5 	.word	0x080086a5
 8008734:	080086a5 	.word	0x080086a5
 8008738:	080087fb 	.word	0x080087fb
 800873c:	080086a5 	.word	0x080086a5
 8008740:	080087d5 	.word	0x080087d5
 8008744:	080086a5 	.word	0x080086a5
 8008748:	080086a5 	.word	0x080086a5
 800874c:	0800877f 	.word	0x0800877f
 8008750:	3b45      	subs	r3, #69	@ 0x45
 8008752:	2b02      	cmp	r3, #2
 8008754:	d8a6      	bhi.n	80086a4 <__ssvfiscanf_r+0xec>
 8008756:	2305      	movs	r3, #5
 8008758:	e021      	b.n	800879e <__ssvfiscanf_r+0x1e6>
 800875a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800875c:	4621      	mov	r1, r4
 800875e:	4630      	mov	r0, r6
 8008760:	4798      	blx	r3
 8008762:	2800      	cmp	r0, #0
 8008764:	f43f af66 	beq.w	8008634 <__ssvfiscanf_r+0x7c>
 8008768:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800876a:	2800      	cmp	r0, #0
 800876c:	f040 808b 	bne.w	8008886 <__ssvfiscanf_r+0x2ce>
 8008770:	f04f 30ff 	mov.w	r0, #4294967295
 8008774:	e08b      	b.n	800888e <__ssvfiscanf_r+0x2d6>
 8008776:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008778:	f042 0220 	orr.w	r2, r2, #32
 800877c:	9241      	str	r2, [sp, #260]	@ 0x104
 800877e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008780:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008784:	9241      	str	r2, [sp, #260]	@ 0x104
 8008786:	2210      	movs	r2, #16
 8008788:	2b6e      	cmp	r3, #110	@ 0x6e
 800878a:	9242      	str	r2, [sp, #264]	@ 0x108
 800878c:	d902      	bls.n	8008794 <__ssvfiscanf_r+0x1dc>
 800878e:	e005      	b.n	800879c <__ssvfiscanf_r+0x1e4>
 8008790:	2300      	movs	r3, #0
 8008792:	9342      	str	r3, [sp, #264]	@ 0x108
 8008794:	2303      	movs	r3, #3
 8008796:	e002      	b.n	800879e <__ssvfiscanf_r+0x1e6>
 8008798:	2308      	movs	r3, #8
 800879a:	9342      	str	r3, [sp, #264]	@ 0x108
 800879c:	2304      	movs	r3, #4
 800879e:	9347      	str	r3, [sp, #284]	@ 0x11c
 80087a0:	6863      	ldr	r3, [r4, #4]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	dd39      	ble.n	800881a <__ssvfiscanf_r+0x262>
 80087a6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80087a8:	0659      	lsls	r1, r3, #25
 80087aa:	d404      	bmi.n	80087b6 <__ssvfiscanf_r+0x1fe>
 80087ac:	6823      	ldr	r3, [r4, #0]
 80087ae:	781a      	ldrb	r2, [r3, #0]
 80087b0:	5cba      	ldrb	r2, [r7, r2]
 80087b2:	0712      	lsls	r2, r2, #28
 80087b4:	d438      	bmi.n	8008828 <__ssvfiscanf_r+0x270>
 80087b6:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80087b8:	2b02      	cmp	r3, #2
 80087ba:	dc47      	bgt.n	800884c <__ssvfiscanf_r+0x294>
 80087bc:	466b      	mov	r3, sp
 80087be:	4622      	mov	r2, r4
 80087c0:	a941      	add	r1, sp, #260	@ 0x104
 80087c2:	4630      	mov	r0, r6
 80087c4:	f000 f9fa 	bl	8008bbc <_scanf_chars>
 80087c8:	2801      	cmp	r0, #1
 80087ca:	d064      	beq.n	8008896 <__ssvfiscanf_r+0x2de>
 80087cc:	2802      	cmp	r0, #2
 80087ce:	f47f af18 	bne.w	8008602 <__ssvfiscanf_r+0x4a>
 80087d2:	e7c9      	b.n	8008768 <__ssvfiscanf_r+0x1b0>
 80087d4:	220a      	movs	r2, #10
 80087d6:	e7d7      	b.n	8008788 <__ssvfiscanf_r+0x1d0>
 80087d8:	4629      	mov	r1, r5
 80087da:	4640      	mov	r0, r8
 80087dc:	f000 fc4a 	bl	8009074 <__sccl>
 80087e0:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80087e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087e6:	9341      	str	r3, [sp, #260]	@ 0x104
 80087e8:	4605      	mov	r5, r0
 80087ea:	2301      	movs	r3, #1
 80087ec:	e7d7      	b.n	800879e <__ssvfiscanf_r+0x1e6>
 80087ee:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80087f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087f4:	9341      	str	r3, [sp, #260]	@ 0x104
 80087f6:	2300      	movs	r3, #0
 80087f8:	e7d1      	b.n	800879e <__ssvfiscanf_r+0x1e6>
 80087fa:	2302      	movs	r3, #2
 80087fc:	e7cf      	b.n	800879e <__ssvfiscanf_r+0x1e6>
 80087fe:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8008800:	06c3      	lsls	r3, r0, #27
 8008802:	f53f aefe 	bmi.w	8008602 <__ssvfiscanf_r+0x4a>
 8008806:	9b00      	ldr	r3, [sp, #0]
 8008808:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800880a:	1d19      	adds	r1, r3, #4
 800880c:	9100      	str	r1, [sp, #0]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	07c0      	lsls	r0, r0, #31
 8008812:	bf4c      	ite	mi
 8008814:	801a      	strhmi	r2, [r3, #0]
 8008816:	601a      	strpl	r2, [r3, #0]
 8008818:	e6f3      	b.n	8008602 <__ssvfiscanf_r+0x4a>
 800881a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800881c:	4621      	mov	r1, r4
 800881e:	4630      	mov	r0, r6
 8008820:	4798      	blx	r3
 8008822:	2800      	cmp	r0, #0
 8008824:	d0bf      	beq.n	80087a6 <__ssvfiscanf_r+0x1ee>
 8008826:	e79f      	b.n	8008768 <__ssvfiscanf_r+0x1b0>
 8008828:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800882a:	3201      	adds	r2, #1
 800882c:	9245      	str	r2, [sp, #276]	@ 0x114
 800882e:	6862      	ldr	r2, [r4, #4]
 8008830:	3a01      	subs	r2, #1
 8008832:	2a00      	cmp	r2, #0
 8008834:	6062      	str	r2, [r4, #4]
 8008836:	dd02      	ble.n	800883e <__ssvfiscanf_r+0x286>
 8008838:	3301      	adds	r3, #1
 800883a:	6023      	str	r3, [r4, #0]
 800883c:	e7b6      	b.n	80087ac <__ssvfiscanf_r+0x1f4>
 800883e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008840:	4621      	mov	r1, r4
 8008842:	4630      	mov	r0, r6
 8008844:	4798      	blx	r3
 8008846:	2800      	cmp	r0, #0
 8008848:	d0b0      	beq.n	80087ac <__ssvfiscanf_r+0x1f4>
 800884a:	e78d      	b.n	8008768 <__ssvfiscanf_r+0x1b0>
 800884c:	2b04      	cmp	r3, #4
 800884e:	dc0f      	bgt.n	8008870 <__ssvfiscanf_r+0x2b8>
 8008850:	466b      	mov	r3, sp
 8008852:	4622      	mov	r2, r4
 8008854:	a941      	add	r1, sp, #260	@ 0x104
 8008856:	4630      	mov	r0, r6
 8008858:	f000 fa0a 	bl	8008c70 <_scanf_i>
 800885c:	e7b4      	b.n	80087c8 <__ssvfiscanf_r+0x210>
 800885e:	bf00      	nop
 8008860:	08008509 	.word	0x08008509
 8008864:	0800857f 	.word	0x0800857f
 8008868:	080096b3 	.word	0x080096b3
 800886c:	0800966a 	.word	0x0800966a
 8008870:	4b0a      	ldr	r3, [pc, #40]	@ (800889c <__ssvfiscanf_r+0x2e4>)
 8008872:	2b00      	cmp	r3, #0
 8008874:	f43f aec5 	beq.w	8008602 <__ssvfiscanf_r+0x4a>
 8008878:	466b      	mov	r3, sp
 800887a:	4622      	mov	r2, r4
 800887c:	a941      	add	r1, sp, #260	@ 0x104
 800887e:	4630      	mov	r0, r6
 8008880:	f3af 8000 	nop.w
 8008884:	e7a0      	b.n	80087c8 <__ssvfiscanf_r+0x210>
 8008886:	89a3      	ldrh	r3, [r4, #12]
 8008888:	065b      	lsls	r3, r3, #25
 800888a:	f53f af71 	bmi.w	8008770 <__ssvfiscanf_r+0x1b8>
 800888e:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8008892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008896:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8008898:	e7f9      	b.n	800888e <__ssvfiscanf_r+0x2d6>
 800889a:	bf00      	nop
 800889c:	00000000 	.word	0x00000000

080088a0 <_printf_common>:
 80088a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088a4:	4616      	mov	r6, r2
 80088a6:	4698      	mov	r8, r3
 80088a8:	688a      	ldr	r2, [r1, #8]
 80088aa:	690b      	ldr	r3, [r1, #16]
 80088ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80088b0:	4293      	cmp	r3, r2
 80088b2:	bfb8      	it	lt
 80088b4:	4613      	movlt	r3, r2
 80088b6:	6033      	str	r3, [r6, #0]
 80088b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80088bc:	4607      	mov	r7, r0
 80088be:	460c      	mov	r4, r1
 80088c0:	b10a      	cbz	r2, 80088c6 <_printf_common+0x26>
 80088c2:	3301      	adds	r3, #1
 80088c4:	6033      	str	r3, [r6, #0]
 80088c6:	6823      	ldr	r3, [r4, #0]
 80088c8:	0699      	lsls	r1, r3, #26
 80088ca:	bf42      	ittt	mi
 80088cc:	6833      	ldrmi	r3, [r6, #0]
 80088ce:	3302      	addmi	r3, #2
 80088d0:	6033      	strmi	r3, [r6, #0]
 80088d2:	6825      	ldr	r5, [r4, #0]
 80088d4:	f015 0506 	ands.w	r5, r5, #6
 80088d8:	d106      	bne.n	80088e8 <_printf_common+0x48>
 80088da:	f104 0a19 	add.w	sl, r4, #25
 80088de:	68e3      	ldr	r3, [r4, #12]
 80088e0:	6832      	ldr	r2, [r6, #0]
 80088e2:	1a9b      	subs	r3, r3, r2
 80088e4:	42ab      	cmp	r3, r5
 80088e6:	dc26      	bgt.n	8008936 <_printf_common+0x96>
 80088e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80088ec:	6822      	ldr	r2, [r4, #0]
 80088ee:	3b00      	subs	r3, #0
 80088f0:	bf18      	it	ne
 80088f2:	2301      	movne	r3, #1
 80088f4:	0692      	lsls	r2, r2, #26
 80088f6:	d42b      	bmi.n	8008950 <_printf_common+0xb0>
 80088f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80088fc:	4641      	mov	r1, r8
 80088fe:	4638      	mov	r0, r7
 8008900:	47c8      	blx	r9
 8008902:	3001      	adds	r0, #1
 8008904:	d01e      	beq.n	8008944 <_printf_common+0xa4>
 8008906:	6823      	ldr	r3, [r4, #0]
 8008908:	6922      	ldr	r2, [r4, #16]
 800890a:	f003 0306 	and.w	r3, r3, #6
 800890e:	2b04      	cmp	r3, #4
 8008910:	bf02      	ittt	eq
 8008912:	68e5      	ldreq	r5, [r4, #12]
 8008914:	6833      	ldreq	r3, [r6, #0]
 8008916:	1aed      	subeq	r5, r5, r3
 8008918:	68a3      	ldr	r3, [r4, #8]
 800891a:	bf0c      	ite	eq
 800891c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008920:	2500      	movne	r5, #0
 8008922:	4293      	cmp	r3, r2
 8008924:	bfc4      	itt	gt
 8008926:	1a9b      	subgt	r3, r3, r2
 8008928:	18ed      	addgt	r5, r5, r3
 800892a:	2600      	movs	r6, #0
 800892c:	341a      	adds	r4, #26
 800892e:	42b5      	cmp	r5, r6
 8008930:	d11a      	bne.n	8008968 <_printf_common+0xc8>
 8008932:	2000      	movs	r0, #0
 8008934:	e008      	b.n	8008948 <_printf_common+0xa8>
 8008936:	2301      	movs	r3, #1
 8008938:	4652      	mov	r2, sl
 800893a:	4641      	mov	r1, r8
 800893c:	4638      	mov	r0, r7
 800893e:	47c8      	blx	r9
 8008940:	3001      	adds	r0, #1
 8008942:	d103      	bne.n	800894c <_printf_common+0xac>
 8008944:	f04f 30ff 	mov.w	r0, #4294967295
 8008948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800894c:	3501      	adds	r5, #1
 800894e:	e7c6      	b.n	80088de <_printf_common+0x3e>
 8008950:	18e1      	adds	r1, r4, r3
 8008952:	1c5a      	adds	r2, r3, #1
 8008954:	2030      	movs	r0, #48	@ 0x30
 8008956:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800895a:	4422      	add	r2, r4
 800895c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008960:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008964:	3302      	adds	r3, #2
 8008966:	e7c7      	b.n	80088f8 <_printf_common+0x58>
 8008968:	2301      	movs	r3, #1
 800896a:	4622      	mov	r2, r4
 800896c:	4641      	mov	r1, r8
 800896e:	4638      	mov	r0, r7
 8008970:	47c8      	blx	r9
 8008972:	3001      	adds	r0, #1
 8008974:	d0e6      	beq.n	8008944 <_printf_common+0xa4>
 8008976:	3601      	adds	r6, #1
 8008978:	e7d9      	b.n	800892e <_printf_common+0x8e>
	...

0800897c <_printf_i>:
 800897c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008980:	7e0f      	ldrb	r7, [r1, #24]
 8008982:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008984:	2f78      	cmp	r7, #120	@ 0x78
 8008986:	4691      	mov	r9, r2
 8008988:	4680      	mov	r8, r0
 800898a:	460c      	mov	r4, r1
 800898c:	469a      	mov	sl, r3
 800898e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008992:	d807      	bhi.n	80089a4 <_printf_i+0x28>
 8008994:	2f62      	cmp	r7, #98	@ 0x62
 8008996:	d80a      	bhi.n	80089ae <_printf_i+0x32>
 8008998:	2f00      	cmp	r7, #0
 800899a:	f000 80d2 	beq.w	8008b42 <_printf_i+0x1c6>
 800899e:	2f58      	cmp	r7, #88	@ 0x58
 80089a0:	f000 80b9 	beq.w	8008b16 <_printf_i+0x19a>
 80089a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80089a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80089ac:	e03a      	b.n	8008a24 <_printf_i+0xa8>
 80089ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80089b2:	2b15      	cmp	r3, #21
 80089b4:	d8f6      	bhi.n	80089a4 <_printf_i+0x28>
 80089b6:	a101      	add	r1, pc, #4	@ (adr r1, 80089bc <_printf_i+0x40>)
 80089b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80089bc:	08008a15 	.word	0x08008a15
 80089c0:	08008a29 	.word	0x08008a29
 80089c4:	080089a5 	.word	0x080089a5
 80089c8:	080089a5 	.word	0x080089a5
 80089cc:	080089a5 	.word	0x080089a5
 80089d0:	080089a5 	.word	0x080089a5
 80089d4:	08008a29 	.word	0x08008a29
 80089d8:	080089a5 	.word	0x080089a5
 80089dc:	080089a5 	.word	0x080089a5
 80089e0:	080089a5 	.word	0x080089a5
 80089e4:	080089a5 	.word	0x080089a5
 80089e8:	08008b29 	.word	0x08008b29
 80089ec:	08008a53 	.word	0x08008a53
 80089f0:	08008ae3 	.word	0x08008ae3
 80089f4:	080089a5 	.word	0x080089a5
 80089f8:	080089a5 	.word	0x080089a5
 80089fc:	08008b4b 	.word	0x08008b4b
 8008a00:	080089a5 	.word	0x080089a5
 8008a04:	08008a53 	.word	0x08008a53
 8008a08:	080089a5 	.word	0x080089a5
 8008a0c:	080089a5 	.word	0x080089a5
 8008a10:	08008aeb 	.word	0x08008aeb
 8008a14:	6833      	ldr	r3, [r6, #0]
 8008a16:	1d1a      	adds	r2, r3, #4
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	6032      	str	r2, [r6, #0]
 8008a1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a20:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008a24:	2301      	movs	r3, #1
 8008a26:	e09d      	b.n	8008b64 <_printf_i+0x1e8>
 8008a28:	6833      	ldr	r3, [r6, #0]
 8008a2a:	6820      	ldr	r0, [r4, #0]
 8008a2c:	1d19      	adds	r1, r3, #4
 8008a2e:	6031      	str	r1, [r6, #0]
 8008a30:	0606      	lsls	r6, r0, #24
 8008a32:	d501      	bpl.n	8008a38 <_printf_i+0xbc>
 8008a34:	681d      	ldr	r5, [r3, #0]
 8008a36:	e003      	b.n	8008a40 <_printf_i+0xc4>
 8008a38:	0645      	lsls	r5, r0, #25
 8008a3a:	d5fb      	bpl.n	8008a34 <_printf_i+0xb8>
 8008a3c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008a40:	2d00      	cmp	r5, #0
 8008a42:	da03      	bge.n	8008a4c <_printf_i+0xd0>
 8008a44:	232d      	movs	r3, #45	@ 0x2d
 8008a46:	426d      	negs	r5, r5
 8008a48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a4c:	4859      	ldr	r0, [pc, #356]	@ (8008bb4 <_printf_i+0x238>)
 8008a4e:	230a      	movs	r3, #10
 8008a50:	e011      	b.n	8008a76 <_printf_i+0xfa>
 8008a52:	6821      	ldr	r1, [r4, #0]
 8008a54:	6833      	ldr	r3, [r6, #0]
 8008a56:	0608      	lsls	r0, r1, #24
 8008a58:	f853 5b04 	ldr.w	r5, [r3], #4
 8008a5c:	d402      	bmi.n	8008a64 <_printf_i+0xe8>
 8008a5e:	0649      	lsls	r1, r1, #25
 8008a60:	bf48      	it	mi
 8008a62:	b2ad      	uxthmi	r5, r5
 8008a64:	2f6f      	cmp	r7, #111	@ 0x6f
 8008a66:	4853      	ldr	r0, [pc, #332]	@ (8008bb4 <_printf_i+0x238>)
 8008a68:	6033      	str	r3, [r6, #0]
 8008a6a:	bf14      	ite	ne
 8008a6c:	230a      	movne	r3, #10
 8008a6e:	2308      	moveq	r3, #8
 8008a70:	2100      	movs	r1, #0
 8008a72:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008a76:	6866      	ldr	r6, [r4, #4]
 8008a78:	60a6      	str	r6, [r4, #8]
 8008a7a:	2e00      	cmp	r6, #0
 8008a7c:	bfa2      	ittt	ge
 8008a7e:	6821      	ldrge	r1, [r4, #0]
 8008a80:	f021 0104 	bicge.w	r1, r1, #4
 8008a84:	6021      	strge	r1, [r4, #0]
 8008a86:	b90d      	cbnz	r5, 8008a8c <_printf_i+0x110>
 8008a88:	2e00      	cmp	r6, #0
 8008a8a:	d04b      	beq.n	8008b24 <_printf_i+0x1a8>
 8008a8c:	4616      	mov	r6, r2
 8008a8e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008a92:	fb03 5711 	mls	r7, r3, r1, r5
 8008a96:	5dc7      	ldrb	r7, [r0, r7]
 8008a98:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008a9c:	462f      	mov	r7, r5
 8008a9e:	42bb      	cmp	r3, r7
 8008aa0:	460d      	mov	r5, r1
 8008aa2:	d9f4      	bls.n	8008a8e <_printf_i+0x112>
 8008aa4:	2b08      	cmp	r3, #8
 8008aa6:	d10b      	bne.n	8008ac0 <_printf_i+0x144>
 8008aa8:	6823      	ldr	r3, [r4, #0]
 8008aaa:	07df      	lsls	r7, r3, #31
 8008aac:	d508      	bpl.n	8008ac0 <_printf_i+0x144>
 8008aae:	6923      	ldr	r3, [r4, #16]
 8008ab0:	6861      	ldr	r1, [r4, #4]
 8008ab2:	4299      	cmp	r1, r3
 8008ab4:	bfde      	ittt	le
 8008ab6:	2330      	movle	r3, #48	@ 0x30
 8008ab8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008abc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008ac0:	1b92      	subs	r2, r2, r6
 8008ac2:	6122      	str	r2, [r4, #16]
 8008ac4:	f8cd a000 	str.w	sl, [sp]
 8008ac8:	464b      	mov	r3, r9
 8008aca:	aa03      	add	r2, sp, #12
 8008acc:	4621      	mov	r1, r4
 8008ace:	4640      	mov	r0, r8
 8008ad0:	f7ff fee6 	bl	80088a0 <_printf_common>
 8008ad4:	3001      	adds	r0, #1
 8008ad6:	d14a      	bne.n	8008b6e <_printf_i+0x1f2>
 8008ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8008adc:	b004      	add	sp, #16
 8008ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ae2:	6823      	ldr	r3, [r4, #0]
 8008ae4:	f043 0320 	orr.w	r3, r3, #32
 8008ae8:	6023      	str	r3, [r4, #0]
 8008aea:	4833      	ldr	r0, [pc, #204]	@ (8008bb8 <_printf_i+0x23c>)
 8008aec:	2778      	movs	r7, #120	@ 0x78
 8008aee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008af2:	6823      	ldr	r3, [r4, #0]
 8008af4:	6831      	ldr	r1, [r6, #0]
 8008af6:	061f      	lsls	r7, r3, #24
 8008af8:	f851 5b04 	ldr.w	r5, [r1], #4
 8008afc:	d402      	bmi.n	8008b04 <_printf_i+0x188>
 8008afe:	065f      	lsls	r7, r3, #25
 8008b00:	bf48      	it	mi
 8008b02:	b2ad      	uxthmi	r5, r5
 8008b04:	6031      	str	r1, [r6, #0]
 8008b06:	07d9      	lsls	r1, r3, #31
 8008b08:	bf44      	itt	mi
 8008b0a:	f043 0320 	orrmi.w	r3, r3, #32
 8008b0e:	6023      	strmi	r3, [r4, #0]
 8008b10:	b11d      	cbz	r5, 8008b1a <_printf_i+0x19e>
 8008b12:	2310      	movs	r3, #16
 8008b14:	e7ac      	b.n	8008a70 <_printf_i+0xf4>
 8008b16:	4827      	ldr	r0, [pc, #156]	@ (8008bb4 <_printf_i+0x238>)
 8008b18:	e7e9      	b.n	8008aee <_printf_i+0x172>
 8008b1a:	6823      	ldr	r3, [r4, #0]
 8008b1c:	f023 0320 	bic.w	r3, r3, #32
 8008b20:	6023      	str	r3, [r4, #0]
 8008b22:	e7f6      	b.n	8008b12 <_printf_i+0x196>
 8008b24:	4616      	mov	r6, r2
 8008b26:	e7bd      	b.n	8008aa4 <_printf_i+0x128>
 8008b28:	6833      	ldr	r3, [r6, #0]
 8008b2a:	6825      	ldr	r5, [r4, #0]
 8008b2c:	6961      	ldr	r1, [r4, #20]
 8008b2e:	1d18      	adds	r0, r3, #4
 8008b30:	6030      	str	r0, [r6, #0]
 8008b32:	062e      	lsls	r6, r5, #24
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	d501      	bpl.n	8008b3c <_printf_i+0x1c0>
 8008b38:	6019      	str	r1, [r3, #0]
 8008b3a:	e002      	b.n	8008b42 <_printf_i+0x1c6>
 8008b3c:	0668      	lsls	r0, r5, #25
 8008b3e:	d5fb      	bpl.n	8008b38 <_printf_i+0x1bc>
 8008b40:	8019      	strh	r1, [r3, #0]
 8008b42:	2300      	movs	r3, #0
 8008b44:	6123      	str	r3, [r4, #16]
 8008b46:	4616      	mov	r6, r2
 8008b48:	e7bc      	b.n	8008ac4 <_printf_i+0x148>
 8008b4a:	6833      	ldr	r3, [r6, #0]
 8008b4c:	1d1a      	adds	r2, r3, #4
 8008b4e:	6032      	str	r2, [r6, #0]
 8008b50:	681e      	ldr	r6, [r3, #0]
 8008b52:	6862      	ldr	r2, [r4, #4]
 8008b54:	2100      	movs	r1, #0
 8008b56:	4630      	mov	r0, r6
 8008b58:	f7f7 fb7a 	bl	8000250 <memchr>
 8008b5c:	b108      	cbz	r0, 8008b62 <_printf_i+0x1e6>
 8008b5e:	1b80      	subs	r0, r0, r6
 8008b60:	6060      	str	r0, [r4, #4]
 8008b62:	6863      	ldr	r3, [r4, #4]
 8008b64:	6123      	str	r3, [r4, #16]
 8008b66:	2300      	movs	r3, #0
 8008b68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b6c:	e7aa      	b.n	8008ac4 <_printf_i+0x148>
 8008b6e:	6923      	ldr	r3, [r4, #16]
 8008b70:	4632      	mov	r2, r6
 8008b72:	4649      	mov	r1, r9
 8008b74:	4640      	mov	r0, r8
 8008b76:	47d0      	blx	sl
 8008b78:	3001      	adds	r0, #1
 8008b7a:	d0ad      	beq.n	8008ad8 <_printf_i+0x15c>
 8008b7c:	6823      	ldr	r3, [r4, #0]
 8008b7e:	079b      	lsls	r3, r3, #30
 8008b80:	d413      	bmi.n	8008baa <_printf_i+0x22e>
 8008b82:	68e0      	ldr	r0, [r4, #12]
 8008b84:	9b03      	ldr	r3, [sp, #12]
 8008b86:	4298      	cmp	r0, r3
 8008b88:	bfb8      	it	lt
 8008b8a:	4618      	movlt	r0, r3
 8008b8c:	e7a6      	b.n	8008adc <_printf_i+0x160>
 8008b8e:	2301      	movs	r3, #1
 8008b90:	4632      	mov	r2, r6
 8008b92:	4649      	mov	r1, r9
 8008b94:	4640      	mov	r0, r8
 8008b96:	47d0      	blx	sl
 8008b98:	3001      	adds	r0, #1
 8008b9a:	d09d      	beq.n	8008ad8 <_printf_i+0x15c>
 8008b9c:	3501      	adds	r5, #1
 8008b9e:	68e3      	ldr	r3, [r4, #12]
 8008ba0:	9903      	ldr	r1, [sp, #12]
 8008ba2:	1a5b      	subs	r3, r3, r1
 8008ba4:	42ab      	cmp	r3, r5
 8008ba6:	dcf2      	bgt.n	8008b8e <_printf_i+0x212>
 8008ba8:	e7eb      	b.n	8008b82 <_printf_i+0x206>
 8008baa:	2500      	movs	r5, #0
 8008bac:	f104 0619 	add.w	r6, r4, #25
 8008bb0:	e7f5      	b.n	8008b9e <_printf_i+0x222>
 8008bb2:	bf00      	nop
 8008bb4:	08009675 	.word	0x08009675
 8008bb8:	08009686 	.word	0x08009686

08008bbc <_scanf_chars>:
 8008bbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bc0:	4615      	mov	r5, r2
 8008bc2:	688a      	ldr	r2, [r1, #8]
 8008bc4:	4680      	mov	r8, r0
 8008bc6:	460c      	mov	r4, r1
 8008bc8:	b932      	cbnz	r2, 8008bd8 <_scanf_chars+0x1c>
 8008bca:	698a      	ldr	r2, [r1, #24]
 8008bcc:	2a00      	cmp	r2, #0
 8008bce:	bf14      	ite	ne
 8008bd0:	f04f 32ff 	movne.w	r2, #4294967295
 8008bd4:	2201      	moveq	r2, #1
 8008bd6:	608a      	str	r2, [r1, #8]
 8008bd8:	6822      	ldr	r2, [r4, #0]
 8008bda:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8008c6c <_scanf_chars+0xb0>
 8008bde:	06d1      	lsls	r1, r2, #27
 8008be0:	bf5f      	itttt	pl
 8008be2:	681a      	ldrpl	r2, [r3, #0]
 8008be4:	1d11      	addpl	r1, r2, #4
 8008be6:	6019      	strpl	r1, [r3, #0]
 8008be8:	6816      	ldrpl	r6, [r2, #0]
 8008bea:	2700      	movs	r7, #0
 8008bec:	69a0      	ldr	r0, [r4, #24]
 8008bee:	b188      	cbz	r0, 8008c14 <_scanf_chars+0x58>
 8008bf0:	2801      	cmp	r0, #1
 8008bf2:	d107      	bne.n	8008c04 <_scanf_chars+0x48>
 8008bf4:	682b      	ldr	r3, [r5, #0]
 8008bf6:	781a      	ldrb	r2, [r3, #0]
 8008bf8:	6963      	ldr	r3, [r4, #20]
 8008bfa:	5c9b      	ldrb	r3, [r3, r2]
 8008bfc:	b953      	cbnz	r3, 8008c14 <_scanf_chars+0x58>
 8008bfe:	2f00      	cmp	r7, #0
 8008c00:	d031      	beq.n	8008c66 <_scanf_chars+0xaa>
 8008c02:	e022      	b.n	8008c4a <_scanf_chars+0x8e>
 8008c04:	2802      	cmp	r0, #2
 8008c06:	d120      	bne.n	8008c4a <_scanf_chars+0x8e>
 8008c08:	682b      	ldr	r3, [r5, #0]
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8008c10:	071b      	lsls	r3, r3, #28
 8008c12:	d41a      	bmi.n	8008c4a <_scanf_chars+0x8e>
 8008c14:	6823      	ldr	r3, [r4, #0]
 8008c16:	06da      	lsls	r2, r3, #27
 8008c18:	bf5e      	ittt	pl
 8008c1a:	682b      	ldrpl	r3, [r5, #0]
 8008c1c:	781b      	ldrbpl	r3, [r3, #0]
 8008c1e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008c22:	682a      	ldr	r2, [r5, #0]
 8008c24:	686b      	ldr	r3, [r5, #4]
 8008c26:	3201      	adds	r2, #1
 8008c28:	602a      	str	r2, [r5, #0]
 8008c2a:	68a2      	ldr	r2, [r4, #8]
 8008c2c:	3b01      	subs	r3, #1
 8008c2e:	3a01      	subs	r2, #1
 8008c30:	606b      	str	r3, [r5, #4]
 8008c32:	3701      	adds	r7, #1
 8008c34:	60a2      	str	r2, [r4, #8]
 8008c36:	b142      	cbz	r2, 8008c4a <_scanf_chars+0x8e>
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	dcd7      	bgt.n	8008bec <_scanf_chars+0x30>
 8008c3c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008c40:	4629      	mov	r1, r5
 8008c42:	4640      	mov	r0, r8
 8008c44:	4798      	blx	r3
 8008c46:	2800      	cmp	r0, #0
 8008c48:	d0d0      	beq.n	8008bec <_scanf_chars+0x30>
 8008c4a:	6823      	ldr	r3, [r4, #0]
 8008c4c:	f013 0310 	ands.w	r3, r3, #16
 8008c50:	d105      	bne.n	8008c5e <_scanf_chars+0xa2>
 8008c52:	68e2      	ldr	r2, [r4, #12]
 8008c54:	3201      	adds	r2, #1
 8008c56:	60e2      	str	r2, [r4, #12]
 8008c58:	69a2      	ldr	r2, [r4, #24]
 8008c5a:	b102      	cbz	r2, 8008c5e <_scanf_chars+0xa2>
 8008c5c:	7033      	strb	r3, [r6, #0]
 8008c5e:	6923      	ldr	r3, [r4, #16]
 8008c60:	443b      	add	r3, r7
 8008c62:	6123      	str	r3, [r4, #16]
 8008c64:	2000      	movs	r0, #0
 8008c66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c6a:	bf00      	nop
 8008c6c:	080096b3 	.word	0x080096b3

08008c70 <_scanf_i>:
 8008c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c74:	4698      	mov	r8, r3
 8008c76:	4b74      	ldr	r3, [pc, #464]	@ (8008e48 <_scanf_i+0x1d8>)
 8008c78:	460c      	mov	r4, r1
 8008c7a:	4682      	mov	sl, r0
 8008c7c:	4616      	mov	r6, r2
 8008c7e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008c82:	b087      	sub	sp, #28
 8008c84:	ab03      	add	r3, sp, #12
 8008c86:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008c8a:	4b70      	ldr	r3, [pc, #448]	@ (8008e4c <_scanf_i+0x1dc>)
 8008c8c:	69a1      	ldr	r1, [r4, #24]
 8008c8e:	4a70      	ldr	r2, [pc, #448]	@ (8008e50 <_scanf_i+0x1e0>)
 8008c90:	2903      	cmp	r1, #3
 8008c92:	bf08      	it	eq
 8008c94:	461a      	moveq	r2, r3
 8008c96:	68a3      	ldr	r3, [r4, #8]
 8008c98:	9201      	str	r2, [sp, #4]
 8008c9a:	1e5a      	subs	r2, r3, #1
 8008c9c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008ca0:	bf88      	it	hi
 8008ca2:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008ca6:	4627      	mov	r7, r4
 8008ca8:	bf82      	ittt	hi
 8008caa:	eb03 0905 	addhi.w	r9, r3, r5
 8008cae:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008cb2:	60a3      	strhi	r3, [r4, #8]
 8008cb4:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008cb8:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8008cbc:	bf98      	it	ls
 8008cbe:	f04f 0900 	movls.w	r9, #0
 8008cc2:	6023      	str	r3, [r4, #0]
 8008cc4:	463d      	mov	r5, r7
 8008cc6:	f04f 0b00 	mov.w	fp, #0
 8008cca:	6831      	ldr	r1, [r6, #0]
 8008ccc:	ab03      	add	r3, sp, #12
 8008cce:	7809      	ldrb	r1, [r1, #0]
 8008cd0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008cd4:	2202      	movs	r2, #2
 8008cd6:	f7f7 fabb 	bl	8000250 <memchr>
 8008cda:	b328      	cbz	r0, 8008d28 <_scanf_i+0xb8>
 8008cdc:	f1bb 0f01 	cmp.w	fp, #1
 8008ce0:	d159      	bne.n	8008d96 <_scanf_i+0x126>
 8008ce2:	6862      	ldr	r2, [r4, #4]
 8008ce4:	b92a      	cbnz	r2, 8008cf2 <_scanf_i+0x82>
 8008ce6:	6822      	ldr	r2, [r4, #0]
 8008ce8:	2108      	movs	r1, #8
 8008cea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008cee:	6061      	str	r1, [r4, #4]
 8008cf0:	6022      	str	r2, [r4, #0]
 8008cf2:	6822      	ldr	r2, [r4, #0]
 8008cf4:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8008cf8:	6022      	str	r2, [r4, #0]
 8008cfa:	68a2      	ldr	r2, [r4, #8]
 8008cfc:	1e51      	subs	r1, r2, #1
 8008cfe:	60a1      	str	r1, [r4, #8]
 8008d00:	b192      	cbz	r2, 8008d28 <_scanf_i+0xb8>
 8008d02:	6832      	ldr	r2, [r6, #0]
 8008d04:	1c51      	adds	r1, r2, #1
 8008d06:	6031      	str	r1, [r6, #0]
 8008d08:	7812      	ldrb	r2, [r2, #0]
 8008d0a:	f805 2b01 	strb.w	r2, [r5], #1
 8008d0e:	6872      	ldr	r2, [r6, #4]
 8008d10:	3a01      	subs	r2, #1
 8008d12:	2a00      	cmp	r2, #0
 8008d14:	6072      	str	r2, [r6, #4]
 8008d16:	dc07      	bgt.n	8008d28 <_scanf_i+0xb8>
 8008d18:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8008d1c:	4631      	mov	r1, r6
 8008d1e:	4650      	mov	r0, sl
 8008d20:	4790      	blx	r2
 8008d22:	2800      	cmp	r0, #0
 8008d24:	f040 8085 	bne.w	8008e32 <_scanf_i+0x1c2>
 8008d28:	f10b 0b01 	add.w	fp, fp, #1
 8008d2c:	f1bb 0f03 	cmp.w	fp, #3
 8008d30:	d1cb      	bne.n	8008cca <_scanf_i+0x5a>
 8008d32:	6863      	ldr	r3, [r4, #4]
 8008d34:	b90b      	cbnz	r3, 8008d3a <_scanf_i+0xca>
 8008d36:	230a      	movs	r3, #10
 8008d38:	6063      	str	r3, [r4, #4]
 8008d3a:	6863      	ldr	r3, [r4, #4]
 8008d3c:	4945      	ldr	r1, [pc, #276]	@ (8008e54 <_scanf_i+0x1e4>)
 8008d3e:	6960      	ldr	r0, [r4, #20]
 8008d40:	1ac9      	subs	r1, r1, r3
 8008d42:	f000 f997 	bl	8009074 <__sccl>
 8008d46:	f04f 0b00 	mov.w	fp, #0
 8008d4a:	68a3      	ldr	r3, [r4, #8]
 8008d4c:	6822      	ldr	r2, [r4, #0]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d03d      	beq.n	8008dce <_scanf_i+0x15e>
 8008d52:	6831      	ldr	r1, [r6, #0]
 8008d54:	6960      	ldr	r0, [r4, #20]
 8008d56:	f891 c000 	ldrb.w	ip, [r1]
 8008d5a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008d5e:	2800      	cmp	r0, #0
 8008d60:	d035      	beq.n	8008dce <_scanf_i+0x15e>
 8008d62:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8008d66:	d124      	bne.n	8008db2 <_scanf_i+0x142>
 8008d68:	0510      	lsls	r0, r2, #20
 8008d6a:	d522      	bpl.n	8008db2 <_scanf_i+0x142>
 8008d6c:	f10b 0b01 	add.w	fp, fp, #1
 8008d70:	f1b9 0f00 	cmp.w	r9, #0
 8008d74:	d003      	beq.n	8008d7e <_scanf_i+0x10e>
 8008d76:	3301      	adds	r3, #1
 8008d78:	f109 39ff 	add.w	r9, r9, #4294967295
 8008d7c:	60a3      	str	r3, [r4, #8]
 8008d7e:	6873      	ldr	r3, [r6, #4]
 8008d80:	3b01      	subs	r3, #1
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	6073      	str	r3, [r6, #4]
 8008d86:	dd1b      	ble.n	8008dc0 <_scanf_i+0x150>
 8008d88:	6833      	ldr	r3, [r6, #0]
 8008d8a:	3301      	adds	r3, #1
 8008d8c:	6033      	str	r3, [r6, #0]
 8008d8e:	68a3      	ldr	r3, [r4, #8]
 8008d90:	3b01      	subs	r3, #1
 8008d92:	60a3      	str	r3, [r4, #8]
 8008d94:	e7d9      	b.n	8008d4a <_scanf_i+0xda>
 8008d96:	f1bb 0f02 	cmp.w	fp, #2
 8008d9a:	d1ae      	bne.n	8008cfa <_scanf_i+0x8a>
 8008d9c:	6822      	ldr	r2, [r4, #0]
 8008d9e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8008da2:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8008da6:	d1bf      	bne.n	8008d28 <_scanf_i+0xb8>
 8008da8:	2110      	movs	r1, #16
 8008daa:	6061      	str	r1, [r4, #4]
 8008dac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008db0:	e7a2      	b.n	8008cf8 <_scanf_i+0x88>
 8008db2:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8008db6:	6022      	str	r2, [r4, #0]
 8008db8:	780b      	ldrb	r3, [r1, #0]
 8008dba:	f805 3b01 	strb.w	r3, [r5], #1
 8008dbe:	e7de      	b.n	8008d7e <_scanf_i+0x10e>
 8008dc0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008dc4:	4631      	mov	r1, r6
 8008dc6:	4650      	mov	r0, sl
 8008dc8:	4798      	blx	r3
 8008dca:	2800      	cmp	r0, #0
 8008dcc:	d0df      	beq.n	8008d8e <_scanf_i+0x11e>
 8008dce:	6823      	ldr	r3, [r4, #0]
 8008dd0:	05d9      	lsls	r1, r3, #23
 8008dd2:	d50d      	bpl.n	8008df0 <_scanf_i+0x180>
 8008dd4:	42bd      	cmp	r5, r7
 8008dd6:	d909      	bls.n	8008dec <_scanf_i+0x17c>
 8008dd8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008ddc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008de0:	4632      	mov	r2, r6
 8008de2:	4650      	mov	r0, sl
 8008de4:	4798      	blx	r3
 8008de6:	f105 39ff 	add.w	r9, r5, #4294967295
 8008dea:	464d      	mov	r5, r9
 8008dec:	42bd      	cmp	r5, r7
 8008dee:	d028      	beq.n	8008e42 <_scanf_i+0x1d2>
 8008df0:	6822      	ldr	r2, [r4, #0]
 8008df2:	f012 0210 	ands.w	r2, r2, #16
 8008df6:	d113      	bne.n	8008e20 <_scanf_i+0x1b0>
 8008df8:	702a      	strb	r2, [r5, #0]
 8008dfa:	6863      	ldr	r3, [r4, #4]
 8008dfc:	9e01      	ldr	r6, [sp, #4]
 8008dfe:	4639      	mov	r1, r7
 8008e00:	4650      	mov	r0, sl
 8008e02:	47b0      	blx	r6
 8008e04:	f8d8 3000 	ldr.w	r3, [r8]
 8008e08:	6821      	ldr	r1, [r4, #0]
 8008e0a:	1d1a      	adds	r2, r3, #4
 8008e0c:	f8c8 2000 	str.w	r2, [r8]
 8008e10:	f011 0f20 	tst.w	r1, #32
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	d00f      	beq.n	8008e38 <_scanf_i+0x1c8>
 8008e18:	6018      	str	r0, [r3, #0]
 8008e1a:	68e3      	ldr	r3, [r4, #12]
 8008e1c:	3301      	adds	r3, #1
 8008e1e:	60e3      	str	r3, [r4, #12]
 8008e20:	6923      	ldr	r3, [r4, #16]
 8008e22:	1bed      	subs	r5, r5, r7
 8008e24:	445d      	add	r5, fp
 8008e26:	442b      	add	r3, r5
 8008e28:	6123      	str	r3, [r4, #16]
 8008e2a:	2000      	movs	r0, #0
 8008e2c:	b007      	add	sp, #28
 8008e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e32:	f04f 0b00 	mov.w	fp, #0
 8008e36:	e7ca      	b.n	8008dce <_scanf_i+0x15e>
 8008e38:	07ca      	lsls	r2, r1, #31
 8008e3a:	bf4c      	ite	mi
 8008e3c:	8018      	strhmi	r0, [r3, #0]
 8008e3e:	6018      	strpl	r0, [r3, #0]
 8008e40:	e7eb      	b.n	8008e1a <_scanf_i+0x1aa>
 8008e42:	2001      	movs	r0, #1
 8008e44:	e7f2      	b.n	8008e2c <_scanf_i+0x1bc>
 8008e46:	bf00      	nop
 8008e48:	08009618 	.word	0x08009618
 8008e4c:	08009341 	.word	0x08009341
 8008e50:	08009421 	.word	0x08009421
 8008e54:	080096a7 	.word	0x080096a7

08008e58 <__sflush_r>:
 8008e58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e60:	0716      	lsls	r6, r2, #28
 8008e62:	4605      	mov	r5, r0
 8008e64:	460c      	mov	r4, r1
 8008e66:	d454      	bmi.n	8008f12 <__sflush_r+0xba>
 8008e68:	684b      	ldr	r3, [r1, #4]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	dc02      	bgt.n	8008e74 <__sflush_r+0x1c>
 8008e6e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	dd48      	ble.n	8008f06 <__sflush_r+0xae>
 8008e74:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008e76:	2e00      	cmp	r6, #0
 8008e78:	d045      	beq.n	8008f06 <__sflush_r+0xae>
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008e80:	682f      	ldr	r7, [r5, #0]
 8008e82:	6a21      	ldr	r1, [r4, #32]
 8008e84:	602b      	str	r3, [r5, #0]
 8008e86:	d030      	beq.n	8008eea <__sflush_r+0x92>
 8008e88:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008e8a:	89a3      	ldrh	r3, [r4, #12]
 8008e8c:	0759      	lsls	r1, r3, #29
 8008e8e:	d505      	bpl.n	8008e9c <__sflush_r+0x44>
 8008e90:	6863      	ldr	r3, [r4, #4]
 8008e92:	1ad2      	subs	r2, r2, r3
 8008e94:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008e96:	b10b      	cbz	r3, 8008e9c <__sflush_r+0x44>
 8008e98:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008e9a:	1ad2      	subs	r2, r2, r3
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008ea0:	6a21      	ldr	r1, [r4, #32]
 8008ea2:	4628      	mov	r0, r5
 8008ea4:	47b0      	blx	r6
 8008ea6:	1c43      	adds	r3, r0, #1
 8008ea8:	89a3      	ldrh	r3, [r4, #12]
 8008eaa:	d106      	bne.n	8008eba <__sflush_r+0x62>
 8008eac:	6829      	ldr	r1, [r5, #0]
 8008eae:	291d      	cmp	r1, #29
 8008eb0:	d82b      	bhi.n	8008f0a <__sflush_r+0xb2>
 8008eb2:	4a2a      	ldr	r2, [pc, #168]	@ (8008f5c <__sflush_r+0x104>)
 8008eb4:	410a      	asrs	r2, r1
 8008eb6:	07d6      	lsls	r6, r2, #31
 8008eb8:	d427      	bmi.n	8008f0a <__sflush_r+0xb2>
 8008eba:	2200      	movs	r2, #0
 8008ebc:	6062      	str	r2, [r4, #4]
 8008ebe:	04d9      	lsls	r1, r3, #19
 8008ec0:	6922      	ldr	r2, [r4, #16]
 8008ec2:	6022      	str	r2, [r4, #0]
 8008ec4:	d504      	bpl.n	8008ed0 <__sflush_r+0x78>
 8008ec6:	1c42      	adds	r2, r0, #1
 8008ec8:	d101      	bne.n	8008ece <__sflush_r+0x76>
 8008eca:	682b      	ldr	r3, [r5, #0]
 8008ecc:	b903      	cbnz	r3, 8008ed0 <__sflush_r+0x78>
 8008ece:	6560      	str	r0, [r4, #84]	@ 0x54
 8008ed0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008ed2:	602f      	str	r7, [r5, #0]
 8008ed4:	b1b9      	cbz	r1, 8008f06 <__sflush_r+0xae>
 8008ed6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008eda:	4299      	cmp	r1, r3
 8008edc:	d002      	beq.n	8008ee4 <__sflush_r+0x8c>
 8008ede:	4628      	mov	r0, r5
 8008ee0:	f7ff f970 	bl	80081c4 <_free_r>
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	6363      	str	r3, [r4, #52]	@ 0x34
 8008ee8:	e00d      	b.n	8008f06 <__sflush_r+0xae>
 8008eea:	2301      	movs	r3, #1
 8008eec:	4628      	mov	r0, r5
 8008eee:	47b0      	blx	r6
 8008ef0:	4602      	mov	r2, r0
 8008ef2:	1c50      	adds	r0, r2, #1
 8008ef4:	d1c9      	bne.n	8008e8a <__sflush_r+0x32>
 8008ef6:	682b      	ldr	r3, [r5, #0]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d0c6      	beq.n	8008e8a <__sflush_r+0x32>
 8008efc:	2b1d      	cmp	r3, #29
 8008efe:	d001      	beq.n	8008f04 <__sflush_r+0xac>
 8008f00:	2b16      	cmp	r3, #22
 8008f02:	d11e      	bne.n	8008f42 <__sflush_r+0xea>
 8008f04:	602f      	str	r7, [r5, #0]
 8008f06:	2000      	movs	r0, #0
 8008f08:	e022      	b.n	8008f50 <__sflush_r+0xf8>
 8008f0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f0e:	b21b      	sxth	r3, r3
 8008f10:	e01b      	b.n	8008f4a <__sflush_r+0xf2>
 8008f12:	690f      	ldr	r7, [r1, #16]
 8008f14:	2f00      	cmp	r7, #0
 8008f16:	d0f6      	beq.n	8008f06 <__sflush_r+0xae>
 8008f18:	0793      	lsls	r3, r2, #30
 8008f1a:	680e      	ldr	r6, [r1, #0]
 8008f1c:	bf08      	it	eq
 8008f1e:	694b      	ldreq	r3, [r1, #20]
 8008f20:	600f      	str	r7, [r1, #0]
 8008f22:	bf18      	it	ne
 8008f24:	2300      	movne	r3, #0
 8008f26:	eba6 0807 	sub.w	r8, r6, r7
 8008f2a:	608b      	str	r3, [r1, #8]
 8008f2c:	f1b8 0f00 	cmp.w	r8, #0
 8008f30:	dde9      	ble.n	8008f06 <__sflush_r+0xae>
 8008f32:	6a21      	ldr	r1, [r4, #32]
 8008f34:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008f36:	4643      	mov	r3, r8
 8008f38:	463a      	mov	r2, r7
 8008f3a:	4628      	mov	r0, r5
 8008f3c:	47b0      	blx	r6
 8008f3e:	2800      	cmp	r0, #0
 8008f40:	dc08      	bgt.n	8008f54 <__sflush_r+0xfc>
 8008f42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f4a:	81a3      	strh	r3, [r4, #12]
 8008f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f54:	4407      	add	r7, r0
 8008f56:	eba8 0800 	sub.w	r8, r8, r0
 8008f5a:	e7e7      	b.n	8008f2c <__sflush_r+0xd4>
 8008f5c:	dfbffffe 	.word	0xdfbffffe

08008f60 <_fflush_r>:
 8008f60:	b538      	push	{r3, r4, r5, lr}
 8008f62:	690b      	ldr	r3, [r1, #16]
 8008f64:	4605      	mov	r5, r0
 8008f66:	460c      	mov	r4, r1
 8008f68:	b913      	cbnz	r3, 8008f70 <_fflush_r+0x10>
 8008f6a:	2500      	movs	r5, #0
 8008f6c:	4628      	mov	r0, r5
 8008f6e:	bd38      	pop	{r3, r4, r5, pc}
 8008f70:	b118      	cbz	r0, 8008f7a <_fflush_r+0x1a>
 8008f72:	6a03      	ldr	r3, [r0, #32]
 8008f74:	b90b      	cbnz	r3, 8008f7a <_fflush_r+0x1a>
 8008f76:	f7fe fecd 	bl	8007d14 <__sinit>
 8008f7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d0f3      	beq.n	8008f6a <_fflush_r+0xa>
 8008f82:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008f84:	07d0      	lsls	r0, r2, #31
 8008f86:	d404      	bmi.n	8008f92 <_fflush_r+0x32>
 8008f88:	0599      	lsls	r1, r3, #22
 8008f8a:	d402      	bmi.n	8008f92 <_fflush_r+0x32>
 8008f8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f8e:	f7ff f916 	bl	80081be <__retarget_lock_acquire_recursive>
 8008f92:	4628      	mov	r0, r5
 8008f94:	4621      	mov	r1, r4
 8008f96:	f7ff ff5f 	bl	8008e58 <__sflush_r>
 8008f9a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008f9c:	07da      	lsls	r2, r3, #31
 8008f9e:	4605      	mov	r5, r0
 8008fa0:	d4e4      	bmi.n	8008f6c <_fflush_r+0xc>
 8008fa2:	89a3      	ldrh	r3, [r4, #12]
 8008fa4:	059b      	lsls	r3, r3, #22
 8008fa6:	d4e1      	bmi.n	8008f6c <_fflush_r+0xc>
 8008fa8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008faa:	f7ff f909 	bl	80081c0 <__retarget_lock_release_recursive>
 8008fae:	e7dd      	b.n	8008f6c <_fflush_r+0xc>

08008fb0 <__swhatbuf_r>:
 8008fb0:	b570      	push	{r4, r5, r6, lr}
 8008fb2:	460c      	mov	r4, r1
 8008fb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fb8:	2900      	cmp	r1, #0
 8008fba:	b096      	sub	sp, #88	@ 0x58
 8008fbc:	4615      	mov	r5, r2
 8008fbe:	461e      	mov	r6, r3
 8008fc0:	da0d      	bge.n	8008fde <__swhatbuf_r+0x2e>
 8008fc2:	89a3      	ldrh	r3, [r4, #12]
 8008fc4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008fc8:	f04f 0100 	mov.w	r1, #0
 8008fcc:	bf14      	ite	ne
 8008fce:	2340      	movne	r3, #64	@ 0x40
 8008fd0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008fd4:	2000      	movs	r0, #0
 8008fd6:	6031      	str	r1, [r6, #0]
 8008fd8:	602b      	str	r3, [r5, #0]
 8008fda:	b016      	add	sp, #88	@ 0x58
 8008fdc:	bd70      	pop	{r4, r5, r6, pc}
 8008fde:	466a      	mov	r2, sp
 8008fe0:	f000 f8d6 	bl	8009190 <_fstat_r>
 8008fe4:	2800      	cmp	r0, #0
 8008fe6:	dbec      	blt.n	8008fc2 <__swhatbuf_r+0x12>
 8008fe8:	9901      	ldr	r1, [sp, #4]
 8008fea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008fee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008ff2:	4259      	negs	r1, r3
 8008ff4:	4159      	adcs	r1, r3
 8008ff6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008ffa:	e7eb      	b.n	8008fd4 <__swhatbuf_r+0x24>

08008ffc <__smakebuf_r>:
 8008ffc:	898b      	ldrh	r3, [r1, #12]
 8008ffe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009000:	079d      	lsls	r5, r3, #30
 8009002:	4606      	mov	r6, r0
 8009004:	460c      	mov	r4, r1
 8009006:	d507      	bpl.n	8009018 <__smakebuf_r+0x1c>
 8009008:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800900c:	6023      	str	r3, [r4, #0]
 800900e:	6123      	str	r3, [r4, #16]
 8009010:	2301      	movs	r3, #1
 8009012:	6163      	str	r3, [r4, #20]
 8009014:	b003      	add	sp, #12
 8009016:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009018:	ab01      	add	r3, sp, #4
 800901a:	466a      	mov	r2, sp
 800901c:	f7ff ffc8 	bl	8008fb0 <__swhatbuf_r>
 8009020:	9f00      	ldr	r7, [sp, #0]
 8009022:	4605      	mov	r5, r0
 8009024:	4639      	mov	r1, r7
 8009026:	4630      	mov	r0, r6
 8009028:	f7fe fd5c 	bl	8007ae4 <_malloc_r>
 800902c:	b948      	cbnz	r0, 8009042 <__smakebuf_r+0x46>
 800902e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009032:	059a      	lsls	r2, r3, #22
 8009034:	d4ee      	bmi.n	8009014 <__smakebuf_r+0x18>
 8009036:	f023 0303 	bic.w	r3, r3, #3
 800903a:	f043 0302 	orr.w	r3, r3, #2
 800903e:	81a3      	strh	r3, [r4, #12]
 8009040:	e7e2      	b.n	8009008 <__smakebuf_r+0xc>
 8009042:	89a3      	ldrh	r3, [r4, #12]
 8009044:	6020      	str	r0, [r4, #0]
 8009046:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800904a:	81a3      	strh	r3, [r4, #12]
 800904c:	9b01      	ldr	r3, [sp, #4]
 800904e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009052:	b15b      	cbz	r3, 800906c <__smakebuf_r+0x70>
 8009054:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009058:	4630      	mov	r0, r6
 800905a:	f000 f8ab 	bl	80091b4 <_isatty_r>
 800905e:	b128      	cbz	r0, 800906c <__smakebuf_r+0x70>
 8009060:	89a3      	ldrh	r3, [r4, #12]
 8009062:	f023 0303 	bic.w	r3, r3, #3
 8009066:	f043 0301 	orr.w	r3, r3, #1
 800906a:	81a3      	strh	r3, [r4, #12]
 800906c:	89a3      	ldrh	r3, [r4, #12]
 800906e:	431d      	orrs	r5, r3
 8009070:	81a5      	strh	r5, [r4, #12]
 8009072:	e7cf      	b.n	8009014 <__smakebuf_r+0x18>

08009074 <__sccl>:
 8009074:	b570      	push	{r4, r5, r6, lr}
 8009076:	780b      	ldrb	r3, [r1, #0]
 8009078:	4604      	mov	r4, r0
 800907a:	2b5e      	cmp	r3, #94	@ 0x5e
 800907c:	bf0b      	itete	eq
 800907e:	784b      	ldrbeq	r3, [r1, #1]
 8009080:	1c4a      	addne	r2, r1, #1
 8009082:	1c8a      	addeq	r2, r1, #2
 8009084:	2100      	movne	r1, #0
 8009086:	bf08      	it	eq
 8009088:	2101      	moveq	r1, #1
 800908a:	3801      	subs	r0, #1
 800908c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8009090:	f800 1f01 	strb.w	r1, [r0, #1]!
 8009094:	42a8      	cmp	r0, r5
 8009096:	d1fb      	bne.n	8009090 <__sccl+0x1c>
 8009098:	b90b      	cbnz	r3, 800909e <__sccl+0x2a>
 800909a:	1e50      	subs	r0, r2, #1
 800909c:	bd70      	pop	{r4, r5, r6, pc}
 800909e:	f081 0101 	eor.w	r1, r1, #1
 80090a2:	54e1      	strb	r1, [r4, r3]
 80090a4:	4610      	mov	r0, r2
 80090a6:	4602      	mov	r2, r0
 80090a8:	f812 5b01 	ldrb.w	r5, [r2], #1
 80090ac:	2d2d      	cmp	r5, #45	@ 0x2d
 80090ae:	d005      	beq.n	80090bc <__sccl+0x48>
 80090b0:	2d5d      	cmp	r5, #93	@ 0x5d
 80090b2:	d016      	beq.n	80090e2 <__sccl+0x6e>
 80090b4:	2d00      	cmp	r5, #0
 80090b6:	d0f1      	beq.n	800909c <__sccl+0x28>
 80090b8:	462b      	mov	r3, r5
 80090ba:	e7f2      	b.n	80090a2 <__sccl+0x2e>
 80090bc:	7846      	ldrb	r6, [r0, #1]
 80090be:	2e5d      	cmp	r6, #93	@ 0x5d
 80090c0:	d0fa      	beq.n	80090b8 <__sccl+0x44>
 80090c2:	42b3      	cmp	r3, r6
 80090c4:	dcf8      	bgt.n	80090b8 <__sccl+0x44>
 80090c6:	3002      	adds	r0, #2
 80090c8:	461a      	mov	r2, r3
 80090ca:	3201      	adds	r2, #1
 80090cc:	4296      	cmp	r6, r2
 80090ce:	54a1      	strb	r1, [r4, r2]
 80090d0:	dcfb      	bgt.n	80090ca <__sccl+0x56>
 80090d2:	1af2      	subs	r2, r6, r3
 80090d4:	3a01      	subs	r2, #1
 80090d6:	1c5d      	adds	r5, r3, #1
 80090d8:	42b3      	cmp	r3, r6
 80090da:	bfa8      	it	ge
 80090dc:	2200      	movge	r2, #0
 80090de:	18ab      	adds	r3, r5, r2
 80090e0:	e7e1      	b.n	80090a6 <__sccl+0x32>
 80090e2:	4610      	mov	r0, r2
 80090e4:	e7da      	b.n	800909c <__sccl+0x28>

080090e6 <__submore>:
 80090e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090ea:	460c      	mov	r4, r1
 80090ec:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80090ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80090f2:	4299      	cmp	r1, r3
 80090f4:	d11d      	bne.n	8009132 <__submore+0x4c>
 80090f6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80090fa:	f7fe fcf3 	bl	8007ae4 <_malloc_r>
 80090fe:	b918      	cbnz	r0, 8009108 <__submore+0x22>
 8009100:	f04f 30ff 	mov.w	r0, #4294967295
 8009104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009108:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800910c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800910e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8009112:	6360      	str	r0, [r4, #52]	@ 0x34
 8009114:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8009118:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800911c:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8009120:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8009124:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8009128:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800912c:	6020      	str	r0, [r4, #0]
 800912e:	2000      	movs	r0, #0
 8009130:	e7e8      	b.n	8009104 <__submore+0x1e>
 8009132:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8009134:	0077      	lsls	r7, r6, #1
 8009136:	463a      	mov	r2, r7
 8009138:	f000 f85a 	bl	80091f0 <_realloc_r>
 800913c:	4605      	mov	r5, r0
 800913e:	2800      	cmp	r0, #0
 8009140:	d0de      	beq.n	8009100 <__submore+0x1a>
 8009142:	eb00 0806 	add.w	r8, r0, r6
 8009146:	4601      	mov	r1, r0
 8009148:	4632      	mov	r2, r6
 800914a:	4640      	mov	r0, r8
 800914c:	f000 f842 	bl	80091d4 <memcpy>
 8009150:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8009154:	f8c4 8000 	str.w	r8, [r4]
 8009158:	e7e9      	b.n	800912e <__submore+0x48>

0800915a <memmove>:
 800915a:	4288      	cmp	r0, r1
 800915c:	b510      	push	{r4, lr}
 800915e:	eb01 0402 	add.w	r4, r1, r2
 8009162:	d902      	bls.n	800916a <memmove+0x10>
 8009164:	4284      	cmp	r4, r0
 8009166:	4623      	mov	r3, r4
 8009168:	d807      	bhi.n	800917a <memmove+0x20>
 800916a:	1e43      	subs	r3, r0, #1
 800916c:	42a1      	cmp	r1, r4
 800916e:	d008      	beq.n	8009182 <memmove+0x28>
 8009170:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009174:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009178:	e7f8      	b.n	800916c <memmove+0x12>
 800917a:	4402      	add	r2, r0
 800917c:	4601      	mov	r1, r0
 800917e:	428a      	cmp	r2, r1
 8009180:	d100      	bne.n	8009184 <memmove+0x2a>
 8009182:	bd10      	pop	{r4, pc}
 8009184:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009188:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800918c:	e7f7      	b.n	800917e <memmove+0x24>
	...

08009190 <_fstat_r>:
 8009190:	b538      	push	{r3, r4, r5, lr}
 8009192:	4d07      	ldr	r5, [pc, #28]	@ (80091b0 <_fstat_r+0x20>)
 8009194:	2300      	movs	r3, #0
 8009196:	4604      	mov	r4, r0
 8009198:	4608      	mov	r0, r1
 800919a:	4611      	mov	r1, r2
 800919c:	602b      	str	r3, [r5, #0]
 800919e:	f7f9 f81e 	bl	80021de <_fstat>
 80091a2:	1c43      	adds	r3, r0, #1
 80091a4:	d102      	bne.n	80091ac <_fstat_r+0x1c>
 80091a6:	682b      	ldr	r3, [r5, #0]
 80091a8:	b103      	cbz	r3, 80091ac <_fstat_r+0x1c>
 80091aa:	6023      	str	r3, [r4, #0]
 80091ac:	bd38      	pop	{r3, r4, r5, pc}
 80091ae:	bf00      	nop
 80091b0:	200004b4 	.word	0x200004b4

080091b4 <_isatty_r>:
 80091b4:	b538      	push	{r3, r4, r5, lr}
 80091b6:	4d06      	ldr	r5, [pc, #24]	@ (80091d0 <_isatty_r+0x1c>)
 80091b8:	2300      	movs	r3, #0
 80091ba:	4604      	mov	r4, r0
 80091bc:	4608      	mov	r0, r1
 80091be:	602b      	str	r3, [r5, #0]
 80091c0:	f7f9 f81d 	bl	80021fe <_isatty>
 80091c4:	1c43      	adds	r3, r0, #1
 80091c6:	d102      	bne.n	80091ce <_isatty_r+0x1a>
 80091c8:	682b      	ldr	r3, [r5, #0]
 80091ca:	b103      	cbz	r3, 80091ce <_isatty_r+0x1a>
 80091cc:	6023      	str	r3, [r4, #0]
 80091ce:	bd38      	pop	{r3, r4, r5, pc}
 80091d0:	200004b4 	.word	0x200004b4

080091d4 <memcpy>:
 80091d4:	440a      	add	r2, r1
 80091d6:	4291      	cmp	r1, r2
 80091d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80091dc:	d100      	bne.n	80091e0 <memcpy+0xc>
 80091de:	4770      	bx	lr
 80091e0:	b510      	push	{r4, lr}
 80091e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091ea:	4291      	cmp	r1, r2
 80091ec:	d1f9      	bne.n	80091e2 <memcpy+0xe>
 80091ee:	bd10      	pop	{r4, pc}

080091f0 <_realloc_r>:
 80091f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091f4:	4680      	mov	r8, r0
 80091f6:	4615      	mov	r5, r2
 80091f8:	460c      	mov	r4, r1
 80091fa:	b921      	cbnz	r1, 8009206 <_realloc_r+0x16>
 80091fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009200:	4611      	mov	r1, r2
 8009202:	f7fe bc6f 	b.w	8007ae4 <_malloc_r>
 8009206:	b92a      	cbnz	r2, 8009214 <_realloc_r+0x24>
 8009208:	f7fe ffdc 	bl	80081c4 <_free_r>
 800920c:	2400      	movs	r4, #0
 800920e:	4620      	mov	r0, r4
 8009210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009214:	f000 f906 	bl	8009424 <_malloc_usable_size_r>
 8009218:	4285      	cmp	r5, r0
 800921a:	4606      	mov	r6, r0
 800921c:	d802      	bhi.n	8009224 <_realloc_r+0x34>
 800921e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009222:	d8f4      	bhi.n	800920e <_realloc_r+0x1e>
 8009224:	4629      	mov	r1, r5
 8009226:	4640      	mov	r0, r8
 8009228:	f7fe fc5c 	bl	8007ae4 <_malloc_r>
 800922c:	4607      	mov	r7, r0
 800922e:	2800      	cmp	r0, #0
 8009230:	d0ec      	beq.n	800920c <_realloc_r+0x1c>
 8009232:	42b5      	cmp	r5, r6
 8009234:	462a      	mov	r2, r5
 8009236:	4621      	mov	r1, r4
 8009238:	bf28      	it	cs
 800923a:	4632      	movcs	r2, r6
 800923c:	f7ff ffca 	bl	80091d4 <memcpy>
 8009240:	4621      	mov	r1, r4
 8009242:	4640      	mov	r0, r8
 8009244:	f7fe ffbe 	bl	80081c4 <_free_r>
 8009248:	463c      	mov	r4, r7
 800924a:	e7e0      	b.n	800920e <_realloc_r+0x1e>

0800924c <_strtol_l.constprop.0>:
 800924c:	2b24      	cmp	r3, #36	@ 0x24
 800924e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009252:	4686      	mov	lr, r0
 8009254:	4690      	mov	r8, r2
 8009256:	d801      	bhi.n	800925c <_strtol_l.constprop.0+0x10>
 8009258:	2b01      	cmp	r3, #1
 800925a:	d106      	bne.n	800926a <_strtol_l.constprop.0+0x1e>
 800925c:	f7fe ff84 	bl	8008168 <__errno>
 8009260:	2316      	movs	r3, #22
 8009262:	6003      	str	r3, [r0, #0]
 8009264:	2000      	movs	r0, #0
 8009266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800926a:	4834      	ldr	r0, [pc, #208]	@ (800933c <_strtol_l.constprop.0+0xf0>)
 800926c:	460d      	mov	r5, r1
 800926e:	462a      	mov	r2, r5
 8009270:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009274:	5d06      	ldrb	r6, [r0, r4]
 8009276:	f016 0608 	ands.w	r6, r6, #8
 800927a:	d1f8      	bne.n	800926e <_strtol_l.constprop.0+0x22>
 800927c:	2c2d      	cmp	r4, #45	@ 0x2d
 800927e:	d12d      	bne.n	80092dc <_strtol_l.constprop.0+0x90>
 8009280:	782c      	ldrb	r4, [r5, #0]
 8009282:	2601      	movs	r6, #1
 8009284:	1c95      	adds	r5, r2, #2
 8009286:	f033 0210 	bics.w	r2, r3, #16
 800928a:	d109      	bne.n	80092a0 <_strtol_l.constprop.0+0x54>
 800928c:	2c30      	cmp	r4, #48	@ 0x30
 800928e:	d12a      	bne.n	80092e6 <_strtol_l.constprop.0+0x9a>
 8009290:	782a      	ldrb	r2, [r5, #0]
 8009292:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009296:	2a58      	cmp	r2, #88	@ 0x58
 8009298:	d125      	bne.n	80092e6 <_strtol_l.constprop.0+0x9a>
 800929a:	786c      	ldrb	r4, [r5, #1]
 800929c:	2310      	movs	r3, #16
 800929e:	3502      	adds	r5, #2
 80092a0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80092a4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80092a8:	2200      	movs	r2, #0
 80092aa:	fbbc f9f3 	udiv	r9, ip, r3
 80092ae:	4610      	mov	r0, r2
 80092b0:	fb03 ca19 	mls	sl, r3, r9, ip
 80092b4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80092b8:	2f09      	cmp	r7, #9
 80092ba:	d81b      	bhi.n	80092f4 <_strtol_l.constprop.0+0xa8>
 80092bc:	463c      	mov	r4, r7
 80092be:	42a3      	cmp	r3, r4
 80092c0:	dd27      	ble.n	8009312 <_strtol_l.constprop.0+0xc6>
 80092c2:	1c57      	adds	r7, r2, #1
 80092c4:	d007      	beq.n	80092d6 <_strtol_l.constprop.0+0x8a>
 80092c6:	4581      	cmp	r9, r0
 80092c8:	d320      	bcc.n	800930c <_strtol_l.constprop.0+0xc0>
 80092ca:	d101      	bne.n	80092d0 <_strtol_l.constprop.0+0x84>
 80092cc:	45a2      	cmp	sl, r4
 80092ce:	db1d      	blt.n	800930c <_strtol_l.constprop.0+0xc0>
 80092d0:	fb00 4003 	mla	r0, r0, r3, r4
 80092d4:	2201      	movs	r2, #1
 80092d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80092da:	e7eb      	b.n	80092b4 <_strtol_l.constprop.0+0x68>
 80092dc:	2c2b      	cmp	r4, #43	@ 0x2b
 80092de:	bf04      	itt	eq
 80092e0:	782c      	ldrbeq	r4, [r5, #0]
 80092e2:	1c95      	addeq	r5, r2, #2
 80092e4:	e7cf      	b.n	8009286 <_strtol_l.constprop.0+0x3a>
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d1da      	bne.n	80092a0 <_strtol_l.constprop.0+0x54>
 80092ea:	2c30      	cmp	r4, #48	@ 0x30
 80092ec:	bf0c      	ite	eq
 80092ee:	2308      	moveq	r3, #8
 80092f0:	230a      	movne	r3, #10
 80092f2:	e7d5      	b.n	80092a0 <_strtol_l.constprop.0+0x54>
 80092f4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80092f8:	2f19      	cmp	r7, #25
 80092fa:	d801      	bhi.n	8009300 <_strtol_l.constprop.0+0xb4>
 80092fc:	3c37      	subs	r4, #55	@ 0x37
 80092fe:	e7de      	b.n	80092be <_strtol_l.constprop.0+0x72>
 8009300:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009304:	2f19      	cmp	r7, #25
 8009306:	d804      	bhi.n	8009312 <_strtol_l.constprop.0+0xc6>
 8009308:	3c57      	subs	r4, #87	@ 0x57
 800930a:	e7d8      	b.n	80092be <_strtol_l.constprop.0+0x72>
 800930c:	f04f 32ff 	mov.w	r2, #4294967295
 8009310:	e7e1      	b.n	80092d6 <_strtol_l.constprop.0+0x8a>
 8009312:	1c53      	adds	r3, r2, #1
 8009314:	d108      	bne.n	8009328 <_strtol_l.constprop.0+0xdc>
 8009316:	2322      	movs	r3, #34	@ 0x22
 8009318:	f8ce 3000 	str.w	r3, [lr]
 800931c:	4660      	mov	r0, ip
 800931e:	f1b8 0f00 	cmp.w	r8, #0
 8009322:	d0a0      	beq.n	8009266 <_strtol_l.constprop.0+0x1a>
 8009324:	1e69      	subs	r1, r5, #1
 8009326:	e006      	b.n	8009336 <_strtol_l.constprop.0+0xea>
 8009328:	b106      	cbz	r6, 800932c <_strtol_l.constprop.0+0xe0>
 800932a:	4240      	negs	r0, r0
 800932c:	f1b8 0f00 	cmp.w	r8, #0
 8009330:	d099      	beq.n	8009266 <_strtol_l.constprop.0+0x1a>
 8009332:	2a00      	cmp	r2, #0
 8009334:	d1f6      	bne.n	8009324 <_strtol_l.constprop.0+0xd8>
 8009336:	f8c8 1000 	str.w	r1, [r8]
 800933a:	e794      	b.n	8009266 <_strtol_l.constprop.0+0x1a>
 800933c:	080096b3 	.word	0x080096b3

08009340 <_strtol_r>:
 8009340:	f7ff bf84 	b.w	800924c <_strtol_l.constprop.0>

08009344 <_strtoul_l.constprop.0>:
 8009344:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009348:	4e34      	ldr	r6, [pc, #208]	@ (800941c <_strtoul_l.constprop.0+0xd8>)
 800934a:	4686      	mov	lr, r0
 800934c:	460d      	mov	r5, r1
 800934e:	4628      	mov	r0, r5
 8009350:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009354:	5d37      	ldrb	r7, [r6, r4]
 8009356:	f017 0708 	ands.w	r7, r7, #8
 800935a:	d1f8      	bne.n	800934e <_strtoul_l.constprop.0+0xa>
 800935c:	2c2d      	cmp	r4, #45	@ 0x2d
 800935e:	d12f      	bne.n	80093c0 <_strtoul_l.constprop.0+0x7c>
 8009360:	782c      	ldrb	r4, [r5, #0]
 8009362:	2701      	movs	r7, #1
 8009364:	1c85      	adds	r5, r0, #2
 8009366:	f033 0010 	bics.w	r0, r3, #16
 800936a:	d109      	bne.n	8009380 <_strtoul_l.constprop.0+0x3c>
 800936c:	2c30      	cmp	r4, #48	@ 0x30
 800936e:	d12c      	bne.n	80093ca <_strtoul_l.constprop.0+0x86>
 8009370:	7828      	ldrb	r0, [r5, #0]
 8009372:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8009376:	2858      	cmp	r0, #88	@ 0x58
 8009378:	d127      	bne.n	80093ca <_strtoul_l.constprop.0+0x86>
 800937a:	786c      	ldrb	r4, [r5, #1]
 800937c:	2310      	movs	r3, #16
 800937e:	3502      	adds	r5, #2
 8009380:	f04f 38ff 	mov.w	r8, #4294967295
 8009384:	2600      	movs	r6, #0
 8009386:	fbb8 f8f3 	udiv	r8, r8, r3
 800938a:	fb03 f908 	mul.w	r9, r3, r8
 800938e:	ea6f 0909 	mvn.w	r9, r9
 8009392:	4630      	mov	r0, r6
 8009394:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8009398:	f1bc 0f09 	cmp.w	ip, #9
 800939c:	d81c      	bhi.n	80093d8 <_strtoul_l.constprop.0+0x94>
 800939e:	4664      	mov	r4, ip
 80093a0:	42a3      	cmp	r3, r4
 80093a2:	dd2a      	ble.n	80093fa <_strtoul_l.constprop.0+0xb6>
 80093a4:	f1b6 3fff 	cmp.w	r6, #4294967295
 80093a8:	d007      	beq.n	80093ba <_strtoul_l.constprop.0+0x76>
 80093aa:	4580      	cmp	r8, r0
 80093ac:	d322      	bcc.n	80093f4 <_strtoul_l.constprop.0+0xb0>
 80093ae:	d101      	bne.n	80093b4 <_strtoul_l.constprop.0+0x70>
 80093b0:	45a1      	cmp	r9, r4
 80093b2:	db1f      	blt.n	80093f4 <_strtoul_l.constprop.0+0xb0>
 80093b4:	fb00 4003 	mla	r0, r0, r3, r4
 80093b8:	2601      	movs	r6, #1
 80093ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80093be:	e7e9      	b.n	8009394 <_strtoul_l.constprop.0+0x50>
 80093c0:	2c2b      	cmp	r4, #43	@ 0x2b
 80093c2:	bf04      	itt	eq
 80093c4:	782c      	ldrbeq	r4, [r5, #0]
 80093c6:	1c85      	addeq	r5, r0, #2
 80093c8:	e7cd      	b.n	8009366 <_strtoul_l.constprop.0+0x22>
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d1d8      	bne.n	8009380 <_strtoul_l.constprop.0+0x3c>
 80093ce:	2c30      	cmp	r4, #48	@ 0x30
 80093d0:	bf0c      	ite	eq
 80093d2:	2308      	moveq	r3, #8
 80093d4:	230a      	movne	r3, #10
 80093d6:	e7d3      	b.n	8009380 <_strtoul_l.constprop.0+0x3c>
 80093d8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80093dc:	f1bc 0f19 	cmp.w	ip, #25
 80093e0:	d801      	bhi.n	80093e6 <_strtoul_l.constprop.0+0xa2>
 80093e2:	3c37      	subs	r4, #55	@ 0x37
 80093e4:	e7dc      	b.n	80093a0 <_strtoul_l.constprop.0+0x5c>
 80093e6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80093ea:	f1bc 0f19 	cmp.w	ip, #25
 80093ee:	d804      	bhi.n	80093fa <_strtoul_l.constprop.0+0xb6>
 80093f0:	3c57      	subs	r4, #87	@ 0x57
 80093f2:	e7d5      	b.n	80093a0 <_strtoul_l.constprop.0+0x5c>
 80093f4:	f04f 36ff 	mov.w	r6, #4294967295
 80093f8:	e7df      	b.n	80093ba <_strtoul_l.constprop.0+0x76>
 80093fa:	1c73      	adds	r3, r6, #1
 80093fc:	d106      	bne.n	800940c <_strtoul_l.constprop.0+0xc8>
 80093fe:	2322      	movs	r3, #34	@ 0x22
 8009400:	f8ce 3000 	str.w	r3, [lr]
 8009404:	4630      	mov	r0, r6
 8009406:	b932      	cbnz	r2, 8009416 <_strtoul_l.constprop.0+0xd2>
 8009408:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800940c:	b107      	cbz	r7, 8009410 <_strtoul_l.constprop.0+0xcc>
 800940e:	4240      	negs	r0, r0
 8009410:	2a00      	cmp	r2, #0
 8009412:	d0f9      	beq.n	8009408 <_strtoul_l.constprop.0+0xc4>
 8009414:	b106      	cbz	r6, 8009418 <_strtoul_l.constprop.0+0xd4>
 8009416:	1e69      	subs	r1, r5, #1
 8009418:	6011      	str	r1, [r2, #0]
 800941a:	e7f5      	b.n	8009408 <_strtoul_l.constprop.0+0xc4>
 800941c:	080096b3 	.word	0x080096b3

08009420 <_strtoul_r>:
 8009420:	f7ff bf90 	b.w	8009344 <_strtoul_l.constprop.0>

08009424 <_malloc_usable_size_r>:
 8009424:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009428:	1f18      	subs	r0, r3, #4
 800942a:	2b00      	cmp	r3, #0
 800942c:	bfbc      	itt	lt
 800942e:	580b      	ldrlt	r3, [r1, r0]
 8009430:	18c0      	addlt	r0, r0, r3
 8009432:	4770      	bx	lr

08009434 <_init>:
 8009434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009436:	bf00      	nop
 8009438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800943a:	bc08      	pop	{r3}
 800943c:	469e      	mov	lr, r3
 800943e:	4770      	bx	lr

08009440 <_fini>:
 8009440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009442:	bf00      	nop
 8009444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009446:	bc08      	pop	{r3}
 8009448:	469e      	mov	lr, r3
 800944a:	4770      	bx	lr
