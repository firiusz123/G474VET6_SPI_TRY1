
communication_try01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009320  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000036c  08009500  08009500  0000a500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800986c  0800986c  0000b06c  2**0
                  CONTENTS
  4 .ARM          00000008  0800986c  0800986c  0000a86c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009874  08009874  0000b06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009874  08009874  0000a874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009878  08009878  0000a878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800987c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000450  2000006c  080098e8  0000b06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004bc  080098e8  0000b4bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001708e  00000000  00000000  0000b09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ffb  00000000  00000000  0002212a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c0  00000000  00000000  00025128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f64  00000000  00000000  000264e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028045  00000000  00000000  0002744c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018503  00000000  00000000  0004f491  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fff03  00000000  00000000  00067994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00167897  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005eb8  00000000  00000000  001678dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0016d794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080094e8 	.word	0x080094e8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	080094e8 	.word	0x080094e8

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <command_checker>:
uint32_t diff=0;
uint32_t diff1=0;


char* command_checker(uint8_t* buffer)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
    int8_t ending_condition = 1;
 80005e8:	2301      	movs	r3, #1
 80005ea:	73fb      	strb	r3, [r7, #15]
    int8_t index = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	73bb      	strb	r3, [r7, #14]

    while (ending_condition)
 80005f0:	e00f      	b.n	8000612 <command_checker+0x32>
    {
        if (buffer[index] == '#')
 80005f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005f6:	687a      	ldr	r2, [r7, #4]
 80005f8:	4413      	add	r3, r2
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b23      	cmp	r3, #35	@ 0x23
 80005fe:	d102      	bne.n	8000606 <command_checker+0x26>
        {
            ending_condition = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	73fb      	strb	r3, [r7, #15]
 8000604:	e005      	b.n	8000612 <command_checker+0x32>
        }
        else
        {
            index++;
 8000606:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800060a:	b2db      	uxtb	r3, r3
 800060c:	3301      	adds	r3, #1
 800060e:	b2db      	uxtb	r3, r3
 8000610:	73bb      	strb	r3, [r7, #14]
    while (ending_condition)
 8000612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d1eb      	bne.n	80005f2 <command_checker+0x12>
        }

    }

    // Allocate memory for the command string with an extra byte for the null terminator
    char* command = (char*)malloc(index + 1);
 800061a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800061e:	3301      	adds	r3, #1
 8000620:	4618      	mov	r0, r3
 8000622:	f007 fa87 	bl	8007b34 <malloc>
 8000626:	4603      	mov	r3, r0
 8000628:	60bb      	str	r3, [r7, #8]
    if (command == NULL)
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d101      	bne.n	8000634 <command_checker+0x54>
    {
        return NULL;  // Allocation failed
 8000630:	2300      	movs	r3, #0
 8000632:	e00d      	b.n	8000650 <command_checker+0x70>
    }

    // Copy the command part from buffer to the newly allocated string
    strncpy(command, (char*)buffer, index);
 8000634:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000638:	461a      	mov	r2, r3
 800063a:	6879      	ldr	r1, [r7, #4]
 800063c:	68b8      	ldr	r0, [r7, #8]
 800063e:	f007 fd83 	bl	8008148 <strncpy>
    command[index] = '\0';  // Null-terminate the string
 8000642:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000646:	68ba      	ldr	r2, [r7, #8]
 8000648:	4413      	add	r3, r2
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]

    return command;
 800064e:	68bb      	ldr	r3, [r7, #8]
}
 8000650:	4618      	mov	r0, r3
 8000652:	3710      	adds	r7, #16
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <head_control>:
char* head_control(void) {
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
    //char RxBuffer1[RX_BUFFER_SIZE];
    //memset(RxBuffer1, '\0', sizeof(RxBuffer1)); // Clear the buffer

    char received_char1;
    int8_t index = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	73fb      	strb	r3, [r7, #15]
    memset(RxBuffer1, '\0', sizeof(RxBuffer1));
 8000662:	2220      	movs	r2, #32
 8000664:	2100      	movs	r1, #0
 8000666:	4836      	ldr	r0, [pc, #216]	@ (8000740 <head_control+0xe8>)
 8000668:	f007 fd66 	bl	8008138 <memset>
    // Continue to receive characters until the character '$' is found

    uint32_t start_time=HAL_GetTick();
 800066c:	f001 ff10 	bl	8002490 <HAL_GetTick>
 8000670:	60b8      	str	r0, [r7, #8]
    uint32_t timeout1=7000;
 8000672:	f641 3358 	movw	r3, #7000	@ 0x1b58
 8000676:	607b      	str	r3, [r7, #4]


    while (1) {
        // Receive one character at a time
		diff1=HAL_GetTick()-start_time;
 8000678:	f001 ff0a 	bl	8002490 <HAL_GetTick>
 800067c:	4602      	mov	r2, r0
 800067e:	68bb      	ldr	r3, [r7, #8]
 8000680:	1ad3      	subs	r3, r2, r3
 8000682:	4a30      	ldr	r2, [pc, #192]	@ (8000744 <head_control+0xec>)
 8000684:	6013      	str	r3, [r2, #0]
		if(diff1>=timeout1){
 8000686:	4b2f      	ldr	r3, [pc, #188]	@ (8000744 <head_control+0xec>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	687a      	ldr	r2, [r7, #4]
 800068c:	429a      	cmp	r2, r3
 800068e:	d801      	bhi.n	8000694 <head_control+0x3c>
		return "error$"; }
 8000690:	4b2d      	ldr	r3, [pc, #180]	@ (8000748 <head_control+0xf0>)
 8000692:	e050      	b.n	8000736 <head_control+0xde>

    	if (HAL_UART_Receive(&huart5, (uint8_t*)&received_char1, 1, 100) == HAL_OK) {
 8000694:	1cf9      	adds	r1, r7, #3
 8000696:	2364      	movs	r3, #100	@ 0x64
 8000698:	2201      	movs	r2, #1
 800069a:	482c      	ldr	r0, [pc, #176]	@ (800074c <head_control+0xf4>)
 800069c:	f005 ffc0 	bl	8006620 <HAL_UART_Receive>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d1e8      	bne.n	8000678 <head_control+0x20>
        //if (HAL_UART_Receive(&huart5, (uint8_t*)&received_char1, 1, HAL_MAX_DELAY) == HAL_OK) {
        //if (HAL_UART_Receive(&huart5, (uint8_t*)received_char1, 1, HAL_MAX_DELAY) == HAL_OK) {
            // Skip adding to buffer if the received character is '\0'
    		if (received_char1=='H'){
 80006a6:	78fb      	ldrb	r3, [r7, #3]
 80006a8:	2b48      	cmp	r3, #72	@ 0x48
 80006aa:	d135      	bne.n	8000718 <head_control+0xc0>
    			RxBuffer1[index++] = received_char1;
 80006ac:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80006b0:	b2d3      	uxtb	r3, r2
 80006b2:	3301      	adds	r3, #1
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	73fb      	strb	r3, [r7, #15]
 80006b8:	78f9      	ldrb	r1, [r7, #3]
 80006ba:	4b21      	ldr	r3, [pc, #132]	@ (8000740 <head_control+0xe8>)
 80006bc:	5499      	strb	r1, [r3, r2]

    			while(1){
    				diff=HAL_GetTick()-start_time;
 80006be:	f001 fee7 	bl	8002490 <HAL_GetTick>
 80006c2:	4602      	mov	r2, r0
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	1ad3      	subs	r3, r2, r3
 80006c8:	4a21      	ldr	r2, [pc, #132]	@ (8000750 <head_control+0xf8>)
 80006ca:	6013      	str	r3, [r2, #0]
    				if(diff>=timeout1){
 80006cc:	4b20      	ldr	r3, [pc, #128]	@ (8000750 <head_control+0xf8>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	687a      	ldr	r2, [r7, #4]
 80006d2:	429a      	cmp	r2, r3
 80006d4:	d91f      	bls.n	8000716 <head_control+0xbe>
    				break;}
    				if (HAL_UART_Receive(&huart5, (uint8_t*)&received_char1, 1, 100) == HAL_OK) {
 80006d6:	1cf9      	adds	r1, r7, #3
 80006d8:	2364      	movs	r3, #100	@ 0x64
 80006da:	2201      	movs	r2, #1
 80006dc:	481b      	ldr	r0, [pc, #108]	@ (800074c <head_control+0xf4>)
 80006de:	f005 ff9f 	bl	8006620 <HAL_UART_Receive>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d1ea      	bne.n	80006be <head_control+0x66>


    						if (received_char1 == '\0') {
 80006e8:	78fb      	ldrb	r3, [r7, #3]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d011      	beq.n	8000712 <head_control+0xba>
    							continue;
    						}


    						RxBuffer1[index++] = received_char1;
 80006ee:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80006f2:	b2d3      	uxtb	r3, r2
 80006f4:	3301      	adds	r3, #1
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	73fb      	strb	r3, [r7, #15]
 80006fa:	78f9      	ldrb	r1, [r7, #3]
 80006fc:	4b10      	ldr	r3, [pc, #64]	@ (8000740 <head_control+0xe8>)
 80006fe:	5499      	strb	r1, [r3, r2]
            //HAL_Delay(1);
            // Break the loop if the end of the buffer is reached or if '$' is received
    						if (index >= RX_BUFFER_SIZE || received_char1 == '$') {
 8000700:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000704:	2b1f      	cmp	r3, #31
 8000706:	dc02      	bgt.n	800070e <head_control+0xb6>
 8000708:	78fb      	ldrb	r3, [r7, #3]
 800070a:	2b24      	cmp	r3, #36	@ 0x24
 800070c:	d1d7      	bne.n	80006be <head_control+0x66>
    							return RxBuffer1;
 800070e:	4b0c      	ldr	r3, [pc, #48]	@ (8000740 <head_control+0xe8>)
 8000710:	e011      	b.n	8000736 <head_control+0xde>
    							continue;
 8000712:	bf00      	nop
    				diff=HAL_GetTick()-start_time;
 8000714:	e7d3      	b.n	80006be <head_control+0x66>
    				break;}
 8000716:	bf00      	nop
    						}
    						//else {break;}
    					}
    				}
    			}
    		if (index >= RX_BUFFER_SIZE || received_char1 == '$') {
 8000718:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800071c:	2b1f      	cmp	r3, #31
 800071e:	dc02      	bgt.n	8000726 <head_control+0xce>
 8000720:	78fb      	ldrb	r3, [r7, #3]
 8000722:	2b24      	cmp	r3, #36	@ 0x24
 8000724:	d101      	bne.n	800072a <head_control+0xd2>
    			return RxBuffer1;
 8000726:	4b06      	ldr	r3, [pc, #24]	@ (8000740 <head_control+0xe8>)
 8000728:	e005      	b.n	8000736 <head_control+0xde>
    		    						}
			if(diff>=timeout1){
 800072a:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <head_control+0xf8>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	687a      	ldr	r2, [r7, #4]
 8000730:	429a      	cmp	r2, r3
 8000732:	d8a1      	bhi.n	8000678 <head_control+0x20>
				return "error$";}
 8000734:	4b04      	ldr	r3, [pc, #16]	@ (8000748 <head_control+0xf0>)

    // Null-terminate the string
    RxBuffer1[index] = '\0';

    return RxBuffer1;
}
 8000736:	4618      	mov	r0, r3
 8000738:	3710      	adds	r7, #16
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	200000c8 	.word	0x200000c8
 8000744:	200000f0 	.word	0x200000f0
 8000748:	08009500 	.word	0x08009500
 800074c:	200002d0 	.word	0x200002d0
 8000750:	200000ec 	.word	0x200000ec

08000754 <swtch_control>:

char* swtch_control(void){ //odbiór stanów czujników obrotu kafelka
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0

		memset(RxBuffer1, '\0', sizeof(RxBuffer1)); // Clear the buffer
 800075a:	2220      	movs	r2, #32
 800075c:	2100      	movs	r1, #0
 800075e:	4817      	ldr	r0, [pc, #92]	@ (80007bc <swtch_control+0x68>)
 8000760:	f007 fcea 	bl	8008138 <memset>

	    char received_char2;
	    int8_t index = 0;
 8000764:	2300      	movs	r3, #0
 8000766:	71fb      	strb	r3, [r7, #7]

	    // Continue to receive characters until the character '$' is found
	    while (1) {
	            // Receive one character at a time
	        	if (HAL_UART_Receive(&huart5, (uint8_t*)&received_char2, 1, 1000) == HAL_OK) {
 8000768:	1db9      	adds	r1, r7, #6
 800076a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800076e:	2201      	movs	r2, #1
 8000770:	4813      	ldr	r0, [pc, #76]	@ (80007c0 <swtch_control+0x6c>)
 8000772:	f005 ff55 	bl	8006620 <HAL_UART_Receive>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d1f5      	bne.n	8000768 <swtch_control+0x14>

	        		// Skip adding to buffer if the received character is '\0'
	                if (received_char2 == '\0') {
 800077c:	79bb      	ldrb	r3, [r7, #6]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d010      	beq.n	80007a4 <swtch_control+0x50>
	                    continue;
	                }

	                RxBuffer1[index++] = received_char2;
 8000782:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000786:	b2d3      	uxtb	r3, r2
 8000788:	3301      	adds	r3, #1
 800078a:	b2db      	uxtb	r3, r3
 800078c:	71fb      	strb	r3, [r7, #7]
 800078e:	79b9      	ldrb	r1, [r7, #6]
 8000790:	4b0a      	ldr	r3, [pc, #40]	@ (80007bc <swtch_control+0x68>)
 8000792:	5499      	strb	r1, [r3, r2]
	                //HAL_Delay(1);
	                // Break the loop if the end of the buffer is reached or if '$' is received
	                if (index >= RX_BUFFER_SIZE || received_char2 == '$') {
 8000794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000798:	2b1f      	cmp	r3, #31
 800079a:	dc05      	bgt.n	80007a8 <swtch_control+0x54>
 800079c:	79bb      	ldrb	r3, [r7, #6]
 800079e:	2b24      	cmp	r3, #36	@ 0x24
 80007a0:	d002      	beq.n	80007a8 <swtch_control+0x54>
 80007a2:	e7e1      	b.n	8000768 <swtch_control+0x14>
	                    continue;
 80007a4:	bf00      	nop
	        	if (HAL_UART_Receive(&huart5, (uint8_t*)&received_char2, 1, 1000) == HAL_OK) {
 80007a6:	e7df      	b.n	8000768 <swtch_control+0x14>

	                }
	            }
	    }
	        // Null-terminate the string
	        RxBuffer1[index] = '\0';
 80007a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ac:	4a03      	ldr	r2, [pc, #12]	@ (80007bc <swtch_control+0x68>)
 80007ae:	2100      	movs	r1, #0
 80007b0:	54d1      	strb	r1, [r2, r3]

	        return RxBuffer1;
 80007b2:	4b02      	ldr	r3, [pc, #8]	@ (80007bc <swtch_control+0x68>)
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	200000c8 	.word	0x200000c8
 80007c0:	200002d0 	.word	0x200002d0

080007c4 <gaps_control>:
char* gaps_control(void){ //odbiór stanów czujników szczelinowych w odkręcaczach
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0

		memset(RxBuffer1, '\0', sizeof(RxBuffer1)); // Clear the buffer
 80007ca:	2220      	movs	r2, #32
 80007cc:	2100      	movs	r1, #0
 80007ce:	4817      	ldr	r0, [pc, #92]	@ (800082c <gaps_control+0x68>)
 80007d0:	f007 fcb2 	bl	8008138 <memset>

	    char received_char2;
	    int8_t index = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	71fb      	strb	r3, [r7, #7]

	    // Continue to receive characters until the character '$' is found
	    while (1) {
	            // Receive one character at a time
	        	if (HAL_UART_Receive(&huart5, (uint8_t*)&received_char2, 1, 1000) == HAL_OK) {
 80007d8:	1db9      	adds	r1, r7, #6
 80007da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007de:	2201      	movs	r2, #1
 80007e0:	4813      	ldr	r0, [pc, #76]	@ (8000830 <gaps_control+0x6c>)
 80007e2:	f005 ff1d 	bl	8006620 <HAL_UART_Receive>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d1f5      	bne.n	80007d8 <gaps_control+0x14>

	        		// Skip adding to buffer if the received character is '\0'
	                if (received_char2 == '\0') {
 80007ec:	79bb      	ldrb	r3, [r7, #6]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d010      	beq.n	8000814 <gaps_control+0x50>
	                    continue;
	                }

	                RxBuffer1[index++] = received_char2;
 80007f2:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80007f6:	b2d3      	uxtb	r3, r2
 80007f8:	3301      	adds	r3, #1
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	71fb      	strb	r3, [r7, #7]
 80007fe:	79b9      	ldrb	r1, [r7, #6]
 8000800:	4b0a      	ldr	r3, [pc, #40]	@ (800082c <gaps_control+0x68>)
 8000802:	5499      	strb	r1, [r3, r2]
	                //HAL_Delay(1);
	                // Break the loop if the end of the buffer is reached or if '$' is received
	                if (index >= RX_BUFFER_SIZE || received_char2 == '$') {
 8000804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000808:	2b1f      	cmp	r3, #31
 800080a:	dc05      	bgt.n	8000818 <gaps_control+0x54>
 800080c:	79bb      	ldrb	r3, [r7, #6]
 800080e:	2b24      	cmp	r3, #36	@ 0x24
 8000810:	d002      	beq.n	8000818 <gaps_control+0x54>
 8000812:	e7e1      	b.n	80007d8 <gaps_control+0x14>
	                    continue;
 8000814:	bf00      	nop
	        	if (HAL_UART_Receive(&huart5, (uint8_t*)&received_char2, 1, 1000) == HAL_OK) {
 8000816:	e7df      	b.n	80007d8 <gaps_control+0x14>

	                }
	            }
	    }
	        // Null-terminate the string
	        RxBuffer1[index] = '\0';
 8000818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081c:	4a03      	ldr	r2, [pc, #12]	@ (800082c <gaps_control+0x68>)
 800081e:	2100      	movs	r1, #0
 8000820:	54d1      	strb	r1, [r2, r3]

	        return RxBuffer1;
 8000822:	4b02      	ldr	r3, [pc, #8]	@ (800082c <gaps_control+0x68>)
}
 8000824:	4618      	mov	r0, r3
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	200000c8 	.word	0x200000c8
 8000830:	200002d0 	.word	0x200002d0

08000834 <SPI_Communication>:
void SPI_Communication(void)
{
 8000834:	b590      	push	{r4, r7, lr}
 8000836:	b0a9      	sub	sp, #164	@ 0xa4
 8000838:	af02      	add	r7, sp, #8

    int8_t index = 0;
 800083a:	2300      	movs	r3, #0
 800083c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    uint8_t receivedData;
    uint8_t pinstate = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 8000840:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000844:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000848:	f002 f9a2 	bl	8002b90 <HAL_GPIO_ReadPin>
 800084c:	4603      	mov	r3, r0
 800084e:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96


    if (!pinstate) {memset(RxBuffer, 0, sizeof(RxBuffer));}
 8000852:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000856:	2b00      	cmp	r3, #0
 8000858:	f040 82c1 	bne.w	8000dde <SPI_Communication+0x5aa>
 800085c:	2220      	movs	r2, #32
 800085e:	2100      	movs	r1, #0
 8000860:	48bb      	ldr	r0, [pc, #748]	@ (8000b50 <SPI_Communication+0x31c>)
 8000862:	f007 fc69 	bl	8008138 <memset>

    while (!pinstate) {
 8000866:	e2ba      	b.n	8000dde <SPI_Communication+0x5aa>
        // Receive data from SPI
        HAL_SPI_Receive(&hspi1, &receivedData, 1, HAL_MAX_DELAY);
 8000868:	f107 014f 	add.w	r1, r7, #79	@ 0x4f
 800086c:	f04f 33ff 	mov.w	r3, #4294967295
 8000870:	2201      	movs	r2, #1
 8000872:	48b8      	ldr	r0, [pc, #736]	@ (8000b54 <SPI_Communication+0x320>)
 8000874:	f003 fc26 	bl	80040c4 <HAL_SPI_Receive>

        // Check for buffer overflow
        if (index < MAX_BUFFER_SIZE)
 8000878:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 800087c:	2b1f      	cmp	r3, #31
 800087e:	f300 82ae 	bgt.w	8000dde <SPI_Communication+0x5aa>
        {
            // Store received data in buffer
            RxBuffer[index++] = (char)receivedData;
 8000882:	f997 2097 	ldrsb.w	r2, [r7, #151]	@ 0x97
 8000886:	b2d3      	uxtb	r3, r2
 8000888:	3301      	adds	r3, #1
 800088a:	b2db      	uxtb	r3, r3
 800088c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8000890:	f897 104f 	ldrb.w	r1, [r7, #79]	@ 0x4f
 8000894:	4bae      	ldr	r3, [pc, #696]	@ (8000b50 <SPI_Communication+0x31c>)
 8000896:	5499      	strb	r1, [r3, r2]

            // Check if end of message
            if ((char)receivedData == END_OF_MESSAGE)
 8000898:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800089c:	2b24      	cmp	r3, #36	@ 0x24
 800089e:	f040 8295 	bne.w	8000dcc <SPI_Communication+0x598>
            {
            	char* command = command_checker(RxBuffer);
 80008a2:	48ab      	ldr	r0, [pc, #684]	@ (8000b50 <SPI_Communication+0x31c>)
 80008a4:	f7ff fe9c 	bl	80005e0 <command_checker>
 80008a8:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
            	if(command == NULL){command = "MEM#ERR";}
 80008ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d103      	bne.n	80008bc <SPI_Communication+0x88>
 80008b4:	4ba8      	ldr	r3, [pc, #672]	@ (8000b58 <SPI_Communication+0x324>)
 80008b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80008ba:	e272      	b.n	8000da2 <SPI_Communication+0x56e>
////////////////////////////////////////////////////////////////////////////////////////////////////////////
            	else if(strcmp(command, "HEAD") == 0)
 80008bc:	49a7      	ldr	r1, [pc, #668]	@ (8000b5c <SPI_Communication+0x328>)
 80008be:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 80008c2:	f7ff fcad 	bl	8000220 <strcmp>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d160      	bne.n	800098e <SPI_Communication+0x15a>
            	{
            		HAL_UART_Transmit(&huart5, (uint8_t *)RxBuffer, strlen(RxBuffer), 100);
 80008cc:	48a0      	ldr	r0, [pc, #640]	@ (8000b50 <SPI_Communication+0x31c>)
 80008ce:	f7ff fcb1 	bl	8000234 <strlen>
 80008d2:	4603      	mov	r3, r0
 80008d4:	b29a      	uxth	r2, r3
 80008d6:	2364      	movs	r3, #100	@ 0x64
 80008d8:	499d      	ldr	r1, [pc, #628]	@ (8000b50 <SPI_Communication+0x31c>)
 80008da:	48a1      	ldr	r0, [pc, #644]	@ (8000b60 <SPI_Communication+0x32c>)
 80008dc:	f005 fe12 	bl	8006504 <HAL_UART_Transmit>
            		char* received_data = head_control();
 80008e0:	f7ff feba 	bl	8000658 <head_control>
 80008e4:	6538      	str	r0, [r7, #80]	@ 0x50
            		char* str;
            		memset(TxBuffer, '\0', sizeof(TxBuffer));
 80008e6:	2220      	movs	r2, #32
 80008e8:	2100      	movs	r1, #0
 80008ea:	489e      	ldr	r0, [pc, #632]	@ (8000b64 <SPI_Communication+0x330>)
 80008ec:	f007 fc24 	bl	8008138 <memset>
            		if(strcmp(received_data, "HEAD#0#F0F0F0F0$") == 0 ){str = "HEAD#0#NOK$";}
 80008f0:	499d      	ldr	r1, [pc, #628]	@ (8000b68 <SPI_Communication+0x334>)
 80008f2:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80008f4:	f7ff fc94 	bl	8000220 <strcmp>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d103      	bne.n	8000906 <SPI_Communication+0xd2>
 80008fe:	4b9b      	ldr	r3, [pc, #620]	@ (8000b6c <SPI_Communication+0x338>)
 8000900:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000904:	e01f      	b.n	8000946 <SPI_Communication+0x112>

            		else if(strcmp(received_data, "HEAD#1#F0F0F0F0$") == 0 ) {str = "HEAD#1#NOK$";}
 8000906:	499a      	ldr	r1, [pc, #616]	@ (8000b70 <SPI_Communication+0x33c>)
 8000908:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800090a:	f7ff fc89 	bl	8000220 <strcmp>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d103      	bne.n	800091c <SPI_Communication+0xe8>
 8000914:	4b97      	ldr	r3, [pc, #604]	@ (8000b74 <SPI_Communication+0x340>)
 8000916:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800091a:	e014      	b.n	8000946 <SPI_Communication+0x112>
            		else if (received_data[5]=='0'){str = "HEAD#0#OK$";}
 800091c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800091e:	3305      	adds	r3, #5
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	2b30      	cmp	r3, #48	@ 0x30
 8000924:	d103      	bne.n	800092e <SPI_Communication+0xfa>
 8000926:	4b94      	ldr	r3, [pc, #592]	@ (8000b78 <SPI_Communication+0x344>)
 8000928:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800092c:	e00b      	b.n	8000946 <SPI_Communication+0x112>
            		else if (received_data[5]=='1'){str="HEAD#1#OK$";}
 800092e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000930:	3305      	adds	r3, #5
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	2b31      	cmp	r3, #49	@ 0x31
 8000936:	d103      	bne.n	8000940 <SPI_Communication+0x10c>
 8000938:	4b90      	ldr	r3, [pc, #576]	@ (8000b7c <SPI_Communication+0x348>)
 800093a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800093e:	e002      	b.n	8000946 <SPI_Communication+0x112>
            		else{str="HEAD#0#NOK$";}
 8000940:	4b8a      	ldr	r3, [pc, #552]	@ (8000b6c <SPI_Communication+0x338>)
 8000942:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

            		if (strcmp(received_data,"error$") == 0){
 8000946:	498e      	ldr	r1, [pc, #568]	@ (8000b80 <SPI_Communication+0x34c>)
 8000948:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800094a:	f7ff fc69 	bl	8000220 <strcmp>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d110      	bne.n	8000976 <SPI_Communication+0x142>
            			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8000954:	2110      	movs	r1, #16
 8000956:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800095a:	f002 f949 	bl	8002bf0 <HAL_GPIO_TogglePin>
            			HAL_Delay(500);
 800095e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000962:	f001 fda1 	bl	80024a8 <HAL_Delay>
            			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8000966:	2110      	movs	r1, #16
 8000968:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800096c:	f002 f940 	bl	8002bf0 <HAL_GPIO_TogglePin>
            			str = "error$";}
 8000970:	4b83      	ldr	r3, [pc, #524]	@ (8000b80 <SPI_Communication+0x34c>)
 8000972:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

            		strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
 8000976:	221f      	movs	r2, #31
 8000978:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800097c:	4879      	ldr	r0, [pc, #484]	@ (8000b64 <SPI_Communication+0x330>)
 800097e:	f007 fbe3 	bl	8008148 <strncpy>
            		memset(RxBuffer, '\0', sizeof(RxBuffer));
 8000982:	2220      	movs	r2, #32
 8000984:	2100      	movs	r1, #0
 8000986:	4872      	ldr	r0, [pc, #456]	@ (8000b50 <SPI_Communication+0x31c>)
 8000988:	f007 fbd6 	bl	8008138 <memset>
 800098c:	e209      	b.n	8000da2 <SPI_Communication+0x56e>


            	 }
///////////////////////////////////////////////////////////////////////////////////////////////////////////
            	else if(strcmp(command, "MAGNET") == 0)
 800098e:	497d      	ldr	r1, [pc, #500]	@ (8000b84 <SPI_Communication+0x350>)
 8000990:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8000994:	f7ff fc44 	bl	8000220 <strcmp>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d171      	bne.n	8000a82 <SPI_Communication+0x24e>

            		int8_t MagState;
            		int8_t WhitchMag;
            		char message_to_uart;

            		HAL_UART_Transmit(&huart5, (uint8_t *)RxBuffer, strlen(RxBuffer), HAL_MAX_DELAY);
 800099e:	486c      	ldr	r0, [pc, #432]	@ (8000b50 <SPI_Communication+0x31c>)
 80009a0:	f7ff fc48 	bl	8000234 <strlen>
 80009a4:	4603      	mov	r3, r0
 80009a6:	b29a      	uxth	r2, r3
 80009a8:	f04f 33ff 	mov.w	r3, #4294967295
 80009ac:	4968      	ldr	r1, [pc, #416]	@ (8000b50 <SPI_Communication+0x31c>)
 80009ae:	486c      	ldr	r0, [pc, #432]	@ (8000b60 <SPI_Communication+0x32c>)
 80009b0:	f005 fda8 	bl	8006504 <HAL_UART_Transmit>


            		memset(TxBuffer, '\0', sizeof(TxBuffer));
 80009b4:	2220      	movs	r2, #32
 80009b6:	2100      	movs	r1, #0
 80009b8:	486a      	ldr	r0, [pc, #424]	@ (8000b64 <SPI_Communication+0x330>)
 80009ba:	f007 fbbd 	bl	8008138 <memset>
					sscanf(RxBuffer, "MAGNET#%d#%d$", &WhitchMag,&MagState);
 80009be:	f107 034e 	add.w	r3, r7, #78	@ 0x4e
 80009c2:	f107 024d 	add.w	r2, r7, #77	@ 0x4d
 80009c6:	4970      	ldr	r1, [pc, #448]	@ (8000b88 <SPI_Communication+0x354>)
 80009c8:	4861      	ldr	r0, [pc, #388]	@ (8000b50 <SPI_Communication+0x31c>)
 80009ca:	f007 fab1 	bl	8007f30 <siscanf>
					sprintf(message_to_uart, "MAGNET#%d$", MagState);
 80009ce:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80009d2:	4618      	mov	r0, r3
 80009d4:	f997 304e 	ldrsb.w	r3, [r7, #78]	@ 0x4e
 80009d8:	461a      	mov	r2, r3
 80009da:	496c      	ldr	r1, [pc, #432]	@ (8000b8c <SPI_Communication+0x358>)
 80009dc:	f007 fa88 	bl	8007ef0 <siprintf>

					if (WhitchMag == 0)
 80009e0:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d110      	bne.n	8000a0a <SPI_Communication+0x1d6>
					{
					  HAL_UART_Transmit(&huart5, (uint8_t *)message_to_uart, strlen(message_to_uart), HAL_MAX_DELAY);
 80009e8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80009ec:	461c      	mov	r4, r3
 80009ee:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff fc1e 	bl	8000234 <strlen>
 80009f8:	4603      	mov	r3, r0
 80009fa:	b29a      	uxth	r2, r3
 80009fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000a00:	4621      	mov	r1, r4
 8000a02:	4857      	ldr	r0, [pc, #348]	@ (8000b60 <SPI_Communication+0x32c>)
 8000a04:	f005 fd7e 	bl	8006504 <HAL_UART_Transmit>
 8000a08:	e013      	b.n	8000a32 <SPI_Communication+0x1fe>
					}
					else if (WhitchMag == 1)
 8000a0a:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d10f      	bne.n	8000a32 <SPI_Communication+0x1fe>
					{
					  HAL_UART_Transmit(&huart4, (uint8_t *)message_to_uart, strlen(message_to_uart), HAL_MAX_DELAY);
 8000a12:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000a16:	461c      	mov	r4, r3
 8000a18:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff fc09 	bl	8000234 <strlen>
 8000a22:	4603      	mov	r3, r0
 8000a24:	b29a      	uxth	r2, r3
 8000a26:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2a:	4621      	mov	r1, r4
 8000a2c:	4858      	ldr	r0, [pc, #352]	@ (8000b90 <SPI_Communication+0x35c>)
 8000a2e:	f005 fd69 	bl	8006504 <HAL_UART_Transmit>
					}
					TileON = (MagState != 0) ? 1 : 0;
 8000a32:	f997 304e 	ldrsb.w	r3, [r7, #78]	@ 0x4e
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	bf14      	ite	ne
 8000a3a:	2301      	movne	r3, #1
 8000a3c:	2300      	moveq	r3, #0
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	b25a      	sxtb	r2, r3
 8000a42:	4b54      	ldr	r3, [pc, #336]	@ (8000b94 <SPI_Communication+0x360>)
 8000a44:	701a      	strb	r2, [r3, #0]
					%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
					*/


					char response[50];
					sprintf(response, "MAGNET#%d#%d#OK$", WhitchMag, MagState);
 8000a46:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	f997 304e 	ldrsb.w	r3, [r7, #78]	@ 0x4e
 8000a50:	1d38      	adds	r0, r7, #4
 8000a52:	4951      	ldr	r1, [pc, #324]	@ (8000b98 <SPI_Communication+0x364>)
 8000a54:	f007 fa4c 	bl	8007ef0 <siprintf>
					HAL_Delay(200);
 8000a58:	20c8      	movs	r0, #200	@ 0xc8
 8000a5a:	f001 fd25 	bl	80024a8 <HAL_Delay>
					strncpy(TxBuffer, response, sizeof(TxBuffer) - 1);
 8000a5e:	1d3b      	adds	r3, r7, #4
 8000a60:	221f      	movs	r2, #31
 8000a62:	4619      	mov	r1, r3
 8000a64:	483f      	ldr	r0, [pc, #252]	@ (8000b64 <SPI_Communication+0x330>)
 8000a66:	f007 fb6f 	bl	8008148 <strncpy>
					//char *str = "MAGNET#4#OK$";
					//HAL_Delay(200);
					//strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
            		//HAL_Delay(200);

            		memset(RxBuffer, '\0', sizeof(RxBuffer));
 8000a6a:	2220      	movs	r2, #32
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4838      	ldr	r0, [pc, #224]	@ (8000b50 <SPI_Communication+0x31c>)
 8000a70:	f007 fb62 	bl	8008138 <memset>
            		memset(response,'\0',sizeof(response));
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	2232      	movs	r2, #50	@ 0x32
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f007 fb5c 	bl	8008138 <memset>
 8000a80:	e18f      	b.n	8000da2 <SPI_Communication+0x56e>
            	}
///////////////////////////////////////////////////////////////////////////////////////////////////////////
            	else if(strcmp(command,"ROT")==0)
 8000a82:	4946      	ldr	r1, [pc, #280]	@ (8000b9c <SPI_Communication+0x368>)
 8000a84:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8000a88:	f7ff fbca 	bl	8000220 <strcmp>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d11d      	bne.n	8000ace <SPI_Communication+0x29a>
            	{
            		    int number;
            		    sscanf(RxBuffer, "ROT#%d$", &number);
 8000a92:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000a96:	461a      	mov	r2, r3
 8000a98:	4941      	ldr	r1, [pc, #260]	@ (8000ba0 <SPI_Communication+0x36c>)
 8000a9a:	482d      	ldr	r0, [pc, #180]	@ (8000b50 <SPI_Communication+0x31c>)
 8000a9c:	f007 fa48 	bl	8007f30 <siscanf>
            		    Motor_Steer(number);
 8000aa0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000aa2:	b25b      	sxtb	r3, r3
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f000 fd5b 	bl	8001560 <Motor_Steer>
            		memset(TxBuffer, '\0', sizeof(TxBuffer));
 8000aaa:	2220      	movs	r2, #32
 8000aac:	2100      	movs	r1, #0
 8000aae:	482d      	ldr	r0, [pc, #180]	@ (8000b64 <SPI_Communication+0x330>)
 8000ab0:	f007 fb42 	bl	8008138 <memset>
            		char *str = "ROT#OK$";
 8000ab4:	4b3b      	ldr	r3, [pc, #236]	@ (8000ba4 <SPI_Communication+0x370>)
 8000ab6:	65bb      	str	r3, [r7, #88]	@ 0x58
            		strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
 8000ab8:	221f      	movs	r2, #31
 8000aba:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8000abc:	4829      	ldr	r0, [pc, #164]	@ (8000b64 <SPI_Communication+0x330>)
 8000abe:	f007 fb43 	bl	8008148 <strncpy>
            		memset(RxBuffer, '\0', sizeof(RxBuffer));
 8000ac2:	2220      	movs	r2, #32
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4822      	ldr	r0, [pc, #136]	@ (8000b50 <SPI_Communication+0x31c>)
 8000ac8:	f007 fb36 	bl	8008138 <memset>
 8000acc:	e169      	b.n	8000da2 <SPI_Communication+0x56e>
            	}
/////////////////////////////////////////////////////////////////////////////////////////////////////////
            	else if(strcmp(command,"AROT")==0)
 8000ace:	4936      	ldr	r1, [pc, #216]	@ (8000ba8 <SPI_Communication+0x374>)
 8000ad0:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8000ad4:	f7ff fba4 	bl	8000220 <strcmp>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d17e      	bne.n	8000bdc <SPI_Communication+0x3a8>
            	{
            	    uint32_t start_time=HAL_GetTick();
 8000ade:	f001 fcd7 	bl	8002490 <HAL_GetTick>
 8000ae2:	6738      	str	r0, [r7, #112]	@ 0x70
            	    uint32_t timeout1=10000;
 8000ae4:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000ae8:	66fb      	str	r3, [r7, #108]	@ 0x6c

            		 int number;
            		 sscanf(RxBuffer, "AROT#%d$", &number);
 8000aea:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000aee:	461a      	mov	r2, r3
 8000af0:	492e      	ldr	r1, [pc, #184]	@ (8000bac <SPI_Communication+0x378>)
 8000af2:	4817      	ldr	r0, [pc, #92]	@ (8000b50 <SPI_Communication+0x31c>)
 8000af4:	f007 fa1c 	bl	8007f30 <siscanf>


            		 ABSRotateHead(number);
 8000af8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000afa:	b25b      	sxtb	r3, r3
 8000afc:	4618      	mov	r0, r3
 8000afe:	f000 fdd1 	bl	80016a4 <ABSRotateHead>
            		 //char number1=number;
            		 memset(TxBuffer, '\0', sizeof(TxBuffer));
 8000b02:	2220      	movs	r2, #32
 8000b04:	2100      	movs	r1, #0
 8000b06:	4817      	ldr	r0, [pc, #92]	@ (8000b64 <SPI_Communication+0x330>)
 8000b08:	f007 fb16 	bl	8008138 <memset>
            		 //if ()
            		 if (number== 1){
 8000b0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d107      	bne.n	8000b22 <SPI_Communication+0x2ee>
            		 	 char *str = "AROT#1#OK$";
 8000b12:	4b27      	ldr	r3, [pc, #156]	@ (8000bb0 <SPI_Communication+0x37c>)
 8000b14:	65fb      	str	r3, [r7, #92]	@ 0x5c
            		 	 strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
 8000b16:	221f      	movs	r2, #31
 8000b18:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8000b1a:	4812      	ldr	r0, [pc, #72]	@ (8000b64 <SPI_Communication+0x330>)
 8000b1c:	f007 fb14 	bl	8008148 <strncpy>
 8000b20:	e056      	b.n	8000bd0 <SPI_Communication+0x39c>
            		 }
            		 else if (number==0){
 8000b22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d107      	bne.n	8000b38 <SPI_Communication+0x304>
            			 char *str = "AROT#0#OK$";
 8000b28:	4b22      	ldr	r3, [pc, #136]	@ (8000bb4 <SPI_Communication+0x380>)
 8000b2a:	663b      	str	r3, [r7, #96]	@ 0x60
            			 strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
 8000b2c:	221f      	movs	r2, #31
 8000b2e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8000b30:	480c      	ldr	r0, [pc, #48]	@ (8000b64 <SPI_Communication+0x330>)
 8000b32:	f007 fb09 	bl	8008148 <strncpy>
 8000b36:	e04b      	b.n	8000bd0 <SPI_Communication+0x39c>
            		 }
            		 else if (number==2){
 8000b38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000b3a:	2b02      	cmp	r3, #2
 8000b3c:	d13e      	bne.n	8000bbc <SPI_Communication+0x388>
            		 	 char *str = "AROT#2#OK$";
 8000b3e:	4b1e      	ldr	r3, [pc, #120]	@ (8000bb8 <SPI_Communication+0x384>)
 8000b40:	667b      	str	r3, [r7, #100]	@ 0x64
            		 	 strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
 8000b42:	221f      	movs	r2, #31
 8000b44:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8000b46:	4807      	ldr	r0, [pc, #28]	@ (8000b64 <SPI_Communication+0x330>)
 8000b48:	f007 fafe 	bl	8008148 <strncpy>
 8000b4c:	e040      	b.n	8000bd0 <SPI_Communication+0x39c>
 8000b4e:	bf00      	nop
 8000b50:	20000088 	.word	0x20000088
 8000b54:	200000f4 	.word	0x200000f4
 8000b58:	08009508 	.word	0x08009508
 8000b5c:	08009510 	.word	0x08009510
 8000b60:	200002d0 	.word	0x200002d0
 8000b64:	200000a8 	.word	0x200000a8
 8000b68:	08009518 	.word	0x08009518
 8000b6c:	0800952c 	.word	0x0800952c
 8000b70:	08009538 	.word	0x08009538
 8000b74:	0800954c 	.word	0x0800954c
 8000b78:	08009558 	.word	0x08009558
 8000b7c:	08009564 	.word	0x08009564
 8000b80:	08009500 	.word	0x08009500
 8000b84:	08009570 	.word	0x08009570
 8000b88:	08009578 	.word	0x08009578
 8000b8c:	08009588 	.word	0x08009588
 8000b90:	2000023c 	.word	0x2000023c
 8000b94:	200000e9 	.word	0x200000e9
 8000b98:	08009594 	.word	0x08009594
 8000b9c:	080095a8 	.word	0x080095a8
 8000ba0:	080095ac 	.word	0x080095ac
 8000ba4:	080095b4 	.word	0x080095b4
 8000ba8:	080095bc 	.word	0x080095bc
 8000bac:	080095c4 	.word	0x080095c4
 8000bb0:	080095d0 	.word	0x080095d0
 8000bb4:	080095dc 	.word	0x080095dc
 8000bb8:	080095e8 	.word	0x080095e8
            		 }
            		 else if (number==3){
 8000bbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000bbe:	2b03      	cmp	r3, #3
 8000bc0:	d106      	bne.n	8000bd0 <SPI_Communication+0x39c>
            		 	 char *str = "AROT#3#OK$";
 8000bc2:	4b8c      	ldr	r3, [pc, #560]	@ (8000df4 <SPI_Communication+0x5c0>)
 8000bc4:	66bb      	str	r3, [r7, #104]	@ 0x68
            		 	 strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
 8000bc6:	221f      	movs	r2, #31
 8000bc8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8000bca:	488b      	ldr	r0, [pc, #556]	@ (8000df8 <SPI_Communication+0x5c4>)
 8000bcc:	f007 fabc 	bl	8008148 <strncpy>
            		 }
            		// strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
            		 memset(RxBuffer, '\0', sizeof(RxBuffer));
 8000bd0:	2220      	movs	r2, #32
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4889      	ldr	r0, [pc, #548]	@ (8000dfc <SPI_Communication+0x5c8>)
 8000bd6:	f007 faaf 	bl	8008138 <memset>
 8000bda:	e0e2      	b.n	8000da2 <SPI_Communication+0x56e>
            	}
/////////////////////////////////////////////////////////////////////////////////////////////////////////
            	else if(strcmp(command,"TILEBASE")==0) //bazowanie obortu kafelka
 8000bdc:	4988      	ldr	r1, [pc, #544]	@ (8000e00 <SPI_Communication+0x5cc>)
 8000bde:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8000be2:	f7ff fb1d 	bl	8000220 <strcmp>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d12a      	bne.n	8000c42 <SPI_Communication+0x40e>
            	{
            		HeadBase();
 8000bec:	f000 fff4 	bl	8001bd8 <HeadBase>

            		memset(TxBuffer, '\0', sizeof(TxBuffer));
 8000bf0:	2220      	movs	r2, #32
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4880      	ldr	r0, [pc, #512]	@ (8000df8 <SPI_Communication+0x5c4>)
 8000bf6:	f007 fa9f 	bl	8008138 <memset>
            		GPIO_PinState current_state = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7); // Read pin state
 8000bfa:	2180      	movs	r1, #128	@ 0x80
 8000bfc:	4881      	ldr	r0, [pc, #516]	@ (8000e04 <SPI_Communication+0x5d0>)
 8000bfe:	f001 ffc7 	bl	8002b90 <HAL_GPIO_ReadPin>
 8000c02:	4603      	mov	r3, r0
 8000c04:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
            		if (current_state == GPIO_PIN_SET){
 8000c08:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d107      	bne.n	8000c20 <SPI_Communication+0x3ec>
            			char* str = "TILEBASE#OK$";
 8000c10:	4b7d      	ldr	r3, [pc, #500]	@ (8000e08 <SPI_Communication+0x5d4>)
 8000c12:	677b      	str	r3, [r7, #116]	@ 0x74
            			strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
 8000c14:	221f      	movs	r2, #31
 8000c16:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8000c18:	4877      	ldr	r0, [pc, #476]	@ (8000df8 <SPI_Communication+0x5c4>)
 8000c1a:	f007 fa95 	bl	8008148 <strncpy>
 8000c1e:	e00a      	b.n	8000c36 <SPI_Communication+0x402>
            		}
            		else if (current_state == GPIO_PIN_RESET){
 8000c20:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d106      	bne.n	8000c36 <SPI_Communication+0x402>
            			char* str = "TILEBASE#NOK$";
 8000c28:	4b78      	ldr	r3, [pc, #480]	@ (8000e0c <SPI_Communication+0x5d8>)
 8000c2a:	67bb      	str	r3, [r7, #120]	@ 0x78
            			strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
 8000c2c:	221f      	movs	r2, #31
 8000c2e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8000c30:	4871      	ldr	r0, [pc, #452]	@ (8000df8 <SPI_Communication+0x5c4>)
 8000c32:	f007 fa89 	bl	8008148 <strncpy>
            		}
            		//strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
            		memset(RxBuffer, '\0', sizeof(RxBuffer));
 8000c36:	2220      	movs	r2, #32
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4870      	ldr	r0, [pc, #448]	@ (8000dfc <SPI_Communication+0x5c8>)
 8000c3c:	f007 fa7c 	bl	8008138 <memset>
 8000c40:	e0af      	b.n	8000da2 <SPI_Communication+0x56e>
            	}
////////////////////////////////////////////////////////////////////////////////////////////////////////
            	else if(strcmp(command,"SWTCH")==0) //Wysyłka stanu obrotu czujnika 0-wcisniety, 1-pusty
 8000c42:	4973      	ldr	r1, [pc, #460]	@ (8000e10 <SPI_Communication+0x5dc>)
 8000c44:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8000c48:	f7ff faea 	bl	8000220 <strcmp>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d15e      	bne.n	8000d10 <SPI_Communication+0x4dc>
            	{
            		HAL_UART_Transmit(&huart5, (uint8_t *)RxBuffer, strlen(RxBuffer), HAL_MAX_DELAY);
 8000c52:	486a      	ldr	r0, [pc, #424]	@ (8000dfc <SPI_Communication+0x5c8>)
 8000c54:	f7ff faee 	bl	8000234 <strlen>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	b29a      	uxth	r2, r3
 8000c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c60:	4966      	ldr	r1, [pc, #408]	@ (8000dfc <SPI_Communication+0x5c8>)
 8000c62:	486c      	ldr	r0, [pc, #432]	@ (8000e14 <SPI_Communication+0x5e0>)
 8000c64:	f005 fc4e 	bl	8006504 <HAL_UART_Transmit>
            		//HAL_Delay(1);
            		char* received_data = swtch_control();
 8000c68:	f7ff fd74 	bl	8000754 <swtch_control>
 8000c6c:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
            		char* str;
            		memset(TxBuffer, '\0', sizeof(TxBuffer));
 8000c70:	2220      	movs	r2, #32
 8000c72:	2100      	movs	r1, #0
 8000c74:	4860      	ldr	r0, [pc, #384]	@ (8000df8 <SPI_Communication+0x5c4>)
 8000c76:	f007 fa5f 	bl	8008138 <memset>
            		if((strcmp(received_data, "S#0000$")==0)){str = "SWTCH#0#0#0#0$";}
 8000c7a:	4967      	ldr	r1, [pc, #412]	@ (8000e18 <SPI_Communication+0x5e4>)
 8000c7c:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8000c80:	f7ff face 	bl	8000220 <strcmp>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d103      	bne.n	8000c92 <SPI_Communication+0x45e>
 8000c8a:	4b64      	ldr	r3, [pc, #400]	@ (8000e1c <SPI_Communication+0x5e8>)
 8000c8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000c90:	e032      	b.n	8000cf8 <SPI_Communication+0x4c4>
            		else if ((strcmp(received_data, "S#1000$")==0)){str = "SWTCH#1#0#0#0$";}
 8000c92:	4963      	ldr	r1, [pc, #396]	@ (8000e20 <SPI_Communication+0x5ec>)
 8000c94:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8000c98:	f7ff fac2 	bl	8000220 <strcmp>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d103      	bne.n	8000caa <SPI_Communication+0x476>
 8000ca2:	4b60      	ldr	r3, [pc, #384]	@ (8000e24 <SPI_Communication+0x5f0>)
 8000ca4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000ca8:	e026      	b.n	8000cf8 <SPI_Communication+0x4c4>
            		else if ((strcmp(received_data, "S#0100$")==0)){str = "SWTCH#0#1#0#0$";}
 8000caa:	495f      	ldr	r1, [pc, #380]	@ (8000e28 <SPI_Communication+0x5f4>)
 8000cac:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8000cb0:	f7ff fab6 	bl	8000220 <strcmp>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d103      	bne.n	8000cc2 <SPI_Communication+0x48e>
 8000cba:	4b5c      	ldr	r3, [pc, #368]	@ (8000e2c <SPI_Communication+0x5f8>)
 8000cbc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000cc0:	e01a      	b.n	8000cf8 <SPI_Communication+0x4c4>
            		else if ((strcmp(received_data, "S#0010$")==0)){str = "SWTCH#0#0#1#0$";}
 8000cc2:	495b      	ldr	r1, [pc, #364]	@ (8000e30 <SPI_Communication+0x5fc>)
 8000cc4:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8000cc8:	f7ff faaa 	bl	8000220 <strcmp>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d103      	bne.n	8000cda <SPI_Communication+0x4a6>
 8000cd2:	4b58      	ldr	r3, [pc, #352]	@ (8000e34 <SPI_Communication+0x600>)
 8000cd4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000cd8:	e00e      	b.n	8000cf8 <SPI_Communication+0x4c4>
            		else if ((strcmp(received_data, "S#0001$")==0)){str = "SWTCH#0#0#0#1$";}
 8000cda:	4957      	ldr	r1, [pc, #348]	@ (8000e38 <SPI_Communication+0x604>)
 8000cdc:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8000ce0:	f7ff fa9e 	bl	8000220 <strcmp>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d103      	bne.n	8000cf2 <SPI_Communication+0x4be>
 8000cea:	4b54      	ldr	r3, [pc, #336]	@ (8000e3c <SPI_Communication+0x608>)
 8000cec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000cf0:	e002      	b.n	8000cf8 <SPI_Communication+0x4c4>
            		else{str="SWTCH#ERR$";}
 8000cf2:	4b53      	ldr	r3, [pc, #332]	@ (8000e40 <SPI_Communication+0x60c>)
 8000cf4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

            		strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
 8000cf8:	221f      	movs	r2, #31
 8000cfa:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8000cfe:	483e      	ldr	r0, [pc, #248]	@ (8000df8 <SPI_Communication+0x5c4>)
 8000d00:	f007 fa22 	bl	8008148 <strncpy>
            		memset(RxBuffer, '\0', sizeof(RxBuffer));
 8000d04:	2220      	movs	r2, #32
 8000d06:	2100      	movs	r1, #0
 8000d08:	483c      	ldr	r0, [pc, #240]	@ (8000dfc <SPI_Communication+0x5c8>)
 8000d0a:	f007 fa15 	bl	8008138 <memset>
 8000d0e:	e048      	b.n	8000da2 <SPI_Communication+0x56e>

            	}
            	////////////////////////////////////////////////////////////////////////////////////////////////////////
            	else if(strcmp(command,"GAPS")==0) //Wysyłka stanu obrotu czujnika 0-wcisniety, 1-pusty
 8000d10:	494c      	ldr	r1, [pc, #304]	@ (8000e44 <SPI_Communication+0x610>)
 8000d12:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8000d16:	f7ff fa83 	bl	8000220 <strcmp>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d140      	bne.n	8000da2 <SPI_Communication+0x56e>
            	{
            		HAL_UART_Transmit(&huart5, (uint8_t *)RxBuffer, strlen(RxBuffer), HAL_MAX_DELAY);
 8000d20:	4836      	ldr	r0, [pc, #216]	@ (8000dfc <SPI_Communication+0x5c8>)
 8000d22:	f7ff fa87 	bl	8000234 <strlen>
 8000d26:	4603      	mov	r3, r0
 8000d28:	b29a      	uxth	r2, r3
 8000d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2e:	4933      	ldr	r1, [pc, #204]	@ (8000dfc <SPI_Communication+0x5c8>)
 8000d30:	4838      	ldr	r0, [pc, #224]	@ (8000e14 <SPI_Communication+0x5e0>)
 8000d32:	f005 fbe7 	bl	8006504 <HAL_UART_Transmit>
            		//HAL_Delay(1);
            		char* received_data = gaps_control();
 8000d36:	f7ff fd45 	bl	80007c4 <gaps_control>
 8000d3a:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
            		char output[11];
            		sprintf(output,"G#%c#%c#%c#%c$",received_data[2],received_data[3],received_data[4],received_data[5] );
 8000d3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000d42:	3302      	adds	r3, #2
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	4619      	mov	r1, r3
 8000d48:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000d4c:	3303      	adds	r3, #3
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	461c      	mov	r4, r3
 8000d52:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000d56:	3304      	adds	r3, #4
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000d60:	3305      	adds	r3, #5
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8000d68:	9301      	str	r3, [sp, #4]
 8000d6a:	9200      	str	r2, [sp, #0]
 8000d6c:	4623      	mov	r3, r4
 8000d6e:	460a      	mov	r2, r1
 8000d70:	4935      	ldr	r1, [pc, #212]	@ (8000e48 <SPI_Communication+0x614>)
 8000d72:	f007 f8bd 	bl	8007ef0 <siprintf>
            		printf("%s\n", output);
 8000d76:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f007 f8b0 	bl	8007ee0 <puts>
            		memset(TxBuffer, '\0', sizeof(TxBuffer));
 8000d80:	2220      	movs	r2, #32
 8000d82:	2100      	movs	r1, #0
 8000d84:	481c      	ldr	r0, [pc, #112]	@ (8000df8 <SPI_Communication+0x5c4>)
 8000d86:	f007 f9d7 	bl	8008138 <memset>

            		strncpy(TxBuffer, output, sizeof(TxBuffer) - 1);
 8000d8a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000d8e:	221f      	movs	r2, #31
 8000d90:	4619      	mov	r1, r3
 8000d92:	4819      	ldr	r0, [pc, #100]	@ (8000df8 <SPI_Communication+0x5c4>)
 8000d94:	f007 f9d8 	bl	8008148 <strncpy>
            		memset(RxBuffer, '\0', sizeof(RxBuffer));
 8000d98:	2220      	movs	r2, #32
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4817      	ldr	r0, [pc, #92]	@ (8000dfc <SPI_Communication+0x5c8>)
 8000d9e:	f007 f9cb 	bl	8008138 <memset>

            	}

                HAL_SPI_Transmit(&hspi1, (uint8_t *)TxBuffer, strlen(TxBuffer), HAL_MAX_DELAY);
 8000da2:	4815      	ldr	r0, [pc, #84]	@ (8000df8 <SPI_Communication+0x5c4>)
 8000da4:	f7ff fa46 	bl	8000234 <strlen>
 8000da8:	4603      	mov	r3, r0
 8000daa:	b29a      	uxth	r2, r3
 8000dac:	f04f 33ff 	mov.w	r3, #4294967295
 8000db0:	4911      	ldr	r1, [pc, #68]	@ (8000df8 <SPI_Communication+0x5c4>)
 8000db2:	4826      	ldr	r0, [pc, #152]	@ (8000e4c <SPI_Communication+0x618>)
 8000db4:	f003 f811 	bl	8003dda <HAL_SPI_Transmit>
            	//HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)TxBuffer, strlen(TxBuffer));
                index = 0; // Reset buffer index
 8000db8:	2300      	movs	r3, #0
 8000dba:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
                //memset(TxBuffer, '\0', sizeof(TxBuffer));
                free(command);
 8000dbe:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8000dc2:	f006 febf 	bl	8007b44 <free>
                command = NULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
        }

        // Update pin state
        pinstate = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 8000dcc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000dd0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dd4:	f001 fedc 	bl	8002b90 <HAL_GPIO_ReadPin>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
    while (!pinstate) {
 8000dde:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f43f ad40 	beq.w	8000868 <SPI_Communication+0x34>

    }
    }
}
 8000de8:	bf00      	nop
 8000dea:	bf00      	nop
 8000dec:	379c      	adds	r7, #156	@ 0x9c
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd90      	pop	{r4, r7, pc}
 8000df2:	bf00      	nop
 8000df4:	080095f4 	.word	0x080095f4
 8000df8:	200000a8 	.word	0x200000a8
 8000dfc:	20000088 	.word	0x20000088
 8000e00:	08009600 	.word	0x08009600
 8000e04:	48001000 	.word	0x48001000
 8000e08:	0800960c 	.word	0x0800960c
 8000e0c:	0800961c 	.word	0x0800961c
 8000e10:	0800962c 	.word	0x0800962c
 8000e14:	200002d0 	.word	0x200002d0
 8000e18:	08009634 	.word	0x08009634
 8000e1c:	0800963c 	.word	0x0800963c
 8000e20:	0800964c 	.word	0x0800964c
 8000e24:	08009654 	.word	0x08009654
 8000e28:	08009664 	.word	0x08009664
 8000e2c:	0800966c 	.word	0x0800966c
 8000e30:	0800967c 	.word	0x0800967c
 8000e34:	08009684 	.word	0x08009684
 8000e38:	08009694 	.word	0x08009694
 8000e3c:	0800969c 	.word	0x0800969c
 8000e40:	080096ac 	.word	0x080096ac
 8000e44:	080096b8 	.word	0x080096b8
 8000e48:	080096c0 	.word	0x080096c0
 8000e4c:	200000f4 	.word	0x200000f4

08000e50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e54:	f001 fab7 	bl	80023c6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e58:	f000 f811 	bl	8000e7e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e5c:	f000 faac 	bl	80013b8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000e60:	f000 f85a 	bl	8000f18 <MX_SPI1_Init>
  MX_UART5_Init();
 8000e64:	f000 fa5c 	bl	8001320 <MX_UART5_Init>
  MX_UART4_Init();
 8000e68:	f000 fa0e 	bl	8001288 <MX_UART4_Init>
  MX_TIM1_Init();
 8000e6c:	f000 f88c 	bl	8000f88 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000e70:	f000 f95e 	bl	8001130 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000e74:	f000 f9b2 	bl	80011dc <MX_TIM4_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  SPI_Communication();
 8000e78:	f7ff fcdc 	bl	8000834 <SPI_Communication>
 8000e7c:	e7fc      	b.n	8000e78 <main+0x28>

08000e7e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b094      	sub	sp, #80	@ 0x50
 8000e82:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e84:	f107 0318 	add.w	r3, r7, #24
 8000e88:	2238      	movs	r2, #56	@ 0x38
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f007 f953 	bl	8008138 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e92:	1d3b      	adds	r3, r7, #4
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ea0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000ea4:	f001 febe 	bl	8002c24 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000eb0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eb2:	2340      	movs	r3, #64	@ 0x40
 8000eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000ec2:	2308      	movs	r3, #8
 8000ec4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ed2:	f107 0318 	add.w	r3, r7, #24
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f001 ff58 	bl	8002d8c <HAL_RCC_OscConfig>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000ee2:	f000 fb23 	bl	800152c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ee6:	230f      	movs	r3, #15
 8000ee8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eea:	2303      	movs	r3, #3
 8000eec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000eee:	2380      	movs	r3, #128	@ 0x80
 8000ef0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ef6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000efa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000efc:	1d3b      	adds	r3, r7, #4
 8000efe:	2101      	movs	r1, #1
 8000f00:	4618      	mov	r0, r3
 8000f02:	f002 fa55 	bl	80033b0 <HAL_RCC_ClockConfig>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000f0c:	f000 fb0e 	bl	800152c <Error_Handler>
  }
}
 8000f10:	bf00      	nop
 8000f12:	3750      	adds	r7, #80	@ 0x50
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f1c:	4b18      	ldr	r3, [pc, #96]	@ (8000f80 <MX_SPI1_Init+0x68>)
 8000f1e:	4a19      	ldr	r2, [pc, #100]	@ (8000f84 <MX_SPI1_Init+0x6c>)
 8000f20:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000f22:	4b17      	ldr	r3, [pc, #92]	@ (8000f80 <MX_SPI1_Init+0x68>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f28:	4b15      	ldr	r3, [pc, #84]	@ (8000f80 <MX_SPI1_Init+0x68>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f2e:	4b14      	ldr	r3, [pc, #80]	@ (8000f80 <MX_SPI1_Init+0x68>)
 8000f30:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000f34:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f36:	4b12      	ldr	r3, [pc, #72]	@ (8000f80 <MX_SPI1_Init+0x68>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f3c:	4b10      	ldr	r3, [pc, #64]	@ (8000f80 <MX_SPI1_Init+0x68>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000f42:	4b0f      	ldr	r3, [pc, #60]	@ (8000f80 <MX_SPI1_Init+0x68>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f48:	4b0d      	ldr	r3, [pc, #52]	@ (8000f80 <MX_SPI1_Init+0x68>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f80 <MX_SPI1_Init+0x68>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f54:	4b0a      	ldr	r3, [pc, #40]	@ (8000f80 <MX_SPI1_Init+0x68>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f5a:	4b09      	ldr	r3, [pc, #36]	@ (8000f80 <MX_SPI1_Init+0x68>)
 8000f5c:	2207      	movs	r2, #7
 8000f5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f60:	4b07      	ldr	r3, [pc, #28]	@ (8000f80 <MX_SPI1_Init+0x68>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000f66:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <MX_SPI1_Init+0x68>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f6c:	4804      	ldr	r0, [pc, #16]	@ (8000f80 <MX_SPI1_Init+0x68>)
 8000f6e:	f002 fe89 	bl	8003c84 <HAL_SPI_Init>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8000f78:	f000 fad8 	bl	800152c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	200000f4 	.word	0x200000f4
 8000f84:	40013000 	.word	0x40013000

08000f88 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b09c      	sub	sp, #112	@ 0x70
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f8e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	605a      	str	r2, [r3, #4]
 8000f98:	609a      	str	r2, [r3, #8]
 8000f9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f9c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fa8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]
 8000fb8:	615a      	str	r2, [r3, #20]
 8000fba:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fbc:	1d3b      	adds	r3, r7, #4
 8000fbe:	2234      	movs	r2, #52	@ 0x34
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f007 f8b8 	bl	8008138 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fc8:	4b57      	ldr	r3, [pc, #348]	@ (8001128 <MX_TIM1_Init+0x1a0>)
 8000fca:	4a58      	ldr	r2, [pc, #352]	@ (800112c <MX_TIM1_Init+0x1a4>)
 8000fcc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000fce:	4b56      	ldr	r3, [pc, #344]	@ (8001128 <MX_TIM1_Init+0x1a0>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fd4:	4b54      	ldr	r3, [pc, #336]	@ (8001128 <MX_TIM1_Init+0x1a0>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 399;
 8000fda:	4b53      	ldr	r3, [pc, #332]	@ (8001128 <MX_TIM1_Init+0x1a0>)
 8000fdc:	f240 128f 	movw	r2, #399	@ 0x18f
 8000fe0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fe2:	4b51      	ldr	r3, [pc, #324]	@ (8001128 <MX_TIM1_Init+0x1a0>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fe8:	4b4f      	ldr	r3, [pc, #316]	@ (8001128 <MX_TIM1_Init+0x1a0>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fee:	4b4e      	ldr	r3, [pc, #312]	@ (8001128 <MX_TIM1_Init+0x1a0>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ff4:	484c      	ldr	r0, [pc, #304]	@ (8001128 <MX_TIM1_Init+0x1a0>)
 8000ff6:	f003 fd7b 	bl	8004af0 <HAL_TIM_Base_Init>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001000:	f000 fa94 	bl	800152c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001004:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001008:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800100a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800100e:	4619      	mov	r1, r3
 8001010:	4845      	ldr	r0, [pc, #276]	@ (8001128 <MX_TIM1_Init+0x1a0>)
 8001012:	f004 facf 	bl	80055b4 <HAL_TIM_ConfigClockSource>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800101c:	f000 fa86 	bl	800152c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001020:	4841      	ldr	r0, [pc, #260]	@ (8001128 <MX_TIM1_Init+0x1a0>)
 8001022:	f003 fdbc 	bl	8004b9e <HAL_TIM_PWM_Init>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800102c:	f000 fa7e 	bl	800152c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001030:	2300      	movs	r3, #0
 8001032:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001034:	2300      	movs	r3, #0
 8001036:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001038:	2300      	movs	r3, #0
 800103a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800103c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001040:	4619      	mov	r1, r3
 8001042:	4839      	ldr	r0, [pc, #228]	@ (8001128 <MX_TIM1_Init+0x1a0>)
 8001044:	f005 f89e 	bl	8006184 <HAL_TIMEx_MasterConfigSynchronization>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800104e:	f000 fa6d 	bl	800152c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001052:	2360      	movs	r3, #96	@ 0x60
 8001054:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800105a:	2300      	movs	r3, #0
 800105c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800105e:	2300      	movs	r3, #0
 8001060:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001062:	2300      	movs	r3, #0
 8001064:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001066:	2300      	movs	r3, #0
 8001068:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800106a:	2300      	movs	r3, #0
 800106c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800106e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001072:	2200      	movs	r2, #0
 8001074:	4619      	mov	r1, r3
 8001076:	482c      	ldr	r0, [pc, #176]	@ (8001128 <MX_TIM1_Init+0x1a0>)
 8001078:	f004 f988 	bl	800538c <HAL_TIM_PWM_ConfigChannel>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001082:	f000 fa53 	bl	800152c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001086:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800108a:	2204      	movs	r2, #4
 800108c:	4619      	mov	r1, r3
 800108e:	4826      	ldr	r0, [pc, #152]	@ (8001128 <MX_TIM1_Init+0x1a0>)
 8001090:	f004 f97c 	bl	800538c <HAL_TIM_PWM_ConfigChannel>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800109a:	f000 fa47 	bl	800152c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800109e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80010a2:	2208      	movs	r2, #8
 80010a4:	4619      	mov	r1, r3
 80010a6:	4820      	ldr	r0, [pc, #128]	@ (8001128 <MX_TIM1_Init+0x1a0>)
 80010a8:	f004 f970 	bl	800538c <HAL_TIM_PWM_ConfigChannel>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80010b2:	f000 fa3b 	bl	800152c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80010b6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80010ba:	220c      	movs	r2, #12
 80010bc:	4619      	mov	r1, r3
 80010be:	481a      	ldr	r0, [pc, #104]	@ (8001128 <MX_TIM1_Init+0x1a0>)
 80010c0:	f004 f964 	bl	800538c <HAL_TIM_PWM_ConfigChannel>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 80010ca:	f000 fa2f 	bl	800152c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010ce:	2300      	movs	r3, #0
 80010d0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010d2:	2300      	movs	r3, #0
 80010d4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010e6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80010ec:	2300      	movs	r3, #0
 80010ee:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010f0:	2300      	movs	r3, #0
 80010f2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80010f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80010fe:	2300      	movs	r3, #0
 8001100:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001102:	2300      	movs	r3, #0
 8001104:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	4619      	mov	r1, r3
 800110a:	4807      	ldr	r0, [pc, #28]	@ (8001128 <MX_TIM1_Init+0x1a0>)
 800110c:	f005 f8d0 	bl	80062b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_TIM1_Init+0x192>
  {
    Error_Handler();
 8001116:	f000 fa09 	bl	800152c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800111a:	4803      	ldr	r0, [pc, #12]	@ (8001128 <MX_TIM1_Init+0x1a0>)
 800111c:	f000 ff22 	bl	8001f64 <HAL_TIM_MspPostInit>

}
 8001120:	bf00      	nop
 8001122:	3770      	adds	r7, #112	@ 0x70
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000158 	.word	0x20000158
 800112c:	40012c00 	.word	0x40012c00

08001130 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08c      	sub	sp, #48	@ 0x30
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001136:	f107 030c 	add.w	r3, r7, #12
 800113a:	2224      	movs	r2, #36	@ 0x24
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f006 fffa 	bl	8008138 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001144:	463b      	mov	r3, r7
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800114e:	4b21      	ldr	r3, [pc, #132]	@ (80011d4 <MX_TIM3_Init+0xa4>)
 8001150:	4a21      	ldr	r2, [pc, #132]	@ (80011d8 <MX_TIM3_Init+0xa8>)
 8001152:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001154:	4b1f      	ldr	r3, [pc, #124]	@ (80011d4 <MX_TIM3_Init+0xa4>)
 8001156:	2200      	movs	r2, #0
 8001158:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800115a:	4b1e      	ldr	r3, [pc, #120]	@ (80011d4 <MX_TIM3_Init+0xa4>)
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001160:	4b1c      	ldr	r3, [pc, #112]	@ (80011d4 <MX_TIM3_Init+0xa4>)
 8001162:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001166:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001168:	4b1a      	ldr	r3, [pc, #104]	@ (80011d4 <MX_TIM3_Init+0xa4>)
 800116a:	2200      	movs	r2, #0
 800116c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800116e:	4b19      	ldr	r3, [pc, #100]	@ (80011d4 <MX_TIM3_Init+0xa4>)
 8001170:	2200      	movs	r2, #0
 8001172:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001174:	2303      	movs	r3, #3
 8001176:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001178:	2300      	movs	r3, #0
 800117a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800117c:	2301      	movs	r3, #1
 800117e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001180:	2300      	movs	r3, #0
 8001182:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001184:	2300      	movs	r3, #0
 8001186:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001188:	2300      	movs	r3, #0
 800118a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800118c:	2301      	movs	r3, #1
 800118e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001190:	2300      	movs	r3, #0
 8001192:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001198:	f107 030c 	add.w	r3, r7, #12
 800119c:	4619      	mov	r1, r3
 800119e:	480d      	ldr	r0, [pc, #52]	@ (80011d4 <MX_TIM3_Init+0xa4>)
 80011a0:	f003 fe70 	bl	8004e84 <HAL_TIM_Encoder_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80011aa:	f000 f9bf 	bl	800152c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ae:	2300      	movs	r3, #0
 80011b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011b6:	463b      	mov	r3, r7
 80011b8:	4619      	mov	r1, r3
 80011ba:	4806      	ldr	r0, [pc, #24]	@ (80011d4 <MX_TIM3_Init+0xa4>)
 80011bc:	f004 ffe2 	bl	8006184 <HAL_TIMEx_MasterConfigSynchronization>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80011c6:	f000 f9b1 	bl	800152c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011ca:	bf00      	nop
 80011cc:	3730      	adds	r7, #48	@ 0x30
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	200001a4 	.word	0x200001a4
 80011d8:	40000400 	.word	0x40000400

080011dc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08c      	sub	sp, #48	@ 0x30
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80011e2:	f107 030c 	add.w	r3, r7, #12
 80011e6:	2224      	movs	r2, #36	@ 0x24
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f006 ffa4 	bl	8008138 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f0:	463b      	mov	r3, r7
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011fa:	4b21      	ldr	r3, [pc, #132]	@ (8001280 <MX_TIM4_Init+0xa4>)
 80011fc:	4a21      	ldr	r2, [pc, #132]	@ (8001284 <MX_TIM4_Init+0xa8>)
 80011fe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 8001200:	4b1f      	ldr	r3, [pc, #124]	@ (8001280 <MX_TIM4_Init+0xa4>)
 8001202:	2201      	movs	r2, #1
 8001204:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001206:	4b1e      	ldr	r3, [pc, #120]	@ (8001280 <MX_TIM4_Init+0xa4>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800120c:	4b1c      	ldr	r3, [pc, #112]	@ (8001280 <MX_TIM4_Init+0xa4>)
 800120e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001212:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001214:	4b1a      	ldr	r3, [pc, #104]	@ (8001280 <MX_TIM4_Init+0xa4>)
 8001216:	2200      	movs	r2, #0
 8001218:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800121a:	4b19      	ldr	r3, [pc, #100]	@ (8001280 <MX_TIM4_Init+0xa4>)
 800121c:	2280      	movs	r2, #128	@ 0x80
 800121e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001220:	2303      	movs	r3, #3
 8001222:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001224:	2300      	movs	r3, #0
 8001226:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001228:	2301      	movs	r3, #1
 800122a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800122c:	2300      	movs	r3, #0
 800122e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 8001230:	2301      	movs	r3, #1
 8001232:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001234:	2300      	movs	r3, #0
 8001236:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001238:	2301      	movs	r3, #1
 800123a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800123c:	2300      	movs	r3, #0
 800123e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 1;
 8001240:	2301      	movs	r3, #1
 8001242:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001244:	f107 030c 	add.w	r3, r7, #12
 8001248:	4619      	mov	r1, r3
 800124a:	480d      	ldr	r0, [pc, #52]	@ (8001280 <MX_TIM4_Init+0xa4>)
 800124c:	f003 fe1a 	bl	8004e84 <HAL_TIM_Encoder_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001256:	f000 f969 	bl	800152c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800125a:	2300      	movs	r3, #0
 800125c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800125e:	2300      	movs	r3, #0
 8001260:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001262:	463b      	mov	r3, r7
 8001264:	4619      	mov	r1, r3
 8001266:	4806      	ldr	r0, [pc, #24]	@ (8001280 <MX_TIM4_Init+0xa4>)
 8001268:	f004 ff8c 	bl	8006184 <HAL_TIMEx_MasterConfigSynchronization>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001272:	f000 f95b 	bl	800152c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001276:	bf00      	nop
 8001278:	3730      	adds	r7, #48	@ 0x30
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	200001f0 	.word	0x200001f0
 8001284:	40000800 	.word	0x40000800

08001288 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800128c:	4b22      	ldr	r3, [pc, #136]	@ (8001318 <MX_UART4_Init+0x90>)
 800128e:	4a23      	ldr	r2, [pc, #140]	@ (800131c <MX_UART4_Init+0x94>)
 8001290:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001292:	4b21      	ldr	r3, [pc, #132]	@ (8001318 <MX_UART4_Init+0x90>)
 8001294:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001298:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800129a:	4b1f      	ldr	r3, [pc, #124]	@ (8001318 <MX_UART4_Init+0x90>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80012a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001318 <MX_UART4_Init+0x90>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80012a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001318 <MX_UART4_Init+0x90>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80012ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001318 <MX_UART4_Init+0x90>)
 80012ae:	220c      	movs	r2, #12
 80012b0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012b2:	4b19      	ldr	r3, [pc, #100]	@ (8001318 <MX_UART4_Init+0x90>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b8:	4b17      	ldr	r3, [pc, #92]	@ (8001318 <MX_UART4_Init+0x90>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012be:	4b16      	ldr	r3, [pc, #88]	@ (8001318 <MX_UART4_Init+0x90>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012c4:	4b14      	ldr	r3, [pc, #80]	@ (8001318 <MX_UART4_Init+0x90>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012ca:	4b13      	ldr	r3, [pc, #76]	@ (8001318 <MX_UART4_Init+0x90>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80012d0:	4811      	ldr	r0, [pc, #68]	@ (8001318 <MX_UART4_Init+0x90>)
 80012d2:	f005 f8c7 	bl	8006464 <HAL_UART_Init>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80012dc:	f000 f926 	bl	800152c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012e0:	2100      	movs	r1, #0
 80012e2:	480d      	ldr	r0, [pc, #52]	@ (8001318 <MX_UART4_Init+0x90>)
 80012e4:	f006 fb5b 	bl	800799e <HAL_UARTEx_SetTxFifoThreshold>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80012ee:	f000 f91d 	bl	800152c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012f2:	2100      	movs	r1, #0
 80012f4:	4808      	ldr	r0, [pc, #32]	@ (8001318 <MX_UART4_Init+0x90>)
 80012f6:	f006 fb90 	bl	8007a1a <HAL_UARTEx_SetRxFifoThreshold>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001300:	f000 f914 	bl	800152c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001304:	4804      	ldr	r0, [pc, #16]	@ (8001318 <MX_UART4_Init+0x90>)
 8001306:	f006 fb11 	bl	800792c <HAL_UARTEx_DisableFifoMode>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001310:	f000 f90c 	bl	800152c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}
 8001318:	2000023c 	.word	0x2000023c
 800131c:	40004c00 	.word	0x40004c00

08001320 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001324:	4b22      	ldr	r3, [pc, #136]	@ (80013b0 <MX_UART5_Init+0x90>)
 8001326:	4a23      	ldr	r2, [pc, #140]	@ (80013b4 <MX_UART5_Init+0x94>)
 8001328:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800132a:	4b21      	ldr	r3, [pc, #132]	@ (80013b0 <MX_UART5_Init+0x90>)
 800132c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001330:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001332:	4b1f      	ldr	r3, [pc, #124]	@ (80013b0 <MX_UART5_Init+0x90>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001338:	4b1d      	ldr	r3, [pc, #116]	@ (80013b0 <MX_UART5_Init+0x90>)
 800133a:	2200      	movs	r2, #0
 800133c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800133e:	4b1c      	ldr	r3, [pc, #112]	@ (80013b0 <MX_UART5_Init+0x90>)
 8001340:	2200      	movs	r2, #0
 8001342:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001344:	4b1a      	ldr	r3, [pc, #104]	@ (80013b0 <MX_UART5_Init+0x90>)
 8001346:	220c      	movs	r2, #12
 8001348:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800134a:	4b19      	ldr	r3, [pc, #100]	@ (80013b0 <MX_UART5_Init+0x90>)
 800134c:	2200      	movs	r2, #0
 800134e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001350:	4b17      	ldr	r3, [pc, #92]	@ (80013b0 <MX_UART5_Init+0x90>)
 8001352:	2200      	movs	r2, #0
 8001354:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001356:	4b16      	ldr	r3, [pc, #88]	@ (80013b0 <MX_UART5_Init+0x90>)
 8001358:	2200      	movs	r2, #0
 800135a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800135c:	4b14      	ldr	r3, [pc, #80]	@ (80013b0 <MX_UART5_Init+0x90>)
 800135e:	2200      	movs	r2, #0
 8001360:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001362:	4b13      	ldr	r3, [pc, #76]	@ (80013b0 <MX_UART5_Init+0x90>)
 8001364:	2200      	movs	r2, #0
 8001366:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001368:	4811      	ldr	r0, [pc, #68]	@ (80013b0 <MX_UART5_Init+0x90>)
 800136a:	f005 f87b 	bl	8006464 <HAL_UART_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001374:	f000 f8da 	bl	800152c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001378:	2100      	movs	r1, #0
 800137a:	480d      	ldr	r0, [pc, #52]	@ (80013b0 <MX_UART5_Init+0x90>)
 800137c:	f006 fb0f 	bl	800799e <HAL_UARTEx_SetTxFifoThreshold>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8001386:	f000 f8d1 	bl	800152c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800138a:	2100      	movs	r1, #0
 800138c:	4808      	ldr	r0, [pc, #32]	@ (80013b0 <MX_UART5_Init+0x90>)
 800138e:	f006 fb44 	bl	8007a1a <HAL_UARTEx_SetRxFifoThreshold>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001398:	f000 f8c8 	bl	800152c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 800139c:	4804      	ldr	r0, [pc, #16]	@ (80013b0 <MX_UART5_Init+0x90>)
 800139e:	f006 fac5 	bl	800792c <HAL_UARTEx_DisableFifoMode>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 80013a8:	f000 f8c0 	bl	800152c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80013ac:	bf00      	nop
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	200002d0 	.word	0x200002d0
 80013b4:	40005000 	.word	0x40005000

080013b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08c      	sub	sp, #48	@ 0x30
 80013bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013be:	f107 031c 	add.w	r3, r7, #28
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	60da      	str	r2, [r3, #12]
 80013cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013ce:	4b54      	ldr	r3, [pc, #336]	@ (8001520 <MX_GPIO_Init+0x168>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d2:	4a53      	ldr	r2, [pc, #332]	@ (8001520 <MX_GPIO_Init+0x168>)
 80013d4:	f043 0310 	orr.w	r3, r3, #16
 80013d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013da:	4b51      	ldr	r3, [pc, #324]	@ (8001520 <MX_GPIO_Init+0x168>)
 80013dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013de:	f003 0310 	and.w	r3, r3, #16
 80013e2:	61bb      	str	r3, [r7, #24]
 80013e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013e6:	4b4e      	ldr	r3, [pc, #312]	@ (8001520 <MX_GPIO_Init+0x168>)
 80013e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ea:	4a4d      	ldr	r2, [pc, #308]	@ (8001520 <MX_GPIO_Init+0x168>)
 80013ec:	f043 0320 	orr.w	r3, r3, #32
 80013f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013f2:	4b4b      	ldr	r3, [pc, #300]	@ (8001520 <MX_GPIO_Init+0x168>)
 80013f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f6:	f003 0320 	and.w	r3, r3, #32
 80013fa:	617b      	str	r3, [r7, #20]
 80013fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013fe:	4b48      	ldr	r3, [pc, #288]	@ (8001520 <MX_GPIO_Init+0x168>)
 8001400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001402:	4a47      	ldr	r2, [pc, #284]	@ (8001520 <MX_GPIO_Init+0x168>)
 8001404:	f043 0304 	orr.w	r3, r3, #4
 8001408:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800140a:	4b45      	ldr	r3, [pc, #276]	@ (8001520 <MX_GPIO_Init+0x168>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800140e:	f003 0304 	and.w	r3, r3, #4
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001416:	4b42      	ldr	r3, [pc, #264]	@ (8001520 <MX_GPIO_Init+0x168>)
 8001418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800141a:	4a41      	ldr	r2, [pc, #260]	@ (8001520 <MX_GPIO_Init+0x168>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001422:	4b3f      	ldr	r3, [pc, #252]	@ (8001520 <MX_GPIO_Init+0x168>)
 8001424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800142e:	4b3c      	ldr	r3, [pc, #240]	@ (8001520 <MX_GPIO_Init+0x168>)
 8001430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001432:	4a3b      	ldr	r2, [pc, #236]	@ (8001520 <MX_GPIO_Init+0x168>)
 8001434:	f043 0308 	orr.w	r3, r3, #8
 8001438:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800143a:	4b39      	ldr	r3, [pc, #228]	@ (8001520 <MX_GPIO_Init+0x168>)
 800143c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800143e:	f003 0308 	and.w	r3, r3, #8
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001446:	4b36      	ldr	r3, [pc, #216]	@ (8001520 <MX_GPIO_Init+0x168>)
 8001448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800144a:	4a35      	ldr	r2, [pc, #212]	@ (8001520 <MX_GPIO_Init+0x168>)
 800144c:	f043 0302 	orr.w	r3, r3, #2
 8001450:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001452:	4b33      	ldr	r3, [pc, #204]	@ (8001520 <MX_GPIO_Init+0x168>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|Side_Board_Reset_Pin, GPIO_PIN_SET);
 800145e:	2201      	movs	r2, #1
 8001460:	2118      	movs	r1, #24
 8001462:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001466:	f001 fbab 	bl	8002bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 800146a:	2201      	movs	r2, #1
 800146c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001470:	482c      	ldr	r0, [pc, #176]	@ (8001524 <MX_GPIO_Init+0x16c>)
 8001472:	f001 fba5 	bl	8002bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001476:	237f      	movs	r3, #127	@ 0x7f
 8001478:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800147a:	2300      	movs	r3, #0
 800147c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001482:	f107 031c 	add.w	r3, r7, #28
 8001486:	4619      	mov	r1, r3
 8001488:	4826      	ldr	r0, [pc, #152]	@ (8001524 <MX_GPIO_Init+0x16c>)
 800148a:	f001 f9ff 	bl	800288c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 Side_Board_Reset_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|Side_Board_Reset_Pin;
 800148e:	2318      	movs	r3, #24
 8001490:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001492:	2301      	movs	r3, #1
 8001494:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149a:	2300      	movs	r3, #0
 800149c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149e:	f107 031c 	add.w	r3, r7, #28
 80014a2:	4619      	mov	r1, r3
 80014a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014a8:	f001 f9f0 	bl	800288c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80014ac:	2380      	movs	r3, #128	@ 0x80
 80014ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b0:	2300      	movs	r3, #0
 80014b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014b4:	2302      	movs	r3, #2
 80014b6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014b8:	f107 031c 	add.w	r3, r7, #28
 80014bc:	4619      	mov	r1, r3
 80014be:	4819      	ldr	r0, [pc, #100]	@ (8001524 <MX_GPIO_Init+0x16c>)
 80014c0:	f001 f9e4 	bl	800288c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80014c4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80014c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ca:	2301      	movs	r3, #1
 80014cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d2:	2300      	movs	r3, #0
 80014d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014d6:	f107 031c 	add.w	r3, r7, #28
 80014da:	4619      	mov	r1, r3
 80014dc:	4811      	ldr	r0, [pc, #68]	@ (8001524 <MX_GPIO_Init+0x16c>)
 80014de:	f001 f9d5 	bl	800288c <HAL_GPIO_Init>

  /*Configure GPIO pins : Limiter_switch_j19_Pin LS_DRV2_NO_Pin */
  GPIO_InitStruct.Pin = Limiter_switch_j19_Pin|LS_DRV2_NO_Pin;
 80014e2:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80014e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e8:	2300      	movs	r3, #0
 80014ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014ec:	2301      	movs	r3, #1
 80014ee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014f0:	f107 031c 	add.w	r3, r7, #28
 80014f4:	4619      	mov	r1, r3
 80014f6:	480c      	ldr	r0, [pc, #48]	@ (8001528 <MX_GPIO_Init+0x170>)
 80014f8:	f001 f9c8 	bl	800288c <HAL_GPIO_Init>

  /*Configure GPIO pins : LS2_DRV1_NO_Pin LS1_DRV1_NO_Pin */
  GPIO_InitStruct.Pin = LS2_DRV1_NO_Pin|LS1_DRV1_NO_Pin;
 80014fc:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8001500:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001502:	2300      	movs	r3, #0
 8001504:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800150a:	f107 031c 	add.w	r3, r7, #28
 800150e:	4619      	mov	r1, r3
 8001510:	4805      	ldr	r0, [pc, #20]	@ (8001528 <MX_GPIO_Init+0x170>)
 8001512:	f001 f9bb 	bl	800288c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001516:	bf00      	nop
 8001518:	3730      	adds	r7, #48	@ 0x30
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40021000 	.word	0x40021000
 8001524:	48001000 	.word	0x48001000
 8001528:	48000c00 	.word	0x48000c00

0800152c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001530:	b672      	cpsid	i
}
 8001532:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001534:	bf00      	nop
 8001536:	e7fd      	b.n	8001534 <Error_Handler+0x8>

08001538 <Motor_Init>:
uint8_t pinstate1=1;

#define MOTOR_SPEED_TILE_ON 250
#define MOTOR_SPEED_TILE_OFF 115

void Motor_Init(void) {
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800153c:	2108      	movs	r1, #8
 800153e:	4806      	ldr	r0, [pc, #24]	@ (8001558 <Motor_Init+0x20>)
 8001540:	f003 fb8e 	bl	8004c60 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001544:	210c      	movs	r1, #12
 8001546:	4804      	ldr	r0, [pc, #16]	@ (8001558 <Motor_Init+0x20>)
 8001548:	f003 fb8a 	bl	8004c60 <HAL_TIM_PWM_Start>
	  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800154c:	213c      	movs	r1, #60	@ 0x3c
 800154e:	4803      	ldr	r0, [pc, #12]	@ (800155c <Motor_Init+0x24>)
 8001550:	f003 fd3e 	bl	8004fd0 <HAL_TIM_Encoder_Start>
    // Initialize motor control here (if any initialization is needed)
}
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20000158 	.word	0x20000158
 800155c:	200001f0 	.word	0x200001f0

08001560 <Motor_Steer>:

void Motor_Steer(int8_t target)
{	SlotSensor_Init();
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	71fb      	strb	r3, [r7, #7]
 800156a:	f000 fb8b 	bl	8001c84 <SlotSensor_Init>
	Motor_Init();
 800156e:	f7ff ffe3 	bl	8001538 <Motor_Init>
	int8_t count = 0 ;
 8001572:	2300      	movs	r3, #0
 8001574:	73fb      	strb	r3, [r7, #15]
	int16_t Motorspeed;




	if(TileON)
 8001576:	4b49      	ldr	r3, [pc, #292]	@ (800169c <Motor_Steer+0x13c>)
 8001578:	f993 3000 	ldrsb.w	r3, [r3]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d044      	beq.n	800160a <Motor_Steer+0xaa>
	{

		Motorspeed = MOTOR_SPEED_TILE_ON - 1 ;
 8001580:	23f9      	movs	r3, #249	@ 0xf9
 8001582:	81bb      	strh	r3, [r7, #12]
		if(target > 0)
 8001584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001588:	2b00      	cmp	r3, #0
 800158a:	dd1c      	ble.n	80015c6 <Motor_Steer+0x66>
		{

			while(count < target)
 800158c:	e00c      	b.n	80015a8 <Motor_Steer+0x48>
			{	  count = SlotSensor_Update();
 800158e:	f000 fb8f 	bl	8001cb0 <SlotSensor_Update>
 8001592:	4603      	mov	r3, r0
 8001594:	73fb      	strb	r3, [r7, #15]
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, Motorspeed);
 8001596:	4b42      	ldr	r3, [pc, #264]	@ (80016a0 <Motor_Steer+0x140>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800159e:	63da      	str	r2, [r3, #60]	@ 0x3c
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 80015a0:	4b3f      	ldr	r3, [pc, #252]	@ (80016a0 <Motor_Steer+0x140>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2200      	movs	r2, #0
 80015a6:	641a      	str	r2, [r3, #64]	@ 0x40
			while(count < target)
 80015a8:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80015ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	dbec      	blt.n	800158e <Motor_Steer+0x2e>
			}
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80015b4:	4b3a      	ldr	r3, [pc, #232]	@ (80016a0 <Motor_Steer+0x140>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2200      	movs	r2, #0
 80015ba:	63da      	str	r2, [r3, #60]	@ 0x3c
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 80015bc:	4b38      	ldr	r3, [pc, #224]	@ (80016a0 <Motor_Steer+0x140>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2200      	movs	r2, #0
 80015c2:	641a      	str	r2, [r3, #64]	@ 0x40
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
		}

	}

}
 80015c4:	e065      	b.n	8001692 <Motor_Steer+0x132>
		else if(target< 0)
 80015c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	da61      	bge.n	8001692 <Motor_Steer+0x132>
			while(count < -target)
 80015ce:	e00c      	b.n	80015ea <Motor_Steer+0x8a>
					{	  count = SlotSensor_Update();
 80015d0:	f000 fb6e 	bl	8001cb0 <SlotSensor_Update>
 80015d4:	4603      	mov	r3, r0
 80015d6:	73fb      	strb	r3, [r7, #15]
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80015d8:	4b31      	ldr	r3, [pc, #196]	@ (80016a0 <Motor_Steer+0x140>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2200      	movs	r2, #0
 80015de:	63da      	str	r2, [r3, #60]	@ 0x3c
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, Motorspeed);
 80015e0:	4b2f      	ldr	r3, [pc, #188]	@ (80016a0 <Motor_Steer+0x140>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80015e8:	641a      	str	r2, [r3, #64]	@ 0x40
			while(count < -target)
 80015ea:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80015ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f2:	425b      	negs	r3, r3
 80015f4:	429a      	cmp	r2, r3
 80015f6:	dbeb      	blt.n	80015d0 <Motor_Steer+0x70>
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80015f8:	4b29      	ldr	r3, [pc, #164]	@ (80016a0 <Motor_Steer+0x140>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2200      	movs	r2, #0
 80015fe:	63da      	str	r2, [r3, #60]	@ 0x3c
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001600:	4b27      	ldr	r3, [pc, #156]	@ (80016a0 <Motor_Steer+0x140>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2200      	movs	r2, #0
 8001606:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001608:	e043      	b.n	8001692 <Motor_Steer+0x132>
		Motorspeed = MOTOR_SPEED_TILE_OFF -1 ;
 800160a:	2372      	movs	r3, #114	@ 0x72
 800160c:	81bb      	strh	r3, [r7, #12]
		if(target > 0){
 800160e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001612:	2b00      	cmp	r3, #0
 8001614:	dd1c      	ble.n	8001650 <Motor_Steer+0xf0>
					while(count < target)
 8001616:	e00c      	b.n	8001632 <Motor_Steer+0xd2>
						count = SlotSensor_Update();
 8001618:	f000 fb4a 	bl	8001cb0 <SlotSensor_Update>
 800161c:	4603      	mov	r3, r0
 800161e:	73fb      	strb	r3, [r7, #15]
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, Motorspeed);
 8001620:	4b1f      	ldr	r3, [pc, #124]	@ (80016a0 <Motor_Steer+0x140>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001628:	63da      	str	r2, [r3, #60]	@ 0x3c
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 800162a:	4b1d      	ldr	r3, [pc, #116]	@ (80016a0 <Motor_Steer+0x140>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2200      	movs	r2, #0
 8001630:	641a      	str	r2, [r3, #64]	@ 0x40
					while(count < target)
 8001632:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163a:	429a      	cmp	r2, r3
 800163c:	dbec      	blt.n	8001618 <Motor_Steer+0xb8>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 800163e:	4b18      	ldr	r3, [pc, #96]	@ (80016a0 <Motor_Steer+0x140>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2200      	movs	r2, #0
 8001644:	63da      	str	r2, [r3, #60]	@ 0x3c
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001646:	4b16      	ldr	r3, [pc, #88]	@ (80016a0 <Motor_Steer+0x140>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2200      	movs	r2, #0
 800164c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800164e:	e020      	b.n	8001692 <Motor_Steer+0x132>
		else if(target< 0)
 8001650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001654:	2b00      	cmp	r3, #0
 8001656:	da1c      	bge.n	8001692 <Motor_Steer+0x132>
			while(count < -target)
 8001658:	e00c      	b.n	8001674 <Motor_Steer+0x114>
				count = SlotSensor_Update();
 800165a:	f000 fb29 	bl	8001cb0 <SlotSensor_Update>
 800165e:	4603      	mov	r3, r0
 8001660:	73fb      	strb	r3, [r7, #15]
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001662:	4b0f      	ldr	r3, [pc, #60]	@ (80016a0 <Motor_Steer+0x140>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2200      	movs	r2, #0
 8001668:	63da      	str	r2, [r3, #60]	@ 0x3c
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, Motorspeed);
 800166a:	4b0d      	ldr	r3, [pc, #52]	@ (80016a0 <Motor_Steer+0x140>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001672:	641a      	str	r2, [r3, #64]	@ 0x40
			while(count < -target)
 8001674:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167c:	425b      	negs	r3, r3
 800167e:	429a      	cmp	r2, r3
 8001680:	dbeb      	blt.n	800165a <Motor_Steer+0xfa>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001682:	4b07      	ldr	r3, [pc, #28]	@ (80016a0 <Motor_Steer+0x140>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2200      	movs	r2, #0
 8001688:	63da      	str	r2, [r3, #60]	@ 0x3c
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 800168a:	4b05      	ldr	r3, [pc, #20]	@ (80016a0 <Motor_Steer+0x140>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2200      	movs	r2, #0
 8001690:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001692:	bf00      	nop
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	200000e9 	.word	0x200000e9
 80016a0:	20000158 	.word	0x20000158

080016a4 <ABSRotateHead>:
	Motor_Steer(target_position);


}
int8_t ABSRotateHead(int8_t target_position)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	71fb      	strb	r3, [r7, #7]
	Motor_Init();
 80016ae:	f7ff ff43 	bl	8001538 <Motor_Init>

	GPIO_PinState current_state1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7); // Read pin state
 80016b2:	2180      	movs	r1, #128	@ 0x80
 80016b4:	48a9      	ldr	r0, [pc, #676]	@ (800195c <ABSRotateHead+0x2b8>)
 80016b6:	f001 fa6b 	bl	8002b90 <HAL_GPIO_ReadPin>
 80016ba:	4603      	mov	r3, r0
 80016bc:	75fb      	strb	r3, [r7, #23]
	GPIO_PinState last_state1=current_state1;
 80016be:	7dfb      	ldrb	r3, [r7, #23]
 80016c0:	73fb      	strb	r3, [r7, #15]
	if(current_state1==GPIO_PIN_RESET){
 80016c2:	7dfb      	ldrb	r3, [r7, #23]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d11a      	bne.n	80016fe <ABSRotateHead+0x5a>
		while (current_state1 == last_state1){
 80016c8:	e00d      	b.n	80016e6 <ABSRotateHead+0x42>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 80016ca:	4ba5      	ldr	r3, [pc, #660]	@ (8001960 <ABSRotateHead+0x2bc>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2200      	movs	r2, #0
 80016d0:	63da      	str	r2, [r3, #60]	@ 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 100);
 80016d2:	4ba3      	ldr	r3, [pc, #652]	@ (8001960 <ABSRotateHead+0x2bc>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2264      	movs	r2, #100	@ 0x64
 80016d8:	641a      	str	r2, [r3, #64]	@ 0x40
			current_state1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7);
 80016da:	2180      	movs	r1, #128	@ 0x80
 80016dc:	489f      	ldr	r0, [pc, #636]	@ (800195c <ABSRotateHead+0x2b8>)
 80016de:	f001 fa57 	bl	8002b90 <HAL_GPIO_ReadPin>
 80016e2:	4603      	mov	r3, r0
 80016e4:	75fb      	strb	r3, [r7, #23]
		while (current_state1 == last_state1){
 80016e6:	7dfa      	ldrb	r2, [r7, #23]
 80016e8:	7bfb      	ldrb	r3, [r7, #15]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d0ed      	beq.n	80016ca <ABSRotateHead+0x26>
		}

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80016ee:	4b9c      	ldr	r3, [pc, #624]	@ (8001960 <ABSRotateHead+0x2bc>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2200      	movs	r2, #0
 80016f4:	63da      	str	r2, [r3, #60]	@ 0x3c
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 80016f6:	4b9a      	ldr	r3, [pc, #616]	@ (8001960 <ABSRotateHead+0x2bc>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2200      	movs	r2, #0
 80016fc:	641a      	str	r2, [r3, #64]	@ 0x40

	}
	HAL_Delay(200);
 80016fe:	20c8      	movs	r0, #200	@ 0xc8
 8001700:	f000 fed2 	bl	80024a8 <HAL_Delay>
	int8_t absolute_target_position = target_position*5 - posABS;
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	461a      	mov	r2, r3
 8001708:	0092      	lsls	r2, r2, #2
 800170a:	4413      	add	r3, r2
 800170c:	b2da      	uxtb	r2, r3
 800170e:	4b95      	ldr	r3, [pc, #596]	@ (8001964 <ABSRotateHead+0x2c0>)
 8001710:	f993 3000 	ldrsb.w	r3, [r3]
 8001714:	b2db      	uxtb	r3, r3
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	b2db      	uxtb	r3, r3
 800171a:	73bb      	strb	r3, [r7, #14]
	SlotSensor_Init();
 800171c:	f000 fab2 	bl	8001c84 <SlotSensor_Init>
	Motor_Init();
 8001720:	f7ff ff0a 	bl	8001538 <Motor_Init>
	int8_t count = 0 ;
 8001724:	2300      	movs	r3, #0
 8001726:	75bb      	strb	r3, [r7, #22]
	int16_t Motorspeed;



		if(TileON)
 8001728:	4b8f      	ldr	r3, [pc, #572]	@ (8001968 <ABSRotateHead+0x2c4>)
 800172a:	f993 3000 	ldrsb.w	r3, [r3]
 800172e:	2b00      	cmp	r3, #0
 8001730:	f000 811c 	beq.w	800196c <ABSRotateHead+0x2c8>
		{
			Motorspeed = MOTOR_SPEED_TILE_ON - 1 ;
 8001734:	23f9      	movs	r3, #249	@ 0xf9
 8001736:	82bb      	strh	r3, [r7, #20]
			if(absolute_target_position > 0)
 8001738:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800173c:	2b00      	cmp	r3, #0
 800173e:	f340 8082 	ble.w	8001846 <ABSRotateHead+0x1a2>
			{
				if (absolute_target_position-count==5){
 8001742:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001746:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b05      	cmp	r3, #5
 800174e:	d114      	bne.n	800177a <ABSRotateHead+0xd6>
										if(target_position==1){
 8001750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d102      	bne.n	800175e <ABSRotateHead+0xba>
										Motorspeed = 220;}
 8001758:	23dc      	movs	r3, #220	@ 0xdc
 800175a:	82bb      	strh	r3, [r7, #20]
 800175c:	e03a      	b.n	80017d4 <ABSRotateHead+0x130>
										else if(target_position==2){
 800175e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001762:	2b02      	cmp	r3, #2
 8001764:	d102      	bne.n	800176c <ABSRotateHead+0xc8>
											Motorspeed=215;
 8001766:	23d7      	movs	r3, #215	@ 0xd7
 8001768:	82bb      	strh	r3, [r7, #20]
 800176a:	e033      	b.n	80017d4 <ABSRotateHead+0x130>
										}
										else if (target_position==3){
 800176c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001770:	2b03      	cmp	r3, #3
 8001772:	d12f      	bne.n	80017d4 <ABSRotateHead+0x130>
											Motorspeed=215;
 8001774:	23d7      	movs	r3, #215	@ 0xd7
 8001776:	82bb      	strh	r3, [r7, #20]
 8001778:	e02c      	b.n	80017d4 <ABSRotateHead+0x130>
										}
									}
									else if (absolute_target_position-count==10){
 800177a:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800177e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b0a      	cmp	r3, #10
 8001786:	d10d      	bne.n	80017a4 <ABSRotateHead+0x100>
										if (target_position==2){
 8001788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178c:	2b02      	cmp	r3, #2
 800178e:	d102      	bne.n	8001796 <ABSRotateHead+0xf2>
										Motorspeed=250;}
 8001790:	23fa      	movs	r3, #250	@ 0xfa
 8001792:	82bb      	strh	r3, [r7, #20]
 8001794:	e01e      	b.n	80017d4 <ABSRotateHead+0x130>
										else if(target_position==3){
 8001796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179a:	2b03      	cmp	r3, #3
 800179c:	d11a      	bne.n	80017d4 <ABSRotateHead+0x130>
											Motorspeed=250;
 800179e:	23fa      	movs	r3, #250	@ 0xfa
 80017a0:	82bb      	strh	r3, [r7, #20]
 80017a2:	e017      	b.n	80017d4 <ABSRotateHead+0x130>
										}
									}
									else if (absolute_target_position-count==15){
 80017a4:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80017a8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b0f      	cmp	r3, #15
 80017b0:	d110      	bne.n	80017d4 <ABSRotateHead+0x130>
										Motorspeed=258;
 80017b2:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80017b6:	82bb      	strh	r3, [r7, #20]
									}

				while(count < absolute_target_position)
 80017b8:	e00c      	b.n	80017d4 <ABSRotateHead+0x130>
				{	  count = SlotSensor_Update();
 80017ba:	f000 fa79 	bl	8001cb0 <SlotSensor_Update>
 80017be:	4603      	mov	r3, r0
 80017c0:	75bb      	strb	r3, [r7, #22]
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, Motorspeed);
 80017c2:	4b67      	ldr	r3, [pc, #412]	@ (8001960 <ABSRotateHead+0x2bc>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80017ca:	63da      	str	r2, [r3, #60]	@ 0x3c
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 80017cc:	4b64      	ldr	r3, [pc, #400]	@ (8001960 <ABSRotateHead+0x2bc>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2200      	movs	r2, #0
 80017d2:	641a      	str	r2, [r3, #64]	@ 0x40
				while(count < absolute_target_position)
 80017d4:	f997 2016 	ldrsb.w	r2, [r7, #22]
 80017d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80017dc:	429a      	cmp	r2, r3
 80017de:	dbec      	blt.n	80017ba <ABSRotateHead+0x116>
				}

				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80017e0:	4b5f      	ldr	r3, [pc, #380]	@ (8001960 <ABSRotateHead+0x2bc>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2200      	movs	r2, #0
 80017e6:	63da      	str	r2, [r3, #60]	@ 0x3c
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 80017e8:	4b5d      	ldr	r3, [pc, #372]	@ (8001960 <ABSRotateHead+0x2bc>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2200      	movs	r2, #0
 80017ee:	641a      	str	r2, [r3, #64]	@ 0x40
				HAL_Delay(200);
 80017f0:	20c8      	movs	r0, #200	@ 0xc8
 80017f2:	f000 fe59 	bl	80024a8 <HAL_Delay>
				GPIO_PinState current_state1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7); // Read pin state
 80017f6:	2180      	movs	r1, #128	@ 0x80
 80017f8:	4858      	ldr	r0, [pc, #352]	@ (800195c <ABSRotateHead+0x2b8>)
 80017fa:	f001 f9c9 	bl	8002b90 <HAL_GPIO_ReadPin>
 80017fe:	4603      	mov	r3, r0
 8001800:	74fb      	strb	r3, [r7, #19]
				GPIO_PinState last_state1=current_state1;
 8001802:	7cfb      	ldrb	r3, [r7, #19]
 8001804:	72bb      	strb	r3, [r7, #10]
				if(current_state1==GPIO_PIN_RESET){
 8001806:	7cfb      	ldrb	r3, [r7, #19]
 8001808:	2b00      	cmp	r3, #0
 800180a:	f040 81bf 	bne.w	8001b8c <ABSRotateHead+0x4e8>
						while (current_state1 == last_state1){
 800180e:	e00d      	b.n	800182c <ABSRotateHead+0x188>
								__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0 );
 8001810:	4b53      	ldr	r3, [pc, #332]	@ (8001960 <ABSRotateHead+0x2bc>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2200      	movs	r2, #0
 8001816:	63da      	str	r2, [r3, #60]	@ 0x3c
								__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 100);
 8001818:	4b51      	ldr	r3, [pc, #324]	@ (8001960 <ABSRotateHead+0x2bc>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2264      	movs	r2, #100	@ 0x64
 800181e:	641a      	str	r2, [r3, #64]	@ 0x40
								current_state1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7);
 8001820:	2180      	movs	r1, #128	@ 0x80
 8001822:	484e      	ldr	r0, [pc, #312]	@ (800195c <ABSRotateHead+0x2b8>)
 8001824:	f001 f9b4 	bl	8002b90 <HAL_GPIO_ReadPin>
 8001828:	4603      	mov	r3, r0
 800182a:	74fb      	strb	r3, [r7, #19]
						while (current_state1 == last_state1){
 800182c:	7cfa      	ldrb	r2, [r7, #19]
 800182e:	7abb      	ldrb	r3, [r7, #10]
 8001830:	429a      	cmp	r2, r3
 8001832:	d0ed      	beq.n	8001810 <ABSRotateHead+0x16c>
								}

					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001834:	4b4a      	ldr	r3, [pc, #296]	@ (8001960 <ABSRotateHead+0x2bc>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2200      	movs	r2, #0
 800183a:	63da      	str	r2, [r3, #60]	@ 0x3c
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 800183c:	4b48      	ldr	r3, [pc, #288]	@ (8001960 <ABSRotateHead+0x2bc>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2200      	movs	r2, #0
 8001842:	641a      	str	r2, [r3, #64]	@ 0x40
 8001844:	e1a2      	b.n	8001b8c <ABSRotateHead+0x4e8>

			}
			}
			else if(absolute_target_position< 0)
 8001846:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800184a:	2b00      	cmp	r3, #0
 800184c:	f280 819e 	bge.w	8001b8c <ABSRotateHead+0x4e8>
			{
				if (absolute_target_position-count==-5){
 8001850:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001854:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	f113 0f05 	cmn.w	r3, #5
 800185e:	d114      	bne.n	800188a <ABSRotateHead+0x1e6>
						if(target_position==0){
 8001860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d102      	bne.n	800186e <ABSRotateHead+0x1ca>
							Motorspeed = 220;}
 8001868:	23dc      	movs	r3, #220	@ 0xdc
 800186a:	82bb      	strh	r3, [r7, #20]
 800186c:	e03c      	b.n	80018e8 <ABSRotateHead+0x244>
						else if(target_position==1){
 800186e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d102      	bne.n	800187c <ABSRotateHead+0x1d8>
								Motorspeed=210;
 8001876:	23d2      	movs	r3, #210	@ 0xd2
 8001878:	82bb      	strh	r3, [r7, #20]
 800187a:	e035      	b.n	80018e8 <ABSRotateHead+0x244>
								}
						else if (target_position==2){
 800187c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001880:	2b02      	cmp	r3, #2
 8001882:	d131      	bne.n	80018e8 <ABSRotateHead+0x244>
								Motorspeed=210;
 8001884:	23d2      	movs	r3, #210	@ 0xd2
 8001886:	82bb      	strh	r3, [r7, #20]
 8001888:	e02e      	b.n	80018e8 <ABSRotateHead+0x244>
								}
								}
				else if (absolute_target_position-count==-10){
 800188a:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800188e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	f113 0f0a 	cmn.w	r3, #10
 8001898:	d10e      	bne.n	80018b8 <ABSRotateHead+0x214>
						if (target_position==0){
 800189a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d102      	bne.n	80018a8 <ABSRotateHead+0x204>
							Motorspeed=255;}
 80018a2:	23ff      	movs	r3, #255	@ 0xff
 80018a4:	82bb      	strh	r3, [r7, #20]
 80018a6:	e01f      	b.n	80018e8 <ABSRotateHead+0x244>
						else if(target_position==1){
 80018a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d11b      	bne.n	80018e8 <ABSRotateHead+0x244>
									Motorspeed=258;
 80018b0:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80018b4:	82bb      	strh	r3, [r7, #20]
 80018b6:	e017      	b.n	80018e8 <ABSRotateHead+0x244>
														}
													}
						else if (absolute_target_position-count==-15){
 80018b8:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80018bc:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	f113 0f0f 	cmn.w	r3, #15
 80018c6:	d10f      	bne.n	80018e8 <ABSRotateHead+0x244>
								Motorspeed=255;
 80018c8:	23ff      	movs	r3, #255	@ 0xff
 80018ca:	82bb      	strh	r3, [r7, #20]
						}

				while(count < -absolute_target_position)
 80018cc:	e00c      	b.n	80018e8 <ABSRotateHead+0x244>
						{	  count = SlotSensor_Update();
 80018ce:	f000 f9ef 	bl	8001cb0 <SlotSensor_Update>
 80018d2:	4603      	mov	r3, r0
 80018d4:	75bb      	strb	r3, [r7, #22]
							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80018d6:	4b22      	ldr	r3, [pc, #136]	@ (8001960 <ABSRotateHead+0x2bc>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2200      	movs	r2, #0
 80018dc:	63da      	str	r2, [r3, #60]	@ 0x3c
							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, Motorspeed);
 80018de:	4b20      	ldr	r3, [pc, #128]	@ (8001960 <ABSRotateHead+0x2bc>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80018e6:	641a      	str	r2, [r3, #64]	@ 0x40
				while(count < -absolute_target_position)
 80018e8:	f997 2016 	ldrsb.w	r2, [r7, #22]
 80018ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80018f0:	425b      	negs	r3, r3
 80018f2:	429a      	cmp	r2, r3
 80018f4:	dbeb      	blt.n	80018ce <ABSRotateHead+0x22a>
						}

				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80018f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001960 <ABSRotateHead+0x2bc>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2200      	movs	r2, #0
 80018fc:	63da      	str	r2, [r3, #60]	@ 0x3c
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 80018fe:	4b18      	ldr	r3, [pc, #96]	@ (8001960 <ABSRotateHead+0x2bc>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2200      	movs	r2, #0
 8001904:	641a      	str	r2, [r3, #64]	@ 0x40
				HAL_Delay(200);
 8001906:	20c8      	movs	r0, #200	@ 0xc8
 8001908:	f000 fdce 	bl	80024a8 <HAL_Delay>
				GPIO_PinState current_state1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7); // Read pin state
 800190c:	2180      	movs	r1, #128	@ 0x80
 800190e:	4813      	ldr	r0, [pc, #76]	@ (800195c <ABSRotateHead+0x2b8>)
 8001910:	f001 f93e 	bl	8002b90 <HAL_GPIO_ReadPin>
 8001914:	4603      	mov	r3, r0
 8001916:	74bb      	strb	r3, [r7, #18]
				GPIO_PinState last_state1=current_state1;
 8001918:	7cbb      	ldrb	r3, [r7, #18]
 800191a:	72fb      	strb	r3, [r7, #11]
				if(current_state1==GPIO_PIN_RESET){
 800191c:	7cbb      	ldrb	r3, [r7, #18]
 800191e:	2b00      	cmp	r3, #0
 8001920:	f040 8134 	bne.w	8001b8c <ABSRotateHead+0x4e8>
						while (current_state1 == last_state1){
 8001924:	e00d      	b.n	8001942 <ABSRotateHead+0x29e>
								__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,100 );
 8001926:	4b0e      	ldr	r3, [pc, #56]	@ (8001960 <ABSRotateHead+0x2bc>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2264      	movs	r2, #100	@ 0x64
 800192c:	63da      	str	r2, [r3, #60]	@ 0x3c
								__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 800192e:	4b0c      	ldr	r3, [pc, #48]	@ (8001960 <ABSRotateHead+0x2bc>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2200      	movs	r2, #0
 8001934:	641a      	str	r2, [r3, #64]	@ 0x40
								current_state1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7);
 8001936:	2180      	movs	r1, #128	@ 0x80
 8001938:	4808      	ldr	r0, [pc, #32]	@ (800195c <ABSRotateHead+0x2b8>)
 800193a:	f001 f929 	bl	8002b90 <HAL_GPIO_ReadPin>
 800193e:	4603      	mov	r3, r0
 8001940:	74bb      	strb	r3, [r7, #18]
						while (current_state1 == last_state1){
 8001942:	7cba      	ldrb	r2, [r7, #18]
 8001944:	7afb      	ldrb	r3, [r7, #11]
 8001946:	429a      	cmp	r2, r3
 8001948:	d0ed      	beq.n	8001926 <ABSRotateHead+0x282>
								}


							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 800194a:	4b05      	ldr	r3, [pc, #20]	@ (8001960 <ABSRotateHead+0x2bc>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2200      	movs	r2, #0
 8001950:	63da      	str	r2, [r3, #60]	@ 0x3c
							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001952:	4b03      	ldr	r3, [pc, #12]	@ (8001960 <ABSRotateHead+0x2bc>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2200      	movs	r2, #0
 8001958:	641a      	str	r2, [r3, #64]	@ 0x40
 800195a:	e117      	b.n	8001b8c <ABSRotateHead+0x4e8>
 800195c:	48001000 	.word	0x48001000
 8001960:	20000158 	.word	0x20000158
 8001964:	200000e8 	.word	0x200000e8
 8001968:	200000e9 	.word	0x200000e9

		}
		else
		{

			Motorspeed = MOTOR_SPEED_TILE_OFF -1 ;
 800196c:	2372      	movs	r3, #114	@ 0x72
 800196e:	82bb      	strh	r3, [r7, #20]
			if(absolute_target_position > 0){
 8001970:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001974:	2b00      	cmp	r3, #0
 8001976:	f340 8081 	ble.w	8001a7c <ABSRotateHead+0x3d8>
					if (absolute_target_position-count==5){
 800197a:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800197e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b05      	cmp	r3, #5
 8001986:	d114      	bne.n	80019b2 <ABSRotateHead+0x30e>
						if(target_position==1){
 8001988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d102      	bne.n	8001996 <ABSRotateHead+0x2f2>
						Motorspeed = 120;}
 8001990:	2378      	movs	r3, #120	@ 0x78
 8001992:	82bb      	strh	r3, [r7, #20]
 8001994:	e039      	b.n	8001a0a <ABSRotateHead+0x366>
						else if(target_position==2){
 8001996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199a:	2b02      	cmp	r3, #2
 800199c:	d102      	bne.n	80019a4 <ABSRotateHead+0x300>
							Motorspeed=145;
 800199e:	2391      	movs	r3, #145	@ 0x91
 80019a0:	82bb      	strh	r3, [r7, #20]
 80019a2:	e032      	b.n	8001a0a <ABSRotateHead+0x366>
						}
						else if (target_position==3){
 80019a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a8:	2b03      	cmp	r3, #3
 80019aa:	d12e      	bne.n	8001a0a <ABSRotateHead+0x366>
							Motorspeed=145;
 80019ac:	2391      	movs	r3, #145	@ 0x91
 80019ae:	82bb      	strh	r3, [r7, #20]
 80019b0:	e02b      	b.n	8001a0a <ABSRotateHead+0x366>
						}
					}
					else if (absolute_target_position-count==10){
 80019b2:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80019b6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b0a      	cmp	r3, #10
 80019be:	d10d      	bne.n	80019dc <ABSRotateHead+0x338>
						if (target_position==2){
 80019c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d102      	bne.n	80019ce <ABSRotateHead+0x32a>
						Motorspeed=115;}
 80019c8:	2373      	movs	r3, #115	@ 0x73
 80019ca:	82bb      	strh	r3, [r7, #20]
 80019cc:	e01d      	b.n	8001a0a <ABSRotateHead+0x366>
						else if(target_position==3){
 80019ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d2:	2b03      	cmp	r3, #3
 80019d4:	d119      	bne.n	8001a0a <ABSRotateHead+0x366>
							Motorspeed=170;
 80019d6:	23aa      	movs	r3, #170	@ 0xaa
 80019d8:	82bb      	strh	r3, [r7, #20]
 80019da:	e016      	b.n	8001a0a <ABSRotateHead+0x366>
						}
					}
					else if (absolute_target_position-count==15){
 80019dc:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80019e0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b0f      	cmp	r3, #15
 80019e8:	d10f      	bne.n	8001a0a <ABSRotateHead+0x366>
						Motorspeed=180;
 80019ea:	23b4      	movs	r3, #180	@ 0xb4
 80019ec:	82bb      	strh	r3, [r7, #20]
					}
						while(count < absolute_target_position)
 80019ee:	e00c      	b.n	8001a0a <ABSRotateHead+0x366>
						{
							count = SlotSensor_Update();
 80019f0:	f000 f95e 	bl	8001cb0 <SlotSensor_Update>
 80019f4:	4603      	mov	r3, r0
 80019f6:	75bb      	strb	r3, [r7, #22]
							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, Motorspeed);
 80019f8:	4b73      	ldr	r3, [pc, #460]	@ (8001bc8 <ABSRotateHead+0x524>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001a00:	63da      	str	r2, [r3, #60]	@ 0x3c
							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001a02:	4b71      	ldr	r3, [pc, #452]	@ (8001bc8 <ABSRotateHead+0x524>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2200      	movs	r2, #0
 8001a08:	641a      	str	r2, [r3, #64]	@ 0x40
						while(count < absolute_target_position)
 8001a0a:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8001a0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	dbec      	blt.n	80019f0 <ABSRotateHead+0x34c>
						}

					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001a16:	4b6c      	ldr	r3, [pc, #432]	@ (8001bc8 <ABSRotateHead+0x524>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	63da      	str	r2, [r3, #60]	@ 0x3c
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001a1e:	4b6a      	ldr	r3, [pc, #424]	@ (8001bc8 <ABSRotateHead+0x524>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2200      	movs	r2, #0
 8001a24:	641a      	str	r2, [r3, #64]	@ 0x40
					HAL_Delay(200);
 8001a26:	20c8      	movs	r0, #200	@ 0xc8
 8001a28:	f000 fd3e 	bl	80024a8 <HAL_Delay>

					GPIO_PinState current_state1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7); // Read pin state
 8001a2c:	2180      	movs	r1, #128	@ 0x80
 8001a2e:	4867      	ldr	r0, [pc, #412]	@ (8001bcc <ABSRotateHead+0x528>)
 8001a30:	f001 f8ae 	bl	8002b90 <HAL_GPIO_ReadPin>
 8001a34:	4603      	mov	r3, r0
 8001a36:	747b      	strb	r3, [r7, #17]
					GPIO_PinState last_state1=current_state1;
 8001a38:	7c7b      	ldrb	r3, [r7, #17]
 8001a3a:	733b      	strb	r3, [r7, #12]
					if(current_state1==GPIO_PIN_RESET){
 8001a3c:	7c7b      	ldrb	r3, [r7, #17]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f040 80a4 	bne.w	8001b8c <ABSRotateHead+0x4e8>
						while (current_state1 == last_state1){
 8001a44:	e00d      	b.n	8001a62 <ABSRotateHead+0x3be>
							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0 );
 8001a46:	4b60      	ldr	r3, [pc, #384]	@ (8001bc8 <ABSRotateHead+0x524>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	63da      	str	r2, [r3, #60]	@ 0x3c
							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 100);
 8001a4e:	4b5e      	ldr	r3, [pc, #376]	@ (8001bc8 <ABSRotateHead+0x524>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2264      	movs	r2, #100	@ 0x64
 8001a54:	641a      	str	r2, [r3, #64]	@ 0x40
							current_state1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7);
 8001a56:	2180      	movs	r1, #128	@ 0x80
 8001a58:	485c      	ldr	r0, [pc, #368]	@ (8001bcc <ABSRotateHead+0x528>)
 8001a5a:	f001 f899 	bl	8002b90 <HAL_GPIO_ReadPin>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	747b      	strb	r3, [r7, #17]
						while (current_state1 == last_state1){
 8001a62:	7c7a      	ldrb	r2, [r7, #17]
 8001a64:	7b3b      	ldrb	r3, [r7, #12]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d0ed      	beq.n	8001a46 <ABSRotateHead+0x3a2>

					}
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001a6a:	4b57      	ldr	r3, [pc, #348]	@ (8001bc8 <ABSRotateHead+0x524>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	63da      	str	r2, [r3, #60]	@ 0x3c
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001a72:	4b55      	ldr	r3, [pc, #340]	@ (8001bc8 <ABSRotateHead+0x524>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2200      	movs	r2, #0
 8001a78:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a7a:	e087      	b.n	8001b8c <ABSRotateHead+0x4e8>

					}
					}
			else if(absolute_target_position< 0)
 8001a7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	f280 8083 	bge.w	8001b8c <ABSRotateHead+0x4e8>
			{
				if (absolute_target_position-count==-5){
 8001a86:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001a8a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	f113 0f05 	cmn.w	r3, #5
 8001a94:	d114      	bne.n	8001ac0 <ABSRotateHead+0x41c>
										if(target_position==0){
 8001a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d102      	bne.n	8001aa4 <ABSRotateHead+0x400>
										Motorspeed = 131;}
 8001a9e:	2383      	movs	r3, #131	@ 0x83
 8001aa0:	82bb      	strh	r3, [r7, #20]
 8001aa2:	e03b      	b.n	8001b1c <ABSRotateHead+0x478>
										else if(target_position==1){
 8001aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d102      	bne.n	8001ab2 <ABSRotateHead+0x40e>
											Motorspeed=131;
 8001aac:	2383      	movs	r3, #131	@ 0x83
 8001aae:	82bb      	strh	r3, [r7, #20]
 8001ab0:	e034      	b.n	8001b1c <ABSRotateHead+0x478>
										}
										else if (target_position==2){
 8001ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d130      	bne.n	8001b1c <ABSRotateHead+0x478>
											Motorspeed=129;
 8001aba:	2381      	movs	r3, #129	@ 0x81
 8001abc:	82bb      	strh	r3, [r7, #20]
 8001abe:	e02d      	b.n	8001b1c <ABSRotateHead+0x478>
										}
									}
									else if (absolute_target_position-count==-10){
 8001ac0:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001ac4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	f113 0f0a 	cmn.w	r3, #10
 8001ace:	d10d      	bne.n	8001aec <ABSRotateHead+0x448>
										if (target_position==0){
 8001ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d102      	bne.n	8001ade <ABSRotateHead+0x43a>
										Motorspeed=195;}
 8001ad8:	23c3      	movs	r3, #195	@ 0xc3
 8001ada:	82bb      	strh	r3, [r7, #20]
 8001adc:	e01e      	b.n	8001b1c <ABSRotateHead+0x478>
										else if(target_position==1){
 8001ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d11a      	bne.n	8001b1c <ABSRotateHead+0x478>
											Motorspeed=180;
 8001ae6:	23b4      	movs	r3, #180	@ 0xb4
 8001ae8:	82bb      	strh	r3, [r7, #20]
 8001aea:	e017      	b.n	8001b1c <ABSRotateHead+0x478>
										}
									}
									else if (absolute_target_position-count==-15){
 8001aec:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001af0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	f113 0f0f 	cmn.w	r3, #15
 8001afa:	d10f      	bne.n	8001b1c <ABSRotateHead+0x478>
										Motorspeed=210;
 8001afc:	23d2      	movs	r3, #210	@ 0xd2
 8001afe:	82bb      	strh	r3, [r7, #20]
									}

				while(count < -absolute_target_position)
 8001b00:	e00c      	b.n	8001b1c <ABSRotateHead+0x478>
				{
					count = SlotSensor_Update();
 8001b02:	f000 f8d5 	bl	8001cb0 <SlotSensor_Update>
 8001b06:	4603      	mov	r3, r0
 8001b08:	75bb      	strb	r3, [r7, #22]
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001b0a:	4b2f      	ldr	r3, [pc, #188]	@ (8001bc8 <ABSRotateHead+0x524>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	63da      	str	r2, [r3, #60]	@ 0x3c
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, Motorspeed);
 8001b12:	4b2d      	ldr	r3, [pc, #180]	@ (8001bc8 <ABSRotateHead+0x524>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001b1a:	641a      	str	r2, [r3, #64]	@ 0x40
				while(count < -absolute_target_position)
 8001b1c:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8001b20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001b24:	425b      	negs	r3, r3
 8001b26:	429a      	cmp	r2, r3
 8001b28:	dbeb      	blt.n	8001b02 <ABSRotateHead+0x45e>
				}

					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001b2a:	4b27      	ldr	r3, [pc, #156]	@ (8001bc8 <ABSRotateHead+0x524>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	63da      	str	r2, [r3, #60]	@ 0x3c
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001b32:	4b25      	ldr	r3, [pc, #148]	@ (8001bc8 <ABSRotateHead+0x524>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2200      	movs	r2, #0
 8001b38:	641a      	str	r2, [r3, #64]	@ 0x40
					HAL_Delay(200);
 8001b3a:	20c8      	movs	r0, #200	@ 0xc8
 8001b3c:	f000 fcb4 	bl	80024a8 <HAL_Delay>
					GPIO_PinState current_state1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7); // Read pin state
 8001b40:	2180      	movs	r1, #128	@ 0x80
 8001b42:	4822      	ldr	r0, [pc, #136]	@ (8001bcc <ABSRotateHead+0x528>)
 8001b44:	f001 f824 	bl	8002b90 <HAL_GPIO_ReadPin>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	743b      	strb	r3, [r7, #16]
					GPIO_PinState last_state1=current_state1;
 8001b4c:	7c3b      	ldrb	r3, [r7, #16]
 8001b4e:	737b      	strb	r3, [r7, #13]
					if(current_state1==GPIO_PIN_RESET){
 8001b50:	7c3b      	ldrb	r3, [r7, #16]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d11a      	bne.n	8001b8c <ABSRotateHead+0x4e8>
							while (current_state1 == last_state1){
 8001b56:	e00d      	b.n	8001b74 <ABSRotateHead+0x4d0>
									__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,100 );
 8001b58:	4b1b      	ldr	r3, [pc, #108]	@ (8001bc8 <ABSRotateHead+0x524>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2264      	movs	r2, #100	@ 0x64
 8001b5e:	63da      	str	r2, [r3, #60]	@ 0x3c
									__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001b60:	4b19      	ldr	r3, [pc, #100]	@ (8001bc8 <ABSRotateHead+0x524>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2200      	movs	r2, #0
 8001b66:	641a      	str	r2, [r3, #64]	@ 0x40
									current_state1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7);
 8001b68:	2180      	movs	r1, #128	@ 0x80
 8001b6a:	4818      	ldr	r0, [pc, #96]	@ (8001bcc <ABSRotateHead+0x528>)
 8001b6c:	f001 f810 	bl	8002b90 <HAL_GPIO_ReadPin>
 8001b70:	4603      	mov	r3, r0
 8001b72:	743b      	strb	r3, [r7, #16]
							while (current_state1 == last_state1){
 8001b74:	7c3a      	ldrb	r2, [r7, #16]
 8001b76:	7b7b      	ldrb	r3, [r7, #13]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d0ed      	beq.n	8001b58 <ABSRotateHead+0x4b4>
									}
							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001b7c:	4b12      	ldr	r3, [pc, #72]	@ (8001bc8 <ABSRotateHead+0x524>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2200      	movs	r2, #0
 8001b82:	63da      	str	r2, [r3, #60]	@ 0x3c
							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001b84:	4b10      	ldr	r3, [pc, #64]	@ (8001bc8 <ABSRotateHead+0x524>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	641a      	str	r2, [r3, #64]	@ 0x40
			}

		}

	//Motor_Steer(absolute_target_position);
	if(target_position*5 != posABS){posABS = target_position*5;}
 8001b8c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001b90:	4613      	mov	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4413      	add	r3, r2
 8001b96:	4a0e      	ldr	r2, [pc, #56]	@ (8001bd0 <ABSRotateHead+0x52c>)
 8001b98:	f992 2000 	ldrsb.w	r2, [r2]
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d008      	beq.n	8001bb2 <ABSRotateHead+0x50e>
 8001ba0:	79fb      	ldrb	r3, [r7, #7]
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	0092      	lsls	r2, r2, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	b25a      	sxtb	r2, r3
 8001bac:	4b08      	ldr	r3, [pc, #32]	@ (8001bd0 <ABSRotateHead+0x52c>)
 8001bae:	701a      	strb	r2, [r3, #0]
 8001bb0:	e004      	b.n	8001bbc <ABSRotateHead+0x518>
	else{HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);}
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	2110      	movs	r1, #16
 8001bb6:	4807      	ldr	r0, [pc, #28]	@ (8001bd4 <ABSRotateHead+0x530>)
 8001bb8:	f001 f802 	bl	8002bc0 <HAL_GPIO_WritePin>
return 1;
 8001bbc:	2301      	movs	r3, #1


}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3718      	adds	r7, #24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20000158 	.word	0x20000158
 8001bcc:	48001000 	.word	0x48001000
 8001bd0:	200000e8 	.word	0x200000e8
 8001bd4:	48000400 	.word	0x48000400

08001bd8 <HeadBase>:
void HeadBase(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0

	int16_t BaseSpeed = 250;
 8001bde:	23fa      	movs	r3, #250	@ 0xfa
 8001be0:	80fb      	strh	r3, [r7, #6]
	Motor_Init();
 8001be2:	f7ff fca9 	bl	8001538 <Motor_Init>
	//uint8_t pinstate1;
	pinstate1 = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8);
 8001be6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001bea:	4822      	ldr	r0, [pc, #136]	@ (8001c74 <HeadBase+0x9c>)
 8001bec:	f000 ffd0 	bl	8002b90 <HAL_GPIO_ReadPin>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	4b20      	ldr	r3, [pc, #128]	@ (8001c78 <HeadBase+0xa0>)
 8001bf6:	701a      	strb	r2, [r3, #0]

	while(pinstate1)
 8001bf8:	e022      	b.n	8001c40 <HeadBase+0x68>
	{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001bfa:	4b20      	ldr	r3, [pc, #128]	@ (8001c7c <HeadBase+0xa4>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	63da      	str	r2, [r3, #60]	@ 0x3c
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, BaseSpeed-1);
 8001c02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c06:	1e5a      	subs	r2, r3, #1
 8001c08:	4b1c      	ldr	r3, [pc, #112]	@ (8001c7c <HeadBase+0xa4>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	641a      	str	r2, [r3, #64]	@ 0x40

		pinstate1 = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8);
 8001c0e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c12:	4818      	ldr	r0, [pc, #96]	@ (8001c74 <HeadBase+0x9c>)
 8001c14:	f000 ffbc 	bl	8002b90 <HAL_GPIO_ReadPin>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	4b16      	ldr	r3, [pc, #88]	@ (8001c78 <HeadBase+0xa0>)
 8001c1e:	701a      	strb	r2, [r3, #0]
		 if (pinstate1==0){
 8001c20:	4b15      	ldr	r3, [pc, #84]	@ (8001c78 <HeadBase+0xa0>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d10b      	bne.n	8001c40 <HeadBase+0x68>
			 HAL_Delay(200);
 8001c28:	20c8      	movs	r0, #200	@ 0xc8
 8001c2a:	f000 fc3d 	bl	80024a8 <HAL_Delay>
			 pinstate1 = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8);
 8001c2e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c32:	4810      	ldr	r0, [pc, #64]	@ (8001c74 <HeadBase+0x9c>)
 8001c34:	f000 ffac 	bl	8002b90 <HAL_GPIO_ReadPin>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	4b0e      	ldr	r3, [pc, #56]	@ (8001c78 <HeadBase+0xa0>)
 8001c3e:	701a      	strb	r2, [r3, #0]
	while(pinstate1)
 8001c40:	4b0d      	ldr	r3, [pc, #52]	@ (8001c78 <HeadBase+0xa0>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1d8      	bne.n	8001bfa <HeadBase+0x22>
		 }

	}

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001c48:	4b0c      	ldr	r3, [pc, #48]	@ (8001c7c <HeadBase+0xa4>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001c50:	4b0a      	ldr	r3, [pc, #40]	@ (8001c7c <HeadBase+0xa4>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2200      	movs	r2, #0
 8001c56:	641a      	str	r2, [r3, #64]	@ 0x40
	HAL_Delay(2000);
 8001c58:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001c5c:	f000 fc24 	bl	80024a8 <HAL_Delay>
	Motor_Steer(3);
 8001c60:	2003      	movs	r0, #3
 8001c62:	f7ff fc7d 	bl	8001560 <Motor_Steer>
	posABS=0;
 8001c66:	4b06      	ldr	r3, [pc, #24]	@ (8001c80 <HeadBase+0xa8>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	701a      	strb	r2, [r3, #0]

}
 8001c6c:	bf00      	nop
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	48000c00 	.word	0x48000c00
 8001c78:	20000000 	.word	0x20000000
 8001c7c:	20000158 	.word	0x20000158
 8001c80:	200000e8 	.word	0x200000e8

08001c84 <SlotSensor_Init>:

// Counter for slot sensor
static GPIO_PinState last_state = GPIO_PIN_RESET; // Last state of the sensor
int8_t counter = 0;

void SlotSensor_Init(void) {
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
	counter = 0;
 8001c88:	4b06      	ldr	r3, [pc, #24]	@ (8001ca4 <SlotSensor_Init+0x20>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	701a      	strb	r2, [r3, #0]
    // Initialize the last state
    last_state = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7);
 8001c8e:	2180      	movs	r1, #128	@ 0x80
 8001c90:	4805      	ldr	r0, [pc, #20]	@ (8001ca8 <SlotSensor_Init+0x24>)
 8001c92:	f000 ff7d 	bl	8002b90 <HAL_GPIO_ReadPin>
 8001c96:	4603      	mov	r3, r0
 8001c98:	461a      	mov	r2, r3
 8001c9a:	4b04      	ldr	r3, [pc, #16]	@ (8001cac <SlotSensor_Init+0x28>)
 8001c9c:	701a      	strb	r2, [r3, #0]
}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20000365 	.word	0x20000365
 8001ca8:	48001000 	.word	0x48001000
 8001cac:	20000364 	.word	0x20000364

08001cb0 <SlotSensor_Update>:

int SlotSensor_Update(void) {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
    GPIO_PinState current_state = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7); // Read pin state
 8001cb6:	2180      	movs	r1, #128	@ 0x80
 8001cb8:	4815      	ldr	r0, [pc, #84]	@ (8001d10 <SlotSensor_Update+0x60>)
 8001cba:	f000 ff69 	bl	8002b90 <HAL_GPIO_ReadPin>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	71fb      	strb	r3, [r7, #7]

    // Check for a change in state
    if (current_state == GPIO_PIN_SET && last_state == GPIO_PIN_RESET) {
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d118      	bne.n	8001cfa <SlotSensor_Update+0x4a>
 8001cc8:	4b12      	ldr	r3, [pc, #72]	@ (8001d14 <SlotSensor_Update+0x64>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d114      	bne.n	8001cfa <SlotSensor_Update+0x4a>
    	HAL_Delay(1);
 8001cd0:	2001      	movs	r0, #1
 8001cd2:	f000 fbe9 	bl	80024a8 <HAL_Delay>
    	current_state = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7);
 8001cd6:	2180      	movs	r1, #128	@ 0x80
 8001cd8:	480d      	ldr	r0, [pc, #52]	@ (8001d10 <SlotSensor_Update+0x60>)
 8001cda:	f000 ff59 	bl	8002b90 <HAL_GPIO_ReadPin>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	71fb      	strb	r3, [r7, #7]
    	if(current_state == GPIO_PIN_SET){
 8001ce2:	79fb      	ldrb	r3, [r7, #7]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d108      	bne.n	8001cfa <SlotSensor_Update+0x4a>
        counter++;} // Increment counter on state change
 8001ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8001d18 <SlotSensor_Update+0x68>)
 8001cea:	f993 3000 	ldrsb.w	r3, [r3]
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	b25a      	sxtb	r2, r3
 8001cf6:	4b08      	ldr	r3, [pc, #32]	@ (8001d18 <SlotSensor_Update+0x68>)
 8001cf8:	701a      	strb	r2, [r3, #0]
         // Update last state
    }
    last_state = current_state;
 8001cfa:	4a06      	ldr	r2, [pc, #24]	@ (8001d14 <SlotSensor_Update+0x64>)
 8001cfc:	79fb      	ldrb	r3, [r7, #7]
 8001cfe:	7013      	strb	r3, [r2, #0]
    return counter ;
 8001d00:	4b05      	ldr	r3, [pc, #20]	@ (8001d18 <SlotSensor_Update+0x68>)
 8001d02:	f993 3000 	ldrsb.w	r3, [r3]
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	48001000 	.word	0x48001000
 8001d14:	20000364 	.word	0x20000364
 8001d18:	20000365 	.word	0x20000365

08001d1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d22:	4b0f      	ldr	r3, [pc, #60]	@ (8001d60 <HAL_MspInit+0x44>)
 8001d24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d26:	4a0e      	ldr	r2, [pc, #56]	@ (8001d60 <HAL_MspInit+0x44>)
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d60 <HAL_MspInit+0x44>)
 8001d30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	607b      	str	r3, [r7, #4]
 8001d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d3a:	4b09      	ldr	r3, [pc, #36]	@ (8001d60 <HAL_MspInit+0x44>)
 8001d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d3e:	4a08      	ldr	r2, [pc, #32]	@ (8001d60 <HAL_MspInit+0x44>)
 8001d40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d44:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d46:	4b06      	ldr	r3, [pc, #24]	@ (8001d60 <HAL_MspInit+0x44>)
 8001d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d4e:	603b      	str	r3, [r7, #0]
 8001d50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001d52:	f001 f80b 	bl	8002d6c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d56:	bf00      	nop
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40021000 	.word	0x40021000

08001d64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b08a      	sub	sp, #40	@ 0x28
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d6c:	f107 0314 	add.w	r3, r7, #20
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	60da      	str	r2, [r3, #12]
 8001d7a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a26      	ldr	r2, [pc, #152]	@ (8001e1c <HAL_SPI_MspInit+0xb8>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d145      	bne.n	8001e12 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d86:	4b26      	ldr	r3, [pc, #152]	@ (8001e20 <HAL_SPI_MspInit+0xbc>)
 8001d88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d8a:	4a25      	ldr	r2, [pc, #148]	@ (8001e20 <HAL_SPI_MspInit+0xbc>)
 8001d8c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d90:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d92:	4b23      	ldr	r3, [pc, #140]	@ (8001e20 <HAL_SPI_MspInit+0xbc>)
 8001d94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d9a:	613b      	str	r3, [r7, #16]
 8001d9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9e:	4b20      	ldr	r3, [pc, #128]	@ (8001e20 <HAL_SPI_MspInit+0xbc>)
 8001da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001da2:	4a1f      	ldr	r2, [pc, #124]	@ (8001e20 <HAL_SPI_MspInit+0xbc>)
 8001da4:	f043 0301 	orr.w	r3, r3, #1
 8001da8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001daa:	4b1d      	ldr	r3, [pc, #116]	@ (8001e20 <HAL_SPI_MspInit+0xbc>)
 8001dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db6:	4b1a      	ldr	r3, [pc, #104]	@ (8001e20 <HAL_SPI_MspInit+0xbc>)
 8001db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dba:	4a19      	ldr	r2, [pc, #100]	@ (8001e20 <HAL_SPI_MspInit+0xbc>)
 8001dbc:	f043 0302 	orr.w	r3, r3, #2
 8001dc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dc2:	4b17      	ldr	r3, [pc, #92]	@ (8001e20 <HAL_SPI_MspInit+0xbc>)
 8001dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	60bb      	str	r3, [r7, #8]
 8001dcc:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001dce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001dd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001de0:	2305      	movs	r3, #5
 8001de2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de4:	f107 0314 	add.w	r3, r7, #20
 8001de8:	4619      	mov	r1, r3
 8001dea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dee:	f000 fd4d 	bl	800288c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001df2:	2338      	movs	r3, #56	@ 0x38
 8001df4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df6:	2302      	movs	r3, #2
 8001df8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e02:	2305      	movs	r3, #5
 8001e04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e06:	f107 0314 	add.w	r3, r7, #20
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4805      	ldr	r0, [pc, #20]	@ (8001e24 <HAL_SPI_MspInit+0xc0>)
 8001e0e:	f000 fd3d 	bl	800288c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e12:	bf00      	nop
 8001e14:	3728      	adds	r7, #40	@ 0x28
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40013000 	.word	0x40013000
 8001e20:	40021000 	.word	0x40021000
 8001e24:	48000400 	.word	0x48000400

08001e28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a0a      	ldr	r2, [pc, #40]	@ (8001e60 <HAL_TIM_Base_MspInit+0x38>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d10b      	bne.n	8001e52 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e64 <HAL_TIM_Base_MspInit+0x3c>)
 8001e3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e3e:	4a09      	ldr	r2, [pc, #36]	@ (8001e64 <HAL_TIM_Base_MspInit+0x3c>)
 8001e40:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e44:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e46:	4b07      	ldr	r3, [pc, #28]	@ (8001e64 <HAL_TIM_Base_MspInit+0x3c>)
 8001e48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001e52:	bf00      	nop
 8001e54:	3714      	adds	r7, #20
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	40012c00 	.word	0x40012c00
 8001e64:	40021000 	.word	0x40021000

08001e68 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08c      	sub	sp, #48	@ 0x30
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e70:	f107 031c 	add.w	r3, r7, #28
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
 8001e7c:	60da      	str	r2, [r3, #12]
 8001e7e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a33      	ldr	r2, [pc, #204]	@ (8001f54 <HAL_TIM_Encoder_MspInit+0xec>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d128      	bne.n	8001edc <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e8a:	4b33      	ldr	r3, [pc, #204]	@ (8001f58 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001e8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e8e:	4a32      	ldr	r2, [pc, #200]	@ (8001f58 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001e90:	f043 0302 	orr.w	r3, r3, #2
 8001e94:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e96:	4b30      	ldr	r3, [pc, #192]	@ (8001f58 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	61bb      	str	r3, [r7, #24]
 8001ea0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ea2:	4b2d      	ldr	r3, [pc, #180]	@ (8001f58 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001ea4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ea6:	4a2c      	ldr	r2, [pc, #176]	@ (8001f58 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001ea8:	f043 0304 	orr.w	r3, r3, #4
 8001eac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001eae:	4b2a      	ldr	r3, [pc, #168]	@ (8001f58 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001eb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eb2:	f003 0304 	and.w	r3, r3, #4
 8001eb6:	617b      	str	r3, [r7, #20]
 8001eb8:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Motor_B_EN_CH1_Pin|Motor_B_EN_CH2_Pin;
 8001eba:	23c0      	movs	r3, #192	@ 0xc0
 8001ebc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001eca:	2302      	movs	r3, #2
 8001ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ece:	f107 031c 	add.w	r3, r7, #28
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4821      	ldr	r0, [pc, #132]	@ (8001f5c <HAL_TIM_Encoder_MspInit+0xf4>)
 8001ed6:	f000 fcd9 	bl	800288c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001eda:	e036      	b.n	8001f4a <HAL_TIM_Encoder_MspInit+0xe2>
  else if(htim_encoder->Instance==TIM4)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a1f      	ldr	r2, [pc, #124]	@ (8001f60 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d131      	bne.n	8001f4a <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ee6:	4b1c      	ldr	r3, [pc, #112]	@ (8001f58 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eea:	4a1b      	ldr	r2, [pc, #108]	@ (8001f58 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001eec:	f043 0304 	orr.w	r3, r3, #4
 8001ef0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ef2:	4b19      	ldr	r3, [pc, #100]	@ (8001f58 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001ef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ef6:	f003 0304 	and.w	r3, r3, #4
 8001efa:	613b      	str	r3, [r7, #16]
 8001efc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001efe:	4b16      	ldr	r3, [pc, #88]	@ (8001f58 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f02:	4a15      	ldr	r2, [pc, #84]	@ (8001f58 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f0a:	4b13      	ldr	r3, [pc, #76]	@ (8001f58 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Motor_A_EN_CH2_Pin|Motor_A_EN_CH1_Pin;
 8001f16:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001f1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f24:	2300      	movs	r3, #0
 8001f26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001f28:	230a      	movs	r3, #10
 8001f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f2c:	f107 031c 	add.w	r3, r7, #28
 8001f30:	4619      	mov	r1, r3
 8001f32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f36:	f000 fca9 	bl	800288c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	201e      	movs	r0, #30
 8001f40:	f000 fbaf 	bl	80026a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001f44:	201e      	movs	r0, #30
 8001f46:	f000 fbc6 	bl	80026d6 <HAL_NVIC_EnableIRQ>
}
 8001f4a:	bf00      	nop
 8001f4c:	3730      	adds	r7, #48	@ 0x30
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40000400 	.word	0x40000400
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	48000800 	.word	0x48000800
 8001f60:	40000800 	.word	0x40000800

08001f64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b088      	sub	sp, #32
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f6c:	f107 030c 	add.w	r3, r7, #12
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	605a      	str	r2, [r3, #4]
 8001f76:	609a      	str	r2, [r3, #8]
 8001f78:	60da      	str	r2, [r3, #12]
 8001f7a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a11      	ldr	r2, [pc, #68]	@ (8001fc8 <HAL_TIM_MspPostInit+0x64>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d11b      	bne.n	8001fbe <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f86:	4b11      	ldr	r3, [pc, #68]	@ (8001fcc <HAL_TIM_MspPostInit+0x68>)
 8001f88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f8a:	4a10      	ldr	r2, [pc, #64]	@ (8001fcc <HAL_TIM_MspPostInit+0x68>)
 8001f8c:	f043 0304 	orr.w	r3, r3, #4
 8001f90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f92:	4b0e      	ldr	r3, [pc, #56]	@ (8001fcc <HAL_TIM_MspPostInit+0x68>)
 8001f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f96:	f003 0304 	and.w	r3, r3, #4
 8001f9a:	60bb      	str	r3, [r7, #8]
 8001f9c:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Motor_A_CH1_Pin|Motor_A_CH2_Pin|Motor_B_CH3_Pin|Motor_A_CH4_Pin;
 8001f9e:	230f      	movs	r3, #15
 8001fa0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001faa:	2300      	movs	r3, #0
 8001fac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001fae:	2302      	movs	r3, #2
 8001fb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fb2:	f107 030c 	add.w	r3, r7, #12
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4805      	ldr	r0, [pc, #20]	@ (8001fd0 <HAL_TIM_MspPostInit+0x6c>)
 8001fba:	f000 fc67 	bl	800288c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001fbe:	bf00      	nop
 8001fc0:	3720      	adds	r7, #32
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40012c00 	.word	0x40012c00
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	48000800 	.word	0x48000800

08001fd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b0a2      	sub	sp, #136	@ 0x88
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fdc:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	605a      	str	r2, [r3, #4]
 8001fe6:	609a      	str	r2, [r3, #8]
 8001fe8:	60da      	str	r2, [r3, #12]
 8001fea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fec:	f107 0320 	add.w	r3, r7, #32
 8001ff0:	2254      	movs	r2, #84	@ 0x54
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f006 f89f 	bl	8008138 <memset>
  if(huart->Instance==UART4)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a56      	ldr	r2, [pc, #344]	@ (8002158 <HAL_UART_MspInit+0x184>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d141      	bne.n	8002088 <HAL_UART_MspInit+0xb4>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002004:	2308      	movs	r3, #8
 8002006:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002008:	2300      	movs	r3, #0
 800200a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800200c:	f107 0320 	add.w	r3, r7, #32
 8002010:	4618      	mov	r0, r3
 8002012:	f001 fbe9 	bl	80037e8 <HAL_RCCEx_PeriphCLKConfig>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800201c:	f7ff fa86 	bl	800152c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002020:	4b4e      	ldr	r3, [pc, #312]	@ (800215c <HAL_UART_MspInit+0x188>)
 8002022:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002024:	4a4d      	ldr	r2, [pc, #308]	@ (800215c <HAL_UART_MspInit+0x188>)
 8002026:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800202a:	6593      	str	r3, [r2, #88]	@ 0x58
 800202c:	4b4b      	ldr	r3, [pc, #300]	@ (800215c <HAL_UART_MspInit+0x188>)
 800202e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002030:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002034:	61fb      	str	r3, [r7, #28]
 8002036:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002038:	4b48      	ldr	r3, [pc, #288]	@ (800215c <HAL_UART_MspInit+0x188>)
 800203a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800203c:	4a47      	ldr	r2, [pc, #284]	@ (800215c <HAL_UART_MspInit+0x188>)
 800203e:	f043 0304 	orr.w	r3, r3, #4
 8002042:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002044:	4b45      	ldr	r3, [pc, #276]	@ (800215c <HAL_UART_MspInit+0x188>)
 8002046:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002048:	f003 0304 	and.w	r3, r3, #4
 800204c:	61bb      	str	r3, [r7, #24]
 800204e:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002050:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002054:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002056:	2302      	movs	r3, #2
 8002058:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205a:	2300      	movs	r3, #0
 800205c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205e:	2300      	movs	r3, #0
 8002060:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8002064:	2305      	movs	r3, #5
 8002066:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800206a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800206e:	4619      	mov	r1, r3
 8002070:	483b      	ldr	r0, [pc, #236]	@ (8002160 <HAL_UART_MspInit+0x18c>)
 8002072:	f000 fc0b 	bl	800288c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002076:	2200      	movs	r2, #0
 8002078:	2100      	movs	r1, #0
 800207a:	2034      	movs	r0, #52	@ 0x34
 800207c:	f000 fb11 	bl	80026a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002080:	2034      	movs	r0, #52	@ 0x34
 8002082:	f000 fb28 	bl	80026d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8002086:	e063      	b.n	8002150 <HAL_UART_MspInit+0x17c>
  else if(huart->Instance==UART5)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a35      	ldr	r2, [pc, #212]	@ (8002164 <HAL_UART_MspInit+0x190>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d15e      	bne.n	8002150 <HAL_UART_MspInit+0x17c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002092:	2310      	movs	r3, #16
 8002094:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002096:	2300      	movs	r3, #0
 8002098:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800209a:	f107 0320 	add.w	r3, r7, #32
 800209e:	4618      	mov	r0, r3
 80020a0:	f001 fba2 	bl	80037e8 <HAL_RCCEx_PeriphCLKConfig>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <HAL_UART_MspInit+0xda>
      Error_Handler();
 80020aa:	f7ff fa3f 	bl	800152c <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80020ae:	4b2b      	ldr	r3, [pc, #172]	@ (800215c <HAL_UART_MspInit+0x188>)
 80020b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020b2:	4a2a      	ldr	r2, [pc, #168]	@ (800215c <HAL_UART_MspInit+0x188>)
 80020b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80020ba:	4b28      	ldr	r3, [pc, #160]	@ (800215c <HAL_UART_MspInit+0x188>)
 80020bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020c2:	617b      	str	r3, [r7, #20]
 80020c4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020c6:	4b25      	ldr	r3, [pc, #148]	@ (800215c <HAL_UART_MspInit+0x188>)
 80020c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ca:	4a24      	ldr	r2, [pc, #144]	@ (800215c <HAL_UART_MspInit+0x188>)
 80020cc:	f043 0304 	orr.w	r3, r3, #4
 80020d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020d2:	4b22      	ldr	r3, [pc, #136]	@ (800215c <HAL_UART_MspInit+0x188>)
 80020d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020d6:	f003 0304 	and.w	r3, r3, #4
 80020da:	613b      	str	r3, [r7, #16]
 80020dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020de:	4b1f      	ldr	r3, [pc, #124]	@ (800215c <HAL_UART_MspInit+0x188>)
 80020e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020e2:	4a1e      	ldr	r2, [pc, #120]	@ (800215c <HAL_UART_MspInit+0x188>)
 80020e4:	f043 0308 	orr.w	r3, r3, #8
 80020e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020ea:	4b1c      	ldr	r3, [pc, #112]	@ (800215c <HAL_UART_MspInit+0x188>)
 80020ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80020f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020fa:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fc:	2302      	movs	r3, #2
 80020fe:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002100:	2300      	movs	r3, #0
 8002102:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002104:	2300      	movs	r3, #0
 8002106:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 800210a:	2305      	movs	r3, #5
 800210c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002110:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002114:	4619      	mov	r1, r3
 8002116:	4812      	ldr	r0, [pc, #72]	@ (8002160 <HAL_UART_MspInit+0x18c>)
 8002118:	f000 fbb8 	bl	800288c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800211c:	2304      	movs	r3, #4
 800211e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002120:	2302      	movs	r3, #2
 8002122:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002124:	2300      	movs	r3, #0
 8002126:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002128:	2300      	movs	r3, #0
 800212a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 800212e:	2305      	movs	r3, #5
 8002130:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002134:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002138:	4619      	mov	r1, r3
 800213a:	480b      	ldr	r0, [pc, #44]	@ (8002168 <HAL_UART_MspInit+0x194>)
 800213c:	f000 fba6 	bl	800288c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002140:	2200      	movs	r2, #0
 8002142:	2100      	movs	r1, #0
 8002144:	2035      	movs	r0, #53	@ 0x35
 8002146:	f000 faac 	bl	80026a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800214a:	2035      	movs	r0, #53	@ 0x35
 800214c:	f000 fac3 	bl	80026d6 <HAL_NVIC_EnableIRQ>
}
 8002150:	bf00      	nop
 8002152:	3788      	adds	r7, #136	@ 0x88
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40004c00 	.word	0x40004c00
 800215c:	40021000 	.word	0x40021000
 8002160:	48000800 	.word	0x48000800
 8002164:	40005000 	.word	0x40005000
 8002168:	48000c00 	.word	0x48000c00

0800216c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002170:	bf00      	nop
 8002172:	e7fd      	b.n	8002170 <NMI_Handler+0x4>

08002174 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002178:	bf00      	nop
 800217a:	e7fd      	b.n	8002178 <HardFault_Handler+0x4>

0800217c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002180:	bf00      	nop
 8002182:	e7fd      	b.n	8002180 <MemManage_Handler+0x4>

08002184 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002188:	bf00      	nop
 800218a:	e7fd      	b.n	8002188 <BusFault_Handler+0x4>

0800218c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002190:	bf00      	nop
 8002192:	e7fd      	b.n	8002190 <UsageFault_Handler+0x4>

08002194 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002198:	bf00      	nop
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021a2:	b480      	push	{r7}
 80021a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021a6:	bf00      	nop
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021b4:	bf00      	nop
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021c2:	f000 f953 	bl	800246c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
	...

080021cc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80021d0:	4802      	ldr	r0, [pc, #8]	@ (80021dc <TIM4_IRQHandler+0x10>)
 80021d2:	f002 ff8b 	bl	80050ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80021d6:	bf00      	nop
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	200001f0 	.word	0x200001f0

080021e0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80021e4:	4802      	ldr	r0, [pc, #8]	@ (80021f0 <UART4_IRQHandler+0x10>)
 80021e6:	f004 fae3 	bl	80067b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	2000023c 	.word	0x2000023c

080021f4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt / UART5 wake-up interrupt through EXTI line 35.
  */
void UART5_IRQHandler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80021f8:	4802      	ldr	r0, [pc, #8]	@ (8002204 <UART5_IRQHandler+0x10>)
 80021fa:	f004 fad9 	bl	80067b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	200002d0 	.word	0x200002d0

08002208 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002214:	2300      	movs	r3, #0
 8002216:	617b      	str	r3, [r7, #20]
 8002218:	e00a      	b.n	8002230 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800221a:	f3af 8000 	nop.w
 800221e:	4601      	mov	r1, r0
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	1c5a      	adds	r2, r3, #1
 8002224:	60ba      	str	r2, [r7, #8]
 8002226:	b2ca      	uxtb	r2, r1
 8002228:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	3301      	adds	r3, #1
 800222e:	617b      	str	r3, [r7, #20]
 8002230:	697a      	ldr	r2, [r7, #20]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	429a      	cmp	r2, r3
 8002236:	dbf0      	blt.n	800221a <_read+0x12>
  }

  return len;
 8002238:	687b      	ldr	r3, [r7, #4]
}
 800223a:	4618      	mov	r0, r3
 800223c:	3718      	adds	r7, #24
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b086      	sub	sp, #24
 8002246:	af00      	add	r7, sp, #0
 8002248:	60f8      	str	r0, [r7, #12]
 800224a:	60b9      	str	r1, [r7, #8]
 800224c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800224e:	2300      	movs	r3, #0
 8002250:	617b      	str	r3, [r7, #20]
 8002252:	e009      	b.n	8002268 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	1c5a      	adds	r2, r3, #1
 8002258:	60ba      	str	r2, [r7, #8]
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	4618      	mov	r0, r3
 800225e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	3301      	adds	r3, #1
 8002266:	617b      	str	r3, [r7, #20]
 8002268:	697a      	ldr	r2, [r7, #20]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	429a      	cmp	r2, r3
 800226e:	dbf1      	blt.n	8002254 <_write+0x12>
  }
  return len;
 8002270:	687b      	ldr	r3, [r7, #4]
}
 8002272:	4618      	mov	r0, r3
 8002274:	3718      	adds	r7, #24
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <_close>:

int _close(int file)
{
 800227a:	b480      	push	{r7}
 800227c:	b083      	sub	sp, #12
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002282:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002286:	4618      	mov	r0, r3
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002292:	b480      	push	{r7}
 8002294:	b083      	sub	sp, #12
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
 800229a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022a2:	605a      	str	r2, [r3, #4]
  return 0;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr

080022b2 <_isatty>:

int _isatty(int file)
{
 80022b2:	b480      	push	{r7}
 80022b4:	b083      	sub	sp, #12
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022ba:	2301      	movs	r3, #1
}
 80022bc:	4618      	mov	r0, r3
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3714      	adds	r7, #20
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
	...

080022e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022ec:	4a14      	ldr	r2, [pc, #80]	@ (8002340 <_sbrk+0x5c>)
 80022ee:	4b15      	ldr	r3, [pc, #84]	@ (8002344 <_sbrk+0x60>)
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022f8:	4b13      	ldr	r3, [pc, #76]	@ (8002348 <_sbrk+0x64>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d102      	bne.n	8002306 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002300:	4b11      	ldr	r3, [pc, #68]	@ (8002348 <_sbrk+0x64>)
 8002302:	4a12      	ldr	r2, [pc, #72]	@ (800234c <_sbrk+0x68>)
 8002304:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002306:	4b10      	ldr	r3, [pc, #64]	@ (8002348 <_sbrk+0x64>)
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4413      	add	r3, r2
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	429a      	cmp	r2, r3
 8002312:	d207      	bcs.n	8002324 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002314:	f005 ff82 	bl	800821c <__errno>
 8002318:	4603      	mov	r3, r0
 800231a:	220c      	movs	r2, #12
 800231c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800231e:	f04f 33ff 	mov.w	r3, #4294967295
 8002322:	e009      	b.n	8002338 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002324:	4b08      	ldr	r3, [pc, #32]	@ (8002348 <_sbrk+0x64>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800232a:	4b07      	ldr	r3, [pc, #28]	@ (8002348 <_sbrk+0x64>)
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4413      	add	r3, r2
 8002332:	4a05      	ldr	r2, [pc, #20]	@ (8002348 <_sbrk+0x64>)
 8002334:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002336:	68fb      	ldr	r3, [r7, #12]
}
 8002338:	4618      	mov	r0, r3
 800233a:	3718      	adds	r7, #24
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	20020000 	.word	0x20020000
 8002344:	00000400 	.word	0x00000400
 8002348:	20000368 	.word	0x20000368
 800234c:	200004c0 	.word	0x200004c0

08002350 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002354:	4b06      	ldr	r3, [pc, #24]	@ (8002370 <SystemInit+0x20>)
 8002356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800235a:	4a05      	ldr	r2, [pc, #20]	@ (8002370 <SystemInit+0x20>)
 800235c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002360:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002364:	bf00      	nop
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	e000ed00 	.word	0xe000ed00

08002374 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002374:	480d      	ldr	r0, [pc, #52]	@ (80023ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002376:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002378:	f7ff ffea 	bl	8002350 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800237c:	480c      	ldr	r0, [pc, #48]	@ (80023b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800237e:	490d      	ldr	r1, [pc, #52]	@ (80023b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002380:	4a0d      	ldr	r2, [pc, #52]	@ (80023b8 <LoopForever+0xe>)
  movs r3, #0
 8002382:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002384:	e002      	b.n	800238c <LoopCopyDataInit>

08002386 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002386:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002388:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800238a:	3304      	adds	r3, #4

0800238c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800238c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800238e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002390:	d3f9      	bcc.n	8002386 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002392:	4a0a      	ldr	r2, [pc, #40]	@ (80023bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002394:	4c0a      	ldr	r4, [pc, #40]	@ (80023c0 <LoopForever+0x16>)
  movs r3, #0
 8002396:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002398:	e001      	b.n	800239e <LoopFillZerobss>

0800239a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800239a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800239c:	3204      	adds	r2, #4

0800239e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800239e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023a0:	d3fb      	bcc.n	800239a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023a2:	f005 ff41 	bl	8008228 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023a6:	f7fe fd53 	bl	8000e50 <main>

080023aa <LoopForever>:

LoopForever:
    b LoopForever
 80023aa:	e7fe      	b.n	80023aa <LoopForever>
  ldr   r0, =_estack
 80023ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023b4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80023b8:	0800987c 	.word	0x0800987c
  ldr r2, =_sbss
 80023bc:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80023c0:	200004bc 	.word	0x200004bc

080023c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023c4:	e7fe      	b.n	80023c4 <ADC1_2_IRQHandler>

080023c6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b082      	sub	sp, #8
 80023ca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023cc:	2300      	movs	r3, #0
 80023ce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023d0:	2003      	movs	r0, #3
 80023d2:	f000 f95b 	bl	800268c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023d6:	200f      	movs	r0, #15
 80023d8:	f000 f80e 	bl	80023f8 <HAL_InitTick>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d002      	beq.n	80023e8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	71fb      	strb	r3, [r7, #7]
 80023e6:	e001      	b.n	80023ec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023e8:	f7ff fc98 	bl	8001d1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023ec:	79fb      	ldrb	r3, [r7, #7]

}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
	...

080023f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002400:	2300      	movs	r3, #0
 8002402:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002404:	4b16      	ldr	r3, [pc, #88]	@ (8002460 <HAL_InitTick+0x68>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d022      	beq.n	8002452 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800240c:	4b15      	ldr	r3, [pc, #84]	@ (8002464 <HAL_InitTick+0x6c>)
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	4b13      	ldr	r3, [pc, #76]	@ (8002460 <HAL_InitTick+0x68>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002418:	fbb1 f3f3 	udiv	r3, r1, r3
 800241c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002420:	4618      	mov	r0, r3
 8002422:	f000 f966 	bl	80026f2 <HAL_SYSTICK_Config>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d10f      	bne.n	800244c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b0f      	cmp	r3, #15
 8002430:	d809      	bhi.n	8002446 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002432:	2200      	movs	r2, #0
 8002434:	6879      	ldr	r1, [r7, #4]
 8002436:	f04f 30ff 	mov.w	r0, #4294967295
 800243a:	f000 f932 	bl	80026a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800243e:	4a0a      	ldr	r2, [pc, #40]	@ (8002468 <HAL_InitTick+0x70>)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6013      	str	r3, [r2, #0]
 8002444:	e007      	b.n	8002456 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	73fb      	strb	r3, [r7, #15]
 800244a:	e004      	b.n	8002456 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	73fb      	strb	r3, [r7, #15]
 8002450:	e001      	b.n	8002456 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002456:	7bfb      	ldrb	r3, [r7, #15]
}
 8002458:	4618      	mov	r0, r3
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	2000000c 	.word	0x2000000c
 8002464:	20000004 	.word	0x20000004
 8002468:	20000008 	.word	0x20000008

0800246c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002470:	4b05      	ldr	r3, [pc, #20]	@ (8002488 <HAL_IncTick+0x1c>)
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	4b05      	ldr	r3, [pc, #20]	@ (800248c <HAL_IncTick+0x20>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4413      	add	r3, r2
 800247a:	4a03      	ldr	r2, [pc, #12]	@ (8002488 <HAL_IncTick+0x1c>)
 800247c:	6013      	str	r3, [r2, #0]
}
 800247e:	bf00      	nop
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	2000036c 	.word	0x2000036c
 800248c:	2000000c 	.word	0x2000000c

08002490 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  return uwTick;
 8002494:	4b03      	ldr	r3, [pc, #12]	@ (80024a4 <HAL_GetTick+0x14>)
 8002496:	681b      	ldr	r3, [r3, #0]
}
 8002498:	4618      	mov	r0, r3
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	2000036c 	.word	0x2000036c

080024a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024b0:	f7ff ffee 	bl	8002490 <HAL_GetTick>
 80024b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c0:	d004      	beq.n	80024cc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80024c2:	4b09      	ldr	r3, [pc, #36]	@ (80024e8 <HAL_Delay+0x40>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	4413      	add	r3, r2
 80024ca:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024cc:	bf00      	nop
 80024ce:	f7ff ffdf 	bl	8002490 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d8f7      	bhi.n	80024ce <HAL_Delay+0x26>
  {
  }
}
 80024de:	bf00      	nop
 80024e0:	bf00      	nop
 80024e2:	3710      	adds	r7, #16
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	2000000c 	.word	0x2000000c

080024ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f003 0307 	and.w	r3, r3, #7
 80024fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002530 <__NVIC_SetPriorityGrouping+0x44>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002502:	68ba      	ldr	r2, [r7, #8]
 8002504:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002508:	4013      	ands	r3, r2
 800250a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002514:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002518:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800251c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800251e:	4a04      	ldr	r2, [pc, #16]	@ (8002530 <__NVIC_SetPriorityGrouping+0x44>)
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	60d3      	str	r3, [r2, #12]
}
 8002524:	bf00      	nop
 8002526:	3714      	adds	r7, #20
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	e000ed00 	.word	0xe000ed00

08002534 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002538:	4b04      	ldr	r3, [pc, #16]	@ (800254c <__NVIC_GetPriorityGrouping+0x18>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	0a1b      	lsrs	r3, r3, #8
 800253e:	f003 0307 	and.w	r3, r3, #7
}
 8002542:	4618      	mov	r0, r3
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	e000ed00 	.word	0xe000ed00

08002550 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	4603      	mov	r3, r0
 8002558:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800255a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255e:	2b00      	cmp	r3, #0
 8002560:	db0b      	blt.n	800257a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002562:	79fb      	ldrb	r3, [r7, #7]
 8002564:	f003 021f 	and.w	r2, r3, #31
 8002568:	4907      	ldr	r1, [pc, #28]	@ (8002588 <__NVIC_EnableIRQ+0x38>)
 800256a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256e:	095b      	lsrs	r3, r3, #5
 8002570:	2001      	movs	r0, #1
 8002572:	fa00 f202 	lsl.w	r2, r0, r2
 8002576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800257a:	bf00      	nop
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	e000e100 	.word	0xe000e100

0800258c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	6039      	str	r1, [r7, #0]
 8002596:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259c:	2b00      	cmp	r3, #0
 800259e:	db0a      	blt.n	80025b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	b2da      	uxtb	r2, r3
 80025a4:	490c      	ldr	r1, [pc, #48]	@ (80025d8 <__NVIC_SetPriority+0x4c>)
 80025a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025aa:	0112      	lsls	r2, r2, #4
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	440b      	add	r3, r1
 80025b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025b4:	e00a      	b.n	80025cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	4908      	ldr	r1, [pc, #32]	@ (80025dc <__NVIC_SetPriority+0x50>)
 80025bc:	79fb      	ldrb	r3, [r7, #7]
 80025be:	f003 030f 	and.w	r3, r3, #15
 80025c2:	3b04      	subs	r3, #4
 80025c4:	0112      	lsls	r2, r2, #4
 80025c6:	b2d2      	uxtb	r2, r2
 80025c8:	440b      	add	r3, r1
 80025ca:	761a      	strb	r2, [r3, #24]
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	e000e100 	.word	0xe000e100
 80025dc:	e000ed00 	.word	0xe000ed00

080025e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b089      	sub	sp, #36	@ 0x24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f003 0307 	and.w	r3, r3, #7
 80025f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	f1c3 0307 	rsb	r3, r3, #7
 80025fa:	2b04      	cmp	r3, #4
 80025fc:	bf28      	it	cs
 80025fe:	2304      	movcs	r3, #4
 8002600:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	3304      	adds	r3, #4
 8002606:	2b06      	cmp	r3, #6
 8002608:	d902      	bls.n	8002610 <NVIC_EncodePriority+0x30>
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	3b03      	subs	r3, #3
 800260e:	e000      	b.n	8002612 <NVIC_EncodePriority+0x32>
 8002610:	2300      	movs	r3, #0
 8002612:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002614:	f04f 32ff 	mov.w	r2, #4294967295
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	43da      	mvns	r2, r3
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	401a      	ands	r2, r3
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002628:	f04f 31ff 	mov.w	r1, #4294967295
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	fa01 f303 	lsl.w	r3, r1, r3
 8002632:	43d9      	mvns	r1, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002638:	4313      	orrs	r3, r2
         );
}
 800263a:	4618      	mov	r0, r3
 800263c:	3724      	adds	r7, #36	@ 0x24
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
	...

08002648 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	3b01      	subs	r3, #1
 8002654:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002658:	d301      	bcc.n	800265e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800265a:	2301      	movs	r3, #1
 800265c:	e00f      	b.n	800267e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800265e:	4a0a      	ldr	r2, [pc, #40]	@ (8002688 <SysTick_Config+0x40>)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	3b01      	subs	r3, #1
 8002664:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002666:	210f      	movs	r1, #15
 8002668:	f04f 30ff 	mov.w	r0, #4294967295
 800266c:	f7ff ff8e 	bl	800258c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002670:	4b05      	ldr	r3, [pc, #20]	@ (8002688 <SysTick_Config+0x40>)
 8002672:	2200      	movs	r2, #0
 8002674:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002676:	4b04      	ldr	r3, [pc, #16]	@ (8002688 <SysTick_Config+0x40>)
 8002678:	2207      	movs	r2, #7
 800267a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	e000e010 	.word	0xe000e010

0800268c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f7ff ff29 	bl	80024ec <__NVIC_SetPriorityGrouping>
}
 800269a:	bf00      	nop
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b086      	sub	sp, #24
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	4603      	mov	r3, r0
 80026aa:	60b9      	str	r1, [r7, #8]
 80026ac:	607a      	str	r2, [r7, #4]
 80026ae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026b0:	f7ff ff40 	bl	8002534 <__NVIC_GetPriorityGrouping>
 80026b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	68b9      	ldr	r1, [r7, #8]
 80026ba:	6978      	ldr	r0, [r7, #20]
 80026bc:	f7ff ff90 	bl	80025e0 <NVIC_EncodePriority>
 80026c0:	4602      	mov	r2, r0
 80026c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026c6:	4611      	mov	r1, r2
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7ff ff5f 	bl	800258c <__NVIC_SetPriority>
}
 80026ce:	bf00      	nop
 80026d0:	3718      	adds	r7, #24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b082      	sub	sp, #8
 80026da:	af00      	add	r7, sp, #0
 80026dc:	4603      	mov	r3, r0
 80026de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff ff33 	bl	8002550 <__NVIC_EnableIRQ>
}
 80026ea:	bf00      	nop
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b082      	sub	sp, #8
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7ff ffa4 	bl	8002648 <SysTick_Config>
 8002700:	4603      	mov	r3, r0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800270a:	b480      	push	{r7}
 800270c:	b085      	sub	sp, #20
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002712:	2300      	movs	r3, #0
 8002714:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d005      	beq.n	800272e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2204      	movs	r2, #4
 8002726:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	73fb      	strb	r3, [r7, #15]
 800272c:	e037      	b.n	800279e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 020e 	bic.w	r2, r2, #14
 800273c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002748:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800274c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f022 0201 	bic.w	r2, r2, #1
 800275c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002762:	f003 021f 	and.w	r2, r3, #31
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276a:	2101      	movs	r1, #1
 800276c:	fa01 f202 	lsl.w	r2, r1, r2
 8002770:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800277a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00c      	beq.n	800279e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800278e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002792:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800279c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80027ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3714      	adds	r7, #20
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027c4:	2300      	movs	r3, #0
 80027c6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d00d      	beq.n	80027f0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2204      	movs	r2, #4
 80027d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2201      	movs	r2, #1
 80027de:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	73fb      	strb	r3, [r7, #15]
 80027ee:	e047      	b.n	8002880 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f022 020e 	bic.w	r2, r2, #14
 80027fe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f022 0201 	bic.w	r2, r2, #1
 800280e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800281a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800281e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002824:	f003 021f 	and.w	r2, r3, #31
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282c:	2101      	movs	r1, #1
 800282e:	fa01 f202 	lsl.w	r2, r1, r2
 8002832:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800283c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00c      	beq.n	8002860 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002850:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002854:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800285e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002874:	2b00      	cmp	r3, #0
 8002876:	d003      	beq.n	8002880 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	4798      	blx	r3
    }
  }
  return status;
 8002880:	7bfb      	ldrb	r3, [r7, #15]
}
 8002882:	4618      	mov	r0, r3
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
	...

0800288c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800288c:	b480      	push	{r7}
 800288e:	b087      	sub	sp, #28
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002896:	2300      	movs	r3, #0
 8002898:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800289a:	e15a      	b.n	8002b52 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	2101      	movs	r1, #1
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	fa01 f303 	lsl.w	r3, r1, r3
 80028a8:	4013      	ands	r3, r2
 80028aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f000 814c 	beq.w	8002b4c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f003 0303 	and.w	r3, r3, #3
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d005      	beq.n	80028cc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d130      	bne.n	800292e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	2203      	movs	r2, #3
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	43db      	mvns	r3, r3
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	4013      	ands	r3, r2
 80028e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	68da      	ldr	r2, [r3, #12]
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002902:	2201      	movs	r2, #1
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	43db      	mvns	r3, r3
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	4013      	ands	r3, r2
 8002910:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	091b      	lsrs	r3, r3, #4
 8002918:	f003 0201 	and.w	r2, r3, #1
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	4313      	orrs	r3, r2
 8002926:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f003 0303 	and.w	r3, r3, #3
 8002936:	2b03      	cmp	r3, #3
 8002938:	d017      	beq.n	800296a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	2203      	movs	r2, #3
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	43db      	mvns	r3, r3
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	4013      	ands	r3, r2
 8002950:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	689a      	ldr	r2, [r3, #8]
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	4313      	orrs	r3, r2
 8002962:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f003 0303 	and.w	r3, r3, #3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d123      	bne.n	80029be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	08da      	lsrs	r2, r3, #3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	3208      	adds	r2, #8
 800297e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002982:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	f003 0307 	and.w	r3, r3, #7
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	220f      	movs	r2, #15
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	43db      	mvns	r3, r3
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	4013      	ands	r3, r2
 8002998:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	691a      	ldr	r2, [r3, #16]
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	f003 0307 	and.w	r3, r3, #7
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	08da      	lsrs	r2, r3, #3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	3208      	adds	r2, #8
 80029b8:	6939      	ldr	r1, [r7, #16]
 80029ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	2203      	movs	r2, #3
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	43db      	mvns	r3, r3
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	4013      	ands	r3, r2
 80029d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f003 0203 	and.w	r2, r3, #3
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	fa02 f303 	lsl.w	r3, r2, r3
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f000 80a6 	beq.w	8002b4c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a00:	4b5b      	ldr	r3, [pc, #364]	@ (8002b70 <HAL_GPIO_Init+0x2e4>)
 8002a02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a04:	4a5a      	ldr	r2, [pc, #360]	@ (8002b70 <HAL_GPIO_Init+0x2e4>)
 8002a06:	f043 0301 	orr.w	r3, r3, #1
 8002a0a:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a0c:	4b58      	ldr	r3, [pc, #352]	@ (8002b70 <HAL_GPIO_Init+0x2e4>)
 8002a0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	60bb      	str	r3, [r7, #8]
 8002a16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a18:	4a56      	ldr	r2, [pc, #344]	@ (8002b74 <HAL_GPIO_Init+0x2e8>)
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	089b      	lsrs	r3, r3, #2
 8002a1e:	3302      	adds	r3, #2
 8002a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	f003 0303 	and.w	r3, r3, #3
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	220f      	movs	r2, #15
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	43db      	mvns	r3, r3
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002a42:	d01f      	beq.n	8002a84 <HAL_GPIO_Init+0x1f8>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a4c      	ldr	r2, [pc, #304]	@ (8002b78 <HAL_GPIO_Init+0x2ec>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d019      	beq.n	8002a80 <HAL_GPIO_Init+0x1f4>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a4b      	ldr	r2, [pc, #300]	@ (8002b7c <HAL_GPIO_Init+0x2f0>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d013      	beq.n	8002a7c <HAL_GPIO_Init+0x1f0>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4a4a      	ldr	r2, [pc, #296]	@ (8002b80 <HAL_GPIO_Init+0x2f4>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d00d      	beq.n	8002a78 <HAL_GPIO_Init+0x1ec>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4a49      	ldr	r2, [pc, #292]	@ (8002b84 <HAL_GPIO_Init+0x2f8>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d007      	beq.n	8002a74 <HAL_GPIO_Init+0x1e8>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a48      	ldr	r2, [pc, #288]	@ (8002b88 <HAL_GPIO_Init+0x2fc>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d101      	bne.n	8002a70 <HAL_GPIO_Init+0x1e4>
 8002a6c:	2305      	movs	r3, #5
 8002a6e:	e00a      	b.n	8002a86 <HAL_GPIO_Init+0x1fa>
 8002a70:	2306      	movs	r3, #6
 8002a72:	e008      	b.n	8002a86 <HAL_GPIO_Init+0x1fa>
 8002a74:	2304      	movs	r3, #4
 8002a76:	e006      	b.n	8002a86 <HAL_GPIO_Init+0x1fa>
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e004      	b.n	8002a86 <HAL_GPIO_Init+0x1fa>
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	e002      	b.n	8002a86 <HAL_GPIO_Init+0x1fa>
 8002a80:	2301      	movs	r3, #1
 8002a82:	e000      	b.n	8002a86 <HAL_GPIO_Init+0x1fa>
 8002a84:	2300      	movs	r3, #0
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	f002 0203 	and.w	r2, r2, #3
 8002a8c:	0092      	lsls	r2, r2, #2
 8002a8e:	4093      	lsls	r3, r2
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a96:	4937      	ldr	r1, [pc, #220]	@ (8002b74 <HAL_GPIO_Init+0x2e8>)
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	089b      	lsrs	r3, r3, #2
 8002a9c:	3302      	adds	r3, #2
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002aa4:	4b39      	ldr	r3, [pc, #228]	@ (8002b8c <HAL_GPIO_Init+0x300>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	43db      	mvns	r3, r3
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d003      	beq.n	8002ac8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ac8:	4a30      	ldr	r2, [pc, #192]	@ (8002b8c <HAL_GPIO_Init+0x300>)
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002ace:	4b2f      	ldr	r3, [pc, #188]	@ (8002b8c <HAL_GPIO_Init+0x300>)
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	4013      	ands	r3, r2
 8002adc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002af2:	4a26      	ldr	r2, [pc, #152]	@ (8002b8c <HAL_GPIO_Init+0x300>)
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002af8:	4b24      	ldr	r3, [pc, #144]	@ (8002b8c <HAL_GPIO_Init+0x300>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	43db      	mvns	r3, r3
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	4013      	ands	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d003      	beq.n	8002b1c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b1c:	4a1b      	ldr	r2, [pc, #108]	@ (8002b8c <HAL_GPIO_Init+0x300>)
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002b22:	4b1a      	ldr	r3, [pc, #104]	@ (8002b8c <HAL_GPIO_Init+0x300>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	43db      	mvns	r3, r3
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b46:	4a11      	ldr	r2, [pc, #68]	@ (8002b8c <HAL_GPIO_Init+0x300>)
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	3301      	adds	r3, #1
 8002b50:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	fa22 f303 	lsr.w	r3, r2, r3
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f47f ae9d 	bne.w	800289c <HAL_GPIO_Init+0x10>
  }
}
 8002b62:	bf00      	nop
 8002b64:	bf00      	nop
 8002b66:	371c      	adds	r7, #28
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	40021000 	.word	0x40021000
 8002b74:	40010000 	.word	0x40010000
 8002b78:	48000400 	.word	0x48000400
 8002b7c:	48000800 	.word	0x48000800
 8002b80:	48000c00 	.word	0x48000c00
 8002b84:	48001000 	.word	0x48001000
 8002b88:	48001400 	.word	0x48001400
 8002b8c:	40010400 	.word	0x40010400

08002b90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	460b      	mov	r3, r1
 8002b9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	691a      	ldr	r2, [r3, #16]
 8002ba0:	887b      	ldrh	r3, [r7, #2]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d002      	beq.n	8002bae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	73fb      	strb	r3, [r7, #15]
 8002bac:	e001      	b.n	8002bb2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3714      	adds	r7, #20
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	460b      	mov	r3, r1
 8002bca:	807b      	strh	r3, [r7, #2]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bd0:	787b      	ldrb	r3, [r7, #1]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bd6:	887a      	ldrh	r2, [r7, #2]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002bdc:	e002      	b.n	8002be4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002bde:	887a      	ldrh	r2, [r7, #2]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	695b      	ldr	r3, [r3, #20]
 8002c00:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c02:	887a      	ldrh	r2, [r7, #2]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	4013      	ands	r3, r2
 8002c08:	041a      	lsls	r2, r3, #16
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	43d9      	mvns	r1, r3
 8002c0e:	887b      	ldrh	r3, [r7, #2]
 8002c10:	400b      	ands	r3, r1
 8002c12:	431a      	orrs	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	619a      	str	r2, [r3, #24]
}
 8002c18:	bf00      	nop
 8002c1a:	3714      	adds	r7, #20
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d141      	bne.n	8002cb6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c32:	4b4b      	ldr	r3, [pc, #300]	@ (8002d60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c3e:	d131      	bne.n	8002ca4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c40:	4b47      	ldr	r3, [pc, #284]	@ (8002d60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c46:	4a46      	ldr	r2, [pc, #280]	@ (8002d60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c4c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c50:	4b43      	ldr	r3, [pc, #268]	@ (8002d60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c58:	4a41      	ldr	r2, [pc, #260]	@ (8002d60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c5e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c60:	4b40      	ldr	r3, [pc, #256]	@ (8002d64 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2232      	movs	r2, #50	@ 0x32
 8002c66:	fb02 f303 	mul.w	r3, r2, r3
 8002c6a:	4a3f      	ldr	r2, [pc, #252]	@ (8002d68 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c70:	0c9b      	lsrs	r3, r3, #18
 8002c72:	3301      	adds	r3, #1
 8002c74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c76:	e002      	b.n	8002c7e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c7e:	4b38      	ldr	r3, [pc, #224]	@ (8002d60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c8a:	d102      	bne.n	8002c92 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d1f2      	bne.n	8002c78 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c92:	4b33      	ldr	r3, [pc, #204]	@ (8002d60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c9e:	d158      	bne.n	8002d52 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e057      	b.n	8002d54 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ca4:	4b2e      	ldr	r3, [pc, #184]	@ (8002d60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ca6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002caa:	4a2d      	ldr	r2, [pc, #180]	@ (8002d60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002cb0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002cb4:	e04d      	b.n	8002d52 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cbc:	d141      	bne.n	8002d42 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002cbe:	4b28      	ldr	r3, [pc, #160]	@ (8002d60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002cc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cca:	d131      	bne.n	8002d30 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ccc:	4b24      	ldr	r3, [pc, #144]	@ (8002d60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002cd2:	4a23      	ldr	r2, [pc, #140]	@ (8002d60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cd8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cdc:	4b20      	ldr	r3, [pc, #128]	@ (8002d60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ce4:	4a1e      	ldr	r2, [pc, #120]	@ (8002d60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ce6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002cea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002cec:	4b1d      	ldr	r3, [pc, #116]	@ (8002d64 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2232      	movs	r2, #50	@ 0x32
 8002cf2:	fb02 f303 	mul.w	r3, r2, r3
 8002cf6:	4a1c      	ldr	r2, [pc, #112]	@ (8002d68 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfc:	0c9b      	lsrs	r3, r3, #18
 8002cfe:	3301      	adds	r3, #1
 8002d00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d02:	e002      	b.n	8002d0a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	3b01      	subs	r3, #1
 8002d08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d0a:	4b15      	ldr	r3, [pc, #84]	@ (8002d60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d16:	d102      	bne.n	8002d1e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1f2      	bne.n	8002d04 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d1e:	4b10      	ldr	r3, [pc, #64]	@ (8002d60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d2a:	d112      	bne.n	8002d52 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e011      	b.n	8002d54 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d30:	4b0b      	ldr	r3, [pc, #44]	@ (8002d60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d36:	4a0a      	ldr	r2, [pc, #40]	@ (8002d60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d3c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002d40:	e007      	b.n	8002d52 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d42:	4b07      	ldr	r3, [pc, #28]	@ (8002d60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d4a:	4a05      	ldr	r2, [pc, #20]	@ (8002d60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d4c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d50:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3714      	adds	r7, #20
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr
 8002d60:	40007000 	.word	0x40007000
 8002d64:	20000004 	.word	0x20000004
 8002d68:	431bde83 	.word	0x431bde83

08002d6c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002d70:	4b05      	ldr	r3, [pc, #20]	@ (8002d88 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	4a04      	ldr	r2, [pc, #16]	@ (8002d88 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002d76:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d7a:	6093      	str	r3, [r2, #8]
}
 8002d7c:	bf00      	nop
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	40007000 	.word	0x40007000

08002d8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b088      	sub	sp, #32
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e2fe      	b.n	800339c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d075      	beq.n	8002e96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002daa:	4b97      	ldr	r3, [pc, #604]	@ (8003008 <HAL_RCC_OscConfig+0x27c>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f003 030c 	and.w	r3, r3, #12
 8002db2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002db4:	4b94      	ldr	r3, [pc, #592]	@ (8003008 <HAL_RCC_OscConfig+0x27c>)
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	f003 0303 	and.w	r3, r3, #3
 8002dbc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	2b0c      	cmp	r3, #12
 8002dc2:	d102      	bne.n	8002dca <HAL_RCC_OscConfig+0x3e>
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	2b03      	cmp	r3, #3
 8002dc8:	d002      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x44>
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	2b08      	cmp	r3, #8
 8002dce:	d10b      	bne.n	8002de8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dd0:	4b8d      	ldr	r3, [pc, #564]	@ (8003008 <HAL_RCC_OscConfig+0x27c>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d05b      	beq.n	8002e94 <HAL_RCC_OscConfig+0x108>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d157      	bne.n	8002e94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e2d9      	b.n	800339c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002df0:	d106      	bne.n	8002e00 <HAL_RCC_OscConfig+0x74>
 8002df2:	4b85      	ldr	r3, [pc, #532]	@ (8003008 <HAL_RCC_OscConfig+0x27c>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a84      	ldr	r2, [pc, #528]	@ (8003008 <HAL_RCC_OscConfig+0x27c>)
 8002df8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dfc:	6013      	str	r3, [r2, #0]
 8002dfe:	e01d      	b.n	8002e3c <HAL_RCC_OscConfig+0xb0>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e08:	d10c      	bne.n	8002e24 <HAL_RCC_OscConfig+0x98>
 8002e0a:	4b7f      	ldr	r3, [pc, #508]	@ (8003008 <HAL_RCC_OscConfig+0x27c>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a7e      	ldr	r2, [pc, #504]	@ (8003008 <HAL_RCC_OscConfig+0x27c>)
 8002e10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e14:	6013      	str	r3, [r2, #0]
 8002e16:	4b7c      	ldr	r3, [pc, #496]	@ (8003008 <HAL_RCC_OscConfig+0x27c>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a7b      	ldr	r2, [pc, #492]	@ (8003008 <HAL_RCC_OscConfig+0x27c>)
 8002e1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e20:	6013      	str	r3, [r2, #0]
 8002e22:	e00b      	b.n	8002e3c <HAL_RCC_OscConfig+0xb0>
 8002e24:	4b78      	ldr	r3, [pc, #480]	@ (8003008 <HAL_RCC_OscConfig+0x27c>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a77      	ldr	r2, [pc, #476]	@ (8003008 <HAL_RCC_OscConfig+0x27c>)
 8002e2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e2e:	6013      	str	r3, [r2, #0]
 8002e30:	4b75      	ldr	r3, [pc, #468]	@ (8003008 <HAL_RCC_OscConfig+0x27c>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a74      	ldr	r2, [pc, #464]	@ (8003008 <HAL_RCC_OscConfig+0x27c>)
 8002e36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d013      	beq.n	8002e6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e44:	f7ff fb24 	bl	8002490 <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e4c:	f7ff fb20 	bl	8002490 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b64      	cmp	r3, #100	@ 0x64
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e29e      	b.n	800339c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e5e:	4b6a      	ldr	r3, [pc, #424]	@ (8003008 <HAL_RCC_OscConfig+0x27c>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d0f0      	beq.n	8002e4c <HAL_RCC_OscConfig+0xc0>
 8002e6a:	e014      	b.n	8002e96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e6c:	f7ff fb10 	bl	8002490 <HAL_GetTick>
 8002e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e72:	e008      	b.n	8002e86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e74:	f7ff fb0c 	bl	8002490 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b64      	cmp	r3, #100	@ 0x64
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e28a      	b.n	800339c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e86:	4b60      	ldr	r3, [pc, #384]	@ (8003008 <HAL_RCC_OscConfig+0x27c>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1f0      	bne.n	8002e74 <HAL_RCC_OscConfig+0xe8>
 8002e92:	e000      	b.n	8002e96 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d075      	beq.n	8002f8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ea2:	4b59      	ldr	r3, [pc, #356]	@ (8003008 <HAL_RCC_OscConfig+0x27c>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f003 030c 	and.w	r3, r3, #12
 8002eaa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002eac:	4b56      	ldr	r3, [pc, #344]	@ (8003008 <HAL_RCC_OscConfig+0x27c>)
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	f003 0303 	and.w	r3, r3, #3
 8002eb4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	2b0c      	cmp	r3, #12
 8002eba:	d102      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x136>
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d002      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x13c>
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	2b04      	cmp	r3, #4
 8002ec6:	d11f      	bne.n	8002f08 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ec8:	4b4f      	ldr	r3, [pc, #316]	@ (8003008 <HAL_RCC_OscConfig+0x27c>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d005      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x154>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d101      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e25d      	b.n	800339c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ee0:	4b49      	ldr	r3, [pc, #292]	@ (8003008 <HAL_RCC_OscConfig+0x27c>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	061b      	lsls	r3, r3, #24
 8002eee:	4946      	ldr	r1, [pc, #280]	@ (8003008 <HAL_RCC_OscConfig+0x27c>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002ef4:	4b45      	ldr	r3, [pc, #276]	@ (800300c <HAL_RCC_OscConfig+0x280>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7ff fa7d 	bl	80023f8 <HAL_InitTick>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d043      	beq.n	8002f8c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e249      	b.n	800339c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d023      	beq.n	8002f58 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f10:	4b3d      	ldr	r3, [pc, #244]	@ (8003008 <HAL_RCC_OscConfig+0x27c>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a3c      	ldr	r2, [pc, #240]	@ (8003008 <HAL_RCC_OscConfig+0x27c>)
 8002f16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f1c:	f7ff fab8 	bl	8002490 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f24:	f7ff fab4 	bl	8002490 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e232      	b.n	800339c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f36:	4b34      	ldr	r3, [pc, #208]	@ (8003008 <HAL_RCC_OscConfig+0x27c>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d0f0      	beq.n	8002f24 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f42:	4b31      	ldr	r3, [pc, #196]	@ (8003008 <HAL_RCC_OscConfig+0x27c>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	061b      	lsls	r3, r3, #24
 8002f50:	492d      	ldr	r1, [pc, #180]	@ (8003008 <HAL_RCC_OscConfig+0x27c>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	604b      	str	r3, [r1, #4]
 8002f56:	e01a      	b.n	8002f8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f58:	4b2b      	ldr	r3, [pc, #172]	@ (8003008 <HAL_RCC_OscConfig+0x27c>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a2a      	ldr	r2, [pc, #168]	@ (8003008 <HAL_RCC_OscConfig+0x27c>)
 8002f5e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f64:	f7ff fa94 	bl	8002490 <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f6c:	f7ff fa90 	bl	8002490 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e20e      	b.n	800339c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f7e:	4b22      	ldr	r3, [pc, #136]	@ (8003008 <HAL_RCC_OscConfig+0x27c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1f0      	bne.n	8002f6c <HAL_RCC_OscConfig+0x1e0>
 8002f8a:	e000      	b.n	8002f8e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f8c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0308 	and.w	r3, r3, #8
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d041      	beq.n	800301e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d01c      	beq.n	8002fdc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fa2:	4b19      	ldr	r3, [pc, #100]	@ (8003008 <HAL_RCC_OscConfig+0x27c>)
 8002fa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fa8:	4a17      	ldr	r2, [pc, #92]	@ (8003008 <HAL_RCC_OscConfig+0x27c>)
 8002faa:	f043 0301 	orr.w	r3, r3, #1
 8002fae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb2:	f7ff fa6d 	bl	8002490 <HAL_GetTick>
 8002fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fb8:	e008      	b.n	8002fcc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fba:	f7ff fa69 	bl	8002490 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e1e7      	b.n	800339c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fcc:	4b0e      	ldr	r3, [pc, #56]	@ (8003008 <HAL_RCC_OscConfig+0x27c>)
 8002fce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d0ef      	beq.n	8002fba <HAL_RCC_OscConfig+0x22e>
 8002fda:	e020      	b.n	800301e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8003008 <HAL_RCC_OscConfig+0x27c>)
 8002fde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fe2:	4a09      	ldr	r2, [pc, #36]	@ (8003008 <HAL_RCC_OscConfig+0x27c>)
 8002fe4:	f023 0301 	bic.w	r3, r3, #1
 8002fe8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fec:	f7ff fa50 	bl	8002490 <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ff2:	e00d      	b.n	8003010 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ff4:	f7ff fa4c 	bl	8002490 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d906      	bls.n	8003010 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e1ca      	b.n	800339c <HAL_RCC_OscConfig+0x610>
 8003006:	bf00      	nop
 8003008:	40021000 	.word	0x40021000
 800300c:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003010:	4b8c      	ldr	r3, [pc, #560]	@ (8003244 <HAL_RCC_OscConfig+0x4b8>)
 8003012:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1ea      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0304 	and.w	r3, r3, #4
 8003026:	2b00      	cmp	r3, #0
 8003028:	f000 80a6 	beq.w	8003178 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800302c:	2300      	movs	r3, #0
 800302e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003030:	4b84      	ldr	r3, [pc, #528]	@ (8003244 <HAL_RCC_OscConfig+0x4b8>)
 8003032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003034:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d101      	bne.n	8003040 <HAL_RCC_OscConfig+0x2b4>
 800303c:	2301      	movs	r3, #1
 800303e:	e000      	b.n	8003042 <HAL_RCC_OscConfig+0x2b6>
 8003040:	2300      	movs	r3, #0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00d      	beq.n	8003062 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003046:	4b7f      	ldr	r3, [pc, #508]	@ (8003244 <HAL_RCC_OscConfig+0x4b8>)
 8003048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800304a:	4a7e      	ldr	r2, [pc, #504]	@ (8003244 <HAL_RCC_OscConfig+0x4b8>)
 800304c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003050:	6593      	str	r3, [r2, #88]	@ 0x58
 8003052:	4b7c      	ldr	r3, [pc, #496]	@ (8003244 <HAL_RCC_OscConfig+0x4b8>)
 8003054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003056:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800305a:	60fb      	str	r3, [r7, #12]
 800305c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800305e:	2301      	movs	r3, #1
 8003060:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003062:	4b79      	ldr	r3, [pc, #484]	@ (8003248 <HAL_RCC_OscConfig+0x4bc>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800306a:	2b00      	cmp	r3, #0
 800306c:	d118      	bne.n	80030a0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800306e:	4b76      	ldr	r3, [pc, #472]	@ (8003248 <HAL_RCC_OscConfig+0x4bc>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a75      	ldr	r2, [pc, #468]	@ (8003248 <HAL_RCC_OscConfig+0x4bc>)
 8003074:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003078:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800307a:	f7ff fa09 	bl	8002490 <HAL_GetTick>
 800307e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003080:	e008      	b.n	8003094 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003082:	f7ff fa05 	bl	8002490 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e183      	b.n	800339c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003094:	4b6c      	ldr	r3, [pc, #432]	@ (8003248 <HAL_RCC_OscConfig+0x4bc>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800309c:	2b00      	cmp	r3, #0
 800309e:	d0f0      	beq.n	8003082 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d108      	bne.n	80030ba <HAL_RCC_OscConfig+0x32e>
 80030a8:	4b66      	ldr	r3, [pc, #408]	@ (8003244 <HAL_RCC_OscConfig+0x4b8>)
 80030aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030ae:	4a65      	ldr	r2, [pc, #404]	@ (8003244 <HAL_RCC_OscConfig+0x4b8>)
 80030b0:	f043 0301 	orr.w	r3, r3, #1
 80030b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80030b8:	e024      	b.n	8003104 <HAL_RCC_OscConfig+0x378>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	2b05      	cmp	r3, #5
 80030c0:	d110      	bne.n	80030e4 <HAL_RCC_OscConfig+0x358>
 80030c2:	4b60      	ldr	r3, [pc, #384]	@ (8003244 <HAL_RCC_OscConfig+0x4b8>)
 80030c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030c8:	4a5e      	ldr	r2, [pc, #376]	@ (8003244 <HAL_RCC_OscConfig+0x4b8>)
 80030ca:	f043 0304 	orr.w	r3, r3, #4
 80030ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80030d2:	4b5c      	ldr	r3, [pc, #368]	@ (8003244 <HAL_RCC_OscConfig+0x4b8>)
 80030d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030d8:	4a5a      	ldr	r2, [pc, #360]	@ (8003244 <HAL_RCC_OscConfig+0x4b8>)
 80030da:	f043 0301 	orr.w	r3, r3, #1
 80030de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80030e2:	e00f      	b.n	8003104 <HAL_RCC_OscConfig+0x378>
 80030e4:	4b57      	ldr	r3, [pc, #348]	@ (8003244 <HAL_RCC_OscConfig+0x4b8>)
 80030e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030ea:	4a56      	ldr	r2, [pc, #344]	@ (8003244 <HAL_RCC_OscConfig+0x4b8>)
 80030ec:	f023 0301 	bic.w	r3, r3, #1
 80030f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80030f4:	4b53      	ldr	r3, [pc, #332]	@ (8003244 <HAL_RCC_OscConfig+0x4b8>)
 80030f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030fa:	4a52      	ldr	r2, [pc, #328]	@ (8003244 <HAL_RCC_OscConfig+0x4b8>)
 80030fc:	f023 0304 	bic.w	r3, r3, #4
 8003100:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d016      	beq.n	800313a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800310c:	f7ff f9c0 	bl	8002490 <HAL_GetTick>
 8003110:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003112:	e00a      	b.n	800312a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003114:	f7ff f9bc 	bl	8002490 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003122:	4293      	cmp	r3, r2
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e138      	b.n	800339c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800312a:	4b46      	ldr	r3, [pc, #280]	@ (8003244 <HAL_RCC_OscConfig+0x4b8>)
 800312c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d0ed      	beq.n	8003114 <HAL_RCC_OscConfig+0x388>
 8003138:	e015      	b.n	8003166 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800313a:	f7ff f9a9 	bl	8002490 <HAL_GetTick>
 800313e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003140:	e00a      	b.n	8003158 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003142:	f7ff f9a5 	bl	8002490 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003150:	4293      	cmp	r3, r2
 8003152:	d901      	bls.n	8003158 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e121      	b.n	800339c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003158:	4b3a      	ldr	r3, [pc, #232]	@ (8003244 <HAL_RCC_OscConfig+0x4b8>)
 800315a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1ed      	bne.n	8003142 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003166:	7ffb      	ldrb	r3, [r7, #31]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d105      	bne.n	8003178 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800316c:	4b35      	ldr	r3, [pc, #212]	@ (8003244 <HAL_RCC_OscConfig+0x4b8>)
 800316e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003170:	4a34      	ldr	r2, [pc, #208]	@ (8003244 <HAL_RCC_OscConfig+0x4b8>)
 8003172:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003176:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0320 	and.w	r3, r3, #32
 8003180:	2b00      	cmp	r3, #0
 8003182:	d03c      	beq.n	80031fe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d01c      	beq.n	80031c6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800318c:	4b2d      	ldr	r3, [pc, #180]	@ (8003244 <HAL_RCC_OscConfig+0x4b8>)
 800318e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003192:	4a2c      	ldr	r2, [pc, #176]	@ (8003244 <HAL_RCC_OscConfig+0x4b8>)
 8003194:	f043 0301 	orr.w	r3, r3, #1
 8003198:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800319c:	f7ff f978 	bl	8002490 <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031a2:	e008      	b.n	80031b6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031a4:	f7ff f974 	bl	8002490 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e0f2      	b.n	800339c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031b6:	4b23      	ldr	r3, [pc, #140]	@ (8003244 <HAL_RCC_OscConfig+0x4b8>)
 80031b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d0ef      	beq.n	80031a4 <HAL_RCC_OscConfig+0x418>
 80031c4:	e01b      	b.n	80031fe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80031c6:	4b1f      	ldr	r3, [pc, #124]	@ (8003244 <HAL_RCC_OscConfig+0x4b8>)
 80031c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80031cc:	4a1d      	ldr	r2, [pc, #116]	@ (8003244 <HAL_RCC_OscConfig+0x4b8>)
 80031ce:	f023 0301 	bic.w	r3, r3, #1
 80031d2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d6:	f7ff f95b 	bl	8002490 <HAL_GetTick>
 80031da:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031dc:	e008      	b.n	80031f0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031de:	f7ff f957 	bl	8002490 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d901      	bls.n	80031f0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e0d5      	b.n	800339c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031f0:	4b14      	ldr	r3, [pc, #80]	@ (8003244 <HAL_RCC_OscConfig+0x4b8>)
 80031f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1ef      	bne.n	80031de <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	69db      	ldr	r3, [r3, #28]
 8003202:	2b00      	cmp	r3, #0
 8003204:	f000 80c9 	beq.w	800339a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003208:	4b0e      	ldr	r3, [pc, #56]	@ (8003244 <HAL_RCC_OscConfig+0x4b8>)
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f003 030c 	and.w	r3, r3, #12
 8003210:	2b0c      	cmp	r3, #12
 8003212:	f000 8083 	beq.w	800331c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	69db      	ldr	r3, [r3, #28]
 800321a:	2b02      	cmp	r3, #2
 800321c:	d15e      	bne.n	80032dc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800321e:	4b09      	ldr	r3, [pc, #36]	@ (8003244 <HAL_RCC_OscConfig+0x4b8>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a08      	ldr	r2, [pc, #32]	@ (8003244 <HAL_RCC_OscConfig+0x4b8>)
 8003224:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003228:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800322a:	f7ff f931 	bl	8002490 <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003230:	e00c      	b.n	800324c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003232:	f7ff f92d 	bl	8002490 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d905      	bls.n	800324c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e0ab      	b.n	800339c <HAL_RCC_OscConfig+0x610>
 8003244:	40021000 	.word	0x40021000
 8003248:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800324c:	4b55      	ldr	r3, [pc, #340]	@ (80033a4 <HAL_RCC_OscConfig+0x618>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1ec      	bne.n	8003232 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003258:	4b52      	ldr	r3, [pc, #328]	@ (80033a4 <HAL_RCC_OscConfig+0x618>)
 800325a:	68da      	ldr	r2, [r3, #12]
 800325c:	4b52      	ldr	r3, [pc, #328]	@ (80033a8 <HAL_RCC_OscConfig+0x61c>)
 800325e:	4013      	ands	r3, r2
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	6a11      	ldr	r1, [r2, #32]
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003268:	3a01      	subs	r2, #1
 800326a:	0112      	lsls	r2, r2, #4
 800326c:	4311      	orrs	r1, r2
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003272:	0212      	lsls	r2, r2, #8
 8003274:	4311      	orrs	r1, r2
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800327a:	0852      	lsrs	r2, r2, #1
 800327c:	3a01      	subs	r2, #1
 800327e:	0552      	lsls	r2, r2, #21
 8003280:	4311      	orrs	r1, r2
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003286:	0852      	lsrs	r2, r2, #1
 8003288:	3a01      	subs	r2, #1
 800328a:	0652      	lsls	r2, r2, #25
 800328c:	4311      	orrs	r1, r2
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003292:	06d2      	lsls	r2, r2, #27
 8003294:	430a      	orrs	r2, r1
 8003296:	4943      	ldr	r1, [pc, #268]	@ (80033a4 <HAL_RCC_OscConfig+0x618>)
 8003298:	4313      	orrs	r3, r2
 800329a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800329c:	4b41      	ldr	r3, [pc, #260]	@ (80033a4 <HAL_RCC_OscConfig+0x618>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a40      	ldr	r2, [pc, #256]	@ (80033a4 <HAL_RCC_OscConfig+0x618>)
 80032a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032a6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032a8:	4b3e      	ldr	r3, [pc, #248]	@ (80033a4 <HAL_RCC_OscConfig+0x618>)
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	4a3d      	ldr	r2, [pc, #244]	@ (80033a4 <HAL_RCC_OscConfig+0x618>)
 80032ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032b2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b4:	f7ff f8ec 	bl	8002490 <HAL_GetTick>
 80032b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032ba:	e008      	b.n	80032ce <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032bc:	f7ff f8e8 	bl	8002490 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e066      	b.n	800339c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032ce:	4b35      	ldr	r3, [pc, #212]	@ (80033a4 <HAL_RCC_OscConfig+0x618>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d0f0      	beq.n	80032bc <HAL_RCC_OscConfig+0x530>
 80032da:	e05e      	b.n	800339a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032dc:	4b31      	ldr	r3, [pc, #196]	@ (80033a4 <HAL_RCC_OscConfig+0x618>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a30      	ldr	r2, [pc, #192]	@ (80033a4 <HAL_RCC_OscConfig+0x618>)
 80032e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80032e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e8:	f7ff f8d2 	bl	8002490 <HAL_GetTick>
 80032ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032ee:	e008      	b.n	8003302 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032f0:	f7ff f8ce 	bl	8002490 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e04c      	b.n	800339c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003302:	4b28      	ldr	r3, [pc, #160]	@ (80033a4 <HAL_RCC_OscConfig+0x618>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1f0      	bne.n	80032f0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800330e:	4b25      	ldr	r3, [pc, #148]	@ (80033a4 <HAL_RCC_OscConfig+0x618>)
 8003310:	68da      	ldr	r2, [r3, #12]
 8003312:	4924      	ldr	r1, [pc, #144]	@ (80033a4 <HAL_RCC_OscConfig+0x618>)
 8003314:	4b25      	ldr	r3, [pc, #148]	@ (80033ac <HAL_RCC_OscConfig+0x620>)
 8003316:	4013      	ands	r3, r2
 8003318:	60cb      	str	r3, [r1, #12]
 800331a:	e03e      	b.n	800339a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	69db      	ldr	r3, [r3, #28]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d101      	bne.n	8003328 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e039      	b.n	800339c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003328:	4b1e      	ldr	r3, [pc, #120]	@ (80033a4 <HAL_RCC_OscConfig+0x618>)
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	f003 0203 	and.w	r2, r3, #3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	429a      	cmp	r2, r3
 800333a:	d12c      	bne.n	8003396 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003346:	3b01      	subs	r3, #1
 8003348:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800334a:	429a      	cmp	r2, r3
 800334c:	d123      	bne.n	8003396 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003358:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800335a:	429a      	cmp	r2, r3
 800335c:	d11b      	bne.n	8003396 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003368:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800336a:	429a      	cmp	r2, r3
 800336c:	d113      	bne.n	8003396 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003378:	085b      	lsrs	r3, r3, #1
 800337a:	3b01      	subs	r3, #1
 800337c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800337e:	429a      	cmp	r2, r3
 8003380:	d109      	bne.n	8003396 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800338c:	085b      	lsrs	r3, r3, #1
 800338e:	3b01      	subs	r3, #1
 8003390:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003392:	429a      	cmp	r2, r3
 8003394:	d001      	beq.n	800339a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e000      	b.n	800339c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	3720      	adds	r7, #32
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	40021000 	.word	0x40021000
 80033a8:	019f800c 	.word	0x019f800c
 80033ac:	feeefffc 	.word	0xfeeefffc

080033b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80033ba:	2300      	movs	r3, #0
 80033bc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d101      	bne.n	80033c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e11e      	b.n	8003606 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033c8:	4b91      	ldr	r3, [pc, #580]	@ (8003610 <HAL_RCC_ClockConfig+0x260>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 030f 	and.w	r3, r3, #15
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d910      	bls.n	80033f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033d6:	4b8e      	ldr	r3, [pc, #568]	@ (8003610 <HAL_RCC_ClockConfig+0x260>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f023 020f 	bic.w	r2, r3, #15
 80033de:	498c      	ldr	r1, [pc, #560]	@ (8003610 <HAL_RCC_ClockConfig+0x260>)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033e6:	4b8a      	ldr	r3, [pc, #552]	@ (8003610 <HAL_RCC_ClockConfig+0x260>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 030f 	and.w	r3, r3, #15
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d001      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e106      	b.n	8003606 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	2b00      	cmp	r3, #0
 8003402:	d073      	beq.n	80034ec <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	2b03      	cmp	r3, #3
 800340a:	d129      	bne.n	8003460 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800340c:	4b81      	ldr	r3, [pc, #516]	@ (8003614 <HAL_RCC_ClockConfig+0x264>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d101      	bne.n	800341c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e0f4      	b.n	8003606 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800341c:	f000 f99e 	bl	800375c <RCC_GetSysClockFreqFromPLLSource>
 8003420:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	4a7c      	ldr	r2, [pc, #496]	@ (8003618 <HAL_RCC_ClockConfig+0x268>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d93f      	bls.n	80034aa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800342a:	4b7a      	ldr	r3, [pc, #488]	@ (8003614 <HAL_RCC_ClockConfig+0x264>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d009      	beq.n	800344a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800343e:	2b00      	cmp	r3, #0
 8003440:	d033      	beq.n	80034aa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003446:	2b00      	cmp	r3, #0
 8003448:	d12f      	bne.n	80034aa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800344a:	4b72      	ldr	r3, [pc, #456]	@ (8003614 <HAL_RCC_ClockConfig+0x264>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003452:	4a70      	ldr	r2, [pc, #448]	@ (8003614 <HAL_RCC_ClockConfig+0x264>)
 8003454:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003458:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800345a:	2380      	movs	r3, #128	@ 0x80
 800345c:	617b      	str	r3, [r7, #20]
 800345e:	e024      	b.n	80034aa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	2b02      	cmp	r3, #2
 8003466:	d107      	bne.n	8003478 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003468:	4b6a      	ldr	r3, [pc, #424]	@ (8003614 <HAL_RCC_ClockConfig+0x264>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d109      	bne.n	8003488 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e0c6      	b.n	8003606 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003478:	4b66      	ldr	r3, [pc, #408]	@ (8003614 <HAL_RCC_ClockConfig+0x264>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003480:	2b00      	cmp	r3, #0
 8003482:	d101      	bne.n	8003488 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e0be      	b.n	8003606 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003488:	f000 f8ce 	bl	8003628 <HAL_RCC_GetSysClockFreq>
 800348c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	4a61      	ldr	r2, [pc, #388]	@ (8003618 <HAL_RCC_ClockConfig+0x268>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d909      	bls.n	80034aa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003496:	4b5f      	ldr	r3, [pc, #380]	@ (8003614 <HAL_RCC_ClockConfig+0x264>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800349e:	4a5d      	ldr	r2, [pc, #372]	@ (8003614 <HAL_RCC_ClockConfig+0x264>)
 80034a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034a4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80034a6:	2380      	movs	r3, #128	@ 0x80
 80034a8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034aa:	4b5a      	ldr	r3, [pc, #360]	@ (8003614 <HAL_RCC_ClockConfig+0x264>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f023 0203 	bic.w	r2, r3, #3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	4957      	ldr	r1, [pc, #348]	@ (8003614 <HAL_RCC_ClockConfig+0x264>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034bc:	f7fe ffe8 	bl	8002490 <HAL_GetTick>
 80034c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034c2:	e00a      	b.n	80034da <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034c4:	f7fe ffe4 	bl	8002490 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e095      	b.n	8003606 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034da:	4b4e      	ldr	r3, [pc, #312]	@ (8003614 <HAL_RCC_ClockConfig+0x264>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f003 020c 	and.w	r2, r3, #12
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d1eb      	bne.n	80034c4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d023      	beq.n	8003540 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0304 	and.w	r3, r3, #4
 8003500:	2b00      	cmp	r3, #0
 8003502:	d005      	beq.n	8003510 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003504:	4b43      	ldr	r3, [pc, #268]	@ (8003614 <HAL_RCC_ClockConfig+0x264>)
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	4a42      	ldr	r2, [pc, #264]	@ (8003614 <HAL_RCC_ClockConfig+0x264>)
 800350a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800350e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0308 	and.w	r3, r3, #8
 8003518:	2b00      	cmp	r3, #0
 800351a:	d007      	beq.n	800352c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800351c:	4b3d      	ldr	r3, [pc, #244]	@ (8003614 <HAL_RCC_ClockConfig+0x264>)
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003524:	4a3b      	ldr	r2, [pc, #236]	@ (8003614 <HAL_RCC_ClockConfig+0x264>)
 8003526:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800352a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800352c:	4b39      	ldr	r3, [pc, #228]	@ (8003614 <HAL_RCC_ClockConfig+0x264>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	4936      	ldr	r1, [pc, #216]	@ (8003614 <HAL_RCC_ClockConfig+0x264>)
 800353a:	4313      	orrs	r3, r2
 800353c:	608b      	str	r3, [r1, #8]
 800353e:	e008      	b.n	8003552 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	2b80      	cmp	r3, #128	@ 0x80
 8003544:	d105      	bne.n	8003552 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003546:	4b33      	ldr	r3, [pc, #204]	@ (8003614 <HAL_RCC_ClockConfig+0x264>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	4a32      	ldr	r2, [pc, #200]	@ (8003614 <HAL_RCC_ClockConfig+0x264>)
 800354c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003550:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003552:	4b2f      	ldr	r3, [pc, #188]	@ (8003610 <HAL_RCC_ClockConfig+0x260>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 030f 	and.w	r3, r3, #15
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	429a      	cmp	r2, r3
 800355e:	d21d      	bcs.n	800359c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003560:	4b2b      	ldr	r3, [pc, #172]	@ (8003610 <HAL_RCC_ClockConfig+0x260>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f023 020f 	bic.w	r2, r3, #15
 8003568:	4929      	ldr	r1, [pc, #164]	@ (8003610 <HAL_RCC_ClockConfig+0x260>)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	4313      	orrs	r3, r2
 800356e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003570:	f7fe ff8e 	bl	8002490 <HAL_GetTick>
 8003574:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003576:	e00a      	b.n	800358e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003578:	f7fe ff8a 	bl	8002490 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003586:	4293      	cmp	r3, r2
 8003588:	d901      	bls.n	800358e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e03b      	b.n	8003606 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800358e:	4b20      	ldr	r3, [pc, #128]	@ (8003610 <HAL_RCC_ClockConfig+0x260>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 030f 	and.w	r3, r3, #15
 8003596:	683a      	ldr	r2, [r7, #0]
 8003598:	429a      	cmp	r2, r3
 800359a:	d1ed      	bne.n	8003578 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0304 	and.w	r3, r3, #4
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d008      	beq.n	80035ba <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035a8:	4b1a      	ldr	r3, [pc, #104]	@ (8003614 <HAL_RCC_ClockConfig+0x264>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	4917      	ldr	r1, [pc, #92]	@ (8003614 <HAL_RCC_ClockConfig+0x264>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0308 	and.w	r3, r3, #8
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d009      	beq.n	80035da <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035c6:	4b13      	ldr	r3, [pc, #76]	@ (8003614 <HAL_RCC_ClockConfig+0x264>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	490f      	ldr	r1, [pc, #60]	@ (8003614 <HAL_RCC_ClockConfig+0x264>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035da:	f000 f825 	bl	8003628 <HAL_RCC_GetSysClockFreq>
 80035de:	4602      	mov	r2, r0
 80035e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003614 <HAL_RCC_ClockConfig+0x264>)
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	091b      	lsrs	r3, r3, #4
 80035e6:	f003 030f 	and.w	r3, r3, #15
 80035ea:	490c      	ldr	r1, [pc, #48]	@ (800361c <HAL_RCC_ClockConfig+0x26c>)
 80035ec:	5ccb      	ldrb	r3, [r1, r3]
 80035ee:	f003 031f 	and.w	r3, r3, #31
 80035f2:	fa22 f303 	lsr.w	r3, r2, r3
 80035f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003620 <HAL_RCC_ClockConfig+0x270>)
 80035f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80035fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003624 <HAL_RCC_ClockConfig+0x274>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4618      	mov	r0, r3
 8003600:	f7fe fefa 	bl	80023f8 <HAL_InitTick>
 8003604:	4603      	mov	r3, r0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	40022000 	.word	0x40022000
 8003614:	40021000 	.word	0x40021000
 8003618:	04c4b400 	.word	0x04c4b400
 800361c:	080096dc 	.word	0x080096dc
 8003620:	20000004 	.word	0x20000004
 8003624:	20000008 	.word	0x20000008

08003628 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003628:	b480      	push	{r7}
 800362a:	b087      	sub	sp, #28
 800362c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800362e:	4b2c      	ldr	r3, [pc, #176]	@ (80036e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f003 030c 	and.w	r3, r3, #12
 8003636:	2b04      	cmp	r3, #4
 8003638:	d102      	bne.n	8003640 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800363a:	4b2a      	ldr	r3, [pc, #168]	@ (80036e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800363c:	613b      	str	r3, [r7, #16]
 800363e:	e047      	b.n	80036d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003640:	4b27      	ldr	r3, [pc, #156]	@ (80036e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f003 030c 	and.w	r3, r3, #12
 8003648:	2b08      	cmp	r3, #8
 800364a:	d102      	bne.n	8003652 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800364c:	4b26      	ldr	r3, [pc, #152]	@ (80036e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800364e:	613b      	str	r3, [r7, #16]
 8003650:	e03e      	b.n	80036d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003652:	4b23      	ldr	r3, [pc, #140]	@ (80036e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f003 030c 	and.w	r3, r3, #12
 800365a:	2b0c      	cmp	r3, #12
 800365c:	d136      	bne.n	80036cc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800365e:	4b20      	ldr	r3, [pc, #128]	@ (80036e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	f003 0303 	and.w	r3, r3, #3
 8003666:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003668:	4b1d      	ldr	r3, [pc, #116]	@ (80036e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	091b      	lsrs	r3, r3, #4
 800366e:	f003 030f 	and.w	r3, r3, #15
 8003672:	3301      	adds	r3, #1
 8003674:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2b03      	cmp	r3, #3
 800367a:	d10c      	bne.n	8003696 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800367c:	4a1a      	ldr	r2, [pc, #104]	@ (80036e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	fbb2 f3f3 	udiv	r3, r2, r3
 8003684:	4a16      	ldr	r2, [pc, #88]	@ (80036e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003686:	68d2      	ldr	r2, [r2, #12]
 8003688:	0a12      	lsrs	r2, r2, #8
 800368a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800368e:	fb02 f303 	mul.w	r3, r2, r3
 8003692:	617b      	str	r3, [r7, #20]
      break;
 8003694:	e00c      	b.n	80036b0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003696:	4a13      	ldr	r2, [pc, #76]	@ (80036e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	fbb2 f3f3 	udiv	r3, r2, r3
 800369e:	4a10      	ldr	r2, [pc, #64]	@ (80036e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036a0:	68d2      	ldr	r2, [r2, #12]
 80036a2:	0a12      	lsrs	r2, r2, #8
 80036a4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80036a8:	fb02 f303 	mul.w	r3, r2, r3
 80036ac:	617b      	str	r3, [r7, #20]
      break;
 80036ae:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036b0:	4b0b      	ldr	r3, [pc, #44]	@ (80036e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	0e5b      	lsrs	r3, r3, #25
 80036b6:	f003 0303 	and.w	r3, r3, #3
 80036ba:	3301      	adds	r3, #1
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80036c0:	697a      	ldr	r2, [r7, #20]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c8:	613b      	str	r3, [r7, #16]
 80036ca:	e001      	b.n	80036d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80036cc:	2300      	movs	r3, #0
 80036ce:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80036d0:	693b      	ldr	r3, [r7, #16]
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	371c      	adds	r7, #28
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	40021000 	.word	0x40021000
 80036e4:	00f42400 	.word	0x00f42400
 80036e8:	016e3600 	.word	0x016e3600

080036ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036ec:	b480      	push	{r7}
 80036ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036f0:	4b03      	ldr	r3, [pc, #12]	@ (8003700 <HAL_RCC_GetHCLKFreq+0x14>)
 80036f2:	681b      	ldr	r3, [r3, #0]
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	20000004 	.word	0x20000004

08003704 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003708:	f7ff fff0 	bl	80036ec <HAL_RCC_GetHCLKFreq>
 800370c:	4602      	mov	r2, r0
 800370e:	4b06      	ldr	r3, [pc, #24]	@ (8003728 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	0a1b      	lsrs	r3, r3, #8
 8003714:	f003 0307 	and.w	r3, r3, #7
 8003718:	4904      	ldr	r1, [pc, #16]	@ (800372c <HAL_RCC_GetPCLK1Freq+0x28>)
 800371a:	5ccb      	ldrb	r3, [r1, r3]
 800371c:	f003 031f 	and.w	r3, r3, #31
 8003720:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003724:	4618      	mov	r0, r3
 8003726:	bd80      	pop	{r7, pc}
 8003728:	40021000 	.word	0x40021000
 800372c:	080096ec 	.word	0x080096ec

08003730 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003734:	f7ff ffda 	bl	80036ec <HAL_RCC_GetHCLKFreq>
 8003738:	4602      	mov	r2, r0
 800373a:	4b06      	ldr	r3, [pc, #24]	@ (8003754 <HAL_RCC_GetPCLK2Freq+0x24>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	0adb      	lsrs	r3, r3, #11
 8003740:	f003 0307 	and.w	r3, r3, #7
 8003744:	4904      	ldr	r1, [pc, #16]	@ (8003758 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003746:	5ccb      	ldrb	r3, [r1, r3]
 8003748:	f003 031f 	and.w	r3, r3, #31
 800374c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003750:	4618      	mov	r0, r3
 8003752:	bd80      	pop	{r7, pc}
 8003754:	40021000 	.word	0x40021000
 8003758:	080096ec 	.word	0x080096ec

0800375c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800375c:	b480      	push	{r7}
 800375e:	b087      	sub	sp, #28
 8003760:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003762:	4b1e      	ldr	r3, [pc, #120]	@ (80037dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	f003 0303 	and.w	r3, r3, #3
 800376a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800376c:	4b1b      	ldr	r3, [pc, #108]	@ (80037dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	091b      	lsrs	r3, r3, #4
 8003772:	f003 030f 	and.w	r3, r3, #15
 8003776:	3301      	adds	r3, #1
 8003778:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	2b03      	cmp	r3, #3
 800377e:	d10c      	bne.n	800379a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003780:	4a17      	ldr	r2, [pc, #92]	@ (80037e0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	fbb2 f3f3 	udiv	r3, r2, r3
 8003788:	4a14      	ldr	r2, [pc, #80]	@ (80037dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800378a:	68d2      	ldr	r2, [r2, #12]
 800378c:	0a12      	lsrs	r2, r2, #8
 800378e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003792:	fb02 f303 	mul.w	r3, r2, r3
 8003796:	617b      	str	r3, [r7, #20]
    break;
 8003798:	e00c      	b.n	80037b4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800379a:	4a12      	ldr	r2, [pc, #72]	@ (80037e4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a2:	4a0e      	ldr	r2, [pc, #56]	@ (80037dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037a4:	68d2      	ldr	r2, [r2, #12]
 80037a6:	0a12      	lsrs	r2, r2, #8
 80037a8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80037ac:	fb02 f303 	mul.w	r3, r2, r3
 80037b0:	617b      	str	r3, [r7, #20]
    break;
 80037b2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037b4:	4b09      	ldr	r3, [pc, #36]	@ (80037dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	0e5b      	lsrs	r3, r3, #25
 80037ba:	f003 0303 	and.w	r3, r3, #3
 80037be:	3301      	adds	r3, #1
 80037c0:	005b      	lsls	r3, r3, #1
 80037c2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037cc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80037ce:	687b      	ldr	r3, [r7, #4]
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	371c      	adds	r7, #28
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	40021000 	.word	0x40021000
 80037e0:	016e3600 	.word	0x016e3600
 80037e4:	00f42400 	.word	0x00f42400

080037e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037f0:	2300      	movs	r3, #0
 80037f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037f4:	2300      	movs	r3, #0
 80037f6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 8098 	beq.w	8003936 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003806:	2300      	movs	r3, #0
 8003808:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800380a:	4b43      	ldr	r3, [pc, #268]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800380c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800380e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d10d      	bne.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003816:	4b40      	ldr	r3, [pc, #256]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800381a:	4a3f      	ldr	r2, [pc, #252]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800381c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003820:	6593      	str	r3, [r2, #88]	@ 0x58
 8003822:	4b3d      	ldr	r3, [pc, #244]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003826:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800382a:	60bb      	str	r3, [r7, #8]
 800382c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800382e:	2301      	movs	r3, #1
 8003830:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003832:	4b3a      	ldr	r3, [pc, #232]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a39      	ldr	r2, [pc, #228]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003838:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800383c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800383e:	f7fe fe27 	bl	8002490 <HAL_GetTick>
 8003842:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003844:	e009      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003846:	f7fe fe23 	bl	8002490 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	2b02      	cmp	r3, #2
 8003852:	d902      	bls.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	74fb      	strb	r3, [r7, #19]
        break;
 8003858:	e005      	b.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800385a:	4b30      	ldr	r3, [pc, #192]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003862:	2b00      	cmp	r3, #0
 8003864:	d0ef      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003866:	7cfb      	ldrb	r3, [r7, #19]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d159      	bne.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800386c:	4b2a      	ldr	r3, [pc, #168]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800386e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003872:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003876:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d01e      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	429a      	cmp	r2, r3
 8003886:	d019      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003888:	4b23      	ldr	r3, [pc, #140]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800388a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800388e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003892:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003894:	4b20      	ldr	r3, [pc, #128]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003896:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800389a:	4a1f      	ldr	r2, [pc, #124]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800389c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038a4:	4b1c      	ldr	r3, [pc, #112]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038aa:	4a1b      	ldr	r2, [pc, #108]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038b4:	4a18      	ldr	r2, [pc, #96]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d016      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c6:	f7fe fde3 	bl	8002490 <HAL_GetTick>
 80038ca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038cc:	e00b      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ce:	f7fe fddf 	bl	8002490 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038dc:	4293      	cmp	r3, r2
 80038de:	d902      	bls.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	74fb      	strb	r3, [r7, #19]
            break;
 80038e4:	e006      	b.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038e6:	4b0c      	ldr	r3, [pc, #48]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d0ec      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80038f4:	7cfb      	ldrb	r3, [r7, #19]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10b      	bne.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038fa:	4b07      	ldr	r3, [pc, #28]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003900:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003908:	4903      	ldr	r1, [pc, #12]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800390a:	4313      	orrs	r3, r2
 800390c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003910:	e008      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003912:	7cfb      	ldrb	r3, [r7, #19]
 8003914:	74bb      	strb	r3, [r7, #18]
 8003916:	e005      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003918:	40021000 	.word	0x40021000
 800391c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003920:	7cfb      	ldrb	r3, [r7, #19]
 8003922:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003924:	7c7b      	ldrb	r3, [r7, #17]
 8003926:	2b01      	cmp	r3, #1
 8003928:	d105      	bne.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800392a:	4ba7      	ldr	r3, [pc, #668]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800392c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800392e:	4aa6      	ldr	r2, [pc, #664]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003930:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003934:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00a      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003942:	4ba1      	ldr	r3, [pc, #644]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003944:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003948:	f023 0203 	bic.w	r2, r3, #3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	499d      	ldr	r1, [pc, #628]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003952:	4313      	orrs	r3, r2
 8003954:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00a      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003964:	4b98      	ldr	r3, [pc, #608]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800396a:	f023 020c 	bic.w	r2, r3, #12
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	4995      	ldr	r1, [pc, #596]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003974:	4313      	orrs	r3, r2
 8003976:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0304 	and.w	r3, r3, #4
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00a      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003986:	4b90      	ldr	r3, [pc, #576]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003988:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800398c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	498c      	ldr	r1, [pc, #560]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003996:	4313      	orrs	r3, r2
 8003998:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0308 	and.w	r3, r3, #8
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00a      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80039a8:	4b87      	ldr	r3, [pc, #540]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	4984      	ldr	r1, [pc, #528]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0310 	and.w	r3, r3, #16
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00a      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80039ca:	4b7f      	ldr	r3, [pc, #508]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	497b      	ldr	r1, [pc, #492]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0320 	and.w	r3, r3, #32
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00a      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039ec:	4b76      	ldr	r3, [pc, #472]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039f2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	4973      	ldr	r1, [pc, #460]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00a      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a0e:	4b6e      	ldr	r3, [pc, #440]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a14:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	69db      	ldr	r3, [r3, #28]
 8003a1c:	496a      	ldr	r1, [pc, #424]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00a      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a30:	4b65      	ldr	r3, [pc, #404]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a36:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	4962      	ldr	r1, [pc, #392]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00a      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a52:	4b5d      	ldr	r3, [pc, #372]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a58:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a60:	4959      	ldr	r1, [pc, #356]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00a      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a74:	4b54      	ldr	r3, [pc, #336]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a76:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a7a:	f023 0203 	bic.w	r2, r3, #3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a82:	4951      	ldr	r1, [pc, #324]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00a      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a96:	4b4c      	ldr	r3, [pc, #304]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a9c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa4:	4948      	ldr	r1, [pc, #288]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d015      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ab8:	4b43      	ldr	r3, [pc, #268]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003abe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac6:	4940      	ldr	r1, [pc, #256]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ad2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ad6:	d105      	bne.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ad8:	4b3b      	ldr	r3, [pc, #236]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	4a3a      	ldr	r2, [pc, #232]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ade:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ae2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d015      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003af0:	4b35      	ldr	r3, [pc, #212]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003af6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003afe:	4932      	ldr	r1, [pc, #200]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b0e:	d105      	bne.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b10:	4b2d      	ldr	r3, [pc, #180]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	4a2c      	ldr	r2, [pc, #176]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b1a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d015      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003b28:	4b27      	ldr	r3, [pc, #156]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b2e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b36:	4924      	ldr	r1, [pc, #144]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b42:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b46:	d105      	bne.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b48:	4b1f      	ldr	r3, [pc, #124]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	4a1e      	ldr	r2, [pc, #120]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b52:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d015      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b60:	4b19      	ldr	r3, [pc, #100]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b66:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b6e:	4916      	ldr	r1, [pc, #88]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b7e:	d105      	bne.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b80:	4b11      	ldr	r3, [pc, #68]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	4a10      	ldr	r2, [pc, #64]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b8a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d019      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b98:	4b0b      	ldr	r3, [pc, #44]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b9e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba6:	4908      	ldr	r1, [pc, #32]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003bb6:	d109      	bne.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bb8:	4b03      	ldr	r3, [pc, #12]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	4a02      	ldr	r2, [pc, #8]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003bc2:	60d3      	str	r3, [r2, #12]
 8003bc4:	e002      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003bc6:	bf00      	nop
 8003bc8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d015      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003bd8:	4b29      	ldr	r3, [pc, #164]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bde:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003be6:	4926      	ldr	r1, [pc, #152]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bf2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003bf6:	d105      	bne.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003bf8:	4b21      	ldr	r3, [pc, #132]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	4a20      	ldr	r2, [pc, #128]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bfe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c02:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d015      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003c10:	4b1b      	ldr	r3, [pc, #108]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c16:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c1e:	4918      	ldr	r1, [pc, #96]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c2e:	d105      	bne.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003c30:	4b13      	ldr	r3, [pc, #76]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	4a12      	ldr	r2, [pc, #72]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c3a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d015      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003c48:	4b0d      	ldr	r3, [pc, #52]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003c4e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c56:	490a      	ldr	r1, [pc, #40]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c66:	d105      	bne.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c68:	4b05      	ldr	r3, [pc, #20]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	4a04      	ldr	r2, [pc, #16]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c72:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003c74:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3718      	adds	r7, #24
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	40021000 	.word	0x40021000

08003c84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d101      	bne.n	8003c96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e09d      	b.n	8003dd2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d108      	bne.n	8003cb0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ca6:	d009      	beq.n	8003cbc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	61da      	str	r2, [r3, #28]
 8003cae:	e005      	b.n	8003cbc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d106      	bne.n	8003cdc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f7fe f844 	bl	8001d64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2202      	movs	r2, #2
 8003ce0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003cf2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003cfc:	d902      	bls.n	8003d04 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	60fb      	str	r3, [r7, #12]
 8003d02:	e002      	b.n	8003d0a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003d04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d08:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003d12:	d007      	beq.n	8003d24 <HAL_SPI_Init+0xa0>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003d1c:	d002      	beq.n	8003d24 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003d34:	431a      	orrs	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	695b      	ldr	r3, [r3, #20]
 8003d44:	f003 0301 	and.w	r3, r3, #1
 8003d48:	431a      	orrs	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d52:	431a      	orrs	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	69db      	ldr	r3, [r3, #28]
 8003d58:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d5c:	431a      	orrs	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d66:	ea42 0103 	orr.w	r1, r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d6e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	430a      	orrs	r2, r1
 8003d78:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	0c1b      	lsrs	r3, r3, #16
 8003d80:	f003 0204 	and.w	r2, r3, #4
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d88:	f003 0310 	and.w	r3, r3, #16
 8003d8c:	431a      	orrs	r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d92:	f003 0308 	and.w	r3, r3, #8
 8003d96:	431a      	orrs	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003da0:	ea42 0103 	orr.w	r1, r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	430a      	orrs	r2, r1
 8003db0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	69da      	ldr	r2, [r3, #28]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003dc0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3710      	adds	r7, #16
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b088      	sub	sp, #32
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	60f8      	str	r0, [r7, #12]
 8003de2:	60b9      	str	r1, [r7, #8]
 8003de4:	603b      	str	r3, [r7, #0]
 8003de6:	4613      	mov	r3, r2
 8003de8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003dea:	2300      	movs	r3, #0
 8003dec:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d101      	bne.n	8003dfc <HAL_SPI_Transmit+0x22>
 8003df8:	2302      	movs	r3, #2
 8003dfa:	e15f      	b.n	80040bc <HAL_SPI_Transmit+0x2e2>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e04:	f7fe fb44 	bl	8002490 <HAL_GetTick>
 8003e08:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003e0a:	88fb      	ldrh	r3, [r7, #6]
 8003e0c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d002      	beq.n	8003e20 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e1e:	e148      	b.n	80040b2 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d002      	beq.n	8003e2c <HAL_SPI_Transmit+0x52>
 8003e26:	88fb      	ldrh	r3, [r7, #6]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d102      	bne.n	8003e32 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e30:	e13f      	b.n	80040b2 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2203      	movs	r2, #3
 8003e36:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	88fa      	ldrh	r2, [r7, #6]
 8003e4a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	88fa      	ldrh	r2, [r7, #6]
 8003e50:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e7c:	d10f      	bne.n	8003e9e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e8c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e9c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ea8:	2b40      	cmp	r3, #64	@ 0x40
 8003eaa:	d007      	beq.n	8003ebc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003eba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003ec4:	d94f      	bls.n	8003f66 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d002      	beq.n	8003ed4 <HAL_SPI_Transmit+0xfa>
 8003ece:	8afb      	ldrh	r3, [r7, #22]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d142      	bne.n	8003f5a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ed8:	881a      	ldrh	r2, [r3, #0]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ee4:	1c9a      	adds	r2, r3, #2
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003ef8:	e02f      	b.n	8003f5a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f003 0302 	and.w	r3, r3, #2
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d112      	bne.n	8003f2e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f0c:	881a      	ldrh	r2, [r3, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f18:	1c9a      	adds	r2, r3, #2
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	3b01      	subs	r3, #1
 8003f26:	b29a      	uxth	r2, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003f2c:	e015      	b.n	8003f5a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f2e:	f7fe faaf 	bl	8002490 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	683a      	ldr	r2, [r7, #0]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d803      	bhi.n	8003f46 <HAL_SPI_Transmit+0x16c>
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f44:	d102      	bne.n	8003f4c <HAL_SPI_Transmit+0x172>
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d106      	bne.n	8003f5a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003f58:	e0ab      	b.n	80040b2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1ca      	bne.n	8003efa <HAL_SPI_Transmit+0x120>
 8003f64:	e080      	b.n	8004068 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d002      	beq.n	8003f74 <HAL_SPI_Transmit+0x19a>
 8003f6e:	8afb      	ldrh	r3, [r7, #22]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d174      	bne.n	800405e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d912      	bls.n	8003fa4 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f82:	881a      	ldrh	r2, [r3, #0]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f8e:	1c9a      	adds	r2, r3, #2
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	3b02      	subs	r3, #2
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003fa2:	e05c      	b.n	800405e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	330c      	adds	r3, #12
 8003fae:	7812      	ldrb	r2, [r2, #0]
 8003fb0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fb6:	1c5a      	adds	r2, r3, #1
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003fca:	e048      	b.n	800405e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d12b      	bne.n	8004032 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d912      	bls.n	800400a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fe8:	881a      	ldrh	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ff4:	1c9a      	adds	r2, r3, #2
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	3b02      	subs	r3, #2
 8004002:	b29a      	uxth	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004008:	e029      	b.n	800405e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	330c      	adds	r3, #12
 8004014:	7812      	ldrb	r2, [r2, #0]
 8004016:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800401c:	1c5a      	adds	r2, r3, #1
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004026:	b29b      	uxth	r3, r3
 8004028:	3b01      	subs	r3, #1
 800402a:	b29a      	uxth	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004030:	e015      	b.n	800405e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004032:	f7fe fa2d 	bl	8002490 <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	683a      	ldr	r2, [r7, #0]
 800403e:	429a      	cmp	r2, r3
 8004040:	d803      	bhi.n	800404a <HAL_SPI_Transmit+0x270>
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004048:	d102      	bne.n	8004050 <HAL_SPI_Transmit+0x276>
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d106      	bne.n	800405e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800405c:	e029      	b.n	80040b2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004062:	b29b      	uxth	r3, r3
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1b1      	bne.n	8003fcc <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004068:	69ba      	ldr	r2, [r7, #24]
 800406a:	6839      	ldr	r1, [r7, #0]
 800406c:	68f8      	ldr	r0, [r7, #12]
 800406e:	f000 fcf9 	bl	8004a64 <SPI_EndRxTxTransaction>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d002      	beq.n	800407e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2220      	movs	r2, #32
 800407c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10a      	bne.n	800409c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004086:	2300      	movs	r3, #0
 8004088:	613b      	str	r3, [r7, #16]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	613b      	str	r3, [r7, #16]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	613b      	str	r3, [r7, #16]
 800409a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d002      	beq.n	80040aa <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	77fb      	strb	r3, [r7, #31]
 80040a8:	e003      	b.n	80040b2 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80040ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3720      	adds	r7, #32
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b088      	sub	sp, #32
 80040c8:	af02      	add	r7, sp, #8
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	603b      	str	r3, [r7, #0]
 80040d0:	4613      	mov	r3, r2
 80040d2:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80040d4:	2300      	movs	r3, #0
 80040d6:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d002      	beq.n	80040ea <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80040e4:	2302      	movs	r3, #2
 80040e6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80040e8:	e11a      	b.n	8004320 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040f2:	d112      	bne.n	800411a <HAL_SPI_Receive+0x56>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d10e      	bne.n	800411a <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2204      	movs	r2, #4
 8004100:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004104:	88fa      	ldrh	r2, [r7, #6]
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	4613      	mov	r3, r2
 800410c:	68ba      	ldr	r2, [r7, #8]
 800410e:	68b9      	ldr	r1, [r7, #8]
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	f000 f90e 	bl	8004332 <HAL_SPI_TransmitReceive>
 8004116:	4603      	mov	r3, r0
 8004118:	e107      	b.n	800432a <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004120:	2b01      	cmp	r3, #1
 8004122:	d101      	bne.n	8004128 <HAL_SPI_Receive+0x64>
 8004124:	2302      	movs	r3, #2
 8004126:	e100      	b.n	800432a <HAL_SPI_Receive+0x266>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004130:	f7fe f9ae 	bl	8002490 <HAL_GetTick>
 8004134:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d002      	beq.n	8004142 <HAL_SPI_Receive+0x7e>
 800413c:	88fb      	ldrh	r3, [r7, #6]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d102      	bne.n	8004148 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004146:	e0eb      	b.n	8004320 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2204      	movs	r2, #4
 800414c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2200      	movs	r2, #0
 8004154:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	68ba      	ldr	r2, [r7, #8]
 800415a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	88fa      	ldrh	r2, [r7, #6]
 8004160:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	88fa      	ldrh	r2, [r7, #6]
 8004168:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004192:	d908      	bls.n	80041a6 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	685a      	ldr	r2, [r3, #4]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80041a2:	605a      	str	r2, [r3, #4]
 80041a4:	e007      	b.n	80041b6 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	685a      	ldr	r2, [r3, #4]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80041b4:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041be:	d10f      	bne.n	80041e0 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041ce:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80041de:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041ea:	2b40      	cmp	r3, #64	@ 0x40
 80041ec:	d007      	beq.n	80041fe <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80041fc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004206:	d86f      	bhi.n	80042e8 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004208:	e034      	b.n	8004274 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f003 0301 	and.w	r3, r3, #1
 8004214:	2b01      	cmp	r3, #1
 8004216:	d117      	bne.n	8004248 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f103 020c 	add.w	r2, r3, #12
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004224:	7812      	ldrb	r2, [r2, #0]
 8004226:	b2d2      	uxtb	r2, r2
 8004228:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422e:	1c5a      	adds	r2, r3, #1
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800423a:	b29b      	uxth	r3, r3
 800423c:	3b01      	subs	r3, #1
 800423e:	b29a      	uxth	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8004246:	e015      	b.n	8004274 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004248:	f7fe f922 	bl	8002490 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	683a      	ldr	r2, [r7, #0]
 8004254:	429a      	cmp	r2, r3
 8004256:	d803      	bhi.n	8004260 <HAL_SPI_Receive+0x19c>
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800425e:	d102      	bne.n	8004266 <HAL_SPI_Receive+0x1a2>
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d106      	bne.n	8004274 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004272:	e055      	b.n	8004320 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800427a:	b29b      	uxth	r3, r3
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1c4      	bne.n	800420a <HAL_SPI_Receive+0x146>
 8004280:	e038      	b.n	80042f4 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f003 0301 	and.w	r3, r3, #1
 800428c:	2b01      	cmp	r3, #1
 800428e:	d115      	bne.n	80042bc <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68da      	ldr	r2, [r3, #12]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800429a:	b292      	uxth	r2, r2
 800429c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a2:	1c9a      	adds	r2, r3, #2
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	3b01      	subs	r3, #1
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80042ba:	e015      	b.n	80042e8 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042bc:	f7fe f8e8 	bl	8002490 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	683a      	ldr	r2, [r7, #0]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d803      	bhi.n	80042d4 <HAL_SPI_Receive+0x210>
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d2:	d102      	bne.n	80042da <HAL_SPI_Receive+0x216>
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d106      	bne.n	80042e8 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80042e6:	e01b      	b.n	8004320 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d1c6      	bne.n	8004282 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	6839      	ldr	r1, [r7, #0]
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f000 fb5b 	bl	80049b4 <SPI_EndRxTransaction>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d002      	beq.n	800430a <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2220      	movs	r2, #32
 8004308:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800430e:	2b00      	cmp	r3, #0
 8004310:	d002      	beq.n	8004318 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	75fb      	strb	r3, [r7, #23]
 8004316:	e003      	b.n	8004320 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004328:	7dfb      	ldrb	r3, [r7, #23]
}
 800432a:	4618      	mov	r0, r3
 800432c:	3718      	adds	r7, #24
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004332:	b580      	push	{r7, lr}
 8004334:	b08a      	sub	sp, #40	@ 0x28
 8004336:	af00      	add	r7, sp, #0
 8004338:	60f8      	str	r0, [r7, #12]
 800433a:	60b9      	str	r1, [r7, #8]
 800433c:	607a      	str	r2, [r7, #4]
 800433e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004340:	2301      	movs	r3, #1
 8004342:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004344:	2300      	movs	r3, #0
 8004346:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004350:	2b01      	cmp	r3, #1
 8004352:	d101      	bne.n	8004358 <HAL_SPI_TransmitReceive+0x26>
 8004354:	2302      	movs	r3, #2
 8004356:	e20a      	b.n	800476e <HAL_SPI_TransmitReceive+0x43c>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004360:	f7fe f896 	bl	8002490 <HAL_GetTick>
 8004364:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800436c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004374:	887b      	ldrh	r3, [r7, #2]
 8004376:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004378:	887b      	ldrh	r3, [r7, #2]
 800437a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800437c:	7efb      	ldrb	r3, [r7, #27]
 800437e:	2b01      	cmp	r3, #1
 8004380:	d00e      	beq.n	80043a0 <HAL_SPI_TransmitReceive+0x6e>
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004388:	d106      	bne.n	8004398 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d102      	bne.n	8004398 <HAL_SPI_TransmitReceive+0x66>
 8004392:	7efb      	ldrb	r3, [r7, #27]
 8004394:	2b04      	cmp	r3, #4
 8004396:	d003      	beq.n	80043a0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004398:	2302      	movs	r3, #2
 800439a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800439e:	e1e0      	b.n	8004762 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d005      	beq.n	80043b2 <HAL_SPI_TransmitReceive+0x80>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d002      	beq.n	80043b2 <HAL_SPI_TransmitReceive+0x80>
 80043ac:	887b      	ldrh	r3, [r7, #2]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d103      	bne.n	80043ba <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80043b8:	e1d3      	b.n	8004762 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2b04      	cmp	r3, #4
 80043c4:	d003      	beq.n	80043ce <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2205      	movs	r2, #5
 80043ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	887a      	ldrh	r2, [r7, #2]
 80043de:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	887a      	ldrh	r2, [r7, #2]
 80043e6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	68ba      	ldr	r2, [r7, #8]
 80043ee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	887a      	ldrh	r2, [r7, #2]
 80043f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	887a      	ldrh	r2, [r7, #2]
 80043fa:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004410:	d802      	bhi.n	8004418 <HAL_SPI_TransmitReceive+0xe6>
 8004412:	8a3b      	ldrh	r3, [r7, #16]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d908      	bls.n	800442a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685a      	ldr	r2, [r3, #4]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004426:	605a      	str	r2, [r3, #4]
 8004428:	e007      	b.n	800443a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	685a      	ldr	r2, [r3, #4]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004438:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004444:	2b40      	cmp	r3, #64	@ 0x40
 8004446:	d007      	beq.n	8004458 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004456:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004460:	f240 8081 	bls.w	8004566 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d002      	beq.n	8004472 <HAL_SPI_TransmitReceive+0x140>
 800446c:	8a7b      	ldrh	r3, [r7, #18]
 800446e:	2b01      	cmp	r3, #1
 8004470:	d16d      	bne.n	800454e <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004476:	881a      	ldrh	r2, [r3, #0]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004482:	1c9a      	adds	r2, r3, #2
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800448c:	b29b      	uxth	r3, r3
 800448e:	3b01      	subs	r3, #1
 8004490:	b29a      	uxth	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004496:	e05a      	b.n	800454e <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d11b      	bne.n	80044de <HAL_SPI_TransmitReceive+0x1ac>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d016      	beq.n	80044de <HAL_SPI_TransmitReceive+0x1ac>
 80044b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d113      	bne.n	80044de <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ba:	881a      	ldrh	r2, [r3, #0]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044c6:	1c9a      	adds	r2, r3, #2
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	3b01      	subs	r3, #1
 80044d4:	b29a      	uxth	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80044da:	2300      	movs	r3, #0
 80044dc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f003 0301 	and.w	r3, r3, #1
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d11c      	bne.n	8004526 <HAL_SPI_TransmitReceive+0x1f4>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d016      	beq.n	8004526 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68da      	ldr	r2, [r3, #12]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004502:	b292      	uxth	r2, r2
 8004504:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800450a:	1c9a      	adds	r2, r3, #2
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004516:	b29b      	uxth	r3, r3
 8004518:	3b01      	subs	r3, #1
 800451a:	b29a      	uxth	r2, r3
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004522:	2301      	movs	r3, #1
 8004524:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004526:	f7fd ffb3 	bl	8002490 <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004532:	429a      	cmp	r2, r3
 8004534:	d80b      	bhi.n	800454e <HAL_SPI_TransmitReceive+0x21c>
 8004536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800453c:	d007      	beq.n	800454e <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800454c:	e109      	b.n	8004762 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004552:	b29b      	uxth	r3, r3
 8004554:	2b00      	cmp	r3, #0
 8004556:	d19f      	bne.n	8004498 <HAL_SPI_TransmitReceive+0x166>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800455e:	b29b      	uxth	r3, r3
 8004560:	2b00      	cmp	r3, #0
 8004562:	d199      	bne.n	8004498 <HAL_SPI_TransmitReceive+0x166>
 8004564:	e0e3      	b.n	800472e <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d003      	beq.n	8004576 <HAL_SPI_TransmitReceive+0x244>
 800456e:	8a7b      	ldrh	r3, [r7, #18]
 8004570:	2b01      	cmp	r3, #1
 8004572:	f040 80cf 	bne.w	8004714 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800457a:	b29b      	uxth	r3, r3
 800457c:	2b01      	cmp	r3, #1
 800457e:	d912      	bls.n	80045a6 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004584:	881a      	ldrh	r2, [r3, #0]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004590:	1c9a      	adds	r2, r3, #2
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800459a:	b29b      	uxth	r3, r3
 800459c:	3b02      	subs	r3, #2
 800459e:	b29a      	uxth	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80045a4:	e0b6      	b.n	8004714 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	330c      	adds	r3, #12
 80045b0:	7812      	ldrb	r2, [r2, #0]
 80045b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045b8:	1c5a      	adds	r2, r3, #1
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	3b01      	subs	r3, #1
 80045c6:	b29a      	uxth	r2, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045cc:	e0a2      	b.n	8004714 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f003 0302 	and.w	r3, r3, #2
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d134      	bne.n	8004646 <HAL_SPI_TransmitReceive+0x314>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d02f      	beq.n	8004646 <HAL_SPI_TransmitReceive+0x314>
 80045e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d12c      	bne.n	8004646 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d912      	bls.n	800461c <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045fa:	881a      	ldrh	r2, [r3, #0]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004606:	1c9a      	adds	r2, r3, #2
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004610:	b29b      	uxth	r3, r3
 8004612:	3b02      	subs	r3, #2
 8004614:	b29a      	uxth	r2, r3
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800461a:	e012      	b.n	8004642 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	330c      	adds	r3, #12
 8004626:	7812      	ldrb	r2, [r2, #0]
 8004628:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800462e:	1c5a      	adds	r2, r3, #1
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004638:	b29b      	uxth	r3, r3
 800463a:	3b01      	subs	r3, #1
 800463c:	b29a      	uxth	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004642:	2300      	movs	r3, #0
 8004644:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	2b01      	cmp	r3, #1
 8004652:	d148      	bne.n	80046e6 <HAL_SPI_TransmitReceive+0x3b4>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800465a:	b29b      	uxth	r3, r3
 800465c:	2b00      	cmp	r3, #0
 800465e:	d042      	beq.n	80046e6 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004666:	b29b      	uxth	r3, r3
 8004668:	2b01      	cmp	r3, #1
 800466a:	d923      	bls.n	80046b4 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68da      	ldr	r2, [r3, #12]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004676:	b292      	uxth	r2, r2
 8004678:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800467e:	1c9a      	adds	r2, r3, #2
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800468a:	b29b      	uxth	r3, r3
 800468c:	3b02      	subs	r3, #2
 800468e:	b29a      	uxth	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800469c:	b29b      	uxth	r3, r3
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d81f      	bhi.n	80046e2 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80046b0:	605a      	str	r2, [r3, #4]
 80046b2:	e016      	b.n	80046e2 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f103 020c 	add.w	r2, r3, #12
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c0:	7812      	ldrb	r2, [r2, #0]
 80046c2:	b2d2      	uxtb	r2, r2
 80046c4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ca:	1c5a      	adds	r2, r3, #1
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	3b01      	subs	r3, #1
 80046da:	b29a      	uxth	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80046e2:	2301      	movs	r3, #1
 80046e4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80046e6:	f7fd fed3 	bl	8002490 <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d803      	bhi.n	80046fe <HAL_SPI_TransmitReceive+0x3cc>
 80046f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046fc:	d102      	bne.n	8004704 <HAL_SPI_TransmitReceive+0x3d2>
 80046fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004700:	2b00      	cmp	r3, #0
 8004702:	d107      	bne.n	8004714 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8004712:	e026      	b.n	8004762 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004718:	b29b      	uxth	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	f47f af57 	bne.w	80045ce <HAL_SPI_TransmitReceive+0x29c>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004726:	b29b      	uxth	r3, r3
 8004728:	2b00      	cmp	r3, #0
 800472a:	f47f af50 	bne.w	80045ce <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800472e:	69fa      	ldr	r2, [r7, #28]
 8004730:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	f000 f996 	bl	8004a64 <SPI_EndRxTxTransaction>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d005      	beq.n	800474a <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2220      	movs	r2, #32
 8004748:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800474e:	2b00      	cmp	r3, #0
 8004750:	d003      	beq.n	800475a <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004758:	e003      	b.n	8004762 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800476a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800476e:	4618      	mov	r0, r3
 8004770:	3728      	adds	r7, #40	@ 0x28
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
	...

08004778 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b088      	sub	sp, #32
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	603b      	str	r3, [r7, #0]
 8004784:	4613      	mov	r3, r2
 8004786:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004788:	f7fd fe82 	bl	8002490 <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004790:	1a9b      	subs	r3, r3, r2
 8004792:	683a      	ldr	r2, [r7, #0]
 8004794:	4413      	add	r3, r2
 8004796:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004798:	f7fd fe7a 	bl	8002490 <HAL_GetTick>
 800479c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800479e:	4b39      	ldr	r3, [pc, #228]	@ (8004884 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	015b      	lsls	r3, r3, #5
 80047a4:	0d1b      	lsrs	r3, r3, #20
 80047a6:	69fa      	ldr	r2, [r7, #28]
 80047a8:	fb02 f303 	mul.w	r3, r2, r3
 80047ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047ae:	e054      	b.n	800485a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b6:	d050      	beq.n	800485a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80047b8:	f7fd fe6a 	bl	8002490 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	69fa      	ldr	r2, [r7, #28]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d902      	bls.n	80047ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d13d      	bne.n	800484a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	685a      	ldr	r2, [r3, #4]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80047dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80047e6:	d111      	bne.n	800480c <SPI_WaitFlagStateUntilTimeout+0x94>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047f0:	d004      	beq.n	80047fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047fa:	d107      	bne.n	800480c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800480a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004810:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004814:	d10f      	bne.n	8004836 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004824:	601a      	str	r2, [r3, #0]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004834:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e017      	b.n	800487a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d101      	bne.n	8004854 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004850:	2300      	movs	r3, #0
 8004852:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	3b01      	subs	r3, #1
 8004858:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	689a      	ldr	r2, [r3, #8]
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	4013      	ands	r3, r2
 8004864:	68ba      	ldr	r2, [r7, #8]
 8004866:	429a      	cmp	r2, r3
 8004868:	bf0c      	ite	eq
 800486a:	2301      	moveq	r3, #1
 800486c:	2300      	movne	r3, #0
 800486e:	b2db      	uxtb	r3, r3
 8004870:	461a      	mov	r2, r3
 8004872:	79fb      	ldrb	r3, [r7, #7]
 8004874:	429a      	cmp	r2, r3
 8004876:	d19b      	bne.n	80047b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3720      	adds	r7, #32
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	20000004 	.word	0x20000004

08004888 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b08a      	sub	sp, #40	@ 0x28
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
 8004894:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004896:	2300      	movs	r3, #0
 8004898:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800489a:	f7fd fdf9 	bl	8002490 <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a2:	1a9b      	subs	r3, r3, r2
 80048a4:	683a      	ldr	r2, [r7, #0]
 80048a6:	4413      	add	r3, r2
 80048a8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80048aa:	f7fd fdf1 	bl	8002490 <HAL_GetTick>
 80048ae:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	330c      	adds	r3, #12
 80048b6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80048b8:	4b3d      	ldr	r3, [pc, #244]	@ (80049b0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	4613      	mov	r3, r2
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	4413      	add	r3, r2
 80048c2:	00da      	lsls	r2, r3, #3
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	0d1b      	lsrs	r3, r3, #20
 80048c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048ca:	fb02 f303 	mul.w	r3, r2, r3
 80048ce:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80048d0:	e060      	b.n	8004994 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80048d8:	d107      	bne.n	80048ea <SPI_WaitFifoStateUntilTimeout+0x62>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d104      	bne.n	80048ea <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80048e8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f0:	d050      	beq.n	8004994 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80048f2:	f7fd fdcd 	bl	8002490 <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	6a3b      	ldr	r3, [r7, #32]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048fe:	429a      	cmp	r2, r3
 8004900:	d902      	bls.n	8004908 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004904:	2b00      	cmp	r3, #0
 8004906:	d13d      	bne.n	8004984 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	685a      	ldr	r2, [r3, #4]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004916:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004920:	d111      	bne.n	8004946 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800492a:	d004      	beq.n	8004936 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004934:	d107      	bne.n	8004946 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004944:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800494a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800494e:	d10f      	bne.n	8004970 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800495e:	601a      	str	r2, [r3, #0]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800496e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e010      	b.n	80049a6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d101      	bne.n	800498e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800498a:	2300      	movs	r3, #0
 800498c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	3b01      	subs	r3, #1
 8004992:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	689a      	ldr	r2, [r3, #8]
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	4013      	ands	r3, r2
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d196      	bne.n	80048d2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3728      	adds	r7, #40	@ 0x28
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	20000004 	.word	0x20000004

080049b4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b086      	sub	sp, #24
 80049b8:	af02      	add	r7, sp, #8
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80049c8:	d111      	bne.n	80049ee <SPI_EndRxTransaction+0x3a>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049d2:	d004      	beq.n	80049de <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049dc:	d107      	bne.n	80049ee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049ec:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	9300      	str	r3, [sp, #0]
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	2200      	movs	r2, #0
 80049f6:	2180      	movs	r1, #128	@ 0x80
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f7ff febd 	bl	8004778 <SPI_WaitFlagStateUntilTimeout>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d007      	beq.n	8004a14 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a08:	f043 0220 	orr.w	r2, r3, #32
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e023      	b.n	8004a5c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a1c:	d11d      	bne.n	8004a5a <SPI_EndRxTransaction+0xa6>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a26:	d004      	beq.n	8004a32 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a30:	d113      	bne.n	8004a5a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	9300      	str	r3, [sp, #0]
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004a3e:	68f8      	ldr	r0, [r7, #12]
 8004a40:	f7ff ff22 	bl	8004888 <SPI_WaitFifoStateUntilTimeout>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d007      	beq.n	8004a5a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a4e:	f043 0220 	orr.w	r2, r3, #32
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e000      	b.n	8004a5c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3710      	adds	r7, #16
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b086      	sub	sp, #24
 8004a68:	af02      	add	r7, sp, #8
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	9300      	str	r3, [sp, #0]
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	f7ff ff03 	bl	8004888 <SPI_WaitFifoStateUntilTimeout>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d007      	beq.n	8004a98 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a8c:	f043 0220 	orr.w	r2, r3, #32
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e027      	b.n	8004ae8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	9300      	str	r3, [sp, #0]
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	2180      	movs	r1, #128	@ 0x80
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f7ff fe68 	bl	8004778 <SPI_WaitFlagStateUntilTimeout>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d007      	beq.n	8004abe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ab2:	f043 0220 	orr.w	r2, r3, #32
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e014      	b.n	8004ae8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	9300      	str	r3, [sp, #0]
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f7ff fedc 	bl	8004888 <SPI_WaitFifoStateUntilTimeout>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d007      	beq.n	8004ae6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ada:	f043 0220 	orr.w	r2, r3, #32
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e000      	b.n	8004ae8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3710      	adds	r7, #16
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d101      	bne.n	8004b02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e049      	b.n	8004b96 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d106      	bne.n	8004b1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f7fd f986 	bl	8001e28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2202      	movs	r2, #2
 8004b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	3304      	adds	r3, #4
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	4610      	mov	r0, r2
 8004b30:	f000 fe88 	bl	8005844 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3708      	adds	r7, #8
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}

08004b9e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b9e:	b580      	push	{r7, lr}
 8004ba0:	b082      	sub	sp, #8
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d101      	bne.n	8004bb0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e049      	b.n	8004c44 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d106      	bne.n	8004bca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 f841 	bl	8004c4c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2202      	movs	r2, #2
 8004bce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	3304      	adds	r3, #4
 8004bda:	4619      	mov	r1, r3
 8004bdc:	4610      	mov	r0, r2
 8004bde:	f000 fe31 	bl	8005844 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2201      	movs	r2, #1
 8004c26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2201      	movs	r2, #1
 8004c36:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3708      	adds	r7, #8
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004c54:	bf00      	nop
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d109      	bne.n	8004c84 <HAL_TIM_PWM_Start+0x24>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	bf14      	ite	ne
 8004c7c:	2301      	movne	r3, #1
 8004c7e:	2300      	moveq	r3, #0
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	e03c      	b.n	8004cfe <HAL_TIM_PWM_Start+0x9e>
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	2b04      	cmp	r3, #4
 8004c88:	d109      	bne.n	8004c9e <HAL_TIM_PWM_Start+0x3e>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	bf14      	ite	ne
 8004c96:	2301      	movne	r3, #1
 8004c98:	2300      	moveq	r3, #0
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	e02f      	b.n	8004cfe <HAL_TIM_PWM_Start+0x9e>
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	2b08      	cmp	r3, #8
 8004ca2:	d109      	bne.n	8004cb8 <HAL_TIM_PWM_Start+0x58>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	bf14      	ite	ne
 8004cb0:	2301      	movne	r3, #1
 8004cb2:	2300      	moveq	r3, #0
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	e022      	b.n	8004cfe <HAL_TIM_PWM_Start+0x9e>
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	2b0c      	cmp	r3, #12
 8004cbc:	d109      	bne.n	8004cd2 <HAL_TIM_PWM_Start+0x72>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	bf14      	ite	ne
 8004cca:	2301      	movne	r3, #1
 8004ccc:	2300      	moveq	r3, #0
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	e015      	b.n	8004cfe <HAL_TIM_PWM_Start+0x9e>
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	2b10      	cmp	r3, #16
 8004cd6:	d109      	bne.n	8004cec <HAL_TIM_PWM_Start+0x8c>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	bf14      	ite	ne
 8004ce4:	2301      	movne	r3, #1
 8004ce6:	2300      	moveq	r3, #0
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	e008      	b.n	8004cfe <HAL_TIM_PWM_Start+0x9e>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	bf14      	ite	ne
 8004cf8:	2301      	movne	r3, #1
 8004cfa:	2300      	moveq	r3, #0
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d001      	beq.n	8004d06 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e0a6      	b.n	8004e54 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d104      	bne.n	8004d16 <HAL_TIM_PWM_Start+0xb6>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2202      	movs	r2, #2
 8004d10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d14:	e023      	b.n	8004d5e <HAL_TIM_PWM_Start+0xfe>
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	2b04      	cmp	r3, #4
 8004d1a:	d104      	bne.n	8004d26 <HAL_TIM_PWM_Start+0xc6>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2202      	movs	r2, #2
 8004d20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d24:	e01b      	b.n	8004d5e <HAL_TIM_PWM_Start+0xfe>
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	2b08      	cmp	r3, #8
 8004d2a:	d104      	bne.n	8004d36 <HAL_TIM_PWM_Start+0xd6>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2202      	movs	r2, #2
 8004d30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d34:	e013      	b.n	8004d5e <HAL_TIM_PWM_Start+0xfe>
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	2b0c      	cmp	r3, #12
 8004d3a:	d104      	bne.n	8004d46 <HAL_TIM_PWM_Start+0xe6>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2202      	movs	r2, #2
 8004d40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d44:	e00b      	b.n	8004d5e <HAL_TIM_PWM_Start+0xfe>
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	2b10      	cmp	r3, #16
 8004d4a:	d104      	bne.n	8004d56 <HAL_TIM_PWM_Start+0xf6>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2202      	movs	r2, #2
 8004d50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d54:	e003      	b.n	8004d5e <HAL_TIM_PWM_Start+0xfe>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2202      	movs	r2, #2
 8004d5a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2201      	movs	r2, #1
 8004d64:	6839      	ldr	r1, [r7, #0]
 8004d66:	4618      	mov	r0, r3
 8004d68:	f001 f9e6 	bl	8006138 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a3a      	ldr	r2, [pc, #232]	@ (8004e5c <HAL_TIM_PWM_Start+0x1fc>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d018      	beq.n	8004da8 <HAL_TIM_PWM_Start+0x148>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a39      	ldr	r2, [pc, #228]	@ (8004e60 <HAL_TIM_PWM_Start+0x200>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d013      	beq.n	8004da8 <HAL_TIM_PWM_Start+0x148>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a37      	ldr	r2, [pc, #220]	@ (8004e64 <HAL_TIM_PWM_Start+0x204>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d00e      	beq.n	8004da8 <HAL_TIM_PWM_Start+0x148>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a36      	ldr	r2, [pc, #216]	@ (8004e68 <HAL_TIM_PWM_Start+0x208>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d009      	beq.n	8004da8 <HAL_TIM_PWM_Start+0x148>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a34      	ldr	r2, [pc, #208]	@ (8004e6c <HAL_TIM_PWM_Start+0x20c>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d004      	beq.n	8004da8 <HAL_TIM_PWM_Start+0x148>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a33      	ldr	r2, [pc, #204]	@ (8004e70 <HAL_TIM_PWM_Start+0x210>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d101      	bne.n	8004dac <HAL_TIM_PWM_Start+0x14c>
 8004da8:	2301      	movs	r3, #1
 8004daa:	e000      	b.n	8004dae <HAL_TIM_PWM_Start+0x14e>
 8004dac:	2300      	movs	r3, #0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d007      	beq.n	8004dc2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004dc0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a25      	ldr	r2, [pc, #148]	@ (8004e5c <HAL_TIM_PWM_Start+0x1fc>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d022      	beq.n	8004e12 <HAL_TIM_PWM_Start+0x1b2>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dd4:	d01d      	beq.n	8004e12 <HAL_TIM_PWM_Start+0x1b2>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a26      	ldr	r2, [pc, #152]	@ (8004e74 <HAL_TIM_PWM_Start+0x214>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d018      	beq.n	8004e12 <HAL_TIM_PWM_Start+0x1b2>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a24      	ldr	r2, [pc, #144]	@ (8004e78 <HAL_TIM_PWM_Start+0x218>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d013      	beq.n	8004e12 <HAL_TIM_PWM_Start+0x1b2>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a23      	ldr	r2, [pc, #140]	@ (8004e7c <HAL_TIM_PWM_Start+0x21c>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d00e      	beq.n	8004e12 <HAL_TIM_PWM_Start+0x1b2>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a19      	ldr	r2, [pc, #100]	@ (8004e60 <HAL_TIM_PWM_Start+0x200>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d009      	beq.n	8004e12 <HAL_TIM_PWM_Start+0x1b2>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a18      	ldr	r2, [pc, #96]	@ (8004e64 <HAL_TIM_PWM_Start+0x204>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d004      	beq.n	8004e12 <HAL_TIM_PWM_Start+0x1b2>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a18      	ldr	r2, [pc, #96]	@ (8004e70 <HAL_TIM_PWM_Start+0x210>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d115      	bne.n	8004e3e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	689a      	ldr	r2, [r3, #8]
 8004e18:	4b19      	ldr	r3, [pc, #100]	@ (8004e80 <HAL_TIM_PWM_Start+0x220>)
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2b06      	cmp	r3, #6
 8004e22:	d015      	beq.n	8004e50 <HAL_TIM_PWM_Start+0x1f0>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e2a:	d011      	beq.n	8004e50 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f042 0201 	orr.w	r2, r2, #1
 8004e3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e3c:	e008      	b.n	8004e50 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f042 0201 	orr.w	r2, r2, #1
 8004e4c:	601a      	str	r2, [r3, #0]
 8004e4e:	e000      	b.n	8004e52 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e50:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e52:	2300      	movs	r3, #0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3710      	adds	r7, #16
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	40012c00 	.word	0x40012c00
 8004e60:	40013400 	.word	0x40013400
 8004e64:	40014000 	.word	0x40014000
 8004e68:	40014400 	.word	0x40014400
 8004e6c:	40014800 	.word	0x40014800
 8004e70:	40015000 	.word	0x40015000
 8004e74:	40000400 	.word	0x40000400
 8004e78:	40000800 	.word	0x40000800
 8004e7c:	40000c00 	.word	0x40000c00
 8004e80:	00010007 	.word	0x00010007

08004e84 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d101      	bne.n	8004e98 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e097      	b.n	8004fc8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d106      	bne.n	8004eb2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f7fc ffdb 	bl	8001e68 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2202      	movs	r2, #2
 8004eb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	6812      	ldr	r2, [r2, #0]
 8004ec4:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8004ec8:	f023 0307 	bic.w	r3, r3, #7
 8004ecc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	3304      	adds	r3, #4
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	4610      	mov	r0, r2
 8004eda:	f000 fcb3 	bl	8005844 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	6a1b      	ldr	r3, [r3, #32]
 8004ef4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f06:	f023 0303 	bic.w	r3, r3, #3
 8004f0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	689a      	ldr	r2, [r3, #8]
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	021b      	lsls	r3, r3, #8
 8004f16:	4313      	orrs	r3, r2
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004f24:	f023 030c 	bic.w	r3, r3, #12
 8004f28:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004f30:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	68da      	ldr	r2, [r3, #12]
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	69db      	ldr	r3, [r3, #28]
 8004f3e:	021b      	lsls	r3, r3, #8
 8004f40:	4313      	orrs	r3, r2
 8004f42:	693a      	ldr	r2, [r7, #16]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	011a      	lsls	r2, r3, #4
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	6a1b      	ldr	r3, [r3, #32]
 8004f52:	031b      	lsls	r3, r3, #12
 8004f54:	4313      	orrs	r3, r2
 8004f56:	693a      	ldr	r2, [r7, #16]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004f62:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004f6a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	685a      	ldr	r2, [r3, #4]
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	695b      	ldr	r3, [r3, #20]
 8004f74:	011b      	lsls	r3, r3, #4
 8004f76:	4313      	orrs	r3, r2
 8004f78:	68fa      	ldr	r2, [r7, #12]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3718      	adds	r7, #24
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004fe0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004fe8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004ff0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ff8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d110      	bne.n	8005022 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005000:	7bfb      	ldrb	r3, [r7, #15]
 8005002:	2b01      	cmp	r3, #1
 8005004:	d102      	bne.n	800500c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005006:	7b7b      	ldrb	r3, [r7, #13]
 8005008:	2b01      	cmp	r3, #1
 800500a:	d001      	beq.n	8005010 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e069      	b.n	80050e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2202      	movs	r2, #2
 8005014:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2202      	movs	r2, #2
 800501c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005020:	e031      	b.n	8005086 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	2b04      	cmp	r3, #4
 8005026:	d110      	bne.n	800504a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005028:	7bbb      	ldrb	r3, [r7, #14]
 800502a:	2b01      	cmp	r3, #1
 800502c:	d102      	bne.n	8005034 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800502e:	7b3b      	ldrb	r3, [r7, #12]
 8005030:	2b01      	cmp	r3, #1
 8005032:	d001      	beq.n	8005038 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e055      	b.n	80050e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2202      	movs	r2, #2
 800503c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2202      	movs	r2, #2
 8005044:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005048:	e01d      	b.n	8005086 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800504a:	7bfb      	ldrb	r3, [r7, #15]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d108      	bne.n	8005062 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005050:	7bbb      	ldrb	r3, [r7, #14]
 8005052:	2b01      	cmp	r3, #1
 8005054:	d105      	bne.n	8005062 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005056:	7b7b      	ldrb	r3, [r7, #13]
 8005058:	2b01      	cmp	r3, #1
 800505a:	d102      	bne.n	8005062 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800505c:	7b3b      	ldrb	r3, [r7, #12]
 800505e:	2b01      	cmp	r3, #1
 8005060:	d001      	beq.n	8005066 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e03e      	b.n	80050e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2202      	movs	r2, #2
 800506a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2202      	movs	r2, #2
 8005072:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2202      	movs	r2, #2
 800507a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2202      	movs	r2, #2
 8005082:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d003      	beq.n	8005094 <HAL_TIM_Encoder_Start+0xc4>
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	2b04      	cmp	r3, #4
 8005090:	d008      	beq.n	80050a4 <HAL_TIM_Encoder_Start+0xd4>
 8005092:	e00f      	b.n	80050b4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2201      	movs	r2, #1
 800509a:	2100      	movs	r1, #0
 800509c:	4618      	mov	r0, r3
 800509e:	f001 f84b 	bl	8006138 <TIM_CCxChannelCmd>
      break;
 80050a2:	e016      	b.n	80050d2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2201      	movs	r2, #1
 80050aa:	2104      	movs	r1, #4
 80050ac:	4618      	mov	r0, r3
 80050ae:	f001 f843 	bl	8006138 <TIM_CCxChannelCmd>
      break;
 80050b2:	e00e      	b.n	80050d2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	2201      	movs	r2, #1
 80050ba:	2100      	movs	r1, #0
 80050bc:	4618      	mov	r0, r3
 80050be:	f001 f83b 	bl	8006138 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2201      	movs	r2, #1
 80050c8:	2104      	movs	r1, #4
 80050ca:	4618      	mov	r0, r3
 80050cc:	f001 f834 	bl	8006138 <TIM_CCxChannelCmd>
      break;
 80050d0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f042 0201 	orr.w	r2, r2, #1
 80050e0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80050e2:	2300      	movs	r3, #0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3710      	adds	r7, #16
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	f003 0302 	and.w	r3, r3, #2
 800510a:	2b00      	cmp	r3, #0
 800510c:	d020      	beq.n	8005150 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f003 0302 	and.w	r3, r3, #2
 8005114:	2b00      	cmp	r3, #0
 8005116:	d01b      	beq.n	8005150 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f06f 0202 	mvn.w	r2, #2
 8005120:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2201      	movs	r2, #1
 8005126:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	f003 0303 	and.w	r3, r3, #3
 8005132:	2b00      	cmp	r3, #0
 8005134:	d003      	beq.n	800513e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 fb66 	bl	8005808 <HAL_TIM_IC_CaptureCallback>
 800513c:	e005      	b.n	800514a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 fb58 	bl	80057f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 fb69 	bl	800581c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	f003 0304 	and.w	r3, r3, #4
 8005156:	2b00      	cmp	r3, #0
 8005158:	d020      	beq.n	800519c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f003 0304 	and.w	r3, r3, #4
 8005160:	2b00      	cmp	r3, #0
 8005162:	d01b      	beq.n	800519c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f06f 0204 	mvn.w	r2, #4
 800516c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2202      	movs	r2, #2
 8005172:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800517e:	2b00      	cmp	r3, #0
 8005180:	d003      	beq.n	800518a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 fb40 	bl	8005808 <HAL_TIM_IC_CaptureCallback>
 8005188:	e005      	b.n	8005196 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 fb32 	bl	80057f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 fb43 	bl	800581c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	f003 0308 	and.w	r3, r3, #8
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d020      	beq.n	80051e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f003 0308 	and.w	r3, r3, #8
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d01b      	beq.n	80051e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f06f 0208 	mvn.w	r2, #8
 80051b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2204      	movs	r2, #4
 80051be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	69db      	ldr	r3, [r3, #28]
 80051c6:	f003 0303 	and.w	r3, r3, #3
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d003      	beq.n	80051d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 fb1a 	bl	8005808 <HAL_TIM_IC_CaptureCallback>
 80051d4:	e005      	b.n	80051e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 fb0c 	bl	80057f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 fb1d 	bl	800581c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	f003 0310 	and.w	r3, r3, #16
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d020      	beq.n	8005234 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f003 0310 	and.w	r3, r3, #16
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d01b      	beq.n	8005234 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f06f 0210 	mvn.w	r2, #16
 8005204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2208      	movs	r2, #8
 800520a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	69db      	ldr	r3, [r3, #28]
 8005212:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005216:	2b00      	cmp	r3, #0
 8005218:	d003      	beq.n	8005222 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 faf4 	bl	8005808 <HAL_TIM_IC_CaptureCallback>
 8005220:	e005      	b.n	800522e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 fae6 	bl	80057f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 faf7 	bl	800581c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00c      	beq.n	8005258 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f003 0301 	and.w	r3, r3, #1
 8005244:	2b00      	cmp	r3, #0
 8005246:	d007      	beq.n	8005258 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f06f 0201 	mvn.w	r2, #1
 8005250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 fac4 	bl	80057e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800525e:	2b00      	cmp	r3, #0
 8005260:	d104      	bne.n	800526c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005268:	2b00      	cmp	r3, #0
 800526a:	d00c      	beq.n	8005286 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005272:	2b00      	cmp	r3, #0
 8005274:	d007      	beq.n	8005286 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800527e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f001 f8b3 	bl	80063ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00c      	beq.n	80052aa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005296:	2b00      	cmp	r3, #0
 8005298:	d007      	beq.n	80052aa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80052a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f001 f8ab 	bl	8006400 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00c      	beq.n	80052ce <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d007      	beq.n	80052ce <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80052c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 fab1 	bl	8005830 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	f003 0320 	and.w	r3, r3, #32
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00c      	beq.n	80052f2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f003 0320 	and.w	r3, r3, #32
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d007      	beq.n	80052f2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f06f 0220 	mvn.w	r2, #32
 80052ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f001 f873 	bl	80063d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d00c      	beq.n	8005316 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d007      	beq.n	8005316 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800530e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f001 f87f 	bl	8006414 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d00c      	beq.n	800533a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d007      	beq.n	800533a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005332:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f001 f877 	bl	8006428 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00c      	beq.n	800535e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d007      	beq.n	800535e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005356:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f001 f86f 	bl	800643c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d00c      	beq.n	8005382 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d007      	beq.n	8005382 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800537a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f001 f867 	bl	8006450 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005382:	bf00      	nop
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
	...

0800538c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b086      	sub	sp, #24
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005398:	2300      	movs	r3, #0
 800539a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d101      	bne.n	80053aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80053a6:	2302      	movs	r3, #2
 80053a8:	e0ff      	b.n	80055aa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2b14      	cmp	r3, #20
 80053b6:	f200 80f0 	bhi.w	800559a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80053ba:	a201      	add	r2, pc, #4	@ (adr r2, 80053c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80053bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c0:	08005415 	.word	0x08005415
 80053c4:	0800559b 	.word	0x0800559b
 80053c8:	0800559b 	.word	0x0800559b
 80053cc:	0800559b 	.word	0x0800559b
 80053d0:	08005455 	.word	0x08005455
 80053d4:	0800559b 	.word	0x0800559b
 80053d8:	0800559b 	.word	0x0800559b
 80053dc:	0800559b 	.word	0x0800559b
 80053e0:	08005497 	.word	0x08005497
 80053e4:	0800559b 	.word	0x0800559b
 80053e8:	0800559b 	.word	0x0800559b
 80053ec:	0800559b 	.word	0x0800559b
 80053f0:	080054d7 	.word	0x080054d7
 80053f4:	0800559b 	.word	0x0800559b
 80053f8:	0800559b 	.word	0x0800559b
 80053fc:	0800559b 	.word	0x0800559b
 8005400:	08005519 	.word	0x08005519
 8005404:	0800559b 	.word	0x0800559b
 8005408:	0800559b 	.word	0x0800559b
 800540c:	0800559b 	.word	0x0800559b
 8005410:	08005559 	.word	0x08005559
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68b9      	ldr	r1, [r7, #8]
 800541a:	4618      	mov	r0, r3
 800541c:	f000 fac6 	bl	80059ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	699a      	ldr	r2, [r3, #24]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f042 0208 	orr.w	r2, r2, #8
 800542e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	699a      	ldr	r2, [r3, #24]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f022 0204 	bic.w	r2, r2, #4
 800543e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	6999      	ldr	r1, [r3, #24]
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	691a      	ldr	r2, [r3, #16]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	430a      	orrs	r2, r1
 8005450:	619a      	str	r2, [r3, #24]
      break;
 8005452:	e0a5      	b.n	80055a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68b9      	ldr	r1, [r7, #8]
 800545a:	4618      	mov	r0, r3
 800545c:	f000 fb40 	bl	8005ae0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	699a      	ldr	r2, [r3, #24]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800546e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	699a      	ldr	r2, [r3, #24]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800547e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	6999      	ldr	r1, [r3, #24]
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	021a      	lsls	r2, r3, #8
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	430a      	orrs	r2, r1
 8005492:	619a      	str	r2, [r3, #24]
      break;
 8005494:	e084      	b.n	80055a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68b9      	ldr	r1, [r7, #8]
 800549c:	4618      	mov	r0, r3
 800549e:	f000 fbb3 	bl	8005c08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	69da      	ldr	r2, [r3, #28]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f042 0208 	orr.w	r2, r2, #8
 80054b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	69da      	ldr	r2, [r3, #28]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f022 0204 	bic.w	r2, r2, #4
 80054c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	69d9      	ldr	r1, [r3, #28]
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	691a      	ldr	r2, [r3, #16]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	430a      	orrs	r2, r1
 80054d2:	61da      	str	r2, [r3, #28]
      break;
 80054d4:	e064      	b.n	80055a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68b9      	ldr	r1, [r7, #8]
 80054dc:	4618      	mov	r0, r3
 80054de:	f000 fc25 	bl	8005d2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	69da      	ldr	r2, [r3, #28]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	69da      	ldr	r2, [r3, #28]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005500:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	69d9      	ldr	r1, [r3, #28]
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	021a      	lsls	r2, r3, #8
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	430a      	orrs	r2, r1
 8005514:	61da      	str	r2, [r3, #28]
      break;
 8005516:	e043      	b.n	80055a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68b9      	ldr	r1, [r7, #8]
 800551e:	4618      	mov	r0, r3
 8005520:	f000 fc98 	bl	8005e54 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f042 0208 	orr.w	r2, r2, #8
 8005532:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f022 0204 	bic.w	r2, r2, #4
 8005542:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	691a      	ldr	r2, [r3, #16]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	430a      	orrs	r2, r1
 8005554:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005556:	e023      	b.n	80055a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68b9      	ldr	r1, [r7, #8]
 800555e:	4618      	mov	r0, r3
 8005560:	f000 fce2 	bl	8005f28 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005572:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005582:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	021a      	lsls	r2, r3, #8
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	430a      	orrs	r2, r1
 8005596:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005598:	e002      	b.n	80055a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	75fb      	strb	r3, [r7, #23]
      break;
 800559e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80055a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3718      	adds	r7, #24
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop

080055b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055be:	2300      	movs	r3, #0
 80055c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d101      	bne.n	80055d0 <HAL_TIM_ConfigClockSource+0x1c>
 80055cc:	2302      	movs	r3, #2
 80055ce:	e0f6      	b.n	80057be <HAL_TIM_ConfigClockSource+0x20a>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2202      	movs	r2, #2
 80055dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80055ee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80055f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80055fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68ba      	ldr	r2, [r7, #8]
 8005602:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a6f      	ldr	r2, [pc, #444]	@ (80057c8 <HAL_TIM_ConfigClockSource+0x214>)
 800560a:	4293      	cmp	r3, r2
 800560c:	f000 80c1 	beq.w	8005792 <HAL_TIM_ConfigClockSource+0x1de>
 8005610:	4a6d      	ldr	r2, [pc, #436]	@ (80057c8 <HAL_TIM_ConfigClockSource+0x214>)
 8005612:	4293      	cmp	r3, r2
 8005614:	f200 80c6 	bhi.w	80057a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005618:	4a6c      	ldr	r2, [pc, #432]	@ (80057cc <HAL_TIM_ConfigClockSource+0x218>)
 800561a:	4293      	cmp	r3, r2
 800561c:	f000 80b9 	beq.w	8005792 <HAL_TIM_ConfigClockSource+0x1de>
 8005620:	4a6a      	ldr	r2, [pc, #424]	@ (80057cc <HAL_TIM_ConfigClockSource+0x218>)
 8005622:	4293      	cmp	r3, r2
 8005624:	f200 80be 	bhi.w	80057a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005628:	4a69      	ldr	r2, [pc, #420]	@ (80057d0 <HAL_TIM_ConfigClockSource+0x21c>)
 800562a:	4293      	cmp	r3, r2
 800562c:	f000 80b1 	beq.w	8005792 <HAL_TIM_ConfigClockSource+0x1de>
 8005630:	4a67      	ldr	r2, [pc, #412]	@ (80057d0 <HAL_TIM_ConfigClockSource+0x21c>)
 8005632:	4293      	cmp	r3, r2
 8005634:	f200 80b6 	bhi.w	80057a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005638:	4a66      	ldr	r2, [pc, #408]	@ (80057d4 <HAL_TIM_ConfigClockSource+0x220>)
 800563a:	4293      	cmp	r3, r2
 800563c:	f000 80a9 	beq.w	8005792 <HAL_TIM_ConfigClockSource+0x1de>
 8005640:	4a64      	ldr	r2, [pc, #400]	@ (80057d4 <HAL_TIM_ConfigClockSource+0x220>)
 8005642:	4293      	cmp	r3, r2
 8005644:	f200 80ae 	bhi.w	80057a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005648:	4a63      	ldr	r2, [pc, #396]	@ (80057d8 <HAL_TIM_ConfigClockSource+0x224>)
 800564a:	4293      	cmp	r3, r2
 800564c:	f000 80a1 	beq.w	8005792 <HAL_TIM_ConfigClockSource+0x1de>
 8005650:	4a61      	ldr	r2, [pc, #388]	@ (80057d8 <HAL_TIM_ConfigClockSource+0x224>)
 8005652:	4293      	cmp	r3, r2
 8005654:	f200 80a6 	bhi.w	80057a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005658:	4a60      	ldr	r2, [pc, #384]	@ (80057dc <HAL_TIM_ConfigClockSource+0x228>)
 800565a:	4293      	cmp	r3, r2
 800565c:	f000 8099 	beq.w	8005792 <HAL_TIM_ConfigClockSource+0x1de>
 8005660:	4a5e      	ldr	r2, [pc, #376]	@ (80057dc <HAL_TIM_ConfigClockSource+0x228>)
 8005662:	4293      	cmp	r3, r2
 8005664:	f200 809e 	bhi.w	80057a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005668:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800566c:	f000 8091 	beq.w	8005792 <HAL_TIM_ConfigClockSource+0x1de>
 8005670:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005674:	f200 8096 	bhi.w	80057a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005678:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800567c:	f000 8089 	beq.w	8005792 <HAL_TIM_ConfigClockSource+0x1de>
 8005680:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005684:	f200 808e 	bhi.w	80057a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005688:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800568c:	d03e      	beq.n	800570c <HAL_TIM_ConfigClockSource+0x158>
 800568e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005692:	f200 8087 	bhi.w	80057a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005696:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800569a:	f000 8086 	beq.w	80057aa <HAL_TIM_ConfigClockSource+0x1f6>
 800569e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056a2:	d87f      	bhi.n	80057a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80056a4:	2b70      	cmp	r3, #112	@ 0x70
 80056a6:	d01a      	beq.n	80056de <HAL_TIM_ConfigClockSource+0x12a>
 80056a8:	2b70      	cmp	r3, #112	@ 0x70
 80056aa:	d87b      	bhi.n	80057a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80056ac:	2b60      	cmp	r3, #96	@ 0x60
 80056ae:	d050      	beq.n	8005752 <HAL_TIM_ConfigClockSource+0x19e>
 80056b0:	2b60      	cmp	r3, #96	@ 0x60
 80056b2:	d877      	bhi.n	80057a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80056b4:	2b50      	cmp	r3, #80	@ 0x50
 80056b6:	d03c      	beq.n	8005732 <HAL_TIM_ConfigClockSource+0x17e>
 80056b8:	2b50      	cmp	r3, #80	@ 0x50
 80056ba:	d873      	bhi.n	80057a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80056bc:	2b40      	cmp	r3, #64	@ 0x40
 80056be:	d058      	beq.n	8005772 <HAL_TIM_ConfigClockSource+0x1be>
 80056c0:	2b40      	cmp	r3, #64	@ 0x40
 80056c2:	d86f      	bhi.n	80057a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80056c4:	2b30      	cmp	r3, #48	@ 0x30
 80056c6:	d064      	beq.n	8005792 <HAL_TIM_ConfigClockSource+0x1de>
 80056c8:	2b30      	cmp	r3, #48	@ 0x30
 80056ca:	d86b      	bhi.n	80057a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80056cc:	2b20      	cmp	r3, #32
 80056ce:	d060      	beq.n	8005792 <HAL_TIM_ConfigClockSource+0x1de>
 80056d0:	2b20      	cmp	r3, #32
 80056d2:	d867      	bhi.n	80057a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d05c      	beq.n	8005792 <HAL_TIM_ConfigClockSource+0x1de>
 80056d8:	2b10      	cmp	r3, #16
 80056da:	d05a      	beq.n	8005792 <HAL_TIM_ConfigClockSource+0x1de>
 80056dc:	e062      	b.n	80057a4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80056ee:	f000 fd03 	bl	80060f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005700:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68ba      	ldr	r2, [r7, #8]
 8005708:	609a      	str	r2, [r3, #8]
      break;
 800570a:	e04f      	b.n	80057ac <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800571c:	f000 fcec 	bl	80060f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	689a      	ldr	r2, [r3, #8]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800572e:	609a      	str	r2, [r3, #8]
      break;
 8005730:	e03c      	b.n	80057ac <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800573e:	461a      	mov	r2, r3
 8005740:	f000 fc5e 	bl	8006000 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2150      	movs	r1, #80	@ 0x50
 800574a:	4618      	mov	r0, r3
 800574c:	f000 fcb7 	bl	80060be <TIM_ITRx_SetConfig>
      break;
 8005750:	e02c      	b.n	80057ac <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800575e:	461a      	mov	r2, r3
 8005760:	f000 fc7d 	bl	800605e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2160      	movs	r1, #96	@ 0x60
 800576a:	4618      	mov	r0, r3
 800576c:	f000 fca7 	bl	80060be <TIM_ITRx_SetConfig>
      break;
 8005770:	e01c      	b.n	80057ac <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800577e:	461a      	mov	r2, r3
 8005780:	f000 fc3e 	bl	8006000 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2140      	movs	r1, #64	@ 0x40
 800578a:	4618      	mov	r0, r3
 800578c:	f000 fc97 	bl	80060be <TIM_ITRx_SetConfig>
      break;
 8005790:	e00c      	b.n	80057ac <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4619      	mov	r1, r3
 800579c:	4610      	mov	r0, r2
 800579e:	f000 fc8e 	bl	80060be <TIM_ITRx_SetConfig>
      break;
 80057a2:	e003      	b.n	80057ac <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	73fb      	strb	r3, [r7, #15]
      break;
 80057a8:	e000      	b.n	80057ac <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80057aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80057bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3710      	adds	r7, #16
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	00100070 	.word	0x00100070
 80057cc:	00100060 	.word	0x00100060
 80057d0:	00100050 	.word	0x00100050
 80057d4:	00100040 	.word	0x00100040
 80057d8:	00100030 	.word	0x00100030
 80057dc:	00100020 	.word	0x00100020

080057e0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80057e8:	bf00      	nop
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057fc:	bf00      	nop
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005824:	bf00      	nop
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005838:	bf00      	nop
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a4c      	ldr	r2, [pc, #304]	@ (8005988 <TIM_Base_SetConfig+0x144>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d017      	beq.n	800588c <TIM_Base_SetConfig+0x48>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005862:	d013      	beq.n	800588c <TIM_Base_SetConfig+0x48>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4a49      	ldr	r2, [pc, #292]	@ (800598c <TIM_Base_SetConfig+0x148>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d00f      	beq.n	800588c <TIM_Base_SetConfig+0x48>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a48      	ldr	r2, [pc, #288]	@ (8005990 <TIM_Base_SetConfig+0x14c>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d00b      	beq.n	800588c <TIM_Base_SetConfig+0x48>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4a47      	ldr	r2, [pc, #284]	@ (8005994 <TIM_Base_SetConfig+0x150>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d007      	beq.n	800588c <TIM_Base_SetConfig+0x48>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a46      	ldr	r2, [pc, #280]	@ (8005998 <TIM_Base_SetConfig+0x154>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d003      	beq.n	800588c <TIM_Base_SetConfig+0x48>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a45      	ldr	r2, [pc, #276]	@ (800599c <TIM_Base_SetConfig+0x158>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d108      	bne.n	800589e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005892:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	4313      	orrs	r3, r2
 800589c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a39      	ldr	r2, [pc, #228]	@ (8005988 <TIM_Base_SetConfig+0x144>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d023      	beq.n	80058ee <TIM_Base_SetConfig+0xaa>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058ac:	d01f      	beq.n	80058ee <TIM_Base_SetConfig+0xaa>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a36      	ldr	r2, [pc, #216]	@ (800598c <TIM_Base_SetConfig+0x148>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d01b      	beq.n	80058ee <TIM_Base_SetConfig+0xaa>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a35      	ldr	r2, [pc, #212]	@ (8005990 <TIM_Base_SetConfig+0x14c>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d017      	beq.n	80058ee <TIM_Base_SetConfig+0xaa>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a34      	ldr	r2, [pc, #208]	@ (8005994 <TIM_Base_SetConfig+0x150>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d013      	beq.n	80058ee <TIM_Base_SetConfig+0xaa>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a33      	ldr	r2, [pc, #204]	@ (8005998 <TIM_Base_SetConfig+0x154>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d00f      	beq.n	80058ee <TIM_Base_SetConfig+0xaa>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a33      	ldr	r2, [pc, #204]	@ (80059a0 <TIM_Base_SetConfig+0x15c>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d00b      	beq.n	80058ee <TIM_Base_SetConfig+0xaa>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a32      	ldr	r2, [pc, #200]	@ (80059a4 <TIM_Base_SetConfig+0x160>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d007      	beq.n	80058ee <TIM_Base_SetConfig+0xaa>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a31      	ldr	r2, [pc, #196]	@ (80059a8 <TIM_Base_SetConfig+0x164>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d003      	beq.n	80058ee <TIM_Base_SetConfig+0xaa>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a2c      	ldr	r2, [pc, #176]	@ (800599c <TIM_Base_SetConfig+0x158>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d108      	bne.n	8005900 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	68fa      	ldr	r2, [r7, #12]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	695b      	ldr	r3, [r3, #20]
 800590a:	4313      	orrs	r3, r2
 800590c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	689a      	ldr	r2, [r3, #8]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a18      	ldr	r2, [pc, #96]	@ (8005988 <TIM_Base_SetConfig+0x144>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d013      	beq.n	8005954 <TIM_Base_SetConfig+0x110>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a1a      	ldr	r2, [pc, #104]	@ (8005998 <TIM_Base_SetConfig+0x154>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d00f      	beq.n	8005954 <TIM_Base_SetConfig+0x110>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a1a      	ldr	r2, [pc, #104]	@ (80059a0 <TIM_Base_SetConfig+0x15c>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d00b      	beq.n	8005954 <TIM_Base_SetConfig+0x110>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a19      	ldr	r2, [pc, #100]	@ (80059a4 <TIM_Base_SetConfig+0x160>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d007      	beq.n	8005954 <TIM_Base_SetConfig+0x110>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a18      	ldr	r2, [pc, #96]	@ (80059a8 <TIM_Base_SetConfig+0x164>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d003      	beq.n	8005954 <TIM_Base_SetConfig+0x110>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a13      	ldr	r2, [pc, #76]	@ (800599c <TIM_Base_SetConfig+0x158>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d103      	bne.n	800595c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	691a      	ldr	r2, [r3, #16]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	f003 0301 	and.w	r3, r3, #1
 800596a:	2b01      	cmp	r3, #1
 800596c:	d105      	bne.n	800597a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	f023 0201 	bic.w	r2, r3, #1
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	611a      	str	r2, [r3, #16]
  }
}
 800597a:	bf00      	nop
 800597c:	3714      	adds	r7, #20
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr
 8005986:	bf00      	nop
 8005988:	40012c00 	.word	0x40012c00
 800598c:	40000400 	.word	0x40000400
 8005990:	40000800 	.word	0x40000800
 8005994:	40000c00 	.word	0x40000c00
 8005998:	40013400 	.word	0x40013400
 800599c:	40015000 	.word	0x40015000
 80059a0:	40014000 	.word	0x40014000
 80059a4:	40014400 	.word	0x40014400
 80059a8:	40014800 	.word	0x40014800

080059ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b087      	sub	sp, #28
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a1b      	ldr	r3, [r3, #32]
 80059ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6a1b      	ldr	r3, [r3, #32]
 80059c0:	f023 0201 	bic.w	r2, r3, #1
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f023 0303 	bic.w	r3, r3, #3
 80059e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	f023 0302 	bic.w	r3, r3, #2
 80059f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	697a      	ldr	r2, [r7, #20]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a30      	ldr	r2, [pc, #192]	@ (8005ac8 <TIM_OC1_SetConfig+0x11c>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d013      	beq.n	8005a34 <TIM_OC1_SetConfig+0x88>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a2f      	ldr	r2, [pc, #188]	@ (8005acc <TIM_OC1_SetConfig+0x120>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d00f      	beq.n	8005a34 <TIM_OC1_SetConfig+0x88>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a2e      	ldr	r2, [pc, #184]	@ (8005ad0 <TIM_OC1_SetConfig+0x124>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d00b      	beq.n	8005a34 <TIM_OC1_SetConfig+0x88>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a2d      	ldr	r2, [pc, #180]	@ (8005ad4 <TIM_OC1_SetConfig+0x128>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d007      	beq.n	8005a34 <TIM_OC1_SetConfig+0x88>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a2c      	ldr	r2, [pc, #176]	@ (8005ad8 <TIM_OC1_SetConfig+0x12c>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d003      	beq.n	8005a34 <TIM_OC1_SetConfig+0x88>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a2b      	ldr	r2, [pc, #172]	@ (8005adc <TIM_OC1_SetConfig+0x130>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d10c      	bne.n	8005a4e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	f023 0308 	bic.w	r3, r3, #8
 8005a3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	f023 0304 	bic.w	r3, r3, #4
 8005a4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a1d      	ldr	r2, [pc, #116]	@ (8005ac8 <TIM_OC1_SetConfig+0x11c>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d013      	beq.n	8005a7e <TIM_OC1_SetConfig+0xd2>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a1c      	ldr	r2, [pc, #112]	@ (8005acc <TIM_OC1_SetConfig+0x120>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d00f      	beq.n	8005a7e <TIM_OC1_SetConfig+0xd2>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a1b      	ldr	r2, [pc, #108]	@ (8005ad0 <TIM_OC1_SetConfig+0x124>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d00b      	beq.n	8005a7e <TIM_OC1_SetConfig+0xd2>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a1a      	ldr	r2, [pc, #104]	@ (8005ad4 <TIM_OC1_SetConfig+0x128>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d007      	beq.n	8005a7e <TIM_OC1_SetConfig+0xd2>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a19      	ldr	r2, [pc, #100]	@ (8005ad8 <TIM_OC1_SetConfig+0x12c>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d003      	beq.n	8005a7e <TIM_OC1_SetConfig+0xd2>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a18      	ldr	r2, [pc, #96]	@ (8005adc <TIM_OC1_SetConfig+0x130>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d111      	bne.n	8005aa2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005a8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	695b      	ldr	r3, [r3, #20]
 8005a92:	693a      	ldr	r2, [r7, #16]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	699b      	ldr	r3, [r3, #24]
 8005a9c:	693a      	ldr	r2, [r7, #16]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	693a      	ldr	r2, [r7, #16]
 8005aa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	685a      	ldr	r2, [r3, #4]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	697a      	ldr	r2, [r7, #20]
 8005aba:	621a      	str	r2, [r3, #32]
}
 8005abc:	bf00      	nop
 8005abe:	371c      	adds	r7, #28
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr
 8005ac8:	40012c00 	.word	0x40012c00
 8005acc:	40013400 	.word	0x40013400
 8005ad0:	40014000 	.word	0x40014000
 8005ad4:	40014400 	.word	0x40014400
 8005ad8:	40014800 	.word	0x40014800
 8005adc:	40015000 	.word	0x40015000

08005ae0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b087      	sub	sp, #28
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a1b      	ldr	r3, [r3, #32]
 8005aee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a1b      	ldr	r3, [r3, #32]
 8005af4:	f023 0210 	bic.w	r2, r3, #16
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	699b      	ldr	r3, [r3, #24]
 8005b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	021b      	lsls	r3, r3, #8
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	f023 0320 	bic.w	r3, r3, #32
 8005b2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	011b      	lsls	r3, r3, #4
 8005b36:	697a      	ldr	r2, [r7, #20]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4a2c      	ldr	r2, [pc, #176]	@ (8005bf0 <TIM_OC2_SetConfig+0x110>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d007      	beq.n	8005b54 <TIM_OC2_SetConfig+0x74>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a2b      	ldr	r2, [pc, #172]	@ (8005bf4 <TIM_OC2_SetConfig+0x114>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d003      	beq.n	8005b54 <TIM_OC2_SetConfig+0x74>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a2a      	ldr	r2, [pc, #168]	@ (8005bf8 <TIM_OC2_SetConfig+0x118>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d10d      	bne.n	8005b70 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	011b      	lsls	r3, r3, #4
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b6e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a1f      	ldr	r2, [pc, #124]	@ (8005bf0 <TIM_OC2_SetConfig+0x110>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d013      	beq.n	8005ba0 <TIM_OC2_SetConfig+0xc0>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a1e      	ldr	r2, [pc, #120]	@ (8005bf4 <TIM_OC2_SetConfig+0x114>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d00f      	beq.n	8005ba0 <TIM_OC2_SetConfig+0xc0>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a1e      	ldr	r2, [pc, #120]	@ (8005bfc <TIM_OC2_SetConfig+0x11c>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d00b      	beq.n	8005ba0 <TIM_OC2_SetConfig+0xc0>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a1d      	ldr	r2, [pc, #116]	@ (8005c00 <TIM_OC2_SetConfig+0x120>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d007      	beq.n	8005ba0 <TIM_OC2_SetConfig+0xc0>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a1c      	ldr	r2, [pc, #112]	@ (8005c04 <TIM_OC2_SetConfig+0x124>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d003      	beq.n	8005ba0 <TIM_OC2_SetConfig+0xc0>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a17      	ldr	r2, [pc, #92]	@ (8005bf8 <TIM_OC2_SetConfig+0x118>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d113      	bne.n	8005bc8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ba6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005bae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	695b      	ldr	r3, [r3, #20]
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	693a      	ldr	r2, [r7, #16]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	693a      	ldr	r2, [r7, #16]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	693a      	ldr	r2, [r7, #16]
 8005bcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	685a      	ldr	r2, [r3, #4]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	621a      	str	r2, [r3, #32]
}
 8005be2:	bf00      	nop
 8005be4:	371c      	adds	r7, #28
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	40012c00 	.word	0x40012c00
 8005bf4:	40013400 	.word	0x40013400
 8005bf8:	40015000 	.word	0x40015000
 8005bfc:	40014000 	.word	0x40014000
 8005c00:	40014400 	.word	0x40014400
 8005c04:	40014800 	.word	0x40014800

08005c08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b087      	sub	sp, #28
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a1b      	ldr	r3, [r3, #32]
 8005c16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6a1b      	ldr	r3, [r3, #32]
 8005c1c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	69db      	ldr	r3, [r3, #28]
 8005c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f023 0303 	bic.w	r3, r3, #3
 8005c42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	021b      	lsls	r3, r3, #8
 8005c5c:	697a      	ldr	r2, [r7, #20]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a2b      	ldr	r2, [pc, #172]	@ (8005d14 <TIM_OC3_SetConfig+0x10c>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d007      	beq.n	8005c7a <TIM_OC3_SetConfig+0x72>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a2a      	ldr	r2, [pc, #168]	@ (8005d18 <TIM_OC3_SetConfig+0x110>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d003      	beq.n	8005c7a <TIM_OC3_SetConfig+0x72>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a29      	ldr	r2, [pc, #164]	@ (8005d1c <TIM_OC3_SetConfig+0x114>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d10d      	bne.n	8005c96 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	021b      	lsls	r3, r3, #8
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a1e      	ldr	r2, [pc, #120]	@ (8005d14 <TIM_OC3_SetConfig+0x10c>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d013      	beq.n	8005cc6 <TIM_OC3_SetConfig+0xbe>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a1d      	ldr	r2, [pc, #116]	@ (8005d18 <TIM_OC3_SetConfig+0x110>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d00f      	beq.n	8005cc6 <TIM_OC3_SetConfig+0xbe>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a1d      	ldr	r2, [pc, #116]	@ (8005d20 <TIM_OC3_SetConfig+0x118>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d00b      	beq.n	8005cc6 <TIM_OC3_SetConfig+0xbe>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a1c      	ldr	r2, [pc, #112]	@ (8005d24 <TIM_OC3_SetConfig+0x11c>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d007      	beq.n	8005cc6 <TIM_OC3_SetConfig+0xbe>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a1b      	ldr	r2, [pc, #108]	@ (8005d28 <TIM_OC3_SetConfig+0x120>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d003      	beq.n	8005cc6 <TIM_OC3_SetConfig+0xbe>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a16      	ldr	r2, [pc, #88]	@ (8005d1c <TIM_OC3_SetConfig+0x114>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d113      	bne.n	8005cee <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ccc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005cd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	695b      	ldr	r3, [r3, #20]
 8005cda:	011b      	lsls	r3, r3, #4
 8005cdc:	693a      	ldr	r2, [r7, #16]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	699b      	ldr	r3, [r3, #24]
 8005ce6:	011b      	lsls	r3, r3, #4
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	685a      	ldr	r2, [r3, #4]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	697a      	ldr	r2, [r7, #20]
 8005d06:	621a      	str	r2, [r3, #32]
}
 8005d08:	bf00      	nop
 8005d0a:	371c      	adds	r7, #28
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr
 8005d14:	40012c00 	.word	0x40012c00
 8005d18:	40013400 	.word	0x40013400
 8005d1c:	40015000 	.word	0x40015000
 8005d20:	40014000 	.word	0x40014000
 8005d24:	40014400 	.word	0x40014400
 8005d28:	40014800 	.word	0x40014800

08005d2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b087      	sub	sp, #28
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a1b      	ldr	r3, [r3, #32]
 8005d3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a1b      	ldr	r3, [r3, #32]
 8005d40:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	69db      	ldr	r3, [r3, #28]
 8005d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	021b      	lsls	r3, r3, #8
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	031b      	lsls	r3, r3, #12
 8005d82:	697a      	ldr	r2, [r7, #20]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a2c      	ldr	r2, [pc, #176]	@ (8005e3c <TIM_OC4_SetConfig+0x110>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d007      	beq.n	8005da0 <TIM_OC4_SetConfig+0x74>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a2b      	ldr	r2, [pc, #172]	@ (8005e40 <TIM_OC4_SetConfig+0x114>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d003      	beq.n	8005da0 <TIM_OC4_SetConfig+0x74>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a2a      	ldr	r2, [pc, #168]	@ (8005e44 <TIM_OC4_SetConfig+0x118>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d10d      	bne.n	8005dbc <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005da6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	031b      	lsls	r3, r3, #12
 8005dae:	697a      	ldr	r2, [r7, #20]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005dba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a1f      	ldr	r2, [pc, #124]	@ (8005e3c <TIM_OC4_SetConfig+0x110>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d013      	beq.n	8005dec <TIM_OC4_SetConfig+0xc0>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a1e      	ldr	r2, [pc, #120]	@ (8005e40 <TIM_OC4_SetConfig+0x114>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d00f      	beq.n	8005dec <TIM_OC4_SetConfig+0xc0>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a1e      	ldr	r2, [pc, #120]	@ (8005e48 <TIM_OC4_SetConfig+0x11c>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d00b      	beq.n	8005dec <TIM_OC4_SetConfig+0xc0>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a1d      	ldr	r2, [pc, #116]	@ (8005e4c <TIM_OC4_SetConfig+0x120>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d007      	beq.n	8005dec <TIM_OC4_SetConfig+0xc0>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4a1c      	ldr	r2, [pc, #112]	@ (8005e50 <TIM_OC4_SetConfig+0x124>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d003      	beq.n	8005dec <TIM_OC4_SetConfig+0xc0>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a17      	ldr	r2, [pc, #92]	@ (8005e44 <TIM_OC4_SetConfig+0x118>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d113      	bne.n	8005e14 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005df2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005dfa:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	695b      	ldr	r3, [r3, #20]
 8005e00:	019b      	lsls	r3, r3, #6
 8005e02:	693a      	ldr	r2, [r7, #16]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	699b      	ldr	r3, [r3, #24]
 8005e0c:	019b      	lsls	r3, r3, #6
 8005e0e:	693a      	ldr	r2, [r7, #16]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	693a      	ldr	r2, [r7, #16]
 8005e18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	685a      	ldr	r2, [r3, #4]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	621a      	str	r2, [r3, #32]
}
 8005e2e:	bf00      	nop
 8005e30:	371c      	adds	r7, #28
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	40012c00 	.word	0x40012c00
 8005e40:	40013400 	.word	0x40013400
 8005e44:	40015000 	.word	0x40015000
 8005e48:	40014000 	.word	0x40014000
 8005e4c:	40014400 	.word	0x40014400
 8005e50:	40014800 	.word	0x40014800

08005e54 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b087      	sub	sp, #28
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a1b      	ldr	r3, [r3, #32]
 8005e62:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6a1b      	ldr	r3, [r3, #32]
 8005e68:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005e98:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	041b      	lsls	r3, r3, #16
 8005ea0:	693a      	ldr	r2, [r7, #16]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a19      	ldr	r2, [pc, #100]	@ (8005f10 <TIM_OC5_SetConfig+0xbc>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d013      	beq.n	8005ed6 <TIM_OC5_SetConfig+0x82>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a18      	ldr	r2, [pc, #96]	@ (8005f14 <TIM_OC5_SetConfig+0xc0>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d00f      	beq.n	8005ed6 <TIM_OC5_SetConfig+0x82>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a17      	ldr	r2, [pc, #92]	@ (8005f18 <TIM_OC5_SetConfig+0xc4>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d00b      	beq.n	8005ed6 <TIM_OC5_SetConfig+0x82>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a16      	ldr	r2, [pc, #88]	@ (8005f1c <TIM_OC5_SetConfig+0xc8>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d007      	beq.n	8005ed6 <TIM_OC5_SetConfig+0x82>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a15      	ldr	r2, [pc, #84]	@ (8005f20 <TIM_OC5_SetConfig+0xcc>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d003      	beq.n	8005ed6 <TIM_OC5_SetConfig+0x82>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a14      	ldr	r2, [pc, #80]	@ (8005f24 <TIM_OC5_SetConfig+0xd0>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d109      	bne.n	8005eea <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005edc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	695b      	ldr	r3, [r3, #20]
 8005ee2:	021b      	lsls	r3, r3, #8
 8005ee4:	697a      	ldr	r2, [r7, #20]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	697a      	ldr	r2, [r7, #20]
 8005eee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	685a      	ldr	r2, [r3, #4]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	693a      	ldr	r2, [r7, #16]
 8005f02:	621a      	str	r2, [r3, #32]
}
 8005f04:	bf00      	nop
 8005f06:	371c      	adds	r7, #28
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr
 8005f10:	40012c00 	.word	0x40012c00
 8005f14:	40013400 	.word	0x40013400
 8005f18:	40014000 	.word	0x40014000
 8005f1c:	40014400 	.word	0x40014400
 8005f20:	40014800 	.word	0x40014800
 8005f24:	40015000 	.word	0x40015000

08005f28 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b087      	sub	sp, #28
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a1b      	ldr	r3, [r3, #32]
 8005f36:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6a1b      	ldr	r3, [r3, #32]
 8005f3c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	021b      	lsls	r3, r3, #8
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005f6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	051b      	lsls	r3, r3, #20
 8005f76:	693a      	ldr	r2, [r7, #16]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4a1a      	ldr	r2, [pc, #104]	@ (8005fe8 <TIM_OC6_SetConfig+0xc0>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d013      	beq.n	8005fac <TIM_OC6_SetConfig+0x84>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	4a19      	ldr	r2, [pc, #100]	@ (8005fec <TIM_OC6_SetConfig+0xc4>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d00f      	beq.n	8005fac <TIM_OC6_SetConfig+0x84>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a18      	ldr	r2, [pc, #96]	@ (8005ff0 <TIM_OC6_SetConfig+0xc8>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d00b      	beq.n	8005fac <TIM_OC6_SetConfig+0x84>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a17      	ldr	r2, [pc, #92]	@ (8005ff4 <TIM_OC6_SetConfig+0xcc>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d007      	beq.n	8005fac <TIM_OC6_SetConfig+0x84>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4a16      	ldr	r2, [pc, #88]	@ (8005ff8 <TIM_OC6_SetConfig+0xd0>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d003      	beq.n	8005fac <TIM_OC6_SetConfig+0x84>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4a15      	ldr	r2, [pc, #84]	@ (8005ffc <TIM_OC6_SetConfig+0xd4>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d109      	bne.n	8005fc0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005fb2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	695b      	ldr	r3, [r3, #20]
 8005fb8:	029b      	lsls	r3, r3, #10
 8005fba:	697a      	ldr	r2, [r7, #20]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	697a      	ldr	r2, [r7, #20]
 8005fc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	68fa      	ldr	r2, [r7, #12]
 8005fca:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	685a      	ldr	r2, [r3, #4]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	693a      	ldr	r2, [r7, #16]
 8005fd8:	621a      	str	r2, [r3, #32]
}
 8005fda:	bf00      	nop
 8005fdc:	371c      	adds	r7, #28
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr
 8005fe6:	bf00      	nop
 8005fe8:	40012c00 	.word	0x40012c00
 8005fec:	40013400 	.word	0x40013400
 8005ff0:	40014000 	.word	0x40014000
 8005ff4:	40014400 	.word	0x40014400
 8005ff8:	40014800 	.word	0x40014800
 8005ffc:	40015000 	.word	0x40015000

08006000 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006000:	b480      	push	{r7}
 8006002:	b087      	sub	sp, #28
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6a1b      	ldr	r3, [r3, #32]
 8006010:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6a1b      	ldr	r3, [r3, #32]
 8006016:	f023 0201 	bic.w	r2, r3, #1
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	699b      	ldr	r3, [r3, #24]
 8006022:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800602a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	011b      	lsls	r3, r3, #4
 8006030:	693a      	ldr	r2, [r7, #16]
 8006032:	4313      	orrs	r3, r2
 8006034:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	f023 030a 	bic.w	r3, r3, #10
 800603c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800603e:	697a      	ldr	r2, [r7, #20]
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	4313      	orrs	r3, r2
 8006044:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	693a      	ldr	r2, [r7, #16]
 800604a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	697a      	ldr	r2, [r7, #20]
 8006050:	621a      	str	r2, [r3, #32]
}
 8006052:	bf00      	nop
 8006054:	371c      	adds	r7, #28
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr

0800605e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800605e:	b480      	push	{r7}
 8006060:	b087      	sub	sp, #28
 8006062:	af00      	add	r7, sp, #0
 8006064:	60f8      	str	r0, [r7, #12]
 8006066:	60b9      	str	r1, [r7, #8]
 8006068:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6a1b      	ldr	r3, [r3, #32]
 800606e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6a1b      	ldr	r3, [r3, #32]
 8006074:	f023 0210 	bic.w	r2, r3, #16
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	699b      	ldr	r3, [r3, #24]
 8006080:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006088:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	031b      	lsls	r3, r3, #12
 800608e:	693a      	ldr	r2, [r7, #16]
 8006090:	4313      	orrs	r3, r2
 8006092:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800609a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	011b      	lsls	r3, r3, #4
 80060a0:	697a      	ldr	r2, [r7, #20]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	693a      	ldr	r2, [r7, #16]
 80060aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	697a      	ldr	r2, [r7, #20]
 80060b0:	621a      	str	r2, [r3, #32]
}
 80060b2:	bf00      	nop
 80060b4:	371c      	adds	r7, #28
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr

080060be <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060be:	b480      	push	{r7}
 80060c0:	b085      	sub	sp, #20
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
 80060c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80060d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060da:	683a      	ldr	r2, [r7, #0]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	4313      	orrs	r3, r2
 80060e0:	f043 0307 	orr.w	r3, r3, #7
 80060e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	609a      	str	r2, [r3, #8]
}
 80060ec:	bf00      	nop
 80060ee:	3714      	adds	r7, #20
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b087      	sub	sp, #28
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
 8006104:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006112:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	021a      	lsls	r2, r3, #8
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	431a      	orrs	r2, r3
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	4313      	orrs	r3, r2
 8006120:	697a      	ldr	r2, [r7, #20]
 8006122:	4313      	orrs	r3, r2
 8006124:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	697a      	ldr	r2, [r7, #20]
 800612a:	609a      	str	r2, [r3, #8]
}
 800612c:	bf00      	nop
 800612e:	371c      	adds	r7, #28
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006138:	b480      	push	{r7}
 800613a:	b087      	sub	sp, #28
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	f003 031f 	and.w	r3, r3, #31
 800614a:	2201      	movs	r2, #1
 800614c:	fa02 f303 	lsl.w	r3, r2, r3
 8006150:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6a1a      	ldr	r2, [r3, #32]
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	43db      	mvns	r3, r3
 800615a:	401a      	ands	r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6a1a      	ldr	r2, [r3, #32]
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	f003 031f 	and.w	r3, r3, #31
 800616a:	6879      	ldr	r1, [r7, #4]
 800616c:	fa01 f303 	lsl.w	r3, r1, r3
 8006170:	431a      	orrs	r2, r3
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	621a      	str	r2, [r3, #32]
}
 8006176:	bf00      	nop
 8006178:	371c      	adds	r7, #28
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr
	...

08006184 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006184:	b480      	push	{r7}
 8006186:	b085      	sub	sp, #20
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006194:	2b01      	cmp	r3, #1
 8006196:	d101      	bne.n	800619c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006198:	2302      	movs	r3, #2
 800619a:	e074      	b.n	8006286 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2202      	movs	r2, #2
 80061a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a34      	ldr	r2, [pc, #208]	@ (8006294 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d009      	beq.n	80061da <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a33      	ldr	r2, [pc, #204]	@ (8006298 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d004      	beq.n	80061da <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a31      	ldr	r2, [pc, #196]	@ (800629c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d108      	bne.n	80061ec <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80061e0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80061f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	4313      	orrs	r3, r2
 8006200:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a21      	ldr	r2, [pc, #132]	@ (8006294 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d022      	beq.n	800625a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800621c:	d01d      	beq.n	800625a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a1f      	ldr	r2, [pc, #124]	@ (80062a0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d018      	beq.n	800625a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a1d      	ldr	r2, [pc, #116]	@ (80062a4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d013      	beq.n	800625a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a1c      	ldr	r2, [pc, #112]	@ (80062a8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d00e      	beq.n	800625a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a15      	ldr	r2, [pc, #84]	@ (8006298 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d009      	beq.n	800625a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a18      	ldr	r2, [pc, #96]	@ (80062ac <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d004      	beq.n	800625a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a11      	ldr	r2, [pc, #68]	@ (800629c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d10c      	bne.n	8006274 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006260:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	68ba      	ldr	r2, [r7, #8]
 8006268:	4313      	orrs	r3, r2
 800626a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68ba      	ldr	r2, [r7, #8]
 8006272:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3714      	adds	r7, #20
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop
 8006294:	40012c00 	.word	0x40012c00
 8006298:	40013400 	.word	0x40013400
 800629c:	40015000 	.word	0x40015000
 80062a0:	40000400 	.word	0x40000400
 80062a4:	40000800 	.word	0x40000800
 80062a8:	40000c00 	.word	0x40000c00
 80062ac:	40014000 	.word	0x40014000

080062b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b085      	sub	sp, #20
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80062ba:	2300      	movs	r3, #0
 80062bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d101      	bne.n	80062cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80062c8:	2302      	movs	r3, #2
 80062ca:	e078      	b.n	80063be <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	4313      	orrs	r3, r2
 80062e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4313      	orrs	r3, r2
 800630a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	4313      	orrs	r3, r2
 8006318:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	695b      	ldr	r3, [r3, #20]
 8006324:	4313      	orrs	r3, r2
 8006326:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006332:	4313      	orrs	r3, r2
 8006334:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	699b      	ldr	r3, [r3, #24]
 8006340:	041b      	lsls	r3, r3, #16
 8006342:	4313      	orrs	r3, r2
 8006344:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	69db      	ldr	r3, [r3, #28]
 8006350:	4313      	orrs	r3, r2
 8006352:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a1c      	ldr	r2, [pc, #112]	@ (80063cc <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d009      	beq.n	8006372 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a1b      	ldr	r2, [pc, #108]	@ (80063d0 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d004      	beq.n	8006372 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a19      	ldr	r2, [pc, #100]	@ (80063d4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d11c      	bne.n	80063ac <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800637c:	051b      	lsls	r3, r3, #20
 800637e:	4313      	orrs	r3, r2
 8006380:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	6a1b      	ldr	r3, [r3, #32]
 800638c:	4313      	orrs	r3, r2
 800638e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800639a:	4313      	orrs	r3, r2
 800639c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063a8:	4313      	orrs	r3, r2
 80063aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80063bc:	2300      	movs	r3, #0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3714      	adds	r7, #20
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr
 80063ca:	bf00      	nop
 80063cc:	40012c00 	.word	0x40012c00
 80063d0:	40013400 	.word	0x40013400
 80063d4:	40015000 	.word	0x40015000

080063d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063e0:	bf00      	nop
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063f4:	bf00      	nop
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006408:	bf00      	nop
 800640a:	370c      	adds	r7, #12
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800641c:	bf00      	nop
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006430:	bf00      	nop
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006444:	bf00      	nop
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006458:	bf00      	nop
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b082      	sub	sp, #8
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d101      	bne.n	8006476 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e042      	b.n	80064fc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800647c:	2b00      	cmp	r3, #0
 800647e:	d106      	bne.n	800648e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f7fb fda3 	bl	8001fd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2224      	movs	r2, #36	@ 0x24
 8006492:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f022 0201 	bic.w	r2, r2, #1
 80064a4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d002      	beq.n	80064b4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 ffbe 	bl	8007430 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 fcbf 	bl	8006e38 <UART_SetConfig>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d101      	bne.n	80064c4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	e01b      	b.n	80064fc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	685a      	ldr	r2, [r3, #4]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80064d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	689a      	ldr	r2, [r3, #8]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80064e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f042 0201 	orr.w	r2, r2, #1
 80064f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f001 f83d 	bl	8007574 <UART_CheckIdleState>
 80064fa:	4603      	mov	r3, r0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3708      	adds	r7, #8
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b08a      	sub	sp, #40	@ 0x28
 8006508:	af02      	add	r7, sp, #8
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	603b      	str	r3, [r7, #0]
 8006510:	4613      	mov	r3, r2
 8006512:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800651a:	2b20      	cmp	r3, #32
 800651c:	d17b      	bne.n	8006616 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d002      	beq.n	800652a <HAL_UART_Transmit+0x26>
 8006524:	88fb      	ldrh	r3, [r7, #6]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d101      	bne.n	800652e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e074      	b.n	8006618 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2200      	movs	r2, #0
 8006532:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2221      	movs	r2, #33	@ 0x21
 800653a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800653e:	f7fb ffa7 	bl	8002490 <HAL_GetTick>
 8006542:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	88fa      	ldrh	r2, [r7, #6]
 8006548:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	88fa      	ldrh	r2, [r7, #6]
 8006550:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800655c:	d108      	bne.n	8006570 <HAL_UART_Transmit+0x6c>
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d104      	bne.n	8006570 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006566:	2300      	movs	r3, #0
 8006568:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	61bb      	str	r3, [r7, #24]
 800656e:	e003      	b.n	8006578 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006574:	2300      	movs	r3, #0
 8006576:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006578:	e030      	b.n	80065dc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	9300      	str	r3, [sp, #0]
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	2200      	movs	r2, #0
 8006582:	2180      	movs	r1, #128	@ 0x80
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	f001 f89f 	bl	80076c8 <UART_WaitOnFlagUntilTimeout>
 800658a:	4603      	mov	r3, r0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d005      	beq.n	800659c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2220      	movs	r2, #32
 8006594:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006598:	2303      	movs	r3, #3
 800659a:	e03d      	b.n	8006618 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d10b      	bne.n	80065ba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	881b      	ldrh	r3, [r3, #0]
 80065a6:	461a      	mov	r2, r3
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065b0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	3302      	adds	r3, #2
 80065b6:	61bb      	str	r3, [r7, #24]
 80065b8:	e007      	b.n	80065ca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	781a      	ldrb	r2, [r3, #0]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	3301      	adds	r3, #1
 80065c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	3b01      	subs	r3, #1
 80065d4:	b29a      	uxth	r2, r3
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d1c8      	bne.n	800657a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	9300      	str	r3, [sp, #0]
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	2200      	movs	r2, #0
 80065f0:	2140      	movs	r1, #64	@ 0x40
 80065f2:	68f8      	ldr	r0, [r7, #12]
 80065f4:	f001 f868 	bl	80076c8 <UART_WaitOnFlagUntilTimeout>
 80065f8:	4603      	mov	r3, r0
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d005      	beq.n	800660a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2220      	movs	r2, #32
 8006602:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	e006      	b.n	8006618 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2220      	movs	r2, #32
 800660e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006612:	2300      	movs	r3, #0
 8006614:	e000      	b.n	8006618 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006616:	2302      	movs	r3, #2
  }
}
 8006618:	4618      	mov	r0, r3
 800661a:	3720      	adds	r7, #32
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}

08006620 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b08a      	sub	sp, #40	@ 0x28
 8006624:	af02      	add	r7, sp, #8
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	60b9      	str	r1, [r7, #8]
 800662a:	603b      	str	r3, [r7, #0]
 800662c:	4613      	mov	r3, r2
 800662e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006636:	2b20      	cmp	r3, #32
 8006638:	f040 80b5 	bne.w	80067a6 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d002      	beq.n	8006648 <HAL_UART_Receive+0x28>
 8006642:	88fb      	ldrh	r3, [r7, #6]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d101      	bne.n	800664c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	e0ad      	b.n	80067a8 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2200      	movs	r2, #0
 8006650:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2222      	movs	r2, #34	@ 0x22
 8006658:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2200      	movs	r2, #0
 8006660:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006662:	f7fb ff15 	bl	8002490 <HAL_GetTick>
 8006666:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	88fa      	ldrh	r2, [r7, #6]
 800666c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	88fa      	ldrh	r2, [r7, #6]
 8006674:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006680:	d10e      	bne.n	80066a0 <HAL_UART_Receive+0x80>
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d105      	bne.n	8006696 <HAL_UART_Receive+0x76>
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006690:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006694:	e02d      	b.n	80066f2 <HAL_UART_Receive+0xd2>
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	22ff      	movs	r2, #255	@ 0xff
 800669a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800669e:	e028      	b.n	80066f2 <HAL_UART_Receive+0xd2>
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d10d      	bne.n	80066c4 <HAL_UART_Receive+0xa4>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d104      	bne.n	80066ba <HAL_UART_Receive+0x9a>
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	22ff      	movs	r2, #255	@ 0xff
 80066b4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80066b8:	e01b      	b.n	80066f2 <HAL_UART_Receive+0xd2>
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	227f      	movs	r2, #127	@ 0x7f
 80066be:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80066c2:	e016      	b.n	80066f2 <HAL_UART_Receive+0xd2>
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066cc:	d10d      	bne.n	80066ea <HAL_UART_Receive+0xca>
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d104      	bne.n	80066e0 <HAL_UART_Receive+0xc0>
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	227f      	movs	r2, #127	@ 0x7f
 80066da:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80066de:	e008      	b.n	80066f2 <HAL_UART_Receive+0xd2>
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	223f      	movs	r2, #63	@ 0x3f
 80066e4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80066e8:	e003      	b.n	80066f2 <HAL_UART_Receive+0xd2>
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80066f8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006702:	d108      	bne.n	8006716 <HAL_UART_Receive+0xf6>
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	691b      	ldr	r3, [r3, #16]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d104      	bne.n	8006716 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800670c:	2300      	movs	r3, #0
 800670e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	61bb      	str	r3, [r7, #24]
 8006714:	e003      	b.n	800671e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800671a:	2300      	movs	r3, #0
 800671c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800671e:	e036      	b.n	800678e <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	9300      	str	r3, [sp, #0]
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	2200      	movs	r2, #0
 8006728:	2120      	movs	r1, #32
 800672a:	68f8      	ldr	r0, [r7, #12]
 800672c:	f000 ffcc 	bl	80076c8 <UART_WaitOnFlagUntilTimeout>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d005      	beq.n	8006742 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2220      	movs	r2, #32
 800673a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800673e:	2303      	movs	r3, #3
 8006740:	e032      	b.n	80067a8 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d10c      	bne.n	8006762 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800674e:	b29a      	uxth	r2, r3
 8006750:	8a7b      	ldrh	r3, [r7, #18]
 8006752:	4013      	ands	r3, r2
 8006754:	b29a      	uxth	r2, r3
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	3302      	adds	r3, #2
 800675e:	61bb      	str	r3, [r7, #24]
 8006760:	e00c      	b.n	800677c <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006768:	b2da      	uxtb	r2, r3
 800676a:	8a7b      	ldrh	r3, [r7, #18]
 800676c:	b2db      	uxtb	r3, r3
 800676e:	4013      	ands	r3, r2
 8006770:	b2da      	uxtb	r2, r3
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	3301      	adds	r3, #1
 800677a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006782:	b29b      	uxth	r3, r3
 8006784:	3b01      	subs	r3, #1
 8006786:	b29a      	uxth	r2, r3
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006794:	b29b      	uxth	r3, r3
 8006796:	2b00      	cmp	r3, #0
 8006798:	d1c2      	bne.n	8006720 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2220      	movs	r2, #32
 800679e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80067a2:	2300      	movs	r3, #0
 80067a4:	e000      	b.n	80067a8 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80067a6:	2302      	movs	r3, #2
  }
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3720      	adds	r7, #32
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b0ba      	sub	sp, #232	@ 0xe8
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	69db      	ldr	r3, [r3, #28]
 80067be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80067d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80067da:	f640 030f 	movw	r3, #2063	@ 0x80f
 80067de:	4013      	ands	r3, r2
 80067e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80067e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d11b      	bne.n	8006824 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80067ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067f0:	f003 0320 	and.w	r3, r3, #32
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d015      	beq.n	8006824 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80067f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067fc:	f003 0320 	and.w	r3, r3, #32
 8006800:	2b00      	cmp	r3, #0
 8006802:	d105      	bne.n	8006810 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006804:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006808:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800680c:	2b00      	cmp	r3, #0
 800680e:	d009      	beq.n	8006824 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006814:	2b00      	cmp	r3, #0
 8006816:	f000 82e3 	beq.w	8006de0 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	4798      	blx	r3
      }
      return;
 8006822:	e2dd      	b.n	8006de0 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006824:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006828:	2b00      	cmp	r3, #0
 800682a:	f000 8123 	beq.w	8006a74 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800682e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006832:	4b8d      	ldr	r3, [pc, #564]	@ (8006a68 <HAL_UART_IRQHandler+0x2b8>)
 8006834:	4013      	ands	r3, r2
 8006836:	2b00      	cmp	r3, #0
 8006838:	d106      	bne.n	8006848 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800683a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800683e:	4b8b      	ldr	r3, [pc, #556]	@ (8006a6c <HAL_UART_IRQHandler+0x2bc>)
 8006840:	4013      	ands	r3, r2
 8006842:	2b00      	cmp	r3, #0
 8006844:	f000 8116 	beq.w	8006a74 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800684c:	f003 0301 	and.w	r3, r3, #1
 8006850:	2b00      	cmp	r3, #0
 8006852:	d011      	beq.n	8006878 <HAL_UART_IRQHandler+0xc8>
 8006854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006858:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800685c:	2b00      	cmp	r3, #0
 800685e:	d00b      	beq.n	8006878 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2201      	movs	r2, #1
 8006866:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800686e:	f043 0201 	orr.w	r2, r3, #1
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800687c:	f003 0302 	and.w	r3, r3, #2
 8006880:	2b00      	cmp	r3, #0
 8006882:	d011      	beq.n	80068a8 <HAL_UART_IRQHandler+0xf8>
 8006884:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006888:	f003 0301 	and.w	r3, r3, #1
 800688c:	2b00      	cmp	r3, #0
 800688e:	d00b      	beq.n	80068a8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	2202      	movs	r2, #2
 8006896:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800689e:	f043 0204 	orr.w	r2, r3, #4
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80068a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068ac:	f003 0304 	and.w	r3, r3, #4
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d011      	beq.n	80068d8 <HAL_UART_IRQHandler+0x128>
 80068b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068b8:	f003 0301 	and.w	r3, r3, #1
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d00b      	beq.n	80068d8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2204      	movs	r2, #4
 80068c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068ce:	f043 0202 	orr.w	r2, r3, #2
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80068d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068dc:	f003 0308 	and.w	r3, r3, #8
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d017      	beq.n	8006914 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80068e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068e8:	f003 0320 	and.w	r3, r3, #32
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d105      	bne.n	80068fc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80068f0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80068f4:	4b5c      	ldr	r3, [pc, #368]	@ (8006a68 <HAL_UART_IRQHandler+0x2b8>)
 80068f6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d00b      	beq.n	8006914 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2208      	movs	r2, #8
 8006902:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800690a:	f043 0208 	orr.w	r2, r3, #8
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006918:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800691c:	2b00      	cmp	r3, #0
 800691e:	d012      	beq.n	8006946 <HAL_UART_IRQHandler+0x196>
 8006920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006924:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006928:	2b00      	cmp	r3, #0
 800692a:	d00c      	beq.n	8006946 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006934:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800693c:	f043 0220 	orr.w	r2, r3, #32
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800694c:	2b00      	cmp	r3, #0
 800694e:	f000 8249 	beq.w	8006de4 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006956:	f003 0320 	and.w	r3, r3, #32
 800695a:	2b00      	cmp	r3, #0
 800695c:	d013      	beq.n	8006986 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800695e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006962:	f003 0320 	and.w	r3, r3, #32
 8006966:	2b00      	cmp	r3, #0
 8006968:	d105      	bne.n	8006976 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800696a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800696e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006972:	2b00      	cmp	r3, #0
 8006974:	d007      	beq.n	8006986 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800697a:	2b00      	cmp	r3, #0
 800697c:	d003      	beq.n	8006986 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800698c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800699a:	2b40      	cmp	r3, #64	@ 0x40
 800699c:	d005      	beq.n	80069aa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800699e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80069a2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d054      	beq.n	8006a54 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 fef9 	bl	80077a2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069ba:	2b40      	cmp	r3, #64	@ 0x40
 80069bc:	d146      	bne.n	8006a4c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	3308      	adds	r3, #8
 80069c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80069cc:	e853 3f00 	ldrex	r3, [r3]
 80069d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80069d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80069d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	3308      	adds	r3, #8
 80069e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80069ea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80069ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80069f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80069fa:	e841 2300 	strex	r3, r2, [r1]
 80069fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006a02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d1d9      	bne.n	80069be <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d017      	beq.n	8006a44 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a1a:	4a15      	ldr	r2, [pc, #84]	@ (8006a70 <HAL_UART_IRQHandler+0x2c0>)
 8006a1c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a24:	4618      	mov	r0, r3
 8006a26:	f7fb fec9 	bl	80027bc <HAL_DMA_Abort_IT>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d019      	beq.n	8006a64 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006a3e:	4610      	mov	r0, r2
 8006a40:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a42:	e00f      	b.n	8006a64 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 f9e1 	bl	8006e0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a4a:	e00b      	b.n	8006a64 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 f9dd 	bl	8006e0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a52:	e007      	b.n	8006a64 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 f9d9 	bl	8006e0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006a62:	e1bf      	b.n	8006de4 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a64:	bf00      	nop
    return;
 8006a66:	e1bd      	b.n	8006de4 <HAL_UART_IRQHandler+0x634>
 8006a68:	10000001 	.word	0x10000001
 8006a6c:	04000120 	.word	0x04000120
 8006a70:	0800786f 	.word	0x0800786f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	f040 8153 	bne.w	8006d24 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a82:	f003 0310 	and.w	r3, r3, #16
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	f000 814c 	beq.w	8006d24 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006a8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a90:	f003 0310 	and.w	r3, r3, #16
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f000 8145 	beq.w	8006d24 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2210      	movs	r2, #16
 8006aa0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aac:	2b40      	cmp	r3, #64	@ 0x40
 8006aae:	f040 80bb 	bne.w	8006c28 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006ac0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	f000 818f 	beq.w	8006de8 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006ad0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	f080 8187 	bcs.w	8006de8 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006ae0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 0320 	and.w	r3, r3, #32
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	f040 8087 	bne.w	8006c06 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b00:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006b04:	e853 3f00 	ldrex	r3, [r3]
 8006b08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006b0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006b10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006b22:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006b26:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006b2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006b32:	e841 2300 	strex	r3, r2, [r1]
 8006b36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006b3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d1da      	bne.n	8006af8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	3308      	adds	r3, #8
 8006b48:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b4c:	e853 3f00 	ldrex	r3, [r3]
 8006b50:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006b52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b54:	f023 0301 	bic.w	r3, r3, #1
 8006b58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	3308      	adds	r3, #8
 8006b62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006b66:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006b6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006b6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006b72:	e841 2300 	strex	r3, r2, [r1]
 8006b76:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006b78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d1e1      	bne.n	8006b42 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	3308      	adds	r3, #8
 8006b84:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006b88:	e853 3f00 	ldrex	r3, [r3]
 8006b8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006b8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	3308      	adds	r3, #8
 8006b9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006ba2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006ba4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006ba8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006baa:	e841 2300 	strex	r3, r2, [r1]
 8006bae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006bb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1e3      	bne.n	8006b7e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2220      	movs	r2, #32
 8006bba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bcc:	e853 3f00 	ldrex	r3, [r3]
 8006bd0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006bd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bd4:	f023 0310 	bic.w	r3, r3, #16
 8006bd8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	461a      	mov	r2, r3
 8006be2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006be6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006be8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006bec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006bee:	e841 2300 	strex	r3, r2, [r1]
 8006bf2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006bf4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d1e4      	bne.n	8006bc4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c00:	4618      	mov	r0, r3
 8006c02:	f7fb fd82 	bl	800270a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2202      	movs	r2, #2
 8006c0a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	1ad3      	subs	r3, r2, r3
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	4619      	mov	r1, r3
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 f8fd 	bl	8006e20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006c26:	e0df      	b.n	8006de8 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	1ad3      	subs	r3, r2, r3
 8006c38:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	f000 80d1 	beq.w	8006dec <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8006c4a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	f000 80cc 	beq.w	8006dec <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c5c:	e853 3f00 	ldrex	r3, [r3]
 8006c60:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c68:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	461a      	mov	r2, r3
 8006c72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006c76:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c78:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c7a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c7e:	e841 2300 	strex	r3, r2, [r1]
 8006c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d1e4      	bne.n	8006c54 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	3308      	adds	r3, #8
 8006c90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c94:	e853 3f00 	ldrex	r3, [r3]
 8006c98:	623b      	str	r3, [r7, #32]
   return(result);
 8006c9a:	6a3b      	ldr	r3, [r7, #32]
 8006c9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ca0:	f023 0301 	bic.w	r3, r3, #1
 8006ca4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	3308      	adds	r3, #8
 8006cae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006cb2:	633a      	str	r2, [r7, #48]	@ 0x30
 8006cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006cb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cba:	e841 2300 	strex	r3, r2, [r1]
 8006cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d1e1      	bne.n	8006c8a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2220      	movs	r2, #32
 8006cca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	e853 3f00 	ldrex	r3, [r3]
 8006ce6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f023 0310 	bic.w	r3, r3, #16
 8006cee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006cfc:	61fb      	str	r3, [r7, #28]
 8006cfe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d00:	69b9      	ldr	r1, [r7, #24]
 8006d02:	69fa      	ldr	r2, [r7, #28]
 8006d04:	e841 2300 	strex	r3, r2, [r1]
 8006d08:	617b      	str	r3, [r7, #20]
   return(result);
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d1e4      	bne.n	8006cda <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2202      	movs	r2, #2
 8006d14:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d16:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 f87f 	bl	8006e20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006d22:	e063      	b.n	8006dec <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006d24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d00e      	beq.n	8006d4e <HAL_UART_IRQHandler+0x59e>
 8006d30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d008      	beq.n	8006d4e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006d44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 fdd2 	bl	80078f0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d4c:	e051      	b.n	8006df2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d014      	beq.n	8006d84 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006d5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d105      	bne.n	8006d72 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006d66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d008      	beq.n	8006d84 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d03a      	beq.n	8006df0 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	4798      	blx	r3
    }
    return;
 8006d82:	e035      	b.n	8006df0 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006d84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d009      	beq.n	8006da4 <HAL_UART_IRQHandler+0x5f4>
 8006d90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d003      	beq.n	8006da4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 fd7c 	bl	800789a <UART_EndTransmit_IT>
    return;
 8006da2:	e026      	b.n	8006df2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006da4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006da8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d009      	beq.n	8006dc4 <HAL_UART_IRQHandler+0x614>
 8006db0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006db4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d003      	beq.n	8006dc4 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 fdab 	bl	8007918 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006dc2:	e016      	b.n	8006df2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006dc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dc8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d010      	beq.n	8006df2 <HAL_UART_IRQHandler+0x642>
 8006dd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	da0c      	bge.n	8006df2 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 fd93 	bl	8007904 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006dde:	e008      	b.n	8006df2 <HAL_UART_IRQHandler+0x642>
      return;
 8006de0:	bf00      	nop
 8006de2:	e006      	b.n	8006df2 <HAL_UART_IRQHandler+0x642>
    return;
 8006de4:	bf00      	nop
 8006de6:	e004      	b.n	8006df2 <HAL_UART_IRQHandler+0x642>
      return;
 8006de8:	bf00      	nop
 8006dea:	e002      	b.n	8006df2 <HAL_UART_IRQHandler+0x642>
      return;
 8006dec:	bf00      	nop
 8006dee:	e000      	b.n	8006df2 <HAL_UART_IRQHandler+0x642>
    return;
 8006df0:	bf00      	nop
  }
}
 8006df2:	37e8      	adds	r7, #232	@ 0xe8
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006e00:	bf00      	nop
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006e14:	bf00      	nop
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	460b      	mov	r3, r1
 8006e2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006e2c:	bf00      	nop
 8006e2e:	370c      	adds	r7, #12
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr

08006e38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e3c:	b08c      	sub	sp, #48	@ 0x30
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e42:	2300      	movs	r3, #0
 8006e44:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	689a      	ldr	r2, [r3, #8]
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	691b      	ldr	r3, [r3, #16]
 8006e50:	431a      	orrs	r2, r3
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	695b      	ldr	r3, [r3, #20]
 8006e56:	431a      	orrs	r2, r3
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	69db      	ldr	r3, [r3, #28]
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	4baa      	ldr	r3, [pc, #680]	@ (8007110 <UART_SetConfig+0x2d8>)
 8006e68:	4013      	ands	r3, r2
 8006e6a:	697a      	ldr	r2, [r7, #20]
 8006e6c:	6812      	ldr	r2, [r2, #0]
 8006e6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e70:	430b      	orrs	r3, r1
 8006e72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	68da      	ldr	r2, [r3, #12]
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	430a      	orrs	r2, r1
 8006e88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	699b      	ldr	r3, [r3, #24]
 8006e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a9f      	ldr	r2, [pc, #636]	@ (8007114 <UART_SetConfig+0x2dc>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d004      	beq.n	8006ea4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	6a1b      	ldr	r3, [r3, #32]
 8006e9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006eae:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006eb2:	697a      	ldr	r2, [r7, #20]
 8006eb4:	6812      	ldr	r2, [r2, #0]
 8006eb6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006eb8:	430b      	orrs	r3, r1
 8006eba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ec2:	f023 010f 	bic.w	r1, r3, #15
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	430a      	orrs	r2, r1
 8006ed0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a90      	ldr	r2, [pc, #576]	@ (8007118 <UART_SetConfig+0x2e0>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d125      	bne.n	8006f28 <UART_SetConfig+0xf0>
 8006edc:	4b8f      	ldr	r3, [pc, #572]	@ (800711c <UART_SetConfig+0x2e4>)
 8006ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ee2:	f003 0303 	and.w	r3, r3, #3
 8006ee6:	2b03      	cmp	r3, #3
 8006ee8:	d81a      	bhi.n	8006f20 <UART_SetConfig+0xe8>
 8006eea:	a201      	add	r2, pc, #4	@ (adr r2, 8006ef0 <UART_SetConfig+0xb8>)
 8006eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef0:	08006f01 	.word	0x08006f01
 8006ef4:	08006f11 	.word	0x08006f11
 8006ef8:	08006f09 	.word	0x08006f09
 8006efc:	08006f19 	.word	0x08006f19
 8006f00:	2301      	movs	r3, #1
 8006f02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f06:	e116      	b.n	8007136 <UART_SetConfig+0x2fe>
 8006f08:	2302      	movs	r3, #2
 8006f0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f0e:	e112      	b.n	8007136 <UART_SetConfig+0x2fe>
 8006f10:	2304      	movs	r3, #4
 8006f12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f16:	e10e      	b.n	8007136 <UART_SetConfig+0x2fe>
 8006f18:	2308      	movs	r3, #8
 8006f1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f1e:	e10a      	b.n	8007136 <UART_SetConfig+0x2fe>
 8006f20:	2310      	movs	r3, #16
 8006f22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f26:	e106      	b.n	8007136 <UART_SetConfig+0x2fe>
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a7c      	ldr	r2, [pc, #496]	@ (8007120 <UART_SetConfig+0x2e8>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d138      	bne.n	8006fa4 <UART_SetConfig+0x16c>
 8006f32:	4b7a      	ldr	r3, [pc, #488]	@ (800711c <UART_SetConfig+0x2e4>)
 8006f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f38:	f003 030c 	and.w	r3, r3, #12
 8006f3c:	2b0c      	cmp	r3, #12
 8006f3e:	d82d      	bhi.n	8006f9c <UART_SetConfig+0x164>
 8006f40:	a201      	add	r2, pc, #4	@ (adr r2, 8006f48 <UART_SetConfig+0x110>)
 8006f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f46:	bf00      	nop
 8006f48:	08006f7d 	.word	0x08006f7d
 8006f4c:	08006f9d 	.word	0x08006f9d
 8006f50:	08006f9d 	.word	0x08006f9d
 8006f54:	08006f9d 	.word	0x08006f9d
 8006f58:	08006f8d 	.word	0x08006f8d
 8006f5c:	08006f9d 	.word	0x08006f9d
 8006f60:	08006f9d 	.word	0x08006f9d
 8006f64:	08006f9d 	.word	0x08006f9d
 8006f68:	08006f85 	.word	0x08006f85
 8006f6c:	08006f9d 	.word	0x08006f9d
 8006f70:	08006f9d 	.word	0x08006f9d
 8006f74:	08006f9d 	.word	0x08006f9d
 8006f78:	08006f95 	.word	0x08006f95
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f82:	e0d8      	b.n	8007136 <UART_SetConfig+0x2fe>
 8006f84:	2302      	movs	r3, #2
 8006f86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f8a:	e0d4      	b.n	8007136 <UART_SetConfig+0x2fe>
 8006f8c:	2304      	movs	r3, #4
 8006f8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f92:	e0d0      	b.n	8007136 <UART_SetConfig+0x2fe>
 8006f94:	2308      	movs	r3, #8
 8006f96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f9a:	e0cc      	b.n	8007136 <UART_SetConfig+0x2fe>
 8006f9c:	2310      	movs	r3, #16
 8006f9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fa2:	e0c8      	b.n	8007136 <UART_SetConfig+0x2fe>
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a5e      	ldr	r2, [pc, #376]	@ (8007124 <UART_SetConfig+0x2ec>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d125      	bne.n	8006ffa <UART_SetConfig+0x1c2>
 8006fae:	4b5b      	ldr	r3, [pc, #364]	@ (800711c <UART_SetConfig+0x2e4>)
 8006fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fb4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006fb8:	2b30      	cmp	r3, #48	@ 0x30
 8006fba:	d016      	beq.n	8006fea <UART_SetConfig+0x1b2>
 8006fbc:	2b30      	cmp	r3, #48	@ 0x30
 8006fbe:	d818      	bhi.n	8006ff2 <UART_SetConfig+0x1ba>
 8006fc0:	2b20      	cmp	r3, #32
 8006fc2:	d00a      	beq.n	8006fda <UART_SetConfig+0x1a2>
 8006fc4:	2b20      	cmp	r3, #32
 8006fc6:	d814      	bhi.n	8006ff2 <UART_SetConfig+0x1ba>
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d002      	beq.n	8006fd2 <UART_SetConfig+0x19a>
 8006fcc:	2b10      	cmp	r3, #16
 8006fce:	d008      	beq.n	8006fe2 <UART_SetConfig+0x1aa>
 8006fd0:	e00f      	b.n	8006ff2 <UART_SetConfig+0x1ba>
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fd8:	e0ad      	b.n	8007136 <UART_SetConfig+0x2fe>
 8006fda:	2302      	movs	r3, #2
 8006fdc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fe0:	e0a9      	b.n	8007136 <UART_SetConfig+0x2fe>
 8006fe2:	2304      	movs	r3, #4
 8006fe4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fe8:	e0a5      	b.n	8007136 <UART_SetConfig+0x2fe>
 8006fea:	2308      	movs	r3, #8
 8006fec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ff0:	e0a1      	b.n	8007136 <UART_SetConfig+0x2fe>
 8006ff2:	2310      	movs	r3, #16
 8006ff4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ff8:	e09d      	b.n	8007136 <UART_SetConfig+0x2fe>
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a4a      	ldr	r2, [pc, #296]	@ (8007128 <UART_SetConfig+0x2f0>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d125      	bne.n	8007050 <UART_SetConfig+0x218>
 8007004:	4b45      	ldr	r3, [pc, #276]	@ (800711c <UART_SetConfig+0x2e4>)
 8007006:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800700a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800700e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007010:	d016      	beq.n	8007040 <UART_SetConfig+0x208>
 8007012:	2bc0      	cmp	r3, #192	@ 0xc0
 8007014:	d818      	bhi.n	8007048 <UART_SetConfig+0x210>
 8007016:	2b80      	cmp	r3, #128	@ 0x80
 8007018:	d00a      	beq.n	8007030 <UART_SetConfig+0x1f8>
 800701a:	2b80      	cmp	r3, #128	@ 0x80
 800701c:	d814      	bhi.n	8007048 <UART_SetConfig+0x210>
 800701e:	2b00      	cmp	r3, #0
 8007020:	d002      	beq.n	8007028 <UART_SetConfig+0x1f0>
 8007022:	2b40      	cmp	r3, #64	@ 0x40
 8007024:	d008      	beq.n	8007038 <UART_SetConfig+0x200>
 8007026:	e00f      	b.n	8007048 <UART_SetConfig+0x210>
 8007028:	2300      	movs	r3, #0
 800702a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800702e:	e082      	b.n	8007136 <UART_SetConfig+0x2fe>
 8007030:	2302      	movs	r3, #2
 8007032:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007036:	e07e      	b.n	8007136 <UART_SetConfig+0x2fe>
 8007038:	2304      	movs	r3, #4
 800703a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800703e:	e07a      	b.n	8007136 <UART_SetConfig+0x2fe>
 8007040:	2308      	movs	r3, #8
 8007042:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007046:	e076      	b.n	8007136 <UART_SetConfig+0x2fe>
 8007048:	2310      	movs	r3, #16
 800704a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800704e:	e072      	b.n	8007136 <UART_SetConfig+0x2fe>
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a35      	ldr	r2, [pc, #212]	@ (800712c <UART_SetConfig+0x2f4>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d12a      	bne.n	80070b0 <UART_SetConfig+0x278>
 800705a:	4b30      	ldr	r3, [pc, #192]	@ (800711c <UART_SetConfig+0x2e4>)
 800705c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007060:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007064:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007068:	d01a      	beq.n	80070a0 <UART_SetConfig+0x268>
 800706a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800706e:	d81b      	bhi.n	80070a8 <UART_SetConfig+0x270>
 8007070:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007074:	d00c      	beq.n	8007090 <UART_SetConfig+0x258>
 8007076:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800707a:	d815      	bhi.n	80070a8 <UART_SetConfig+0x270>
 800707c:	2b00      	cmp	r3, #0
 800707e:	d003      	beq.n	8007088 <UART_SetConfig+0x250>
 8007080:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007084:	d008      	beq.n	8007098 <UART_SetConfig+0x260>
 8007086:	e00f      	b.n	80070a8 <UART_SetConfig+0x270>
 8007088:	2300      	movs	r3, #0
 800708a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800708e:	e052      	b.n	8007136 <UART_SetConfig+0x2fe>
 8007090:	2302      	movs	r3, #2
 8007092:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007096:	e04e      	b.n	8007136 <UART_SetConfig+0x2fe>
 8007098:	2304      	movs	r3, #4
 800709a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800709e:	e04a      	b.n	8007136 <UART_SetConfig+0x2fe>
 80070a0:	2308      	movs	r3, #8
 80070a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070a6:	e046      	b.n	8007136 <UART_SetConfig+0x2fe>
 80070a8:	2310      	movs	r3, #16
 80070aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070ae:	e042      	b.n	8007136 <UART_SetConfig+0x2fe>
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a17      	ldr	r2, [pc, #92]	@ (8007114 <UART_SetConfig+0x2dc>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d13a      	bne.n	8007130 <UART_SetConfig+0x2f8>
 80070ba:	4b18      	ldr	r3, [pc, #96]	@ (800711c <UART_SetConfig+0x2e4>)
 80070bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070c0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80070c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80070c8:	d01a      	beq.n	8007100 <UART_SetConfig+0x2c8>
 80070ca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80070ce:	d81b      	bhi.n	8007108 <UART_SetConfig+0x2d0>
 80070d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80070d4:	d00c      	beq.n	80070f0 <UART_SetConfig+0x2b8>
 80070d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80070da:	d815      	bhi.n	8007108 <UART_SetConfig+0x2d0>
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d003      	beq.n	80070e8 <UART_SetConfig+0x2b0>
 80070e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070e4:	d008      	beq.n	80070f8 <UART_SetConfig+0x2c0>
 80070e6:	e00f      	b.n	8007108 <UART_SetConfig+0x2d0>
 80070e8:	2300      	movs	r3, #0
 80070ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070ee:	e022      	b.n	8007136 <UART_SetConfig+0x2fe>
 80070f0:	2302      	movs	r3, #2
 80070f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070f6:	e01e      	b.n	8007136 <UART_SetConfig+0x2fe>
 80070f8:	2304      	movs	r3, #4
 80070fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070fe:	e01a      	b.n	8007136 <UART_SetConfig+0x2fe>
 8007100:	2308      	movs	r3, #8
 8007102:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007106:	e016      	b.n	8007136 <UART_SetConfig+0x2fe>
 8007108:	2310      	movs	r3, #16
 800710a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800710e:	e012      	b.n	8007136 <UART_SetConfig+0x2fe>
 8007110:	cfff69f3 	.word	0xcfff69f3
 8007114:	40008000 	.word	0x40008000
 8007118:	40013800 	.word	0x40013800
 800711c:	40021000 	.word	0x40021000
 8007120:	40004400 	.word	0x40004400
 8007124:	40004800 	.word	0x40004800
 8007128:	40004c00 	.word	0x40004c00
 800712c:	40005000 	.word	0x40005000
 8007130:	2310      	movs	r3, #16
 8007132:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4aae      	ldr	r2, [pc, #696]	@ (80073f4 <UART_SetConfig+0x5bc>)
 800713c:	4293      	cmp	r3, r2
 800713e:	f040 8097 	bne.w	8007270 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007142:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007146:	2b08      	cmp	r3, #8
 8007148:	d823      	bhi.n	8007192 <UART_SetConfig+0x35a>
 800714a:	a201      	add	r2, pc, #4	@ (adr r2, 8007150 <UART_SetConfig+0x318>)
 800714c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007150:	08007175 	.word	0x08007175
 8007154:	08007193 	.word	0x08007193
 8007158:	0800717d 	.word	0x0800717d
 800715c:	08007193 	.word	0x08007193
 8007160:	08007183 	.word	0x08007183
 8007164:	08007193 	.word	0x08007193
 8007168:	08007193 	.word	0x08007193
 800716c:	08007193 	.word	0x08007193
 8007170:	0800718b 	.word	0x0800718b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007174:	f7fc fac6 	bl	8003704 <HAL_RCC_GetPCLK1Freq>
 8007178:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800717a:	e010      	b.n	800719e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800717c:	4b9e      	ldr	r3, [pc, #632]	@ (80073f8 <UART_SetConfig+0x5c0>)
 800717e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007180:	e00d      	b.n	800719e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007182:	f7fc fa51 	bl	8003628 <HAL_RCC_GetSysClockFreq>
 8007186:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007188:	e009      	b.n	800719e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800718a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800718e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007190:	e005      	b.n	800719e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007192:	2300      	movs	r3, #0
 8007194:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800719c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800719e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	f000 8130 	beq.w	8007406 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071aa:	4a94      	ldr	r2, [pc, #592]	@ (80073fc <UART_SetConfig+0x5c4>)
 80071ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071b0:	461a      	mov	r2, r3
 80071b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80071b8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	685a      	ldr	r2, [r3, #4]
 80071be:	4613      	mov	r3, r2
 80071c0:	005b      	lsls	r3, r3, #1
 80071c2:	4413      	add	r3, r2
 80071c4:	69ba      	ldr	r2, [r7, #24]
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d305      	bcc.n	80071d6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80071d0:	69ba      	ldr	r2, [r7, #24]
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d903      	bls.n	80071de <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80071dc:	e113      	b.n	8007406 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e0:	2200      	movs	r2, #0
 80071e2:	60bb      	str	r3, [r7, #8]
 80071e4:	60fa      	str	r2, [r7, #12]
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071ea:	4a84      	ldr	r2, [pc, #528]	@ (80073fc <UART_SetConfig+0x5c4>)
 80071ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	2200      	movs	r2, #0
 80071f4:	603b      	str	r3, [r7, #0]
 80071f6:	607a      	str	r2, [r7, #4]
 80071f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007200:	f7f9 f876 	bl	80002f0 <__aeabi_uldivmod>
 8007204:	4602      	mov	r2, r0
 8007206:	460b      	mov	r3, r1
 8007208:	4610      	mov	r0, r2
 800720a:	4619      	mov	r1, r3
 800720c:	f04f 0200 	mov.w	r2, #0
 8007210:	f04f 0300 	mov.w	r3, #0
 8007214:	020b      	lsls	r3, r1, #8
 8007216:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800721a:	0202      	lsls	r2, r0, #8
 800721c:	6979      	ldr	r1, [r7, #20]
 800721e:	6849      	ldr	r1, [r1, #4]
 8007220:	0849      	lsrs	r1, r1, #1
 8007222:	2000      	movs	r0, #0
 8007224:	460c      	mov	r4, r1
 8007226:	4605      	mov	r5, r0
 8007228:	eb12 0804 	adds.w	r8, r2, r4
 800722c:	eb43 0905 	adc.w	r9, r3, r5
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	2200      	movs	r2, #0
 8007236:	469a      	mov	sl, r3
 8007238:	4693      	mov	fp, r2
 800723a:	4652      	mov	r2, sl
 800723c:	465b      	mov	r3, fp
 800723e:	4640      	mov	r0, r8
 8007240:	4649      	mov	r1, r9
 8007242:	f7f9 f855 	bl	80002f0 <__aeabi_uldivmod>
 8007246:	4602      	mov	r2, r0
 8007248:	460b      	mov	r3, r1
 800724a:	4613      	mov	r3, r2
 800724c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800724e:	6a3b      	ldr	r3, [r7, #32]
 8007250:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007254:	d308      	bcc.n	8007268 <UART_SetConfig+0x430>
 8007256:	6a3b      	ldr	r3, [r7, #32]
 8007258:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800725c:	d204      	bcs.n	8007268 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	6a3a      	ldr	r2, [r7, #32]
 8007264:	60da      	str	r2, [r3, #12]
 8007266:	e0ce      	b.n	8007406 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800726e:	e0ca      	b.n	8007406 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	69db      	ldr	r3, [r3, #28]
 8007274:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007278:	d166      	bne.n	8007348 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800727a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800727e:	2b08      	cmp	r3, #8
 8007280:	d827      	bhi.n	80072d2 <UART_SetConfig+0x49a>
 8007282:	a201      	add	r2, pc, #4	@ (adr r2, 8007288 <UART_SetConfig+0x450>)
 8007284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007288:	080072ad 	.word	0x080072ad
 800728c:	080072b5 	.word	0x080072b5
 8007290:	080072bd 	.word	0x080072bd
 8007294:	080072d3 	.word	0x080072d3
 8007298:	080072c3 	.word	0x080072c3
 800729c:	080072d3 	.word	0x080072d3
 80072a0:	080072d3 	.word	0x080072d3
 80072a4:	080072d3 	.word	0x080072d3
 80072a8:	080072cb 	.word	0x080072cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072ac:	f7fc fa2a 	bl	8003704 <HAL_RCC_GetPCLK1Freq>
 80072b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80072b2:	e014      	b.n	80072de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072b4:	f7fc fa3c 	bl	8003730 <HAL_RCC_GetPCLK2Freq>
 80072b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80072ba:	e010      	b.n	80072de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072bc:	4b4e      	ldr	r3, [pc, #312]	@ (80073f8 <UART_SetConfig+0x5c0>)
 80072be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80072c0:	e00d      	b.n	80072de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072c2:	f7fc f9b1 	bl	8003628 <HAL_RCC_GetSysClockFreq>
 80072c6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80072c8:	e009      	b.n	80072de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80072d0:	e005      	b.n	80072de <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80072d2:	2300      	movs	r3, #0
 80072d4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80072dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80072de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	f000 8090 	beq.w	8007406 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ea:	4a44      	ldr	r2, [pc, #272]	@ (80073fc <UART_SetConfig+0x5c4>)
 80072ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072f0:	461a      	mov	r2, r3
 80072f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80072f8:	005a      	lsls	r2, r3, #1
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	085b      	lsrs	r3, r3, #1
 8007300:	441a      	add	r2, r3
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	fbb2 f3f3 	udiv	r3, r2, r3
 800730a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800730c:	6a3b      	ldr	r3, [r7, #32]
 800730e:	2b0f      	cmp	r3, #15
 8007310:	d916      	bls.n	8007340 <UART_SetConfig+0x508>
 8007312:	6a3b      	ldr	r3, [r7, #32]
 8007314:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007318:	d212      	bcs.n	8007340 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800731a:	6a3b      	ldr	r3, [r7, #32]
 800731c:	b29b      	uxth	r3, r3
 800731e:	f023 030f 	bic.w	r3, r3, #15
 8007322:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007324:	6a3b      	ldr	r3, [r7, #32]
 8007326:	085b      	lsrs	r3, r3, #1
 8007328:	b29b      	uxth	r3, r3
 800732a:	f003 0307 	and.w	r3, r3, #7
 800732e:	b29a      	uxth	r2, r3
 8007330:	8bfb      	ldrh	r3, [r7, #30]
 8007332:	4313      	orrs	r3, r2
 8007334:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	8bfa      	ldrh	r2, [r7, #30]
 800733c:	60da      	str	r2, [r3, #12]
 800733e:	e062      	b.n	8007406 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007340:	2301      	movs	r3, #1
 8007342:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007346:	e05e      	b.n	8007406 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007348:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800734c:	2b08      	cmp	r3, #8
 800734e:	d828      	bhi.n	80073a2 <UART_SetConfig+0x56a>
 8007350:	a201      	add	r2, pc, #4	@ (adr r2, 8007358 <UART_SetConfig+0x520>)
 8007352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007356:	bf00      	nop
 8007358:	0800737d 	.word	0x0800737d
 800735c:	08007385 	.word	0x08007385
 8007360:	0800738d 	.word	0x0800738d
 8007364:	080073a3 	.word	0x080073a3
 8007368:	08007393 	.word	0x08007393
 800736c:	080073a3 	.word	0x080073a3
 8007370:	080073a3 	.word	0x080073a3
 8007374:	080073a3 	.word	0x080073a3
 8007378:	0800739b 	.word	0x0800739b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800737c:	f7fc f9c2 	bl	8003704 <HAL_RCC_GetPCLK1Freq>
 8007380:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007382:	e014      	b.n	80073ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007384:	f7fc f9d4 	bl	8003730 <HAL_RCC_GetPCLK2Freq>
 8007388:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800738a:	e010      	b.n	80073ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800738c:	4b1a      	ldr	r3, [pc, #104]	@ (80073f8 <UART_SetConfig+0x5c0>)
 800738e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007390:	e00d      	b.n	80073ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007392:	f7fc f949 	bl	8003628 <HAL_RCC_GetSysClockFreq>
 8007396:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007398:	e009      	b.n	80073ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800739a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800739e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80073a0:	e005      	b.n	80073ae <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80073a2:	2300      	movs	r3, #0
 80073a4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80073ac:	bf00      	nop
    }

    if (pclk != 0U)
 80073ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d028      	beq.n	8007406 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073b8:	4a10      	ldr	r2, [pc, #64]	@ (80073fc <UART_SetConfig+0x5c4>)
 80073ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073be:	461a      	mov	r2, r3
 80073c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	085b      	lsrs	r3, r3, #1
 80073cc:	441a      	add	r2, r3
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80073d6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073d8:	6a3b      	ldr	r3, [r7, #32]
 80073da:	2b0f      	cmp	r3, #15
 80073dc:	d910      	bls.n	8007400 <UART_SetConfig+0x5c8>
 80073de:	6a3b      	ldr	r3, [r7, #32]
 80073e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073e4:	d20c      	bcs.n	8007400 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80073e6:	6a3b      	ldr	r3, [r7, #32]
 80073e8:	b29a      	uxth	r2, r3
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	60da      	str	r2, [r3, #12]
 80073f0:	e009      	b.n	8007406 <UART_SetConfig+0x5ce>
 80073f2:	bf00      	nop
 80073f4:	40008000 	.word	0x40008000
 80073f8:	00f42400 	.word	0x00f42400
 80073fc:	080096f4 	.word	0x080096f4
      }
      else
      {
        ret = HAL_ERROR;
 8007400:	2301      	movs	r3, #1
 8007402:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	2201      	movs	r2, #1
 800740a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	2201      	movs	r2, #1
 8007412:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	2200      	movs	r2, #0
 800741a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	2200      	movs	r2, #0
 8007420:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007422:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007426:	4618      	mov	r0, r3
 8007428:	3730      	adds	r7, #48	@ 0x30
 800742a:	46bd      	mov	sp, r7
 800742c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007430 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800743c:	f003 0308 	and.w	r3, r3, #8
 8007440:	2b00      	cmp	r3, #0
 8007442:	d00a      	beq.n	800745a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	430a      	orrs	r2, r1
 8007458:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800745e:	f003 0301 	and.w	r3, r3, #1
 8007462:	2b00      	cmp	r3, #0
 8007464:	d00a      	beq.n	800747c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	430a      	orrs	r2, r1
 800747a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007480:	f003 0302 	and.w	r3, r3, #2
 8007484:	2b00      	cmp	r3, #0
 8007486:	d00a      	beq.n	800749e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	430a      	orrs	r2, r1
 800749c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074a2:	f003 0304 	and.w	r3, r3, #4
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d00a      	beq.n	80074c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	430a      	orrs	r2, r1
 80074be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074c4:	f003 0310 	and.w	r3, r3, #16
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d00a      	beq.n	80074e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	430a      	orrs	r2, r1
 80074e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074e6:	f003 0320 	and.w	r3, r3, #32
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d00a      	beq.n	8007504 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	430a      	orrs	r2, r1
 8007502:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007508:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800750c:	2b00      	cmp	r3, #0
 800750e:	d01a      	beq.n	8007546 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	430a      	orrs	r2, r1
 8007524:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800752a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800752e:	d10a      	bne.n	8007546 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	430a      	orrs	r2, r1
 8007544:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800754a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800754e:	2b00      	cmp	r3, #0
 8007550:	d00a      	beq.n	8007568 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	430a      	orrs	r2, r1
 8007566:	605a      	str	r2, [r3, #4]
  }
}
 8007568:	bf00      	nop
 800756a:	370c      	adds	r7, #12
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr

08007574 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b098      	sub	sp, #96	@ 0x60
 8007578:	af02      	add	r7, sp, #8
 800757a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007584:	f7fa ff84 	bl	8002490 <HAL_GetTick>
 8007588:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f003 0308 	and.w	r3, r3, #8
 8007594:	2b08      	cmp	r3, #8
 8007596:	d12f      	bne.n	80075f8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007598:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800759c:	9300      	str	r3, [sp, #0]
 800759e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075a0:	2200      	movs	r2, #0
 80075a2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 f88e 	bl	80076c8 <UART_WaitOnFlagUntilTimeout>
 80075ac:	4603      	mov	r3, r0
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d022      	beq.n	80075f8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ba:	e853 3f00 	ldrex	r3, [r3]
 80075be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80075c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80075c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	461a      	mov	r2, r3
 80075ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80075d2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80075d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80075d8:	e841 2300 	strex	r3, r2, [r1]
 80075dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80075de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d1e6      	bne.n	80075b2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2220      	movs	r2, #32
 80075e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2200      	movs	r2, #0
 80075f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075f4:	2303      	movs	r3, #3
 80075f6:	e063      	b.n	80076c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f003 0304 	and.w	r3, r3, #4
 8007602:	2b04      	cmp	r3, #4
 8007604:	d149      	bne.n	800769a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007606:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800760a:	9300      	str	r3, [sp, #0]
 800760c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800760e:	2200      	movs	r2, #0
 8007610:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 f857 	bl	80076c8 <UART_WaitOnFlagUntilTimeout>
 800761a:	4603      	mov	r3, r0
 800761c:	2b00      	cmp	r3, #0
 800761e:	d03c      	beq.n	800769a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007628:	e853 3f00 	ldrex	r3, [r3]
 800762c:	623b      	str	r3, [r7, #32]
   return(result);
 800762e:	6a3b      	ldr	r3, [r7, #32]
 8007630:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007634:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	461a      	mov	r2, r3
 800763c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800763e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007640:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007642:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007644:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007646:	e841 2300 	strex	r3, r2, [r1]
 800764a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800764c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800764e:	2b00      	cmp	r3, #0
 8007650:	d1e6      	bne.n	8007620 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	3308      	adds	r3, #8
 8007658:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	e853 3f00 	ldrex	r3, [r3]
 8007660:	60fb      	str	r3, [r7, #12]
   return(result);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	f023 0301 	bic.w	r3, r3, #1
 8007668:	64bb      	str	r3, [r7, #72]	@ 0x48
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	3308      	adds	r3, #8
 8007670:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007672:	61fa      	str	r2, [r7, #28]
 8007674:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007676:	69b9      	ldr	r1, [r7, #24]
 8007678:	69fa      	ldr	r2, [r7, #28]
 800767a:	e841 2300 	strex	r3, r2, [r1]
 800767e:	617b      	str	r3, [r7, #20]
   return(result);
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d1e5      	bne.n	8007652 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2220      	movs	r2, #32
 800768a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007696:	2303      	movs	r3, #3
 8007698:	e012      	b.n	80076c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2220      	movs	r2, #32
 800769e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2220      	movs	r2, #32
 80076a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2200      	movs	r2, #0
 80076b4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80076be:	2300      	movs	r3, #0
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3758      	adds	r7, #88	@ 0x58
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b084      	sub	sp, #16
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	60f8      	str	r0, [r7, #12]
 80076d0:	60b9      	str	r1, [r7, #8]
 80076d2:	603b      	str	r3, [r7, #0]
 80076d4:	4613      	mov	r3, r2
 80076d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076d8:	e04f      	b.n	800777a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076da:	69bb      	ldr	r3, [r7, #24]
 80076dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076e0:	d04b      	beq.n	800777a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076e2:	f7fa fed5 	bl	8002490 <HAL_GetTick>
 80076e6:	4602      	mov	r2, r0
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	1ad3      	subs	r3, r2, r3
 80076ec:	69ba      	ldr	r2, [r7, #24]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d302      	bcc.n	80076f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80076f2:	69bb      	ldr	r3, [r7, #24]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d101      	bne.n	80076fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80076f8:	2303      	movs	r3, #3
 80076fa:	e04e      	b.n	800779a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f003 0304 	and.w	r3, r3, #4
 8007706:	2b00      	cmp	r3, #0
 8007708:	d037      	beq.n	800777a <UART_WaitOnFlagUntilTimeout+0xb2>
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	2b80      	cmp	r3, #128	@ 0x80
 800770e:	d034      	beq.n	800777a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	2b40      	cmp	r3, #64	@ 0x40
 8007714:	d031      	beq.n	800777a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	69db      	ldr	r3, [r3, #28]
 800771c:	f003 0308 	and.w	r3, r3, #8
 8007720:	2b08      	cmp	r3, #8
 8007722:	d110      	bne.n	8007746 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	2208      	movs	r2, #8
 800772a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800772c:	68f8      	ldr	r0, [r7, #12]
 800772e:	f000 f838 	bl	80077a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2208      	movs	r2, #8
 8007736:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2200      	movs	r2, #0
 800773e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007742:	2301      	movs	r3, #1
 8007744:	e029      	b.n	800779a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	69db      	ldr	r3, [r3, #28]
 800774c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007750:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007754:	d111      	bne.n	800777a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800775e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007760:	68f8      	ldr	r0, [r7, #12]
 8007762:	f000 f81e 	bl	80077a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2220      	movs	r2, #32
 800776a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2200      	movs	r2, #0
 8007772:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007776:	2303      	movs	r3, #3
 8007778:	e00f      	b.n	800779a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	69da      	ldr	r2, [r3, #28]
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	4013      	ands	r3, r2
 8007784:	68ba      	ldr	r2, [r7, #8]
 8007786:	429a      	cmp	r2, r3
 8007788:	bf0c      	ite	eq
 800778a:	2301      	moveq	r3, #1
 800778c:	2300      	movne	r3, #0
 800778e:	b2db      	uxtb	r3, r3
 8007790:	461a      	mov	r2, r3
 8007792:	79fb      	ldrb	r3, [r7, #7]
 8007794:	429a      	cmp	r2, r3
 8007796:	d0a0      	beq.n	80076da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007798:	2300      	movs	r3, #0
}
 800779a:	4618      	mov	r0, r3
 800779c:	3710      	adds	r7, #16
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}

080077a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80077a2:	b480      	push	{r7}
 80077a4:	b095      	sub	sp, #84	@ 0x54
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077b2:	e853 3f00 	ldrex	r3, [r3]
 80077b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80077b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80077be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	461a      	mov	r2, r3
 80077c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80077ca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80077ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80077d0:	e841 2300 	strex	r3, r2, [r1]
 80077d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80077d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d1e6      	bne.n	80077aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	3308      	adds	r3, #8
 80077e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e4:	6a3b      	ldr	r3, [r7, #32]
 80077e6:	e853 3f00 	ldrex	r3, [r3]
 80077ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80077f2:	f023 0301 	bic.w	r3, r3, #1
 80077f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	3308      	adds	r3, #8
 80077fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007800:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007802:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007804:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007806:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007808:	e841 2300 	strex	r3, r2, [r1]
 800780c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800780e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007810:	2b00      	cmp	r3, #0
 8007812:	d1e3      	bne.n	80077dc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007818:	2b01      	cmp	r3, #1
 800781a:	d118      	bne.n	800784e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	e853 3f00 	ldrex	r3, [r3]
 8007828:	60bb      	str	r3, [r7, #8]
   return(result);
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	f023 0310 	bic.w	r3, r3, #16
 8007830:	647b      	str	r3, [r7, #68]	@ 0x44
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	461a      	mov	r2, r3
 8007838:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800783a:	61bb      	str	r3, [r7, #24]
 800783c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800783e:	6979      	ldr	r1, [r7, #20]
 8007840:	69ba      	ldr	r2, [r7, #24]
 8007842:	e841 2300 	strex	r3, r2, [r1]
 8007846:	613b      	str	r3, [r7, #16]
   return(result);
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d1e6      	bne.n	800781c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2220      	movs	r2, #32
 8007852:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2200      	movs	r2, #0
 800785a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2200      	movs	r2, #0
 8007860:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007862:	bf00      	nop
 8007864:	3754      	adds	r7, #84	@ 0x54
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr

0800786e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800786e:	b580      	push	{r7, lr}
 8007870:	b084      	sub	sp, #16
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800787a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2200      	movs	r2, #0
 8007880:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2200      	movs	r2, #0
 8007888:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800788c:	68f8      	ldr	r0, [r7, #12]
 800788e:	f7ff fabd 	bl	8006e0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007892:	bf00      	nop
 8007894:	3710      	adds	r7, #16
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}

0800789a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800789a:	b580      	push	{r7, lr}
 800789c:	b088      	sub	sp, #32
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	e853 3f00 	ldrex	r3, [r3]
 80078ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078b6:	61fb      	str	r3, [r7, #28]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	461a      	mov	r2, r3
 80078be:	69fb      	ldr	r3, [r7, #28]
 80078c0:	61bb      	str	r3, [r7, #24]
 80078c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c4:	6979      	ldr	r1, [r7, #20]
 80078c6:	69ba      	ldr	r2, [r7, #24]
 80078c8:	e841 2300 	strex	r3, r2, [r1]
 80078cc:	613b      	str	r3, [r7, #16]
   return(result);
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d1e6      	bne.n	80078a2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2220      	movs	r2, #32
 80078d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2200      	movs	r2, #0
 80078e0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f7ff fa88 	bl	8006df8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078e8:	bf00      	nop
 80078ea:	3720      	adds	r7, #32
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b083      	sub	sp, #12
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80078f8:	bf00      	nop
 80078fa:	370c      	adds	r7, #12
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr

08007904 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007904:	b480      	push	{r7}
 8007906:	b083      	sub	sp, #12
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800790c:	bf00      	nop
 800790e:	370c      	adds	r7, #12
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr

08007918 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007918:	b480      	push	{r7}
 800791a:	b083      	sub	sp, #12
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007920:	bf00      	nop
 8007922:	370c      	adds	r7, #12
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr

0800792c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800792c:	b480      	push	{r7}
 800792e:	b085      	sub	sp, #20
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800793a:	2b01      	cmp	r3, #1
 800793c:	d101      	bne.n	8007942 <HAL_UARTEx_DisableFifoMode+0x16>
 800793e:	2302      	movs	r3, #2
 8007940:	e027      	b.n	8007992 <HAL_UARTEx_DisableFifoMode+0x66>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2201      	movs	r2, #1
 8007946:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2224      	movs	r2, #36	@ 0x24
 800794e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	681a      	ldr	r2, [r3, #0]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f022 0201 	bic.w	r2, r2, #1
 8007968:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007970:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2200      	movs	r2, #0
 8007976:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	68fa      	ldr	r2, [r7, #12]
 800797e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2220      	movs	r2, #32
 8007984:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007990:	2300      	movs	r3, #0
}
 8007992:	4618      	mov	r0, r3
 8007994:	3714      	adds	r7, #20
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr

0800799e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800799e:	b580      	push	{r7, lr}
 80079a0:	b084      	sub	sp, #16
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
 80079a6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d101      	bne.n	80079b6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80079b2:	2302      	movs	r3, #2
 80079b4:	e02d      	b.n	8007a12 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2201      	movs	r2, #1
 80079ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2224      	movs	r2, #36	@ 0x24
 80079c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f022 0201 	bic.w	r2, r2, #1
 80079dc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	683a      	ldr	r2, [r7, #0]
 80079ee:	430a      	orrs	r2, r1
 80079f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 f850 	bl	8007a98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	68fa      	ldr	r2, [r7, #12]
 80079fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2220      	movs	r2, #32
 8007a04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a10:	2300      	movs	r3, #0
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3710      	adds	r7, #16
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}

08007a1a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a1a:	b580      	push	{r7, lr}
 8007a1c:	b084      	sub	sp, #16
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
 8007a22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	d101      	bne.n	8007a32 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007a2e:	2302      	movs	r3, #2
 8007a30:	e02d      	b.n	8007a8e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2201      	movs	r2, #1
 8007a36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2224      	movs	r2, #36	@ 0x24
 8007a3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f022 0201 	bic.w	r2, r2, #1
 8007a58:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	689b      	ldr	r3, [r3, #8]
 8007a60:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	683a      	ldr	r2, [r7, #0]
 8007a6a:	430a      	orrs	r2, r1
 8007a6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 f812 	bl	8007a98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	68fa      	ldr	r2, [r7, #12]
 8007a7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2220      	movs	r2, #32
 8007a80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2200      	movs	r2, #0
 8007a88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a8c:	2300      	movs	r3, #0
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3710      	adds	r7, #16
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
	...

08007a98 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b085      	sub	sp, #20
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d108      	bne.n	8007aba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2201      	movs	r2, #1
 8007aac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007ab8:	e031      	b.n	8007b1e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007aba:	2308      	movs	r3, #8
 8007abc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007abe:	2308      	movs	r3, #8
 8007ac0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	0e5b      	lsrs	r3, r3, #25
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	f003 0307 	and.w	r3, r3, #7
 8007ad0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	0f5b      	lsrs	r3, r3, #29
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	f003 0307 	and.w	r3, r3, #7
 8007ae0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ae2:	7bbb      	ldrb	r3, [r7, #14]
 8007ae4:	7b3a      	ldrb	r2, [r7, #12]
 8007ae6:	4911      	ldr	r1, [pc, #68]	@ (8007b2c <UARTEx_SetNbDataToProcess+0x94>)
 8007ae8:	5c8a      	ldrb	r2, [r1, r2]
 8007aea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007aee:	7b3a      	ldrb	r2, [r7, #12]
 8007af0:	490f      	ldr	r1, [pc, #60]	@ (8007b30 <UARTEx_SetNbDataToProcess+0x98>)
 8007af2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007af4:	fb93 f3f2 	sdiv	r3, r3, r2
 8007af8:	b29a      	uxth	r2, r3
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b00:	7bfb      	ldrb	r3, [r7, #15]
 8007b02:	7b7a      	ldrb	r2, [r7, #13]
 8007b04:	4909      	ldr	r1, [pc, #36]	@ (8007b2c <UARTEx_SetNbDataToProcess+0x94>)
 8007b06:	5c8a      	ldrb	r2, [r1, r2]
 8007b08:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007b0c:	7b7a      	ldrb	r2, [r7, #13]
 8007b0e:	4908      	ldr	r1, [pc, #32]	@ (8007b30 <UARTEx_SetNbDataToProcess+0x98>)
 8007b10:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b12:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b16:	b29a      	uxth	r2, r3
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007b1e:	bf00      	nop
 8007b20:	3714      	adds	r7, #20
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr
 8007b2a:	bf00      	nop
 8007b2c:	0800970c 	.word	0x0800970c
 8007b30:	08009714 	.word	0x08009714

08007b34 <malloc>:
 8007b34:	4b02      	ldr	r3, [pc, #8]	@ (8007b40 <malloc+0xc>)
 8007b36:	4601      	mov	r1, r0
 8007b38:	6818      	ldr	r0, [r3, #0]
 8007b3a:	f000 b82d 	b.w	8007b98 <_malloc_r>
 8007b3e:	bf00      	nop
 8007b40:	2000001c 	.word	0x2000001c

08007b44 <free>:
 8007b44:	4b02      	ldr	r3, [pc, #8]	@ (8007b50 <free+0xc>)
 8007b46:	4601      	mov	r1, r0
 8007b48:	6818      	ldr	r0, [r3, #0]
 8007b4a:	f000 bb95 	b.w	8008278 <_free_r>
 8007b4e:	bf00      	nop
 8007b50:	2000001c 	.word	0x2000001c

08007b54 <sbrk_aligned>:
 8007b54:	b570      	push	{r4, r5, r6, lr}
 8007b56:	4e0f      	ldr	r6, [pc, #60]	@ (8007b94 <sbrk_aligned+0x40>)
 8007b58:	460c      	mov	r4, r1
 8007b5a:	6831      	ldr	r1, [r6, #0]
 8007b5c:	4605      	mov	r5, r0
 8007b5e:	b911      	cbnz	r1, 8007b66 <sbrk_aligned+0x12>
 8007b60:	f000 fb3a 	bl	80081d8 <_sbrk_r>
 8007b64:	6030      	str	r0, [r6, #0]
 8007b66:	4621      	mov	r1, r4
 8007b68:	4628      	mov	r0, r5
 8007b6a:	f000 fb35 	bl	80081d8 <_sbrk_r>
 8007b6e:	1c43      	adds	r3, r0, #1
 8007b70:	d103      	bne.n	8007b7a <sbrk_aligned+0x26>
 8007b72:	f04f 34ff 	mov.w	r4, #4294967295
 8007b76:	4620      	mov	r0, r4
 8007b78:	bd70      	pop	{r4, r5, r6, pc}
 8007b7a:	1cc4      	adds	r4, r0, #3
 8007b7c:	f024 0403 	bic.w	r4, r4, #3
 8007b80:	42a0      	cmp	r0, r4
 8007b82:	d0f8      	beq.n	8007b76 <sbrk_aligned+0x22>
 8007b84:	1a21      	subs	r1, r4, r0
 8007b86:	4628      	mov	r0, r5
 8007b88:	f000 fb26 	bl	80081d8 <_sbrk_r>
 8007b8c:	3001      	adds	r0, #1
 8007b8e:	d1f2      	bne.n	8007b76 <sbrk_aligned+0x22>
 8007b90:	e7ef      	b.n	8007b72 <sbrk_aligned+0x1e>
 8007b92:	bf00      	nop
 8007b94:	20000370 	.word	0x20000370

08007b98 <_malloc_r>:
 8007b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b9c:	1ccd      	adds	r5, r1, #3
 8007b9e:	f025 0503 	bic.w	r5, r5, #3
 8007ba2:	3508      	adds	r5, #8
 8007ba4:	2d0c      	cmp	r5, #12
 8007ba6:	bf38      	it	cc
 8007ba8:	250c      	movcc	r5, #12
 8007baa:	2d00      	cmp	r5, #0
 8007bac:	4606      	mov	r6, r0
 8007bae:	db01      	blt.n	8007bb4 <_malloc_r+0x1c>
 8007bb0:	42a9      	cmp	r1, r5
 8007bb2:	d904      	bls.n	8007bbe <_malloc_r+0x26>
 8007bb4:	230c      	movs	r3, #12
 8007bb6:	6033      	str	r3, [r6, #0]
 8007bb8:	2000      	movs	r0, #0
 8007bba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bbe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007c94 <_malloc_r+0xfc>
 8007bc2:	f000 f869 	bl	8007c98 <__malloc_lock>
 8007bc6:	f8d8 3000 	ldr.w	r3, [r8]
 8007bca:	461c      	mov	r4, r3
 8007bcc:	bb44      	cbnz	r4, 8007c20 <_malloc_r+0x88>
 8007bce:	4629      	mov	r1, r5
 8007bd0:	4630      	mov	r0, r6
 8007bd2:	f7ff ffbf 	bl	8007b54 <sbrk_aligned>
 8007bd6:	1c43      	adds	r3, r0, #1
 8007bd8:	4604      	mov	r4, r0
 8007bda:	d158      	bne.n	8007c8e <_malloc_r+0xf6>
 8007bdc:	f8d8 4000 	ldr.w	r4, [r8]
 8007be0:	4627      	mov	r7, r4
 8007be2:	2f00      	cmp	r7, #0
 8007be4:	d143      	bne.n	8007c6e <_malloc_r+0xd6>
 8007be6:	2c00      	cmp	r4, #0
 8007be8:	d04b      	beq.n	8007c82 <_malloc_r+0xea>
 8007bea:	6823      	ldr	r3, [r4, #0]
 8007bec:	4639      	mov	r1, r7
 8007bee:	4630      	mov	r0, r6
 8007bf0:	eb04 0903 	add.w	r9, r4, r3
 8007bf4:	f000 faf0 	bl	80081d8 <_sbrk_r>
 8007bf8:	4581      	cmp	r9, r0
 8007bfa:	d142      	bne.n	8007c82 <_malloc_r+0xea>
 8007bfc:	6821      	ldr	r1, [r4, #0]
 8007bfe:	1a6d      	subs	r5, r5, r1
 8007c00:	4629      	mov	r1, r5
 8007c02:	4630      	mov	r0, r6
 8007c04:	f7ff ffa6 	bl	8007b54 <sbrk_aligned>
 8007c08:	3001      	adds	r0, #1
 8007c0a:	d03a      	beq.n	8007c82 <_malloc_r+0xea>
 8007c0c:	6823      	ldr	r3, [r4, #0]
 8007c0e:	442b      	add	r3, r5
 8007c10:	6023      	str	r3, [r4, #0]
 8007c12:	f8d8 3000 	ldr.w	r3, [r8]
 8007c16:	685a      	ldr	r2, [r3, #4]
 8007c18:	bb62      	cbnz	r2, 8007c74 <_malloc_r+0xdc>
 8007c1a:	f8c8 7000 	str.w	r7, [r8]
 8007c1e:	e00f      	b.n	8007c40 <_malloc_r+0xa8>
 8007c20:	6822      	ldr	r2, [r4, #0]
 8007c22:	1b52      	subs	r2, r2, r5
 8007c24:	d420      	bmi.n	8007c68 <_malloc_r+0xd0>
 8007c26:	2a0b      	cmp	r2, #11
 8007c28:	d917      	bls.n	8007c5a <_malloc_r+0xc2>
 8007c2a:	1961      	adds	r1, r4, r5
 8007c2c:	42a3      	cmp	r3, r4
 8007c2e:	6025      	str	r5, [r4, #0]
 8007c30:	bf18      	it	ne
 8007c32:	6059      	strne	r1, [r3, #4]
 8007c34:	6863      	ldr	r3, [r4, #4]
 8007c36:	bf08      	it	eq
 8007c38:	f8c8 1000 	streq.w	r1, [r8]
 8007c3c:	5162      	str	r2, [r4, r5]
 8007c3e:	604b      	str	r3, [r1, #4]
 8007c40:	4630      	mov	r0, r6
 8007c42:	f000 f82f 	bl	8007ca4 <__malloc_unlock>
 8007c46:	f104 000b 	add.w	r0, r4, #11
 8007c4a:	1d23      	adds	r3, r4, #4
 8007c4c:	f020 0007 	bic.w	r0, r0, #7
 8007c50:	1ac2      	subs	r2, r0, r3
 8007c52:	bf1c      	itt	ne
 8007c54:	1a1b      	subne	r3, r3, r0
 8007c56:	50a3      	strne	r3, [r4, r2]
 8007c58:	e7af      	b.n	8007bba <_malloc_r+0x22>
 8007c5a:	6862      	ldr	r2, [r4, #4]
 8007c5c:	42a3      	cmp	r3, r4
 8007c5e:	bf0c      	ite	eq
 8007c60:	f8c8 2000 	streq.w	r2, [r8]
 8007c64:	605a      	strne	r2, [r3, #4]
 8007c66:	e7eb      	b.n	8007c40 <_malloc_r+0xa8>
 8007c68:	4623      	mov	r3, r4
 8007c6a:	6864      	ldr	r4, [r4, #4]
 8007c6c:	e7ae      	b.n	8007bcc <_malloc_r+0x34>
 8007c6e:	463c      	mov	r4, r7
 8007c70:	687f      	ldr	r7, [r7, #4]
 8007c72:	e7b6      	b.n	8007be2 <_malloc_r+0x4a>
 8007c74:	461a      	mov	r2, r3
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	42a3      	cmp	r3, r4
 8007c7a:	d1fb      	bne.n	8007c74 <_malloc_r+0xdc>
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	6053      	str	r3, [r2, #4]
 8007c80:	e7de      	b.n	8007c40 <_malloc_r+0xa8>
 8007c82:	230c      	movs	r3, #12
 8007c84:	6033      	str	r3, [r6, #0]
 8007c86:	4630      	mov	r0, r6
 8007c88:	f000 f80c 	bl	8007ca4 <__malloc_unlock>
 8007c8c:	e794      	b.n	8007bb8 <_malloc_r+0x20>
 8007c8e:	6005      	str	r5, [r0, #0]
 8007c90:	e7d6      	b.n	8007c40 <_malloc_r+0xa8>
 8007c92:	bf00      	nop
 8007c94:	20000374 	.word	0x20000374

08007c98 <__malloc_lock>:
 8007c98:	4801      	ldr	r0, [pc, #4]	@ (8007ca0 <__malloc_lock+0x8>)
 8007c9a:	f000 baea 	b.w	8008272 <__retarget_lock_acquire_recursive>
 8007c9e:	bf00      	nop
 8007ca0:	200004b8 	.word	0x200004b8

08007ca4 <__malloc_unlock>:
 8007ca4:	4801      	ldr	r0, [pc, #4]	@ (8007cac <__malloc_unlock+0x8>)
 8007ca6:	f000 bae5 	b.w	8008274 <__retarget_lock_release_recursive>
 8007caa:	bf00      	nop
 8007cac:	200004b8 	.word	0x200004b8

08007cb0 <std>:
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	b510      	push	{r4, lr}
 8007cb4:	4604      	mov	r4, r0
 8007cb6:	e9c0 3300 	strd	r3, r3, [r0]
 8007cba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007cbe:	6083      	str	r3, [r0, #8]
 8007cc0:	8181      	strh	r1, [r0, #12]
 8007cc2:	6643      	str	r3, [r0, #100]	@ 0x64
 8007cc4:	81c2      	strh	r2, [r0, #14]
 8007cc6:	6183      	str	r3, [r0, #24]
 8007cc8:	4619      	mov	r1, r3
 8007cca:	2208      	movs	r2, #8
 8007ccc:	305c      	adds	r0, #92	@ 0x5c
 8007cce:	f000 fa33 	bl	8008138 <memset>
 8007cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8007d08 <std+0x58>)
 8007cd4:	6263      	str	r3, [r4, #36]	@ 0x24
 8007cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8007d0c <std+0x5c>)
 8007cd8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007cda:	4b0d      	ldr	r3, [pc, #52]	@ (8007d10 <std+0x60>)
 8007cdc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007cde:	4b0d      	ldr	r3, [pc, #52]	@ (8007d14 <std+0x64>)
 8007ce0:	6323      	str	r3, [r4, #48]	@ 0x30
 8007ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8007d18 <std+0x68>)
 8007ce4:	6224      	str	r4, [r4, #32]
 8007ce6:	429c      	cmp	r4, r3
 8007ce8:	d006      	beq.n	8007cf8 <std+0x48>
 8007cea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007cee:	4294      	cmp	r4, r2
 8007cf0:	d002      	beq.n	8007cf8 <std+0x48>
 8007cf2:	33d0      	adds	r3, #208	@ 0xd0
 8007cf4:	429c      	cmp	r4, r3
 8007cf6:	d105      	bne.n	8007d04 <std+0x54>
 8007cf8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d00:	f000 bab6 	b.w	8008270 <__retarget_lock_init_recursive>
 8007d04:	bd10      	pop	{r4, pc}
 8007d06:	bf00      	nop
 8007d08:	08007f85 	.word	0x08007f85
 8007d0c:	08007fab 	.word	0x08007fab
 8007d10:	08007fe3 	.word	0x08007fe3
 8007d14:	08008007 	.word	0x08008007
 8007d18:	20000378 	.word	0x20000378

08007d1c <stdio_exit_handler>:
 8007d1c:	4a02      	ldr	r2, [pc, #8]	@ (8007d28 <stdio_exit_handler+0xc>)
 8007d1e:	4903      	ldr	r1, [pc, #12]	@ (8007d2c <stdio_exit_handler+0x10>)
 8007d20:	4803      	ldr	r0, [pc, #12]	@ (8007d30 <stdio_exit_handler+0x14>)
 8007d22:	f000 b869 	b.w	8007df8 <_fwalk_sglue>
 8007d26:	bf00      	nop
 8007d28:	20000010 	.word	0x20000010
 8007d2c:	08009015 	.word	0x08009015
 8007d30:	20000020 	.word	0x20000020

08007d34 <cleanup_stdio>:
 8007d34:	6841      	ldr	r1, [r0, #4]
 8007d36:	4b0c      	ldr	r3, [pc, #48]	@ (8007d68 <cleanup_stdio+0x34>)
 8007d38:	4299      	cmp	r1, r3
 8007d3a:	b510      	push	{r4, lr}
 8007d3c:	4604      	mov	r4, r0
 8007d3e:	d001      	beq.n	8007d44 <cleanup_stdio+0x10>
 8007d40:	f001 f968 	bl	8009014 <_fflush_r>
 8007d44:	68a1      	ldr	r1, [r4, #8]
 8007d46:	4b09      	ldr	r3, [pc, #36]	@ (8007d6c <cleanup_stdio+0x38>)
 8007d48:	4299      	cmp	r1, r3
 8007d4a:	d002      	beq.n	8007d52 <cleanup_stdio+0x1e>
 8007d4c:	4620      	mov	r0, r4
 8007d4e:	f001 f961 	bl	8009014 <_fflush_r>
 8007d52:	68e1      	ldr	r1, [r4, #12]
 8007d54:	4b06      	ldr	r3, [pc, #24]	@ (8007d70 <cleanup_stdio+0x3c>)
 8007d56:	4299      	cmp	r1, r3
 8007d58:	d004      	beq.n	8007d64 <cleanup_stdio+0x30>
 8007d5a:	4620      	mov	r0, r4
 8007d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d60:	f001 b958 	b.w	8009014 <_fflush_r>
 8007d64:	bd10      	pop	{r4, pc}
 8007d66:	bf00      	nop
 8007d68:	20000378 	.word	0x20000378
 8007d6c:	200003e0 	.word	0x200003e0
 8007d70:	20000448 	.word	0x20000448

08007d74 <global_stdio_init.part.0>:
 8007d74:	b510      	push	{r4, lr}
 8007d76:	4b0b      	ldr	r3, [pc, #44]	@ (8007da4 <global_stdio_init.part.0+0x30>)
 8007d78:	4c0b      	ldr	r4, [pc, #44]	@ (8007da8 <global_stdio_init.part.0+0x34>)
 8007d7a:	4a0c      	ldr	r2, [pc, #48]	@ (8007dac <global_stdio_init.part.0+0x38>)
 8007d7c:	601a      	str	r2, [r3, #0]
 8007d7e:	4620      	mov	r0, r4
 8007d80:	2200      	movs	r2, #0
 8007d82:	2104      	movs	r1, #4
 8007d84:	f7ff ff94 	bl	8007cb0 <std>
 8007d88:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	2109      	movs	r1, #9
 8007d90:	f7ff ff8e 	bl	8007cb0 <std>
 8007d94:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007d98:	2202      	movs	r2, #2
 8007d9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d9e:	2112      	movs	r1, #18
 8007da0:	f7ff bf86 	b.w	8007cb0 <std>
 8007da4:	200004b0 	.word	0x200004b0
 8007da8:	20000378 	.word	0x20000378
 8007dac:	08007d1d 	.word	0x08007d1d

08007db0 <__sfp_lock_acquire>:
 8007db0:	4801      	ldr	r0, [pc, #4]	@ (8007db8 <__sfp_lock_acquire+0x8>)
 8007db2:	f000 ba5e 	b.w	8008272 <__retarget_lock_acquire_recursive>
 8007db6:	bf00      	nop
 8007db8:	200004b9 	.word	0x200004b9

08007dbc <__sfp_lock_release>:
 8007dbc:	4801      	ldr	r0, [pc, #4]	@ (8007dc4 <__sfp_lock_release+0x8>)
 8007dbe:	f000 ba59 	b.w	8008274 <__retarget_lock_release_recursive>
 8007dc2:	bf00      	nop
 8007dc4:	200004b9 	.word	0x200004b9

08007dc8 <__sinit>:
 8007dc8:	b510      	push	{r4, lr}
 8007dca:	4604      	mov	r4, r0
 8007dcc:	f7ff fff0 	bl	8007db0 <__sfp_lock_acquire>
 8007dd0:	6a23      	ldr	r3, [r4, #32]
 8007dd2:	b11b      	cbz	r3, 8007ddc <__sinit+0x14>
 8007dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dd8:	f7ff bff0 	b.w	8007dbc <__sfp_lock_release>
 8007ddc:	4b04      	ldr	r3, [pc, #16]	@ (8007df0 <__sinit+0x28>)
 8007dde:	6223      	str	r3, [r4, #32]
 8007de0:	4b04      	ldr	r3, [pc, #16]	@ (8007df4 <__sinit+0x2c>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d1f5      	bne.n	8007dd4 <__sinit+0xc>
 8007de8:	f7ff ffc4 	bl	8007d74 <global_stdio_init.part.0>
 8007dec:	e7f2      	b.n	8007dd4 <__sinit+0xc>
 8007dee:	bf00      	nop
 8007df0:	08007d35 	.word	0x08007d35
 8007df4:	200004b0 	.word	0x200004b0

08007df8 <_fwalk_sglue>:
 8007df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dfc:	4607      	mov	r7, r0
 8007dfe:	4688      	mov	r8, r1
 8007e00:	4614      	mov	r4, r2
 8007e02:	2600      	movs	r6, #0
 8007e04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e08:	f1b9 0901 	subs.w	r9, r9, #1
 8007e0c:	d505      	bpl.n	8007e1a <_fwalk_sglue+0x22>
 8007e0e:	6824      	ldr	r4, [r4, #0]
 8007e10:	2c00      	cmp	r4, #0
 8007e12:	d1f7      	bne.n	8007e04 <_fwalk_sglue+0xc>
 8007e14:	4630      	mov	r0, r6
 8007e16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e1a:	89ab      	ldrh	r3, [r5, #12]
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d907      	bls.n	8007e30 <_fwalk_sglue+0x38>
 8007e20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e24:	3301      	adds	r3, #1
 8007e26:	d003      	beq.n	8007e30 <_fwalk_sglue+0x38>
 8007e28:	4629      	mov	r1, r5
 8007e2a:	4638      	mov	r0, r7
 8007e2c:	47c0      	blx	r8
 8007e2e:	4306      	orrs	r6, r0
 8007e30:	3568      	adds	r5, #104	@ 0x68
 8007e32:	e7e9      	b.n	8007e08 <_fwalk_sglue+0x10>

08007e34 <_puts_r>:
 8007e34:	6a03      	ldr	r3, [r0, #32]
 8007e36:	b570      	push	{r4, r5, r6, lr}
 8007e38:	6884      	ldr	r4, [r0, #8]
 8007e3a:	4605      	mov	r5, r0
 8007e3c:	460e      	mov	r6, r1
 8007e3e:	b90b      	cbnz	r3, 8007e44 <_puts_r+0x10>
 8007e40:	f7ff ffc2 	bl	8007dc8 <__sinit>
 8007e44:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007e46:	07db      	lsls	r3, r3, #31
 8007e48:	d405      	bmi.n	8007e56 <_puts_r+0x22>
 8007e4a:	89a3      	ldrh	r3, [r4, #12]
 8007e4c:	0598      	lsls	r0, r3, #22
 8007e4e:	d402      	bmi.n	8007e56 <_puts_r+0x22>
 8007e50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007e52:	f000 fa0e 	bl	8008272 <__retarget_lock_acquire_recursive>
 8007e56:	89a3      	ldrh	r3, [r4, #12]
 8007e58:	0719      	lsls	r1, r3, #28
 8007e5a:	d502      	bpl.n	8007e62 <_puts_r+0x2e>
 8007e5c:	6923      	ldr	r3, [r4, #16]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d135      	bne.n	8007ece <_puts_r+0x9a>
 8007e62:	4621      	mov	r1, r4
 8007e64:	4628      	mov	r0, r5
 8007e66:	f000 f911 	bl	800808c <__swsetup_r>
 8007e6a:	b380      	cbz	r0, 8007ece <_puts_r+0x9a>
 8007e6c:	f04f 35ff 	mov.w	r5, #4294967295
 8007e70:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007e72:	07da      	lsls	r2, r3, #31
 8007e74:	d405      	bmi.n	8007e82 <_puts_r+0x4e>
 8007e76:	89a3      	ldrh	r3, [r4, #12]
 8007e78:	059b      	lsls	r3, r3, #22
 8007e7a:	d402      	bmi.n	8007e82 <_puts_r+0x4e>
 8007e7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007e7e:	f000 f9f9 	bl	8008274 <__retarget_lock_release_recursive>
 8007e82:	4628      	mov	r0, r5
 8007e84:	bd70      	pop	{r4, r5, r6, pc}
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	da04      	bge.n	8007e94 <_puts_r+0x60>
 8007e8a:	69a2      	ldr	r2, [r4, #24]
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	dc17      	bgt.n	8007ec0 <_puts_r+0x8c>
 8007e90:	290a      	cmp	r1, #10
 8007e92:	d015      	beq.n	8007ec0 <_puts_r+0x8c>
 8007e94:	6823      	ldr	r3, [r4, #0]
 8007e96:	1c5a      	adds	r2, r3, #1
 8007e98:	6022      	str	r2, [r4, #0]
 8007e9a:	7019      	strb	r1, [r3, #0]
 8007e9c:	68a3      	ldr	r3, [r4, #8]
 8007e9e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007ea2:	3b01      	subs	r3, #1
 8007ea4:	60a3      	str	r3, [r4, #8]
 8007ea6:	2900      	cmp	r1, #0
 8007ea8:	d1ed      	bne.n	8007e86 <_puts_r+0x52>
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	da11      	bge.n	8007ed2 <_puts_r+0x9e>
 8007eae:	4622      	mov	r2, r4
 8007eb0:	210a      	movs	r1, #10
 8007eb2:	4628      	mov	r0, r5
 8007eb4:	f000 f8ab 	bl	800800e <__swbuf_r>
 8007eb8:	3001      	adds	r0, #1
 8007eba:	d0d7      	beq.n	8007e6c <_puts_r+0x38>
 8007ebc:	250a      	movs	r5, #10
 8007ebe:	e7d7      	b.n	8007e70 <_puts_r+0x3c>
 8007ec0:	4622      	mov	r2, r4
 8007ec2:	4628      	mov	r0, r5
 8007ec4:	f000 f8a3 	bl	800800e <__swbuf_r>
 8007ec8:	3001      	adds	r0, #1
 8007eca:	d1e7      	bne.n	8007e9c <_puts_r+0x68>
 8007ecc:	e7ce      	b.n	8007e6c <_puts_r+0x38>
 8007ece:	3e01      	subs	r6, #1
 8007ed0:	e7e4      	b.n	8007e9c <_puts_r+0x68>
 8007ed2:	6823      	ldr	r3, [r4, #0]
 8007ed4:	1c5a      	adds	r2, r3, #1
 8007ed6:	6022      	str	r2, [r4, #0]
 8007ed8:	220a      	movs	r2, #10
 8007eda:	701a      	strb	r2, [r3, #0]
 8007edc:	e7ee      	b.n	8007ebc <_puts_r+0x88>
	...

08007ee0 <puts>:
 8007ee0:	4b02      	ldr	r3, [pc, #8]	@ (8007eec <puts+0xc>)
 8007ee2:	4601      	mov	r1, r0
 8007ee4:	6818      	ldr	r0, [r3, #0]
 8007ee6:	f7ff bfa5 	b.w	8007e34 <_puts_r>
 8007eea:	bf00      	nop
 8007eec:	2000001c 	.word	0x2000001c

08007ef0 <siprintf>:
 8007ef0:	b40e      	push	{r1, r2, r3}
 8007ef2:	b500      	push	{lr}
 8007ef4:	b09c      	sub	sp, #112	@ 0x70
 8007ef6:	ab1d      	add	r3, sp, #116	@ 0x74
 8007ef8:	9002      	str	r0, [sp, #8]
 8007efa:	9006      	str	r0, [sp, #24]
 8007efc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007f00:	4809      	ldr	r0, [pc, #36]	@ (8007f28 <siprintf+0x38>)
 8007f02:	9107      	str	r1, [sp, #28]
 8007f04:	9104      	str	r1, [sp, #16]
 8007f06:	4909      	ldr	r1, [pc, #36]	@ (8007f2c <siprintf+0x3c>)
 8007f08:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f0c:	9105      	str	r1, [sp, #20]
 8007f0e:	6800      	ldr	r0, [r0, #0]
 8007f10:	9301      	str	r3, [sp, #4]
 8007f12:	a902      	add	r1, sp, #8
 8007f14:	f000 fa56 	bl	80083c4 <_svfiprintf_r>
 8007f18:	9b02      	ldr	r3, [sp, #8]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	701a      	strb	r2, [r3, #0]
 8007f1e:	b01c      	add	sp, #112	@ 0x70
 8007f20:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f24:	b003      	add	sp, #12
 8007f26:	4770      	bx	lr
 8007f28:	2000001c 	.word	0x2000001c
 8007f2c:	ffff0208 	.word	0xffff0208

08007f30 <siscanf>:
 8007f30:	b40e      	push	{r1, r2, r3}
 8007f32:	b530      	push	{r4, r5, lr}
 8007f34:	b09c      	sub	sp, #112	@ 0x70
 8007f36:	ac1f      	add	r4, sp, #124	@ 0x7c
 8007f38:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8007f3c:	f854 5b04 	ldr.w	r5, [r4], #4
 8007f40:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007f44:	9002      	str	r0, [sp, #8]
 8007f46:	9006      	str	r0, [sp, #24]
 8007f48:	f7f8 f974 	bl	8000234 <strlen>
 8007f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8007f7c <siscanf+0x4c>)
 8007f4e:	9003      	str	r0, [sp, #12]
 8007f50:	9007      	str	r0, [sp, #28]
 8007f52:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007f54:	480a      	ldr	r0, [pc, #40]	@ (8007f80 <siscanf+0x50>)
 8007f56:	9401      	str	r4, [sp, #4]
 8007f58:	2300      	movs	r3, #0
 8007f5a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007f5c:	9314      	str	r3, [sp, #80]	@ 0x50
 8007f5e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007f62:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007f66:	462a      	mov	r2, r5
 8007f68:	4623      	mov	r3, r4
 8007f6a:	a902      	add	r1, sp, #8
 8007f6c:	6800      	ldr	r0, [r0, #0]
 8007f6e:	f000 fb7d 	bl	800866c <__ssvfiscanf_r>
 8007f72:	b01c      	add	sp, #112	@ 0x70
 8007f74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f78:	b003      	add	sp, #12
 8007f7a:	4770      	bx	lr
 8007f7c:	08007fa7 	.word	0x08007fa7
 8007f80:	2000001c 	.word	0x2000001c

08007f84 <__sread>:
 8007f84:	b510      	push	{r4, lr}
 8007f86:	460c      	mov	r4, r1
 8007f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f8c:	f000 f912 	bl	80081b4 <_read_r>
 8007f90:	2800      	cmp	r0, #0
 8007f92:	bfab      	itete	ge
 8007f94:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007f96:	89a3      	ldrhlt	r3, [r4, #12]
 8007f98:	181b      	addge	r3, r3, r0
 8007f9a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007f9e:	bfac      	ite	ge
 8007fa0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007fa2:	81a3      	strhlt	r3, [r4, #12]
 8007fa4:	bd10      	pop	{r4, pc}

08007fa6 <__seofread>:
 8007fa6:	2000      	movs	r0, #0
 8007fa8:	4770      	bx	lr

08007faa <__swrite>:
 8007faa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fae:	461f      	mov	r7, r3
 8007fb0:	898b      	ldrh	r3, [r1, #12]
 8007fb2:	05db      	lsls	r3, r3, #23
 8007fb4:	4605      	mov	r5, r0
 8007fb6:	460c      	mov	r4, r1
 8007fb8:	4616      	mov	r6, r2
 8007fba:	d505      	bpl.n	8007fc8 <__swrite+0x1e>
 8007fbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fc0:	2302      	movs	r3, #2
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f000 f8e4 	bl	8008190 <_lseek_r>
 8007fc8:	89a3      	ldrh	r3, [r4, #12]
 8007fca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007fd2:	81a3      	strh	r3, [r4, #12]
 8007fd4:	4632      	mov	r2, r6
 8007fd6:	463b      	mov	r3, r7
 8007fd8:	4628      	mov	r0, r5
 8007fda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007fde:	f000 b90b 	b.w	80081f8 <_write_r>

08007fe2 <__sseek>:
 8007fe2:	b510      	push	{r4, lr}
 8007fe4:	460c      	mov	r4, r1
 8007fe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fea:	f000 f8d1 	bl	8008190 <_lseek_r>
 8007fee:	1c43      	adds	r3, r0, #1
 8007ff0:	89a3      	ldrh	r3, [r4, #12]
 8007ff2:	bf15      	itete	ne
 8007ff4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007ff6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007ffa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007ffe:	81a3      	strheq	r3, [r4, #12]
 8008000:	bf18      	it	ne
 8008002:	81a3      	strhne	r3, [r4, #12]
 8008004:	bd10      	pop	{r4, pc}

08008006 <__sclose>:
 8008006:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800800a:	f000 b8b1 	b.w	8008170 <_close_r>

0800800e <__swbuf_r>:
 800800e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008010:	460e      	mov	r6, r1
 8008012:	4614      	mov	r4, r2
 8008014:	4605      	mov	r5, r0
 8008016:	b118      	cbz	r0, 8008020 <__swbuf_r+0x12>
 8008018:	6a03      	ldr	r3, [r0, #32]
 800801a:	b90b      	cbnz	r3, 8008020 <__swbuf_r+0x12>
 800801c:	f7ff fed4 	bl	8007dc8 <__sinit>
 8008020:	69a3      	ldr	r3, [r4, #24]
 8008022:	60a3      	str	r3, [r4, #8]
 8008024:	89a3      	ldrh	r3, [r4, #12]
 8008026:	071a      	lsls	r2, r3, #28
 8008028:	d501      	bpl.n	800802e <__swbuf_r+0x20>
 800802a:	6923      	ldr	r3, [r4, #16]
 800802c:	b943      	cbnz	r3, 8008040 <__swbuf_r+0x32>
 800802e:	4621      	mov	r1, r4
 8008030:	4628      	mov	r0, r5
 8008032:	f000 f82b 	bl	800808c <__swsetup_r>
 8008036:	b118      	cbz	r0, 8008040 <__swbuf_r+0x32>
 8008038:	f04f 37ff 	mov.w	r7, #4294967295
 800803c:	4638      	mov	r0, r7
 800803e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008040:	6823      	ldr	r3, [r4, #0]
 8008042:	6922      	ldr	r2, [r4, #16]
 8008044:	1a98      	subs	r0, r3, r2
 8008046:	6963      	ldr	r3, [r4, #20]
 8008048:	b2f6      	uxtb	r6, r6
 800804a:	4283      	cmp	r3, r0
 800804c:	4637      	mov	r7, r6
 800804e:	dc05      	bgt.n	800805c <__swbuf_r+0x4e>
 8008050:	4621      	mov	r1, r4
 8008052:	4628      	mov	r0, r5
 8008054:	f000 ffde 	bl	8009014 <_fflush_r>
 8008058:	2800      	cmp	r0, #0
 800805a:	d1ed      	bne.n	8008038 <__swbuf_r+0x2a>
 800805c:	68a3      	ldr	r3, [r4, #8]
 800805e:	3b01      	subs	r3, #1
 8008060:	60a3      	str	r3, [r4, #8]
 8008062:	6823      	ldr	r3, [r4, #0]
 8008064:	1c5a      	adds	r2, r3, #1
 8008066:	6022      	str	r2, [r4, #0]
 8008068:	701e      	strb	r6, [r3, #0]
 800806a:	6962      	ldr	r2, [r4, #20]
 800806c:	1c43      	adds	r3, r0, #1
 800806e:	429a      	cmp	r2, r3
 8008070:	d004      	beq.n	800807c <__swbuf_r+0x6e>
 8008072:	89a3      	ldrh	r3, [r4, #12]
 8008074:	07db      	lsls	r3, r3, #31
 8008076:	d5e1      	bpl.n	800803c <__swbuf_r+0x2e>
 8008078:	2e0a      	cmp	r6, #10
 800807a:	d1df      	bne.n	800803c <__swbuf_r+0x2e>
 800807c:	4621      	mov	r1, r4
 800807e:	4628      	mov	r0, r5
 8008080:	f000 ffc8 	bl	8009014 <_fflush_r>
 8008084:	2800      	cmp	r0, #0
 8008086:	d0d9      	beq.n	800803c <__swbuf_r+0x2e>
 8008088:	e7d6      	b.n	8008038 <__swbuf_r+0x2a>
	...

0800808c <__swsetup_r>:
 800808c:	b538      	push	{r3, r4, r5, lr}
 800808e:	4b29      	ldr	r3, [pc, #164]	@ (8008134 <__swsetup_r+0xa8>)
 8008090:	4605      	mov	r5, r0
 8008092:	6818      	ldr	r0, [r3, #0]
 8008094:	460c      	mov	r4, r1
 8008096:	b118      	cbz	r0, 80080a0 <__swsetup_r+0x14>
 8008098:	6a03      	ldr	r3, [r0, #32]
 800809a:	b90b      	cbnz	r3, 80080a0 <__swsetup_r+0x14>
 800809c:	f7ff fe94 	bl	8007dc8 <__sinit>
 80080a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080a4:	0719      	lsls	r1, r3, #28
 80080a6:	d422      	bmi.n	80080ee <__swsetup_r+0x62>
 80080a8:	06da      	lsls	r2, r3, #27
 80080aa:	d407      	bmi.n	80080bc <__swsetup_r+0x30>
 80080ac:	2209      	movs	r2, #9
 80080ae:	602a      	str	r2, [r5, #0]
 80080b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080b4:	81a3      	strh	r3, [r4, #12]
 80080b6:	f04f 30ff 	mov.w	r0, #4294967295
 80080ba:	e033      	b.n	8008124 <__swsetup_r+0x98>
 80080bc:	0758      	lsls	r0, r3, #29
 80080be:	d512      	bpl.n	80080e6 <__swsetup_r+0x5a>
 80080c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80080c2:	b141      	cbz	r1, 80080d6 <__swsetup_r+0x4a>
 80080c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80080c8:	4299      	cmp	r1, r3
 80080ca:	d002      	beq.n	80080d2 <__swsetup_r+0x46>
 80080cc:	4628      	mov	r0, r5
 80080ce:	f000 f8d3 	bl	8008278 <_free_r>
 80080d2:	2300      	movs	r3, #0
 80080d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80080d6:	89a3      	ldrh	r3, [r4, #12]
 80080d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80080dc:	81a3      	strh	r3, [r4, #12]
 80080de:	2300      	movs	r3, #0
 80080e0:	6063      	str	r3, [r4, #4]
 80080e2:	6923      	ldr	r3, [r4, #16]
 80080e4:	6023      	str	r3, [r4, #0]
 80080e6:	89a3      	ldrh	r3, [r4, #12]
 80080e8:	f043 0308 	orr.w	r3, r3, #8
 80080ec:	81a3      	strh	r3, [r4, #12]
 80080ee:	6923      	ldr	r3, [r4, #16]
 80080f0:	b94b      	cbnz	r3, 8008106 <__swsetup_r+0x7a>
 80080f2:	89a3      	ldrh	r3, [r4, #12]
 80080f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80080f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080fc:	d003      	beq.n	8008106 <__swsetup_r+0x7a>
 80080fe:	4621      	mov	r1, r4
 8008100:	4628      	mov	r0, r5
 8008102:	f000 ffd5 	bl	80090b0 <__smakebuf_r>
 8008106:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800810a:	f013 0201 	ands.w	r2, r3, #1
 800810e:	d00a      	beq.n	8008126 <__swsetup_r+0x9a>
 8008110:	2200      	movs	r2, #0
 8008112:	60a2      	str	r2, [r4, #8]
 8008114:	6962      	ldr	r2, [r4, #20]
 8008116:	4252      	negs	r2, r2
 8008118:	61a2      	str	r2, [r4, #24]
 800811a:	6922      	ldr	r2, [r4, #16]
 800811c:	b942      	cbnz	r2, 8008130 <__swsetup_r+0xa4>
 800811e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008122:	d1c5      	bne.n	80080b0 <__swsetup_r+0x24>
 8008124:	bd38      	pop	{r3, r4, r5, pc}
 8008126:	0799      	lsls	r1, r3, #30
 8008128:	bf58      	it	pl
 800812a:	6962      	ldrpl	r2, [r4, #20]
 800812c:	60a2      	str	r2, [r4, #8]
 800812e:	e7f4      	b.n	800811a <__swsetup_r+0x8e>
 8008130:	2000      	movs	r0, #0
 8008132:	e7f7      	b.n	8008124 <__swsetup_r+0x98>
 8008134:	2000001c 	.word	0x2000001c

08008138 <memset>:
 8008138:	4402      	add	r2, r0
 800813a:	4603      	mov	r3, r0
 800813c:	4293      	cmp	r3, r2
 800813e:	d100      	bne.n	8008142 <memset+0xa>
 8008140:	4770      	bx	lr
 8008142:	f803 1b01 	strb.w	r1, [r3], #1
 8008146:	e7f9      	b.n	800813c <memset+0x4>

08008148 <strncpy>:
 8008148:	b510      	push	{r4, lr}
 800814a:	3901      	subs	r1, #1
 800814c:	4603      	mov	r3, r0
 800814e:	b132      	cbz	r2, 800815e <strncpy+0x16>
 8008150:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008154:	f803 4b01 	strb.w	r4, [r3], #1
 8008158:	3a01      	subs	r2, #1
 800815a:	2c00      	cmp	r4, #0
 800815c:	d1f7      	bne.n	800814e <strncpy+0x6>
 800815e:	441a      	add	r2, r3
 8008160:	2100      	movs	r1, #0
 8008162:	4293      	cmp	r3, r2
 8008164:	d100      	bne.n	8008168 <strncpy+0x20>
 8008166:	bd10      	pop	{r4, pc}
 8008168:	f803 1b01 	strb.w	r1, [r3], #1
 800816c:	e7f9      	b.n	8008162 <strncpy+0x1a>
	...

08008170 <_close_r>:
 8008170:	b538      	push	{r3, r4, r5, lr}
 8008172:	4d06      	ldr	r5, [pc, #24]	@ (800818c <_close_r+0x1c>)
 8008174:	2300      	movs	r3, #0
 8008176:	4604      	mov	r4, r0
 8008178:	4608      	mov	r0, r1
 800817a:	602b      	str	r3, [r5, #0]
 800817c:	f7fa f87d 	bl	800227a <_close>
 8008180:	1c43      	adds	r3, r0, #1
 8008182:	d102      	bne.n	800818a <_close_r+0x1a>
 8008184:	682b      	ldr	r3, [r5, #0]
 8008186:	b103      	cbz	r3, 800818a <_close_r+0x1a>
 8008188:	6023      	str	r3, [r4, #0]
 800818a:	bd38      	pop	{r3, r4, r5, pc}
 800818c:	200004b4 	.word	0x200004b4

08008190 <_lseek_r>:
 8008190:	b538      	push	{r3, r4, r5, lr}
 8008192:	4d07      	ldr	r5, [pc, #28]	@ (80081b0 <_lseek_r+0x20>)
 8008194:	4604      	mov	r4, r0
 8008196:	4608      	mov	r0, r1
 8008198:	4611      	mov	r1, r2
 800819a:	2200      	movs	r2, #0
 800819c:	602a      	str	r2, [r5, #0]
 800819e:	461a      	mov	r2, r3
 80081a0:	f7fa f892 	bl	80022c8 <_lseek>
 80081a4:	1c43      	adds	r3, r0, #1
 80081a6:	d102      	bne.n	80081ae <_lseek_r+0x1e>
 80081a8:	682b      	ldr	r3, [r5, #0]
 80081aa:	b103      	cbz	r3, 80081ae <_lseek_r+0x1e>
 80081ac:	6023      	str	r3, [r4, #0]
 80081ae:	bd38      	pop	{r3, r4, r5, pc}
 80081b0:	200004b4 	.word	0x200004b4

080081b4 <_read_r>:
 80081b4:	b538      	push	{r3, r4, r5, lr}
 80081b6:	4d07      	ldr	r5, [pc, #28]	@ (80081d4 <_read_r+0x20>)
 80081b8:	4604      	mov	r4, r0
 80081ba:	4608      	mov	r0, r1
 80081bc:	4611      	mov	r1, r2
 80081be:	2200      	movs	r2, #0
 80081c0:	602a      	str	r2, [r5, #0]
 80081c2:	461a      	mov	r2, r3
 80081c4:	f7fa f820 	bl	8002208 <_read>
 80081c8:	1c43      	adds	r3, r0, #1
 80081ca:	d102      	bne.n	80081d2 <_read_r+0x1e>
 80081cc:	682b      	ldr	r3, [r5, #0]
 80081ce:	b103      	cbz	r3, 80081d2 <_read_r+0x1e>
 80081d0:	6023      	str	r3, [r4, #0]
 80081d2:	bd38      	pop	{r3, r4, r5, pc}
 80081d4:	200004b4 	.word	0x200004b4

080081d8 <_sbrk_r>:
 80081d8:	b538      	push	{r3, r4, r5, lr}
 80081da:	4d06      	ldr	r5, [pc, #24]	@ (80081f4 <_sbrk_r+0x1c>)
 80081dc:	2300      	movs	r3, #0
 80081de:	4604      	mov	r4, r0
 80081e0:	4608      	mov	r0, r1
 80081e2:	602b      	str	r3, [r5, #0]
 80081e4:	f7fa f87e 	bl	80022e4 <_sbrk>
 80081e8:	1c43      	adds	r3, r0, #1
 80081ea:	d102      	bne.n	80081f2 <_sbrk_r+0x1a>
 80081ec:	682b      	ldr	r3, [r5, #0]
 80081ee:	b103      	cbz	r3, 80081f2 <_sbrk_r+0x1a>
 80081f0:	6023      	str	r3, [r4, #0]
 80081f2:	bd38      	pop	{r3, r4, r5, pc}
 80081f4:	200004b4 	.word	0x200004b4

080081f8 <_write_r>:
 80081f8:	b538      	push	{r3, r4, r5, lr}
 80081fa:	4d07      	ldr	r5, [pc, #28]	@ (8008218 <_write_r+0x20>)
 80081fc:	4604      	mov	r4, r0
 80081fe:	4608      	mov	r0, r1
 8008200:	4611      	mov	r1, r2
 8008202:	2200      	movs	r2, #0
 8008204:	602a      	str	r2, [r5, #0]
 8008206:	461a      	mov	r2, r3
 8008208:	f7fa f81b 	bl	8002242 <_write>
 800820c:	1c43      	adds	r3, r0, #1
 800820e:	d102      	bne.n	8008216 <_write_r+0x1e>
 8008210:	682b      	ldr	r3, [r5, #0]
 8008212:	b103      	cbz	r3, 8008216 <_write_r+0x1e>
 8008214:	6023      	str	r3, [r4, #0]
 8008216:	bd38      	pop	{r3, r4, r5, pc}
 8008218:	200004b4 	.word	0x200004b4

0800821c <__errno>:
 800821c:	4b01      	ldr	r3, [pc, #4]	@ (8008224 <__errno+0x8>)
 800821e:	6818      	ldr	r0, [r3, #0]
 8008220:	4770      	bx	lr
 8008222:	bf00      	nop
 8008224:	2000001c 	.word	0x2000001c

08008228 <__libc_init_array>:
 8008228:	b570      	push	{r4, r5, r6, lr}
 800822a:	4d0d      	ldr	r5, [pc, #52]	@ (8008260 <__libc_init_array+0x38>)
 800822c:	4c0d      	ldr	r4, [pc, #52]	@ (8008264 <__libc_init_array+0x3c>)
 800822e:	1b64      	subs	r4, r4, r5
 8008230:	10a4      	asrs	r4, r4, #2
 8008232:	2600      	movs	r6, #0
 8008234:	42a6      	cmp	r6, r4
 8008236:	d109      	bne.n	800824c <__libc_init_array+0x24>
 8008238:	4d0b      	ldr	r5, [pc, #44]	@ (8008268 <__libc_init_array+0x40>)
 800823a:	4c0c      	ldr	r4, [pc, #48]	@ (800826c <__libc_init_array+0x44>)
 800823c:	f001 f954 	bl	80094e8 <_init>
 8008240:	1b64      	subs	r4, r4, r5
 8008242:	10a4      	asrs	r4, r4, #2
 8008244:	2600      	movs	r6, #0
 8008246:	42a6      	cmp	r6, r4
 8008248:	d105      	bne.n	8008256 <__libc_init_array+0x2e>
 800824a:	bd70      	pop	{r4, r5, r6, pc}
 800824c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008250:	4798      	blx	r3
 8008252:	3601      	adds	r6, #1
 8008254:	e7ee      	b.n	8008234 <__libc_init_array+0xc>
 8008256:	f855 3b04 	ldr.w	r3, [r5], #4
 800825a:	4798      	blx	r3
 800825c:	3601      	adds	r6, #1
 800825e:	e7f2      	b.n	8008246 <__libc_init_array+0x1e>
 8008260:	08009874 	.word	0x08009874
 8008264:	08009874 	.word	0x08009874
 8008268:	08009874 	.word	0x08009874
 800826c:	08009878 	.word	0x08009878

08008270 <__retarget_lock_init_recursive>:
 8008270:	4770      	bx	lr

08008272 <__retarget_lock_acquire_recursive>:
 8008272:	4770      	bx	lr

08008274 <__retarget_lock_release_recursive>:
 8008274:	4770      	bx	lr
	...

08008278 <_free_r>:
 8008278:	b538      	push	{r3, r4, r5, lr}
 800827a:	4605      	mov	r5, r0
 800827c:	2900      	cmp	r1, #0
 800827e:	d041      	beq.n	8008304 <_free_r+0x8c>
 8008280:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008284:	1f0c      	subs	r4, r1, #4
 8008286:	2b00      	cmp	r3, #0
 8008288:	bfb8      	it	lt
 800828a:	18e4      	addlt	r4, r4, r3
 800828c:	f7ff fd04 	bl	8007c98 <__malloc_lock>
 8008290:	4a1d      	ldr	r2, [pc, #116]	@ (8008308 <_free_r+0x90>)
 8008292:	6813      	ldr	r3, [r2, #0]
 8008294:	b933      	cbnz	r3, 80082a4 <_free_r+0x2c>
 8008296:	6063      	str	r3, [r4, #4]
 8008298:	6014      	str	r4, [r2, #0]
 800829a:	4628      	mov	r0, r5
 800829c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082a0:	f7ff bd00 	b.w	8007ca4 <__malloc_unlock>
 80082a4:	42a3      	cmp	r3, r4
 80082a6:	d908      	bls.n	80082ba <_free_r+0x42>
 80082a8:	6820      	ldr	r0, [r4, #0]
 80082aa:	1821      	adds	r1, r4, r0
 80082ac:	428b      	cmp	r3, r1
 80082ae:	bf01      	itttt	eq
 80082b0:	6819      	ldreq	r1, [r3, #0]
 80082b2:	685b      	ldreq	r3, [r3, #4]
 80082b4:	1809      	addeq	r1, r1, r0
 80082b6:	6021      	streq	r1, [r4, #0]
 80082b8:	e7ed      	b.n	8008296 <_free_r+0x1e>
 80082ba:	461a      	mov	r2, r3
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	b10b      	cbz	r3, 80082c4 <_free_r+0x4c>
 80082c0:	42a3      	cmp	r3, r4
 80082c2:	d9fa      	bls.n	80082ba <_free_r+0x42>
 80082c4:	6811      	ldr	r1, [r2, #0]
 80082c6:	1850      	adds	r0, r2, r1
 80082c8:	42a0      	cmp	r0, r4
 80082ca:	d10b      	bne.n	80082e4 <_free_r+0x6c>
 80082cc:	6820      	ldr	r0, [r4, #0]
 80082ce:	4401      	add	r1, r0
 80082d0:	1850      	adds	r0, r2, r1
 80082d2:	4283      	cmp	r3, r0
 80082d4:	6011      	str	r1, [r2, #0]
 80082d6:	d1e0      	bne.n	800829a <_free_r+0x22>
 80082d8:	6818      	ldr	r0, [r3, #0]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	6053      	str	r3, [r2, #4]
 80082de:	4408      	add	r0, r1
 80082e0:	6010      	str	r0, [r2, #0]
 80082e2:	e7da      	b.n	800829a <_free_r+0x22>
 80082e4:	d902      	bls.n	80082ec <_free_r+0x74>
 80082e6:	230c      	movs	r3, #12
 80082e8:	602b      	str	r3, [r5, #0]
 80082ea:	e7d6      	b.n	800829a <_free_r+0x22>
 80082ec:	6820      	ldr	r0, [r4, #0]
 80082ee:	1821      	adds	r1, r4, r0
 80082f0:	428b      	cmp	r3, r1
 80082f2:	bf04      	itt	eq
 80082f4:	6819      	ldreq	r1, [r3, #0]
 80082f6:	685b      	ldreq	r3, [r3, #4]
 80082f8:	6063      	str	r3, [r4, #4]
 80082fa:	bf04      	itt	eq
 80082fc:	1809      	addeq	r1, r1, r0
 80082fe:	6021      	streq	r1, [r4, #0]
 8008300:	6054      	str	r4, [r2, #4]
 8008302:	e7ca      	b.n	800829a <_free_r+0x22>
 8008304:	bd38      	pop	{r3, r4, r5, pc}
 8008306:	bf00      	nop
 8008308:	20000374 	.word	0x20000374

0800830c <__ssputs_r>:
 800830c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008310:	688e      	ldr	r6, [r1, #8]
 8008312:	461f      	mov	r7, r3
 8008314:	42be      	cmp	r6, r7
 8008316:	680b      	ldr	r3, [r1, #0]
 8008318:	4682      	mov	sl, r0
 800831a:	460c      	mov	r4, r1
 800831c:	4690      	mov	r8, r2
 800831e:	d82d      	bhi.n	800837c <__ssputs_r+0x70>
 8008320:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008324:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008328:	d026      	beq.n	8008378 <__ssputs_r+0x6c>
 800832a:	6965      	ldr	r5, [r4, #20]
 800832c:	6909      	ldr	r1, [r1, #16]
 800832e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008332:	eba3 0901 	sub.w	r9, r3, r1
 8008336:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800833a:	1c7b      	adds	r3, r7, #1
 800833c:	444b      	add	r3, r9
 800833e:	106d      	asrs	r5, r5, #1
 8008340:	429d      	cmp	r5, r3
 8008342:	bf38      	it	cc
 8008344:	461d      	movcc	r5, r3
 8008346:	0553      	lsls	r3, r2, #21
 8008348:	d527      	bpl.n	800839a <__ssputs_r+0x8e>
 800834a:	4629      	mov	r1, r5
 800834c:	f7ff fc24 	bl	8007b98 <_malloc_r>
 8008350:	4606      	mov	r6, r0
 8008352:	b360      	cbz	r0, 80083ae <__ssputs_r+0xa2>
 8008354:	6921      	ldr	r1, [r4, #16]
 8008356:	464a      	mov	r2, r9
 8008358:	f000 ff96 	bl	8009288 <memcpy>
 800835c:	89a3      	ldrh	r3, [r4, #12]
 800835e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008362:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008366:	81a3      	strh	r3, [r4, #12]
 8008368:	6126      	str	r6, [r4, #16]
 800836a:	6165      	str	r5, [r4, #20]
 800836c:	444e      	add	r6, r9
 800836e:	eba5 0509 	sub.w	r5, r5, r9
 8008372:	6026      	str	r6, [r4, #0]
 8008374:	60a5      	str	r5, [r4, #8]
 8008376:	463e      	mov	r6, r7
 8008378:	42be      	cmp	r6, r7
 800837a:	d900      	bls.n	800837e <__ssputs_r+0x72>
 800837c:	463e      	mov	r6, r7
 800837e:	6820      	ldr	r0, [r4, #0]
 8008380:	4632      	mov	r2, r6
 8008382:	4641      	mov	r1, r8
 8008384:	f000 ff43 	bl	800920e <memmove>
 8008388:	68a3      	ldr	r3, [r4, #8]
 800838a:	1b9b      	subs	r3, r3, r6
 800838c:	60a3      	str	r3, [r4, #8]
 800838e:	6823      	ldr	r3, [r4, #0]
 8008390:	4433      	add	r3, r6
 8008392:	6023      	str	r3, [r4, #0]
 8008394:	2000      	movs	r0, #0
 8008396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800839a:	462a      	mov	r2, r5
 800839c:	f000 ff82 	bl	80092a4 <_realloc_r>
 80083a0:	4606      	mov	r6, r0
 80083a2:	2800      	cmp	r0, #0
 80083a4:	d1e0      	bne.n	8008368 <__ssputs_r+0x5c>
 80083a6:	6921      	ldr	r1, [r4, #16]
 80083a8:	4650      	mov	r0, sl
 80083aa:	f7ff ff65 	bl	8008278 <_free_r>
 80083ae:	230c      	movs	r3, #12
 80083b0:	f8ca 3000 	str.w	r3, [sl]
 80083b4:	89a3      	ldrh	r3, [r4, #12]
 80083b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083ba:	81a3      	strh	r3, [r4, #12]
 80083bc:	f04f 30ff 	mov.w	r0, #4294967295
 80083c0:	e7e9      	b.n	8008396 <__ssputs_r+0x8a>
	...

080083c4 <_svfiprintf_r>:
 80083c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083c8:	4698      	mov	r8, r3
 80083ca:	898b      	ldrh	r3, [r1, #12]
 80083cc:	061b      	lsls	r3, r3, #24
 80083ce:	b09d      	sub	sp, #116	@ 0x74
 80083d0:	4607      	mov	r7, r0
 80083d2:	460d      	mov	r5, r1
 80083d4:	4614      	mov	r4, r2
 80083d6:	d510      	bpl.n	80083fa <_svfiprintf_r+0x36>
 80083d8:	690b      	ldr	r3, [r1, #16]
 80083da:	b973      	cbnz	r3, 80083fa <_svfiprintf_r+0x36>
 80083dc:	2140      	movs	r1, #64	@ 0x40
 80083de:	f7ff fbdb 	bl	8007b98 <_malloc_r>
 80083e2:	6028      	str	r0, [r5, #0]
 80083e4:	6128      	str	r0, [r5, #16]
 80083e6:	b930      	cbnz	r0, 80083f6 <_svfiprintf_r+0x32>
 80083e8:	230c      	movs	r3, #12
 80083ea:	603b      	str	r3, [r7, #0]
 80083ec:	f04f 30ff 	mov.w	r0, #4294967295
 80083f0:	b01d      	add	sp, #116	@ 0x74
 80083f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083f6:	2340      	movs	r3, #64	@ 0x40
 80083f8:	616b      	str	r3, [r5, #20]
 80083fa:	2300      	movs	r3, #0
 80083fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80083fe:	2320      	movs	r3, #32
 8008400:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008404:	f8cd 800c 	str.w	r8, [sp, #12]
 8008408:	2330      	movs	r3, #48	@ 0x30
 800840a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80085a8 <_svfiprintf_r+0x1e4>
 800840e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008412:	f04f 0901 	mov.w	r9, #1
 8008416:	4623      	mov	r3, r4
 8008418:	469a      	mov	sl, r3
 800841a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800841e:	b10a      	cbz	r2, 8008424 <_svfiprintf_r+0x60>
 8008420:	2a25      	cmp	r2, #37	@ 0x25
 8008422:	d1f9      	bne.n	8008418 <_svfiprintf_r+0x54>
 8008424:	ebba 0b04 	subs.w	fp, sl, r4
 8008428:	d00b      	beq.n	8008442 <_svfiprintf_r+0x7e>
 800842a:	465b      	mov	r3, fp
 800842c:	4622      	mov	r2, r4
 800842e:	4629      	mov	r1, r5
 8008430:	4638      	mov	r0, r7
 8008432:	f7ff ff6b 	bl	800830c <__ssputs_r>
 8008436:	3001      	adds	r0, #1
 8008438:	f000 80a7 	beq.w	800858a <_svfiprintf_r+0x1c6>
 800843c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800843e:	445a      	add	r2, fp
 8008440:	9209      	str	r2, [sp, #36]	@ 0x24
 8008442:	f89a 3000 	ldrb.w	r3, [sl]
 8008446:	2b00      	cmp	r3, #0
 8008448:	f000 809f 	beq.w	800858a <_svfiprintf_r+0x1c6>
 800844c:	2300      	movs	r3, #0
 800844e:	f04f 32ff 	mov.w	r2, #4294967295
 8008452:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008456:	f10a 0a01 	add.w	sl, sl, #1
 800845a:	9304      	str	r3, [sp, #16]
 800845c:	9307      	str	r3, [sp, #28]
 800845e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008462:	931a      	str	r3, [sp, #104]	@ 0x68
 8008464:	4654      	mov	r4, sl
 8008466:	2205      	movs	r2, #5
 8008468:	f814 1b01 	ldrb.w	r1, [r4], #1
 800846c:	484e      	ldr	r0, [pc, #312]	@ (80085a8 <_svfiprintf_r+0x1e4>)
 800846e:	f7f7 feef 	bl	8000250 <memchr>
 8008472:	9a04      	ldr	r2, [sp, #16]
 8008474:	b9d8      	cbnz	r0, 80084ae <_svfiprintf_r+0xea>
 8008476:	06d0      	lsls	r0, r2, #27
 8008478:	bf44      	itt	mi
 800847a:	2320      	movmi	r3, #32
 800847c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008480:	0711      	lsls	r1, r2, #28
 8008482:	bf44      	itt	mi
 8008484:	232b      	movmi	r3, #43	@ 0x2b
 8008486:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800848a:	f89a 3000 	ldrb.w	r3, [sl]
 800848e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008490:	d015      	beq.n	80084be <_svfiprintf_r+0xfa>
 8008492:	9a07      	ldr	r2, [sp, #28]
 8008494:	4654      	mov	r4, sl
 8008496:	2000      	movs	r0, #0
 8008498:	f04f 0c0a 	mov.w	ip, #10
 800849c:	4621      	mov	r1, r4
 800849e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084a2:	3b30      	subs	r3, #48	@ 0x30
 80084a4:	2b09      	cmp	r3, #9
 80084a6:	d94b      	bls.n	8008540 <_svfiprintf_r+0x17c>
 80084a8:	b1b0      	cbz	r0, 80084d8 <_svfiprintf_r+0x114>
 80084aa:	9207      	str	r2, [sp, #28]
 80084ac:	e014      	b.n	80084d8 <_svfiprintf_r+0x114>
 80084ae:	eba0 0308 	sub.w	r3, r0, r8
 80084b2:	fa09 f303 	lsl.w	r3, r9, r3
 80084b6:	4313      	orrs	r3, r2
 80084b8:	9304      	str	r3, [sp, #16]
 80084ba:	46a2      	mov	sl, r4
 80084bc:	e7d2      	b.n	8008464 <_svfiprintf_r+0xa0>
 80084be:	9b03      	ldr	r3, [sp, #12]
 80084c0:	1d19      	adds	r1, r3, #4
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	9103      	str	r1, [sp, #12]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	bfbb      	ittet	lt
 80084ca:	425b      	neglt	r3, r3
 80084cc:	f042 0202 	orrlt.w	r2, r2, #2
 80084d0:	9307      	strge	r3, [sp, #28]
 80084d2:	9307      	strlt	r3, [sp, #28]
 80084d4:	bfb8      	it	lt
 80084d6:	9204      	strlt	r2, [sp, #16]
 80084d8:	7823      	ldrb	r3, [r4, #0]
 80084da:	2b2e      	cmp	r3, #46	@ 0x2e
 80084dc:	d10a      	bne.n	80084f4 <_svfiprintf_r+0x130>
 80084de:	7863      	ldrb	r3, [r4, #1]
 80084e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80084e2:	d132      	bne.n	800854a <_svfiprintf_r+0x186>
 80084e4:	9b03      	ldr	r3, [sp, #12]
 80084e6:	1d1a      	adds	r2, r3, #4
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	9203      	str	r2, [sp, #12]
 80084ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80084f0:	3402      	adds	r4, #2
 80084f2:	9305      	str	r3, [sp, #20]
 80084f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80085b8 <_svfiprintf_r+0x1f4>
 80084f8:	7821      	ldrb	r1, [r4, #0]
 80084fa:	2203      	movs	r2, #3
 80084fc:	4650      	mov	r0, sl
 80084fe:	f7f7 fea7 	bl	8000250 <memchr>
 8008502:	b138      	cbz	r0, 8008514 <_svfiprintf_r+0x150>
 8008504:	9b04      	ldr	r3, [sp, #16]
 8008506:	eba0 000a 	sub.w	r0, r0, sl
 800850a:	2240      	movs	r2, #64	@ 0x40
 800850c:	4082      	lsls	r2, r0
 800850e:	4313      	orrs	r3, r2
 8008510:	3401      	adds	r4, #1
 8008512:	9304      	str	r3, [sp, #16]
 8008514:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008518:	4824      	ldr	r0, [pc, #144]	@ (80085ac <_svfiprintf_r+0x1e8>)
 800851a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800851e:	2206      	movs	r2, #6
 8008520:	f7f7 fe96 	bl	8000250 <memchr>
 8008524:	2800      	cmp	r0, #0
 8008526:	d036      	beq.n	8008596 <_svfiprintf_r+0x1d2>
 8008528:	4b21      	ldr	r3, [pc, #132]	@ (80085b0 <_svfiprintf_r+0x1ec>)
 800852a:	bb1b      	cbnz	r3, 8008574 <_svfiprintf_r+0x1b0>
 800852c:	9b03      	ldr	r3, [sp, #12]
 800852e:	3307      	adds	r3, #7
 8008530:	f023 0307 	bic.w	r3, r3, #7
 8008534:	3308      	adds	r3, #8
 8008536:	9303      	str	r3, [sp, #12]
 8008538:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800853a:	4433      	add	r3, r6
 800853c:	9309      	str	r3, [sp, #36]	@ 0x24
 800853e:	e76a      	b.n	8008416 <_svfiprintf_r+0x52>
 8008540:	fb0c 3202 	mla	r2, ip, r2, r3
 8008544:	460c      	mov	r4, r1
 8008546:	2001      	movs	r0, #1
 8008548:	e7a8      	b.n	800849c <_svfiprintf_r+0xd8>
 800854a:	2300      	movs	r3, #0
 800854c:	3401      	adds	r4, #1
 800854e:	9305      	str	r3, [sp, #20]
 8008550:	4619      	mov	r1, r3
 8008552:	f04f 0c0a 	mov.w	ip, #10
 8008556:	4620      	mov	r0, r4
 8008558:	f810 2b01 	ldrb.w	r2, [r0], #1
 800855c:	3a30      	subs	r2, #48	@ 0x30
 800855e:	2a09      	cmp	r2, #9
 8008560:	d903      	bls.n	800856a <_svfiprintf_r+0x1a6>
 8008562:	2b00      	cmp	r3, #0
 8008564:	d0c6      	beq.n	80084f4 <_svfiprintf_r+0x130>
 8008566:	9105      	str	r1, [sp, #20]
 8008568:	e7c4      	b.n	80084f4 <_svfiprintf_r+0x130>
 800856a:	fb0c 2101 	mla	r1, ip, r1, r2
 800856e:	4604      	mov	r4, r0
 8008570:	2301      	movs	r3, #1
 8008572:	e7f0      	b.n	8008556 <_svfiprintf_r+0x192>
 8008574:	ab03      	add	r3, sp, #12
 8008576:	9300      	str	r3, [sp, #0]
 8008578:	462a      	mov	r2, r5
 800857a:	4b0e      	ldr	r3, [pc, #56]	@ (80085b4 <_svfiprintf_r+0x1f0>)
 800857c:	a904      	add	r1, sp, #16
 800857e:	4638      	mov	r0, r7
 8008580:	f3af 8000 	nop.w
 8008584:	1c42      	adds	r2, r0, #1
 8008586:	4606      	mov	r6, r0
 8008588:	d1d6      	bne.n	8008538 <_svfiprintf_r+0x174>
 800858a:	89ab      	ldrh	r3, [r5, #12]
 800858c:	065b      	lsls	r3, r3, #25
 800858e:	f53f af2d 	bmi.w	80083ec <_svfiprintf_r+0x28>
 8008592:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008594:	e72c      	b.n	80083f0 <_svfiprintf_r+0x2c>
 8008596:	ab03      	add	r3, sp, #12
 8008598:	9300      	str	r3, [sp, #0]
 800859a:	462a      	mov	r2, r5
 800859c:	4b05      	ldr	r3, [pc, #20]	@ (80085b4 <_svfiprintf_r+0x1f0>)
 800859e:	a904      	add	r1, sp, #16
 80085a0:	4638      	mov	r0, r7
 80085a2:	f000 fa45 	bl	8008a30 <_printf_i>
 80085a6:	e7ed      	b.n	8008584 <_svfiprintf_r+0x1c0>
 80085a8:	0800971c 	.word	0x0800971c
 80085ac:	08009726 	.word	0x08009726
 80085b0:	00000000 	.word	0x00000000
 80085b4:	0800830d 	.word	0x0800830d
 80085b8:	08009722 	.word	0x08009722

080085bc <_sungetc_r>:
 80085bc:	b538      	push	{r3, r4, r5, lr}
 80085be:	1c4b      	adds	r3, r1, #1
 80085c0:	4614      	mov	r4, r2
 80085c2:	d103      	bne.n	80085cc <_sungetc_r+0x10>
 80085c4:	f04f 35ff 	mov.w	r5, #4294967295
 80085c8:	4628      	mov	r0, r5
 80085ca:	bd38      	pop	{r3, r4, r5, pc}
 80085cc:	8993      	ldrh	r3, [r2, #12]
 80085ce:	f023 0320 	bic.w	r3, r3, #32
 80085d2:	8193      	strh	r3, [r2, #12]
 80085d4:	6853      	ldr	r3, [r2, #4]
 80085d6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80085d8:	b2cd      	uxtb	r5, r1
 80085da:	b18a      	cbz	r2, 8008600 <_sungetc_r+0x44>
 80085dc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80085de:	429a      	cmp	r2, r3
 80085e0:	dd08      	ble.n	80085f4 <_sungetc_r+0x38>
 80085e2:	6823      	ldr	r3, [r4, #0]
 80085e4:	1e5a      	subs	r2, r3, #1
 80085e6:	6022      	str	r2, [r4, #0]
 80085e8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80085ec:	6863      	ldr	r3, [r4, #4]
 80085ee:	3301      	adds	r3, #1
 80085f0:	6063      	str	r3, [r4, #4]
 80085f2:	e7e9      	b.n	80085c8 <_sungetc_r+0xc>
 80085f4:	4621      	mov	r1, r4
 80085f6:	f000 fdd0 	bl	800919a <__submore>
 80085fa:	2800      	cmp	r0, #0
 80085fc:	d0f1      	beq.n	80085e2 <_sungetc_r+0x26>
 80085fe:	e7e1      	b.n	80085c4 <_sungetc_r+0x8>
 8008600:	6921      	ldr	r1, [r4, #16]
 8008602:	6822      	ldr	r2, [r4, #0]
 8008604:	b141      	cbz	r1, 8008618 <_sungetc_r+0x5c>
 8008606:	4291      	cmp	r1, r2
 8008608:	d206      	bcs.n	8008618 <_sungetc_r+0x5c>
 800860a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800860e:	42a9      	cmp	r1, r5
 8008610:	d102      	bne.n	8008618 <_sungetc_r+0x5c>
 8008612:	3a01      	subs	r2, #1
 8008614:	6022      	str	r2, [r4, #0]
 8008616:	e7ea      	b.n	80085ee <_sungetc_r+0x32>
 8008618:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800861c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008620:	6363      	str	r3, [r4, #52]	@ 0x34
 8008622:	2303      	movs	r3, #3
 8008624:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008626:	4623      	mov	r3, r4
 8008628:	f803 5f46 	strb.w	r5, [r3, #70]!
 800862c:	6023      	str	r3, [r4, #0]
 800862e:	2301      	movs	r3, #1
 8008630:	e7de      	b.n	80085f0 <_sungetc_r+0x34>

08008632 <__ssrefill_r>:
 8008632:	b510      	push	{r4, lr}
 8008634:	460c      	mov	r4, r1
 8008636:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8008638:	b169      	cbz	r1, 8008656 <__ssrefill_r+0x24>
 800863a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800863e:	4299      	cmp	r1, r3
 8008640:	d001      	beq.n	8008646 <__ssrefill_r+0x14>
 8008642:	f7ff fe19 	bl	8008278 <_free_r>
 8008646:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008648:	6063      	str	r3, [r4, #4]
 800864a:	2000      	movs	r0, #0
 800864c:	6360      	str	r0, [r4, #52]	@ 0x34
 800864e:	b113      	cbz	r3, 8008656 <__ssrefill_r+0x24>
 8008650:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008652:	6023      	str	r3, [r4, #0]
 8008654:	bd10      	pop	{r4, pc}
 8008656:	6923      	ldr	r3, [r4, #16]
 8008658:	6023      	str	r3, [r4, #0]
 800865a:	2300      	movs	r3, #0
 800865c:	6063      	str	r3, [r4, #4]
 800865e:	89a3      	ldrh	r3, [r4, #12]
 8008660:	f043 0320 	orr.w	r3, r3, #32
 8008664:	81a3      	strh	r3, [r4, #12]
 8008666:	f04f 30ff 	mov.w	r0, #4294967295
 800866a:	e7f3      	b.n	8008654 <__ssrefill_r+0x22>

0800866c <__ssvfiscanf_r>:
 800866c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008670:	460c      	mov	r4, r1
 8008672:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8008676:	2100      	movs	r1, #0
 8008678:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800867c:	49a5      	ldr	r1, [pc, #660]	@ (8008914 <__ssvfiscanf_r+0x2a8>)
 800867e:	91a0      	str	r1, [sp, #640]	@ 0x280
 8008680:	f10d 0804 	add.w	r8, sp, #4
 8008684:	49a4      	ldr	r1, [pc, #656]	@ (8008918 <__ssvfiscanf_r+0x2ac>)
 8008686:	4fa5      	ldr	r7, [pc, #660]	@ (800891c <__ssvfiscanf_r+0x2b0>)
 8008688:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800868c:	4606      	mov	r6, r0
 800868e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8008690:	9300      	str	r3, [sp, #0]
 8008692:	7813      	ldrb	r3, [r2, #0]
 8008694:	2b00      	cmp	r3, #0
 8008696:	f000 8158 	beq.w	800894a <__ssvfiscanf_r+0x2de>
 800869a:	5cf9      	ldrb	r1, [r7, r3]
 800869c:	f011 0108 	ands.w	r1, r1, #8
 80086a0:	f102 0501 	add.w	r5, r2, #1
 80086a4:	d019      	beq.n	80086da <__ssvfiscanf_r+0x6e>
 80086a6:	6863      	ldr	r3, [r4, #4]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	dd0f      	ble.n	80086cc <__ssvfiscanf_r+0x60>
 80086ac:	6823      	ldr	r3, [r4, #0]
 80086ae:	781a      	ldrb	r2, [r3, #0]
 80086b0:	5cba      	ldrb	r2, [r7, r2]
 80086b2:	0712      	lsls	r2, r2, #28
 80086b4:	d401      	bmi.n	80086ba <__ssvfiscanf_r+0x4e>
 80086b6:	462a      	mov	r2, r5
 80086b8:	e7eb      	b.n	8008692 <__ssvfiscanf_r+0x26>
 80086ba:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80086bc:	3201      	adds	r2, #1
 80086be:	9245      	str	r2, [sp, #276]	@ 0x114
 80086c0:	6862      	ldr	r2, [r4, #4]
 80086c2:	3301      	adds	r3, #1
 80086c4:	3a01      	subs	r2, #1
 80086c6:	6062      	str	r2, [r4, #4]
 80086c8:	6023      	str	r3, [r4, #0]
 80086ca:	e7ec      	b.n	80086a6 <__ssvfiscanf_r+0x3a>
 80086cc:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80086ce:	4621      	mov	r1, r4
 80086d0:	4630      	mov	r0, r6
 80086d2:	4798      	blx	r3
 80086d4:	2800      	cmp	r0, #0
 80086d6:	d0e9      	beq.n	80086ac <__ssvfiscanf_r+0x40>
 80086d8:	e7ed      	b.n	80086b6 <__ssvfiscanf_r+0x4a>
 80086da:	2b25      	cmp	r3, #37	@ 0x25
 80086dc:	d012      	beq.n	8008704 <__ssvfiscanf_r+0x98>
 80086de:	4699      	mov	r9, r3
 80086e0:	6863      	ldr	r3, [r4, #4]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	f340 8093 	ble.w	800880e <__ssvfiscanf_r+0x1a2>
 80086e8:	6822      	ldr	r2, [r4, #0]
 80086ea:	7813      	ldrb	r3, [r2, #0]
 80086ec:	454b      	cmp	r3, r9
 80086ee:	f040 812c 	bne.w	800894a <__ssvfiscanf_r+0x2de>
 80086f2:	6863      	ldr	r3, [r4, #4]
 80086f4:	3b01      	subs	r3, #1
 80086f6:	6063      	str	r3, [r4, #4]
 80086f8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80086fa:	3201      	adds	r2, #1
 80086fc:	3301      	adds	r3, #1
 80086fe:	6022      	str	r2, [r4, #0]
 8008700:	9345      	str	r3, [sp, #276]	@ 0x114
 8008702:	e7d8      	b.n	80086b6 <__ssvfiscanf_r+0x4a>
 8008704:	9141      	str	r1, [sp, #260]	@ 0x104
 8008706:	9143      	str	r1, [sp, #268]	@ 0x10c
 8008708:	7853      	ldrb	r3, [r2, #1]
 800870a:	2b2a      	cmp	r3, #42	@ 0x2a
 800870c:	bf02      	ittt	eq
 800870e:	2310      	moveq	r3, #16
 8008710:	1c95      	addeq	r5, r2, #2
 8008712:	9341      	streq	r3, [sp, #260]	@ 0x104
 8008714:	220a      	movs	r2, #10
 8008716:	46a9      	mov	r9, r5
 8008718:	f819 1b01 	ldrb.w	r1, [r9], #1
 800871c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8008720:	2b09      	cmp	r3, #9
 8008722:	d91e      	bls.n	8008762 <__ssvfiscanf_r+0xf6>
 8008724:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8008920 <__ssvfiscanf_r+0x2b4>
 8008728:	2203      	movs	r2, #3
 800872a:	4650      	mov	r0, sl
 800872c:	f7f7 fd90 	bl	8000250 <memchr>
 8008730:	b138      	cbz	r0, 8008742 <__ssvfiscanf_r+0xd6>
 8008732:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008734:	eba0 000a 	sub.w	r0, r0, sl
 8008738:	2301      	movs	r3, #1
 800873a:	4083      	lsls	r3, r0
 800873c:	4313      	orrs	r3, r2
 800873e:	9341      	str	r3, [sp, #260]	@ 0x104
 8008740:	464d      	mov	r5, r9
 8008742:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008746:	2b78      	cmp	r3, #120	@ 0x78
 8008748:	d806      	bhi.n	8008758 <__ssvfiscanf_r+0xec>
 800874a:	2b57      	cmp	r3, #87	@ 0x57
 800874c:	d810      	bhi.n	8008770 <__ssvfiscanf_r+0x104>
 800874e:	2b25      	cmp	r3, #37	@ 0x25
 8008750:	d0c5      	beq.n	80086de <__ssvfiscanf_r+0x72>
 8008752:	d857      	bhi.n	8008804 <__ssvfiscanf_r+0x198>
 8008754:	2b00      	cmp	r3, #0
 8008756:	d065      	beq.n	8008824 <__ssvfiscanf_r+0x1b8>
 8008758:	2303      	movs	r3, #3
 800875a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800875c:	230a      	movs	r3, #10
 800875e:	9342      	str	r3, [sp, #264]	@ 0x108
 8008760:	e078      	b.n	8008854 <__ssvfiscanf_r+0x1e8>
 8008762:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8008764:	fb02 1103 	mla	r1, r2, r3, r1
 8008768:	3930      	subs	r1, #48	@ 0x30
 800876a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800876c:	464d      	mov	r5, r9
 800876e:	e7d2      	b.n	8008716 <__ssvfiscanf_r+0xaa>
 8008770:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8008774:	2a20      	cmp	r2, #32
 8008776:	d8ef      	bhi.n	8008758 <__ssvfiscanf_r+0xec>
 8008778:	a101      	add	r1, pc, #4	@ (adr r1, 8008780 <__ssvfiscanf_r+0x114>)
 800877a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800877e:	bf00      	nop
 8008780:	08008833 	.word	0x08008833
 8008784:	08008759 	.word	0x08008759
 8008788:	08008759 	.word	0x08008759
 800878c:	0800888d 	.word	0x0800888d
 8008790:	08008759 	.word	0x08008759
 8008794:	08008759 	.word	0x08008759
 8008798:	08008759 	.word	0x08008759
 800879c:	08008759 	.word	0x08008759
 80087a0:	08008759 	.word	0x08008759
 80087a4:	08008759 	.word	0x08008759
 80087a8:	08008759 	.word	0x08008759
 80087ac:	080088a3 	.word	0x080088a3
 80087b0:	08008889 	.word	0x08008889
 80087b4:	0800880b 	.word	0x0800880b
 80087b8:	0800880b 	.word	0x0800880b
 80087bc:	0800880b 	.word	0x0800880b
 80087c0:	08008759 	.word	0x08008759
 80087c4:	08008845 	.word	0x08008845
 80087c8:	08008759 	.word	0x08008759
 80087cc:	08008759 	.word	0x08008759
 80087d0:	08008759 	.word	0x08008759
 80087d4:	08008759 	.word	0x08008759
 80087d8:	080088b3 	.word	0x080088b3
 80087dc:	0800884d 	.word	0x0800884d
 80087e0:	0800882b 	.word	0x0800882b
 80087e4:	08008759 	.word	0x08008759
 80087e8:	08008759 	.word	0x08008759
 80087ec:	080088af 	.word	0x080088af
 80087f0:	08008759 	.word	0x08008759
 80087f4:	08008889 	.word	0x08008889
 80087f8:	08008759 	.word	0x08008759
 80087fc:	08008759 	.word	0x08008759
 8008800:	08008833 	.word	0x08008833
 8008804:	3b45      	subs	r3, #69	@ 0x45
 8008806:	2b02      	cmp	r3, #2
 8008808:	d8a6      	bhi.n	8008758 <__ssvfiscanf_r+0xec>
 800880a:	2305      	movs	r3, #5
 800880c:	e021      	b.n	8008852 <__ssvfiscanf_r+0x1e6>
 800880e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008810:	4621      	mov	r1, r4
 8008812:	4630      	mov	r0, r6
 8008814:	4798      	blx	r3
 8008816:	2800      	cmp	r0, #0
 8008818:	f43f af66 	beq.w	80086e8 <__ssvfiscanf_r+0x7c>
 800881c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800881e:	2800      	cmp	r0, #0
 8008820:	f040 808b 	bne.w	800893a <__ssvfiscanf_r+0x2ce>
 8008824:	f04f 30ff 	mov.w	r0, #4294967295
 8008828:	e08b      	b.n	8008942 <__ssvfiscanf_r+0x2d6>
 800882a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800882c:	f042 0220 	orr.w	r2, r2, #32
 8008830:	9241      	str	r2, [sp, #260]	@ 0x104
 8008832:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008834:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008838:	9241      	str	r2, [sp, #260]	@ 0x104
 800883a:	2210      	movs	r2, #16
 800883c:	2b6e      	cmp	r3, #110	@ 0x6e
 800883e:	9242      	str	r2, [sp, #264]	@ 0x108
 8008840:	d902      	bls.n	8008848 <__ssvfiscanf_r+0x1dc>
 8008842:	e005      	b.n	8008850 <__ssvfiscanf_r+0x1e4>
 8008844:	2300      	movs	r3, #0
 8008846:	9342      	str	r3, [sp, #264]	@ 0x108
 8008848:	2303      	movs	r3, #3
 800884a:	e002      	b.n	8008852 <__ssvfiscanf_r+0x1e6>
 800884c:	2308      	movs	r3, #8
 800884e:	9342      	str	r3, [sp, #264]	@ 0x108
 8008850:	2304      	movs	r3, #4
 8008852:	9347      	str	r3, [sp, #284]	@ 0x11c
 8008854:	6863      	ldr	r3, [r4, #4]
 8008856:	2b00      	cmp	r3, #0
 8008858:	dd39      	ble.n	80088ce <__ssvfiscanf_r+0x262>
 800885a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800885c:	0659      	lsls	r1, r3, #25
 800885e:	d404      	bmi.n	800886a <__ssvfiscanf_r+0x1fe>
 8008860:	6823      	ldr	r3, [r4, #0]
 8008862:	781a      	ldrb	r2, [r3, #0]
 8008864:	5cba      	ldrb	r2, [r7, r2]
 8008866:	0712      	lsls	r2, r2, #28
 8008868:	d438      	bmi.n	80088dc <__ssvfiscanf_r+0x270>
 800886a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800886c:	2b02      	cmp	r3, #2
 800886e:	dc47      	bgt.n	8008900 <__ssvfiscanf_r+0x294>
 8008870:	466b      	mov	r3, sp
 8008872:	4622      	mov	r2, r4
 8008874:	a941      	add	r1, sp, #260	@ 0x104
 8008876:	4630      	mov	r0, r6
 8008878:	f000 f9fa 	bl	8008c70 <_scanf_chars>
 800887c:	2801      	cmp	r0, #1
 800887e:	d064      	beq.n	800894a <__ssvfiscanf_r+0x2de>
 8008880:	2802      	cmp	r0, #2
 8008882:	f47f af18 	bne.w	80086b6 <__ssvfiscanf_r+0x4a>
 8008886:	e7c9      	b.n	800881c <__ssvfiscanf_r+0x1b0>
 8008888:	220a      	movs	r2, #10
 800888a:	e7d7      	b.n	800883c <__ssvfiscanf_r+0x1d0>
 800888c:	4629      	mov	r1, r5
 800888e:	4640      	mov	r0, r8
 8008890:	f000 fc4a 	bl	8009128 <__sccl>
 8008894:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008896:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800889a:	9341      	str	r3, [sp, #260]	@ 0x104
 800889c:	4605      	mov	r5, r0
 800889e:	2301      	movs	r3, #1
 80088a0:	e7d7      	b.n	8008852 <__ssvfiscanf_r+0x1e6>
 80088a2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80088a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088a8:	9341      	str	r3, [sp, #260]	@ 0x104
 80088aa:	2300      	movs	r3, #0
 80088ac:	e7d1      	b.n	8008852 <__ssvfiscanf_r+0x1e6>
 80088ae:	2302      	movs	r3, #2
 80088b0:	e7cf      	b.n	8008852 <__ssvfiscanf_r+0x1e6>
 80088b2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80088b4:	06c3      	lsls	r3, r0, #27
 80088b6:	f53f aefe 	bmi.w	80086b6 <__ssvfiscanf_r+0x4a>
 80088ba:	9b00      	ldr	r3, [sp, #0]
 80088bc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80088be:	1d19      	adds	r1, r3, #4
 80088c0:	9100      	str	r1, [sp, #0]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	07c0      	lsls	r0, r0, #31
 80088c6:	bf4c      	ite	mi
 80088c8:	801a      	strhmi	r2, [r3, #0]
 80088ca:	601a      	strpl	r2, [r3, #0]
 80088cc:	e6f3      	b.n	80086b6 <__ssvfiscanf_r+0x4a>
 80088ce:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80088d0:	4621      	mov	r1, r4
 80088d2:	4630      	mov	r0, r6
 80088d4:	4798      	blx	r3
 80088d6:	2800      	cmp	r0, #0
 80088d8:	d0bf      	beq.n	800885a <__ssvfiscanf_r+0x1ee>
 80088da:	e79f      	b.n	800881c <__ssvfiscanf_r+0x1b0>
 80088dc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80088de:	3201      	adds	r2, #1
 80088e0:	9245      	str	r2, [sp, #276]	@ 0x114
 80088e2:	6862      	ldr	r2, [r4, #4]
 80088e4:	3a01      	subs	r2, #1
 80088e6:	2a00      	cmp	r2, #0
 80088e8:	6062      	str	r2, [r4, #4]
 80088ea:	dd02      	ble.n	80088f2 <__ssvfiscanf_r+0x286>
 80088ec:	3301      	adds	r3, #1
 80088ee:	6023      	str	r3, [r4, #0]
 80088f0:	e7b6      	b.n	8008860 <__ssvfiscanf_r+0x1f4>
 80088f2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80088f4:	4621      	mov	r1, r4
 80088f6:	4630      	mov	r0, r6
 80088f8:	4798      	blx	r3
 80088fa:	2800      	cmp	r0, #0
 80088fc:	d0b0      	beq.n	8008860 <__ssvfiscanf_r+0x1f4>
 80088fe:	e78d      	b.n	800881c <__ssvfiscanf_r+0x1b0>
 8008900:	2b04      	cmp	r3, #4
 8008902:	dc0f      	bgt.n	8008924 <__ssvfiscanf_r+0x2b8>
 8008904:	466b      	mov	r3, sp
 8008906:	4622      	mov	r2, r4
 8008908:	a941      	add	r1, sp, #260	@ 0x104
 800890a:	4630      	mov	r0, r6
 800890c:	f000 fa0a 	bl	8008d24 <_scanf_i>
 8008910:	e7b4      	b.n	800887c <__ssvfiscanf_r+0x210>
 8008912:	bf00      	nop
 8008914:	080085bd 	.word	0x080085bd
 8008918:	08008633 	.word	0x08008633
 800891c:	0800976b 	.word	0x0800976b
 8008920:	08009722 	.word	0x08009722
 8008924:	4b0a      	ldr	r3, [pc, #40]	@ (8008950 <__ssvfiscanf_r+0x2e4>)
 8008926:	2b00      	cmp	r3, #0
 8008928:	f43f aec5 	beq.w	80086b6 <__ssvfiscanf_r+0x4a>
 800892c:	466b      	mov	r3, sp
 800892e:	4622      	mov	r2, r4
 8008930:	a941      	add	r1, sp, #260	@ 0x104
 8008932:	4630      	mov	r0, r6
 8008934:	f3af 8000 	nop.w
 8008938:	e7a0      	b.n	800887c <__ssvfiscanf_r+0x210>
 800893a:	89a3      	ldrh	r3, [r4, #12]
 800893c:	065b      	lsls	r3, r3, #25
 800893e:	f53f af71 	bmi.w	8008824 <__ssvfiscanf_r+0x1b8>
 8008942:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8008946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800894a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800894c:	e7f9      	b.n	8008942 <__ssvfiscanf_r+0x2d6>
 800894e:	bf00      	nop
 8008950:	00000000 	.word	0x00000000

08008954 <_printf_common>:
 8008954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008958:	4616      	mov	r6, r2
 800895a:	4698      	mov	r8, r3
 800895c:	688a      	ldr	r2, [r1, #8]
 800895e:	690b      	ldr	r3, [r1, #16]
 8008960:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008964:	4293      	cmp	r3, r2
 8008966:	bfb8      	it	lt
 8008968:	4613      	movlt	r3, r2
 800896a:	6033      	str	r3, [r6, #0]
 800896c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008970:	4607      	mov	r7, r0
 8008972:	460c      	mov	r4, r1
 8008974:	b10a      	cbz	r2, 800897a <_printf_common+0x26>
 8008976:	3301      	adds	r3, #1
 8008978:	6033      	str	r3, [r6, #0]
 800897a:	6823      	ldr	r3, [r4, #0]
 800897c:	0699      	lsls	r1, r3, #26
 800897e:	bf42      	ittt	mi
 8008980:	6833      	ldrmi	r3, [r6, #0]
 8008982:	3302      	addmi	r3, #2
 8008984:	6033      	strmi	r3, [r6, #0]
 8008986:	6825      	ldr	r5, [r4, #0]
 8008988:	f015 0506 	ands.w	r5, r5, #6
 800898c:	d106      	bne.n	800899c <_printf_common+0x48>
 800898e:	f104 0a19 	add.w	sl, r4, #25
 8008992:	68e3      	ldr	r3, [r4, #12]
 8008994:	6832      	ldr	r2, [r6, #0]
 8008996:	1a9b      	subs	r3, r3, r2
 8008998:	42ab      	cmp	r3, r5
 800899a:	dc26      	bgt.n	80089ea <_printf_common+0x96>
 800899c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80089a0:	6822      	ldr	r2, [r4, #0]
 80089a2:	3b00      	subs	r3, #0
 80089a4:	bf18      	it	ne
 80089a6:	2301      	movne	r3, #1
 80089a8:	0692      	lsls	r2, r2, #26
 80089aa:	d42b      	bmi.n	8008a04 <_printf_common+0xb0>
 80089ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80089b0:	4641      	mov	r1, r8
 80089b2:	4638      	mov	r0, r7
 80089b4:	47c8      	blx	r9
 80089b6:	3001      	adds	r0, #1
 80089b8:	d01e      	beq.n	80089f8 <_printf_common+0xa4>
 80089ba:	6823      	ldr	r3, [r4, #0]
 80089bc:	6922      	ldr	r2, [r4, #16]
 80089be:	f003 0306 	and.w	r3, r3, #6
 80089c2:	2b04      	cmp	r3, #4
 80089c4:	bf02      	ittt	eq
 80089c6:	68e5      	ldreq	r5, [r4, #12]
 80089c8:	6833      	ldreq	r3, [r6, #0]
 80089ca:	1aed      	subeq	r5, r5, r3
 80089cc:	68a3      	ldr	r3, [r4, #8]
 80089ce:	bf0c      	ite	eq
 80089d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089d4:	2500      	movne	r5, #0
 80089d6:	4293      	cmp	r3, r2
 80089d8:	bfc4      	itt	gt
 80089da:	1a9b      	subgt	r3, r3, r2
 80089dc:	18ed      	addgt	r5, r5, r3
 80089de:	2600      	movs	r6, #0
 80089e0:	341a      	adds	r4, #26
 80089e2:	42b5      	cmp	r5, r6
 80089e4:	d11a      	bne.n	8008a1c <_printf_common+0xc8>
 80089e6:	2000      	movs	r0, #0
 80089e8:	e008      	b.n	80089fc <_printf_common+0xa8>
 80089ea:	2301      	movs	r3, #1
 80089ec:	4652      	mov	r2, sl
 80089ee:	4641      	mov	r1, r8
 80089f0:	4638      	mov	r0, r7
 80089f2:	47c8      	blx	r9
 80089f4:	3001      	adds	r0, #1
 80089f6:	d103      	bne.n	8008a00 <_printf_common+0xac>
 80089f8:	f04f 30ff 	mov.w	r0, #4294967295
 80089fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a00:	3501      	adds	r5, #1
 8008a02:	e7c6      	b.n	8008992 <_printf_common+0x3e>
 8008a04:	18e1      	adds	r1, r4, r3
 8008a06:	1c5a      	adds	r2, r3, #1
 8008a08:	2030      	movs	r0, #48	@ 0x30
 8008a0a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008a0e:	4422      	add	r2, r4
 8008a10:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008a14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008a18:	3302      	adds	r3, #2
 8008a1a:	e7c7      	b.n	80089ac <_printf_common+0x58>
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	4622      	mov	r2, r4
 8008a20:	4641      	mov	r1, r8
 8008a22:	4638      	mov	r0, r7
 8008a24:	47c8      	blx	r9
 8008a26:	3001      	adds	r0, #1
 8008a28:	d0e6      	beq.n	80089f8 <_printf_common+0xa4>
 8008a2a:	3601      	adds	r6, #1
 8008a2c:	e7d9      	b.n	80089e2 <_printf_common+0x8e>
	...

08008a30 <_printf_i>:
 8008a30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a34:	7e0f      	ldrb	r7, [r1, #24]
 8008a36:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008a38:	2f78      	cmp	r7, #120	@ 0x78
 8008a3a:	4691      	mov	r9, r2
 8008a3c:	4680      	mov	r8, r0
 8008a3e:	460c      	mov	r4, r1
 8008a40:	469a      	mov	sl, r3
 8008a42:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008a46:	d807      	bhi.n	8008a58 <_printf_i+0x28>
 8008a48:	2f62      	cmp	r7, #98	@ 0x62
 8008a4a:	d80a      	bhi.n	8008a62 <_printf_i+0x32>
 8008a4c:	2f00      	cmp	r7, #0
 8008a4e:	f000 80d2 	beq.w	8008bf6 <_printf_i+0x1c6>
 8008a52:	2f58      	cmp	r7, #88	@ 0x58
 8008a54:	f000 80b9 	beq.w	8008bca <_printf_i+0x19a>
 8008a58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a5c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008a60:	e03a      	b.n	8008ad8 <_printf_i+0xa8>
 8008a62:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008a66:	2b15      	cmp	r3, #21
 8008a68:	d8f6      	bhi.n	8008a58 <_printf_i+0x28>
 8008a6a:	a101      	add	r1, pc, #4	@ (adr r1, 8008a70 <_printf_i+0x40>)
 8008a6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a70:	08008ac9 	.word	0x08008ac9
 8008a74:	08008add 	.word	0x08008add
 8008a78:	08008a59 	.word	0x08008a59
 8008a7c:	08008a59 	.word	0x08008a59
 8008a80:	08008a59 	.word	0x08008a59
 8008a84:	08008a59 	.word	0x08008a59
 8008a88:	08008add 	.word	0x08008add
 8008a8c:	08008a59 	.word	0x08008a59
 8008a90:	08008a59 	.word	0x08008a59
 8008a94:	08008a59 	.word	0x08008a59
 8008a98:	08008a59 	.word	0x08008a59
 8008a9c:	08008bdd 	.word	0x08008bdd
 8008aa0:	08008b07 	.word	0x08008b07
 8008aa4:	08008b97 	.word	0x08008b97
 8008aa8:	08008a59 	.word	0x08008a59
 8008aac:	08008a59 	.word	0x08008a59
 8008ab0:	08008bff 	.word	0x08008bff
 8008ab4:	08008a59 	.word	0x08008a59
 8008ab8:	08008b07 	.word	0x08008b07
 8008abc:	08008a59 	.word	0x08008a59
 8008ac0:	08008a59 	.word	0x08008a59
 8008ac4:	08008b9f 	.word	0x08008b9f
 8008ac8:	6833      	ldr	r3, [r6, #0]
 8008aca:	1d1a      	adds	r2, r3, #4
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	6032      	str	r2, [r6, #0]
 8008ad0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008ad4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008ad8:	2301      	movs	r3, #1
 8008ada:	e09d      	b.n	8008c18 <_printf_i+0x1e8>
 8008adc:	6833      	ldr	r3, [r6, #0]
 8008ade:	6820      	ldr	r0, [r4, #0]
 8008ae0:	1d19      	adds	r1, r3, #4
 8008ae2:	6031      	str	r1, [r6, #0]
 8008ae4:	0606      	lsls	r6, r0, #24
 8008ae6:	d501      	bpl.n	8008aec <_printf_i+0xbc>
 8008ae8:	681d      	ldr	r5, [r3, #0]
 8008aea:	e003      	b.n	8008af4 <_printf_i+0xc4>
 8008aec:	0645      	lsls	r5, r0, #25
 8008aee:	d5fb      	bpl.n	8008ae8 <_printf_i+0xb8>
 8008af0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008af4:	2d00      	cmp	r5, #0
 8008af6:	da03      	bge.n	8008b00 <_printf_i+0xd0>
 8008af8:	232d      	movs	r3, #45	@ 0x2d
 8008afa:	426d      	negs	r5, r5
 8008afc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b00:	4859      	ldr	r0, [pc, #356]	@ (8008c68 <_printf_i+0x238>)
 8008b02:	230a      	movs	r3, #10
 8008b04:	e011      	b.n	8008b2a <_printf_i+0xfa>
 8008b06:	6821      	ldr	r1, [r4, #0]
 8008b08:	6833      	ldr	r3, [r6, #0]
 8008b0a:	0608      	lsls	r0, r1, #24
 8008b0c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008b10:	d402      	bmi.n	8008b18 <_printf_i+0xe8>
 8008b12:	0649      	lsls	r1, r1, #25
 8008b14:	bf48      	it	mi
 8008b16:	b2ad      	uxthmi	r5, r5
 8008b18:	2f6f      	cmp	r7, #111	@ 0x6f
 8008b1a:	4853      	ldr	r0, [pc, #332]	@ (8008c68 <_printf_i+0x238>)
 8008b1c:	6033      	str	r3, [r6, #0]
 8008b1e:	bf14      	ite	ne
 8008b20:	230a      	movne	r3, #10
 8008b22:	2308      	moveq	r3, #8
 8008b24:	2100      	movs	r1, #0
 8008b26:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008b2a:	6866      	ldr	r6, [r4, #4]
 8008b2c:	60a6      	str	r6, [r4, #8]
 8008b2e:	2e00      	cmp	r6, #0
 8008b30:	bfa2      	ittt	ge
 8008b32:	6821      	ldrge	r1, [r4, #0]
 8008b34:	f021 0104 	bicge.w	r1, r1, #4
 8008b38:	6021      	strge	r1, [r4, #0]
 8008b3a:	b90d      	cbnz	r5, 8008b40 <_printf_i+0x110>
 8008b3c:	2e00      	cmp	r6, #0
 8008b3e:	d04b      	beq.n	8008bd8 <_printf_i+0x1a8>
 8008b40:	4616      	mov	r6, r2
 8008b42:	fbb5 f1f3 	udiv	r1, r5, r3
 8008b46:	fb03 5711 	mls	r7, r3, r1, r5
 8008b4a:	5dc7      	ldrb	r7, [r0, r7]
 8008b4c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008b50:	462f      	mov	r7, r5
 8008b52:	42bb      	cmp	r3, r7
 8008b54:	460d      	mov	r5, r1
 8008b56:	d9f4      	bls.n	8008b42 <_printf_i+0x112>
 8008b58:	2b08      	cmp	r3, #8
 8008b5a:	d10b      	bne.n	8008b74 <_printf_i+0x144>
 8008b5c:	6823      	ldr	r3, [r4, #0]
 8008b5e:	07df      	lsls	r7, r3, #31
 8008b60:	d508      	bpl.n	8008b74 <_printf_i+0x144>
 8008b62:	6923      	ldr	r3, [r4, #16]
 8008b64:	6861      	ldr	r1, [r4, #4]
 8008b66:	4299      	cmp	r1, r3
 8008b68:	bfde      	ittt	le
 8008b6a:	2330      	movle	r3, #48	@ 0x30
 8008b6c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008b70:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008b74:	1b92      	subs	r2, r2, r6
 8008b76:	6122      	str	r2, [r4, #16]
 8008b78:	f8cd a000 	str.w	sl, [sp]
 8008b7c:	464b      	mov	r3, r9
 8008b7e:	aa03      	add	r2, sp, #12
 8008b80:	4621      	mov	r1, r4
 8008b82:	4640      	mov	r0, r8
 8008b84:	f7ff fee6 	bl	8008954 <_printf_common>
 8008b88:	3001      	adds	r0, #1
 8008b8a:	d14a      	bne.n	8008c22 <_printf_i+0x1f2>
 8008b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b90:	b004      	add	sp, #16
 8008b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b96:	6823      	ldr	r3, [r4, #0]
 8008b98:	f043 0320 	orr.w	r3, r3, #32
 8008b9c:	6023      	str	r3, [r4, #0]
 8008b9e:	4833      	ldr	r0, [pc, #204]	@ (8008c6c <_printf_i+0x23c>)
 8008ba0:	2778      	movs	r7, #120	@ 0x78
 8008ba2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008ba6:	6823      	ldr	r3, [r4, #0]
 8008ba8:	6831      	ldr	r1, [r6, #0]
 8008baa:	061f      	lsls	r7, r3, #24
 8008bac:	f851 5b04 	ldr.w	r5, [r1], #4
 8008bb0:	d402      	bmi.n	8008bb8 <_printf_i+0x188>
 8008bb2:	065f      	lsls	r7, r3, #25
 8008bb4:	bf48      	it	mi
 8008bb6:	b2ad      	uxthmi	r5, r5
 8008bb8:	6031      	str	r1, [r6, #0]
 8008bba:	07d9      	lsls	r1, r3, #31
 8008bbc:	bf44      	itt	mi
 8008bbe:	f043 0320 	orrmi.w	r3, r3, #32
 8008bc2:	6023      	strmi	r3, [r4, #0]
 8008bc4:	b11d      	cbz	r5, 8008bce <_printf_i+0x19e>
 8008bc6:	2310      	movs	r3, #16
 8008bc8:	e7ac      	b.n	8008b24 <_printf_i+0xf4>
 8008bca:	4827      	ldr	r0, [pc, #156]	@ (8008c68 <_printf_i+0x238>)
 8008bcc:	e7e9      	b.n	8008ba2 <_printf_i+0x172>
 8008bce:	6823      	ldr	r3, [r4, #0]
 8008bd0:	f023 0320 	bic.w	r3, r3, #32
 8008bd4:	6023      	str	r3, [r4, #0]
 8008bd6:	e7f6      	b.n	8008bc6 <_printf_i+0x196>
 8008bd8:	4616      	mov	r6, r2
 8008bda:	e7bd      	b.n	8008b58 <_printf_i+0x128>
 8008bdc:	6833      	ldr	r3, [r6, #0]
 8008bde:	6825      	ldr	r5, [r4, #0]
 8008be0:	6961      	ldr	r1, [r4, #20]
 8008be2:	1d18      	adds	r0, r3, #4
 8008be4:	6030      	str	r0, [r6, #0]
 8008be6:	062e      	lsls	r6, r5, #24
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	d501      	bpl.n	8008bf0 <_printf_i+0x1c0>
 8008bec:	6019      	str	r1, [r3, #0]
 8008bee:	e002      	b.n	8008bf6 <_printf_i+0x1c6>
 8008bf0:	0668      	lsls	r0, r5, #25
 8008bf2:	d5fb      	bpl.n	8008bec <_printf_i+0x1bc>
 8008bf4:	8019      	strh	r1, [r3, #0]
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	6123      	str	r3, [r4, #16]
 8008bfa:	4616      	mov	r6, r2
 8008bfc:	e7bc      	b.n	8008b78 <_printf_i+0x148>
 8008bfe:	6833      	ldr	r3, [r6, #0]
 8008c00:	1d1a      	adds	r2, r3, #4
 8008c02:	6032      	str	r2, [r6, #0]
 8008c04:	681e      	ldr	r6, [r3, #0]
 8008c06:	6862      	ldr	r2, [r4, #4]
 8008c08:	2100      	movs	r1, #0
 8008c0a:	4630      	mov	r0, r6
 8008c0c:	f7f7 fb20 	bl	8000250 <memchr>
 8008c10:	b108      	cbz	r0, 8008c16 <_printf_i+0x1e6>
 8008c12:	1b80      	subs	r0, r0, r6
 8008c14:	6060      	str	r0, [r4, #4]
 8008c16:	6863      	ldr	r3, [r4, #4]
 8008c18:	6123      	str	r3, [r4, #16]
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c20:	e7aa      	b.n	8008b78 <_printf_i+0x148>
 8008c22:	6923      	ldr	r3, [r4, #16]
 8008c24:	4632      	mov	r2, r6
 8008c26:	4649      	mov	r1, r9
 8008c28:	4640      	mov	r0, r8
 8008c2a:	47d0      	blx	sl
 8008c2c:	3001      	adds	r0, #1
 8008c2e:	d0ad      	beq.n	8008b8c <_printf_i+0x15c>
 8008c30:	6823      	ldr	r3, [r4, #0]
 8008c32:	079b      	lsls	r3, r3, #30
 8008c34:	d413      	bmi.n	8008c5e <_printf_i+0x22e>
 8008c36:	68e0      	ldr	r0, [r4, #12]
 8008c38:	9b03      	ldr	r3, [sp, #12]
 8008c3a:	4298      	cmp	r0, r3
 8008c3c:	bfb8      	it	lt
 8008c3e:	4618      	movlt	r0, r3
 8008c40:	e7a6      	b.n	8008b90 <_printf_i+0x160>
 8008c42:	2301      	movs	r3, #1
 8008c44:	4632      	mov	r2, r6
 8008c46:	4649      	mov	r1, r9
 8008c48:	4640      	mov	r0, r8
 8008c4a:	47d0      	blx	sl
 8008c4c:	3001      	adds	r0, #1
 8008c4e:	d09d      	beq.n	8008b8c <_printf_i+0x15c>
 8008c50:	3501      	adds	r5, #1
 8008c52:	68e3      	ldr	r3, [r4, #12]
 8008c54:	9903      	ldr	r1, [sp, #12]
 8008c56:	1a5b      	subs	r3, r3, r1
 8008c58:	42ab      	cmp	r3, r5
 8008c5a:	dcf2      	bgt.n	8008c42 <_printf_i+0x212>
 8008c5c:	e7eb      	b.n	8008c36 <_printf_i+0x206>
 8008c5e:	2500      	movs	r5, #0
 8008c60:	f104 0619 	add.w	r6, r4, #25
 8008c64:	e7f5      	b.n	8008c52 <_printf_i+0x222>
 8008c66:	bf00      	nop
 8008c68:	0800972d 	.word	0x0800972d
 8008c6c:	0800973e 	.word	0x0800973e

08008c70 <_scanf_chars>:
 8008c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c74:	4615      	mov	r5, r2
 8008c76:	688a      	ldr	r2, [r1, #8]
 8008c78:	4680      	mov	r8, r0
 8008c7a:	460c      	mov	r4, r1
 8008c7c:	b932      	cbnz	r2, 8008c8c <_scanf_chars+0x1c>
 8008c7e:	698a      	ldr	r2, [r1, #24]
 8008c80:	2a00      	cmp	r2, #0
 8008c82:	bf14      	ite	ne
 8008c84:	f04f 32ff 	movne.w	r2, #4294967295
 8008c88:	2201      	moveq	r2, #1
 8008c8a:	608a      	str	r2, [r1, #8]
 8008c8c:	6822      	ldr	r2, [r4, #0]
 8008c8e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8008d20 <_scanf_chars+0xb0>
 8008c92:	06d1      	lsls	r1, r2, #27
 8008c94:	bf5f      	itttt	pl
 8008c96:	681a      	ldrpl	r2, [r3, #0]
 8008c98:	1d11      	addpl	r1, r2, #4
 8008c9a:	6019      	strpl	r1, [r3, #0]
 8008c9c:	6816      	ldrpl	r6, [r2, #0]
 8008c9e:	2700      	movs	r7, #0
 8008ca0:	69a0      	ldr	r0, [r4, #24]
 8008ca2:	b188      	cbz	r0, 8008cc8 <_scanf_chars+0x58>
 8008ca4:	2801      	cmp	r0, #1
 8008ca6:	d107      	bne.n	8008cb8 <_scanf_chars+0x48>
 8008ca8:	682b      	ldr	r3, [r5, #0]
 8008caa:	781a      	ldrb	r2, [r3, #0]
 8008cac:	6963      	ldr	r3, [r4, #20]
 8008cae:	5c9b      	ldrb	r3, [r3, r2]
 8008cb0:	b953      	cbnz	r3, 8008cc8 <_scanf_chars+0x58>
 8008cb2:	2f00      	cmp	r7, #0
 8008cb4:	d031      	beq.n	8008d1a <_scanf_chars+0xaa>
 8008cb6:	e022      	b.n	8008cfe <_scanf_chars+0x8e>
 8008cb8:	2802      	cmp	r0, #2
 8008cba:	d120      	bne.n	8008cfe <_scanf_chars+0x8e>
 8008cbc:	682b      	ldr	r3, [r5, #0]
 8008cbe:	781b      	ldrb	r3, [r3, #0]
 8008cc0:	f819 3003 	ldrb.w	r3, [r9, r3]
 8008cc4:	071b      	lsls	r3, r3, #28
 8008cc6:	d41a      	bmi.n	8008cfe <_scanf_chars+0x8e>
 8008cc8:	6823      	ldr	r3, [r4, #0]
 8008cca:	06da      	lsls	r2, r3, #27
 8008ccc:	bf5e      	ittt	pl
 8008cce:	682b      	ldrpl	r3, [r5, #0]
 8008cd0:	781b      	ldrbpl	r3, [r3, #0]
 8008cd2:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008cd6:	682a      	ldr	r2, [r5, #0]
 8008cd8:	686b      	ldr	r3, [r5, #4]
 8008cda:	3201      	adds	r2, #1
 8008cdc:	602a      	str	r2, [r5, #0]
 8008cde:	68a2      	ldr	r2, [r4, #8]
 8008ce0:	3b01      	subs	r3, #1
 8008ce2:	3a01      	subs	r2, #1
 8008ce4:	606b      	str	r3, [r5, #4]
 8008ce6:	3701      	adds	r7, #1
 8008ce8:	60a2      	str	r2, [r4, #8]
 8008cea:	b142      	cbz	r2, 8008cfe <_scanf_chars+0x8e>
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	dcd7      	bgt.n	8008ca0 <_scanf_chars+0x30>
 8008cf0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008cf4:	4629      	mov	r1, r5
 8008cf6:	4640      	mov	r0, r8
 8008cf8:	4798      	blx	r3
 8008cfa:	2800      	cmp	r0, #0
 8008cfc:	d0d0      	beq.n	8008ca0 <_scanf_chars+0x30>
 8008cfe:	6823      	ldr	r3, [r4, #0]
 8008d00:	f013 0310 	ands.w	r3, r3, #16
 8008d04:	d105      	bne.n	8008d12 <_scanf_chars+0xa2>
 8008d06:	68e2      	ldr	r2, [r4, #12]
 8008d08:	3201      	adds	r2, #1
 8008d0a:	60e2      	str	r2, [r4, #12]
 8008d0c:	69a2      	ldr	r2, [r4, #24]
 8008d0e:	b102      	cbz	r2, 8008d12 <_scanf_chars+0xa2>
 8008d10:	7033      	strb	r3, [r6, #0]
 8008d12:	6923      	ldr	r3, [r4, #16]
 8008d14:	443b      	add	r3, r7
 8008d16:	6123      	str	r3, [r4, #16]
 8008d18:	2000      	movs	r0, #0
 8008d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d1e:	bf00      	nop
 8008d20:	0800976b 	.word	0x0800976b

08008d24 <_scanf_i>:
 8008d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d28:	4698      	mov	r8, r3
 8008d2a:	4b74      	ldr	r3, [pc, #464]	@ (8008efc <_scanf_i+0x1d8>)
 8008d2c:	460c      	mov	r4, r1
 8008d2e:	4682      	mov	sl, r0
 8008d30:	4616      	mov	r6, r2
 8008d32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008d36:	b087      	sub	sp, #28
 8008d38:	ab03      	add	r3, sp, #12
 8008d3a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008d3e:	4b70      	ldr	r3, [pc, #448]	@ (8008f00 <_scanf_i+0x1dc>)
 8008d40:	69a1      	ldr	r1, [r4, #24]
 8008d42:	4a70      	ldr	r2, [pc, #448]	@ (8008f04 <_scanf_i+0x1e0>)
 8008d44:	2903      	cmp	r1, #3
 8008d46:	bf08      	it	eq
 8008d48:	461a      	moveq	r2, r3
 8008d4a:	68a3      	ldr	r3, [r4, #8]
 8008d4c:	9201      	str	r2, [sp, #4]
 8008d4e:	1e5a      	subs	r2, r3, #1
 8008d50:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008d54:	bf88      	it	hi
 8008d56:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008d5a:	4627      	mov	r7, r4
 8008d5c:	bf82      	ittt	hi
 8008d5e:	eb03 0905 	addhi.w	r9, r3, r5
 8008d62:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008d66:	60a3      	strhi	r3, [r4, #8]
 8008d68:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008d6c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8008d70:	bf98      	it	ls
 8008d72:	f04f 0900 	movls.w	r9, #0
 8008d76:	6023      	str	r3, [r4, #0]
 8008d78:	463d      	mov	r5, r7
 8008d7a:	f04f 0b00 	mov.w	fp, #0
 8008d7e:	6831      	ldr	r1, [r6, #0]
 8008d80:	ab03      	add	r3, sp, #12
 8008d82:	7809      	ldrb	r1, [r1, #0]
 8008d84:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008d88:	2202      	movs	r2, #2
 8008d8a:	f7f7 fa61 	bl	8000250 <memchr>
 8008d8e:	b328      	cbz	r0, 8008ddc <_scanf_i+0xb8>
 8008d90:	f1bb 0f01 	cmp.w	fp, #1
 8008d94:	d159      	bne.n	8008e4a <_scanf_i+0x126>
 8008d96:	6862      	ldr	r2, [r4, #4]
 8008d98:	b92a      	cbnz	r2, 8008da6 <_scanf_i+0x82>
 8008d9a:	6822      	ldr	r2, [r4, #0]
 8008d9c:	2108      	movs	r1, #8
 8008d9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008da2:	6061      	str	r1, [r4, #4]
 8008da4:	6022      	str	r2, [r4, #0]
 8008da6:	6822      	ldr	r2, [r4, #0]
 8008da8:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8008dac:	6022      	str	r2, [r4, #0]
 8008dae:	68a2      	ldr	r2, [r4, #8]
 8008db0:	1e51      	subs	r1, r2, #1
 8008db2:	60a1      	str	r1, [r4, #8]
 8008db4:	b192      	cbz	r2, 8008ddc <_scanf_i+0xb8>
 8008db6:	6832      	ldr	r2, [r6, #0]
 8008db8:	1c51      	adds	r1, r2, #1
 8008dba:	6031      	str	r1, [r6, #0]
 8008dbc:	7812      	ldrb	r2, [r2, #0]
 8008dbe:	f805 2b01 	strb.w	r2, [r5], #1
 8008dc2:	6872      	ldr	r2, [r6, #4]
 8008dc4:	3a01      	subs	r2, #1
 8008dc6:	2a00      	cmp	r2, #0
 8008dc8:	6072      	str	r2, [r6, #4]
 8008dca:	dc07      	bgt.n	8008ddc <_scanf_i+0xb8>
 8008dcc:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8008dd0:	4631      	mov	r1, r6
 8008dd2:	4650      	mov	r0, sl
 8008dd4:	4790      	blx	r2
 8008dd6:	2800      	cmp	r0, #0
 8008dd8:	f040 8085 	bne.w	8008ee6 <_scanf_i+0x1c2>
 8008ddc:	f10b 0b01 	add.w	fp, fp, #1
 8008de0:	f1bb 0f03 	cmp.w	fp, #3
 8008de4:	d1cb      	bne.n	8008d7e <_scanf_i+0x5a>
 8008de6:	6863      	ldr	r3, [r4, #4]
 8008de8:	b90b      	cbnz	r3, 8008dee <_scanf_i+0xca>
 8008dea:	230a      	movs	r3, #10
 8008dec:	6063      	str	r3, [r4, #4]
 8008dee:	6863      	ldr	r3, [r4, #4]
 8008df0:	4945      	ldr	r1, [pc, #276]	@ (8008f08 <_scanf_i+0x1e4>)
 8008df2:	6960      	ldr	r0, [r4, #20]
 8008df4:	1ac9      	subs	r1, r1, r3
 8008df6:	f000 f997 	bl	8009128 <__sccl>
 8008dfa:	f04f 0b00 	mov.w	fp, #0
 8008dfe:	68a3      	ldr	r3, [r4, #8]
 8008e00:	6822      	ldr	r2, [r4, #0]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d03d      	beq.n	8008e82 <_scanf_i+0x15e>
 8008e06:	6831      	ldr	r1, [r6, #0]
 8008e08:	6960      	ldr	r0, [r4, #20]
 8008e0a:	f891 c000 	ldrb.w	ip, [r1]
 8008e0e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008e12:	2800      	cmp	r0, #0
 8008e14:	d035      	beq.n	8008e82 <_scanf_i+0x15e>
 8008e16:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8008e1a:	d124      	bne.n	8008e66 <_scanf_i+0x142>
 8008e1c:	0510      	lsls	r0, r2, #20
 8008e1e:	d522      	bpl.n	8008e66 <_scanf_i+0x142>
 8008e20:	f10b 0b01 	add.w	fp, fp, #1
 8008e24:	f1b9 0f00 	cmp.w	r9, #0
 8008e28:	d003      	beq.n	8008e32 <_scanf_i+0x10e>
 8008e2a:	3301      	adds	r3, #1
 8008e2c:	f109 39ff 	add.w	r9, r9, #4294967295
 8008e30:	60a3      	str	r3, [r4, #8]
 8008e32:	6873      	ldr	r3, [r6, #4]
 8008e34:	3b01      	subs	r3, #1
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	6073      	str	r3, [r6, #4]
 8008e3a:	dd1b      	ble.n	8008e74 <_scanf_i+0x150>
 8008e3c:	6833      	ldr	r3, [r6, #0]
 8008e3e:	3301      	adds	r3, #1
 8008e40:	6033      	str	r3, [r6, #0]
 8008e42:	68a3      	ldr	r3, [r4, #8]
 8008e44:	3b01      	subs	r3, #1
 8008e46:	60a3      	str	r3, [r4, #8]
 8008e48:	e7d9      	b.n	8008dfe <_scanf_i+0xda>
 8008e4a:	f1bb 0f02 	cmp.w	fp, #2
 8008e4e:	d1ae      	bne.n	8008dae <_scanf_i+0x8a>
 8008e50:	6822      	ldr	r2, [r4, #0]
 8008e52:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8008e56:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8008e5a:	d1bf      	bne.n	8008ddc <_scanf_i+0xb8>
 8008e5c:	2110      	movs	r1, #16
 8008e5e:	6061      	str	r1, [r4, #4]
 8008e60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008e64:	e7a2      	b.n	8008dac <_scanf_i+0x88>
 8008e66:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8008e6a:	6022      	str	r2, [r4, #0]
 8008e6c:	780b      	ldrb	r3, [r1, #0]
 8008e6e:	f805 3b01 	strb.w	r3, [r5], #1
 8008e72:	e7de      	b.n	8008e32 <_scanf_i+0x10e>
 8008e74:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008e78:	4631      	mov	r1, r6
 8008e7a:	4650      	mov	r0, sl
 8008e7c:	4798      	blx	r3
 8008e7e:	2800      	cmp	r0, #0
 8008e80:	d0df      	beq.n	8008e42 <_scanf_i+0x11e>
 8008e82:	6823      	ldr	r3, [r4, #0]
 8008e84:	05d9      	lsls	r1, r3, #23
 8008e86:	d50d      	bpl.n	8008ea4 <_scanf_i+0x180>
 8008e88:	42bd      	cmp	r5, r7
 8008e8a:	d909      	bls.n	8008ea0 <_scanf_i+0x17c>
 8008e8c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008e90:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008e94:	4632      	mov	r2, r6
 8008e96:	4650      	mov	r0, sl
 8008e98:	4798      	blx	r3
 8008e9a:	f105 39ff 	add.w	r9, r5, #4294967295
 8008e9e:	464d      	mov	r5, r9
 8008ea0:	42bd      	cmp	r5, r7
 8008ea2:	d028      	beq.n	8008ef6 <_scanf_i+0x1d2>
 8008ea4:	6822      	ldr	r2, [r4, #0]
 8008ea6:	f012 0210 	ands.w	r2, r2, #16
 8008eaa:	d113      	bne.n	8008ed4 <_scanf_i+0x1b0>
 8008eac:	702a      	strb	r2, [r5, #0]
 8008eae:	6863      	ldr	r3, [r4, #4]
 8008eb0:	9e01      	ldr	r6, [sp, #4]
 8008eb2:	4639      	mov	r1, r7
 8008eb4:	4650      	mov	r0, sl
 8008eb6:	47b0      	blx	r6
 8008eb8:	f8d8 3000 	ldr.w	r3, [r8]
 8008ebc:	6821      	ldr	r1, [r4, #0]
 8008ebe:	1d1a      	adds	r2, r3, #4
 8008ec0:	f8c8 2000 	str.w	r2, [r8]
 8008ec4:	f011 0f20 	tst.w	r1, #32
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	d00f      	beq.n	8008eec <_scanf_i+0x1c8>
 8008ecc:	6018      	str	r0, [r3, #0]
 8008ece:	68e3      	ldr	r3, [r4, #12]
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	60e3      	str	r3, [r4, #12]
 8008ed4:	6923      	ldr	r3, [r4, #16]
 8008ed6:	1bed      	subs	r5, r5, r7
 8008ed8:	445d      	add	r5, fp
 8008eda:	442b      	add	r3, r5
 8008edc:	6123      	str	r3, [r4, #16]
 8008ede:	2000      	movs	r0, #0
 8008ee0:	b007      	add	sp, #28
 8008ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ee6:	f04f 0b00 	mov.w	fp, #0
 8008eea:	e7ca      	b.n	8008e82 <_scanf_i+0x15e>
 8008eec:	07ca      	lsls	r2, r1, #31
 8008eee:	bf4c      	ite	mi
 8008ef0:	8018      	strhmi	r0, [r3, #0]
 8008ef2:	6018      	strpl	r0, [r3, #0]
 8008ef4:	e7eb      	b.n	8008ece <_scanf_i+0x1aa>
 8008ef6:	2001      	movs	r0, #1
 8008ef8:	e7f2      	b.n	8008ee0 <_scanf_i+0x1bc>
 8008efa:	bf00      	nop
 8008efc:	080096d0 	.word	0x080096d0
 8008f00:	080093f5 	.word	0x080093f5
 8008f04:	080094d5 	.word	0x080094d5
 8008f08:	0800975f 	.word	0x0800975f

08008f0c <__sflush_r>:
 8008f0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f14:	0716      	lsls	r6, r2, #28
 8008f16:	4605      	mov	r5, r0
 8008f18:	460c      	mov	r4, r1
 8008f1a:	d454      	bmi.n	8008fc6 <__sflush_r+0xba>
 8008f1c:	684b      	ldr	r3, [r1, #4]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	dc02      	bgt.n	8008f28 <__sflush_r+0x1c>
 8008f22:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	dd48      	ble.n	8008fba <__sflush_r+0xae>
 8008f28:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f2a:	2e00      	cmp	r6, #0
 8008f2c:	d045      	beq.n	8008fba <__sflush_r+0xae>
 8008f2e:	2300      	movs	r3, #0
 8008f30:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008f34:	682f      	ldr	r7, [r5, #0]
 8008f36:	6a21      	ldr	r1, [r4, #32]
 8008f38:	602b      	str	r3, [r5, #0]
 8008f3a:	d030      	beq.n	8008f9e <__sflush_r+0x92>
 8008f3c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008f3e:	89a3      	ldrh	r3, [r4, #12]
 8008f40:	0759      	lsls	r1, r3, #29
 8008f42:	d505      	bpl.n	8008f50 <__sflush_r+0x44>
 8008f44:	6863      	ldr	r3, [r4, #4]
 8008f46:	1ad2      	subs	r2, r2, r3
 8008f48:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008f4a:	b10b      	cbz	r3, 8008f50 <__sflush_r+0x44>
 8008f4c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008f4e:	1ad2      	subs	r2, r2, r3
 8008f50:	2300      	movs	r3, #0
 8008f52:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f54:	6a21      	ldr	r1, [r4, #32]
 8008f56:	4628      	mov	r0, r5
 8008f58:	47b0      	blx	r6
 8008f5a:	1c43      	adds	r3, r0, #1
 8008f5c:	89a3      	ldrh	r3, [r4, #12]
 8008f5e:	d106      	bne.n	8008f6e <__sflush_r+0x62>
 8008f60:	6829      	ldr	r1, [r5, #0]
 8008f62:	291d      	cmp	r1, #29
 8008f64:	d82b      	bhi.n	8008fbe <__sflush_r+0xb2>
 8008f66:	4a2a      	ldr	r2, [pc, #168]	@ (8009010 <__sflush_r+0x104>)
 8008f68:	410a      	asrs	r2, r1
 8008f6a:	07d6      	lsls	r6, r2, #31
 8008f6c:	d427      	bmi.n	8008fbe <__sflush_r+0xb2>
 8008f6e:	2200      	movs	r2, #0
 8008f70:	6062      	str	r2, [r4, #4]
 8008f72:	04d9      	lsls	r1, r3, #19
 8008f74:	6922      	ldr	r2, [r4, #16]
 8008f76:	6022      	str	r2, [r4, #0]
 8008f78:	d504      	bpl.n	8008f84 <__sflush_r+0x78>
 8008f7a:	1c42      	adds	r2, r0, #1
 8008f7c:	d101      	bne.n	8008f82 <__sflush_r+0x76>
 8008f7e:	682b      	ldr	r3, [r5, #0]
 8008f80:	b903      	cbnz	r3, 8008f84 <__sflush_r+0x78>
 8008f82:	6560      	str	r0, [r4, #84]	@ 0x54
 8008f84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f86:	602f      	str	r7, [r5, #0]
 8008f88:	b1b9      	cbz	r1, 8008fba <__sflush_r+0xae>
 8008f8a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f8e:	4299      	cmp	r1, r3
 8008f90:	d002      	beq.n	8008f98 <__sflush_r+0x8c>
 8008f92:	4628      	mov	r0, r5
 8008f94:	f7ff f970 	bl	8008278 <_free_r>
 8008f98:	2300      	movs	r3, #0
 8008f9a:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f9c:	e00d      	b.n	8008fba <__sflush_r+0xae>
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	4628      	mov	r0, r5
 8008fa2:	47b0      	blx	r6
 8008fa4:	4602      	mov	r2, r0
 8008fa6:	1c50      	adds	r0, r2, #1
 8008fa8:	d1c9      	bne.n	8008f3e <__sflush_r+0x32>
 8008faa:	682b      	ldr	r3, [r5, #0]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d0c6      	beq.n	8008f3e <__sflush_r+0x32>
 8008fb0:	2b1d      	cmp	r3, #29
 8008fb2:	d001      	beq.n	8008fb8 <__sflush_r+0xac>
 8008fb4:	2b16      	cmp	r3, #22
 8008fb6:	d11e      	bne.n	8008ff6 <__sflush_r+0xea>
 8008fb8:	602f      	str	r7, [r5, #0]
 8008fba:	2000      	movs	r0, #0
 8008fbc:	e022      	b.n	8009004 <__sflush_r+0xf8>
 8008fbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fc2:	b21b      	sxth	r3, r3
 8008fc4:	e01b      	b.n	8008ffe <__sflush_r+0xf2>
 8008fc6:	690f      	ldr	r7, [r1, #16]
 8008fc8:	2f00      	cmp	r7, #0
 8008fca:	d0f6      	beq.n	8008fba <__sflush_r+0xae>
 8008fcc:	0793      	lsls	r3, r2, #30
 8008fce:	680e      	ldr	r6, [r1, #0]
 8008fd0:	bf08      	it	eq
 8008fd2:	694b      	ldreq	r3, [r1, #20]
 8008fd4:	600f      	str	r7, [r1, #0]
 8008fd6:	bf18      	it	ne
 8008fd8:	2300      	movne	r3, #0
 8008fda:	eba6 0807 	sub.w	r8, r6, r7
 8008fde:	608b      	str	r3, [r1, #8]
 8008fe0:	f1b8 0f00 	cmp.w	r8, #0
 8008fe4:	dde9      	ble.n	8008fba <__sflush_r+0xae>
 8008fe6:	6a21      	ldr	r1, [r4, #32]
 8008fe8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008fea:	4643      	mov	r3, r8
 8008fec:	463a      	mov	r2, r7
 8008fee:	4628      	mov	r0, r5
 8008ff0:	47b0      	blx	r6
 8008ff2:	2800      	cmp	r0, #0
 8008ff4:	dc08      	bgt.n	8009008 <__sflush_r+0xfc>
 8008ff6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ffa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ffe:	81a3      	strh	r3, [r4, #12]
 8009000:	f04f 30ff 	mov.w	r0, #4294967295
 8009004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009008:	4407      	add	r7, r0
 800900a:	eba8 0800 	sub.w	r8, r8, r0
 800900e:	e7e7      	b.n	8008fe0 <__sflush_r+0xd4>
 8009010:	dfbffffe 	.word	0xdfbffffe

08009014 <_fflush_r>:
 8009014:	b538      	push	{r3, r4, r5, lr}
 8009016:	690b      	ldr	r3, [r1, #16]
 8009018:	4605      	mov	r5, r0
 800901a:	460c      	mov	r4, r1
 800901c:	b913      	cbnz	r3, 8009024 <_fflush_r+0x10>
 800901e:	2500      	movs	r5, #0
 8009020:	4628      	mov	r0, r5
 8009022:	bd38      	pop	{r3, r4, r5, pc}
 8009024:	b118      	cbz	r0, 800902e <_fflush_r+0x1a>
 8009026:	6a03      	ldr	r3, [r0, #32]
 8009028:	b90b      	cbnz	r3, 800902e <_fflush_r+0x1a>
 800902a:	f7fe fecd 	bl	8007dc8 <__sinit>
 800902e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d0f3      	beq.n	800901e <_fflush_r+0xa>
 8009036:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009038:	07d0      	lsls	r0, r2, #31
 800903a:	d404      	bmi.n	8009046 <_fflush_r+0x32>
 800903c:	0599      	lsls	r1, r3, #22
 800903e:	d402      	bmi.n	8009046 <_fflush_r+0x32>
 8009040:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009042:	f7ff f916 	bl	8008272 <__retarget_lock_acquire_recursive>
 8009046:	4628      	mov	r0, r5
 8009048:	4621      	mov	r1, r4
 800904a:	f7ff ff5f 	bl	8008f0c <__sflush_r>
 800904e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009050:	07da      	lsls	r2, r3, #31
 8009052:	4605      	mov	r5, r0
 8009054:	d4e4      	bmi.n	8009020 <_fflush_r+0xc>
 8009056:	89a3      	ldrh	r3, [r4, #12]
 8009058:	059b      	lsls	r3, r3, #22
 800905a:	d4e1      	bmi.n	8009020 <_fflush_r+0xc>
 800905c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800905e:	f7ff f909 	bl	8008274 <__retarget_lock_release_recursive>
 8009062:	e7dd      	b.n	8009020 <_fflush_r+0xc>

08009064 <__swhatbuf_r>:
 8009064:	b570      	push	{r4, r5, r6, lr}
 8009066:	460c      	mov	r4, r1
 8009068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800906c:	2900      	cmp	r1, #0
 800906e:	b096      	sub	sp, #88	@ 0x58
 8009070:	4615      	mov	r5, r2
 8009072:	461e      	mov	r6, r3
 8009074:	da0d      	bge.n	8009092 <__swhatbuf_r+0x2e>
 8009076:	89a3      	ldrh	r3, [r4, #12]
 8009078:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800907c:	f04f 0100 	mov.w	r1, #0
 8009080:	bf14      	ite	ne
 8009082:	2340      	movne	r3, #64	@ 0x40
 8009084:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009088:	2000      	movs	r0, #0
 800908a:	6031      	str	r1, [r6, #0]
 800908c:	602b      	str	r3, [r5, #0]
 800908e:	b016      	add	sp, #88	@ 0x58
 8009090:	bd70      	pop	{r4, r5, r6, pc}
 8009092:	466a      	mov	r2, sp
 8009094:	f000 f8d6 	bl	8009244 <_fstat_r>
 8009098:	2800      	cmp	r0, #0
 800909a:	dbec      	blt.n	8009076 <__swhatbuf_r+0x12>
 800909c:	9901      	ldr	r1, [sp, #4]
 800909e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80090a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80090a6:	4259      	negs	r1, r3
 80090a8:	4159      	adcs	r1, r3
 80090aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80090ae:	e7eb      	b.n	8009088 <__swhatbuf_r+0x24>

080090b0 <__smakebuf_r>:
 80090b0:	898b      	ldrh	r3, [r1, #12]
 80090b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090b4:	079d      	lsls	r5, r3, #30
 80090b6:	4606      	mov	r6, r0
 80090b8:	460c      	mov	r4, r1
 80090ba:	d507      	bpl.n	80090cc <__smakebuf_r+0x1c>
 80090bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80090c0:	6023      	str	r3, [r4, #0]
 80090c2:	6123      	str	r3, [r4, #16]
 80090c4:	2301      	movs	r3, #1
 80090c6:	6163      	str	r3, [r4, #20]
 80090c8:	b003      	add	sp, #12
 80090ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090cc:	ab01      	add	r3, sp, #4
 80090ce:	466a      	mov	r2, sp
 80090d0:	f7ff ffc8 	bl	8009064 <__swhatbuf_r>
 80090d4:	9f00      	ldr	r7, [sp, #0]
 80090d6:	4605      	mov	r5, r0
 80090d8:	4639      	mov	r1, r7
 80090da:	4630      	mov	r0, r6
 80090dc:	f7fe fd5c 	bl	8007b98 <_malloc_r>
 80090e0:	b948      	cbnz	r0, 80090f6 <__smakebuf_r+0x46>
 80090e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090e6:	059a      	lsls	r2, r3, #22
 80090e8:	d4ee      	bmi.n	80090c8 <__smakebuf_r+0x18>
 80090ea:	f023 0303 	bic.w	r3, r3, #3
 80090ee:	f043 0302 	orr.w	r3, r3, #2
 80090f2:	81a3      	strh	r3, [r4, #12]
 80090f4:	e7e2      	b.n	80090bc <__smakebuf_r+0xc>
 80090f6:	89a3      	ldrh	r3, [r4, #12]
 80090f8:	6020      	str	r0, [r4, #0]
 80090fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090fe:	81a3      	strh	r3, [r4, #12]
 8009100:	9b01      	ldr	r3, [sp, #4]
 8009102:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009106:	b15b      	cbz	r3, 8009120 <__smakebuf_r+0x70>
 8009108:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800910c:	4630      	mov	r0, r6
 800910e:	f000 f8ab 	bl	8009268 <_isatty_r>
 8009112:	b128      	cbz	r0, 8009120 <__smakebuf_r+0x70>
 8009114:	89a3      	ldrh	r3, [r4, #12]
 8009116:	f023 0303 	bic.w	r3, r3, #3
 800911a:	f043 0301 	orr.w	r3, r3, #1
 800911e:	81a3      	strh	r3, [r4, #12]
 8009120:	89a3      	ldrh	r3, [r4, #12]
 8009122:	431d      	orrs	r5, r3
 8009124:	81a5      	strh	r5, [r4, #12]
 8009126:	e7cf      	b.n	80090c8 <__smakebuf_r+0x18>

08009128 <__sccl>:
 8009128:	b570      	push	{r4, r5, r6, lr}
 800912a:	780b      	ldrb	r3, [r1, #0]
 800912c:	4604      	mov	r4, r0
 800912e:	2b5e      	cmp	r3, #94	@ 0x5e
 8009130:	bf0b      	itete	eq
 8009132:	784b      	ldrbeq	r3, [r1, #1]
 8009134:	1c4a      	addne	r2, r1, #1
 8009136:	1c8a      	addeq	r2, r1, #2
 8009138:	2100      	movne	r1, #0
 800913a:	bf08      	it	eq
 800913c:	2101      	moveq	r1, #1
 800913e:	3801      	subs	r0, #1
 8009140:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8009144:	f800 1f01 	strb.w	r1, [r0, #1]!
 8009148:	42a8      	cmp	r0, r5
 800914a:	d1fb      	bne.n	8009144 <__sccl+0x1c>
 800914c:	b90b      	cbnz	r3, 8009152 <__sccl+0x2a>
 800914e:	1e50      	subs	r0, r2, #1
 8009150:	bd70      	pop	{r4, r5, r6, pc}
 8009152:	f081 0101 	eor.w	r1, r1, #1
 8009156:	54e1      	strb	r1, [r4, r3]
 8009158:	4610      	mov	r0, r2
 800915a:	4602      	mov	r2, r0
 800915c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009160:	2d2d      	cmp	r5, #45	@ 0x2d
 8009162:	d005      	beq.n	8009170 <__sccl+0x48>
 8009164:	2d5d      	cmp	r5, #93	@ 0x5d
 8009166:	d016      	beq.n	8009196 <__sccl+0x6e>
 8009168:	2d00      	cmp	r5, #0
 800916a:	d0f1      	beq.n	8009150 <__sccl+0x28>
 800916c:	462b      	mov	r3, r5
 800916e:	e7f2      	b.n	8009156 <__sccl+0x2e>
 8009170:	7846      	ldrb	r6, [r0, #1]
 8009172:	2e5d      	cmp	r6, #93	@ 0x5d
 8009174:	d0fa      	beq.n	800916c <__sccl+0x44>
 8009176:	42b3      	cmp	r3, r6
 8009178:	dcf8      	bgt.n	800916c <__sccl+0x44>
 800917a:	3002      	adds	r0, #2
 800917c:	461a      	mov	r2, r3
 800917e:	3201      	adds	r2, #1
 8009180:	4296      	cmp	r6, r2
 8009182:	54a1      	strb	r1, [r4, r2]
 8009184:	dcfb      	bgt.n	800917e <__sccl+0x56>
 8009186:	1af2      	subs	r2, r6, r3
 8009188:	3a01      	subs	r2, #1
 800918a:	1c5d      	adds	r5, r3, #1
 800918c:	42b3      	cmp	r3, r6
 800918e:	bfa8      	it	ge
 8009190:	2200      	movge	r2, #0
 8009192:	18ab      	adds	r3, r5, r2
 8009194:	e7e1      	b.n	800915a <__sccl+0x32>
 8009196:	4610      	mov	r0, r2
 8009198:	e7da      	b.n	8009150 <__sccl+0x28>

0800919a <__submore>:
 800919a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800919e:	460c      	mov	r4, r1
 80091a0:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80091a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80091a6:	4299      	cmp	r1, r3
 80091a8:	d11d      	bne.n	80091e6 <__submore+0x4c>
 80091aa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80091ae:	f7fe fcf3 	bl	8007b98 <_malloc_r>
 80091b2:	b918      	cbnz	r0, 80091bc <__submore+0x22>
 80091b4:	f04f 30ff 	mov.w	r0, #4294967295
 80091b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80091c0:	63a3      	str	r3, [r4, #56]	@ 0x38
 80091c2:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80091c6:	6360      	str	r0, [r4, #52]	@ 0x34
 80091c8:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80091cc:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80091d0:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80091d4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80091d8:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80091dc:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80091e0:	6020      	str	r0, [r4, #0]
 80091e2:	2000      	movs	r0, #0
 80091e4:	e7e8      	b.n	80091b8 <__submore+0x1e>
 80091e6:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80091e8:	0077      	lsls	r7, r6, #1
 80091ea:	463a      	mov	r2, r7
 80091ec:	f000 f85a 	bl	80092a4 <_realloc_r>
 80091f0:	4605      	mov	r5, r0
 80091f2:	2800      	cmp	r0, #0
 80091f4:	d0de      	beq.n	80091b4 <__submore+0x1a>
 80091f6:	eb00 0806 	add.w	r8, r0, r6
 80091fa:	4601      	mov	r1, r0
 80091fc:	4632      	mov	r2, r6
 80091fe:	4640      	mov	r0, r8
 8009200:	f000 f842 	bl	8009288 <memcpy>
 8009204:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8009208:	f8c4 8000 	str.w	r8, [r4]
 800920c:	e7e9      	b.n	80091e2 <__submore+0x48>

0800920e <memmove>:
 800920e:	4288      	cmp	r0, r1
 8009210:	b510      	push	{r4, lr}
 8009212:	eb01 0402 	add.w	r4, r1, r2
 8009216:	d902      	bls.n	800921e <memmove+0x10>
 8009218:	4284      	cmp	r4, r0
 800921a:	4623      	mov	r3, r4
 800921c:	d807      	bhi.n	800922e <memmove+0x20>
 800921e:	1e43      	subs	r3, r0, #1
 8009220:	42a1      	cmp	r1, r4
 8009222:	d008      	beq.n	8009236 <memmove+0x28>
 8009224:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009228:	f803 2f01 	strb.w	r2, [r3, #1]!
 800922c:	e7f8      	b.n	8009220 <memmove+0x12>
 800922e:	4402      	add	r2, r0
 8009230:	4601      	mov	r1, r0
 8009232:	428a      	cmp	r2, r1
 8009234:	d100      	bne.n	8009238 <memmove+0x2a>
 8009236:	bd10      	pop	{r4, pc}
 8009238:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800923c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009240:	e7f7      	b.n	8009232 <memmove+0x24>
	...

08009244 <_fstat_r>:
 8009244:	b538      	push	{r3, r4, r5, lr}
 8009246:	4d07      	ldr	r5, [pc, #28]	@ (8009264 <_fstat_r+0x20>)
 8009248:	2300      	movs	r3, #0
 800924a:	4604      	mov	r4, r0
 800924c:	4608      	mov	r0, r1
 800924e:	4611      	mov	r1, r2
 8009250:	602b      	str	r3, [r5, #0]
 8009252:	f7f9 f81e 	bl	8002292 <_fstat>
 8009256:	1c43      	adds	r3, r0, #1
 8009258:	d102      	bne.n	8009260 <_fstat_r+0x1c>
 800925a:	682b      	ldr	r3, [r5, #0]
 800925c:	b103      	cbz	r3, 8009260 <_fstat_r+0x1c>
 800925e:	6023      	str	r3, [r4, #0]
 8009260:	bd38      	pop	{r3, r4, r5, pc}
 8009262:	bf00      	nop
 8009264:	200004b4 	.word	0x200004b4

08009268 <_isatty_r>:
 8009268:	b538      	push	{r3, r4, r5, lr}
 800926a:	4d06      	ldr	r5, [pc, #24]	@ (8009284 <_isatty_r+0x1c>)
 800926c:	2300      	movs	r3, #0
 800926e:	4604      	mov	r4, r0
 8009270:	4608      	mov	r0, r1
 8009272:	602b      	str	r3, [r5, #0]
 8009274:	f7f9 f81d 	bl	80022b2 <_isatty>
 8009278:	1c43      	adds	r3, r0, #1
 800927a:	d102      	bne.n	8009282 <_isatty_r+0x1a>
 800927c:	682b      	ldr	r3, [r5, #0]
 800927e:	b103      	cbz	r3, 8009282 <_isatty_r+0x1a>
 8009280:	6023      	str	r3, [r4, #0]
 8009282:	bd38      	pop	{r3, r4, r5, pc}
 8009284:	200004b4 	.word	0x200004b4

08009288 <memcpy>:
 8009288:	440a      	add	r2, r1
 800928a:	4291      	cmp	r1, r2
 800928c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009290:	d100      	bne.n	8009294 <memcpy+0xc>
 8009292:	4770      	bx	lr
 8009294:	b510      	push	{r4, lr}
 8009296:	f811 4b01 	ldrb.w	r4, [r1], #1
 800929a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800929e:	4291      	cmp	r1, r2
 80092a0:	d1f9      	bne.n	8009296 <memcpy+0xe>
 80092a2:	bd10      	pop	{r4, pc}

080092a4 <_realloc_r>:
 80092a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092a8:	4680      	mov	r8, r0
 80092aa:	4615      	mov	r5, r2
 80092ac:	460c      	mov	r4, r1
 80092ae:	b921      	cbnz	r1, 80092ba <_realloc_r+0x16>
 80092b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092b4:	4611      	mov	r1, r2
 80092b6:	f7fe bc6f 	b.w	8007b98 <_malloc_r>
 80092ba:	b92a      	cbnz	r2, 80092c8 <_realloc_r+0x24>
 80092bc:	f7fe ffdc 	bl	8008278 <_free_r>
 80092c0:	2400      	movs	r4, #0
 80092c2:	4620      	mov	r0, r4
 80092c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092c8:	f000 f906 	bl	80094d8 <_malloc_usable_size_r>
 80092cc:	4285      	cmp	r5, r0
 80092ce:	4606      	mov	r6, r0
 80092d0:	d802      	bhi.n	80092d8 <_realloc_r+0x34>
 80092d2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80092d6:	d8f4      	bhi.n	80092c2 <_realloc_r+0x1e>
 80092d8:	4629      	mov	r1, r5
 80092da:	4640      	mov	r0, r8
 80092dc:	f7fe fc5c 	bl	8007b98 <_malloc_r>
 80092e0:	4607      	mov	r7, r0
 80092e2:	2800      	cmp	r0, #0
 80092e4:	d0ec      	beq.n	80092c0 <_realloc_r+0x1c>
 80092e6:	42b5      	cmp	r5, r6
 80092e8:	462a      	mov	r2, r5
 80092ea:	4621      	mov	r1, r4
 80092ec:	bf28      	it	cs
 80092ee:	4632      	movcs	r2, r6
 80092f0:	f7ff ffca 	bl	8009288 <memcpy>
 80092f4:	4621      	mov	r1, r4
 80092f6:	4640      	mov	r0, r8
 80092f8:	f7fe ffbe 	bl	8008278 <_free_r>
 80092fc:	463c      	mov	r4, r7
 80092fe:	e7e0      	b.n	80092c2 <_realloc_r+0x1e>

08009300 <_strtol_l.constprop.0>:
 8009300:	2b24      	cmp	r3, #36	@ 0x24
 8009302:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009306:	4686      	mov	lr, r0
 8009308:	4690      	mov	r8, r2
 800930a:	d801      	bhi.n	8009310 <_strtol_l.constprop.0+0x10>
 800930c:	2b01      	cmp	r3, #1
 800930e:	d106      	bne.n	800931e <_strtol_l.constprop.0+0x1e>
 8009310:	f7fe ff84 	bl	800821c <__errno>
 8009314:	2316      	movs	r3, #22
 8009316:	6003      	str	r3, [r0, #0]
 8009318:	2000      	movs	r0, #0
 800931a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800931e:	4834      	ldr	r0, [pc, #208]	@ (80093f0 <_strtol_l.constprop.0+0xf0>)
 8009320:	460d      	mov	r5, r1
 8009322:	462a      	mov	r2, r5
 8009324:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009328:	5d06      	ldrb	r6, [r0, r4]
 800932a:	f016 0608 	ands.w	r6, r6, #8
 800932e:	d1f8      	bne.n	8009322 <_strtol_l.constprop.0+0x22>
 8009330:	2c2d      	cmp	r4, #45	@ 0x2d
 8009332:	d12d      	bne.n	8009390 <_strtol_l.constprop.0+0x90>
 8009334:	782c      	ldrb	r4, [r5, #0]
 8009336:	2601      	movs	r6, #1
 8009338:	1c95      	adds	r5, r2, #2
 800933a:	f033 0210 	bics.w	r2, r3, #16
 800933e:	d109      	bne.n	8009354 <_strtol_l.constprop.0+0x54>
 8009340:	2c30      	cmp	r4, #48	@ 0x30
 8009342:	d12a      	bne.n	800939a <_strtol_l.constprop.0+0x9a>
 8009344:	782a      	ldrb	r2, [r5, #0]
 8009346:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800934a:	2a58      	cmp	r2, #88	@ 0x58
 800934c:	d125      	bne.n	800939a <_strtol_l.constprop.0+0x9a>
 800934e:	786c      	ldrb	r4, [r5, #1]
 8009350:	2310      	movs	r3, #16
 8009352:	3502      	adds	r5, #2
 8009354:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009358:	f10c 3cff 	add.w	ip, ip, #4294967295
 800935c:	2200      	movs	r2, #0
 800935e:	fbbc f9f3 	udiv	r9, ip, r3
 8009362:	4610      	mov	r0, r2
 8009364:	fb03 ca19 	mls	sl, r3, r9, ip
 8009368:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800936c:	2f09      	cmp	r7, #9
 800936e:	d81b      	bhi.n	80093a8 <_strtol_l.constprop.0+0xa8>
 8009370:	463c      	mov	r4, r7
 8009372:	42a3      	cmp	r3, r4
 8009374:	dd27      	ble.n	80093c6 <_strtol_l.constprop.0+0xc6>
 8009376:	1c57      	adds	r7, r2, #1
 8009378:	d007      	beq.n	800938a <_strtol_l.constprop.0+0x8a>
 800937a:	4581      	cmp	r9, r0
 800937c:	d320      	bcc.n	80093c0 <_strtol_l.constprop.0+0xc0>
 800937e:	d101      	bne.n	8009384 <_strtol_l.constprop.0+0x84>
 8009380:	45a2      	cmp	sl, r4
 8009382:	db1d      	blt.n	80093c0 <_strtol_l.constprop.0+0xc0>
 8009384:	fb00 4003 	mla	r0, r0, r3, r4
 8009388:	2201      	movs	r2, #1
 800938a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800938e:	e7eb      	b.n	8009368 <_strtol_l.constprop.0+0x68>
 8009390:	2c2b      	cmp	r4, #43	@ 0x2b
 8009392:	bf04      	itt	eq
 8009394:	782c      	ldrbeq	r4, [r5, #0]
 8009396:	1c95      	addeq	r5, r2, #2
 8009398:	e7cf      	b.n	800933a <_strtol_l.constprop.0+0x3a>
 800939a:	2b00      	cmp	r3, #0
 800939c:	d1da      	bne.n	8009354 <_strtol_l.constprop.0+0x54>
 800939e:	2c30      	cmp	r4, #48	@ 0x30
 80093a0:	bf0c      	ite	eq
 80093a2:	2308      	moveq	r3, #8
 80093a4:	230a      	movne	r3, #10
 80093a6:	e7d5      	b.n	8009354 <_strtol_l.constprop.0+0x54>
 80093a8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80093ac:	2f19      	cmp	r7, #25
 80093ae:	d801      	bhi.n	80093b4 <_strtol_l.constprop.0+0xb4>
 80093b0:	3c37      	subs	r4, #55	@ 0x37
 80093b2:	e7de      	b.n	8009372 <_strtol_l.constprop.0+0x72>
 80093b4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80093b8:	2f19      	cmp	r7, #25
 80093ba:	d804      	bhi.n	80093c6 <_strtol_l.constprop.0+0xc6>
 80093bc:	3c57      	subs	r4, #87	@ 0x57
 80093be:	e7d8      	b.n	8009372 <_strtol_l.constprop.0+0x72>
 80093c0:	f04f 32ff 	mov.w	r2, #4294967295
 80093c4:	e7e1      	b.n	800938a <_strtol_l.constprop.0+0x8a>
 80093c6:	1c53      	adds	r3, r2, #1
 80093c8:	d108      	bne.n	80093dc <_strtol_l.constprop.0+0xdc>
 80093ca:	2322      	movs	r3, #34	@ 0x22
 80093cc:	f8ce 3000 	str.w	r3, [lr]
 80093d0:	4660      	mov	r0, ip
 80093d2:	f1b8 0f00 	cmp.w	r8, #0
 80093d6:	d0a0      	beq.n	800931a <_strtol_l.constprop.0+0x1a>
 80093d8:	1e69      	subs	r1, r5, #1
 80093da:	e006      	b.n	80093ea <_strtol_l.constprop.0+0xea>
 80093dc:	b106      	cbz	r6, 80093e0 <_strtol_l.constprop.0+0xe0>
 80093de:	4240      	negs	r0, r0
 80093e0:	f1b8 0f00 	cmp.w	r8, #0
 80093e4:	d099      	beq.n	800931a <_strtol_l.constprop.0+0x1a>
 80093e6:	2a00      	cmp	r2, #0
 80093e8:	d1f6      	bne.n	80093d8 <_strtol_l.constprop.0+0xd8>
 80093ea:	f8c8 1000 	str.w	r1, [r8]
 80093ee:	e794      	b.n	800931a <_strtol_l.constprop.0+0x1a>
 80093f0:	0800976b 	.word	0x0800976b

080093f4 <_strtol_r>:
 80093f4:	f7ff bf84 	b.w	8009300 <_strtol_l.constprop.0>

080093f8 <_strtoul_l.constprop.0>:
 80093f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80093fc:	4e34      	ldr	r6, [pc, #208]	@ (80094d0 <_strtoul_l.constprop.0+0xd8>)
 80093fe:	4686      	mov	lr, r0
 8009400:	460d      	mov	r5, r1
 8009402:	4628      	mov	r0, r5
 8009404:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009408:	5d37      	ldrb	r7, [r6, r4]
 800940a:	f017 0708 	ands.w	r7, r7, #8
 800940e:	d1f8      	bne.n	8009402 <_strtoul_l.constprop.0+0xa>
 8009410:	2c2d      	cmp	r4, #45	@ 0x2d
 8009412:	d12f      	bne.n	8009474 <_strtoul_l.constprop.0+0x7c>
 8009414:	782c      	ldrb	r4, [r5, #0]
 8009416:	2701      	movs	r7, #1
 8009418:	1c85      	adds	r5, r0, #2
 800941a:	f033 0010 	bics.w	r0, r3, #16
 800941e:	d109      	bne.n	8009434 <_strtoul_l.constprop.0+0x3c>
 8009420:	2c30      	cmp	r4, #48	@ 0x30
 8009422:	d12c      	bne.n	800947e <_strtoul_l.constprop.0+0x86>
 8009424:	7828      	ldrb	r0, [r5, #0]
 8009426:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800942a:	2858      	cmp	r0, #88	@ 0x58
 800942c:	d127      	bne.n	800947e <_strtoul_l.constprop.0+0x86>
 800942e:	786c      	ldrb	r4, [r5, #1]
 8009430:	2310      	movs	r3, #16
 8009432:	3502      	adds	r5, #2
 8009434:	f04f 38ff 	mov.w	r8, #4294967295
 8009438:	2600      	movs	r6, #0
 800943a:	fbb8 f8f3 	udiv	r8, r8, r3
 800943e:	fb03 f908 	mul.w	r9, r3, r8
 8009442:	ea6f 0909 	mvn.w	r9, r9
 8009446:	4630      	mov	r0, r6
 8009448:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800944c:	f1bc 0f09 	cmp.w	ip, #9
 8009450:	d81c      	bhi.n	800948c <_strtoul_l.constprop.0+0x94>
 8009452:	4664      	mov	r4, ip
 8009454:	42a3      	cmp	r3, r4
 8009456:	dd2a      	ble.n	80094ae <_strtoul_l.constprop.0+0xb6>
 8009458:	f1b6 3fff 	cmp.w	r6, #4294967295
 800945c:	d007      	beq.n	800946e <_strtoul_l.constprop.0+0x76>
 800945e:	4580      	cmp	r8, r0
 8009460:	d322      	bcc.n	80094a8 <_strtoul_l.constprop.0+0xb0>
 8009462:	d101      	bne.n	8009468 <_strtoul_l.constprop.0+0x70>
 8009464:	45a1      	cmp	r9, r4
 8009466:	db1f      	blt.n	80094a8 <_strtoul_l.constprop.0+0xb0>
 8009468:	fb00 4003 	mla	r0, r0, r3, r4
 800946c:	2601      	movs	r6, #1
 800946e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009472:	e7e9      	b.n	8009448 <_strtoul_l.constprop.0+0x50>
 8009474:	2c2b      	cmp	r4, #43	@ 0x2b
 8009476:	bf04      	itt	eq
 8009478:	782c      	ldrbeq	r4, [r5, #0]
 800947a:	1c85      	addeq	r5, r0, #2
 800947c:	e7cd      	b.n	800941a <_strtoul_l.constprop.0+0x22>
 800947e:	2b00      	cmp	r3, #0
 8009480:	d1d8      	bne.n	8009434 <_strtoul_l.constprop.0+0x3c>
 8009482:	2c30      	cmp	r4, #48	@ 0x30
 8009484:	bf0c      	ite	eq
 8009486:	2308      	moveq	r3, #8
 8009488:	230a      	movne	r3, #10
 800948a:	e7d3      	b.n	8009434 <_strtoul_l.constprop.0+0x3c>
 800948c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8009490:	f1bc 0f19 	cmp.w	ip, #25
 8009494:	d801      	bhi.n	800949a <_strtoul_l.constprop.0+0xa2>
 8009496:	3c37      	subs	r4, #55	@ 0x37
 8009498:	e7dc      	b.n	8009454 <_strtoul_l.constprop.0+0x5c>
 800949a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800949e:	f1bc 0f19 	cmp.w	ip, #25
 80094a2:	d804      	bhi.n	80094ae <_strtoul_l.constprop.0+0xb6>
 80094a4:	3c57      	subs	r4, #87	@ 0x57
 80094a6:	e7d5      	b.n	8009454 <_strtoul_l.constprop.0+0x5c>
 80094a8:	f04f 36ff 	mov.w	r6, #4294967295
 80094ac:	e7df      	b.n	800946e <_strtoul_l.constprop.0+0x76>
 80094ae:	1c73      	adds	r3, r6, #1
 80094b0:	d106      	bne.n	80094c0 <_strtoul_l.constprop.0+0xc8>
 80094b2:	2322      	movs	r3, #34	@ 0x22
 80094b4:	f8ce 3000 	str.w	r3, [lr]
 80094b8:	4630      	mov	r0, r6
 80094ba:	b932      	cbnz	r2, 80094ca <_strtoul_l.constprop.0+0xd2>
 80094bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80094c0:	b107      	cbz	r7, 80094c4 <_strtoul_l.constprop.0+0xcc>
 80094c2:	4240      	negs	r0, r0
 80094c4:	2a00      	cmp	r2, #0
 80094c6:	d0f9      	beq.n	80094bc <_strtoul_l.constprop.0+0xc4>
 80094c8:	b106      	cbz	r6, 80094cc <_strtoul_l.constprop.0+0xd4>
 80094ca:	1e69      	subs	r1, r5, #1
 80094cc:	6011      	str	r1, [r2, #0]
 80094ce:	e7f5      	b.n	80094bc <_strtoul_l.constprop.0+0xc4>
 80094d0:	0800976b 	.word	0x0800976b

080094d4 <_strtoul_r>:
 80094d4:	f7ff bf90 	b.w	80093f8 <_strtoul_l.constprop.0>

080094d8 <_malloc_usable_size_r>:
 80094d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094dc:	1f18      	subs	r0, r3, #4
 80094de:	2b00      	cmp	r3, #0
 80094e0:	bfbc      	itt	lt
 80094e2:	580b      	ldrlt	r3, [r1, r0]
 80094e4:	18c0      	addlt	r0, r0, r3
 80094e6:	4770      	bx	lr

080094e8 <_init>:
 80094e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ea:	bf00      	nop
 80094ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094ee:	bc08      	pop	{r3}
 80094f0:	469e      	mov	lr, r3
 80094f2:	4770      	bx	lr

080094f4 <_fini>:
 80094f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094f6:	bf00      	nop
 80094f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094fa:	bc08      	pop	{r3}
 80094fc:	469e      	mov	lr, r3
 80094fe:	4770      	bx	lr
