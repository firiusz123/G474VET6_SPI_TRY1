
communication_try01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cb4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000038c  08009e94  08009e94  0000ae94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a220  0800a220  0000c06c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a220  0800a220  0000b220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a228  0800a228  0000c06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a228  0800a228  0000b228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a22c  0800a22c  0000b22c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800a230  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000450  2000006c  0800a29c  0000c06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004bc  0800a29c  0000c4bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000172d2  00000000  00000000  0000c09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000303d  00000000  00000000  0002336e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c0  00000000  00000000  000263b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f65  00000000  00000000  00027770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028045  00000000  00000000  000286d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018867  00000000  00000000  0005071a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fff59  00000000  00000000  00068f81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00168eda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ed0  00000000  00000000  00168f20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0016edf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009e7c 	.word	0x08009e7c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	08009e7c 	.word	0x08009e7c

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <command_checker>:
uint32_t diff=0;
uint32_t diff1=0;


char* command_checker(uint8_t* buffer)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
    int8_t ending_condition = 1;
 80005e8:	2301      	movs	r3, #1
 80005ea:	73fb      	strb	r3, [r7, #15]
    int8_t index = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	73bb      	strb	r3, [r7, #14]

    while (ending_condition)
 80005f0:	e00f      	b.n	8000612 <command_checker+0x32>
    {
        if (buffer[index] == '#')
 80005f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005f6:	687a      	ldr	r2, [r7, #4]
 80005f8:	4413      	add	r3, r2
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b23      	cmp	r3, #35	@ 0x23
 80005fe:	d102      	bne.n	8000606 <command_checker+0x26>
        {
            ending_condition = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	73fb      	strb	r3, [r7, #15]
 8000604:	e005      	b.n	8000612 <command_checker+0x32>
        }
        else
        {
            index++;
 8000606:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800060a:	b2db      	uxtb	r3, r3
 800060c:	3301      	adds	r3, #1
 800060e:	b2db      	uxtb	r3, r3
 8000610:	73bb      	strb	r3, [r7, #14]
    while (ending_condition)
 8000612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d1eb      	bne.n	80005f2 <command_checker+0x12>
        }

    }

    // Allocate memory for the command string with an extra byte for the null terminator
    char* command = (char*)malloc(index + 1);
 800061a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800061e:	3301      	adds	r3, #1
 8000620:	4618      	mov	r0, r3
 8000622:	f007 ff51 	bl	80084c8 <malloc>
 8000626:	4603      	mov	r3, r0
 8000628:	60bb      	str	r3, [r7, #8]
    if (command == NULL)
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d101      	bne.n	8000634 <command_checker+0x54>
    {
        return NULL;  // Allocation failed
 8000630:	2300      	movs	r3, #0
 8000632:	e00d      	b.n	8000650 <command_checker+0x70>
    }

    // Copy the command part from buffer to the newly allocated string
    strncpy(command, (char*)buffer, index);
 8000634:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000638:	461a      	mov	r2, r3
 800063a:	6879      	ldr	r1, [r7, #4]
 800063c:	68b8      	ldr	r0, [r7, #8]
 800063e:	f008 fa4d 	bl	8008adc <strncpy>
    command[index] = '\0';  // Null-terminate the string
 8000642:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000646:	68ba      	ldr	r2, [r7, #8]
 8000648:	4413      	add	r3, r2
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]

    return command;
 800064e:	68bb      	ldr	r3, [r7, #8]
}
 8000650:	4618      	mov	r0, r3
 8000652:	3710      	adds	r7, #16
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <head_control>:
char* head_control(UART_HandleTypeDef *huart) {
 8000658:	b580      	push	{r7, lr}
 800065a:	b086      	sub	sp, #24
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
    //char RxBuffer1[RX_BUFFER_SIZE];
    //memset(RxBuffer1, '\0', sizeof(RxBuffer1)); // Clear the buffer

    char received_char1;
    int8_t index = 0;
 8000660:	2300      	movs	r3, #0
 8000662:	75fb      	strb	r3, [r7, #23]
    memset(RxBuffer1, '\0', sizeof(RxBuffer1));
 8000664:	2220      	movs	r2, #32
 8000666:	2100      	movs	r1, #0
 8000668:	4836      	ldr	r0, [pc, #216]	@ (8000744 <head_control+0xec>)
 800066a:	f008 fa2f 	bl	8008acc <memset>
    // Continue to receive characters until the character '$' is found

    uint32_t start_time=HAL_GetTick();
 800066e:	f002 fbd9 	bl	8002e24 <HAL_GetTick>
 8000672:	6138      	str	r0, [r7, #16]
    uint32_t timeout1=7000;
 8000674:	f641 3358 	movw	r3, #7000	@ 0x1b58
 8000678:	60fb      	str	r3, [r7, #12]


    while (1) {
        // Receive one character at a time
		diff1=HAL_GetTick()-start_time;
 800067a:	f002 fbd3 	bl	8002e24 <HAL_GetTick>
 800067e:	4602      	mov	r2, r0
 8000680:	693b      	ldr	r3, [r7, #16]
 8000682:	1ad3      	subs	r3, r2, r3
 8000684:	4a30      	ldr	r2, [pc, #192]	@ (8000748 <head_control+0xf0>)
 8000686:	6013      	str	r3, [r2, #0]
		if(diff1>=timeout1){
 8000688:	4b2f      	ldr	r3, [pc, #188]	@ (8000748 <head_control+0xf0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	68fa      	ldr	r2, [r7, #12]
 800068e:	429a      	cmp	r2, r3
 8000690:	d801      	bhi.n	8000696 <head_control+0x3e>
		return "error$"; }
 8000692:	4b2e      	ldr	r3, [pc, #184]	@ (800074c <head_control+0xf4>)
 8000694:	e052      	b.n	800073c <head_control+0xe4>

    	if (HAL_UART_Receive(huart, (uint8_t*)&received_char1, 1, 100) == HAL_OK) {
 8000696:	f107 010b 	add.w	r1, r7, #11
 800069a:	2364      	movs	r3, #100	@ 0x64
 800069c:	2201      	movs	r2, #1
 800069e:	6878      	ldr	r0, [r7, #4]
 80006a0:	f006 fc88 	bl	8006fb4 <HAL_UART_Receive>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d1e7      	bne.n	800067a <head_control+0x22>
        //if (HAL_UART_Receive(&huart5, (uint8_t*)&received_char1, 1, HAL_MAX_DELAY) == HAL_OK) {
        //if (HAL_UART_Receive(&huart5, (uint8_t*)received_char1, 1, HAL_MAX_DELAY) == HAL_OK) {
            // Skip adding to buffer if the received character is '\0'
    		if (received_char1=='H'){
 80006aa:	7afb      	ldrb	r3, [r7, #11]
 80006ac:	2b48      	cmp	r3, #72	@ 0x48
 80006ae:	d136      	bne.n	800071e <head_control+0xc6>
    			RxBuffer1[index++] = received_char1;
 80006b0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80006b4:	b2d3      	uxtb	r3, r2
 80006b6:	3301      	adds	r3, #1
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	75fb      	strb	r3, [r7, #23]
 80006bc:	7af9      	ldrb	r1, [r7, #11]
 80006be:	4b21      	ldr	r3, [pc, #132]	@ (8000744 <head_control+0xec>)
 80006c0:	5499      	strb	r1, [r3, r2]

    			while(1){
    				diff=HAL_GetTick()-start_time;
 80006c2:	f002 fbaf 	bl	8002e24 <HAL_GetTick>
 80006c6:	4602      	mov	r2, r0
 80006c8:	693b      	ldr	r3, [r7, #16]
 80006ca:	1ad3      	subs	r3, r2, r3
 80006cc:	4a20      	ldr	r2, [pc, #128]	@ (8000750 <head_control+0xf8>)
 80006ce:	6013      	str	r3, [r2, #0]
    				if(diff>=timeout1){
 80006d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000750 <head_control+0xf8>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	68fa      	ldr	r2, [r7, #12]
 80006d6:	429a      	cmp	r2, r3
 80006d8:	d920      	bls.n	800071c <head_control+0xc4>
    				break;}
    				if (HAL_UART_Receive(huart, (uint8_t*)&received_char1, 1, 100) == HAL_OK) {
 80006da:	f107 010b 	add.w	r1, r7, #11
 80006de:	2364      	movs	r3, #100	@ 0x64
 80006e0:	2201      	movs	r2, #1
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f006 fc66 	bl	8006fb4 <HAL_UART_Receive>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d1e9      	bne.n	80006c2 <head_control+0x6a>


    						if (received_char1 == '\0') {
 80006ee:	7afb      	ldrb	r3, [r7, #11]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d011      	beq.n	8000718 <head_control+0xc0>
    							continue;
    						}


    						RxBuffer1[index++] = received_char1;
 80006f4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80006f8:	b2d3      	uxtb	r3, r2
 80006fa:	3301      	adds	r3, #1
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	75fb      	strb	r3, [r7, #23]
 8000700:	7af9      	ldrb	r1, [r7, #11]
 8000702:	4b10      	ldr	r3, [pc, #64]	@ (8000744 <head_control+0xec>)
 8000704:	5499      	strb	r1, [r3, r2]
            //HAL_Delay(1);
            // Break the loop if the end of the buffer is reached or if '$' is received
    						if (index >= RX_BUFFER_SIZE || received_char1 == '$') {
 8000706:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800070a:	2b1f      	cmp	r3, #31
 800070c:	dc02      	bgt.n	8000714 <head_control+0xbc>
 800070e:	7afb      	ldrb	r3, [r7, #11]
 8000710:	2b24      	cmp	r3, #36	@ 0x24
 8000712:	d1d6      	bne.n	80006c2 <head_control+0x6a>
    							return RxBuffer1;
 8000714:	4b0b      	ldr	r3, [pc, #44]	@ (8000744 <head_control+0xec>)
 8000716:	e011      	b.n	800073c <head_control+0xe4>
    							continue;
 8000718:	bf00      	nop
    				diff=HAL_GetTick()-start_time;
 800071a:	e7d2      	b.n	80006c2 <head_control+0x6a>
    				break;}
 800071c:	bf00      	nop
    						}
    						//else {break;}
    					}
    				}
    			}
    		if (index >= RX_BUFFER_SIZE || received_char1 == '$') {
 800071e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000722:	2b1f      	cmp	r3, #31
 8000724:	dc02      	bgt.n	800072c <head_control+0xd4>
 8000726:	7afb      	ldrb	r3, [r7, #11]
 8000728:	2b24      	cmp	r3, #36	@ 0x24
 800072a:	d101      	bne.n	8000730 <head_control+0xd8>
    			return RxBuffer1;
 800072c:	4b05      	ldr	r3, [pc, #20]	@ (8000744 <head_control+0xec>)
 800072e:	e005      	b.n	800073c <head_control+0xe4>
    		    						}
			if(diff>=timeout1){
 8000730:	4b07      	ldr	r3, [pc, #28]	@ (8000750 <head_control+0xf8>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	68fa      	ldr	r2, [r7, #12]
 8000736:	429a      	cmp	r2, r3
 8000738:	d89f      	bhi.n	800067a <head_control+0x22>
				return "error$";}
 800073a:	4b04      	ldr	r3, [pc, #16]	@ (800074c <head_control+0xf4>)

    // Null-terminate the string
    RxBuffer1[index] = '\0';

    return RxBuffer1;
}
 800073c:	4618      	mov	r0, r3
 800073e:	3718      	adds	r7, #24
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	200000c8 	.word	0x200000c8
 8000748:	200000f0 	.word	0x200000f0
 800074c:	08009e94 	.word	0x08009e94
 8000750:	200000ec 	.word	0x200000ec

08000754 <swtch_control>:

char* swtch_control(void){ //odbiór stanów czujników obrotu kafelka
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0

		memset(RxBuffer1, '\0', sizeof(RxBuffer1)); // Clear the buffer
 800075a:	2220      	movs	r2, #32
 800075c:	2100      	movs	r1, #0
 800075e:	4817      	ldr	r0, [pc, #92]	@ (80007bc <swtch_control+0x68>)
 8000760:	f008 f9b4 	bl	8008acc <memset>

	    char received_char2;
	    int8_t index = 0;
 8000764:	2300      	movs	r3, #0
 8000766:	71fb      	strb	r3, [r7, #7]

	    // Continue to receive characters until the character '$' is found
	    while (1) {
	            // Receive one character at a time
	        	if (HAL_UART_Receive(&huart5, (uint8_t*)&received_char2, 1, 1000) == HAL_OK) {
 8000768:	1db9      	adds	r1, r7, #6
 800076a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800076e:	2201      	movs	r2, #1
 8000770:	4813      	ldr	r0, [pc, #76]	@ (80007c0 <swtch_control+0x6c>)
 8000772:	f006 fc1f 	bl	8006fb4 <HAL_UART_Receive>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d1f5      	bne.n	8000768 <swtch_control+0x14>

	        		// Skip adding to buffer if the received character is '\0'
	                if (received_char2 == '\0') {
 800077c:	79bb      	ldrb	r3, [r7, #6]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d010      	beq.n	80007a4 <swtch_control+0x50>
	                    continue;
	                }

	                RxBuffer1[index++] = received_char2;
 8000782:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000786:	b2d3      	uxtb	r3, r2
 8000788:	3301      	adds	r3, #1
 800078a:	b2db      	uxtb	r3, r3
 800078c:	71fb      	strb	r3, [r7, #7]
 800078e:	79b9      	ldrb	r1, [r7, #6]
 8000790:	4b0a      	ldr	r3, [pc, #40]	@ (80007bc <swtch_control+0x68>)
 8000792:	5499      	strb	r1, [r3, r2]
	                //HAL_Delay(1);
	                // Break the loop if the end of the buffer is reached or if '$' is received
	                if (index >= RX_BUFFER_SIZE || received_char2 == '$') {
 8000794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000798:	2b1f      	cmp	r3, #31
 800079a:	dc05      	bgt.n	80007a8 <swtch_control+0x54>
 800079c:	79bb      	ldrb	r3, [r7, #6]
 800079e:	2b24      	cmp	r3, #36	@ 0x24
 80007a0:	d002      	beq.n	80007a8 <swtch_control+0x54>
 80007a2:	e7e1      	b.n	8000768 <swtch_control+0x14>
	                    continue;
 80007a4:	bf00      	nop
	        	if (HAL_UART_Receive(&huart5, (uint8_t*)&received_char2, 1, 1000) == HAL_OK) {
 80007a6:	e7df      	b.n	8000768 <swtch_control+0x14>

	                }
	            }
	    }
	        // Null-terminate the string
	        RxBuffer1[index] = '\0';
 80007a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ac:	4a03      	ldr	r2, [pc, #12]	@ (80007bc <swtch_control+0x68>)
 80007ae:	2100      	movs	r1, #0
 80007b0:	54d1      	strb	r1, [r2, r3]

	        return RxBuffer1;
 80007b2:	4b02      	ldr	r3, [pc, #8]	@ (80007bc <swtch_control+0x68>)
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	200000c8 	.word	0x200000c8
 80007c0:	200002d0 	.word	0x200002d0

080007c4 <gaps_control>:
char* gaps_control(void){ //odbiór stanów czujników szczelinowych w odkręcaczach
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0

		memset(RxBuffer1, '\0', sizeof(RxBuffer1)); // Clear the buffer
 80007ca:	2220      	movs	r2, #32
 80007cc:	2100      	movs	r1, #0
 80007ce:	4817      	ldr	r0, [pc, #92]	@ (800082c <gaps_control+0x68>)
 80007d0:	f008 f97c 	bl	8008acc <memset>

	    char received_char2;
	    int8_t index = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	71fb      	strb	r3, [r7, #7]

	    // Continue to receive characters until the character '$' is found
	    while (1) {
	            // Receive one character at a time
	        	if (HAL_UART_Receive(&huart5, (uint8_t*)&received_char2, 1, 1000) == HAL_OK) {
 80007d8:	1db9      	adds	r1, r7, #6
 80007da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007de:	2201      	movs	r2, #1
 80007e0:	4813      	ldr	r0, [pc, #76]	@ (8000830 <gaps_control+0x6c>)
 80007e2:	f006 fbe7 	bl	8006fb4 <HAL_UART_Receive>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d1f5      	bne.n	80007d8 <gaps_control+0x14>

	        		// Skip adding to buffer if the received character is '\0'
	                if (received_char2 == '\0') {
 80007ec:	79bb      	ldrb	r3, [r7, #6]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d010      	beq.n	8000814 <gaps_control+0x50>
	                    continue;
	                }

	                RxBuffer1[index++] = received_char2;
 80007f2:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80007f6:	b2d3      	uxtb	r3, r2
 80007f8:	3301      	adds	r3, #1
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	71fb      	strb	r3, [r7, #7]
 80007fe:	79b9      	ldrb	r1, [r7, #6]
 8000800:	4b0a      	ldr	r3, [pc, #40]	@ (800082c <gaps_control+0x68>)
 8000802:	5499      	strb	r1, [r3, r2]
	                //HAL_Delay(1);
	                // Break the loop if the end of the buffer is reached or if '$' is received
	                if (index >= RX_BUFFER_SIZE || received_char2 == '$') {
 8000804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000808:	2b1f      	cmp	r3, #31
 800080a:	dc05      	bgt.n	8000818 <gaps_control+0x54>
 800080c:	79bb      	ldrb	r3, [r7, #6]
 800080e:	2b24      	cmp	r3, #36	@ 0x24
 8000810:	d002      	beq.n	8000818 <gaps_control+0x54>
 8000812:	e7e1      	b.n	80007d8 <gaps_control+0x14>
	                    continue;
 8000814:	bf00      	nop
	        	if (HAL_UART_Receive(&huart5, (uint8_t*)&received_char2, 1, 1000) == HAL_OK) {
 8000816:	e7df      	b.n	80007d8 <gaps_control+0x14>

	                }
	            }
	    }
	        // Null-terminate the string
	        RxBuffer1[index] = '\0';
 8000818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081c:	4a03      	ldr	r2, [pc, #12]	@ (800082c <gaps_control+0x68>)
 800081e:	2100      	movs	r1, #0
 8000820:	54d1      	strb	r1, [r2, r3]

	        return RxBuffer1;
 8000822:	4b02      	ldr	r3, [pc, #8]	@ (800082c <gaps_control+0x68>)
}
 8000824:	4618      	mov	r0, r3
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	200000c8 	.word	0x200000c8
 8000830:	200002d0 	.word	0x200002d0

08000834 <SPI_Communication>:
void SPI_Communication(void)
{
 8000834:	b590      	push	{r4, r7, lr}
 8000836:	b0a9      	sub	sp, #164	@ 0xa4
 8000838:	af02      	add	r7, sp, #8

    int8_t index = 0;
 800083a:	2300      	movs	r3, #0
 800083c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    uint8_t receivedData;
    uint8_t pinstate = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 8000840:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000844:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000848:	f002 fe6c 	bl	8003524 <HAL_GPIO_ReadPin>
 800084c:	4603      	mov	r3, r0
 800084e:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96


    if (!pinstate) {memset(RxBuffer, 0, sizeof(RxBuffer));}
 8000852:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000856:	2b00      	cmp	r3, #0
 8000858:	f040 834e 	bne.w	8000ef8 <SPI_Communication+0x6c4>
 800085c:	2220      	movs	r2, #32
 800085e:	2100      	movs	r1, #0
 8000860:	48b5      	ldr	r0, [pc, #724]	@ (8000b38 <SPI_Communication+0x304>)
 8000862:	f008 f933 	bl	8008acc <memset>

    while (!pinstate) {
 8000866:	e347      	b.n	8000ef8 <SPI_Communication+0x6c4>
        // Receive data from SPI
        HAL_SPI_Receive(&hspi1, &receivedData, 1, HAL_MAX_DELAY);
 8000868:	f107 0156 	add.w	r1, r7, #86	@ 0x56
 800086c:	f04f 33ff 	mov.w	r3, #4294967295
 8000870:	2201      	movs	r2, #1
 8000872:	48b2      	ldr	r0, [pc, #712]	@ (8000b3c <SPI_Communication+0x308>)
 8000874:	f004 f8f0 	bl	8004a58 <HAL_SPI_Receive>

        // Check for buffer overflow
        if (index < MAX_BUFFER_SIZE)
 8000878:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 800087c:	2b1f      	cmp	r3, #31
 800087e:	f300 833b 	bgt.w	8000ef8 <SPI_Communication+0x6c4>
        {
            // Store received data in buffer
            RxBuffer[index++] = (char)receivedData;
 8000882:	f997 2097 	ldrsb.w	r2, [r7, #151]	@ 0x97
 8000886:	b2d3      	uxtb	r3, r2
 8000888:	3301      	adds	r3, #1
 800088a:	b2db      	uxtb	r3, r3
 800088c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8000890:	f897 1056 	ldrb.w	r1, [r7, #86]	@ 0x56
 8000894:	4ba8      	ldr	r3, [pc, #672]	@ (8000b38 <SPI_Communication+0x304>)
 8000896:	5499      	strb	r1, [r3, r2]

            // Check if end of message
            if ((char)receivedData == END_OF_MESSAGE)
 8000898:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 800089c:	2b24      	cmp	r3, #36	@ 0x24
 800089e:	f040 8322 	bne.w	8000ee6 <SPI_Communication+0x6b2>
            {
            	char* command = command_checker(RxBuffer);
 80008a2:	48a5      	ldr	r0, [pc, #660]	@ (8000b38 <SPI_Communication+0x304>)
 80008a4:	f7ff fe9c 	bl	80005e0 <command_checker>
 80008a8:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
            	if(command == NULL){command = "MEM#ERR";}
 80008ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d103      	bne.n	80008bc <SPI_Communication+0x88>
 80008b4:	4ba2      	ldr	r3, [pc, #648]	@ (8000b40 <SPI_Communication+0x30c>)
 80008b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80008ba:	e2ff      	b.n	8000ebc <SPI_Communication+0x688>


////////////////////////////////////////////////////////////////////////////////////////////////////////////
            	//change to 2 heads
            	//done
            	else if(strcmp(command, "HEAD") == 0)
 80008bc:	49a1      	ldr	r1, [pc, #644]	@ (8000b44 <SPI_Communication+0x310>)
 80008be:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 80008c2:	f7ff fcad 	bl	8000220 <strcmp>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	f040 809b 	bne.w	8000a04 <SPI_Communication+0x1d0>
            	{


            		char WhichHead;
            		int HeadState;
            		char* received_data = NULL;  // Initialize to avoid undefined behavior
 80008ce:	2300      	movs	r3, #0
 80008d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            		char* str = NULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

            		memset(TxBuffer, '\0', sizeof(TxBuffer));
 80008da:	2220      	movs	r2, #32
 80008dc:	2100      	movs	r1, #0
 80008de:	489a      	ldr	r0, [pc, #616]	@ (8000b48 <SPI_Communication+0x314>)
 80008e0:	f008 f8f4 	bl	8008acc <memset>
            		sscanf(RxBuffer, "HEAD#%c#%d$", &WhichHead,&HeadState);
 80008e4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80008e8:	f107 0255 	add.w	r2, r7, #85	@ 0x55
 80008ec:	4997      	ldr	r1, [pc, #604]	@ (8000b4c <SPI_Communication+0x318>)
 80008ee:	4892      	ldr	r0, [pc, #584]	@ (8000b38 <SPI_Communication+0x304>)
 80008f0:	f007 ffe8 	bl	80088c4 <siscanf>




            		if(WhichHead == 'A')
 80008f4:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80008f8:	2b41      	cmp	r3, #65	@ 0x41
 80008fa:	d10f      	bne.n	800091c <SPI_Communication+0xe8>
            		{
            			HAL_UART_Transmit(&huart4, (uint8_t *)RxBuffer, strlen(RxBuffer), 100);
 80008fc:	488e      	ldr	r0, [pc, #568]	@ (8000b38 <SPI_Communication+0x304>)
 80008fe:	f7ff fc99 	bl	8000234 <strlen>
 8000902:	4603      	mov	r3, r0
 8000904:	b29a      	uxth	r2, r3
 8000906:	2364      	movs	r3, #100	@ 0x64
 8000908:	498b      	ldr	r1, [pc, #556]	@ (8000b38 <SPI_Communication+0x304>)
 800090a:	4891      	ldr	r0, [pc, #580]	@ (8000b50 <SPI_Communication+0x31c>)
 800090c:	f006 fac4 	bl	8006e98 <HAL_UART_Transmit>
            			received_data = head_control(&huart4);
 8000910:	488f      	ldr	r0, [pc, #572]	@ (8000b50 <SPI_Communication+0x31c>)
 8000912:	f7ff fea1 	bl	8000658 <head_control>
 8000916:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 800091a:	e016      	b.n	800094a <SPI_Communication+0x116>


            		}
            		else if(WhichHead == 'B')
 800091c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000920:	2b42      	cmp	r3, #66	@ 0x42
 8000922:	d10f      	bne.n	8000944 <SPI_Communication+0x110>
            		{
            			HAL_UART_Transmit(&huart5, (uint8_t *)RxBuffer, strlen(RxBuffer), 100);
 8000924:	4884      	ldr	r0, [pc, #528]	@ (8000b38 <SPI_Communication+0x304>)
 8000926:	f7ff fc85 	bl	8000234 <strlen>
 800092a:	4603      	mov	r3, r0
 800092c:	b29a      	uxth	r2, r3
 800092e:	2364      	movs	r3, #100	@ 0x64
 8000930:	4981      	ldr	r1, [pc, #516]	@ (8000b38 <SPI_Communication+0x304>)
 8000932:	4888      	ldr	r0, [pc, #544]	@ (8000b54 <SPI_Communication+0x320>)
 8000934:	f006 fab0 	bl	8006e98 <HAL_UART_Transmit>
            			received_data = head_control(&huart5);
 8000938:	4886      	ldr	r0, [pc, #536]	@ (8000b54 <SPI_Communication+0x320>)
 800093a:	f7ff fe8d 	bl	8000658 <head_control>
 800093e:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 8000942:	e002      	b.n	800094a <SPI_Communication+0x116>

            		}
            		else{str = "error$";}
 8000944:	4b84      	ldr	r3, [pc, #528]	@ (8000b58 <SPI_Communication+0x324>)
 8000946:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

            		memset(TxBuffer, '\0', sizeof(TxBuffer));
 800094a:	2220      	movs	r2, #32
 800094c:	2100      	movs	r1, #0
 800094e:	487e      	ldr	r0, [pc, #504]	@ (8000b48 <SPI_Communication+0x314>)
 8000950:	f008 f8bc 	bl	8008acc <memset>
            		if(strcmp(received_data, "HEAD#0#F0F0F0F0$") == 0 )
 8000954:	4981      	ldr	r1, [pc, #516]	@ (8000b5c <SPI_Communication+0x328>)
 8000956:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800095a:	f7ff fc61 	bl	8000220 <strcmp>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d103      	bne.n	800096c <SPI_Communication+0x138>
            		{str = "HEAD#0#NOK$";}
 8000964:	4b7e      	ldr	r3, [pc, #504]	@ (8000b60 <SPI_Communication+0x32c>)
 8000966:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800096a:	e022      	b.n	80009b2 <SPI_Communication+0x17e>
            		else if(strcmp(received_data, "HEAD#1#F0F0F0F0$") == 0 )
 800096c:	497d      	ldr	r1, [pc, #500]	@ (8000b64 <SPI_Communication+0x330>)
 800096e:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8000972:	f7ff fc55 	bl	8000220 <strcmp>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d103      	bne.n	8000984 <SPI_Communication+0x150>
            		{str = "HEAD#1#NOK$";}
 800097c:	4b7a      	ldr	r3, [pc, #488]	@ (8000b68 <SPI_Communication+0x334>)
 800097e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000982:	e016      	b.n	80009b2 <SPI_Communication+0x17e>
            		else if (received_data[5]=='0')
 8000984:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000988:	3305      	adds	r3, #5
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2b30      	cmp	r3, #48	@ 0x30
 800098e:	d103      	bne.n	8000998 <SPI_Communication+0x164>
            		{str = "HEAD#A#OK$";}
 8000990:	4b76      	ldr	r3, [pc, #472]	@ (8000b6c <SPI_Communication+0x338>)
 8000992:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000996:	e00c      	b.n	80009b2 <SPI_Communication+0x17e>
            		else if (received_data[5]=='1')
 8000998:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800099c:	3305      	adds	r3, #5
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	2b31      	cmp	r3, #49	@ 0x31
 80009a2:	d103      	bne.n	80009ac <SPI_Communication+0x178>
            		{str="HEAD#B#OK$";}
 80009a4:	4b72      	ldr	r3, [pc, #456]	@ (8000b70 <SPI_Communication+0x33c>)
 80009a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80009aa:	e002      	b.n	80009b2 <SPI_Communication+0x17e>
            		else{str="HEAD#0#NOK$";}
 80009ac:	4b6c      	ldr	r3, [pc, #432]	@ (8000b60 <SPI_Communication+0x32c>)
 80009ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

            		if (received_data == NULL || strcmp(received_data, "error$") == 0){
 80009b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d007      	beq.n	80009ca <SPI_Communication+0x196>
 80009ba:	4967      	ldr	r1, [pc, #412]	@ (8000b58 <SPI_Communication+0x324>)
 80009bc:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 80009c0:	f7ff fc2e 	bl	8000220 <strcmp>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d110      	bne.n	80009ec <SPI_Communication+0x1b8>
            			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 80009ca:	2110      	movs	r1, #16
 80009cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009d0:	f002 fdd8 	bl	8003584 <HAL_GPIO_TogglePin>
            			HAL_Delay(500);
 80009d4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80009d8:	f002 fa30 	bl	8002e3c <HAL_Delay>
            			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 80009dc:	2110      	movs	r1, #16
 80009de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009e2:	f002 fdcf 	bl	8003584 <HAL_GPIO_TogglePin>
            			str = "error$";}
 80009e6:	4b5c      	ldr	r3, [pc, #368]	@ (8000b58 <SPI_Communication+0x324>)
 80009e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

            		strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
 80009ec:	221f      	movs	r2, #31
 80009ee:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 80009f2:	4855      	ldr	r0, [pc, #340]	@ (8000b48 <SPI_Communication+0x314>)
 80009f4:	f008 f872 	bl	8008adc <strncpy>
            		memset(RxBuffer, '\0', sizeof(RxBuffer));
 80009f8:	2220      	movs	r2, #32
 80009fa:	2100      	movs	r1, #0
 80009fc:	484e      	ldr	r0, [pc, #312]	@ (8000b38 <SPI_Communication+0x304>)
 80009fe:	f008 f865 	bl	8008acc <memset>
 8000a02:	e25b      	b.n	8000ebc <SPI_Communication+0x688>

            	 }
///////////////////////////////////////////////////////////////////////////////////////////////////////////
            	// fix it according to the commands file
            	//done
            	else if(strcmp(command, "MAGNET") == 0)
 8000a04:	495b      	ldr	r1, [pc, #364]	@ (8000b74 <SPI_Communication+0x340>)
 8000a06:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8000a0a:	f7ff fc09 	bl	8000220 <strcmp>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d170      	bne.n	8000af6 <SPI_Communication+0x2c2>


            		int8_t MagState;
            		char WhitchMag;
            		char message_to_uart;
            		memset(TxBuffer, '\0', sizeof(TxBuffer));
 8000a14:	2220      	movs	r2, #32
 8000a16:	2100      	movs	r1, #0
 8000a18:	484b      	ldr	r0, [pc, #300]	@ (8000b48 <SPI_Communication+0x314>)
 8000a1a:	f008 f857 	bl	8008acc <memset>
					sscanf(RxBuffer, "MAGNET#%c#%d$", &WhitchMag,&MagState);
 8000a1e:	f107 034f 	add.w	r3, r7, #79	@ 0x4f
 8000a22:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 8000a26:	4954      	ldr	r1, [pc, #336]	@ (8000b78 <SPI_Communication+0x344>)
 8000a28:	4843      	ldr	r0, [pc, #268]	@ (8000b38 <SPI_Communication+0x304>)
 8000a2a:	f007 ff4b 	bl	80088c4 <siscanf>
					sprintf(message_to_uart, "MAGNET#%d$", MagState);
 8000a2e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000a32:	4618      	mov	r0, r3
 8000a34:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 8000a38:	461a      	mov	r2, r3
 8000a3a:	4950      	ldr	r1, [pc, #320]	@ (8000b7c <SPI_Communication+0x348>)
 8000a3c:	f007 ff22 	bl	8008884 <siprintf>

					if (WhitchMag == 'A')
 8000a40:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000a44:	2b41      	cmp	r3, #65	@ 0x41
 8000a46:	d11a      	bne.n	8000a7e <SPI_Communication+0x24a>
					{
					  HAL_UART_Transmit(&huart5, (uint8_t *)message_to_uart, strlen(message_to_uart), HAL_MAX_DELAY);
 8000a48:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000a4c:	461c      	mov	r4, r3
 8000a4e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff fbee 	bl	8000234 <strlen>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	b29a      	uxth	r2, r3
 8000a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a60:	4621      	mov	r1, r4
 8000a62:	483c      	ldr	r0, [pc, #240]	@ (8000b54 <SPI_Communication+0x320>)
 8000a64:	f006 fa18 	bl	8006e98 <HAL_UART_Transmit>
					  TileONA = (MagState != 0) ? 1 : 0;
 8000a68:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	bf14      	ite	ne
 8000a70:	2301      	movne	r3, #1
 8000a72:	2300      	moveq	r3, #0
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	b25a      	sxtb	r2, r3
 8000a78:	4b41      	ldr	r3, [pc, #260]	@ (8000b80 <SPI_Communication+0x34c>)
 8000a7a:	701a      	strb	r2, [r3, #0]
 8000a7c:	e01d      	b.n	8000aba <SPI_Communication+0x286>
					}
					else if (WhitchMag == 'B')
 8000a7e:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000a82:	2b42      	cmp	r3, #66	@ 0x42
 8000a84:	d119      	bne.n	8000aba <SPI_Communication+0x286>
					{
					  HAL_UART_Transmit(&huart4, (uint8_t *)message_to_uart, strlen(message_to_uart), HAL_MAX_DELAY);
 8000a86:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000a8a:	461c      	mov	r4, r3
 8000a8c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff fbcf 	bl	8000234 <strlen>
 8000a96:	4603      	mov	r3, r0
 8000a98:	b29a      	uxth	r2, r3
 8000a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9e:	4621      	mov	r1, r4
 8000aa0:	482b      	ldr	r0, [pc, #172]	@ (8000b50 <SPI_Communication+0x31c>)
 8000aa2:	f006 f9f9 	bl	8006e98 <HAL_UART_Transmit>
					  TileONB = (MagState != 0) ? 1 : 0;
 8000aa6:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	bf14      	ite	ne
 8000aae:	2301      	movne	r3, #1
 8000ab0:	2300      	moveq	r3, #0
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	b25a      	sxtb	r2, r3
 8000ab6:	4b33      	ldr	r3, [pc, #204]	@ (8000b84 <SPI_Communication+0x350>)
 8000ab8:	701a      	strb	r2, [r3, #0]
					%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
					*/


					char response[50];
					sprintf(response, "MAGNET#%c#%d#OK$", WhitchMag, MagState);
 8000aba:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000abe:	461a      	mov	r2, r3
 8000ac0:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 8000ac4:	4638      	mov	r0, r7
 8000ac6:	4930      	ldr	r1, [pc, #192]	@ (8000b88 <SPI_Communication+0x354>)
 8000ac8:	f007 fedc 	bl	8008884 <siprintf>

					strncpy(TxBuffer, response, sizeof(TxBuffer) - 1);
 8000acc:	463b      	mov	r3, r7
 8000ace:	221f      	movs	r2, #31
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	481d      	ldr	r0, [pc, #116]	@ (8000b48 <SPI_Communication+0x314>)
 8000ad4:	f008 f802 	bl	8008adc <strncpy>
					HAL_Delay(200);
 8000ad8:	20c8      	movs	r0, #200	@ 0xc8
 8000ada:	f002 f9af 	bl	8002e3c <HAL_Delay>
					//char *str = "MAGNET#4#OK$";
					//HAL_Delay(200);
					//strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
            		//HAL_Delay(200);

            		memset(RxBuffer, '\0', sizeof(RxBuffer));
 8000ade:	2220      	movs	r2, #32
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4815      	ldr	r0, [pc, #84]	@ (8000b38 <SPI_Communication+0x304>)
 8000ae4:	f007 fff2 	bl	8008acc <memset>
            		memset(response,'\0',sizeof(response));
 8000ae8:	463b      	mov	r3, r7
 8000aea:	2232      	movs	r2, #50	@ 0x32
 8000aec:	2100      	movs	r1, #0
 8000aee:	4618      	mov	r0, r3
 8000af0:	f007 ffec 	bl	8008acc <memset>
 8000af4:	e1e2      	b.n	8000ebc <SPI_Communication+0x688>
            	}
///////////////////////////////////////////////////////////////////////////////////////////////////////////
            	else if(strcmp(command,"ROT")==0)
 8000af6:	4925      	ldr	r1, [pc, #148]	@ (8000b8c <SPI_Communication+0x358>)
 8000af8:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8000afc:	f7ff fb90 	bl	8000220 <strcmp>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d148      	bne.n	8000b98 <SPI_Communication+0x364>
            	{
            		    int number;
            		    sscanf(RxBuffer, "ROT#%d$", &number);
 8000b06:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	4920      	ldr	r1, [pc, #128]	@ (8000b90 <SPI_Communication+0x35c>)
 8000b0e:	480a      	ldr	r0, [pc, #40]	@ (8000b38 <SPI_Communication+0x304>)
 8000b10:	f007 fed8 	bl	80088c4 <siscanf>
						//Motor_Steer(number);
            		memset(TxBuffer, '\0', sizeof(TxBuffer));
 8000b14:	2220      	movs	r2, #32
 8000b16:	2100      	movs	r1, #0
 8000b18:	480b      	ldr	r0, [pc, #44]	@ (8000b48 <SPI_Communication+0x314>)
 8000b1a:	f007 ffd7 	bl	8008acc <memset>
            		char *str = "ROT#OK$";
 8000b1e:	4b1d      	ldr	r3, [pc, #116]	@ (8000b94 <SPI_Communication+0x360>)
 8000b20:	65bb      	str	r3, [r7, #88]	@ 0x58
            		strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
 8000b22:	221f      	movs	r2, #31
 8000b24:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8000b26:	4808      	ldr	r0, [pc, #32]	@ (8000b48 <SPI_Communication+0x314>)
 8000b28:	f007 ffd8 	bl	8008adc <strncpy>
            		memset(RxBuffer, '\0', sizeof(RxBuffer));
 8000b2c:	2220      	movs	r2, #32
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4801      	ldr	r0, [pc, #4]	@ (8000b38 <SPI_Communication+0x304>)
 8000b32:	f007 ffcb 	bl	8008acc <memset>
 8000b36:	e1c1      	b.n	8000ebc <SPI_Communication+0x688>
 8000b38:	20000088 	.word	0x20000088
 8000b3c:	200000f4 	.word	0x200000f4
 8000b40:	08009e9c 	.word	0x08009e9c
 8000b44:	08009ea4 	.word	0x08009ea4
 8000b48:	200000a8 	.word	0x200000a8
 8000b4c:	08009eac 	.word	0x08009eac
 8000b50:	2000023c 	.word	0x2000023c
 8000b54:	200002d0 	.word	0x200002d0
 8000b58:	08009e94 	.word	0x08009e94
 8000b5c:	08009eb8 	.word	0x08009eb8
 8000b60:	08009ecc 	.word	0x08009ecc
 8000b64:	08009ed8 	.word	0x08009ed8
 8000b68:	08009eec 	.word	0x08009eec
 8000b6c:	08009ef8 	.word	0x08009ef8
 8000b70:	08009f04 	.word	0x08009f04
 8000b74:	08009f10 	.word	0x08009f10
 8000b78:	08009f18 	.word	0x08009f18
 8000b7c:	08009f28 	.word	0x08009f28
 8000b80:	200000ea 	.word	0x200000ea
 8000b84:	200000eb 	.word	0x200000eb
 8000b88:	08009f34 	.word	0x08009f34
 8000b8c:	08009f48 	.word	0x08009f48
 8000b90:	08009f4c 	.word	0x08009f4c
 8000b94:	08009f54 	.word	0x08009f54
            	}
/////////////////////////////////////////////////////////////////////////////////////////////////////////
            	//need a fix for 2 heads
            	else if(strcmp(command,"AROT")==0)
 8000b98:	498c      	ldr	r1, [pc, #560]	@ (8000dcc <SPI_Communication+0x598>)
 8000b9a:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8000b9e:	f7ff fb3f 	bl	8000220 <strcmp>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d15a      	bne.n	8000c5e <SPI_Communication+0x42a>
            	{
            	    uint32_t start_time=HAL_GetTick();
 8000ba8:	f002 f93c 	bl	8002e24 <HAL_GetTick>
 8000bac:	6738      	str	r0, [r7, #112]	@ 0x70
            	    uint32_t timeout1=10000;
 8000bae:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000bb2:	66fb      	str	r3, [r7, #108]	@ 0x6c

            		 int number;
            		 char WhichHeadRot;
            		 int8_t HeadSide;

            		 sscanf(RxBuffer, "AROT#%c#%d$", &WhichHeadRot,&number);
 8000bb4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000bb8:	f107 0243 	add.w	r2, r7, #67	@ 0x43
 8000bbc:	4984      	ldr	r1, [pc, #528]	@ (8000dd0 <SPI_Communication+0x59c>)
 8000bbe:	4885      	ldr	r0, [pc, #532]	@ (8000dd4 <SPI_Communication+0x5a0>)
 8000bc0:	f007 fe80 	bl	80088c4 <siscanf>
            		 if(WhichHeadRot == 'A'){HeadSide = 0;}
 8000bc4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8000bc8:	2b41      	cmp	r3, #65	@ 0x41
 8000bca:	d103      	bne.n	8000bd4 <SPI_Communication+0x3a0>
 8000bcc:	2300      	movs	r3, #0
 8000bce:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8000bd2:	e006      	b.n	8000be2 <SPI_Communication+0x3ae>
            		 else if(WhichHeadRot == 'B'){HeadSide = 1;}
 8000bd4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8000bd8:	2b42      	cmp	r3, #66	@ 0x42
 8000bda:	d102      	bne.n	8000be2 <SPI_Communication+0x3ae>
 8000bdc:	2301      	movs	r3, #1
 8000bde:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87


            		 ABSRotateHead(HeadSide,number);
 8000be2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000be4:	b25a      	sxtb	r2, r3
 8000be6:	f997 3087 	ldrsb.w	r3, [r7, #135]	@ 0x87
 8000bea:	4611      	mov	r1, r2
 8000bec:	4618      	mov	r0, r3
 8000bee:	f000 fe9d 	bl	800192c <ABSRotateHead>
            		 //char number1=number;
            		 memset(TxBuffer, '\0', sizeof(TxBuffer));
 8000bf2:	2220      	movs	r2, #32
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4878      	ldr	r0, [pc, #480]	@ (8000dd8 <SPI_Communication+0x5a4>)
 8000bf8:	f007 ff68 	bl	8008acc <memset>
            		 //if ()
            		 if (number== 1){
 8000bfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d107      	bne.n	8000c12 <SPI_Communication+0x3de>
            		 	 char *str = "AROT#1#OK$";
 8000c02:	4b76      	ldr	r3, [pc, #472]	@ (8000ddc <SPI_Communication+0x5a8>)
 8000c04:	65fb      	str	r3, [r7, #92]	@ 0x5c
            		 	 strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
 8000c06:	221f      	movs	r2, #31
 8000c08:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8000c0a:	4873      	ldr	r0, [pc, #460]	@ (8000dd8 <SPI_Communication+0x5a4>)
 8000c0c:	f007 ff66 	bl	8008adc <strncpy>
 8000c10:	e01f      	b.n	8000c52 <SPI_Communication+0x41e>
            		 }
            		 else if (number==0){
 8000c12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d107      	bne.n	8000c28 <SPI_Communication+0x3f4>
            			 char *str = "AROT#0#OK$";
 8000c18:	4b71      	ldr	r3, [pc, #452]	@ (8000de0 <SPI_Communication+0x5ac>)
 8000c1a:	663b      	str	r3, [r7, #96]	@ 0x60
            			 strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
 8000c1c:	221f      	movs	r2, #31
 8000c1e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8000c20:	486d      	ldr	r0, [pc, #436]	@ (8000dd8 <SPI_Communication+0x5a4>)
 8000c22:	f007 ff5b 	bl	8008adc <strncpy>
 8000c26:	e014      	b.n	8000c52 <SPI_Communication+0x41e>
            		 }
            		 else if (number==2){
 8000c28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000c2a:	2b02      	cmp	r3, #2
 8000c2c:	d107      	bne.n	8000c3e <SPI_Communication+0x40a>
            		 	 char *str = "AROT#2#OK$";
 8000c2e:	4b6d      	ldr	r3, [pc, #436]	@ (8000de4 <SPI_Communication+0x5b0>)
 8000c30:	667b      	str	r3, [r7, #100]	@ 0x64
            		 	 strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
 8000c32:	221f      	movs	r2, #31
 8000c34:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8000c36:	4868      	ldr	r0, [pc, #416]	@ (8000dd8 <SPI_Communication+0x5a4>)
 8000c38:	f007 ff50 	bl	8008adc <strncpy>
 8000c3c:	e009      	b.n	8000c52 <SPI_Communication+0x41e>
            		 }
            		 else if (number==3){
 8000c3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000c40:	2b03      	cmp	r3, #3
 8000c42:	d106      	bne.n	8000c52 <SPI_Communication+0x41e>
            		 	 char *str = "AROT#3#OK$";
 8000c44:	4b68      	ldr	r3, [pc, #416]	@ (8000de8 <SPI_Communication+0x5b4>)
 8000c46:	66bb      	str	r3, [r7, #104]	@ 0x68
            		 	 strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
 8000c48:	221f      	movs	r2, #31
 8000c4a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8000c4c:	4862      	ldr	r0, [pc, #392]	@ (8000dd8 <SPI_Communication+0x5a4>)
 8000c4e:	f007 ff45 	bl	8008adc <strncpy>
            		 }
            		// strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
            		 memset(RxBuffer, '\0', sizeof(RxBuffer));
 8000c52:	2220      	movs	r2, #32
 8000c54:	2100      	movs	r1, #0
 8000c56:	485f      	ldr	r0, [pc, #380]	@ (8000dd4 <SPI_Communication+0x5a0>)
 8000c58:	f007 ff38 	bl	8008acc <memset>
 8000c5c:	e12e      	b.n	8000ebc <SPI_Communication+0x688>
            	}
/////////////////////////////////////////////////////////////////////////////////////////////////////////


            	else if(strcmp(command,"TILEBASE")==0) //bazowanie obortu kafelka
 8000c5e:	4963      	ldr	r1, [pc, #396]	@ (8000dec <SPI_Communication+0x5b8>)
 8000c60:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8000c64:	f7ff fadc 	bl	8000220 <strcmp>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d14c      	bne.n	8000d08 <SPI_Communication+0x4d4>
            	{
            		char WhitchTile;
            		char response[32];

            		sscanf(RxBuffer, "TILEBASE#%c$", &WhitchTile);
 8000c6e:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 8000c72:	461a      	mov	r2, r3
 8000c74:	495e      	ldr	r1, [pc, #376]	@ (8000df0 <SPI_Communication+0x5bc>)
 8000c76:	4857      	ldr	r0, [pc, #348]	@ (8000dd4 <SPI_Communication+0x5a0>)
 8000c78:	f007 fe24 	bl	80088c4 <siscanf>

            		if(WhitchTile == 'A')
 8000c7c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8000c80:	2b41      	cmp	r3, #65	@ 0x41
 8000c82:	d103      	bne.n	8000c8c <SPI_Communication+0x458>
            		{HeadBase(0);}
 8000c84:	2000      	movs	r0, #0
 8000c86:	f001 fbd3 	bl	8002430 <HeadBase>
 8000c8a:	e006      	b.n	8000c9a <SPI_Communication+0x466>
            		else if(WhitchTile == 'B')
 8000c8c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8000c90:	2b42      	cmp	r3, #66	@ 0x42
 8000c92:	d102      	bne.n	8000c9a <SPI_Communication+0x466>
            		{HeadBase(1);}
 8000c94:	2001      	movs	r0, #1
 8000c96:	f001 fbcb 	bl	8002430 <HeadBase>

            		memset(TxBuffer, '\0', sizeof(TxBuffer));
 8000c9a:	2220      	movs	r2, #32
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	484e      	ldr	r0, [pc, #312]	@ (8000dd8 <SPI_Communication+0x5a4>)
 8000ca0:	f007 ff14 	bl	8008acc <memset>
            		GPIO_PinState current_state = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7); // Read pin state
 8000ca4:	2180      	movs	r1, #128	@ 0x80
 8000ca6:	4853      	ldr	r0, [pc, #332]	@ (8000df4 <SPI_Communication+0x5c0>)
 8000ca8:	f002 fc3c 	bl	8003524 <HAL_GPIO_ReadPin>
 8000cac:	4603      	mov	r3, r0
 8000cae:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
            		if (current_state == GPIO_PIN_SET)
 8000cb2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d108      	bne.n	8000ccc <SPI_Communication+0x498>
            		{
            			sprintf(response, "TILEBASE#%c#OK$", WhitchTile);
 8000cba:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	463b      	mov	r3, r7
 8000cc2:	494d      	ldr	r1, [pc, #308]	@ (8000df8 <SPI_Communication+0x5c4>)
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f007 fddd 	bl	8008884 <siprintf>
 8000cca:	e00b      	b.n	8000ce4 <SPI_Communication+0x4b0>
            		}
            		else if (current_state == GPIO_PIN_RESET)
 8000ccc:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d107      	bne.n	8000ce4 <SPI_Communication+0x4b0>
            		{
            			sprintf(response, "TILEBASE#%c#NOK$", WhitchTile);
 8000cd4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8000cd8:	461a      	mov	r2, r3
 8000cda:	463b      	mov	r3, r7
 8000cdc:	4947      	ldr	r1, [pc, #284]	@ (8000dfc <SPI_Communication+0x5c8>)
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f007 fdd0 	bl	8008884 <siprintf>
            		}

            		strncpy(TxBuffer, response, sizeof(response) - 1);
 8000ce4:	463b      	mov	r3, r7
 8000ce6:	221f      	movs	r2, #31
 8000ce8:	4619      	mov	r1, r3
 8000cea:	483b      	ldr	r0, [pc, #236]	@ (8000dd8 <SPI_Communication+0x5a4>)
 8000cec:	f007 fef6 	bl	8008adc <strncpy>

            		//strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
            		memset(RxBuffer, '\0', sizeof(RxBuffer));
 8000cf0:	2220      	movs	r2, #32
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4837      	ldr	r0, [pc, #220]	@ (8000dd4 <SPI_Communication+0x5a0>)
 8000cf6:	f007 fee9 	bl	8008acc <memset>
            		memset(response , '\0' , sizeof(response));
 8000cfa:	463b      	mov	r3, r7
 8000cfc:	2220      	movs	r2, #32
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4618      	mov	r0, r3
 8000d02:	f007 fee3 	bl	8008acc <memset>
 8000d06:	e0d9      	b.n	8000ebc <SPI_Communication+0x688>
            	}


////////////////////////////////////////////////////////////////////////////////////////////////////////
            	else if(strcmp(command,"SWTCH")==0) //Wysyłka stanu obrotu czujnika 0-wcisniety, 1-pusty
 8000d08:	493d      	ldr	r1, [pc, #244]	@ (8000e00 <SPI_Communication+0x5cc>)
 8000d0a:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8000d0e:	f7ff fa87 	bl	8000220 <strcmp>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	f040 808d 	bne.w	8000e34 <SPI_Communication+0x600>
            	{
            		HAL_UART_Transmit(&huart5, (uint8_t *)RxBuffer, strlen(RxBuffer), HAL_MAX_DELAY);
 8000d1a:	482e      	ldr	r0, [pc, #184]	@ (8000dd4 <SPI_Communication+0x5a0>)
 8000d1c:	f7ff fa8a 	bl	8000234 <strlen>
 8000d20:	4603      	mov	r3, r0
 8000d22:	b29a      	uxth	r2, r3
 8000d24:	f04f 33ff 	mov.w	r3, #4294967295
 8000d28:	492a      	ldr	r1, [pc, #168]	@ (8000dd4 <SPI_Communication+0x5a0>)
 8000d2a:	4836      	ldr	r0, [pc, #216]	@ (8000e04 <SPI_Communication+0x5d0>)
 8000d2c:	f006 f8b4 	bl	8006e98 <HAL_UART_Transmit>
            		//HAL_Delay(1);
            		char* received_data = swtch_control();
 8000d30:	f7ff fd10 	bl	8000754 <swtch_control>
 8000d34:	67b8      	str	r0, [r7, #120]	@ 0x78
            		char* str;
            		memset(TxBuffer, '\0', sizeof(TxBuffer));
 8000d36:	2220      	movs	r2, #32
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4827      	ldr	r0, [pc, #156]	@ (8000dd8 <SPI_Communication+0x5a4>)
 8000d3c:	f007 fec6 	bl	8008acc <memset>
            		if((strcmp(received_data, "S#0000$")==0)){str = "SWTCH#0#0#0#0$";}
 8000d40:	4931      	ldr	r1, [pc, #196]	@ (8000e08 <SPI_Communication+0x5d4>)
 8000d42:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8000d44:	f7ff fa6c 	bl	8000220 <strcmp>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d103      	bne.n	8000d56 <SPI_Communication+0x522>
 8000d4e:	4b2f      	ldr	r3, [pc, #188]	@ (8000e0c <SPI_Communication+0x5d8>)
 8000d50:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000d54:	e02e      	b.n	8000db4 <SPI_Communication+0x580>
            		else if ((strcmp(received_data, "S#1000$")==0)){str = "SWTCH#1#0#0#0$";}
 8000d56:	492e      	ldr	r1, [pc, #184]	@ (8000e10 <SPI_Communication+0x5dc>)
 8000d58:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8000d5a:	f7ff fa61 	bl	8000220 <strcmp>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d103      	bne.n	8000d6c <SPI_Communication+0x538>
 8000d64:	4b2b      	ldr	r3, [pc, #172]	@ (8000e14 <SPI_Communication+0x5e0>)
 8000d66:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000d6a:	e023      	b.n	8000db4 <SPI_Communication+0x580>
            		else if ((strcmp(received_data, "S#0100$")==0)){str = "SWTCH#0#1#0#0$";}
 8000d6c:	492a      	ldr	r1, [pc, #168]	@ (8000e18 <SPI_Communication+0x5e4>)
 8000d6e:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8000d70:	f7ff fa56 	bl	8000220 <strcmp>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d103      	bne.n	8000d82 <SPI_Communication+0x54e>
 8000d7a:	4b28      	ldr	r3, [pc, #160]	@ (8000e1c <SPI_Communication+0x5e8>)
 8000d7c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000d80:	e018      	b.n	8000db4 <SPI_Communication+0x580>
            		else if ((strcmp(received_data, "S#0010$")==0)){str = "SWTCH#0#0#1#0$";}
 8000d82:	4927      	ldr	r1, [pc, #156]	@ (8000e20 <SPI_Communication+0x5ec>)
 8000d84:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8000d86:	f7ff fa4b 	bl	8000220 <strcmp>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d103      	bne.n	8000d98 <SPI_Communication+0x564>
 8000d90:	4b24      	ldr	r3, [pc, #144]	@ (8000e24 <SPI_Communication+0x5f0>)
 8000d92:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000d96:	e00d      	b.n	8000db4 <SPI_Communication+0x580>
            		else if ((strcmp(received_data, "S#0001$")==0)){str = "SWTCH#0#0#0#1$";}
 8000d98:	4923      	ldr	r1, [pc, #140]	@ (8000e28 <SPI_Communication+0x5f4>)
 8000d9a:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8000d9c:	f7ff fa40 	bl	8000220 <strcmp>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d103      	bne.n	8000dae <SPI_Communication+0x57a>
 8000da6:	4b21      	ldr	r3, [pc, #132]	@ (8000e2c <SPI_Communication+0x5f8>)
 8000da8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000dac:	e002      	b.n	8000db4 <SPI_Communication+0x580>
            		else{str="SWTCH#ERR$";}
 8000dae:	4b20      	ldr	r3, [pc, #128]	@ (8000e30 <SPI_Communication+0x5fc>)
 8000db0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

            		strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
 8000db4:	221f      	movs	r2, #31
 8000db6:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8000dba:	4807      	ldr	r0, [pc, #28]	@ (8000dd8 <SPI_Communication+0x5a4>)
 8000dbc:	f007 fe8e 	bl	8008adc <strncpy>
            		memset(RxBuffer, '\0', sizeof(RxBuffer));
 8000dc0:	2220      	movs	r2, #32
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4803      	ldr	r0, [pc, #12]	@ (8000dd4 <SPI_Communication+0x5a0>)
 8000dc6:	f007 fe81 	bl	8008acc <memset>
 8000dca:	e077      	b.n	8000ebc <SPI_Communication+0x688>
 8000dcc:	08009f5c 	.word	0x08009f5c
 8000dd0:	08009f64 	.word	0x08009f64
 8000dd4:	20000088 	.word	0x20000088
 8000dd8:	200000a8 	.word	0x200000a8
 8000ddc:	08009f70 	.word	0x08009f70
 8000de0:	08009f7c 	.word	0x08009f7c
 8000de4:	08009f88 	.word	0x08009f88
 8000de8:	08009f94 	.word	0x08009f94
 8000dec:	08009fa0 	.word	0x08009fa0
 8000df0:	08009fac 	.word	0x08009fac
 8000df4:	48001000 	.word	0x48001000
 8000df8:	08009fbc 	.word	0x08009fbc
 8000dfc:	08009fcc 	.word	0x08009fcc
 8000e00:	08009fe0 	.word	0x08009fe0
 8000e04:	200002d0 	.word	0x200002d0
 8000e08:	08009fe8 	.word	0x08009fe8
 8000e0c:	08009ff0 	.word	0x08009ff0
 8000e10:	0800a000 	.word	0x0800a000
 8000e14:	0800a008 	.word	0x0800a008
 8000e18:	0800a018 	.word	0x0800a018
 8000e1c:	0800a020 	.word	0x0800a020
 8000e20:	0800a030 	.word	0x0800a030
 8000e24:	0800a038 	.word	0x0800a038
 8000e28:	0800a048 	.word	0x0800a048
 8000e2c:	0800a050 	.word	0x0800a050
 8000e30:	0800a060 	.word	0x0800a060

            	}
            	////////////////////////////////////////////////////////////////////////////////////////////////////////
            	else if(strcmp(command,"GAPS")==0) //Wysyłka stanu obrotu czujnika 0-wcisniety, 1-pusty
 8000e34:	4935      	ldr	r1, [pc, #212]	@ (8000f0c <SPI_Communication+0x6d8>)
 8000e36:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8000e3a:	f7ff f9f1 	bl	8000220 <strcmp>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d13b      	bne.n	8000ebc <SPI_Communication+0x688>
            	{
            		HAL_UART_Transmit(&huart5, (uint8_t *)RxBuffer, strlen(RxBuffer), HAL_MAX_DELAY);
 8000e44:	4832      	ldr	r0, [pc, #200]	@ (8000f10 <SPI_Communication+0x6dc>)
 8000e46:	f7ff f9f5 	bl	8000234 <strlen>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	b29a      	uxth	r2, r3
 8000e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e52:	492f      	ldr	r1, [pc, #188]	@ (8000f10 <SPI_Communication+0x6dc>)
 8000e54:	482f      	ldr	r0, [pc, #188]	@ (8000f14 <SPI_Communication+0x6e0>)
 8000e56:	f006 f81f 	bl	8006e98 <HAL_UART_Transmit>
            		//HAL_Delay(1);
            		char* received_data = gaps_control();
 8000e5a:	f7ff fcb3 	bl	80007c4 <gaps_control>
 8000e5e:	67f8      	str	r0, [r7, #124]	@ 0x7c
            		char output[11];
            		sprintf(output,"G#%c#%c#%c#%c$",received_data[2],received_data[3],received_data[4],received_data[5] );
 8000e60:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000e62:	3302      	adds	r3, #2
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	4619      	mov	r1, r3
 8000e68:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000e6a:	3303      	adds	r3, #3
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	461c      	mov	r4, r3
 8000e70:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000e72:	3304      	adds	r3, #4
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	461a      	mov	r2, r3
 8000e78:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000e7a:	3305      	adds	r3, #5
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8000e82:	9301      	str	r3, [sp, #4]
 8000e84:	9200      	str	r2, [sp, #0]
 8000e86:	4623      	mov	r3, r4
 8000e88:	460a      	mov	r2, r1
 8000e8a:	4923      	ldr	r1, [pc, #140]	@ (8000f18 <SPI_Communication+0x6e4>)
 8000e8c:	f007 fcfa 	bl	8008884 <siprintf>
            		printf("%s\n", output);
 8000e90:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000e94:	4618      	mov	r0, r3
 8000e96:	f007 fced 	bl	8008874 <puts>
            		memset(TxBuffer, '\0', sizeof(TxBuffer));
 8000e9a:	2220      	movs	r2, #32
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	481f      	ldr	r0, [pc, #124]	@ (8000f1c <SPI_Communication+0x6e8>)
 8000ea0:	f007 fe14 	bl	8008acc <memset>

            		strncpy(TxBuffer, output, sizeof(TxBuffer) - 1);
 8000ea4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000ea8:	221f      	movs	r2, #31
 8000eaa:	4619      	mov	r1, r3
 8000eac:	481b      	ldr	r0, [pc, #108]	@ (8000f1c <SPI_Communication+0x6e8>)
 8000eae:	f007 fe15 	bl	8008adc <strncpy>
            		memset(RxBuffer, '\0', sizeof(RxBuffer));
 8000eb2:	2220      	movs	r2, #32
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	4816      	ldr	r0, [pc, #88]	@ (8000f10 <SPI_Communication+0x6dc>)
 8000eb8:	f007 fe08 	bl	8008acc <memset>

            	}

                HAL_SPI_Transmit(&hspi1, (uint8_t *)TxBuffer, strlen(TxBuffer), HAL_MAX_DELAY);
 8000ebc:	4817      	ldr	r0, [pc, #92]	@ (8000f1c <SPI_Communication+0x6e8>)
 8000ebe:	f7ff f9b9 	bl	8000234 <strlen>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	b29a      	uxth	r2, r3
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eca:	4914      	ldr	r1, [pc, #80]	@ (8000f1c <SPI_Communication+0x6e8>)
 8000ecc:	4814      	ldr	r0, [pc, #80]	@ (8000f20 <SPI_Communication+0x6ec>)
 8000ece:	f003 fc4e 	bl	800476e <HAL_SPI_Transmit>
            	//HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)TxBuffer, strlen(TxBuffer));
                index = 0; // Reset buffer index
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
                //memset(TxBuffer, '\0', sizeof(TxBuffer));
                free(command);
 8000ed8:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8000edc:	f007 fafc 	bl	80084d8 <free>
                command = NULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
        }

        // Update pin state
        pinstate = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 8000ee6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000eea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eee:	f002 fb19 	bl	8003524 <HAL_GPIO_ReadPin>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
    while (!pinstate) {
 8000ef8:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	f43f acb3 	beq.w	8000868 <SPI_Communication+0x34>

    }
    }
}
 8000f02:	bf00      	nop
 8000f04:	bf00      	nop
 8000f06:	379c      	adds	r7, #156	@ 0x9c
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd90      	pop	{r4, r7, pc}
 8000f0c:	0800a06c 	.word	0x0800a06c
 8000f10:	20000088 	.word	0x20000088
 8000f14:	200002d0 	.word	0x200002d0
 8000f18:	0800a074 	.word	0x0800a074
 8000f1c:	200000a8 	.word	0x200000a8
 8000f20:	200000f4 	.word	0x200000f4

08000f24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f28:	f001 ff17 	bl	8002d5a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f2c:	f000 f811 	bl	8000f52 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f30:	f000 faac 	bl	800148c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000f34:	f000 f85a 	bl	8000fec <MX_SPI1_Init>
  MX_UART5_Init();
 8000f38:	f000 fa5c 	bl	80013f4 <MX_UART5_Init>
  MX_UART4_Init();
 8000f3c:	f000 fa0e 	bl	800135c <MX_UART4_Init>
  MX_TIM1_Init();
 8000f40:	f000 f88c 	bl	800105c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000f44:	f000 f95e 	bl	8001204 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000f48:	f000 f9b2 	bl	80012b0 <MX_TIM4_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  SPI_Communication();
 8000f4c:	f7ff fc72 	bl	8000834 <SPI_Communication>
 8000f50:	e7fc      	b.n	8000f4c <main+0x28>

08000f52 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b094      	sub	sp, #80	@ 0x50
 8000f56:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f58:	f107 0318 	add.w	r3, r7, #24
 8000f5c:	2238      	movs	r2, #56	@ 0x38
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4618      	mov	r0, r3
 8000f62:	f007 fdb3 	bl	8008acc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f66:	1d3b      	adds	r3, r7, #4
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f74:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000f78:	f002 fb1e 	bl	80035b8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f84:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f86:	2340      	movs	r3, #64	@ 0x40
 8000f88:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000f92:	2301      	movs	r3, #1
 8000f94:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000f96:	2308      	movs	r3, #8
 8000f98:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa6:	f107 0318 	add.w	r3, r7, #24
 8000faa:	4618      	mov	r0, r3
 8000fac:	f002 fbb8 	bl	8003720 <HAL_RCC_OscConfig>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000fb6:	f000 fb23 	bl	8001600 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fba:	230f      	movs	r3, #15
 8000fbc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000fc2:	2380      	movs	r3, #128	@ 0x80
 8000fc4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fce:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000fd0:	1d3b      	adds	r3, r7, #4
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f002 feb5 	bl	8003d44 <HAL_RCC_ClockConfig>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000fe0:	f000 fb0e 	bl	8001600 <Error_Handler>
  }
}
 8000fe4:	bf00      	nop
 8000fe6:	3750      	adds	r7, #80	@ 0x50
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ff0:	4b18      	ldr	r3, [pc, #96]	@ (8001054 <MX_SPI1_Init+0x68>)
 8000ff2:	4a19      	ldr	r2, [pc, #100]	@ (8001058 <MX_SPI1_Init+0x6c>)
 8000ff4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000ff6:	4b17      	ldr	r3, [pc, #92]	@ (8001054 <MX_SPI1_Init+0x68>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ffc:	4b15      	ldr	r3, [pc, #84]	@ (8001054 <MX_SPI1_Init+0x68>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001002:	4b14      	ldr	r3, [pc, #80]	@ (8001054 <MX_SPI1_Init+0x68>)
 8001004:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001008:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800100a:	4b12      	ldr	r3, [pc, #72]	@ (8001054 <MX_SPI1_Init+0x68>)
 800100c:	2200      	movs	r2, #0
 800100e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001010:	4b10      	ldr	r3, [pc, #64]	@ (8001054 <MX_SPI1_Init+0x68>)
 8001012:	2200      	movs	r2, #0
 8001014:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8001016:	4b0f      	ldr	r3, [pc, #60]	@ (8001054 <MX_SPI1_Init+0x68>)
 8001018:	2200      	movs	r2, #0
 800101a:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800101c:	4b0d      	ldr	r3, [pc, #52]	@ (8001054 <MX_SPI1_Init+0x68>)
 800101e:	2200      	movs	r2, #0
 8001020:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001022:	4b0c      	ldr	r3, [pc, #48]	@ (8001054 <MX_SPI1_Init+0x68>)
 8001024:	2200      	movs	r2, #0
 8001026:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001028:	4b0a      	ldr	r3, [pc, #40]	@ (8001054 <MX_SPI1_Init+0x68>)
 800102a:	2200      	movs	r2, #0
 800102c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800102e:	4b09      	ldr	r3, [pc, #36]	@ (8001054 <MX_SPI1_Init+0x68>)
 8001030:	2207      	movs	r2, #7
 8001032:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001034:	4b07      	ldr	r3, [pc, #28]	@ (8001054 <MX_SPI1_Init+0x68>)
 8001036:	2200      	movs	r2, #0
 8001038:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800103a:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <MX_SPI1_Init+0x68>)
 800103c:	2200      	movs	r2, #0
 800103e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001040:	4804      	ldr	r0, [pc, #16]	@ (8001054 <MX_SPI1_Init+0x68>)
 8001042:	f003 fae9 	bl	8004618 <HAL_SPI_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 800104c:	f000 fad8 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}
 8001054:	200000f4 	.word	0x200000f4
 8001058:	40013000 	.word	0x40013000

0800105c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b09c      	sub	sp, #112	@ 0x70
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001062:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	609a      	str	r2, [r3, #8]
 800106e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001070:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800107c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
 800108c:	615a      	str	r2, [r3, #20]
 800108e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001090:	1d3b      	adds	r3, r7, #4
 8001092:	2234      	movs	r2, #52	@ 0x34
 8001094:	2100      	movs	r1, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f007 fd18 	bl	8008acc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800109c:	4b57      	ldr	r3, [pc, #348]	@ (80011fc <MX_TIM1_Init+0x1a0>)
 800109e:	4a58      	ldr	r2, [pc, #352]	@ (8001200 <MX_TIM1_Init+0x1a4>)
 80010a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80010a2:	4b56      	ldr	r3, [pc, #344]	@ (80011fc <MX_TIM1_Init+0x1a0>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a8:	4b54      	ldr	r3, [pc, #336]	@ (80011fc <MX_TIM1_Init+0x1a0>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 399;
 80010ae:	4b53      	ldr	r3, [pc, #332]	@ (80011fc <MX_TIM1_Init+0x1a0>)
 80010b0:	f240 128f 	movw	r2, #399	@ 0x18f
 80010b4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b6:	4b51      	ldr	r3, [pc, #324]	@ (80011fc <MX_TIM1_Init+0x1a0>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010bc:	4b4f      	ldr	r3, [pc, #316]	@ (80011fc <MX_TIM1_Init+0x1a0>)
 80010be:	2200      	movs	r2, #0
 80010c0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010c2:	4b4e      	ldr	r3, [pc, #312]	@ (80011fc <MX_TIM1_Init+0x1a0>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010c8:	484c      	ldr	r0, [pc, #304]	@ (80011fc <MX_TIM1_Init+0x1a0>)
 80010ca:	f004 f9db 	bl	8005484 <HAL_TIM_Base_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80010d4:	f000 fa94 	bl	8001600 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010dc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010de:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80010e2:	4619      	mov	r1, r3
 80010e4:	4845      	ldr	r0, [pc, #276]	@ (80011fc <MX_TIM1_Init+0x1a0>)
 80010e6:	f004 ff2f 	bl	8005f48 <HAL_TIM_ConfigClockSource>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80010f0:	f000 fa86 	bl	8001600 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010f4:	4841      	ldr	r0, [pc, #260]	@ (80011fc <MX_TIM1_Init+0x1a0>)
 80010f6:	f004 fa1c 	bl	8005532 <HAL_TIM_PWM_Init>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001100:	f000 fa7e 	bl	8001600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001104:	2300      	movs	r3, #0
 8001106:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001108:	2300      	movs	r3, #0
 800110a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800110c:	2300      	movs	r3, #0
 800110e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001110:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001114:	4619      	mov	r1, r3
 8001116:	4839      	ldr	r0, [pc, #228]	@ (80011fc <MX_TIM1_Init+0x1a0>)
 8001118:	f005 fcfe 	bl	8006b18 <HAL_TIMEx_MasterConfigSynchronization>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001122:	f000 fa6d 	bl	8001600 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001126:	2360      	movs	r3, #96	@ 0x60
 8001128:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800112e:	2300      	movs	r3, #0
 8001130:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001132:	2300      	movs	r3, #0
 8001134:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001136:	2300      	movs	r3, #0
 8001138:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800113a:	2300      	movs	r3, #0
 800113c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800113e:	2300      	movs	r3, #0
 8001140:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001142:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001146:	2200      	movs	r2, #0
 8001148:	4619      	mov	r1, r3
 800114a:	482c      	ldr	r0, [pc, #176]	@ (80011fc <MX_TIM1_Init+0x1a0>)
 800114c:	f004 fde8 	bl	8005d20 <HAL_TIM_PWM_ConfigChannel>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001156:	f000 fa53 	bl	8001600 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800115a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800115e:	2204      	movs	r2, #4
 8001160:	4619      	mov	r1, r3
 8001162:	4826      	ldr	r0, [pc, #152]	@ (80011fc <MX_TIM1_Init+0x1a0>)
 8001164:	f004 fddc 	bl	8005d20 <HAL_TIM_PWM_ConfigChannel>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800116e:	f000 fa47 	bl	8001600 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001172:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001176:	2208      	movs	r2, #8
 8001178:	4619      	mov	r1, r3
 800117a:	4820      	ldr	r0, [pc, #128]	@ (80011fc <MX_TIM1_Init+0x1a0>)
 800117c:	f004 fdd0 	bl	8005d20 <HAL_TIM_PWM_ConfigChannel>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8001186:	f000 fa3b 	bl	8001600 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800118a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800118e:	220c      	movs	r2, #12
 8001190:	4619      	mov	r1, r3
 8001192:	481a      	ldr	r0, [pc, #104]	@ (80011fc <MX_TIM1_Init+0x1a0>)
 8001194:	f004 fdc4 	bl	8005d20 <HAL_TIM_PWM_ConfigChannel>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 800119e:	f000 fa2f 	bl	8001600 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011a2:	2300      	movs	r3, #0
 80011a4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011a6:	2300      	movs	r3, #0
 80011a8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011ba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80011c0:	2300      	movs	r3, #0
 80011c2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80011c4:	2300      	movs	r3, #0
 80011c6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80011c8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80011cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80011d2:	2300      	movs	r3, #0
 80011d4:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011d6:	2300      	movs	r3, #0
 80011d8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011da:	1d3b      	adds	r3, r7, #4
 80011dc:	4619      	mov	r1, r3
 80011de:	4807      	ldr	r0, [pc, #28]	@ (80011fc <MX_TIM1_Init+0x1a0>)
 80011e0:	f005 fd30 	bl	8006c44 <HAL_TIMEx_ConfigBreakDeadTime>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_TIM1_Init+0x192>
  {
    Error_Handler();
 80011ea:	f000 fa09 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80011ee:	4803      	ldr	r0, [pc, #12]	@ (80011fc <MX_TIM1_Init+0x1a0>)
 80011f0:	f001 fb82 	bl	80028f8 <HAL_TIM_MspPostInit>

}
 80011f4:	bf00      	nop
 80011f6:	3770      	adds	r7, #112	@ 0x70
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000158 	.word	0x20000158
 8001200:	40012c00 	.word	0x40012c00

08001204 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08c      	sub	sp, #48	@ 0x30
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800120a:	f107 030c 	add.w	r3, r7, #12
 800120e:	2224      	movs	r2, #36	@ 0x24
 8001210:	2100      	movs	r1, #0
 8001212:	4618      	mov	r0, r3
 8001214:	f007 fc5a 	bl	8008acc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001218:	463b      	mov	r3, r7
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001222:	4b21      	ldr	r3, [pc, #132]	@ (80012a8 <MX_TIM3_Init+0xa4>)
 8001224:	4a21      	ldr	r2, [pc, #132]	@ (80012ac <MX_TIM3_Init+0xa8>)
 8001226:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001228:	4b1f      	ldr	r3, [pc, #124]	@ (80012a8 <MX_TIM3_Init+0xa4>)
 800122a:	2200      	movs	r2, #0
 800122c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800122e:	4b1e      	ldr	r3, [pc, #120]	@ (80012a8 <MX_TIM3_Init+0xa4>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001234:	4b1c      	ldr	r3, [pc, #112]	@ (80012a8 <MX_TIM3_Init+0xa4>)
 8001236:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800123a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800123c:	4b1a      	ldr	r3, [pc, #104]	@ (80012a8 <MX_TIM3_Init+0xa4>)
 800123e:	2200      	movs	r2, #0
 8001240:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001242:	4b19      	ldr	r3, [pc, #100]	@ (80012a8 <MX_TIM3_Init+0xa4>)
 8001244:	2200      	movs	r2, #0
 8001246:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001248:	2303      	movs	r3, #3
 800124a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800124c:	2300      	movs	r3, #0
 800124e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001250:	2301      	movs	r3, #1
 8001252:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001254:	2300      	movs	r3, #0
 8001256:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800125c:	2300      	movs	r3, #0
 800125e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001260:	2301      	movs	r3, #1
 8001262:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001264:	2300      	movs	r3, #0
 8001266:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001268:	2300      	movs	r3, #0
 800126a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800126c:	f107 030c 	add.w	r3, r7, #12
 8001270:	4619      	mov	r1, r3
 8001272:	480d      	ldr	r0, [pc, #52]	@ (80012a8 <MX_TIM3_Init+0xa4>)
 8001274:	f004 fad0 	bl	8005818 <HAL_TIM_Encoder_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800127e:	f000 f9bf 	bl	8001600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001282:	2300      	movs	r3, #0
 8001284:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001286:	2300      	movs	r3, #0
 8001288:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800128a:	463b      	mov	r3, r7
 800128c:	4619      	mov	r1, r3
 800128e:	4806      	ldr	r0, [pc, #24]	@ (80012a8 <MX_TIM3_Init+0xa4>)
 8001290:	f005 fc42 	bl	8006b18 <HAL_TIMEx_MasterConfigSynchronization>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800129a:	f000 f9b1 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800129e:	bf00      	nop
 80012a0:	3730      	adds	r7, #48	@ 0x30
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	200001a4 	.word	0x200001a4
 80012ac:	40000400 	.word	0x40000400

080012b0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08c      	sub	sp, #48	@ 0x30
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012b6:	f107 030c 	add.w	r3, r7, #12
 80012ba:	2224      	movs	r2, #36	@ 0x24
 80012bc:	2100      	movs	r1, #0
 80012be:	4618      	mov	r0, r3
 80012c0:	f007 fc04 	bl	8008acc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c4:	463b      	mov	r3, r7
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012ce:	4b21      	ldr	r3, [pc, #132]	@ (8001354 <MX_TIM4_Init+0xa4>)
 80012d0:	4a21      	ldr	r2, [pc, #132]	@ (8001358 <MX_TIM4_Init+0xa8>)
 80012d2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 80012d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001354 <MX_TIM4_Init+0xa4>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012da:	4b1e      	ldr	r3, [pc, #120]	@ (8001354 <MX_TIM4_Init+0xa4>)
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80012e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001354 <MX_TIM4_Init+0xa4>)
 80012e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012e6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001354 <MX_TIM4_Init+0xa4>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012ee:	4b19      	ldr	r3, [pc, #100]	@ (8001354 <MX_TIM4_Init+0xa4>)
 80012f0:	2280      	movs	r2, #128	@ 0x80
 80012f2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012f4:	2303      	movs	r3, #3
 80012f6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012f8:	2300      	movs	r3, #0
 80012fa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012fc:	2301      	movs	r3, #1
 80012fe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001300:	2300      	movs	r3, #0
 8001302:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 8001304:	2301      	movs	r3, #1
 8001306:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001308:	2300      	movs	r3, #0
 800130a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800130c:	2301      	movs	r3, #1
 800130e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001310:	2300      	movs	r3, #0
 8001312:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 1;
 8001314:	2301      	movs	r3, #1
 8001316:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001318:	f107 030c 	add.w	r3, r7, #12
 800131c:	4619      	mov	r1, r3
 800131e:	480d      	ldr	r0, [pc, #52]	@ (8001354 <MX_TIM4_Init+0xa4>)
 8001320:	f004 fa7a 	bl	8005818 <HAL_TIM_Encoder_Init>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800132a:	f000 f969 	bl	8001600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800132e:	2300      	movs	r3, #0
 8001330:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001332:	2300      	movs	r3, #0
 8001334:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001336:	463b      	mov	r3, r7
 8001338:	4619      	mov	r1, r3
 800133a:	4806      	ldr	r0, [pc, #24]	@ (8001354 <MX_TIM4_Init+0xa4>)
 800133c:	f005 fbec 	bl	8006b18 <HAL_TIMEx_MasterConfigSynchronization>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001346:	f000 f95b 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800134a:	bf00      	nop
 800134c:	3730      	adds	r7, #48	@ 0x30
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	200001f0 	.word	0x200001f0
 8001358:	40000800 	.word	0x40000800

0800135c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001360:	4b22      	ldr	r3, [pc, #136]	@ (80013ec <MX_UART4_Init+0x90>)
 8001362:	4a23      	ldr	r2, [pc, #140]	@ (80013f0 <MX_UART4_Init+0x94>)
 8001364:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001366:	4b21      	ldr	r3, [pc, #132]	@ (80013ec <MX_UART4_Init+0x90>)
 8001368:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800136c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800136e:	4b1f      	ldr	r3, [pc, #124]	@ (80013ec <MX_UART4_Init+0x90>)
 8001370:	2200      	movs	r2, #0
 8001372:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001374:	4b1d      	ldr	r3, [pc, #116]	@ (80013ec <MX_UART4_Init+0x90>)
 8001376:	2200      	movs	r2, #0
 8001378:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800137a:	4b1c      	ldr	r3, [pc, #112]	@ (80013ec <MX_UART4_Init+0x90>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001380:	4b1a      	ldr	r3, [pc, #104]	@ (80013ec <MX_UART4_Init+0x90>)
 8001382:	220c      	movs	r2, #12
 8001384:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001386:	4b19      	ldr	r3, [pc, #100]	@ (80013ec <MX_UART4_Init+0x90>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800138c:	4b17      	ldr	r3, [pc, #92]	@ (80013ec <MX_UART4_Init+0x90>)
 800138e:	2200      	movs	r2, #0
 8001390:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001392:	4b16      	ldr	r3, [pc, #88]	@ (80013ec <MX_UART4_Init+0x90>)
 8001394:	2200      	movs	r2, #0
 8001396:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001398:	4b14      	ldr	r3, [pc, #80]	@ (80013ec <MX_UART4_Init+0x90>)
 800139a:	2200      	movs	r2, #0
 800139c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800139e:	4b13      	ldr	r3, [pc, #76]	@ (80013ec <MX_UART4_Init+0x90>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80013a4:	4811      	ldr	r0, [pc, #68]	@ (80013ec <MX_UART4_Init+0x90>)
 80013a6:	f005 fd27 	bl	8006df8 <HAL_UART_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80013b0:	f000 f926 	bl	8001600 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013b4:	2100      	movs	r1, #0
 80013b6:	480d      	ldr	r0, [pc, #52]	@ (80013ec <MX_UART4_Init+0x90>)
 80013b8:	f006 ffbb 	bl	8008332 <HAL_UARTEx_SetTxFifoThreshold>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80013c2:	f000 f91d 	bl	8001600 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013c6:	2100      	movs	r1, #0
 80013c8:	4808      	ldr	r0, [pc, #32]	@ (80013ec <MX_UART4_Init+0x90>)
 80013ca:	f006 fff0 	bl	80083ae <HAL_UARTEx_SetRxFifoThreshold>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80013d4:	f000 f914 	bl	8001600 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80013d8:	4804      	ldr	r0, [pc, #16]	@ (80013ec <MX_UART4_Init+0x90>)
 80013da:	f006 ff71 	bl	80082c0 <HAL_UARTEx_DisableFifoMode>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80013e4:	f000 f90c 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	2000023c 	.word	0x2000023c
 80013f0:	40004c00 	.word	0x40004c00

080013f4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80013f8:	4b22      	ldr	r3, [pc, #136]	@ (8001484 <MX_UART5_Init+0x90>)
 80013fa:	4a23      	ldr	r2, [pc, #140]	@ (8001488 <MX_UART5_Init+0x94>)
 80013fc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80013fe:	4b21      	ldr	r3, [pc, #132]	@ (8001484 <MX_UART5_Init+0x90>)
 8001400:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001404:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001406:	4b1f      	ldr	r3, [pc, #124]	@ (8001484 <MX_UART5_Init+0x90>)
 8001408:	2200      	movs	r2, #0
 800140a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800140c:	4b1d      	ldr	r3, [pc, #116]	@ (8001484 <MX_UART5_Init+0x90>)
 800140e:	2200      	movs	r2, #0
 8001410:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001412:	4b1c      	ldr	r3, [pc, #112]	@ (8001484 <MX_UART5_Init+0x90>)
 8001414:	2200      	movs	r2, #0
 8001416:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001418:	4b1a      	ldr	r3, [pc, #104]	@ (8001484 <MX_UART5_Init+0x90>)
 800141a:	220c      	movs	r2, #12
 800141c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800141e:	4b19      	ldr	r3, [pc, #100]	@ (8001484 <MX_UART5_Init+0x90>)
 8001420:	2200      	movs	r2, #0
 8001422:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001424:	4b17      	ldr	r3, [pc, #92]	@ (8001484 <MX_UART5_Init+0x90>)
 8001426:	2200      	movs	r2, #0
 8001428:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800142a:	4b16      	ldr	r3, [pc, #88]	@ (8001484 <MX_UART5_Init+0x90>)
 800142c:	2200      	movs	r2, #0
 800142e:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001430:	4b14      	ldr	r3, [pc, #80]	@ (8001484 <MX_UART5_Init+0x90>)
 8001432:	2200      	movs	r2, #0
 8001434:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001436:	4b13      	ldr	r3, [pc, #76]	@ (8001484 <MX_UART5_Init+0x90>)
 8001438:	2200      	movs	r2, #0
 800143a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800143c:	4811      	ldr	r0, [pc, #68]	@ (8001484 <MX_UART5_Init+0x90>)
 800143e:	f005 fcdb 	bl	8006df8 <HAL_UART_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001448:	f000 f8da 	bl	8001600 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800144c:	2100      	movs	r1, #0
 800144e:	480d      	ldr	r0, [pc, #52]	@ (8001484 <MX_UART5_Init+0x90>)
 8001450:	f006 ff6f 	bl	8008332 <HAL_UARTEx_SetTxFifoThreshold>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 800145a:	f000 f8d1 	bl	8001600 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800145e:	2100      	movs	r1, #0
 8001460:	4808      	ldr	r0, [pc, #32]	@ (8001484 <MX_UART5_Init+0x90>)
 8001462:	f006 ffa4 	bl	80083ae <HAL_UARTEx_SetRxFifoThreshold>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 800146c:	f000 f8c8 	bl	8001600 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001470:	4804      	ldr	r0, [pc, #16]	@ (8001484 <MX_UART5_Init+0x90>)
 8001472:	f006 ff25 	bl	80082c0 <HAL_UARTEx_DisableFifoMode>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 800147c:	f000 f8c0 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}
 8001484:	200002d0 	.word	0x200002d0
 8001488:	40005000 	.word	0x40005000

0800148c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08c      	sub	sp, #48	@ 0x30
 8001490:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001492:	f107 031c 	add.w	r3, r7, #28
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]
 800149e:	60da      	str	r2, [r3, #12]
 80014a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014a2:	4b54      	ldr	r3, [pc, #336]	@ (80015f4 <MX_GPIO_Init+0x168>)
 80014a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a6:	4a53      	ldr	r2, [pc, #332]	@ (80015f4 <MX_GPIO_Init+0x168>)
 80014a8:	f043 0310 	orr.w	r3, r3, #16
 80014ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014ae:	4b51      	ldr	r3, [pc, #324]	@ (80015f4 <MX_GPIO_Init+0x168>)
 80014b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b2:	f003 0310 	and.w	r3, r3, #16
 80014b6:	61bb      	str	r3, [r7, #24]
 80014b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014ba:	4b4e      	ldr	r3, [pc, #312]	@ (80015f4 <MX_GPIO_Init+0x168>)
 80014bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014be:	4a4d      	ldr	r2, [pc, #308]	@ (80015f4 <MX_GPIO_Init+0x168>)
 80014c0:	f043 0320 	orr.w	r3, r3, #32
 80014c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014c6:	4b4b      	ldr	r3, [pc, #300]	@ (80015f4 <MX_GPIO_Init+0x168>)
 80014c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ca:	f003 0320 	and.w	r3, r3, #32
 80014ce:	617b      	str	r3, [r7, #20]
 80014d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014d2:	4b48      	ldr	r3, [pc, #288]	@ (80015f4 <MX_GPIO_Init+0x168>)
 80014d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d6:	4a47      	ldr	r2, [pc, #284]	@ (80015f4 <MX_GPIO_Init+0x168>)
 80014d8:	f043 0304 	orr.w	r3, r3, #4
 80014dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014de:	4b45      	ldr	r3, [pc, #276]	@ (80015f4 <MX_GPIO_Init+0x168>)
 80014e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e2:	f003 0304 	and.w	r3, r3, #4
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ea:	4b42      	ldr	r3, [pc, #264]	@ (80015f4 <MX_GPIO_Init+0x168>)
 80014ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ee:	4a41      	ldr	r2, [pc, #260]	@ (80015f4 <MX_GPIO_Init+0x168>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014f6:	4b3f      	ldr	r3, [pc, #252]	@ (80015f4 <MX_GPIO_Init+0x168>)
 80014f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001502:	4b3c      	ldr	r3, [pc, #240]	@ (80015f4 <MX_GPIO_Init+0x168>)
 8001504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001506:	4a3b      	ldr	r2, [pc, #236]	@ (80015f4 <MX_GPIO_Init+0x168>)
 8001508:	f043 0308 	orr.w	r3, r3, #8
 800150c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800150e:	4b39      	ldr	r3, [pc, #228]	@ (80015f4 <MX_GPIO_Init+0x168>)
 8001510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001512:	f003 0308 	and.w	r3, r3, #8
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800151a:	4b36      	ldr	r3, [pc, #216]	@ (80015f4 <MX_GPIO_Init+0x168>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800151e:	4a35      	ldr	r2, [pc, #212]	@ (80015f4 <MX_GPIO_Init+0x168>)
 8001520:	f043 0302 	orr.w	r3, r3, #2
 8001524:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001526:	4b33      	ldr	r3, [pc, #204]	@ (80015f4 <MX_GPIO_Init+0x168>)
 8001528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	607b      	str	r3, [r7, #4]
 8001530:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|Side_Board_Reset_Pin, GPIO_PIN_SET);
 8001532:	2201      	movs	r2, #1
 8001534:	2118      	movs	r1, #24
 8001536:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800153a:	f002 f80b 	bl	8003554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 800153e:	2201      	movs	r2, #1
 8001540:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001544:	482c      	ldr	r0, [pc, #176]	@ (80015f8 <MX_GPIO_Init+0x16c>)
 8001546:	f002 f805 	bl	8003554 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800154a:	237f      	movs	r3, #127	@ 0x7f
 800154c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800154e:	2300      	movs	r3, #0
 8001550:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001556:	f107 031c 	add.w	r3, r7, #28
 800155a:	4619      	mov	r1, r3
 800155c:	4826      	ldr	r0, [pc, #152]	@ (80015f8 <MX_GPIO_Init+0x16c>)
 800155e:	f001 fe5f 	bl	8003220 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 Side_Board_Reset_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|Side_Board_Reset_Pin;
 8001562:	2318      	movs	r3, #24
 8001564:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001566:	2301      	movs	r3, #1
 8001568:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156e:	2300      	movs	r3, #0
 8001570:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001572:	f107 031c 	add.w	r3, r7, #28
 8001576:	4619      	mov	r1, r3
 8001578:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800157c:	f001 fe50 	bl	8003220 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001580:	2380      	movs	r3, #128	@ 0x80
 8001582:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001584:	2300      	movs	r3, #0
 8001586:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001588:	2302      	movs	r3, #2
 800158a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800158c:	f107 031c 	add.w	r3, r7, #28
 8001590:	4619      	mov	r1, r3
 8001592:	4819      	ldr	r0, [pc, #100]	@ (80015f8 <MX_GPIO_Init+0x16c>)
 8001594:	f001 fe44 	bl	8003220 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001598:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800159c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159e:	2301      	movs	r3, #1
 80015a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a6:	2300      	movs	r3, #0
 80015a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015aa:	f107 031c 	add.w	r3, r7, #28
 80015ae:	4619      	mov	r1, r3
 80015b0:	4811      	ldr	r0, [pc, #68]	@ (80015f8 <MX_GPIO_Init+0x16c>)
 80015b2:	f001 fe35 	bl	8003220 <HAL_GPIO_Init>

  /*Configure GPIO pins : Limiter_switch_j19_Pin LS_DRV2_NO_Pin */
  GPIO_InitStruct.Pin = Limiter_switch_j19_Pin|LS_DRV2_NO_Pin;
 80015b6:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80015ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015bc:	2300      	movs	r3, #0
 80015be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015c0:	2301      	movs	r3, #1
 80015c2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015c4:	f107 031c 	add.w	r3, r7, #28
 80015c8:	4619      	mov	r1, r3
 80015ca:	480c      	ldr	r0, [pc, #48]	@ (80015fc <MX_GPIO_Init+0x170>)
 80015cc:	f001 fe28 	bl	8003220 <HAL_GPIO_Init>

  /*Configure GPIO pins : LS2_DRV1_NO_Pin LS1_DRV1_NO_Pin */
  GPIO_InitStruct.Pin = LS2_DRV1_NO_Pin|LS1_DRV1_NO_Pin;
 80015d0:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 80015d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d6:	2300      	movs	r3, #0
 80015d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015de:	f107 031c 	add.w	r3, r7, #28
 80015e2:	4619      	mov	r1, r3
 80015e4:	4805      	ldr	r0, [pc, #20]	@ (80015fc <MX_GPIO_Init+0x170>)
 80015e6:	f001 fe1b 	bl	8003220 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015ea:	bf00      	nop
 80015ec:	3730      	adds	r7, #48	@ 0x30
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40021000 	.word	0x40021000
 80015f8:	48001000 	.word	0x48001000
 80015fc:	48000c00 	.word	0x48000c00

08001600 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001604:	b672      	cpsid	i
}
 8001606:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001608:	bf00      	nop
 800160a:	e7fd      	b.n	8001608 <Error_Handler+0x8>

0800160c <Motor_Init>:
uint8_t pinstate1=1;

#define MOTOR_SPEED_TILE_ON 250
#define MOTOR_SPEED_TILE_OFF 115

void Motor_Init(int8_t side) {
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	71fb      	strb	r3, [r7, #7]
// !!!! CHANGE THE &htim and channels according to the connection schematics
	  if(side == 0)
 8001616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d10c      	bne.n	8001638 <Motor_Init+0x2c>
	  {
		  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800161e:	2108      	movs	r1, #8
 8001620:	480f      	ldr	r0, [pc, #60]	@ (8001660 <Motor_Init+0x54>)
 8001622:	f003 ffe7 	bl	80055f4 <HAL_TIM_PWM_Start>
		  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001626:	210c      	movs	r1, #12
 8001628:	480d      	ldr	r0, [pc, #52]	@ (8001660 <Motor_Init+0x54>)
 800162a:	f003 ffe3 	bl	80055f4 <HAL_TIM_PWM_Start>
		  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800162e:	213c      	movs	r1, #60	@ 0x3c
 8001630:	480c      	ldr	r0, [pc, #48]	@ (8001664 <Motor_Init+0x58>)
 8001632:	f004 f997 	bl	8005964 <HAL_TIM_Encoder_Start>
		  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
		  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
		  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
	  }
    // Initialize motor control here (if any initialization is needed)
}
 8001636:	e00f      	b.n	8001658 <Motor_Init+0x4c>
	  else if(side ==1)
 8001638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d10b      	bne.n	8001658 <Motor_Init+0x4c>
		  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001640:	2100      	movs	r1, #0
 8001642:	4807      	ldr	r0, [pc, #28]	@ (8001660 <Motor_Init+0x54>)
 8001644:	f003 ffd6 	bl	80055f4 <HAL_TIM_PWM_Start>
		  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001648:	2104      	movs	r1, #4
 800164a:	4805      	ldr	r0, [pc, #20]	@ (8001660 <Motor_Init+0x54>)
 800164c:	f003 ffd2 	bl	80055f4 <HAL_TIM_PWM_Start>
		  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001650:	213c      	movs	r1, #60	@ 0x3c
 8001652:	4805      	ldr	r0, [pc, #20]	@ (8001668 <Motor_Init+0x5c>)
 8001654:	f004 f986 	bl	8005964 <HAL_TIM_Encoder_Start>
}
 8001658:	bf00      	nop
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20000158 	.word	0x20000158
 8001664:	200001f0 	.word	0x200001f0
 8001668:	200001a4 	.word	0x200001a4

0800166c <Motor_Steer>:

void Motor_Steer(int8_t side, int8_t target)
{	SlotSensor_Init(side);
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	460a      	mov	r2, r1
 8001676:	71fb      	strb	r3, [r7, #7]
 8001678:	4613      	mov	r3, r2
 800167a:	71bb      	strb	r3, [r7, #6]
 800167c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001680:	4618      	mov	r0, r3
 8001682:	f000 ff8b 	bl	800259c <SlotSensor_Init>
	Motor_Init(side);
 8001686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff ffbe 	bl	800160c <Motor_Init>
	int8_t count = 0 ;
 8001690:	2300      	movs	r3, #0
 8001692:	73fb      	strb	r3, [r7, #15]
	int16_t Motorspeed;


	if(side == 0)
 8001694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001698:	2b00      	cmp	r3, #0
 800169a:	f040 809d 	bne.w	80017d8 <Motor_Steer+0x16c>
	{

		if(TileONA)
 800169e:	4ba0      	ldr	r3, [pc, #640]	@ (8001920 <Motor_Steer+0x2b4>)
 80016a0:	f993 3000 	ldrsb.w	r3, [r3]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d04b      	beq.n	8001740 <Motor_Steer+0xd4>
		{

			Motorspeed = MOTOR_SPEED_TILE_ON - 1 ;
 80016a8:	23f9      	movs	r3, #249	@ 0xf9
 80016aa:	81bb      	strh	r3, [r7, #12]
			if(target > 0)
 80016ac:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	dd1f      	ble.n	80016f4 <Motor_Steer+0x88>
			{

				while(count < target)
 80016b4:	e00f      	b.n	80016d6 <Motor_Steer+0x6a>
				{	  count = SlotSensor_Update(side);
 80016b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f000 ff8e 	bl	80025dc <SlotSensor_Update>
 80016c0:	4603      	mov	r3, r0
 80016c2:	73fb      	strb	r3, [r7, #15]
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, Motorspeed);
 80016c4:	4b97      	ldr	r3, [pc, #604]	@ (8001924 <Motor_Steer+0x2b8>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80016cc:	63da      	str	r2, [r3, #60]	@ 0x3c
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 80016ce:	4b95      	ldr	r3, [pc, #596]	@ (8001924 <Motor_Steer+0x2b8>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2200      	movs	r2, #0
 80016d4:	641a      	str	r2, [r3, #64]	@ 0x40
				while(count < target)
 80016d6:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80016da:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80016de:	429a      	cmp	r2, r3
 80016e0:	dbe9      	blt.n	80016b6 <Motor_Steer+0x4a>
				}
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80016e2:	4b90      	ldr	r3, [pc, #576]	@ (8001924 <Motor_Steer+0x2b8>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2200      	movs	r2, #0
 80016e8:	63da      	str	r2, [r3, #60]	@ 0x3c
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 80016ea:	4b8e      	ldr	r3, [pc, #568]	@ (8001924 <Motor_Steer+0x2b8>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2200      	movs	r2, #0
 80016f0:	641a      	str	r2, [r3, #64]	@ 0x40
							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
					}

				}
	}
}
 80016f2:	e110      	b.n	8001916 <Motor_Steer+0x2aa>
			else if(target< 0)
 80016f4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f280 810c 	bge.w	8001916 <Motor_Steer+0x2aa>
				while(count < -target)
 80016fe:	e00f      	b.n	8001720 <Motor_Steer+0xb4>
						{	  count = SlotSensor_Update(side);
 8001700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001704:	4618      	mov	r0, r3
 8001706:	f000 ff69 	bl	80025dc <SlotSensor_Update>
 800170a:	4603      	mov	r3, r0
 800170c:	73fb      	strb	r3, [r7, #15]
							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 800170e:	4b85      	ldr	r3, [pc, #532]	@ (8001924 <Motor_Steer+0x2b8>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2200      	movs	r2, #0
 8001714:	63da      	str	r2, [r3, #60]	@ 0x3c
							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, Motorspeed);
 8001716:	4b83      	ldr	r3, [pc, #524]	@ (8001924 <Motor_Steer+0x2b8>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800171e:	641a      	str	r2, [r3, #64]	@ 0x40
				while(count < -target)
 8001720:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001724:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001728:	425b      	negs	r3, r3
 800172a:	429a      	cmp	r2, r3
 800172c:	dbe8      	blt.n	8001700 <Motor_Steer+0x94>
							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 800172e:	4b7d      	ldr	r3, [pc, #500]	@ (8001924 <Motor_Steer+0x2b8>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2200      	movs	r2, #0
 8001734:	63da      	str	r2, [r3, #60]	@ 0x3c
							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001736:	4b7b      	ldr	r3, [pc, #492]	@ (8001924 <Motor_Steer+0x2b8>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2200      	movs	r2, #0
 800173c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800173e:	e0ea      	b.n	8001916 <Motor_Steer+0x2aa>
			Motorspeed = MOTOR_SPEED_TILE_OFF -1 ;
 8001740:	2372      	movs	r3, #114	@ 0x72
 8001742:	81bb      	strh	r3, [r7, #12]
			if(target > 0){
 8001744:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001748:	2b00      	cmp	r3, #0
 800174a:	dd1f      	ble.n	800178c <Motor_Steer+0x120>
						while(count < target)
 800174c:	e00f      	b.n	800176e <Motor_Steer+0x102>
							count = SlotSensor_Update(side);
 800174e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001752:	4618      	mov	r0, r3
 8001754:	f000 ff42 	bl	80025dc <SlotSensor_Update>
 8001758:	4603      	mov	r3, r0
 800175a:	73fb      	strb	r3, [r7, #15]
							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, Motorspeed);
 800175c:	4b71      	ldr	r3, [pc, #452]	@ (8001924 <Motor_Steer+0x2b8>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001764:	63da      	str	r2, [r3, #60]	@ 0x3c
							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001766:	4b6f      	ldr	r3, [pc, #444]	@ (8001924 <Motor_Steer+0x2b8>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2200      	movs	r2, #0
 800176c:	641a      	str	r2, [r3, #64]	@ 0x40
						while(count < target)
 800176e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001772:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001776:	429a      	cmp	r2, r3
 8001778:	dbe9      	blt.n	800174e <Motor_Steer+0xe2>
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 800177a:	4b6a      	ldr	r3, [pc, #424]	@ (8001924 <Motor_Steer+0x2b8>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2200      	movs	r2, #0
 8001780:	63da      	str	r2, [r3, #60]	@ 0x3c
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001782:	4b68      	ldr	r3, [pc, #416]	@ (8001924 <Motor_Steer+0x2b8>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2200      	movs	r2, #0
 8001788:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800178a:	e0c4      	b.n	8001916 <Motor_Steer+0x2aa>
			else if(target< 0)
 800178c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001790:	2b00      	cmp	r3, #0
 8001792:	f280 80c0 	bge.w	8001916 <Motor_Steer+0x2aa>
				while(count < -target)
 8001796:	e00f      	b.n	80017b8 <Motor_Steer+0x14c>
					count = SlotSensor_Update(side);
 8001798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179c:	4618      	mov	r0, r3
 800179e:	f000 ff1d 	bl	80025dc <SlotSensor_Update>
 80017a2:	4603      	mov	r3, r0
 80017a4:	73fb      	strb	r3, [r7, #15]
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80017a6:	4b5f      	ldr	r3, [pc, #380]	@ (8001924 <Motor_Steer+0x2b8>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2200      	movs	r2, #0
 80017ac:	63da      	str	r2, [r3, #60]	@ 0x3c
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, Motorspeed);
 80017ae:	4b5d      	ldr	r3, [pc, #372]	@ (8001924 <Motor_Steer+0x2b8>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80017b6:	641a      	str	r2, [r3, #64]	@ 0x40
				while(count < -target)
 80017b8:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80017bc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80017c0:	425b      	negs	r3, r3
 80017c2:	429a      	cmp	r2, r3
 80017c4:	dbe8      	blt.n	8001798 <Motor_Steer+0x12c>
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80017c6:	4b57      	ldr	r3, [pc, #348]	@ (8001924 <Motor_Steer+0x2b8>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2200      	movs	r2, #0
 80017cc:	63da      	str	r2, [r3, #60]	@ 0x3c
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 80017ce:	4b55      	ldr	r3, [pc, #340]	@ (8001924 <Motor_Steer+0x2b8>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2200      	movs	r2, #0
 80017d4:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80017d6:	e09e      	b.n	8001916 <Motor_Steer+0x2aa>
	else if(side == 1 )
 80017d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	f040 809a 	bne.w	8001916 <Motor_Steer+0x2aa>
		if(TileONB)
 80017e2:	4b51      	ldr	r3, [pc, #324]	@ (8001928 <Motor_Steer+0x2bc>)
 80017e4:	f993 3000 	ldrsb.w	r3, [r3]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d04a      	beq.n	8001882 <Motor_Steer+0x216>
					Motorspeed = MOTOR_SPEED_TILE_ON - 1 ;
 80017ec:	23f9      	movs	r3, #249	@ 0xf9
 80017ee:	81bb      	strh	r3, [r7, #12]
					if(target > 0)
 80017f0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	dd1f      	ble.n	8001838 <Motor_Steer+0x1cc>
						while(count < target)
 80017f8:	e00f      	b.n	800181a <Motor_Steer+0x1ae>
						{	  count = SlotSensor_Update(side);
 80017fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 feec 	bl	80025dc <SlotSensor_Update>
 8001804:	4603      	mov	r3, r0
 8001806:	73fb      	strb	r3, [r7, #15]
							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, Motorspeed);
 8001808:	4b46      	ldr	r3, [pc, #280]	@ (8001924 <Motor_Steer+0x2b8>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001810:	635a      	str	r2, [r3, #52]	@ 0x34
							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8001812:	4b44      	ldr	r3, [pc, #272]	@ (8001924 <Motor_Steer+0x2b8>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2200      	movs	r2, #0
 8001818:	639a      	str	r2, [r3, #56]	@ 0x38
						while(count < target)
 800181a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800181e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001822:	429a      	cmp	r2, r3
 8001824:	dbe9      	blt.n	80017fa <Motor_Steer+0x18e>
							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001826:	4b3f      	ldr	r3, [pc, #252]	@ (8001924 <Motor_Steer+0x2b8>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2200      	movs	r2, #0
 800182c:	635a      	str	r2, [r3, #52]	@ 0x34
							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 800182e:	4b3d      	ldr	r3, [pc, #244]	@ (8001924 <Motor_Steer+0x2b8>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2200      	movs	r2, #0
 8001834:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001836:	e06e      	b.n	8001916 <Motor_Steer+0x2aa>
					else if(target< 0)
 8001838:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800183c:	2b00      	cmp	r3, #0
 800183e:	da6a      	bge.n	8001916 <Motor_Steer+0x2aa>
						while(count < -target)
 8001840:	e00f      	b.n	8001862 <Motor_Steer+0x1f6>
								{	  count = SlotSensor_Update(side);
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	4618      	mov	r0, r3
 8001848:	f000 fec8 	bl	80025dc <SlotSensor_Update>
 800184c:	4603      	mov	r3, r0
 800184e:	73fb      	strb	r3, [r7, #15]
									__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001850:	4b34      	ldr	r3, [pc, #208]	@ (8001924 <Motor_Steer+0x2b8>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2200      	movs	r2, #0
 8001856:	635a      	str	r2, [r3, #52]	@ 0x34
									__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, Motorspeed);
 8001858:	4b32      	ldr	r3, [pc, #200]	@ (8001924 <Motor_Steer+0x2b8>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001860:	639a      	str	r2, [r3, #56]	@ 0x38
						while(count < -target)
 8001862:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001866:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800186a:	425b      	negs	r3, r3
 800186c:	429a      	cmp	r2, r3
 800186e:	dbe8      	blt.n	8001842 <Motor_Steer+0x1d6>
									__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001870:	4b2c      	ldr	r3, [pc, #176]	@ (8001924 <Motor_Steer+0x2b8>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2200      	movs	r2, #0
 8001876:	635a      	str	r2, [r3, #52]	@ 0x34
									__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8001878:	4b2a      	ldr	r3, [pc, #168]	@ (8001924 <Motor_Steer+0x2b8>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2200      	movs	r2, #0
 800187e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001880:	e049      	b.n	8001916 <Motor_Steer+0x2aa>
					Motorspeed = MOTOR_SPEED_TILE_OFF -1 ;
 8001882:	2372      	movs	r3, #114	@ 0x72
 8001884:	81bb      	strh	r3, [r7, #12]
					if(target > 0){
 8001886:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800188a:	2b00      	cmp	r3, #0
 800188c:	dd1f      	ble.n	80018ce <Motor_Steer+0x262>
								while(count < target)
 800188e:	e00f      	b.n	80018b0 <Motor_Steer+0x244>
									count = SlotSensor_Update(side);
 8001890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001894:	4618      	mov	r0, r3
 8001896:	f000 fea1 	bl	80025dc <SlotSensor_Update>
 800189a:	4603      	mov	r3, r0
 800189c:	73fb      	strb	r3, [r7, #15]
									__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, Motorspeed);
 800189e:	4b21      	ldr	r3, [pc, #132]	@ (8001924 <Motor_Steer+0x2b8>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80018a6:	635a      	str	r2, [r3, #52]	@ 0x34
									__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80018a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001924 <Motor_Steer+0x2b8>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2200      	movs	r2, #0
 80018ae:	639a      	str	r2, [r3, #56]	@ 0x38
								while(count < target)
 80018b0:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80018b4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	dbe9      	blt.n	8001890 <Motor_Steer+0x224>
							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80018bc:	4b19      	ldr	r3, [pc, #100]	@ (8001924 <Motor_Steer+0x2b8>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2200      	movs	r2, #0
 80018c2:	635a      	str	r2, [r3, #52]	@ 0x34
							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80018c4:	4b17      	ldr	r3, [pc, #92]	@ (8001924 <Motor_Steer+0x2b8>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2200      	movs	r2, #0
 80018ca:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80018cc:	e023      	b.n	8001916 <Motor_Steer+0x2aa>
					else if(target< 0)
 80018ce:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	da1f      	bge.n	8001916 <Motor_Steer+0x2aa>
						while(count < -target)
 80018d6:	e00f      	b.n	80018f8 <Motor_Steer+0x28c>
							count = SlotSensor_Update(side);
 80018d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018dc:	4618      	mov	r0, r3
 80018de:	f000 fe7d 	bl	80025dc <SlotSensor_Update>
 80018e2:	4603      	mov	r3, r0
 80018e4:	73fb      	strb	r3, [r7, #15]
							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80018e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001924 <Motor_Steer+0x2b8>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2200      	movs	r2, #0
 80018ec:	635a      	str	r2, [r3, #52]	@ 0x34
							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, Motorspeed);
 80018ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001924 <Motor_Steer+0x2b8>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80018f6:	639a      	str	r2, [r3, #56]	@ 0x38
						while(count < -target)
 80018f8:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80018fc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001900:	425b      	negs	r3, r3
 8001902:	429a      	cmp	r2, r3
 8001904:	dbe8      	blt.n	80018d8 <Motor_Steer+0x26c>
							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001906:	4b07      	ldr	r3, [pc, #28]	@ (8001924 <Motor_Steer+0x2b8>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2200      	movs	r2, #0
 800190c:	635a      	str	r2, [r3, #52]	@ 0x34
							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 800190e:	4b05      	ldr	r3, [pc, #20]	@ (8001924 <Motor_Steer+0x2b8>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2200      	movs	r2, #0
 8001914:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001916:	bf00      	nop
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	200000ea 	.word	0x200000ea
 8001924:	20000158 	.word	0x20000158
 8001928:	200000eb 	.word	0x200000eb

0800192c <ABSRotateHead>:



}
int8_t ABSRotateHead(int8_t side , int8_t target_position)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b08a      	sub	sp, #40	@ 0x28
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	460a      	mov	r2, r1
 8001936:	71fb      	strb	r3, [r7, #7]
 8001938:	4613      	mov	r3, r2
 800193a:	71bb      	strb	r3, [r7, #6]
	if(side == 0 )
 800193c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001940:	2b00      	cmp	r3, #0
 8001942:	f040 82c5 	bne.w	8001ed0 <ABSRotateHead+0x5a4>
	{
		Motor_Init(side);
 8001946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff fe5e 	bl	800160c <Motor_Init>

		GPIO_PinState current_state1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7); // Read pin state
 8001950:	2180      	movs	r1, #128	@ 0x80
 8001952:	48aa      	ldr	r0, [pc, #680]	@ (8001bfc <ABSRotateHead+0x2d0>)
 8001954:	f001 fde6 	bl	8003524 <HAL_GPIO_ReadPin>
 8001958:	4603      	mov	r3, r0
 800195a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		GPIO_PinState last_state1=current_state1;
 800195e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001962:	747b      	strb	r3, [r7, #17]
		if(current_state1==GPIO_PIN_RESET){
 8001964:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001968:	2b00      	cmp	r3, #0
 800196a:	d11c      	bne.n	80019a6 <ABSRotateHead+0x7a>
			while (current_state1 == last_state1){
 800196c:	e00e      	b.n	800198c <ABSRotateHead+0x60>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 800196e:	4ba4      	ldr	r3, [pc, #656]	@ (8001c00 <ABSRotateHead+0x2d4>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2200      	movs	r2, #0
 8001974:	63da      	str	r2, [r3, #60]	@ 0x3c
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 100);
 8001976:	4ba2      	ldr	r3, [pc, #648]	@ (8001c00 <ABSRotateHead+0x2d4>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2264      	movs	r2, #100	@ 0x64
 800197c:	641a      	str	r2, [r3, #64]	@ 0x40
				current_state1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7);
 800197e:	2180      	movs	r1, #128	@ 0x80
 8001980:	489e      	ldr	r0, [pc, #632]	@ (8001bfc <ABSRotateHead+0x2d0>)
 8001982:	f001 fdcf 	bl	8003524 <HAL_GPIO_ReadPin>
 8001986:	4603      	mov	r3, r0
 8001988:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			while (current_state1 == last_state1){
 800198c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001990:	7c7b      	ldrb	r3, [r7, #17]
 8001992:	429a      	cmp	r2, r3
 8001994:	d0eb      	beq.n	800196e <ABSRotateHead+0x42>
			}

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001996:	4b9a      	ldr	r3, [pc, #616]	@ (8001c00 <ABSRotateHead+0x2d4>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2200      	movs	r2, #0
 800199c:	63da      	str	r2, [r3, #60]	@ 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 800199e:	4b98      	ldr	r3, [pc, #608]	@ (8001c00 <ABSRotateHead+0x2d4>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2200      	movs	r2, #0
 80019a4:	641a      	str	r2, [r3, #64]	@ 0x40

		}
		HAL_Delay(200);
 80019a6:	20c8      	movs	r0, #200	@ 0xc8
 80019a8:	f001 fa48 	bl	8002e3c <HAL_Delay>
		int8_t absolute_target_position = target_position*5 - posABS_HeadA;
 80019ac:	79bb      	ldrb	r3, [r7, #6]
 80019ae:	461a      	mov	r2, r3
 80019b0:	0092      	lsls	r2, r2, #2
 80019b2:	4413      	add	r3, r2
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	4b93      	ldr	r3, [pc, #588]	@ (8001c04 <ABSRotateHead+0x2d8>)
 80019b8:	f993 3000 	ldrsb.w	r3, [r3]
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	743b      	strb	r3, [r7, #16]
		SlotSensor_Init(side);
 80019c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f000 fde7 	bl	800259c <SlotSensor_Init>
		Motor_Init(side);
 80019ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff fe1a 	bl	800160c <Motor_Init>
		int8_t count = 0 ;
 80019d8:	2300      	movs	r3, #0
 80019da:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		int16_t Motorspeed;



			if(TileONA)
 80019de:	4b8a      	ldr	r3, [pc, #552]	@ (8001c08 <ABSRotateHead+0x2dc>)
 80019e0:	f993 3000 	ldrsb.w	r3, [r3]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	f000 812e 	beq.w	8001c46 <ABSRotateHead+0x31a>
			{
				Motorspeed = MOTOR_SPEED_TILE_ON - 1 ;
 80019ea:	23f9      	movs	r3, #249	@ 0xf9
 80019ec:	84bb      	strh	r3, [r7, #36]	@ 0x24
				if(absolute_target_position > 0)
 80019ee:	f997 3010 	ldrsb.w	r3, [r7, #16]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f340 808b 	ble.w	8001b0e <ABSRotateHead+0x1e2>
				{
					if (absolute_target_position-count==5){
 80019f8:	f997 2010 	ldrsb.w	r2, [r7, #16]
 80019fc:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b05      	cmp	r3, #5
 8001a04:	d114      	bne.n	8001a30 <ABSRotateHead+0x104>
											if(target_position==1){
 8001a06:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d102      	bne.n	8001a14 <ABSRotateHead+0xe8>
											Motorspeed = 220;}
 8001a0e:	23dc      	movs	r3, #220	@ 0xdc
 8001a10:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001a12:	e03e      	b.n	8001a92 <ABSRotateHead+0x166>
											else if(target_position==2){
 8001a14:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d102      	bne.n	8001a22 <ABSRotateHead+0xf6>
												Motorspeed=215;
 8001a1c:	23d7      	movs	r3, #215	@ 0xd7
 8001a1e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001a20:	e037      	b.n	8001a92 <ABSRotateHead+0x166>
											}
											else if (target_position==3){
 8001a22:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001a26:	2b03      	cmp	r3, #3
 8001a28:	d133      	bne.n	8001a92 <ABSRotateHead+0x166>
												Motorspeed=215;
 8001a2a:	23d7      	movs	r3, #215	@ 0xd7
 8001a2c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001a2e:	e030      	b.n	8001a92 <ABSRotateHead+0x166>
											}
										}
										else if (absolute_target_position-count==10){
 8001a30:	f997 2010 	ldrsb.w	r2, [r7, #16]
 8001a34:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b0a      	cmp	r3, #10
 8001a3c:	d10d      	bne.n	8001a5a <ABSRotateHead+0x12e>
											if (target_position==2){
 8001a3e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d102      	bne.n	8001a4c <ABSRotateHead+0x120>
											Motorspeed=250;}
 8001a46:	23fa      	movs	r3, #250	@ 0xfa
 8001a48:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001a4a:	e022      	b.n	8001a92 <ABSRotateHead+0x166>
											else if(target_position==3){
 8001a4c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001a50:	2b03      	cmp	r3, #3
 8001a52:	d11e      	bne.n	8001a92 <ABSRotateHead+0x166>
												Motorspeed=250;
 8001a54:	23fa      	movs	r3, #250	@ 0xfa
 8001a56:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001a58:	e01b      	b.n	8001a92 <ABSRotateHead+0x166>
											}
										}
										else if (absolute_target_position-count==15){
 8001a5a:	f997 2010 	ldrsb.w	r2, [r7, #16]
 8001a5e:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b0f      	cmp	r3, #15
 8001a66:	d114      	bne.n	8001a92 <ABSRotateHead+0x166>
											Motorspeed=258;
 8001a68:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001a6c:	84bb      	strh	r3, [r7, #36]	@ 0x24
										}

					while(count < absolute_target_position)
 8001a6e:	e010      	b.n	8001a92 <ABSRotateHead+0x166>
					{	  count = SlotSensor_Update(side);
 8001a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f000 fdb1 	bl	80025dc <SlotSensor_Update>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, Motorspeed);
 8001a80:	4b5f      	ldr	r3, [pc, #380]	@ (8001c00 <ABSRotateHead+0x2d4>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001a88:	63da      	str	r2, [r3, #60]	@ 0x3c
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001a8a:	4b5d      	ldr	r3, [pc, #372]	@ (8001c00 <ABSRotateHead+0x2d4>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	641a      	str	r2, [r3, #64]	@ 0x40
					while(count < absolute_target_position)
 8001a92:	f997 2026 	ldrsb.w	r2, [r7, #38]	@ 0x26
 8001a96:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	dbe8      	blt.n	8001a70 <ABSRotateHead+0x144>
					}

					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001a9e:	4b58      	ldr	r3, [pc, #352]	@ (8001c00 <ABSRotateHead+0x2d4>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	63da      	str	r2, [r3, #60]	@ 0x3c
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001aa6:	4b56      	ldr	r3, [pc, #344]	@ (8001c00 <ABSRotateHead+0x2d4>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	641a      	str	r2, [r3, #64]	@ 0x40
					HAL_Delay(200);
 8001aae:	20c8      	movs	r0, #200	@ 0xc8
 8001ab0:	f001 f9c4 	bl	8002e3c <HAL_Delay>
					GPIO_PinState current_state1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7); // Read pin state
 8001ab4:	2180      	movs	r1, #128	@ 0x80
 8001ab6:	4851      	ldr	r0, [pc, #324]	@ (8001bfc <ABSRotateHead+0x2d0>)
 8001ab8:	f001 fd34 	bl	8003524 <HAL_GPIO_ReadPin>
 8001abc:	4603      	mov	r3, r0
 8001abe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
					GPIO_PinState last_state1=current_state1;
 8001ac2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001ac6:	733b      	strb	r3, [r7, #12]
					if(current_state1==GPIO_PIN_RESET){
 8001ac8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f040 81dc 	bne.w	8001e8a <ABSRotateHead+0x55e>
							while (current_state1 == last_state1){
 8001ad2:	e00e      	b.n	8001af2 <ABSRotateHead+0x1c6>
									__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0 );
 8001ad4:	4b4a      	ldr	r3, [pc, #296]	@ (8001c00 <ABSRotateHead+0x2d4>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	63da      	str	r2, [r3, #60]	@ 0x3c
									__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 100);
 8001adc:	4b48      	ldr	r3, [pc, #288]	@ (8001c00 <ABSRotateHead+0x2d4>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2264      	movs	r2, #100	@ 0x64
 8001ae2:	641a      	str	r2, [r3, #64]	@ 0x40
									current_state1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7);
 8001ae4:	2180      	movs	r1, #128	@ 0x80
 8001ae6:	4845      	ldr	r0, [pc, #276]	@ (8001bfc <ABSRotateHead+0x2d0>)
 8001ae8:	f001 fd1c 	bl	8003524 <HAL_GPIO_ReadPin>
 8001aec:	4603      	mov	r3, r0
 8001aee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
							while (current_state1 == last_state1){
 8001af2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001af6:	7b3b      	ldrb	r3, [r7, #12]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d0eb      	beq.n	8001ad4 <ABSRotateHead+0x1a8>
									}

						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001afc:	4b40      	ldr	r3, [pc, #256]	@ (8001c00 <ABSRotateHead+0x2d4>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2200      	movs	r2, #0
 8001b02:	63da      	str	r2, [r3, #60]	@ 0x3c
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001b04:	4b3e      	ldr	r3, [pc, #248]	@ (8001c00 <ABSRotateHead+0x2d4>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b0c:	e1bd      	b.n	8001e8a <ABSRotateHead+0x55e>

				}
				}
				else if(absolute_target_position< 0)
 8001b0e:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f280 81b9 	bge.w	8001e8a <ABSRotateHead+0x55e>
				{
					if (absolute_target_position-count==-5){
 8001b18:	f997 2010 	ldrsb.w	r2, [r7, #16]
 8001b1c:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	f113 0f05 	cmn.w	r3, #5
 8001b26:	d114      	bne.n	8001b52 <ABSRotateHead+0x226>
							if(target_position==0){
 8001b28:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d102      	bne.n	8001b36 <ABSRotateHead+0x20a>
								Motorspeed = 220;}
 8001b30:	23dc      	movs	r3, #220	@ 0xdc
 8001b32:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001b34:	e040      	b.n	8001bb8 <ABSRotateHead+0x28c>
							else if(target_position==1){
 8001b36:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d102      	bne.n	8001b44 <ABSRotateHead+0x218>
									Motorspeed=210;
 8001b3e:	23d2      	movs	r3, #210	@ 0xd2
 8001b40:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001b42:	e039      	b.n	8001bb8 <ABSRotateHead+0x28c>
									}
							else if (target_position==2){
 8001b44:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d135      	bne.n	8001bb8 <ABSRotateHead+0x28c>
									Motorspeed=210;
 8001b4c:	23d2      	movs	r3, #210	@ 0xd2
 8001b4e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001b50:	e032      	b.n	8001bb8 <ABSRotateHead+0x28c>
									}
									}
					else if (absolute_target_position-count==-10){
 8001b52:	f997 2010 	ldrsb.w	r2, [r7, #16]
 8001b56:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	f113 0f0a 	cmn.w	r3, #10
 8001b60:	d10e      	bne.n	8001b80 <ABSRotateHead+0x254>
							if (target_position==0){
 8001b62:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d102      	bne.n	8001b70 <ABSRotateHead+0x244>
								Motorspeed=255;}
 8001b6a:	23ff      	movs	r3, #255	@ 0xff
 8001b6c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001b6e:	e023      	b.n	8001bb8 <ABSRotateHead+0x28c>
							else if(target_position==1){
 8001b70:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d11f      	bne.n	8001bb8 <ABSRotateHead+0x28c>
										Motorspeed=258;
 8001b78:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001b7c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001b7e:	e01b      	b.n	8001bb8 <ABSRotateHead+0x28c>
															}
														}
							else if (absolute_target_position-count==-15){
 8001b80:	f997 2010 	ldrsb.w	r2, [r7, #16]
 8001b84:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	f113 0f0f 	cmn.w	r3, #15
 8001b8e:	d113      	bne.n	8001bb8 <ABSRotateHead+0x28c>
									Motorspeed=255;
 8001b90:	23ff      	movs	r3, #255	@ 0xff
 8001b92:	84bb      	strh	r3, [r7, #36]	@ 0x24
							}

					while(count < -absolute_target_position)
 8001b94:	e010      	b.n	8001bb8 <ABSRotateHead+0x28c>
							{	  count = SlotSensor_Update(side);
 8001b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f000 fd1e 	bl	80025dc <SlotSensor_Update>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
								__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001ba6:	4b16      	ldr	r3, [pc, #88]	@ (8001c00 <ABSRotateHead+0x2d4>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2200      	movs	r2, #0
 8001bac:	63da      	str	r2, [r3, #60]	@ 0x3c
								__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, Motorspeed);
 8001bae:	4b14      	ldr	r3, [pc, #80]	@ (8001c00 <ABSRotateHead+0x2d4>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001bb6:	641a      	str	r2, [r3, #64]	@ 0x40
					while(count < -absolute_target_position)
 8001bb8:	f997 2026 	ldrsb.w	r2, [r7, #38]	@ 0x26
 8001bbc:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8001bc0:	425b      	negs	r3, r3
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	dbe7      	blt.n	8001b96 <ABSRotateHead+0x26a>
							}

					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001bc6:	4b0e      	ldr	r3, [pc, #56]	@ (8001c00 <ABSRotateHead+0x2d4>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	63da      	str	r2, [r3, #60]	@ 0x3c
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001bce:	4b0c      	ldr	r3, [pc, #48]	@ (8001c00 <ABSRotateHead+0x2d4>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	641a      	str	r2, [r3, #64]	@ 0x40
					HAL_Delay(200);
 8001bd6:	20c8      	movs	r0, #200	@ 0xc8
 8001bd8:	f001 f930 	bl	8002e3c <HAL_Delay>
					GPIO_PinState current_state1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7); // Read pin state
 8001bdc:	2180      	movs	r1, #128	@ 0x80
 8001bde:	4807      	ldr	r0, [pc, #28]	@ (8001bfc <ABSRotateHead+0x2d0>)
 8001be0:	f001 fca0 	bl	8003524 <HAL_GPIO_ReadPin>
 8001be4:	4603      	mov	r3, r0
 8001be6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
					GPIO_PinState last_state1=current_state1;
 8001bea:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001bee:	737b      	strb	r3, [r7, #13]
					if(current_state1==GPIO_PIN_RESET){
 8001bf0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	f040 8148 	bne.w	8001e8a <ABSRotateHead+0x55e>
							while (current_state1 == last_state1){
 8001bfa:	e016      	b.n	8001c2a <ABSRotateHead+0x2fe>
 8001bfc:	48001000 	.word	0x48001000
 8001c00:	20000158 	.word	0x20000158
 8001c04:	200000e8 	.word	0x200000e8
 8001c08:	200000ea 	.word	0x200000ea
									__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,100 );
 8001c0c:	4bac      	ldr	r3, [pc, #688]	@ (8001ec0 <ABSRotateHead+0x594>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2264      	movs	r2, #100	@ 0x64
 8001c12:	63da      	str	r2, [r3, #60]	@ 0x3c
									__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001c14:	4baa      	ldr	r3, [pc, #680]	@ (8001ec0 <ABSRotateHead+0x594>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	641a      	str	r2, [r3, #64]	@ 0x40
									current_state1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7);
 8001c1c:	2180      	movs	r1, #128	@ 0x80
 8001c1e:	48a9      	ldr	r0, [pc, #676]	@ (8001ec4 <ABSRotateHead+0x598>)
 8001c20:	f001 fc80 	bl	8003524 <HAL_GPIO_ReadPin>
 8001c24:	4603      	mov	r3, r0
 8001c26:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
							while (current_state1 == last_state1){
 8001c2a:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8001c2e:	7b7b      	ldrb	r3, [r7, #13]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d0eb      	beq.n	8001c0c <ABSRotateHead+0x2e0>
									}


								__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001c34:	4ba2      	ldr	r3, [pc, #648]	@ (8001ec0 <ABSRotateHead+0x594>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	63da      	str	r2, [r3, #60]	@ 0x3c
								__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001c3c:	4ba0      	ldr	r3, [pc, #640]	@ (8001ec0 <ABSRotateHead+0x594>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2200      	movs	r2, #0
 8001c42:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c44:	e121      	b.n	8001e8a <ABSRotateHead+0x55e>

			}
			else
			{

				Motorspeed = MOTOR_SPEED_TILE_OFF -1 ;
 8001c46:	2372      	movs	r3, #114	@ 0x72
 8001c48:	84bb      	strh	r3, [r7, #36]	@ 0x24
				if(absolute_target_position > 0){
 8001c4a:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f340 808a 	ble.w	8001d68 <ABSRotateHead+0x43c>
						if (absolute_target_position-count==5){
 8001c54:	f997 2010 	ldrsb.w	r2, [r7, #16]
 8001c58:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b05      	cmp	r3, #5
 8001c60:	d114      	bne.n	8001c8c <ABSRotateHead+0x360>
							if(target_position==1){
 8001c62:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d102      	bne.n	8001c70 <ABSRotateHead+0x344>
							Motorspeed = 120;}
 8001c6a:	2378      	movs	r3, #120	@ 0x78
 8001c6c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001c6e:	e03d      	b.n	8001cec <ABSRotateHead+0x3c0>
							else if(target_position==2){
 8001c70:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d102      	bne.n	8001c7e <ABSRotateHead+0x352>
								Motorspeed=145;
 8001c78:	2391      	movs	r3, #145	@ 0x91
 8001c7a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001c7c:	e036      	b.n	8001cec <ABSRotateHead+0x3c0>
							}
							else if (target_position==3){
 8001c7e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001c82:	2b03      	cmp	r3, #3
 8001c84:	d132      	bne.n	8001cec <ABSRotateHead+0x3c0>
								Motorspeed=145;
 8001c86:	2391      	movs	r3, #145	@ 0x91
 8001c88:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001c8a:	e02f      	b.n	8001cec <ABSRotateHead+0x3c0>
							}
						}
						else if (absolute_target_position-count==10){
 8001c8c:	f997 2010 	ldrsb.w	r2, [r7, #16]
 8001c90:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b0a      	cmp	r3, #10
 8001c98:	d10d      	bne.n	8001cb6 <ABSRotateHead+0x38a>
							if (target_position==2){
 8001c9a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d102      	bne.n	8001ca8 <ABSRotateHead+0x37c>
							Motorspeed=115;}
 8001ca2:	2373      	movs	r3, #115	@ 0x73
 8001ca4:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001ca6:	e021      	b.n	8001cec <ABSRotateHead+0x3c0>
							else if(target_position==3){
 8001ca8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001cac:	2b03      	cmp	r3, #3
 8001cae:	d11d      	bne.n	8001cec <ABSRotateHead+0x3c0>
								Motorspeed=170;
 8001cb0:	23aa      	movs	r3, #170	@ 0xaa
 8001cb2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001cb4:	e01a      	b.n	8001cec <ABSRotateHead+0x3c0>
							}
						}
						else if (absolute_target_position-count==15){
 8001cb6:	f997 2010 	ldrsb.w	r2, [r7, #16]
 8001cba:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b0f      	cmp	r3, #15
 8001cc2:	d113      	bne.n	8001cec <ABSRotateHead+0x3c0>
							Motorspeed=180;
 8001cc4:	23b4      	movs	r3, #180	@ 0xb4
 8001cc6:	84bb      	strh	r3, [r7, #36]	@ 0x24
						}
							while(count < absolute_target_position)
 8001cc8:	e010      	b.n	8001cec <ABSRotateHead+0x3c0>
							{
								count = SlotSensor_Update(side);
 8001cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f000 fc84 	bl	80025dc <SlotSensor_Update>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
								__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, Motorspeed);
 8001cda:	4b79      	ldr	r3, [pc, #484]	@ (8001ec0 <ABSRotateHead+0x594>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001ce2:	63da      	str	r2, [r3, #60]	@ 0x3c
								__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001ce4:	4b76      	ldr	r3, [pc, #472]	@ (8001ec0 <ABSRotateHead+0x594>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	641a      	str	r2, [r3, #64]	@ 0x40
							while(count < absolute_target_position)
 8001cec:	f997 2026 	ldrsb.w	r2, [r7, #38]	@ 0x26
 8001cf0:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	dbe8      	blt.n	8001cca <ABSRotateHead+0x39e>
							}

						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001cf8:	4b71      	ldr	r3, [pc, #452]	@ (8001ec0 <ABSRotateHead+0x594>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	63da      	str	r2, [r3, #60]	@ 0x3c
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001d00:	4b6f      	ldr	r3, [pc, #444]	@ (8001ec0 <ABSRotateHead+0x594>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2200      	movs	r2, #0
 8001d06:	641a      	str	r2, [r3, #64]	@ 0x40
						HAL_Delay(200);
 8001d08:	20c8      	movs	r0, #200	@ 0xc8
 8001d0a:	f001 f897 	bl	8002e3c <HAL_Delay>

						GPIO_PinState current_state1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7); // Read pin state
 8001d0e:	2180      	movs	r1, #128	@ 0x80
 8001d10:	486c      	ldr	r0, [pc, #432]	@ (8001ec4 <ABSRotateHead+0x598>)
 8001d12:	f001 fc07 	bl	8003524 <HAL_GPIO_ReadPin>
 8001d16:	4603      	mov	r3, r0
 8001d18:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
						GPIO_PinState last_state1=current_state1;
 8001d1c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001d20:	73bb      	strb	r3, [r7, #14]
						if(current_state1==GPIO_PIN_RESET){
 8001d22:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f040 80af 	bne.w	8001e8a <ABSRotateHead+0x55e>
							while (current_state1 == last_state1){
 8001d2c:	e00e      	b.n	8001d4c <ABSRotateHead+0x420>
								__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0 );
 8001d2e:	4b64      	ldr	r3, [pc, #400]	@ (8001ec0 <ABSRotateHead+0x594>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2200      	movs	r2, #0
 8001d34:	63da      	str	r2, [r3, #60]	@ 0x3c
								__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 100);
 8001d36:	4b62      	ldr	r3, [pc, #392]	@ (8001ec0 <ABSRotateHead+0x594>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2264      	movs	r2, #100	@ 0x64
 8001d3c:	641a      	str	r2, [r3, #64]	@ 0x40
								current_state1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7);
 8001d3e:	2180      	movs	r1, #128	@ 0x80
 8001d40:	4860      	ldr	r0, [pc, #384]	@ (8001ec4 <ABSRotateHead+0x598>)
 8001d42:	f001 fbef 	bl	8003524 <HAL_GPIO_ReadPin>
 8001d46:	4603      	mov	r3, r0
 8001d48:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
							while (current_state1 == last_state1){
 8001d4c:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8001d50:	7bbb      	ldrb	r3, [r7, #14]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d0eb      	beq.n	8001d2e <ABSRotateHead+0x402>

						}
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001d56:	4b5a      	ldr	r3, [pc, #360]	@ (8001ec0 <ABSRotateHead+0x594>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	63da      	str	r2, [r3, #60]	@ 0x3c
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001d5e:	4b58      	ldr	r3, [pc, #352]	@ (8001ec0 <ABSRotateHead+0x594>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2200      	movs	r2, #0
 8001d64:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d66:	e090      	b.n	8001e8a <ABSRotateHead+0x55e>

						}
						}
				else if(absolute_target_position< 0)
 8001d68:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f280 808c 	bge.w	8001e8a <ABSRotateHead+0x55e>
				{
					if (absolute_target_position-count==-5){
 8001d72:	f997 2010 	ldrsb.w	r2, [r7, #16]
 8001d76:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	f113 0f05 	cmn.w	r3, #5
 8001d80:	d114      	bne.n	8001dac <ABSRotateHead+0x480>
											if(target_position==0){
 8001d82:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d102      	bne.n	8001d90 <ABSRotateHead+0x464>
											Motorspeed = 131;}
 8001d8a:	2383      	movs	r3, #131	@ 0x83
 8001d8c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001d8e:	e03f      	b.n	8001e10 <ABSRotateHead+0x4e4>
											else if(target_position==1){
 8001d90:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d102      	bne.n	8001d9e <ABSRotateHead+0x472>
												Motorspeed=131;
 8001d98:	2383      	movs	r3, #131	@ 0x83
 8001d9a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001d9c:	e038      	b.n	8001e10 <ABSRotateHead+0x4e4>
											}
											else if (target_position==2){
 8001d9e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d134      	bne.n	8001e10 <ABSRotateHead+0x4e4>
												Motorspeed=129;
 8001da6:	2381      	movs	r3, #129	@ 0x81
 8001da8:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001daa:	e031      	b.n	8001e10 <ABSRotateHead+0x4e4>
											}
										}
										else if (absolute_target_position-count==-10){
 8001dac:	f997 2010 	ldrsb.w	r2, [r7, #16]
 8001db0:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	f113 0f0a 	cmn.w	r3, #10
 8001dba:	d10d      	bne.n	8001dd8 <ABSRotateHead+0x4ac>
											if (target_position==0){
 8001dbc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d102      	bne.n	8001dca <ABSRotateHead+0x49e>
											Motorspeed=195;}
 8001dc4:	23c3      	movs	r3, #195	@ 0xc3
 8001dc6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001dc8:	e022      	b.n	8001e10 <ABSRotateHead+0x4e4>
											else if(target_position==1){
 8001dca:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d11e      	bne.n	8001e10 <ABSRotateHead+0x4e4>
												Motorspeed=180;
 8001dd2:	23b4      	movs	r3, #180	@ 0xb4
 8001dd4:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001dd6:	e01b      	b.n	8001e10 <ABSRotateHead+0x4e4>
											}
										}
										else if (absolute_target_position-count==-15){
 8001dd8:	f997 2010 	ldrsb.w	r2, [r7, #16]
 8001ddc:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	f113 0f0f 	cmn.w	r3, #15
 8001de6:	d113      	bne.n	8001e10 <ABSRotateHead+0x4e4>
											Motorspeed=210;
 8001de8:	23d2      	movs	r3, #210	@ 0xd2
 8001dea:	84bb      	strh	r3, [r7, #36]	@ 0x24
										}

					while(count < -absolute_target_position)
 8001dec:	e010      	b.n	8001e10 <ABSRotateHead+0x4e4>
					{
						count = SlotSensor_Update(side);
 8001dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f000 fbf2 	bl	80025dc <SlotSensor_Update>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001dfe:	4b30      	ldr	r3, [pc, #192]	@ (8001ec0 <ABSRotateHead+0x594>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2200      	movs	r2, #0
 8001e04:	63da      	str	r2, [r3, #60]	@ 0x3c
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, Motorspeed);
 8001e06:	4b2e      	ldr	r3, [pc, #184]	@ (8001ec0 <ABSRotateHead+0x594>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001e0e:	641a      	str	r2, [r3, #64]	@ 0x40
					while(count < -absolute_target_position)
 8001e10:	f997 2026 	ldrsb.w	r2, [r7, #38]	@ 0x26
 8001e14:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8001e18:	425b      	negs	r3, r3
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	dbe7      	blt.n	8001dee <ABSRotateHead+0x4c2>
					}

						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001e1e:	4b28      	ldr	r3, [pc, #160]	@ (8001ec0 <ABSRotateHead+0x594>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2200      	movs	r2, #0
 8001e24:	63da      	str	r2, [r3, #60]	@ 0x3c
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001e26:	4b26      	ldr	r3, [pc, #152]	@ (8001ec0 <ABSRotateHead+0x594>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	641a      	str	r2, [r3, #64]	@ 0x40
						HAL_Delay(200);
 8001e2e:	20c8      	movs	r0, #200	@ 0xc8
 8001e30:	f001 f804 	bl	8002e3c <HAL_Delay>
						GPIO_PinState current_state1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7); // Read pin state
 8001e34:	2180      	movs	r1, #128	@ 0x80
 8001e36:	4823      	ldr	r0, [pc, #140]	@ (8001ec4 <ABSRotateHead+0x598>)
 8001e38:	f001 fb74 	bl	8003524 <HAL_GPIO_ReadPin>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	f887 3020 	strb.w	r3, [r7, #32]
						GPIO_PinState last_state1=current_state1;
 8001e42:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e46:	73fb      	strb	r3, [r7, #15]
						if(current_state1==GPIO_PIN_RESET){
 8001e48:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d11c      	bne.n	8001e8a <ABSRotateHead+0x55e>
								while (current_state1 == last_state1){
 8001e50:	e00e      	b.n	8001e70 <ABSRotateHead+0x544>
										__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,100 );
 8001e52:	4b1b      	ldr	r3, [pc, #108]	@ (8001ec0 <ABSRotateHead+0x594>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2264      	movs	r2, #100	@ 0x64
 8001e58:	63da      	str	r2, [r3, #60]	@ 0x3c
										__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001e5a:	4b19      	ldr	r3, [pc, #100]	@ (8001ec0 <ABSRotateHead+0x594>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	641a      	str	r2, [r3, #64]	@ 0x40
										current_state1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7);
 8001e62:	2180      	movs	r1, #128	@ 0x80
 8001e64:	4817      	ldr	r0, [pc, #92]	@ (8001ec4 <ABSRotateHead+0x598>)
 8001e66:	f001 fb5d 	bl	8003524 <HAL_GPIO_ReadPin>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	f887 3020 	strb.w	r3, [r7, #32]
								while (current_state1 == last_state1){
 8001e70:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001e74:	7bfb      	ldrb	r3, [r7, #15]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d0eb      	beq.n	8001e52 <ABSRotateHead+0x526>
										}
								__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001e7a:	4b11      	ldr	r3, [pc, #68]	@ (8001ec0 <ABSRotateHead+0x594>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	63da      	str	r2, [r3, #60]	@ 0x3c
								__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001e82:	4b0f      	ldr	r3, [pc, #60]	@ (8001ec0 <ABSRotateHead+0x594>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2200      	movs	r2, #0
 8001e88:	641a      	str	r2, [r3, #64]	@ 0x40
				}

			}

				//Motor_Steer(absolute_target_position);
				if(target_position*5 != posABS_HeadA){posABS_HeadA = target_position*5;}
 8001e8a:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4413      	add	r3, r2
 8001e94:	4a0c      	ldr	r2, [pc, #48]	@ (8001ec8 <ABSRotateHead+0x59c>)
 8001e96:	f992 2000 	ldrsb.w	r2, [r2]
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d008      	beq.n	8001eb0 <ABSRotateHead+0x584>
 8001e9e:	79bb      	ldrb	r3, [r7, #6]
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	0092      	lsls	r2, r2, #2
 8001ea4:	4413      	add	r3, r2
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	b25a      	sxtb	r2, r3
 8001eaa:	4b07      	ldr	r3, [pc, #28]	@ (8001ec8 <ABSRotateHead+0x59c>)
 8001eac:	701a      	strb	r2, [r3, #0]
 8001eae:	e004      	b.n	8001eba <ABSRotateHead+0x58e>
				else{HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);}
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	2110      	movs	r1, #16
 8001eb4:	4805      	ldr	r0, [pc, #20]	@ (8001ecc <ABSRotateHead+0x5a0>)
 8001eb6:	f001 fb4d 	bl	8003554 <HAL_GPIO_WritePin>
			return 1;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e2ab      	b.n	8002416 <ABSRotateHead+0xaea>
 8001ebe:	bf00      	nop
 8001ec0:	20000158 	.word	0x20000158
 8001ec4:	48001000 	.word	0x48001000
 8001ec8:	200000e8 	.word	0x200000e8
 8001ecc:	48000400 	.word	0x48000400
	}


	else if(side == 1)
 8001ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	f040 829e 	bne.w	8002416 <ABSRotateHead+0xaea>
	{

		Motor_Init(side);
 8001eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff fb94 	bl	800160c <Motor_Init>

				GPIO_PinState current_state1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7); // Read pin state
 8001ee4:	2180      	movs	r1, #128	@ 0x80
 8001ee6:	48a2      	ldr	r0, [pc, #648]	@ (8002170 <ABSRotateHead+0x844>)
 8001ee8:	f001 fb1c 	bl	8003524 <HAL_GPIO_ReadPin>
 8001eec:	4603      	mov	r3, r0
 8001eee:	77fb      	strb	r3, [r7, #31]
				GPIO_PinState last_state1=current_state1;
 8001ef0:	7ffb      	ldrb	r3, [r7, #31]
 8001ef2:	75fb      	strb	r3, [r7, #23]
				if(current_state1==GPIO_PIN_RESET){
 8001ef4:	7ffb      	ldrb	r3, [r7, #31]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d11a      	bne.n	8001f30 <ABSRotateHead+0x604>
					while (current_state1 == last_state1){
 8001efa:	e00d      	b.n	8001f18 <ABSRotateHead+0x5ec>
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,0);
 8001efc:	4b9d      	ldr	r3, [pc, #628]	@ (8002174 <ABSRotateHead+0x848>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2200      	movs	r2, #0
 8001f02:	635a      	str	r2, [r3, #52]	@ 0x34
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 100);
 8001f04:	4b9b      	ldr	r3, [pc, #620]	@ (8002174 <ABSRotateHead+0x848>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2264      	movs	r2, #100	@ 0x64
 8001f0a:	639a      	str	r2, [r3, #56]	@ 0x38
						current_state1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7);
 8001f0c:	2180      	movs	r1, #128	@ 0x80
 8001f0e:	4898      	ldr	r0, [pc, #608]	@ (8002170 <ABSRotateHead+0x844>)
 8001f10:	f001 fb08 	bl	8003524 <HAL_GPIO_ReadPin>
 8001f14:	4603      	mov	r3, r0
 8001f16:	77fb      	strb	r3, [r7, #31]
					while (current_state1 == last_state1){
 8001f18:	7ffa      	ldrb	r2, [r7, #31]
 8001f1a:	7dfb      	ldrb	r3, [r7, #23]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d0ed      	beq.n	8001efc <ABSRotateHead+0x5d0>
					}

					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001f20:	4b94      	ldr	r3, [pc, #592]	@ (8002174 <ABSRotateHead+0x848>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2200      	movs	r2, #0
 8001f26:	635a      	str	r2, [r3, #52]	@ 0x34
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8001f28:	4b92      	ldr	r3, [pc, #584]	@ (8002174 <ABSRotateHead+0x848>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	639a      	str	r2, [r3, #56]	@ 0x38

				}
				HAL_Delay(200);
 8001f30:	20c8      	movs	r0, #200	@ 0xc8
 8001f32:	f000 ff83 	bl	8002e3c <HAL_Delay>
				int8_t absolute_target_position = target_position*5 - posABS_HeadB;
 8001f36:	79bb      	ldrb	r3, [r7, #6]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	0092      	lsls	r2, r2, #2
 8001f3c:	4413      	add	r3, r2
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	4b8d      	ldr	r3, [pc, #564]	@ (8002178 <ABSRotateHead+0x84c>)
 8001f42:	f993 3000 	ldrsb.w	r3, [r3]
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	75bb      	strb	r3, [r7, #22]
				SlotSensor_Init(side);
 8001f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f000 fb22 	bl	800259c <SlotSensor_Init>
				Motor_Init(side);
 8001f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff fb55 	bl	800160c <Motor_Init>
				int8_t count = 0 ;
 8001f62:	2300      	movs	r3, #0
 8001f64:	77bb      	strb	r3, [r7, #30]
				int16_t Motorspeed;



					if(TileONA)
 8001f66:	4b85      	ldr	r3, [pc, #532]	@ (800217c <ABSRotateHead+0x850>)
 8001f68:	f993 3000 	ldrsb.w	r3, [r3]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	f000 8122 	beq.w	80021b6 <ABSRotateHead+0x88a>
					{
						Motorspeed = MOTOR_SPEED_TILE_ON - 1 ;
 8001f72:	23f9      	movs	r3, #249	@ 0xf9
 8001f74:	83bb      	strh	r3, [r7, #28]
						if(absolute_target_position > 0)
 8001f76:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f340 8085 	ble.w	800208a <ABSRotateHead+0x75e>
						{
							if (absolute_target_position-count==5){
 8001f80:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8001f84:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b05      	cmp	r3, #5
 8001f8c:	d114      	bne.n	8001fb8 <ABSRotateHead+0x68c>
													if(target_position==1){
 8001f8e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d102      	bne.n	8001f9c <ABSRotateHead+0x670>
													Motorspeed = 220;}
 8001f96:	23dc      	movs	r3, #220	@ 0xdc
 8001f98:	83bb      	strh	r3, [r7, #28]
 8001f9a:	e03d      	b.n	8002018 <ABSRotateHead+0x6ec>
													else if(target_position==2){
 8001f9c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d102      	bne.n	8001faa <ABSRotateHead+0x67e>
														Motorspeed=215;
 8001fa4:	23d7      	movs	r3, #215	@ 0xd7
 8001fa6:	83bb      	strh	r3, [r7, #28]
 8001fa8:	e036      	b.n	8002018 <ABSRotateHead+0x6ec>
													}
													else if (target_position==3){
 8001faa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001fae:	2b03      	cmp	r3, #3
 8001fb0:	d132      	bne.n	8002018 <ABSRotateHead+0x6ec>
														Motorspeed=215;
 8001fb2:	23d7      	movs	r3, #215	@ 0xd7
 8001fb4:	83bb      	strh	r3, [r7, #28]
 8001fb6:	e02f      	b.n	8002018 <ABSRotateHead+0x6ec>
													}
												}
												else if (absolute_target_position-count==10){
 8001fb8:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8001fbc:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b0a      	cmp	r3, #10
 8001fc4:	d10d      	bne.n	8001fe2 <ABSRotateHead+0x6b6>
													if (target_position==2){
 8001fc6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d102      	bne.n	8001fd4 <ABSRotateHead+0x6a8>
													Motorspeed=250;}
 8001fce:	23fa      	movs	r3, #250	@ 0xfa
 8001fd0:	83bb      	strh	r3, [r7, #28]
 8001fd2:	e021      	b.n	8002018 <ABSRotateHead+0x6ec>
													else if(target_position==3){
 8001fd4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001fd8:	2b03      	cmp	r3, #3
 8001fda:	d11d      	bne.n	8002018 <ABSRotateHead+0x6ec>
														Motorspeed=250;
 8001fdc:	23fa      	movs	r3, #250	@ 0xfa
 8001fde:	83bb      	strh	r3, [r7, #28]
 8001fe0:	e01a      	b.n	8002018 <ABSRotateHead+0x6ec>
													}
												}
												else if (absolute_target_position-count==15){
 8001fe2:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8001fe6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b0f      	cmp	r3, #15
 8001fee:	d113      	bne.n	8002018 <ABSRotateHead+0x6ec>
													Motorspeed=258;
 8001ff0:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001ff4:	83bb      	strh	r3, [r7, #28]
												}

							while(count < absolute_target_position)
 8001ff6:	e00f      	b.n	8002018 <ABSRotateHead+0x6ec>
							{	  count = SlotSensor_Update(side);
 8001ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f000 faed 	bl	80025dc <SlotSensor_Update>
 8002002:	4603      	mov	r3, r0
 8002004:	77bb      	strb	r3, [r7, #30]
								__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, Motorspeed);
 8002006:	4b5b      	ldr	r3, [pc, #364]	@ (8002174 <ABSRotateHead+0x848>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800200e:	635a      	str	r2, [r3, #52]	@ 0x34
								__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8002010:	4b58      	ldr	r3, [pc, #352]	@ (8002174 <ABSRotateHead+0x848>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2200      	movs	r2, #0
 8002016:	639a      	str	r2, [r3, #56]	@ 0x38
							while(count < absolute_target_position)
 8002018:	f997 201e 	ldrsb.w	r2, [r7, #30]
 800201c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002020:	429a      	cmp	r2, r3
 8002022:	dbe9      	blt.n	8001ff8 <ABSRotateHead+0x6cc>
							}

							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8002024:	4b53      	ldr	r3, [pc, #332]	@ (8002174 <ABSRotateHead+0x848>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2200      	movs	r2, #0
 800202a:	635a      	str	r2, [r3, #52]	@ 0x34
							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 800202c:	4b51      	ldr	r3, [pc, #324]	@ (8002174 <ABSRotateHead+0x848>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2200      	movs	r2, #0
 8002032:	639a      	str	r2, [r3, #56]	@ 0x38
							HAL_Delay(200);
 8002034:	20c8      	movs	r0, #200	@ 0xc8
 8002036:	f000 ff01 	bl	8002e3c <HAL_Delay>
							GPIO_PinState current_state1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7); // Read pin state
 800203a:	2180      	movs	r1, #128	@ 0x80
 800203c:	484c      	ldr	r0, [pc, #304]	@ (8002170 <ABSRotateHead+0x844>)
 800203e:	f001 fa71 	bl	8003524 <HAL_GPIO_ReadPin>
 8002042:	4603      	mov	r3, r0
 8002044:	76fb      	strb	r3, [r7, #27]
							GPIO_PinState last_state1=current_state1;
 8002046:	7efb      	ldrb	r3, [r7, #27]
 8002048:	74bb      	strb	r3, [r7, #18]
							if(current_state1==GPIO_PIN_RESET){
 800204a:	7efb      	ldrb	r3, [r7, #27]
 800204c:	2b00      	cmp	r3, #0
 800204e:	f040 81c8 	bne.w	80023e2 <ABSRotateHead+0xab6>
									while (current_state1 == last_state1){
 8002052:	e00d      	b.n	8002070 <ABSRotateHead+0x744>
											__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,0 );
 8002054:	4b47      	ldr	r3, [pc, #284]	@ (8002174 <ABSRotateHead+0x848>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2200      	movs	r2, #0
 800205a:	635a      	str	r2, [r3, #52]	@ 0x34
											__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 100);
 800205c:	4b45      	ldr	r3, [pc, #276]	@ (8002174 <ABSRotateHead+0x848>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2264      	movs	r2, #100	@ 0x64
 8002062:	639a      	str	r2, [r3, #56]	@ 0x38
											current_state1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7);
 8002064:	2180      	movs	r1, #128	@ 0x80
 8002066:	4842      	ldr	r0, [pc, #264]	@ (8002170 <ABSRotateHead+0x844>)
 8002068:	f001 fa5c 	bl	8003524 <HAL_GPIO_ReadPin>
 800206c:	4603      	mov	r3, r0
 800206e:	76fb      	strb	r3, [r7, #27]
									while (current_state1 == last_state1){
 8002070:	7efa      	ldrb	r2, [r7, #27]
 8002072:	7cbb      	ldrb	r3, [r7, #18]
 8002074:	429a      	cmp	r2, r3
 8002076:	d0ed      	beq.n	8002054 <ABSRotateHead+0x728>
											}

								__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8002078:	4b3e      	ldr	r3, [pc, #248]	@ (8002174 <ABSRotateHead+0x848>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2200      	movs	r2, #0
 800207e:	635a      	str	r2, [r3, #52]	@ 0x34
								__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8002080:	4b3c      	ldr	r3, [pc, #240]	@ (8002174 <ABSRotateHead+0x848>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2200      	movs	r2, #0
 8002086:	639a      	str	r2, [r3, #56]	@ 0x38
 8002088:	e1ab      	b.n	80023e2 <ABSRotateHead+0xab6>

						}
						}
						else if(absolute_target_position< 0)
 800208a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800208e:	2b00      	cmp	r3, #0
 8002090:	f280 81a7 	bge.w	80023e2 <ABSRotateHead+0xab6>
						{
							if (absolute_target_position-count==-5){
 8002094:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8002098:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	f113 0f05 	cmn.w	r3, #5
 80020a2:	d114      	bne.n	80020ce <ABSRotateHead+0x7a2>
									if(target_position==0){
 80020a4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d102      	bne.n	80020b2 <ABSRotateHead+0x786>
										Motorspeed = 220;}
 80020ac:	23dc      	movs	r3, #220	@ 0xdc
 80020ae:	83bb      	strh	r3, [r7, #28]
 80020b0:	e03f      	b.n	8002132 <ABSRotateHead+0x806>
									else if(target_position==1){
 80020b2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d102      	bne.n	80020c0 <ABSRotateHead+0x794>
											Motorspeed=210;
 80020ba:	23d2      	movs	r3, #210	@ 0xd2
 80020bc:	83bb      	strh	r3, [r7, #28]
 80020be:	e038      	b.n	8002132 <ABSRotateHead+0x806>
											}
									else if (target_position==2){
 80020c0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d134      	bne.n	8002132 <ABSRotateHead+0x806>
											Motorspeed=210;
 80020c8:	23d2      	movs	r3, #210	@ 0xd2
 80020ca:	83bb      	strh	r3, [r7, #28]
 80020cc:	e031      	b.n	8002132 <ABSRotateHead+0x806>
											}
											}
							else if (absolute_target_position-count==-10){
 80020ce:	f997 2016 	ldrsb.w	r2, [r7, #22]
 80020d2:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	f113 0f0a 	cmn.w	r3, #10
 80020dc:	d10e      	bne.n	80020fc <ABSRotateHead+0x7d0>
									if (target_position==0){
 80020de:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d102      	bne.n	80020ec <ABSRotateHead+0x7c0>
										Motorspeed=255;}
 80020e6:	23ff      	movs	r3, #255	@ 0xff
 80020e8:	83bb      	strh	r3, [r7, #28]
 80020ea:	e022      	b.n	8002132 <ABSRotateHead+0x806>
									else if(target_position==1){
 80020ec:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d11e      	bne.n	8002132 <ABSRotateHead+0x806>
												Motorspeed=258;
 80020f4:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80020f8:	83bb      	strh	r3, [r7, #28]
 80020fa:	e01a      	b.n	8002132 <ABSRotateHead+0x806>
																	}
																}
									else if (absolute_target_position-count==-15){
 80020fc:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8002100:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	f113 0f0f 	cmn.w	r3, #15
 800210a:	d112      	bne.n	8002132 <ABSRotateHead+0x806>
											Motorspeed=255;
 800210c:	23ff      	movs	r3, #255	@ 0xff
 800210e:	83bb      	strh	r3, [r7, #28]
									}

							while(count < -absolute_target_position)
 8002110:	e00f      	b.n	8002132 <ABSRotateHead+0x806>
									{	  count = SlotSensor_Update(side);
 8002112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002116:	4618      	mov	r0, r3
 8002118:	f000 fa60 	bl	80025dc <SlotSensor_Update>
 800211c:	4603      	mov	r3, r0
 800211e:	77bb      	strb	r3, [r7, #30]
										__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8002120:	4b14      	ldr	r3, [pc, #80]	@ (8002174 <ABSRotateHead+0x848>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2200      	movs	r2, #0
 8002126:	635a      	str	r2, [r3, #52]	@ 0x34
										__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, Motorspeed);
 8002128:	4b12      	ldr	r3, [pc, #72]	@ (8002174 <ABSRotateHead+0x848>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002130:	639a      	str	r2, [r3, #56]	@ 0x38
							while(count < -absolute_target_position)
 8002132:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8002136:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800213a:	425b      	negs	r3, r3
 800213c:	429a      	cmp	r2, r3
 800213e:	dbe8      	blt.n	8002112 <ABSRotateHead+0x7e6>
									}

							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8002140:	4b0c      	ldr	r3, [pc, #48]	@ (8002174 <ABSRotateHead+0x848>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2200      	movs	r2, #0
 8002146:	635a      	str	r2, [r3, #52]	@ 0x34
							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8002148:	4b0a      	ldr	r3, [pc, #40]	@ (8002174 <ABSRotateHead+0x848>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2200      	movs	r2, #0
 800214e:	639a      	str	r2, [r3, #56]	@ 0x38
							HAL_Delay(200);
 8002150:	20c8      	movs	r0, #200	@ 0xc8
 8002152:	f000 fe73 	bl	8002e3c <HAL_Delay>
							GPIO_PinState current_state1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7); // Read pin state
 8002156:	2180      	movs	r1, #128	@ 0x80
 8002158:	4805      	ldr	r0, [pc, #20]	@ (8002170 <ABSRotateHead+0x844>)
 800215a:	f001 f9e3 	bl	8003524 <HAL_GPIO_ReadPin>
 800215e:	4603      	mov	r3, r0
 8002160:	76bb      	strb	r3, [r7, #26]
							GPIO_PinState last_state1=current_state1;
 8002162:	7ebb      	ldrb	r3, [r7, #26]
 8002164:	74fb      	strb	r3, [r7, #19]
							if(current_state1==GPIO_PIN_RESET){
 8002166:	7ebb      	ldrb	r3, [r7, #26]
 8002168:	2b00      	cmp	r3, #0
 800216a:	f040 813a 	bne.w	80023e2 <ABSRotateHead+0xab6>
									while (current_state1 == last_state1){
 800216e:	e015      	b.n	800219c <ABSRotateHead+0x870>
 8002170:	48001000 	.word	0x48001000
 8002174:	20000158 	.word	0x20000158
 8002178:	200000e9 	.word	0x200000e9
 800217c:	200000ea 	.word	0x200000ea
											__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,100 );
 8002180:	4ba7      	ldr	r3, [pc, #668]	@ (8002420 <ABSRotateHead+0xaf4>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2264      	movs	r2, #100	@ 0x64
 8002186:	635a      	str	r2, [r3, #52]	@ 0x34
											__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8002188:	4ba5      	ldr	r3, [pc, #660]	@ (8002420 <ABSRotateHead+0xaf4>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2200      	movs	r2, #0
 800218e:	639a      	str	r2, [r3, #56]	@ 0x38
											current_state1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7);
 8002190:	2180      	movs	r1, #128	@ 0x80
 8002192:	48a4      	ldr	r0, [pc, #656]	@ (8002424 <ABSRotateHead+0xaf8>)
 8002194:	f001 f9c6 	bl	8003524 <HAL_GPIO_ReadPin>
 8002198:	4603      	mov	r3, r0
 800219a:	76bb      	strb	r3, [r7, #26]
									while (current_state1 == last_state1){
 800219c:	7eba      	ldrb	r2, [r7, #26]
 800219e:	7cfb      	ldrb	r3, [r7, #19]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d0ed      	beq.n	8002180 <ABSRotateHead+0x854>
											}


										__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80021a4:	4b9e      	ldr	r3, [pc, #632]	@ (8002420 <ABSRotateHead+0xaf4>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2200      	movs	r2, #0
 80021aa:	635a      	str	r2, [r3, #52]	@ 0x34
										__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80021ac:	4b9c      	ldr	r3, [pc, #624]	@ (8002420 <ABSRotateHead+0xaf4>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2200      	movs	r2, #0
 80021b2:	639a      	str	r2, [r3, #56]	@ 0x38
 80021b4:	e115      	b.n	80023e2 <ABSRotateHead+0xab6>

					}
					else
					{

						Motorspeed = MOTOR_SPEED_TILE_OFF -1 ;
 80021b6:	2372      	movs	r3, #114	@ 0x72
 80021b8:	83bb      	strh	r3, [r7, #28]
						if(absolute_target_position > 0){
 80021ba:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f340 8084 	ble.w	80022cc <ABSRotateHead+0x9a0>
								if (absolute_target_position-count==5){
 80021c4:	f997 2016 	ldrsb.w	r2, [r7, #22]
 80021c8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b05      	cmp	r3, #5
 80021d0:	d114      	bne.n	80021fc <ABSRotateHead+0x8d0>
									if(target_position==1){
 80021d2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d102      	bne.n	80021e0 <ABSRotateHead+0x8b4>
									Motorspeed = 120;}
 80021da:	2378      	movs	r3, #120	@ 0x78
 80021dc:	83bb      	strh	r3, [r7, #28]
 80021de:	e03c      	b.n	800225a <ABSRotateHead+0x92e>
									else if(target_position==2){
 80021e0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d102      	bne.n	80021ee <ABSRotateHead+0x8c2>
										Motorspeed=145;
 80021e8:	2391      	movs	r3, #145	@ 0x91
 80021ea:	83bb      	strh	r3, [r7, #28]
 80021ec:	e035      	b.n	800225a <ABSRotateHead+0x92e>
									}
									else if (target_position==3){
 80021ee:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80021f2:	2b03      	cmp	r3, #3
 80021f4:	d131      	bne.n	800225a <ABSRotateHead+0x92e>
										Motorspeed=145;
 80021f6:	2391      	movs	r3, #145	@ 0x91
 80021f8:	83bb      	strh	r3, [r7, #28]
 80021fa:	e02e      	b.n	800225a <ABSRotateHead+0x92e>
									}
								}
								else if (absolute_target_position-count==10){
 80021fc:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8002200:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b0a      	cmp	r3, #10
 8002208:	d10d      	bne.n	8002226 <ABSRotateHead+0x8fa>
									if (target_position==2){
 800220a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800220e:	2b02      	cmp	r3, #2
 8002210:	d102      	bne.n	8002218 <ABSRotateHead+0x8ec>
									Motorspeed=115;}
 8002212:	2373      	movs	r3, #115	@ 0x73
 8002214:	83bb      	strh	r3, [r7, #28]
 8002216:	e020      	b.n	800225a <ABSRotateHead+0x92e>
									else if(target_position==3){
 8002218:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800221c:	2b03      	cmp	r3, #3
 800221e:	d11c      	bne.n	800225a <ABSRotateHead+0x92e>
										Motorspeed=170;
 8002220:	23aa      	movs	r3, #170	@ 0xaa
 8002222:	83bb      	strh	r3, [r7, #28]
 8002224:	e019      	b.n	800225a <ABSRotateHead+0x92e>
									}
								}
								else if (absolute_target_position-count==15){
 8002226:	f997 2016 	ldrsb.w	r2, [r7, #22]
 800222a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b0f      	cmp	r3, #15
 8002232:	d112      	bne.n	800225a <ABSRotateHead+0x92e>
									Motorspeed=180;
 8002234:	23b4      	movs	r3, #180	@ 0xb4
 8002236:	83bb      	strh	r3, [r7, #28]
								}
									while(count < absolute_target_position)
 8002238:	e00f      	b.n	800225a <ABSRotateHead+0x92e>
									{
										count = SlotSensor_Update(side);
 800223a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223e:	4618      	mov	r0, r3
 8002240:	f000 f9cc 	bl	80025dc <SlotSensor_Update>
 8002244:	4603      	mov	r3, r0
 8002246:	77bb      	strb	r3, [r7, #30]
										__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, Motorspeed);
 8002248:	4b75      	ldr	r3, [pc, #468]	@ (8002420 <ABSRotateHead+0xaf4>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002250:	635a      	str	r2, [r3, #52]	@ 0x34
										__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8002252:	4b73      	ldr	r3, [pc, #460]	@ (8002420 <ABSRotateHead+0xaf4>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2200      	movs	r2, #0
 8002258:	639a      	str	r2, [r3, #56]	@ 0x38
									while(count < absolute_target_position)
 800225a:	f997 201e 	ldrsb.w	r2, [r7, #30]
 800225e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002262:	429a      	cmp	r2, r3
 8002264:	dbe9      	blt.n	800223a <ABSRotateHead+0x90e>
									}

								__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8002266:	4b6e      	ldr	r3, [pc, #440]	@ (8002420 <ABSRotateHead+0xaf4>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2200      	movs	r2, #0
 800226c:	635a      	str	r2, [r3, #52]	@ 0x34
								__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 800226e:	4b6c      	ldr	r3, [pc, #432]	@ (8002420 <ABSRotateHead+0xaf4>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2200      	movs	r2, #0
 8002274:	639a      	str	r2, [r3, #56]	@ 0x38
								HAL_Delay(200);
 8002276:	20c8      	movs	r0, #200	@ 0xc8
 8002278:	f000 fde0 	bl	8002e3c <HAL_Delay>

								GPIO_PinState current_state1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7); // Read pin state
 800227c:	2180      	movs	r1, #128	@ 0x80
 800227e:	4869      	ldr	r0, [pc, #420]	@ (8002424 <ABSRotateHead+0xaf8>)
 8002280:	f001 f950 	bl	8003524 <HAL_GPIO_ReadPin>
 8002284:	4603      	mov	r3, r0
 8002286:	767b      	strb	r3, [r7, #25]
								GPIO_PinState last_state1=current_state1;
 8002288:	7e7b      	ldrb	r3, [r7, #25]
 800228a:	753b      	strb	r3, [r7, #20]
								if(current_state1==GPIO_PIN_RESET){
 800228c:	7e7b      	ldrb	r3, [r7, #25]
 800228e:	2b00      	cmp	r3, #0
 8002290:	f040 80a7 	bne.w	80023e2 <ABSRotateHead+0xab6>
									while (current_state1 == last_state1){
 8002294:	e00d      	b.n	80022b2 <ABSRotateHead+0x986>
										__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,0 );
 8002296:	4b62      	ldr	r3, [pc, #392]	@ (8002420 <ABSRotateHead+0xaf4>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2200      	movs	r2, #0
 800229c:	635a      	str	r2, [r3, #52]	@ 0x34
										__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 100);
 800229e:	4b60      	ldr	r3, [pc, #384]	@ (8002420 <ABSRotateHead+0xaf4>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2264      	movs	r2, #100	@ 0x64
 80022a4:	639a      	str	r2, [r3, #56]	@ 0x38
										current_state1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7);
 80022a6:	2180      	movs	r1, #128	@ 0x80
 80022a8:	485e      	ldr	r0, [pc, #376]	@ (8002424 <ABSRotateHead+0xaf8>)
 80022aa:	f001 f93b 	bl	8003524 <HAL_GPIO_ReadPin>
 80022ae:	4603      	mov	r3, r0
 80022b0:	767b      	strb	r3, [r7, #25]
									while (current_state1 == last_state1){
 80022b2:	7e7a      	ldrb	r2, [r7, #25]
 80022b4:	7d3b      	ldrb	r3, [r7, #20]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d0ed      	beq.n	8002296 <ABSRotateHead+0x96a>

								}
								__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80022ba:	4b59      	ldr	r3, [pc, #356]	@ (8002420 <ABSRotateHead+0xaf4>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2200      	movs	r2, #0
 80022c0:	635a      	str	r2, [r3, #52]	@ 0x34
								__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80022c2:	4b57      	ldr	r3, [pc, #348]	@ (8002420 <ABSRotateHead+0xaf4>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2200      	movs	r2, #0
 80022c8:	639a      	str	r2, [r3, #56]	@ 0x38
 80022ca:	e08a      	b.n	80023e2 <ABSRotateHead+0xab6>

								}
								}
						else if(absolute_target_position< 0)
 80022cc:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f280 8086 	bge.w	80023e2 <ABSRotateHead+0xab6>
						{
							if (absolute_target_position-count==-5){
 80022d6:	f997 2016 	ldrsb.w	r2, [r7, #22]
 80022da:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	f113 0f05 	cmn.w	r3, #5
 80022e4:	d114      	bne.n	8002310 <ABSRotateHead+0x9e4>
													if(target_position==0){
 80022e6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d102      	bne.n	80022f4 <ABSRotateHead+0x9c8>
													Motorspeed = 131;}
 80022ee:	2383      	movs	r3, #131	@ 0x83
 80022f0:	83bb      	strh	r3, [r7, #28]
 80022f2:	e03e      	b.n	8002372 <ABSRotateHead+0xa46>
													else if(target_position==1){
 80022f4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d102      	bne.n	8002302 <ABSRotateHead+0x9d6>
														Motorspeed=131;
 80022fc:	2383      	movs	r3, #131	@ 0x83
 80022fe:	83bb      	strh	r3, [r7, #28]
 8002300:	e037      	b.n	8002372 <ABSRotateHead+0xa46>
													}
													else if (target_position==2){
 8002302:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002306:	2b02      	cmp	r3, #2
 8002308:	d133      	bne.n	8002372 <ABSRotateHead+0xa46>
														Motorspeed=129;
 800230a:	2381      	movs	r3, #129	@ 0x81
 800230c:	83bb      	strh	r3, [r7, #28]
 800230e:	e030      	b.n	8002372 <ABSRotateHead+0xa46>
													}
												}
												else if (absolute_target_position-count==-10){
 8002310:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8002314:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	f113 0f0a 	cmn.w	r3, #10
 800231e:	d10d      	bne.n	800233c <ABSRotateHead+0xa10>
													if (target_position==0){
 8002320:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d102      	bne.n	800232e <ABSRotateHead+0xa02>
													Motorspeed=195;}
 8002328:	23c3      	movs	r3, #195	@ 0xc3
 800232a:	83bb      	strh	r3, [r7, #28]
 800232c:	e021      	b.n	8002372 <ABSRotateHead+0xa46>
													else if(target_position==1){
 800232e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d11d      	bne.n	8002372 <ABSRotateHead+0xa46>
														Motorspeed=180;
 8002336:	23b4      	movs	r3, #180	@ 0xb4
 8002338:	83bb      	strh	r3, [r7, #28]
 800233a:	e01a      	b.n	8002372 <ABSRotateHead+0xa46>
													}
												}
												else if (absolute_target_position-count==-15){
 800233c:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8002340:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	f113 0f0f 	cmn.w	r3, #15
 800234a:	d112      	bne.n	8002372 <ABSRotateHead+0xa46>
													Motorspeed=210;
 800234c:	23d2      	movs	r3, #210	@ 0xd2
 800234e:	83bb      	strh	r3, [r7, #28]
												}

							while(count < -absolute_target_position)
 8002350:	e00f      	b.n	8002372 <ABSRotateHead+0xa46>
							{
								count = SlotSensor_Update(side);
 8002352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002356:	4618      	mov	r0, r3
 8002358:	f000 f940 	bl	80025dc <SlotSensor_Update>
 800235c:	4603      	mov	r3, r0
 800235e:	77bb      	strb	r3, [r7, #30]
								__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8002360:	4b2f      	ldr	r3, [pc, #188]	@ (8002420 <ABSRotateHead+0xaf4>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2200      	movs	r2, #0
 8002366:	635a      	str	r2, [r3, #52]	@ 0x34
								__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, Motorspeed);
 8002368:	4b2d      	ldr	r3, [pc, #180]	@ (8002420 <ABSRotateHead+0xaf4>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002370:	639a      	str	r2, [r3, #56]	@ 0x38
							while(count < -absolute_target_position)
 8002372:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8002376:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800237a:	425b      	negs	r3, r3
 800237c:	429a      	cmp	r2, r3
 800237e:	dbe8      	blt.n	8002352 <ABSRotateHead+0xa26>
							}

								__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8002380:	4b27      	ldr	r3, [pc, #156]	@ (8002420 <ABSRotateHead+0xaf4>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2200      	movs	r2, #0
 8002386:	635a      	str	r2, [r3, #52]	@ 0x34
								__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8002388:	4b25      	ldr	r3, [pc, #148]	@ (8002420 <ABSRotateHead+0xaf4>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2200      	movs	r2, #0
 800238e:	639a      	str	r2, [r3, #56]	@ 0x38
								HAL_Delay(200);
 8002390:	20c8      	movs	r0, #200	@ 0xc8
 8002392:	f000 fd53 	bl	8002e3c <HAL_Delay>
								GPIO_PinState current_state1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7); // Read pin state
 8002396:	2180      	movs	r1, #128	@ 0x80
 8002398:	4822      	ldr	r0, [pc, #136]	@ (8002424 <ABSRotateHead+0xaf8>)
 800239a:	f001 f8c3 	bl	8003524 <HAL_GPIO_ReadPin>
 800239e:	4603      	mov	r3, r0
 80023a0:	763b      	strb	r3, [r7, #24]
								GPIO_PinState last_state1=current_state1;
 80023a2:	7e3b      	ldrb	r3, [r7, #24]
 80023a4:	757b      	strb	r3, [r7, #21]
								if(current_state1==GPIO_PIN_RESET){
 80023a6:	7e3b      	ldrb	r3, [r7, #24]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d11a      	bne.n	80023e2 <ABSRotateHead+0xab6>
										while (current_state1 == last_state1){
 80023ac:	e00d      	b.n	80023ca <ABSRotateHead+0xa9e>
												__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,100 );
 80023ae:	4b1c      	ldr	r3, [pc, #112]	@ (8002420 <ABSRotateHead+0xaf4>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2264      	movs	r2, #100	@ 0x64
 80023b4:	635a      	str	r2, [r3, #52]	@ 0x34
												__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80023b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002420 <ABSRotateHead+0xaf4>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2200      	movs	r2, #0
 80023bc:	639a      	str	r2, [r3, #56]	@ 0x38
												current_state1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7);
 80023be:	2180      	movs	r1, #128	@ 0x80
 80023c0:	4818      	ldr	r0, [pc, #96]	@ (8002424 <ABSRotateHead+0xaf8>)
 80023c2:	f001 f8af 	bl	8003524 <HAL_GPIO_ReadPin>
 80023c6:	4603      	mov	r3, r0
 80023c8:	763b      	strb	r3, [r7, #24]
										while (current_state1 == last_state1){
 80023ca:	7e3a      	ldrb	r2, [r7, #24]
 80023cc:	7d7b      	ldrb	r3, [r7, #21]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d0ed      	beq.n	80023ae <ABSRotateHead+0xa82>
												}
										__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80023d2:	4b13      	ldr	r3, [pc, #76]	@ (8002420 <ABSRotateHead+0xaf4>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2200      	movs	r2, #0
 80023d8:	635a      	str	r2, [r3, #52]	@ 0x34
										__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80023da:	4b11      	ldr	r3, [pc, #68]	@ (8002420 <ABSRotateHead+0xaf4>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2200      	movs	r2, #0
 80023e0:	639a      	str	r2, [r3, #56]	@ 0x38
						}

					}

						//Motor_Steer(absolute_target_position);
						if(target_position*5 != posABS_HeadB){posABS_HeadB = target_position*5;}
 80023e2:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80023e6:	4613      	mov	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	4413      	add	r3, r2
 80023ec:	4a0e      	ldr	r2, [pc, #56]	@ (8002428 <ABSRotateHead+0xafc>)
 80023ee:	f992 2000 	ldrsb.w	r2, [r2]
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d008      	beq.n	8002408 <ABSRotateHead+0xadc>
 80023f6:	79bb      	ldrb	r3, [r7, #6]
 80023f8:	461a      	mov	r2, r3
 80023fa:	0092      	lsls	r2, r2, #2
 80023fc:	4413      	add	r3, r2
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	b25a      	sxtb	r2, r3
 8002402:	4b09      	ldr	r3, [pc, #36]	@ (8002428 <ABSRotateHead+0xafc>)
 8002404:	701a      	strb	r2, [r3, #0]
 8002406:	e004      	b.n	8002412 <ABSRotateHead+0xae6>
						else{HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);}
 8002408:	2200      	movs	r2, #0
 800240a:	2110      	movs	r1, #16
 800240c:	4807      	ldr	r0, [pc, #28]	@ (800242c <ABSRotateHead+0xb00>)
 800240e:	f001 f8a1 	bl	8003554 <HAL_GPIO_WritePin>
					return 1;
 8002412:	2301      	movs	r3, #1
 8002414:	e7ff      	b.n	8002416 <ABSRotateHead+0xaea>

	}


}
 8002416:	4618      	mov	r0, r3
 8002418:	3728      	adds	r7, #40	@ 0x28
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	20000158 	.word	0x20000158
 8002424:	48001000 	.word	0x48001000
 8002428:	200000e9 	.word	0x200000e9
 800242c:	48000400 	.word	0x48000400

08002430 <HeadBase>:
void HeadBase(int8_t side)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	4603      	mov	r3, r0
 8002438:	71fb      	strb	r3, [r7, #7]

	if(side == 0)
 800243a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d14d      	bne.n	80024de <HeadBase+0xae>
	{

		int16_t BaseSpeed = 250;
 8002442:	23fa      	movs	r3, #250	@ 0xfa
 8002444:	81bb      	strh	r3, [r7, #12]
		Motor_Init(side);
 8002446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff f8de 	bl	800160c <Motor_Init>
		//uint8_t pinstate1;
		pinstate1 = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8);
 8002450:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002454:	484c      	ldr	r0, [pc, #304]	@ (8002588 <HeadBase+0x158>)
 8002456:	f001 f865 	bl	8003524 <HAL_GPIO_ReadPin>
 800245a:	4603      	mov	r3, r0
 800245c:	461a      	mov	r2, r3
 800245e:	4b4b      	ldr	r3, [pc, #300]	@ (800258c <HeadBase+0x15c>)
 8002460:	701a      	strb	r2, [r3, #0]

		while(pinstate1)
 8002462:	e022      	b.n	80024aa <HeadBase+0x7a>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8002464:	4b4a      	ldr	r3, [pc, #296]	@ (8002590 <HeadBase+0x160>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2200      	movs	r2, #0
 800246a:	63da      	str	r2, [r3, #60]	@ 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, BaseSpeed-1);
 800246c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002470:	1e5a      	subs	r2, r3, #1
 8002472:	4b47      	ldr	r3, [pc, #284]	@ (8002590 <HeadBase+0x160>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	641a      	str	r2, [r3, #64]	@ 0x40

			pinstate1 = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8);
 8002478:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800247c:	4842      	ldr	r0, [pc, #264]	@ (8002588 <HeadBase+0x158>)
 800247e:	f001 f851 	bl	8003524 <HAL_GPIO_ReadPin>
 8002482:	4603      	mov	r3, r0
 8002484:	461a      	mov	r2, r3
 8002486:	4b41      	ldr	r3, [pc, #260]	@ (800258c <HeadBase+0x15c>)
 8002488:	701a      	strb	r2, [r3, #0]
			 if (pinstate1==0){
 800248a:	4b40      	ldr	r3, [pc, #256]	@ (800258c <HeadBase+0x15c>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10b      	bne.n	80024aa <HeadBase+0x7a>
				 HAL_Delay(200);
 8002492:	20c8      	movs	r0, #200	@ 0xc8
 8002494:	f000 fcd2 	bl	8002e3c <HAL_Delay>
				 pinstate1 = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8);
 8002498:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800249c:	483a      	ldr	r0, [pc, #232]	@ (8002588 <HeadBase+0x158>)
 800249e:	f001 f841 	bl	8003524 <HAL_GPIO_ReadPin>
 80024a2:	4603      	mov	r3, r0
 80024a4:	461a      	mov	r2, r3
 80024a6:	4b39      	ldr	r3, [pc, #228]	@ (800258c <HeadBase+0x15c>)
 80024a8:	701a      	strb	r2, [r3, #0]
		while(pinstate1)
 80024aa:	4b38      	ldr	r3, [pc, #224]	@ (800258c <HeadBase+0x15c>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1d8      	bne.n	8002464 <HeadBase+0x34>
			 }

		}

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80024b2:	4b37      	ldr	r3, [pc, #220]	@ (8002590 <HeadBase+0x160>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2200      	movs	r2, #0
 80024b8:	63da      	str	r2, [r3, #60]	@ 0x3c
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 80024ba:	4b35      	ldr	r3, [pc, #212]	@ (8002590 <HeadBase+0x160>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2200      	movs	r2, #0
 80024c0:	641a      	str	r2, [r3, #64]	@ 0x40
		HAL_Delay(2000);
 80024c2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80024c6:	f000 fcb9 	bl	8002e3c <HAL_Delay>
		Motor_Steer(side,3);
 80024ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ce:	2103      	movs	r1, #3
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff f8cb 	bl	800166c <Motor_Steer>
		posABS_HeadA=0;
 80024d6:	4b2f      	ldr	r3, [pc, #188]	@ (8002594 <HeadBase+0x164>)
 80024d8:	2200      	movs	r2, #0
 80024da:	701a      	strb	r2, [r3, #0]
				HAL_Delay(2000);
				Motor_Steer(side,3);
				posABS_HeadB=0;
	}

}
 80024dc:	e050      	b.n	8002580 <HeadBase+0x150>
	else if(side == 1)
 80024de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d14c      	bne.n	8002580 <HeadBase+0x150>
		int16_t BaseSpeed = 250;
 80024e6:	23fa      	movs	r3, #250	@ 0xfa
 80024e8:	81fb      	strh	r3, [r7, #14]
				Motor_Init(side);
 80024ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff f88c 	bl	800160c <Motor_Init>
				pinstate1 = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8);
 80024f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80024f8:	4823      	ldr	r0, [pc, #140]	@ (8002588 <HeadBase+0x158>)
 80024fa:	f001 f813 	bl	8003524 <HAL_GPIO_ReadPin>
 80024fe:	4603      	mov	r3, r0
 8002500:	461a      	mov	r2, r3
 8002502:	4b22      	ldr	r3, [pc, #136]	@ (800258c <HeadBase+0x15c>)
 8002504:	701a      	strb	r2, [r3, #0]
				while(pinstate1)
 8002506:	e022      	b.n	800254e <HeadBase+0x11e>
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8002508:	4b21      	ldr	r3, [pc, #132]	@ (8002590 <HeadBase+0x160>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2200      	movs	r2, #0
 800250e:	635a      	str	r2, [r3, #52]	@ 0x34
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, BaseSpeed-1);
 8002510:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002514:	1e5a      	subs	r2, r3, #1
 8002516:	4b1e      	ldr	r3, [pc, #120]	@ (8002590 <HeadBase+0x160>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	639a      	str	r2, [r3, #56]	@ 0x38
					pinstate1 = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8);
 800251c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002520:	4819      	ldr	r0, [pc, #100]	@ (8002588 <HeadBase+0x158>)
 8002522:	f000 ffff 	bl	8003524 <HAL_GPIO_ReadPin>
 8002526:	4603      	mov	r3, r0
 8002528:	461a      	mov	r2, r3
 800252a:	4b18      	ldr	r3, [pc, #96]	@ (800258c <HeadBase+0x15c>)
 800252c:	701a      	strb	r2, [r3, #0]
					 if (pinstate1==0){
 800252e:	4b17      	ldr	r3, [pc, #92]	@ (800258c <HeadBase+0x15c>)
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10b      	bne.n	800254e <HeadBase+0x11e>
						 HAL_Delay(200);
 8002536:	20c8      	movs	r0, #200	@ 0xc8
 8002538:	f000 fc80 	bl	8002e3c <HAL_Delay>
						 pinstate1 = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8);
 800253c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002540:	4811      	ldr	r0, [pc, #68]	@ (8002588 <HeadBase+0x158>)
 8002542:	f000 ffef 	bl	8003524 <HAL_GPIO_ReadPin>
 8002546:	4603      	mov	r3, r0
 8002548:	461a      	mov	r2, r3
 800254a:	4b10      	ldr	r3, [pc, #64]	@ (800258c <HeadBase+0x15c>)
 800254c:	701a      	strb	r2, [r3, #0]
				while(pinstate1)
 800254e:	4b0f      	ldr	r3, [pc, #60]	@ (800258c <HeadBase+0x15c>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1d8      	bne.n	8002508 <HeadBase+0xd8>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8002556:	4b0e      	ldr	r3, [pc, #56]	@ (8002590 <HeadBase+0x160>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2200      	movs	r2, #0
 800255c:	635a      	str	r2, [r3, #52]	@ 0x34
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 800255e:	4b0c      	ldr	r3, [pc, #48]	@ (8002590 <HeadBase+0x160>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2200      	movs	r2, #0
 8002564:	639a      	str	r2, [r3, #56]	@ 0x38
				HAL_Delay(2000);
 8002566:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800256a:	f000 fc67 	bl	8002e3c <HAL_Delay>
				Motor_Steer(side,3);
 800256e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002572:	2103      	movs	r1, #3
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff f879 	bl	800166c <Motor_Steer>
				posABS_HeadB=0;
 800257a:	4b07      	ldr	r3, [pc, #28]	@ (8002598 <HeadBase+0x168>)
 800257c:	2200      	movs	r2, #0
 800257e:	701a      	strb	r2, [r3, #0]
}
 8002580:	bf00      	nop
 8002582:	3710      	adds	r7, #16
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	48000c00 	.word	0x48000c00
 800258c:	20000000 	.word	0x20000000
 8002590:	20000158 	.word	0x20000158
 8002594:	200000e8 	.word	0x200000e8
 8002598:	200000e9 	.word	0x200000e9

0800259c <SlotSensor_Init>:

// Counter for slot sensor
static GPIO_PinState last_state = GPIO_PIN_RESET; // Last state of the sensor
int8_t counter = 0;

void SlotSensor_Init(int8_t side ) {
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	4603      	mov	r3, r0
 80025a4:	71fb      	strb	r3, [r7, #7]
	counter = 0;
 80025a6:	4b0a      	ldr	r3, [pc, #40]	@ (80025d0 <SlotSensor_Init+0x34>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	701a      	strb	r2, [r3, #0]
    // Initialize the last state
	if(side = 0)
 80025ac:	2300      	movs	r3, #0
 80025ae:	71fb      	strb	r3, [r7, #7]
	{
		last_state = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7);
	}
	////// !!!!!!!!!!! need to establish whitch pin to use for the 2nd head
	else if (side == 1)
 80025b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d107      	bne.n	80025c8 <SlotSensor_Init+0x2c>
	{
		last_state = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7);
 80025b8:	2180      	movs	r1, #128	@ 0x80
 80025ba:	4806      	ldr	r0, [pc, #24]	@ (80025d4 <SlotSensor_Init+0x38>)
 80025bc:	f000 ffb2 	bl	8003524 <HAL_GPIO_ReadPin>
 80025c0:	4603      	mov	r3, r0
 80025c2:	461a      	mov	r2, r3
 80025c4:	4b04      	ldr	r3, [pc, #16]	@ (80025d8 <SlotSensor_Init+0x3c>)
 80025c6:	701a      	strb	r2, [r3, #0]
	}

}
 80025c8:	bf00      	nop
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	20000365 	.word	0x20000365
 80025d4:	48001000 	.word	0x48001000
 80025d8:	20000364 	.word	0x20000364

080025dc <SlotSensor_Update>:

int SlotSensor_Update(int8_t side ) {
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	71fb      	strb	r3, [r7, #7]

	if(side == 0 )
 80025e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d129      	bne.n	8002642 <SlotSensor_Update+0x66>
	{
		  GPIO_PinState current_state = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7); // Read pin state
 80025ee:	2180      	movs	r1, #128	@ 0x80
 80025f0:	482c      	ldr	r0, [pc, #176]	@ (80026a4 <SlotSensor_Update+0xc8>)
 80025f2:	f000 ff97 	bl	8003524 <HAL_GPIO_ReadPin>
 80025f6:	4603      	mov	r3, r0
 80025f8:	73fb      	strb	r3, [r7, #15]

		    // Check for a change in state
		    if (current_state == GPIO_PIN_SET && last_state == GPIO_PIN_RESET) {
 80025fa:	7bfb      	ldrb	r3, [r7, #15]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d119      	bne.n	8002634 <SlotSensor_Update+0x58>
 8002600:	4b29      	ldr	r3, [pc, #164]	@ (80026a8 <SlotSensor_Update+0xcc>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d115      	bne.n	8002634 <SlotSensor_Update+0x58>
		    	HAL_Delay(1);
 8002608:	2001      	movs	r0, #1
 800260a:	f000 fc17 	bl	8002e3c <HAL_Delay>
		    	current_state = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_8);
 800260e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002612:	4824      	ldr	r0, [pc, #144]	@ (80026a4 <SlotSensor_Update+0xc8>)
 8002614:	f000 ff86 	bl	8003524 <HAL_GPIO_ReadPin>
 8002618:	4603      	mov	r3, r0
 800261a:	73fb      	strb	r3, [r7, #15]
		    	if(current_state == GPIO_PIN_SET){
 800261c:	7bfb      	ldrb	r3, [r7, #15]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d108      	bne.n	8002634 <SlotSensor_Update+0x58>
		        counter++;} // Increment counter on state change
 8002622:	4b22      	ldr	r3, [pc, #136]	@ (80026ac <SlotSensor_Update+0xd0>)
 8002624:	f993 3000 	ldrsb.w	r3, [r3]
 8002628:	b2db      	uxtb	r3, r3
 800262a:	3301      	adds	r3, #1
 800262c:	b2db      	uxtb	r3, r3
 800262e:	b25a      	sxtb	r2, r3
 8002630:	4b1e      	ldr	r3, [pc, #120]	@ (80026ac <SlotSensor_Update+0xd0>)
 8002632:	701a      	strb	r2, [r3, #0]
		         // Update last state
		    }
		    last_state = current_state;
 8002634:	4a1c      	ldr	r2, [pc, #112]	@ (80026a8 <SlotSensor_Update+0xcc>)
 8002636:	7bfb      	ldrb	r3, [r7, #15]
 8002638:	7013      	strb	r3, [r2, #0]
		    return counter ;
 800263a:	4b1c      	ldr	r3, [pc, #112]	@ (80026ac <SlotSensor_Update+0xd0>)
 800263c:	f993 3000 	ldrsb.w	r3, [r3]
 8002640:	e02b      	b.n	800269a <SlotSensor_Update+0xbe>
	}
	else if(side =1)
 8002642:	2301      	movs	r3, #1
 8002644:	71fb      	strb	r3, [r7, #7]
	{
		GPIO_PinState current_state = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_8); // Read pin state
 8002646:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800264a:	4816      	ldr	r0, [pc, #88]	@ (80026a4 <SlotSensor_Update+0xc8>)
 800264c:	f000 ff6a 	bl	8003524 <HAL_GPIO_ReadPin>
 8002650:	4603      	mov	r3, r0
 8002652:	73bb      	strb	r3, [r7, #14]

				    // Check for a change in state
		if (current_state == GPIO_PIN_SET && last_state == GPIO_PIN_RESET)
 8002654:	7bbb      	ldrb	r3, [r7, #14]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d119      	bne.n	800268e <SlotSensor_Update+0xb2>
 800265a:	4b13      	ldr	r3, [pc, #76]	@ (80026a8 <SlotSensor_Update+0xcc>)
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d115      	bne.n	800268e <SlotSensor_Update+0xb2>
		{
			HAL_Delay(1);
 8002662:	2001      	movs	r0, #1
 8002664:	f000 fbea 	bl	8002e3c <HAL_Delay>
	    	current_state = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_8);
 8002668:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800266c:	480d      	ldr	r0, [pc, #52]	@ (80026a4 <SlotSensor_Update+0xc8>)
 800266e:	f000 ff59 	bl	8003524 <HAL_GPIO_ReadPin>
 8002672:	4603      	mov	r3, r0
 8002674:	73bb      	strb	r3, [r7, #14]
	    	if(current_state == GPIO_PIN_SET){
 8002676:	7bbb      	ldrb	r3, [r7, #14]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d108      	bne.n	800268e <SlotSensor_Update+0xb2>
	    		counter++;} // Increment counter on state change
 800267c:	4b0b      	ldr	r3, [pc, #44]	@ (80026ac <SlotSensor_Update+0xd0>)
 800267e:	f993 3000 	ldrsb.w	r3, [r3]
 8002682:	b2db      	uxtb	r3, r3
 8002684:	3301      	adds	r3, #1
 8002686:	b2db      	uxtb	r3, r3
 8002688:	b25a      	sxtb	r2, r3
 800268a:	4b08      	ldr	r3, [pc, #32]	@ (80026ac <SlotSensor_Update+0xd0>)
 800268c:	701a      	strb	r2, [r3, #0]
	    	// Update last state
		}
		last_state = current_state;
 800268e:	4a06      	ldr	r2, [pc, #24]	@ (80026a8 <SlotSensor_Update+0xcc>)
 8002690:	7bbb      	ldrb	r3, [r7, #14]
 8002692:	7013      	strb	r3, [r2, #0]
		return counter ;
 8002694:	4b05      	ldr	r3, [pc, #20]	@ (80026ac <SlotSensor_Update+0xd0>)
 8002696:	f993 3000 	ldrsb.w	r3, [r3]

	}

}
 800269a:	4618      	mov	r0, r3
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	48001000 	.word	0x48001000
 80026a8:	20000364 	.word	0x20000364
 80026ac:	20000365 	.word	0x20000365

080026b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026b6:	4b0f      	ldr	r3, [pc, #60]	@ (80026f4 <HAL_MspInit+0x44>)
 80026b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026ba:	4a0e      	ldr	r2, [pc, #56]	@ (80026f4 <HAL_MspInit+0x44>)
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80026c2:	4b0c      	ldr	r3, [pc, #48]	@ (80026f4 <HAL_MspInit+0x44>)
 80026c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	607b      	str	r3, [r7, #4]
 80026cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026ce:	4b09      	ldr	r3, [pc, #36]	@ (80026f4 <HAL_MspInit+0x44>)
 80026d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026d2:	4a08      	ldr	r2, [pc, #32]	@ (80026f4 <HAL_MspInit+0x44>)
 80026d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80026da:	4b06      	ldr	r3, [pc, #24]	@ (80026f4 <HAL_MspInit+0x44>)
 80026dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026e2:	603b      	str	r3, [r7, #0]
 80026e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80026e6:	f001 f80b 	bl	8003700 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026ea:	bf00      	nop
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40021000 	.word	0x40021000

080026f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b08a      	sub	sp, #40	@ 0x28
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002700:	f107 0314 	add.w	r3, r7, #20
 8002704:	2200      	movs	r2, #0
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	605a      	str	r2, [r3, #4]
 800270a:	609a      	str	r2, [r3, #8]
 800270c:	60da      	str	r2, [r3, #12]
 800270e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a26      	ldr	r2, [pc, #152]	@ (80027b0 <HAL_SPI_MspInit+0xb8>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d145      	bne.n	80027a6 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800271a:	4b26      	ldr	r3, [pc, #152]	@ (80027b4 <HAL_SPI_MspInit+0xbc>)
 800271c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800271e:	4a25      	ldr	r2, [pc, #148]	@ (80027b4 <HAL_SPI_MspInit+0xbc>)
 8002720:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002724:	6613      	str	r3, [r2, #96]	@ 0x60
 8002726:	4b23      	ldr	r3, [pc, #140]	@ (80027b4 <HAL_SPI_MspInit+0xbc>)
 8002728:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800272a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800272e:	613b      	str	r3, [r7, #16]
 8002730:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002732:	4b20      	ldr	r3, [pc, #128]	@ (80027b4 <HAL_SPI_MspInit+0xbc>)
 8002734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002736:	4a1f      	ldr	r2, [pc, #124]	@ (80027b4 <HAL_SPI_MspInit+0xbc>)
 8002738:	f043 0301 	orr.w	r3, r3, #1
 800273c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800273e:	4b1d      	ldr	r3, [pc, #116]	@ (80027b4 <HAL_SPI_MspInit+0xbc>)
 8002740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	60fb      	str	r3, [r7, #12]
 8002748:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800274a:	4b1a      	ldr	r3, [pc, #104]	@ (80027b4 <HAL_SPI_MspInit+0xbc>)
 800274c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800274e:	4a19      	ldr	r2, [pc, #100]	@ (80027b4 <HAL_SPI_MspInit+0xbc>)
 8002750:	f043 0302 	orr.w	r3, r3, #2
 8002754:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002756:	4b17      	ldr	r3, [pc, #92]	@ (80027b4 <HAL_SPI_MspInit+0xbc>)
 8002758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	60bb      	str	r3, [r7, #8]
 8002760:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002762:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002766:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002768:	2302      	movs	r3, #2
 800276a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276c:	2300      	movs	r3, #0
 800276e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002770:	2303      	movs	r3, #3
 8002772:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002774:	2305      	movs	r3, #5
 8002776:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002778:	f107 0314 	add.w	r3, r7, #20
 800277c:	4619      	mov	r1, r3
 800277e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002782:	f000 fd4d 	bl	8003220 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002786:	2338      	movs	r3, #56	@ 0x38
 8002788:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800278a:	2302      	movs	r3, #2
 800278c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278e:	2300      	movs	r3, #0
 8002790:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002792:	2303      	movs	r3, #3
 8002794:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002796:	2305      	movs	r3, #5
 8002798:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800279a:	f107 0314 	add.w	r3, r7, #20
 800279e:	4619      	mov	r1, r3
 80027a0:	4805      	ldr	r0, [pc, #20]	@ (80027b8 <HAL_SPI_MspInit+0xc0>)
 80027a2:	f000 fd3d 	bl	8003220 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80027a6:	bf00      	nop
 80027a8:	3728      	adds	r7, #40	@ 0x28
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40013000 	.word	0x40013000
 80027b4:	40021000 	.word	0x40021000
 80027b8:	48000400 	.word	0x48000400

080027bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a0a      	ldr	r2, [pc, #40]	@ (80027f4 <HAL_TIM_Base_MspInit+0x38>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d10b      	bne.n	80027e6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027ce:	4b0a      	ldr	r3, [pc, #40]	@ (80027f8 <HAL_TIM_Base_MspInit+0x3c>)
 80027d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027d2:	4a09      	ldr	r2, [pc, #36]	@ (80027f8 <HAL_TIM_Base_MspInit+0x3c>)
 80027d4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80027d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80027da:	4b07      	ldr	r3, [pc, #28]	@ (80027f8 <HAL_TIM_Base_MspInit+0x3c>)
 80027dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80027e6:	bf00      	nop
 80027e8:	3714      	adds	r7, #20
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	40012c00 	.word	0x40012c00
 80027f8:	40021000 	.word	0x40021000

080027fc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b08c      	sub	sp, #48	@ 0x30
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002804:	f107 031c 	add.w	r3, r7, #28
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	605a      	str	r2, [r3, #4]
 800280e:	609a      	str	r2, [r3, #8]
 8002810:	60da      	str	r2, [r3, #12]
 8002812:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a33      	ldr	r2, [pc, #204]	@ (80028e8 <HAL_TIM_Encoder_MspInit+0xec>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d128      	bne.n	8002870 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800281e:	4b33      	ldr	r3, [pc, #204]	@ (80028ec <HAL_TIM_Encoder_MspInit+0xf0>)
 8002820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002822:	4a32      	ldr	r2, [pc, #200]	@ (80028ec <HAL_TIM_Encoder_MspInit+0xf0>)
 8002824:	f043 0302 	orr.w	r3, r3, #2
 8002828:	6593      	str	r3, [r2, #88]	@ 0x58
 800282a:	4b30      	ldr	r3, [pc, #192]	@ (80028ec <HAL_TIM_Encoder_MspInit+0xf0>)
 800282c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	61bb      	str	r3, [r7, #24]
 8002834:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002836:	4b2d      	ldr	r3, [pc, #180]	@ (80028ec <HAL_TIM_Encoder_MspInit+0xf0>)
 8002838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800283a:	4a2c      	ldr	r2, [pc, #176]	@ (80028ec <HAL_TIM_Encoder_MspInit+0xf0>)
 800283c:	f043 0304 	orr.w	r3, r3, #4
 8002840:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002842:	4b2a      	ldr	r3, [pc, #168]	@ (80028ec <HAL_TIM_Encoder_MspInit+0xf0>)
 8002844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002846:	f003 0304 	and.w	r3, r3, #4
 800284a:	617b      	str	r3, [r7, #20]
 800284c:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Motor_B_EN_CH1_Pin|Motor_B_EN_CH2_Pin;
 800284e:	23c0      	movs	r3, #192	@ 0xc0
 8002850:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002852:	2302      	movs	r3, #2
 8002854:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002856:	2300      	movs	r3, #0
 8002858:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800285a:	2300      	movs	r3, #0
 800285c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800285e:	2302      	movs	r3, #2
 8002860:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002862:	f107 031c 	add.w	r3, r7, #28
 8002866:	4619      	mov	r1, r3
 8002868:	4821      	ldr	r0, [pc, #132]	@ (80028f0 <HAL_TIM_Encoder_MspInit+0xf4>)
 800286a:	f000 fcd9 	bl	8003220 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800286e:	e036      	b.n	80028de <HAL_TIM_Encoder_MspInit+0xe2>
  else if(htim_encoder->Instance==TIM4)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a1f      	ldr	r2, [pc, #124]	@ (80028f4 <HAL_TIM_Encoder_MspInit+0xf8>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d131      	bne.n	80028de <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800287a:	4b1c      	ldr	r3, [pc, #112]	@ (80028ec <HAL_TIM_Encoder_MspInit+0xf0>)
 800287c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800287e:	4a1b      	ldr	r2, [pc, #108]	@ (80028ec <HAL_TIM_Encoder_MspInit+0xf0>)
 8002880:	f043 0304 	orr.w	r3, r3, #4
 8002884:	6593      	str	r3, [r2, #88]	@ 0x58
 8002886:	4b19      	ldr	r3, [pc, #100]	@ (80028ec <HAL_TIM_Encoder_MspInit+0xf0>)
 8002888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800288a:	f003 0304 	and.w	r3, r3, #4
 800288e:	613b      	str	r3, [r7, #16]
 8002890:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002892:	4b16      	ldr	r3, [pc, #88]	@ (80028ec <HAL_TIM_Encoder_MspInit+0xf0>)
 8002894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002896:	4a15      	ldr	r2, [pc, #84]	@ (80028ec <HAL_TIM_Encoder_MspInit+0xf0>)
 8002898:	f043 0301 	orr.w	r3, r3, #1
 800289c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800289e:	4b13      	ldr	r3, [pc, #76]	@ (80028ec <HAL_TIM_Encoder_MspInit+0xf0>)
 80028a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Motor_A_EN_CH2_Pin|Motor_A_EN_CH1_Pin;
 80028aa:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80028ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b0:	2302      	movs	r3, #2
 80028b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b4:	2300      	movs	r3, #0
 80028b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b8:	2300      	movs	r3, #0
 80028ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80028bc:	230a      	movs	r3, #10
 80028be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c0:	f107 031c 	add.w	r3, r7, #28
 80028c4:	4619      	mov	r1, r3
 80028c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028ca:	f000 fca9 	bl	8003220 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80028ce:	2200      	movs	r2, #0
 80028d0:	2100      	movs	r1, #0
 80028d2:	201e      	movs	r0, #30
 80028d4:	f000 fbaf 	bl	8003036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80028d8:	201e      	movs	r0, #30
 80028da:	f000 fbc6 	bl	800306a <HAL_NVIC_EnableIRQ>
}
 80028de:	bf00      	nop
 80028e0:	3730      	adds	r7, #48	@ 0x30
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	40000400 	.word	0x40000400
 80028ec:	40021000 	.word	0x40021000
 80028f0:	48000800 	.word	0x48000800
 80028f4:	40000800 	.word	0x40000800

080028f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b088      	sub	sp, #32
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002900:	f107 030c 	add.w	r3, r7, #12
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	605a      	str	r2, [r3, #4]
 800290a:	609a      	str	r2, [r3, #8]
 800290c:	60da      	str	r2, [r3, #12]
 800290e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a11      	ldr	r2, [pc, #68]	@ (800295c <HAL_TIM_MspPostInit+0x64>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d11b      	bne.n	8002952 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800291a:	4b11      	ldr	r3, [pc, #68]	@ (8002960 <HAL_TIM_MspPostInit+0x68>)
 800291c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800291e:	4a10      	ldr	r2, [pc, #64]	@ (8002960 <HAL_TIM_MspPostInit+0x68>)
 8002920:	f043 0304 	orr.w	r3, r3, #4
 8002924:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002926:	4b0e      	ldr	r3, [pc, #56]	@ (8002960 <HAL_TIM_MspPostInit+0x68>)
 8002928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800292a:	f003 0304 	and.w	r3, r3, #4
 800292e:	60bb      	str	r3, [r7, #8]
 8002930:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Motor_A_CH1_Pin|Motor_A_CH2_Pin|Motor_B_CH3_Pin|Motor_A_CH4_Pin;
 8002932:	230f      	movs	r3, #15
 8002934:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002936:	2302      	movs	r3, #2
 8002938:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293a:	2300      	movs	r3, #0
 800293c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800293e:	2300      	movs	r3, #0
 8002940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002942:	2302      	movs	r3, #2
 8002944:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002946:	f107 030c 	add.w	r3, r7, #12
 800294a:	4619      	mov	r1, r3
 800294c:	4805      	ldr	r0, [pc, #20]	@ (8002964 <HAL_TIM_MspPostInit+0x6c>)
 800294e:	f000 fc67 	bl	8003220 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002952:	bf00      	nop
 8002954:	3720      	adds	r7, #32
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	40012c00 	.word	0x40012c00
 8002960:	40021000 	.word	0x40021000
 8002964:	48000800 	.word	0x48000800

08002968 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b0a2      	sub	sp, #136	@ 0x88
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002970:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	605a      	str	r2, [r3, #4]
 800297a:	609a      	str	r2, [r3, #8]
 800297c:	60da      	str	r2, [r3, #12]
 800297e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002980:	f107 0320 	add.w	r3, r7, #32
 8002984:	2254      	movs	r2, #84	@ 0x54
 8002986:	2100      	movs	r1, #0
 8002988:	4618      	mov	r0, r3
 800298a:	f006 f89f 	bl	8008acc <memset>
  if(huart->Instance==UART4)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a56      	ldr	r2, [pc, #344]	@ (8002aec <HAL_UART_MspInit+0x184>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d141      	bne.n	8002a1c <HAL_UART_MspInit+0xb4>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002998:	2308      	movs	r3, #8
 800299a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800299c:	2300      	movs	r3, #0
 800299e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029a0:	f107 0320 	add.w	r3, r7, #32
 80029a4:	4618      	mov	r0, r3
 80029a6:	f001 fbe9 	bl	800417c <HAL_RCCEx_PeriphCLKConfig>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80029b0:	f7fe fe26 	bl	8001600 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80029b4:	4b4e      	ldr	r3, [pc, #312]	@ (8002af0 <HAL_UART_MspInit+0x188>)
 80029b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029b8:	4a4d      	ldr	r2, [pc, #308]	@ (8002af0 <HAL_UART_MspInit+0x188>)
 80029ba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80029be:	6593      	str	r3, [r2, #88]	@ 0x58
 80029c0:	4b4b      	ldr	r3, [pc, #300]	@ (8002af0 <HAL_UART_MspInit+0x188>)
 80029c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029c8:	61fb      	str	r3, [r7, #28]
 80029ca:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029cc:	4b48      	ldr	r3, [pc, #288]	@ (8002af0 <HAL_UART_MspInit+0x188>)
 80029ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029d0:	4a47      	ldr	r2, [pc, #284]	@ (8002af0 <HAL_UART_MspInit+0x188>)
 80029d2:	f043 0304 	orr.w	r3, r3, #4
 80029d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029d8:	4b45      	ldr	r3, [pc, #276]	@ (8002af0 <HAL_UART_MspInit+0x188>)
 80029da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029dc:	f003 0304 	and.w	r3, r3, #4
 80029e0:	61bb      	str	r3, [r7, #24]
 80029e2:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80029e4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80029e8:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ea:	2302      	movs	r3, #2
 80029ec:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ee:	2300      	movs	r3, #0
 80029f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f2:	2300      	movs	r3, #0
 80029f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 80029f8:	2305      	movs	r3, #5
 80029fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029fe:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002a02:	4619      	mov	r1, r3
 8002a04:	483b      	ldr	r0, [pc, #236]	@ (8002af4 <HAL_UART_MspInit+0x18c>)
 8002a06:	f000 fc0b 	bl	8003220 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	2034      	movs	r0, #52	@ 0x34
 8002a10:	f000 fb11 	bl	8003036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002a14:	2034      	movs	r0, #52	@ 0x34
 8002a16:	f000 fb28 	bl	800306a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8002a1a:	e063      	b.n	8002ae4 <HAL_UART_MspInit+0x17c>
  else if(huart->Instance==UART5)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a35      	ldr	r2, [pc, #212]	@ (8002af8 <HAL_UART_MspInit+0x190>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d15e      	bne.n	8002ae4 <HAL_UART_MspInit+0x17c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002a26:	2310      	movs	r3, #16
 8002a28:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a2e:	f107 0320 	add.w	r3, r7, #32
 8002a32:	4618      	mov	r0, r3
 8002a34:	f001 fba2 	bl	800417c <HAL_RCCEx_PeriphCLKConfig>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <HAL_UART_MspInit+0xda>
      Error_Handler();
 8002a3e:	f7fe fddf 	bl	8001600 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002a42:	4b2b      	ldr	r3, [pc, #172]	@ (8002af0 <HAL_UART_MspInit+0x188>)
 8002a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a46:	4a2a      	ldr	r2, [pc, #168]	@ (8002af0 <HAL_UART_MspInit+0x188>)
 8002a48:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a4e:	4b28      	ldr	r3, [pc, #160]	@ (8002af0 <HAL_UART_MspInit+0x188>)
 8002a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a56:	617b      	str	r3, [r7, #20]
 8002a58:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a5a:	4b25      	ldr	r3, [pc, #148]	@ (8002af0 <HAL_UART_MspInit+0x188>)
 8002a5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a5e:	4a24      	ldr	r2, [pc, #144]	@ (8002af0 <HAL_UART_MspInit+0x188>)
 8002a60:	f043 0304 	orr.w	r3, r3, #4
 8002a64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a66:	4b22      	ldr	r3, [pc, #136]	@ (8002af0 <HAL_UART_MspInit+0x188>)
 8002a68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a6a:	f003 0304 	and.w	r3, r3, #4
 8002a6e:	613b      	str	r3, [r7, #16]
 8002a70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a72:	4b1f      	ldr	r3, [pc, #124]	@ (8002af0 <HAL_UART_MspInit+0x188>)
 8002a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a76:	4a1e      	ldr	r2, [pc, #120]	@ (8002af0 <HAL_UART_MspInit+0x188>)
 8002a78:	f043 0308 	orr.w	r3, r3, #8
 8002a7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a7e:	4b1c      	ldr	r3, [pc, #112]	@ (8002af0 <HAL_UART_MspInit+0x188>)
 8002a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a82:	f003 0308 	and.w	r3, r3, #8
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002a8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a8e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a90:	2302      	movs	r3, #2
 8002a92:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a94:	2300      	movs	r3, #0
 8002a96:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8002a9e:	2305      	movs	r3, #5
 8002aa0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aa4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4812      	ldr	r0, [pc, #72]	@ (8002af4 <HAL_UART_MspInit+0x18c>)
 8002aac:	f000 fbb8 	bl	8003220 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002ab0:	2304      	movs	r3, #4
 8002ab2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002abc:	2300      	movs	r3, #0
 8002abe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8002ac2:	2305      	movs	r3, #5
 8002ac4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ac8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002acc:	4619      	mov	r1, r3
 8002ace:	480b      	ldr	r0, [pc, #44]	@ (8002afc <HAL_UART_MspInit+0x194>)
 8002ad0:	f000 fba6 	bl	8003220 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	2035      	movs	r0, #53	@ 0x35
 8002ada:	f000 faac 	bl	8003036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002ade:	2035      	movs	r0, #53	@ 0x35
 8002ae0:	f000 fac3 	bl	800306a <HAL_NVIC_EnableIRQ>
}
 8002ae4:	bf00      	nop
 8002ae6:	3788      	adds	r7, #136	@ 0x88
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40004c00 	.word	0x40004c00
 8002af0:	40021000 	.word	0x40021000
 8002af4:	48000800 	.word	0x48000800
 8002af8:	40005000 	.word	0x40005000
 8002afc:	48000c00 	.word	0x48000c00

08002b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b04:	bf00      	nop
 8002b06:	e7fd      	b.n	8002b04 <NMI_Handler+0x4>

08002b08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b0c:	bf00      	nop
 8002b0e:	e7fd      	b.n	8002b0c <HardFault_Handler+0x4>

08002b10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b14:	bf00      	nop
 8002b16:	e7fd      	b.n	8002b14 <MemManage_Handler+0x4>

08002b18 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b1c:	bf00      	nop
 8002b1e:	e7fd      	b.n	8002b1c <BusFault_Handler+0x4>

08002b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b24:	bf00      	nop
 8002b26:	e7fd      	b.n	8002b24 <UsageFault_Handler+0x4>

08002b28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b2c:	bf00      	nop
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b36:	b480      	push	{r7}
 8002b38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b3a:	bf00      	nop
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b48:	bf00      	nop
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b56:	f000 f953 	bl	8002e00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b5a:	bf00      	nop
 8002b5c:	bd80      	pop	{r7, pc}
	...

08002b60 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002b64:	4802      	ldr	r0, [pc, #8]	@ (8002b70 <TIM4_IRQHandler+0x10>)
 8002b66:	f002 ff8b 	bl	8005a80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002b6a:	bf00      	nop
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	200001f0 	.word	0x200001f0

08002b74 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002b78:	4802      	ldr	r0, [pc, #8]	@ (8002b84 <UART4_IRQHandler+0x10>)
 8002b7a:	f004 fae3 	bl	8007144 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002b7e:	bf00      	nop
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	2000023c 	.word	0x2000023c

08002b88 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt / UART5 wake-up interrupt through EXTI line 35.
  */
void UART5_IRQHandler(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002b8c:	4802      	ldr	r0, [pc, #8]	@ (8002b98 <UART5_IRQHandler+0x10>)
 8002b8e:	f004 fad9 	bl	8007144 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002b92:	bf00      	nop
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	200002d0 	.word	0x200002d0

08002b9c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ba8:	2300      	movs	r3, #0
 8002baa:	617b      	str	r3, [r7, #20]
 8002bac:	e00a      	b.n	8002bc4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002bae:	f3af 8000 	nop.w
 8002bb2:	4601      	mov	r1, r0
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	1c5a      	adds	r2, r3, #1
 8002bb8:	60ba      	str	r2, [r7, #8]
 8002bba:	b2ca      	uxtb	r2, r1
 8002bbc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	617b      	str	r3, [r7, #20]
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	dbf0      	blt.n	8002bae <_read+0x12>
  }

  return len;
 8002bcc:	687b      	ldr	r3, [r7, #4]
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3718      	adds	r7, #24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b086      	sub	sp, #24
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	60f8      	str	r0, [r7, #12]
 8002bde:	60b9      	str	r1, [r7, #8]
 8002be0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002be2:	2300      	movs	r3, #0
 8002be4:	617b      	str	r3, [r7, #20]
 8002be6:	e009      	b.n	8002bfc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	1c5a      	adds	r2, r3, #1
 8002bec:	60ba      	str	r2, [r7, #8]
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	617b      	str	r3, [r7, #20]
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	dbf1      	blt.n	8002be8 <_write+0x12>
  }
  return len;
 8002c04:	687b      	ldr	r3, [r7, #4]
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3718      	adds	r7, #24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <_close>:

int _close(int file)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b083      	sub	sp, #12
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr

08002c26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c26:	b480      	push	{r7}
 8002c28:	b083      	sub	sp, #12
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
 8002c2e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c36:	605a      	str	r2, [r3, #4]
  return 0;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <_isatty>:

int _isatty(int file)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c4e:	2301      	movs	r3, #1
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3714      	adds	r7, #20
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
	...

08002c78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c80:	4a14      	ldr	r2, [pc, #80]	@ (8002cd4 <_sbrk+0x5c>)
 8002c82:	4b15      	ldr	r3, [pc, #84]	@ (8002cd8 <_sbrk+0x60>)
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c8c:	4b13      	ldr	r3, [pc, #76]	@ (8002cdc <_sbrk+0x64>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d102      	bne.n	8002c9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c94:	4b11      	ldr	r3, [pc, #68]	@ (8002cdc <_sbrk+0x64>)
 8002c96:	4a12      	ldr	r2, [pc, #72]	@ (8002ce0 <_sbrk+0x68>)
 8002c98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c9a:	4b10      	ldr	r3, [pc, #64]	@ (8002cdc <_sbrk+0x64>)
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d207      	bcs.n	8002cb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ca8:	f005 ff82 	bl	8008bb0 <__errno>
 8002cac:	4603      	mov	r3, r0
 8002cae:	220c      	movs	r2, #12
 8002cb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8002cb6:	e009      	b.n	8002ccc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cb8:	4b08      	ldr	r3, [pc, #32]	@ (8002cdc <_sbrk+0x64>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cbe:	4b07      	ldr	r3, [pc, #28]	@ (8002cdc <_sbrk+0x64>)
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	4a05      	ldr	r2, [pc, #20]	@ (8002cdc <_sbrk+0x64>)
 8002cc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cca:	68fb      	ldr	r3, [r7, #12]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3718      	adds	r7, #24
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	20020000 	.word	0x20020000
 8002cd8:	00000400 	.word	0x00000400
 8002cdc:	20000368 	.word	0x20000368
 8002ce0:	200004c0 	.word	0x200004c0

08002ce4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002ce8:	4b06      	ldr	r3, [pc, #24]	@ (8002d04 <SystemInit+0x20>)
 8002cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cee:	4a05      	ldr	r2, [pc, #20]	@ (8002d04 <SystemInit+0x20>)
 8002cf0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002cf4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cf8:	bf00      	nop
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	e000ed00 	.word	0xe000ed00

08002d08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002d08:	480d      	ldr	r0, [pc, #52]	@ (8002d40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002d0a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d0c:	f7ff ffea 	bl	8002ce4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d10:	480c      	ldr	r0, [pc, #48]	@ (8002d44 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d12:	490d      	ldr	r1, [pc, #52]	@ (8002d48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d14:	4a0d      	ldr	r2, [pc, #52]	@ (8002d4c <LoopForever+0xe>)
  movs r3, #0
 8002d16:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002d18:	e002      	b.n	8002d20 <LoopCopyDataInit>

08002d1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d1e:	3304      	adds	r3, #4

08002d20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d24:	d3f9      	bcc.n	8002d1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d26:	4a0a      	ldr	r2, [pc, #40]	@ (8002d50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d28:	4c0a      	ldr	r4, [pc, #40]	@ (8002d54 <LoopForever+0x16>)
  movs r3, #0
 8002d2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d2c:	e001      	b.n	8002d32 <LoopFillZerobss>

08002d2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d30:	3204      	adds	r2, #4

08002d32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d34:	d3fb      	bcc.n	8002d2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d36:	f005 ff41 	bl	8008bbc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d3a:	f7fe f8f3 	bl	8000f24 <main>

08002d3e <LoopForever>:

LoopForever:
    b LoopForever
 8002d3e:	e7fe      	b.n	8002d3e <LoopForever>
  ldr   r0, =_estack
 8002d40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d48:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002d4c:	0800a230 	.word	0x0800a230
  ldr r2, =_sbss
 8002d50:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8002d54:	200004bc 	.word	0x200004bc

08002d58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d58:	e7fe      	b.n	8002d58 <ADC1_2_IRQHandler>

08002d5a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b082      	sub	sp, #8
 8002d5e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d60:	2300      	movs	r3, #0
 8002d62:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d64:	2003      	movs	r0, #3
 8002d66:	f000 f95b 	bl	8003020 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d6a:	200f      	movs	r0, #15
 8002d6c:	f000 f80e 	bl	8002d8c <HAL_InitTick>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d002      	beq.n	8002d7c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	71fb      	strb	r3, [r7, #7]
 8002d7a:	e001      	b.n	8002d80 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d7c:	f7ff fc98 	bl	80026b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d80:	79fb      	ldrb	r3, [r7, #7]

}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
	...

08002d8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002d94:	2300      	movs	r3, #0
 8002d96:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002d98:	4b16      	ldr	r3, [pc, #88]	@ (8002df4 <HAL_InitTick+0x68>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d022      	beq.n	8002de6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002da0:	4b15      	ldr	r3, [pc, #84]	@ (8002df8 <HAL_InitTick+0x6c>)
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	4b13      	ldr	r3, [pc, #76]	@ (8002df4 <HAL_InitTick+0x68>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002dac:	fbb1 f3f3 	udiv	r3, r1, r3
 8002db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db4:	4618      	mov	r0, r3
 8002db6:	f000 f966 	bl	8003086 <HAL_SYSTICK_Config>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d10f      	bne.n	8002de0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b0f      	cmp	r3, #15
 8002dc4:	d809      	bhi.n	8002dda <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	6879      	ldr	r1, [r7, #4]
 8002dca:	f04f 30ff 	mov.w	r0, #4294967295
 8002dce:	f000 f932 	bl	8003036 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8002dfc <HAL_InitTick+0x70>)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6013      	str	r3, [r2, #0]
 8002dd8:	e007      	b.n	8002dea <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	73fb      	strb	r3, [r7, #15]
 8002dde:	e004      	b.n	8002dea <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	73fb      	strb	r3, [r7, #15]
 8002de4:	e001      	b.n	8002dea <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	2000000c 	.word	0x2000000c
 8002df8:	20000004 	.word	0x20000004
 8002dfc:	20000008 	.word	0x20000008

08002e00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e04:	4b05      	ldr	r3, [pc, #20]	@ (8002e1c <HAL_IncTick+0x1c>)
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	4b05      	ldr	r3, [pc, #20]	@ (8002e20 <HAL_IncTick+0x20>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	4a03      	ldr	r2, [pc, #12]	@ (8002e1c <HAL_IncTick+0x1c>)
 8002e10:	6013      	str	r3, [r2, #0]
}
 8002e12:	bf00      	nop
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr
 8002e1c:	2000036c 	.word	0x2000036c
 8002e20:	2000000c 	.word	0x2000000c

08002e24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  return uwTick;
 8002e28:	4b03      	ldr	r3, [pc, #12]	@ (8002e38 <HAL_GetTick+0x14>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	2000036c 	.word	0x2000036c

08002e3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e44:	f7ff ffee 	bl	8002e24 <HAL_GetTick>
 8002e48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e54:	d004      	beq.n	8002e60 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e56:	4b09      	ldr	r3, [pc, #36]	@ (8002e7c <HAL_Delay+0x40>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e60:	bf00      	nop
 8002e62:	f7ff ffdf 	bl	8002e24 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d8f7      	bhi.n	8002e62 <HAL_Delay+0x26>
  {
  }
}
 8002e72:	bf00      	nop
 8002e74:	bf00      	nop
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	2000000c 	.word	0x2000000c

08002e80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f003 0307 	and.w	r3, r3, #7
 8002e8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e90:	4b0c      	ldr	r3, [pc, #48]	@ (8002ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e96:	68ba      	ldr	r2, [r7, #8]
 8002e98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ea8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002eac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002eb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eb2:	4a04      	ldr	r2, [pc, #16]	@ (8002ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	60d3      	str	r3, [r2, #12]
}
 8002eb8:	bf00      	nop
 8002eba:	3714      	adds	r7, #20
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	e000ed00 	.word	0xe000ed00

08002ec8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ecc:	4b04      	ldr	r3, [pc, #16]	@ (8002ee0 <__NVIC_GetPriorityGrouping+0x18>)
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	0a1b      	lsrs	r3, r3, #8
 8002ed2:	f003 0307 	and.w	r3, r3, #7
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr
 8002ee0:	e000ed00 	.word	0xe000ed00

08002ee4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	4603      	mov	r3, r0
 8002eec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	db0b      	blt.n	8002f0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ef6:	79fb      	ldrb	r3, [r7, #7]
 8002ef8:	f003 021f 	and.w	r2, r3, #31
 8002efc:	4907      	ldr	r1, [pc, #28]	@ (8002f1c <__NVIC_EnableIRQ+0x38>)
 8002efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f02:	095b      	lsrs	r3, r3, #5
 8002f04:	2001      	movs	r0, #1
 8002f06:	fa00 f202 	lsl.w	r2, r0, r2
 8002f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f0e:	bf00      	nop
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	e000e100 	.word	0xe000e100

08002f20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	4603      	mov	r3, r0
 8002f28:	6039      	str	r1, [r7, #0]
 8002f2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	db0a      	blt.n	8002f4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	b2da      	uxtb	r2, r3
 8002f38:	490c      	ldr	r1, [pc, #48]	@ (8002f6c <__NVIC_SetPriority+0x4c>)
 8002f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f3e:	0112      	lsls	r2, r2, #4
 8002f40:	b2d2      	uxtb	r2, r2
 8002f42:	440b      	add	r3, r1
 8002f44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f48:	e00a      	b.n	8002f60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	b2da      	uxtb	r2, r3
 8002f4e:	4908      	ldr	r1, [pc, #32]	@ (8002f70 <__NVIC_SetPriority+0x50>)
 8002f50:	79fb      	ldrb	r3, [r7, #7]
 8002f52:	f003 030f 	and.w	r3, r3, #15
 8002f56:	3b04      	subs	r3, #4
 8002f58:	0112      	lsls	r2, r2, #4
 8002f5a:	b2d2      	uxtb	r2, r2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	761a      	strb	r2, [r3, #24]
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	e000e100 	.word	0xe000e100
 8002f70:	e000ed00 	.word	0xe000ed00

08002f74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b089      	sub	sp, #36	@ 0x24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f003 0307 	and.w	r3, r3, #7
 8002f86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	f1c3 0307 	rsb	r3, r3, #7
 8002f8e:	2b04      	cmp	r3, #4
 8002f90:	bf28      	it	cs
 8002f92:	2304      	movcs	r3, #4
 8002f94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	3304      	adds	r3, #4
 8002f9a:	2b06      	cmp	r3, #6
 8002f9c:	d902      	bls.n	8002fa4 <NVIC_EncodePriority+0x30>
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	3b03      	subs	r3, #3
 8002fa2:	e000      	b.n	8002fa6 <NVIC_EncodePriority+0x32>
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb2:	43da      	mvns	r2, r3
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	401a      	ands	r2, r3
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc6:	43d9      	mvns	r1, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fcc:	4313      	orrs	r3, r2
         );
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3724      	adds	r7, #36	@ 0x24
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
	...

08002fdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fec:	d301      	bcc.n	8002ff2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e00f      	b.n	8003012 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ff2:	4a0a      	ldr	r2, [pc, #40]	@ (800301c <SysTick_Config+0x40>)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ffa:	210f      	movs	r1, #15
 8002ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8003000:	f7ff ff8e 	bl	8002f20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003004:	4b05      	ldr	r3, [pc, #20]	@ (800301c <SysTick_Config+0x40>)
 8003006:	2200      	movs	r2, #0
 8003008:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800300a:	4b04      	ldr	r3, [pc, #16]	@ (800301c <SysTick_Config+0x40>)
 800300c:	2207      	movs	r2, #7
 800300e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	e000e010 	.word	0xe000e010

08003020 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f7ff ff29 	bl	8002e80 <__NVIC_SetPriorityGrouping>
}
 800302e:	bf00      	nop
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b086      	sub	sp, #24
 800303a:	af00      	add	r7, sp, #0
 800303c:	4603      	mov	r3, r0
 800303e:	60b9      	str	r1, [r7, #8]
 8003040:	607a      	str	r2, [r7, #4]
 8003042:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003044:	f7ff ff40 	bl	8002ec8 <__NVIC_GetPriorityGrouping>
 8003048:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	68b9      	ldr	r1, [r7, #8]
 800304e:	6978      	ldr	r0, [r7, #20]
 8003050:	f7ff ff90 	bl	8002f74 <NVIC_EncodePriority>
 8003054:	4602      	mov	r2, r0
 8003056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800305a:	4611      	mov	r1, r2
 800305c:	4618      	mov	r0, r3
 800305e:	f7ff ff5f 	bl	8002f20 <__NVIC_SetPriority>
}
 8003062:	bf00      	nop
 8003064:	3718      	adds	r7, #24
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b082      	sub	sp, #8
 800306e:	af00      	add	r7, sp, #0
 8003070:	4603      	mov	r3, r0
 8003072:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003078:	4618      	mov	r0, r3
 800307a:	f7ff ff33 	bl	8002ee4 <__NVIC_EnableIRQ>
}
 800307e:	bf00      	nop
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003086:	b580      	push	{r7, lr}
 8003088:	b082      	sub	sp, #8
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f7ff ffa4 	bl	8002fdc <SysTick_Config>
 8003094:	4603      	mov	r3, r0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800309e:	b480      	push	{r7}
 80030a0:	b085      	sub	sp, #20
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030a6:	2300      	movs	r3, #0
 80030a8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d005      	beq.n	80030c2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2204      	movs	r2, #4
 80030ba:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	73fb      	strb	r3, [r7, #15]
 80030c0:	e037      	b.n	8003132 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 020e 	bic.w	r2, r2, #14
 80030d0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80030e0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f022 0201 	bic.w	r2, r2, #1
 80030f0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030f6:	f003 021f 	and.w	r2, r3, #31
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fe:	2101      	movs	r1, #1
 8003100:	fa01 f202 	lsl.w	r2, r1, r2
 8003104:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800310e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00c      	beq.n	8003132 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003122:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003126:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003130:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003142:	7bfb      	ldrb	r3, [r7, #15]
}
 8003144:	4618      	mov	r0, r3
 8003146:	3714      	adds	r7, #20
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003158:	2300      	movs	r3, #0
 800315a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b02      	cmp	r3, #2
 8003166:	d00d      	beq.n	8003184 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2204      	movs	r2, #4
 800316c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	73fb      	strb	r3, [r7, #15]
 8003182:	e047      	b.n	8003214 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 020e 	bic.w	r2, r2, #14
 8003192:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f022 0201 	bic.w	r2, r2, #1
 80031a2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031ae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031b8:	f003 021f 	and.w	r2, r3, #31
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c0:	2101      	movs	r1, #1
 80031c2:	fa01 f202 	lsl.w	r2, r1, r2
 80031c6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80031d0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00c      	beq.n	80031f4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031e8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80031f2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003208:	2b00      	cmp	r3, #0
 800320a:	d003      	beq.n	8003214 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	4798      	blx	r3
    }
  }
  return status;
 8003214:	7bfb      	ldrb	r3, [r7, #15]
}
 8003216:	4618      	mov	r0, r3
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
	...

08003220 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003220:	b480      	push	{r7}
 8003222:	b087      	sub	sp, #28
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800322a:	2300      	movs	r3, #0
 800322c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800322e:	e15a      	b.n	80034e6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	2101      	movs	r1, #1
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	fa01 f303 	lsl.w	r3, r1, r3
 800323c:	4013      	ands	r3, r2
 800323e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2b00      	cmp	r3, #0
 8003244:	f000 814c 	beq.w	80034e0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f003 0303 	and.w	r3, r3, #3
 8003250:	2b01      	cmp	r3, #1
 8003252:	d005      	beq.n	8003260 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800325c:	2b02      	cmp	r3, #2
 800325e:	d130      	bne.n	80032c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	2203      	movs	r2, #3
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	43db      	mvns	r3, r3
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	4013      	ands	r3, r2
 8003276:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	68da      	ldr	r2, [r3, #12]
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	693a      	ldr	r2, [r7, #16]
 8003286:	4313      	orrs	r3, r2
 8003288:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003296:	2201      	movs	r2, #1
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	fa02 f303 	lsl.w	r3, r2, r3
 800329e:	43db      	mvns	r3, r3
 80032a0:	693a      	ldr	r2, [r7, #16]
 80032a2:	4013      	ands	r3, r2
 80032a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	091b      	lsrs	r3, r3, #4
 80032ac:	f003 0201 	and.w	r2, r3, #1
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f003 0303 	and.w	r3, r3, #3
 80032ca:	2b03      	cmp	r3, #3
 80032cc:	d017      	beq.n	80032fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	2203      	movs	r2, #3
 80032da:	fa02 f303 	lsl.w	r3, r2, r3
 80032de:	43db      	mvns	r3, r3
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	4013      	ands	r3, r2
 80032e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	689a      	ldr	r2, [r3, #8]
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	fa02 f303 	lsl.w	r3, r2, r3
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f003 0303 	and.w	r3, r3, #3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d123      	bne.n	8003352 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	08da      	lsrs	r2, r3, #3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	3208      	adds	r2, #8
 8003312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003316:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	f003 0307 	and.w	r3, r3, #7
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	220f      	movs	r2, #15
 8003322:	fa02 f303 	lsl.w	r3, r2, r3
 8003326:	43db      	mvns	r3, r3
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	4013      	ands	r3, r2
 800332c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	691a      	ldr	r2, [r3, #16]
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	f003 0307 	and.w	r3, r3, #7
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	fa02 f303 	lsl.w	r3, r2, r3
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	4313      	orrs	r3, r2
 8003342:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	08da      	lsrs	r2, r3, #3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	3208      	adds	r2, #8
 800334c:	6939      	ldr	r1, [r7, #16]
 800334e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	2203      	movs	r2, #3
 800335e:	fa02 f303 	lsl.w	r3, r2, r3
 8003362:	43db      	mvns	r3, r3
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	4013      	ands	r3, r2
 8003368:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f003 0203 	and.w	r2, r3, #3
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	4313      	orrs	r3, r2
 800337e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800338e:	2b00      	cmp	r3, #0
 8003390:	f000 80a6 	beq.w	80034e0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003394:	4b5b      	ldr	r3, [pc, #364]	@ (8003504 <HAL_GPIO_Init+0x2e4>)
 8003396:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003398:	4a5a      	ldr	r2, [pc, #360]	@ (8003504 <HAL_GPIO_Init+0x2e4>)
 800339a:	f043 0301 	orr.w	r3, r3, #1
 800339e:	6613      	str	r3, [r2, #96]	@ 0x60
 80033a0:	4b58      	ldr	r3, [pc, #352]	@ (8003504 <HAL_GPIO_Init+0x2e4>)
 80033a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	60bb      	str	r3, [r7, #8]
 80033aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033ac:	4a56      	ldr	r2, [pc, #344]	@ (8003508 <HAL_GPIO_Init+0x2e8>)
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	089b      	lsrs	r3, r3, #2
 80033b2:	3302      	adds	r3, #2
 80033b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f003 0303 	and.w	r3, r3, #3
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	220f      	movs	r2, #15
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	43db      	mvns	r3, r3
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	4013      	ands	r3, r2
 80033ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80033d6:	d01f      	beq.n	8003418 <HAL_GPIO_Init+0x1f8>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a4c      	ldr	r2, [pc, #304]	@ (800350c <HAL_GPIO_Init+0x2ec>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d019      	beq.n	8003414 <HAL_GPIO_Init+0x1f4>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a4b      	ldr	r2, [pc, #300]	@ (8003510 <HAL_GPIO_Init+0x2f0>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d013      	beq.n	8003410 <HAL_GPIO_Init+0x1f0>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a4a      	ldr	r2, [pc, #296]	@ (8003514 <HAL_GPIO_Init+0x2f4>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d00d      	beq.n	800340c <HAL_GPIO_Init+0x1ec>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a49      	ldr	r2, [pc, #292]	@ (8003518 <HAL_GPIO_Init+0x2f8>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d007      	beq.n	8003408 <HAL_GPIO_Init+0x1e8>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a48      	ldr	r2, [pc, #288]	@ (800351c <HAL_GPIO_Init+0x2fc>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d101      	bne.n	8003404 <HAL_GPIO_Init+0x1e4>
 8003400:	2305      	movs	r3, #5
 8003402:	e00a      	b.n	800341a <HAL_GPIO_Init+0x1fa>
 8003404:	2306      	movs	r3, #6
 8003406:	e008      	b.n	800341a <HAL_GPIO_Init+0x1fa>
 8003408:	2304      	movs	r3, #4
 800340a:	e006      	b.n	800341a <HAL_GPIO_Init+0x1fa>
 800340c:	2303      	movs	r3, #3
 800340e:	e004      	b.n	800341a <HAL_GPIO_Init+0x1fa>
 8003410:	2302      	movs	r3, #2
 8003412:	e002      	b.n	800341a <HAL_GPIO_Init+0x1fa>
 8003414:	2301      	movs	r3, #1
 8003416:	e000      	b.n	800341a <HAL_GPIO_Init+0x1fa>
 8003418:	2300      	movs	r3, #0
 800341a:	697a      	ldr	r2, [r7, #20]
 800341c:	f002 0203 	and.w	r2, r2, #3
 8003420:	0092      	lsls	r2, r2, #2
 8003422:	4093      	lsls	r3, r2
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	4313      	orrs	r3, r2
 8003428:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800342a:	4937      	ldr	r1, [pc, #220]	@ (8003508 <HAL_GPIO_Init+0x2e8>)
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	089b      	lsrs	r3, r3, #2
 8003430:	3302      	adds	r3, #2
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003438:	4b39      	ldr	r3, [pc, #228]	@ (8003520 <HAL_GPIO_Init+0x300>)
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	43db      	mvns	r3, r3
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	4013      	ands	r3, r2
 8003446:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d003      	beq.n	800345c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	4313      	orrs	r3, r2
 800345a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800345c:	4a30      	ldr	r2, [pc, #192]	@ (8003520 <HAL_GPIO_Init+0x300>)
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003462:	4b2f      	ldr	r3, [pc, #188]	@ (8003520 <HAL_GPIO_Init+0x300>)
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	43db      	mvns	r3, r3
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	4013      	ands	r3, r2
 8003470:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d003      	beq.n	8003486 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	4313      	orrs	r3, r2
 8003484:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003486:	4a26      	ldr	r2, [pc, #152]	@ (8003520 <HAL_GPIO_Init+0x300>)
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800348c:	4b24      	ldr	r3, [pc, #144]	@ (8003520 <HAL_GPIO_Init+0x300>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	43db      	mvns	r3, r3
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	4013      	ands	r3, r2
 800349a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d003      	beq.n	80034b0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80034b0:	4a1b      	ldr	r2, [pc, #108]	@ (8003520 <HAL_GPIO_Init+0x300>)
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80034b6:	4b1a      	ldr	r3, [pc, #104]	@ (8003520 <HAL_GPIO_Init+0x300>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	43db      	mvns	r3, r3
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	4013      	ands	r3, r2
 80034c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d003      	beq.n	80034da <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80034da:	4a11      	ldr	r2, [pc, #68]	@ (8003520 <HAL_GPIO_Init+0x300>)
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	3301      	adds	r3, #1
 80034e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	fa22 f303 	lsr.w	r3, r2, r3
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f47f ae9d 	bne.w	8003230 <HAL_GPIO_Init+0x10>
  }
}
 80034f6:	bf00      	nop
 80034f8:	bf00      	nop
 80034fa:	371c      	adds	r7, #28
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr
 8003504:	40021000 	.word	0x40021000
 8003508:	40010000 	.word	0x40010000
 800350c:	48000400 	.word	0x48000400
 8003510:	48000800 	.word	0x48000800
 8003514:	48000c00 	.word	0x48000c00
 8003518:	48001000 	.word	0x48001000
 800351c:	48001400 	.word	0x48001400
 8003520:	40010400 	.word	0x40010400

08003524 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003524:	b480      	push	{r7}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	460b      	mov	r3, r1
 800352e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	691a      	ldr	r2, [r3, #16]
 8003534:	887b      	ldrh	r3, [r7, #2]
 8003536:	4013      	ands	r3, r2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d002      	beq.n	8003542 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800353c:	2301      	movs	r3, #1
 800353e:	73fb      	strb	r3, [r7, #15]
 8003540:	e001      	b.n	8003546 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003542:	2300      	movs	r3, #0
 8003544:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003546:	7bfb      	ldrb	r3, [r7, #15]
}
 8003548:	4618      	mov	r0, r3
 800354a:	3714      	adds	r7, #20
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	460b      	mov	r3, r1
 800355e:	807b      	strh	r3, [r7, #2]
 8003560:	4613      	mov	r3, r2
 8003562:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003564:	787b      	ldrb	r3, [r7, #1]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800356a:	887a      	ldrh	r2, [r7, #2]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003570:	e002      	b.n	8003578 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003572:	887a      	ldrh	r2, [r7, #2]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003584:	b480      	push	{r7}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	460b      	mov	r3, r1
 800358e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	695b      	ldr	r3, [r3, #20]
 8003594:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003596:	887a      	ldrh	r2, [r7, #2]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	4013      	ands	r3, r2
 800359c:	041a      	lsls	r2, r3, #16
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	43d9      	mvns	r1, r3
 80035a2:	887b      	ldrh	r3, [r7, #2]
 80035a4:	400b      	ands	r3, r1
 80035a6:	431a      	orrs	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	619a      	str	r2, [r3, #24]
}
 80035ac:	bf00      	nop
 80035ae:	3714      	adds	r7, #20
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d141      	bne.n	800364a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80035c6:	4b4b      	ldr	r3, [pc, #300]	@ (80036f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80035ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035d2:	d131      	bne.n	8003638 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80035d4:	4b47      	ldr	r3, [pc, #284]	@ (80036f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035da:	4a46      	ldr	r2, [pc, #280]	@ (80036f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80035e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80035e4:	4b43      	ldr	r3, [pc, #268]	@ (80036f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80035ec:	4a41      	ldr	r2, [pc, #260]	@ (80036f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80035f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80035f4:	4b40      	ldr	r3, [pc, #256]	@ (80036f8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2232      	movs	r2, #50	@ 0x32
 80035fa:	fb02 f303 	mul.w	r3, r2, r3
 80035fe:	4a3f      	ldr	r2, [pc, #252]	@ (80036fc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003600:	fba2 2303 	umull	r2, r3, r2, r3
 8003604:	0c9b      	lsrs	r3, r3, #18
 8003606:	3301      	adds	r3, #1
 8003608:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800360a:	e002      	b.n	8003612 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	3b01      	subs	r3, #1
 8003610:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003612:	4b38      	ldr	r3, [pc, #224]	@ (80036f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800361a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800361e:	d102      	bne.n	8003626 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1f2      	bne.n	800360c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003626:	4b33      	ldr	r3, [pc, #204]	@ (80036f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800362e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003632:	d158      	bne.n	80036e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e057      	b.n	80036e8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003638:	4b2e      	ldr	r3, [pc, #184]	@ (80036f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800363a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800363e:	4a2d      	ldr	r2, [pc, #180]	@ (80036f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003640:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003644:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003648:	e04d      	b.n	80036e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003650:	d141      	bne.n	80036d6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003652:	4b28      	ldr	r3, [pc, #160]	@ (80036f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800365a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800365e:	d131      	bne.n	80036c4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003660:	4b24      	ldr	r3, [pc, #144]	@ (80036f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003662:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003666:	4a23      	ldr	r2, [pc, #140]	@ (80036f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003668:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800366c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003670:	4b20      	ldr	r3, [pc, #128]	@ (80036f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003678:	4a1e      	ldr	r2, [pc, #120]	@ (80036f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800367a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800367e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003680:	4b1d      	ldr	r3, [pc, #116]	@ (80036f8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2232      	movs	r2, #50	@ 0x32
 8003686:	fb02 f303 	mul.w	r3, r2, r3
 800368a:	4a1c      	ldr	r2, [pc, #112]	@ (80036fc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800368c:	fba2 2303 	umull	r2, r3, r2, r3
 8003690:	0c9b      	lsrs	r3, r3, #18
 8003692:	3301      	adds	r3, #1
 8003694:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003696:	e002      	b.n	800369e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	3b01      	subs	r3, #1
 800369c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800369e:	4b15      	ldr	r3, [pc, #84]	@ (80036f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036aa:	d102      	bne.n	80036b2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1f2      	bne.n	8003698 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036b2:	4b10      	ldr	r3, [pc, #64]	@ (80036f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036be:	d112      	bne.n	80036e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e011      	b.n	80036e8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036c4:	4b0b      	ldr	r3, [pc, #44]	@ (80036f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036ca:	4a0a      	ldr	r2, [pc, #40]	@ (80036f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80036d4:	e007      	b.n	80036e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80036d6:	4b07      	ldr	r3, [pc, #28]	@ (80036f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80036de:	4a05      	ldr	r2, [pc, #20]	@ (80036f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036e0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80036e4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3714      	adds	r7, #20
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr
 80036f4:	40007000 	.word	0x40007000
 80036f8:	20000004 	.word	0x20000004
 80036fc:	431bde83 	.word	0x431bde83

08003700 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003700:	b480      	push	{r7}
 8003702:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003704:	4b05      	ldr	r3, [pc, #20]	@ (800371c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	4a04      	ldr	r2, [pc, #16]	@ (800371c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800370a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800370e:	6093      	str	r3, [r2, #8]
}
 8003710:	bf00      	nop
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	40007000 	.word	0x40007000

08003720 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b088      	sub	sp, #32
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e2fe      	b.n	8003d30 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d075      	beq.n	800382a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800373e:	4b97      	ldr	r3, [pc, #604]	@ (800399c <HAL_RCC_OscConfig+0x27c>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f003 030c 	and.w	r3, r3, #12
 8003746:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003748:	4b94      	ldr	r3, [pc, #592]	@ (800399c <HAL_RCC_OscConfig+0x27c>)
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	f003 0303 	and.w	r3, r3, #3
 8003750:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	2b0c      	cmp	r3, #12
 8003756:	d102      	bne.n	800375e <HAL_RCC_OscConfig+0x3e>
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	2b03      	cmp	r3, #3
 800375c:	d002      	beq.n	8003764 <HAL_RCC_OscConfig+0x44>
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	2b08      	cmp	r3, #8
 8003762:	d10b      	bne.n	800377c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003764:	4b8d      	ldr	r3, [pc, #564]	@ (800399c <HAL_RCC_OscConfig+0x27c>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d05b      	beq.n	8003828 <HAL_RCC_OscConfig+0x108>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d157      	bne.n	8003828 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e2d9      	b.n	8003d30 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003784:	d106      	bne.n	8003794 <HAL_RCC_OscConfig+0x74>
 8003786:	4b85      	ldr	r3, [pc, #532]	@ (800399c <HAL_RCC_OscConfig+0x27c>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a84      	ldr	r2, [pc, #528]	@ (800399c <HAL_RCC_OscConfig+0x27c>)
 800378c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003790:	6013      	str	r3, [r2, #0]
 8003792:	e01d      	b.n	80037d0 <HAL_RCC_OscConfig+0xb0>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800379c:	d10c      	bne.n	80037b8 <HAL_RCC_OscConfig+0x98>
 800379e:	4b7f      	ldr	r3, [pc, #508]	@ (800399c <HAL_RCC_OscConfig+0x27c>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a7e      	ldr	r2, [pc, #504]	@ (800399c <HAL_RCC_OscConfig+0x27c>)
 80037a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037a8:	6013      	str	r3, [r2, #0]
 80037aa:	4b7c      	ldr	r3, [pc, #496]	@ (800399c <HAL_RCC_OscConfig+0x27c>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a7b      	ldr	r2, [pc, #492]	@ (800399c <HAL_RCC_OscConfig+0x27c>)
 80037b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037b4:	6013      	str	r3, [r2, #0]
 80037b6:	e00b      	b.n	80037d0 <HAL_RCC_OscConfig+0xb0>
 80037b8:	4b78      	ldr	r3, [pc, #480]	@ (800399c <HAL_RCC_OscConfig+0x27c>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a77      	ldr	r2, [pc, #476]	@ (800399c <HAL_RCC_OscConfig+0x27c>)
 80037be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037c2:	6013      	str	r3, [r2, #0]
 80037c4:	4b75      	ldr	r3, [pc, #468]	@ (800399c <HAL_RCC_OscConfig+0x27c>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a74      	ldr	r2, [pc, #464]	@ (800399c <HAL_RCC_OscConfig+0x27c>)
 80037ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d013      	beq.n	8003800 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d8:	f7ff fb24 	bl	8002e24 <HAL_GetTick>
 80037dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037de:	e008      	b.n	80037f2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037e0:	f7ff fb20 	bl	8002e24 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b64      	cmp	r3, #100	@ 0x64
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e29e      	b.n	8003d30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037f2:	4b6a      	ldr	r3, [pc, #424]	@ (800399c <HAL_RCC_OscConfig+0x27c>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d0f0      	beq.n	80037e0 <HAL_RCC_OscConfig+0xc0>
 80037fe:	e014      	b.n	800382a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003800:	f7ff fb10 	bl	8002e24 <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003808:	f7ff fb0c 	bl	8002e24 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b64      	cmp	r3, #100	@ 0x64
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e28a      	b.n	8003d30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800381a:	4b60      	ldr	r3, [pc, #384]	@ (800399c <HAL_RCC_OscConfig+0x27c>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1f0      	bne.n	8003808 <HAL_RCC_OscConfig+0xe8>
 8003826:	e000      	b.n	800382a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d075      	beq.n	8003922 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003836:	4b59      	ldr	r3, [pc, #356]	@ (800399c <HAL_RCC_OscConfig+0x27c>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f003 030c 	and.w	r3, r3, #12
 800383e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003840:	4b56      	ldr	r3, [pc, #344]	@ (800399c <HAL_RCC_OscConfig+0x27c>)
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	f003 0303 	and.w	r3, r3, #3
 8003848:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	2b0c      	cmp	r3, #12
 800384e:	d102      	bne.n	8003856 <HAL_RCC_OscConfig+0x136>
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	2b02      	cmp	r3, #2
 8003854:	d002      	beq.n	800385c <HAL_RCC_OscConfig+0x13c>
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	2b04      	cmp	r3, #4
 800385a:	d11f      	bne.n	800389c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800385c:	4b4f      	ldr	r3, [pc, #316]	@ (800399c <HAL_RCC_OscConfig+0x27c>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003864:	2b00      	cmp	r3, #0
 8003866:	d005      	beq.n	8003874 <HAL_RCC_OscConfig+0x154>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d101      	bne.n	8003874 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e25d      	b.n	8003d30 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003874:	4b49      	ldr	r3, [pc, #292]	@ (800399c <HAL_RCC_OscConfig+0x27c>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	061b      	lsls	r3, r3, #24
 8003882:	4946      	ldr	r1, [pc, #280]	@ (800399c <HAL_RCC_OscConfig+0x27c>)
 8003884:	4313      	orrs	r3, r2
 8003886:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003888:	4b45      	ldr	r3, [pc, #276]	@ (80039a0 <HAL_RCC_OscConfig+0x280>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4618      	mov	r0, r3
 800388e:	f7ff fa7d 	bl	8002d8c <HAL_InitTick>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d043      	beq.n	8003920 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e249      	b.n	8003d30 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d023      	beq.n	80038ec <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038a4:	4b3d      	ldr	r3, [pc, #244]	@ (800399c <HAL_RCC_OscConfig+0x27c>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a3c      	ldr	r2, [pc, #240]	@ (800399c <HAL_RCC_OscConfig+0x27c>)
 80038aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b0:	f7ff fab8 	bl	8002e24 <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038b6:	e008      	b.n	80038ca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038b8:	f7ff fab4 	bl	8002e24 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e232      	b.n	8003d30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038ca:	4b34      	ldr	r3, [pc, #208]	@ (800399c <HAL_RCC_OscConfig+0x27c>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d0f0      	beq.n	80038b8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d6:	4b31      	ldr	r3, [pc, #196]	@ (800399c <HAL_RCC_OscConfig+0x27c>)
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	061b      	lsls	r3, r3, #24
 80038e4:	492d      	ldr	r1, [pc, #180]	@ (800399c <HAL_RCC_OscConfig+0x27c>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	604b      	str	r3, [r1, #4]
 80038ea:	e01a      	b.n	8003922 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038ec:	4b2b      	ldr	r3, [pc, #172]	@ (800399c <HAL_RCC_OscConfig+0x27c>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a2a      	ldr	r2, [pc, #168]	@ (800399c <HAL_RCC_OscConfig+0x27c>)
 80038f2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f8:	f7ff fa94 	bl	8002e24 <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038fe:	e008      	b.n	8003912 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003900:	f7ff fa90 	bl	8002e24 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b02      	cmp	r3, #2
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e20e      	b.n	8003d30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003912:	4b22      	ldr	r3, [pc, #136]	@ (800399c <HAL_RCC_OscConfig+0x27c>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1f0      	bne.n	8003900 <HAL_RCC_OscConfig+0x1e0>
 800391e:	e000      	b.n	8003922 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003920:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0308 	and.w	r3, r3, #8
 800392a:	2b00      	cmp	r3, #0
 800392c:	d041      	beq.n	80039b2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d01c      	beq.n	8003970 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003936:	4b19      	ldr	r3, [pc, #100]	@ (800399c <HAL_RCC_OscConfig+0x27c>)
 8003938:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800393c:	4a17      	ldr	r2, [pc, #92]	@ (800399c <HAL_RCC_OscConfig+0x27c>)
 800393e:	f043 0301 	orr.w	r3, r3, #1
 8003942:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003946:	f7ff fa6d 	bl	8002e24 <HAL_GetTick>
 800394a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800394c:	e008      	b.n	8003960 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800394e:	f7ff fa69 	bl	8002e24 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	2b02      	cmp	r3, #2
 800395a:	d901      	bls.n	8003960 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e1e7      	b.n	8003d30 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003960:	4b0e      	ldr	r3, [pc, #56]	@ (800399c <HAL_RCC_OscConfig+0x27c>)
 8003962:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d0ef      	beq.n	800394e <HAL_RCC_OscConfig+0x22e>
 800396e:	e020      	b.n	80039b2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003970:	4b0a      	ldr	r3, [pc, #40]	@ (800399c <HAL_RCC_OscConfig+0x27c>)
 8003972:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003976:	4a09      	ldr	r2, [pc, #36]	@ (800399c <HAL_RCC_OscConfig+0x27c>)
 8003978:	f023 0301 	bic.w	r3, r3, #1
 800397c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003980:	f7ff fa50 	bl	8002e24 <HAL_GetTick>
 8003984:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003986:	e00d      	b.n	80039a4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003988:	f7ff fa4c 	bl	8002e24 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b02      	cmp	r3, #2
 8003994:	d906      	bls.n	80039a4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e1ca      	b.n	8003d30 <HAL_RCC_OscConfig+0x610>
 800399a:	bf00      	nop
 800399c:	40021000 	.word	0x40021000
 80039a0:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039a4:	4b8c      	ldr	r3, [pc, #560]	@ (8003bd8 <HAL_RCC_OscConfig+0x4b8>)
 80039a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1ea      	bne.n	8003988 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0304 	and.w	r3, r3, #4
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f000 80a6 	beq.w	8003b0c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039c0:	2300      	movs	r3, #0
 80039c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80039c4:	4b84      	ldr	r3, [pc, #528]	@ (8003bd8 <HAL_RCC_OscConfig+0x4b8>)
 80039c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d101      	bne.n	80039d4 <HAL_RCC_OscConfig+0x2b4>
 80039d0:	2301      	movs	r3, #1
 80039d2:	e000      	b.n	80039d6 <HAL_RCC_OscConfig+0x2b6>
 80039d4:	2300      	movs	r3, #0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00d      	beq.n	80039f6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039da:	4b7f      	ldr	r3, [pc, #508]	@ (8003bd8 <HAL_RCC_OscConfig+0x4b8>)
 80039dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039de:	4a7e      	ldr	r2, [pc, #504]	@ (8003bd8 <HAL_RCC_OscConfig+0x4b8>)
 80039e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80039e6:	4b7c      	ldr	r3, [pc, #496]	@ (8003bd8 <HAL_RCC_OscConfig+0x4b8>)
 80039e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039ee:	60fb      	str	r3, [r7, #12]
 80039f0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80039f2:	2301      	movs	r3, #1
 80039f4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039f6:	4b79      	ldr	r3, [pc, #484]	@ (8003bdc <HAL_RCC_OscConfig+0x4bc>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d118      	bne.n	8003a34 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a02:	4b76      	ldr	r3, [pc, #472]	@ (8003bdc <HAL_RCC_OscConfig+0x4bc>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a75      	ldr	r2, [pc, #468]	@ (8003bdc <HAL_RCC_OscConfig+0x4bc>)
 8003a08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a0e:	f7ff fa09 	bl	8002e24 <HAL_GetTick>
 8003a12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a14:	e008      	b.n	8003a28 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a16:	f7ff fa05 	bl	8002e24 <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d901      	bls.n	8003a28 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e183      	b.n	8003d30 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a28:	4b6c      	ldr	r3, [pc, #432]	@ (8003bdc <HAL_RCC_OscConfig+0x4bc>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d0f0      	beq.n	8003a16 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d108      	bne.n	8003a4e <HAL_RCC_OscConfig+0x32e>
 8003a3c:	4b66      	ldr	r3, [pc, #408]	@ (8003bd8 <HAL_RCC_OscConfig+0x4b8>)
 8003a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a42:	4a65      	ldr	r2, [pc, #404]	@ (8003bd8 <HAL_RCC_OscConfig+0x4b8>)
 8003a44:	f043 0301 	orr.w	r3, r3, #1
 8003a48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a4c:	e024      	b.n	8003a98 <HAL_RCC_OscConfig+0x378>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	2b05      	cmp	r3, #5
 8003a54:	d110      	bne.n	8003a78 <HAL_RCC_OscConfig+0x358>
 8003a56:	4b60      	ldr	r3, [pc, #384]	@ (8003bd8 <HAL_RCC_OscConfig+0x4b8>)
 8003a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a5c:	4a5e      	ldr	r2, [pc, #376]	@ (8003bd8 <HAL_RCC_OscConfig+0x4b8>)
 8003a5e:	f043 0304 	orr.w	r3, r3, #4
 8003a62:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a66:	4b5c      	ldr	r3, [pc, #368]	@ (8003bd8 <HAL_RCC_OscConfig+0x4b8>)
 8003a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a6c:	4a5a      	ldr	r2, [pc, #360]	@ (8003bd8 <HAL_RCC_OscConfig+0x4b8>)
 8003a6e:	f043 0301 	orr.w	r3, r3, #1
 8003a72:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a76:	e00f      	b.n	8003a98 <HAL_RCC_OscConfig+0x378>
 8003a78:	4b57      	ldr	r3, [pc, #348]	@ (8003bd8 <HAL_RCC_OscConfig+0x4b8>)
 8003a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a7e:	4a56      	ldr	r2, [pc, #344]	@ (8003bd8 <HAL_RCC_OscConfig+0x4b8>)
 8003a80:	f023 0301 	bic.w	r3, r3, #1
 8003a84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a88:	4b53      	ldr	r3, [pc, #332]	@ (8003bd8 <HAL_RCC_OscConfig+0x4b8>)
 8003a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a8e:	4a52      	ldr	r2, [pc, #328]	@ (8003bd8 <HAL_RCC_OscConfig+0x4b8>)
 8003a90:	f023 0304 	bic.w	r3, r3, #4
 8003a94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d016      	beq.n	8003ace <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa0:	f7ff f9c0 	bl	8002e24 <HAL_GetTick>
 8003aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003aa6:	e00a      	b.n	8003abe <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aa8:	f7ff f9bc 	bl	8002e24 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e138      	b.n	8003d30 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003abe:	4b46      	ldr	r3, [pc, #280]	@ (8003bd8 <HAL_RCC_OscConfig+0x4b8>)
 8003ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d0ed      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x388>
 8003acc:	e015      	b.n	8003afa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ace:	f7ff f9a9 	bl	8002e24 <HAL_GetTick>
 8003ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ad4:	e00a      	b.n	8003aec <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ad6:	f7ff f9a5 	bl	8002e24 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d901      	bls.n	8003aec <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e121      	b.n	8003d30 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003aec:	4b3a      	ldr	r3, [pc, #232]	@ (8003bd8 <HAL_RCC_OscConfig+0x4b8>)
 8003aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1ed      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003afa:	7ffb      	ldrb	r3, [r7, #31]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d105      	bne.n	8003b0c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b00:	4b35      	ldr	r3, [pc, #212]	@ (8003bd8 <HAL_RCC_OscConfig+0x4b8>)
 8003b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b04:	4a34      	ldr	r2, [pc, #208]	@ (8003bd8 <HAL_RCC_OscConfig+0x4b8>)
 8003b06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b0a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0320 	and.w	r3, r3, #32
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d03c      	beq.n	8003b92 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d01c      	beq.n	8003b5a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b20:	4b2d      	ldr	r3, [pc, #180]	@ (8003bd8 <HAL_RCC_OscConfig+0x4b8>)
 8003b22:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b26:	4a2c      	ldr	r2, [pc, #176]	@ (8003bd8 <HAL_RCC_OscConfig+0x4b8>)
 8003b28:	f043 0301 	orr.w	r3, r3, #1
 8003b2c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b30:	f7ff f978 	bl	8002e24 <HAL_GetTick>
 8003b34:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b36:	e008      	b.n	8003b4a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b38:	f7ff f974 	bl	8002e24 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e0f2      	b.n	8003d30 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b4a:	4b23      	ldr	r3, [pc, #140]	@ (8003bd8 <HAL_RCC_OscConfig+0x4b8>)
 8003b4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d0ef      	beq.n	8003b38 <HAL_RCC_OscConfig+0x418>
 8003b58:	e01b      	b.n	8003b92 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b5a:	4b1f      	ldr	r3, [pc, #124]	@ (8003bd8 <HAL_RCC_OscConfig+0x4b8>)
 8003b5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b60:	4a1d      	ldr	r2, [pc, #116]	@ (8003bd8 <HAL_RCC_OscConfig+0x4b8>)
 8003b62:	f023 0301 	bic.w	r3, r3, #1
 8003b66:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b6a:	f7ff f95b 	bl	8002e24 <HAL_GetTick>
 8003b6e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b70:	e008      	b.n	8003b84 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b72:	f7ff f957 	bl	8002e24 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d901      	bls.n	8003b84 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e0d5      	b.n	8003d30 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b84:	4b14      	ldr	r3, [pc, #80]	@ (8003bd8 <HAL_RCC_OscConfig+0x4b8>)
 8003b86:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1ef      	bne.n	8003b72 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	69db      	ldr	r3, [r3, #28]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	f000 80c9 	beq.w	8003d2e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b9c:	4b0e      	ldr	r3, [pc, #56]	@ (8003bd8 <HAL_RCC_OscConfig+0x4b8>)
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f003 030c 	and.w	r3, r3, #12
 8003ba4:	2b0c      	cmp	r3, #12
 8003ba6:	f000 8083 	beq.w	8003cb0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	69db      	ldr	r3, [r3, #28]
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d15e      	bne.n	8003c70 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bb2:	4b09      	ldr	r3, [pc, #36]	@ (8003bd8 <HAL_RCC_OscConfig+0x4b8>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a08      	ldr	r2, [pc, #32]	@ (8003bd8 <HAL_RCC_OscConfig+0x4b8>)
 8003bb8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003bbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bbe:	f7ff f931 	bl	8002e24 <HAL_GetTick>
 8003bc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bc4:	e00c      	b.n	8003be0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bc6:	f7ff f92d 	bl	8002e24 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d905      	bls.n	8003be0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e0ab      	b.n	8003d30 <HAL_RCC_OscConfig+0x610>
 8003bd8:	40021000 	.word	0x40021000
 8003bdc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003be0:	4b55      	ldr	r3, [pc, #340]	@ (8003d38 <HAL_RCC_OscConfig+0x618>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1ec      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bec:	4b52      	ldr	r3, [pc, #328]	@ (8003d38 <HAL_RCC_OscConfig+0x618>)
 8003bee:	68da      	ldr	r2, [r3, #12]
 8003bf0:	4b52      	ldr	r3, [pc, #328]	@ (8003d3c <HAL_RCC_OscConfig+0x61c>)
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	6a11      	ldr	r1, [r2, #32]
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003bfc:	3a01      	subs	r2, #1
 8003bfe:	0112      	lsls	r2, r2, #4
 8003c00:	4311      	orrs	r1, r2
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003c06:	0212      	lsls	r2, r2, #8
 8003c08:	4311      	orrs	r1, r2
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003c0e:	0852      	lsrs	r2, r2, #1
 8003c10:	3a01      	subs	r2, #1
 8003c12:	0552      	lsls	r2, r2, #21
 8003c14:	4311      	orrs	r1, r2
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003c1a:	0852      	lsrs	r2, r2, #1
 8003c1c:	3a01      	subs	r2, #1
 8003c1e:	0652      	lsls	r2, r2, #25
 8003c20:	4311      	orrs	r1, r2
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003c26:	06d2      	lsls	r2, r2, #27
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	4943      	ldr	r1, [pc, #268]	@ (8003d38 <HAL_RCC_OscConfig+0x618>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c30:	4b41      	ldr	r3, [pc, #260]	@ (8003d38 <HAL_RCC_OscConfig+0x618>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a40      	ldr	r2, [pc, #256]	@ (8003d38 <HAL_RCC_OscConfig+0x618>)
 8003c36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c3a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c3c:	4b3e      	ldr	r3, [pc, #248]	@ (8003d38 <HAL_RCC_OscConfig+0x618>)
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	4a3d      	ldr	r2, [pc, #244]	@ (8003d38 <HAL_RCC_OscConfig+0x618>)
 8003c42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c46:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c48:	f7ff f8ec 	bl	8002e24 <HAL_GetTick>
 8003c4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c4e:	e008      	b.n	8003c62 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c50:	f7ff f8e8 	bl	8002e24 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e066      	b.n	8003d30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c62:	4b35      	ldr	r3, [pc, #212]	@ (8003d38 <HAL_RCC_OscConfig+0x618>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d0f0      	beq.n	8003c50 <HAL_RCC_OscConfig+0x530>
 8003c6e:	e05e      	b.n	8003d2e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c70:	4b31      	ldr	r3, [pc, #196]	@ (8003d38 <HAL_RCC_OscConfig+0x618>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a30      	ldr	r2, [pc, #192]	@ (8003d38 <HAL_RCC_OscConfig+0x618>)
 8003c76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c7c:	f7ff f8d2 	bl	8002e24 <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c84:	f7ff f8ce 	bl	8002e24 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e04c      	b.n	8003d30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c96:	4b28      	ldr	r3, [pc, #160]	@ (8003d38 <HAL_RCC_OscConfig+0x618>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1f0      	bne.n	8003c84 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003ca2:	4b25      	ldr	r3, [pc, #148]	@ (8003d38 <HAL_RCC_OscConfig+0x618>)
 8003ca4:	68da      	ldr	r2, [r3, #12]
 8003ca6:	4924      	ldr	r1, [pc, #144]	@ (8003d38 <HAL_RCC_OscConfig+0x618>)
 8003ca8:	4b25      	ldr	r3, [pc, #148]	@ (8003d40 <HAL_RCC_OscConfig+0x620>)
 8003caa:	4013      	ands	r3, r2
 8003cac:	60cb      	str	r3, [r1, #12]
 8003cae:	e03e      	b.n	8003d2e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	69db      	ldr	r3, [r3, #28]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d101      	bne.n	8003cbc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e039      	b.n	8003d30 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003cbc:	4b1e      	ldr	r3, [pc, #120]	@ (8003d38 <HAL_RCC_OscConfig+0x618>)
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	f003 0203 	and.w	r2, r3, #3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d12c      	bne.n	8003d2a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d123      	bne.n	8003d2a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cec:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d11b      	bne.n	8003d2a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cfc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d113      	bne.n	8003d2a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d0c:	085b      	lsrs	r3, r3, #1
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d109      	bne.n	8003d2a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d20:	085b      	lsrs	r3, r3, #1
 8003d22:	3b01      	subs	r3, #1
 8003d24:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d001      	beq.n	8003d2e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e000      	b.n	8003d30 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3720      	adds	r7, #32
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	40021000 	.word	0x40021000
 8003d3c:	019f800c 	.word	0x019f800c
 8003d40:	feeefffc 	.word	0xfeeefffc

08003d44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b086      	sub	sp, #24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d101      	bne.n	8003d5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e11e      	b.n	8003f9a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d5c:	4b91      	ldr	r3, [pc, #580]	@ (8003fa4 <HAL_RCC_ClockConfig+0x260>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 030f 	and.w	r3, r3, #15
 8003d64:	683a      	ldr	r2, [r7, #0]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d910      	bls.n	8003d8c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d6a:	4b8e      	ldr	r3, [pc, #568]	@ (8003fa4 <HAL_RCC_ClockConfig+0x260>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f023 020f 	bic.w	r2, r3, #15
 8003d72:	498c      	ldr	r1, [pc, #560]	@ (8003fa4 <HAL_RCC_ClockConfig+0x260>)
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d7a:	4b8a      	ldr	r3, [pc, #552]	@ (8003fa4 <HAL_RCC_ClockConfig+0x260>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 030f 	and.w	r3, r3, #15
 8003d82:	683a      	ldr	r2, [r7, #0]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d001      	beq.n	8003d8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e106      	b.n	8003f9a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0301 	and.w	r3, r3, #1
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d073      	beq.n	8003e80 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	2b03      	cmp	r3, #3
 8003d9e:	d129      	bne.n	8003df4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003da0:	4b81      	ldr	r3, [pc, #516]	@ (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d101      	bne.n	8003db0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e0f4      	b.n	8003f9a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003db0:	f000 f99e 	bl	80040f0 <RCC_GetSysClockFreqFromPLLSource>
 8003db4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	4a7c      	ldr	r2, [pc, #496]	@ (8003fac <HAL_RCC_ClockConfig+0x268>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d93f      	bls.n	8003e3e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003dbe:	4b7a      	ldr	r3, [pc, #488]	@ (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d009      	beq.n	8003dde <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d033      	beq.n	8003e3e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d12f      	bne.n	8003e3e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003dde:	4b72      	ldr	r3, [pc, #456]	@ (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003de6:	4a70      	ldr	r2, [pc, #448]	@ (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003de8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003dee:	2380      	movs	r3, #128	@ 0x80
 8003df0:	617b      	str	r3, [r7, #20]
 8003df2:	e024      	b.n	8003e3e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d107      	bne.n	8003e0c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dfc:	4b6a      	ldr	r3, [pc, #424]	@ (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d109      	bne.n	8003e1c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e0c6      	b.n	8003f9a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e0c:	4b66      	ldr	r3, [pc, #408]	@ (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d101      	bne.n	8003e1c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e0be      	b.n	8003f9a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003e1c:	f000 f8ce 	bl	8003fbc <HAL_RCC_GetSysClockFreq>
 8003e20:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	4a61      	ldr	r2, [pc, #388]	@ (8003fac <HAL_RCC_ClockConfig+0x268>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d909      	bls.n	8003e3e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e2a:	4b5f      	ldr	r3, [pc, #380]	@ (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e32:	4a5d      	ldr	r2, [pc, #372]	@ (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003e34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e38:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003e3a:	2380      	movs	r3, #128	@ 0x80
 8003e3c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e3e:	4b5a      	ldr	r3, [pc, #360]	@ (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f023 0203 	bic.w	r2, r3, #3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	4957      	ldr	r1, [pc, #348]	@ (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e50:	f7fe ffe8 	bl	8002e24 <HAL_GetTick>
 8003e54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e56:	e00a      	b.n	8003e6e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e58:	f7fe ffe4 	bl	8002e24 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e095      	b.n	8003f9a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e6e:	4b4e      	ldr	r3, [pc, #312]	@ (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f003 020c 	and.w	r2, r3, #12
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d1eb      	bne.n	8003e58 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d023      	beq.n	8003ed4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0304 	and.w	r3, r3, #4
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d005      	beq.n	8003ea4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e98:	4b43      	ldr	r3, [pc, #268]	@ (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	4a42      	ldr	r2, [pc, #264]	@ (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003e9e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003ea2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0308 	and.w	r3, r3, #8
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d007      	beq.n	8003ec0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003eb0:	4b3d      	ldr	r3, [pc, #244]	@ (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003eb8:	4a3b      	ldr	r2, [pc, #236]	@ (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003eba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003ebe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ec0:	4b39      	ldr	r3, [pc, #228]	@ (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	4936      	ldr	r1, [pc, #216]	@ (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	608b      	str	r3, [r1, #8]
 8003ed2:	e008      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	2b80      	cmp	r3, #128	@ 0x80
 8003ed8:	d105      	bne.n	8003ee6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003eda:	4b33      	ldr	r3, [pc, #204]	@ (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	4a32      	ldr	r2, [pc, #200]	@ (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003ee0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ee4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ee6:	4b2f      	ldr	r3, [pc, #188]	@ (8003fa4 <HAL_RCC_ClockConfig+0x260>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 030f 	and.w	r3, r3, #15
 8003eee:	683a      	ldr	r2, [r7, #0]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d21d      	bcs.n	8003f30 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ef4:	4b2b      	ldr	r3, [pc, #172]	@ (8003fa4 <HAL_RCC_ClockConfig+0x260>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f023 020f 	bic.w	r2, r3, #15
 8003efc:	4929      	ldr	r1, [pc, #164]	@ (8003fa4 <HAL_RCC_ClockConfig+0x260>)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003f04:	f7fe ff8e 	bl	8002e24 <HAL_GetTick>
 8003f08:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f0a:	e00a      	b.n	8003f22 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f0c:	f7fe ff8a 	bl	8002e24 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e03b      	b.n	8003f9a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f22:	4b20      	ldr	r3, [pc, #128]	@ (8003fa4 <HAL_RCC_ClockConfig+0x260>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 030f 	and.w	r3, r3, #15
 8003f2a:	683a      	ldr	r2, [r7, #0]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d1ed      	bne.n	8003f0c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0304 	and.w	r3, r3, #4
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d008      	beq.n	8003f4e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f3c:	4b1a      	ldr	r3, [pc, #104]	@ (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	4917      	ldr	r1, [pc, #92]	@ (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0308 	and.w	r3, r3, #8
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d009      	beq.n	8003f6e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f5a:	4b13      	ldr	r3, [pc, #76]	@ (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	490f      	ldr	r1, [pc, #60]	@ (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f6e:	f000 f825 	bl	8003fbc <HAL_RCC_GetSysClockFreq>
 8003f72:	4602      	mov	r2, r0
 8003f74:	4b0c      	ldr	r3, [pc, #48]	@ (8003fa8 <HAL_RCC_ClockConfig+0x264>)
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	091b      	lsrs	r3, r3, #4
 8003f7a:	f003 030f 	and.w	r3, r3, #15
 8003f7e:	490c      	ldr	r1, [pc, #48]	@ (8003fb0 <HAL_RCC_ClockConfig+0x26c>)
 8003f80:	5ccb      	ldrb	r3, [r1, r3]
 8003f82:	f003 031f 	and.w	r3, r3, #31
 8003f86:	fa22 f303 	lsr.w	r3, r2, r3
 8003f8a:	4a0a      	ldr	r2, [pc, #40]	@ (8003fb4 <HAL_RCC_ClockConfig+0x270>)
 8003f8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8003fb8 <HAL_RCC_ClockConfig+0x274>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7fe fefa 	bl	8002d8c <HAL_InitTick>
 8003f98:	4603      	mov	r3, r0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3718      	adds	r7, #24
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	40022000 	.word	0x40022000
 8003fa8:	40021000 	.word	0x40021000
 8003fac:	04c4b400 	.word	0x04c4b400
 8003fb0:	0800a090 	.word	0x0800a090
 8003fb4:	20000004 	.word	0x20000004
 8003fb8:	20000008 	.word	0x20000008

08003fbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b087      	sub	sp, #28
 8003fc0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003fc2:	4b2c      	ldr	r3, [pc, #176]	@ (8004074 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f003 030c 	and.w	r3, r3, #12
 8003fca:	2b04      	cmp	r3, #4
 8003fcc:	d102      	bne.n	8003fd4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003fce:	4b2a      	ldr	r3, [pc, #168]	@ (8004078 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003fd0:	613b      	str	r3, [r7, #16]
 8003fd2:	e047      	b.n	8004064 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003fd4:	4b27      	ldr	r3, [pc, #156]	@ (8004074 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f003 030c 	and.w	r3, r3, #12
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	d102      	bne.n	8003fe6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003fe0:	4b26      	ldr	r3, [pc, #152]	@ (800407c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003fe2:	613b      	str	r3, [r7, #16]
 8003fe4:	e03e      	b.n	8004064 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003fe6:	4b23      	ldr	r3, [pc, #140]	@ (8004074 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f003 030c 	and.w	r3, r3, #12
 8003fee:	2b0c      	cmp	r3, #12
 8003ff0:	d136      	bne.n	8004060 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ff2:	4b20      	ldr	r3, [pc, #128]	@ (8004074 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	f003 0303 	and.w	r3, r3, #3
 8003ffa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ffc:	4b1d      	ldr	r3, [pc, #116]	@ (8004074 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	091b      	lsrs	r3, r3, #4
 8004002:	f003 030f 	and.w	r3, r3, #15
 8004006:	3301      	adds	r3, #1
 8004008:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2b03      	cmp	r3, #3
 800400e:	d10c      	bne.n	800402a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004010:	4a1a      	ldr	r2, [pc, #104]	@ (800407c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	fbb2 f3f3 	udiv	r3, r2, r3
 8004018:	4a16      	ldr	r2, [pc, #88]	@ (8004074 <HAL_RCC_GetSysClockFreq+0xb8>)
 800401a:	68d2      	ldr	r2, [r2, #12]
 800401c:	0a12      	lsrs	r2, r2, #8
 800401e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004022:	fb02 f303 	mul.w	r3, r2, r3
 8004026:	617b      	str	r3, [r7, #20]
      break;
 8004028:	e00c      	b.n	8004044 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800402a:	4a13      	ldr	r2, [pc, #76]	@ (8004078 <HAL_RCC_GetSysClockFreq+0xbc>)
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004032:	4a10      	ldr	r2, [pc, #64]	@ (8004074 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004034:	68d2      	ldr	r2, [r2, #12]
 8004036:	0a12      	lsrs	r2, r2, #8
 8004038:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800403c:	fb02 f303 	mul.w	r3, r2, r3
 8004040:	617b      	str	r3, [r7, #20]
      break;
 8004042:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004044:	4b0b      	ldr	r3, [pc, #44]	@ (8004074 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	0e5b      	lsrs	r3, r3, #25
 800404a:	f003 0303 	and.w	r3, r3, #3
 800404e:	3301      	adds	r3, #1
 8004050:	005b      	lsls	r3, r3, #1
 8004052:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	fbb2 f3f3 	udiv	r3, r2, r3
 800405c:	613b      	str	r3, [r7, #16]
 800405e:	e001      	b.n	8004064 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004060:	2300      	movs	r3, #0
 8004062:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004064:	693b      	ldr	r3, [r7, #16]
}
 8004066:	4618      	mov	r0, r3
 8004068:	371c      	adds	r7, #28
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	40021000 	.word	0x40021000
 8004078:	00f42400 	.word	0x00f42400
 800407c:	016e3600 	.word	0x016e3600

08004080 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004080:	b480      	push	{r7}
 8004082:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004084:	4b03      	ldr	r3, [pc, #12]	@ (8004094 <HAL_RCC_GetHCLKFreq+0x14>)
 8004086:	681b      	ldr	r3, [r3, #0]
}
 8004088:	4618      	mov	r0, r3
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	20000004 	.word	0x20000004

08004098 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800409c:	f7ff fff0 	bl	8004080 <HAL_RCC_GetHCLKFreq>
 80040a0:	4602      	mov	r2, r0
 80040a2:	4b06      	ldr	r3, [pc, #24]	@ (80040bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	0a1b      	lsrs	r3, r3, #8
 80040a8:	f003 0307 	and.w	r3, r3, #7
 80040ac:	4904      	ldr	r1, [pc, #16]	@ (80040c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80040ae:	5ccb      	ldrb	r3, [r1, r3]
 80040b0:	f003 031f 	and.w	r3, r3, #31
 80040b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	40021000 	.word	0x40021000
 80040c0:	0800a0a0 	.word	0x0800a0a0

080040c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80040c8:	f7ff ffda 	bl	8004080 <HAL_RCC_GetHCLKFreq>
 80040cc:	4602      	mov	r2, r0
 80040ce:	4b06      	ldr	r3, [pc, #24]	@ (80040e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	0adb      	lsrs	r3, r3, #11
 80040d4:	f003 0307 	and.w	r3, r3, #7
 80040d8:	4904      	ldr	r1, [pc, #16]	@ (80040ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80040da:	5ccb      	ldrb	r3, [r1, r3]
 80040dc:	f003 031f 	and.w	r3, r3, #31
 80040e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	40021000 	.word	0x40021000
 80040ec:	0800a0a0 	.word	0x0800a0a0

080040f0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b087      	sub	sp, #28
 80040f4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80040f6:	4b1e      	ldr	r3, [pc, #120]	@ (8004170 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	f003 0303 	and.w	r3, r3, #3
 80040fe:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004100:	4b1b      	ldr	r3, [pc, #108]	@ (8004170 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	091b      	lsrs	r3, r3, #4
 8004106:	f003 030f 	and.w	r3, r3, #15
 800410a:	3301      	adds	r3, #1
 800410c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	2b03      	cmp	r3, #3
 8004112:	d10c      	bne.n	800412e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004114:	4a17      	ldr	r2, [pc, #92]	@ (8004174 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	fbb2 f3f3 	udiv	r3, r2, r3
 800411c:	4a14      	ldr	r2, [pc, #80]	@ (8004170 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800411e:	68d2      	ldr	r2, [r2, #12]
 8004120:	0a12      	lsrs	r2, r2, #8
 8004122:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004126:	fb02 f303 	mul.w	r3, r2, r3
 800412a:	617b      	str	r3, [r7, #20]
    break;
 800412c:	e00c      	b.n	8004148 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800412e:	4a12      	ldr	r2, [pc, #72]	@ (8004178 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	fbb2 f3f3 	udiv	r3, r2, r3
 8004136:	4a0e      	ldr	r2, [pc, #56]	@ (8004170 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004138:	68d2      	ldr	r2, [r2, #12]
 800413a:	0a12      	lsrs	r2, r2, #8
 800413c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004140:	fb02 f303 	mul.w	r3, r2, r3
 8004144:	617b      	str	r3, [r7, #20]
    break;
 8004146:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004148:	4b09      	ldr	r3, [pc, #36]	@ (8004170 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	0e5b      	lsrs	r3, r3, #25
 800414e:	f003 0303 	and.w	r3, r3, #3
 8004152:	3301      	adds	r3, #1
 8004154:	005b      	lsls	r3, r3, #1
 8004156:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004158:	697a      	ldr	r2, [r7, #20]
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004160:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004162:	687b      	ldr	r3, [r7, #4]
}
 8004164:	4618      	mov	r0, r3
 8004166:	371c      	adds	r7, #28
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr
 8004170:	40021000 	.word	0x40021000
 8004174:	016e3600 	.word	0x016e3600
 8004178:	00f42400 	.word	0x00f42400

0800417c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004184:	2300      	movs	r3, #0
 8004186:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004188:	2300      	movs	r3, #0
 800418a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004194:	2b00      	cmp	r3, #0
 8004196:	f000 8098 	beq.w	80042ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800419a:	2300      	movs	r3, #0
 800419c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800419e:	4b43      	ldr	r3, [pc, #268]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10d      	bne.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041aa:	4b40      	ldr	r3, [pc, #256]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ae:	4a3f      	ldr	r2, [pc, #252]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80041b6:	4b3d      	ldr	r3, [pc, #244]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041be:	60bb      	str	r3, [r7, #8]
 80041c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041c2:	2301      	movs	r3, #1
 80041c4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041c6:	4b3a      	ldr	r3, [pc, #232]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a39      	ldr	r2, [pc, #228]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80041cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041d2:	f7fe fe27 	bl	8002e24 <HAL_GetTick>
 80041d6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041d8:	e009      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041da:	f7fe fe23 	bl	8002e24 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d902      	bls.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	74fb      	strb	r3, [r7, #19]
        break;
 80041ec:	e005      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041ee:	4b30      	ldr	r3, [pc, #192]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d0ef      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80041fa:	7cfb      	ldrb	r3, [r7, #19]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d159      	bne.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004200:	4b2a      	ldr	r3, [pc, #168]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004202:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004206:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800420a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d01e      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	429a      	cmp	r2, r3
 800421a:	d019      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800421c:	4b23      	ldr	r3, [pc, #140]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800421e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004222:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004226:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004228:	4b20      	ldr	r3, [pc, #128]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800422a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800422e:	4a1f      	ldr	r2, [pc, #124]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004230:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004234:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004238:	4b1c      	ldr	r3, [pc, #112]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800423a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800423e:	4a1b      	ldr	r2, [pc, #108]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004240:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004244:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004248:	4a18      	ldr	r2, [pc, #96]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b00      	cmp	r3, #0
 8004258:	d016      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800425a:	f7fe fde3 	bl	8002e24 <HAL_GetTick>
 800425e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004260:	e00b      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004262:	f7fe fddf 	bl	8002e24 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004270:	4293      	cmp	r3, r2
 8004272:	d902      	bls.n	800427a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	74fb      	strb	r3, [r7, #19]
            break;
 8004278:	e006      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800427a:	4b0c      	ldr	r3, [pc, #48]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800427c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004280:	f003 0302 	and.w	r3, r3, #2
 8004284:	2b00      	cmp	r3, #0
 8004286:	d0ec      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004288:	7cfb      	ldrb	r3, [r7, #19]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d10b      	bne.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800428e:	4b07      	ldr	r3, [pc, #28]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004290:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004294:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800429c:	4903      	ldr	r1, [pc, #12]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80042a4:	e008      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80042a6:	7cfb      	ldrb	r3, [r7, #19]
 80042a8:	74bb      	strb	r3, [r7, #18]
 80042aa:	e005      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80042ac:	40021000 	.word	0x40021000
 80042b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042b4:	7cfb      	ldrb	r3, [r7, #19]
 80042b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042b8:	7c7b      	ldrb	r3, [r7, #17]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d105      	bne.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042be:	4ba7      	ldr	r3, [pc, #668]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042c2:	4aa6      	ldr	r2, [pc, #664]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042c8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00a      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042d6:	4ba1      	ldr	r3, [pc, #644]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042dc:	f023 0203 	bic.w	r2, r3, #3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	499d      	ldr	r1, [pc, #628]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00a      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042f8:	4b98      	ldr	r3, [pc, #608]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042fe:	f023 020c 	bic.w	r2, r3, #12
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	4995      	ldr	r1, [pc, #596]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004308:	4313      	orrs	r3, r2
 800430a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0304 	and.w	r3, r3, #4
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00a      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800431a:	4b90      	ldr	r3, [pc, #576]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800431c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004320:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	498c      	ldr	r1, [pc, #560]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800432a:	4313      	orrs	r3, r2
 800432c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0308 	and.w	r3, r3, #8
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00a      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800433c:	4b87      	ldr	r3, [pc, #540]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800433e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004342:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	4984      	ldr	r1, [pc, #528]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800434c:	4313      	orrs	r3, r2
 800434e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0310 	and.w	r3, r3, #16
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00a      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800435e:	4b7f      	ldr	r3, [pc, #508]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004360:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004364:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	497b      	ldr	r1, [pc, #492]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800436e:	4313      	orrs	r3, r2
 8004370:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0320 	and.w	r3, r3, #32
 800437c:	2b00      	cmp	r3, #0
 800437e:	d00a      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004380:	4b76      	ldr	r3, [pc, #472]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004382:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004386:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	4973      	ldr	r1, [pc, #460]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004390:	4313      	orrs	r3, r2
 8004392:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00a      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043a2:	4b6e      	ldr	r3, [pc, #440]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043a8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	69db      	ldr	r3, [r3, #28]
 80043b0:	496a      	ldr	r1, [pc, #424]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d00a      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043c4:	4b65      	ldr	r3, [pc, #404]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ca:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	4962      	ldr	r1, [pc, #392]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00a      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043e6:	4b5d      	ldr	r3, [pc, #372]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f4:	4959      	ldr	r1, [pc, #356]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d00a      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004408:	4b54      	ldr	r3, [pc, #336]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800440a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800440e:	f023 0203 	bic.w	r2, r3, #3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004416:	4951      	ldr	r1, [pc, #324]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004418:	4313      	orrs	r3, r2
 800441a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00a      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800442a:	4b4c      	ldr	r3, [pc, #304]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800442c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004430:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004438:	4948      	ldr	r1, [pc, #288]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800443a:	4313      	orrs	r3, r2
 800443c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004448:	2b00      	cmp	r3, #0
 800444a:	d015      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800444c:	4b43      	ldr	r3, [pc, #268]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800444e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004452:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800445a:	4940      	ldr	r1, [pc, #256]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800445c:	4313      	orrs	r3, r2
 800445e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004466:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800446a:	d105      	bne.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800446c:	4b3b      	ldr	r3, [pc, #236]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	4a3a      	ldr	r2, [pc, #232]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004472:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004476:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004480:	2b00      	cmp	r3, #0
 8004482:	d015      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004484:	4b35      	ldr	r3, [pc, #212]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004486:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800448a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004492:	4932      	ldr	r1, [pc, #200]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004494:	4313      	orrs	r3, r2
 8004496:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800449e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044a2:	d105      	bne.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044a4:	4b2d      	ldr	r3, [pc, #180]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	4a2c      	ldr	r2, [pc, #176]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80044ae:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d015      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80044bc:	4b27      	ldr	r3, [pc, #156]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044c2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ca:	4924      	ldr	r1, [pc, #144]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80044da:	d105      	bne.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044dc:	4b1f      	ldr	r3, [pc, #124]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	4a1e      	ldr	r2, [pc, #120]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80044e6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d015      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044f4:	4b19      	ldr	r3, [pc, #100]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004502:	4916      	ldr	r1, [pc, #88]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004504:	4313      	orrs	r3, r2
 8004506:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800450e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004512:	d105      	bne.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004514:	4b11      	ldr	r3, [pc, #68]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	4a10      	ldr	r2, [pc, #64]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800451a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800451e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d019      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800452c:	4b0b      	ldr	r3, [pc, #44]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800452e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004532:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800453a:	4908      	ldr	r1, [pc, #32]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800453c:	4313      	orrs	r3, r2
 800453e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004546:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800454a:	d109      	bne.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800454c:	4b03      	ldr	r3, [pc, #12]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	4a02      	ldr	r2, [pc, #8]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004552:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004556:	60d3      	str	r3, [r2, #12]
 8004558:	e002      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800455a:	bf00      	nop
 800455c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d015      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800456c:	4b29      	ldr	r3, [pc, #164]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800456e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004572:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800457a:	4926      	ldr	r1, [pc, #152]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800457c:	4313      	orrs	r3, r2
 800457e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004586:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800458a:	d105      	bne.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800458c:	4b21      	ldr	r3, [pc, #132]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	4a20      	ldr	r2, [pc, #128]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004592:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004596:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d015      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80045a4:	4b1b      	ldr	r3, [pc, #108]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045aa:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045b2:	4918      	ldr	r1, [pc, #96]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045c2:	d105      	bne.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80045c4:	4b13      	ldr	r3, [pc, #76]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	4a12      	ldr	r2, [pc, #72]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045ce:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d015      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80045dc:	4b0d      	ldr	r3, [pc, #52]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80045e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045ea:	490a      	ldr	r1, [pc, #40]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80045fa:	d105      	bne.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045fc:	4b05      	ldr	r3, [pc, #20]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	4a04      	ldr	r2, [pc, #16]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004602:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004606:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004608:	7cbb      	ldrb	r3, [r7, #18]
}
 800460a:	4618      	mov	r0, r3
 800460c:	3718      	adds	r7, #24
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	40021000 	.word	0x40021000

08004618 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e09d      	b.n	8004766 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800462e:	2b00      	cmp	r3, #0
 8004630:	d108      	bne.n	8004644 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800463a:	d009      	beq.n	8004650 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	61da      	str	r2, [r3, #28]
 8004642:	e005      	b.n	8004650 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800465c:	b2db      	uxtb	r3, r3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d106      	bne.n	8004670 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f7fe f844 	bl	80026f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2202      	movs	r2, #2
 8004674:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004686:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004690:	d902      	bls.n	8004698 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004692:	2300      	movs	r3, #0
 8004694:	60fb      	str	r3, [r7, #12]
 8004696:	e002      	b.n	800469e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004698:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800469c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80046a6:	d007      	beq.n	80046b8 <HAL_SPI_Init+0xa0>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80046b0:	d002      	beq.n	80046b8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80046c8:	431a      	orrs	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	431a      	orrs	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	695b      	ldr	r3, [r3, #20]
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	431a      	orrs	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046e6:	431a      	orrs	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	69db      	ldr	r3, [r3, #28]
 80046ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80046f0:	431a      	orrs	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046fa:	ea42 0103 	orr.w	r1, r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004702:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	430a      	orrs	r2, r1
 800470c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	0c1b      	lsrs	r3, r3, #16
 8004714:	f003 0204 	and.w	r2, r3, #4
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800471c:	f003 0310 	and.w	r3, r3, #16
 8004720:	431a      	orrs	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004726:	f003 0308 	and.w	r3, r3, #8
 800472a:	431a      	orrs	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004734:	ea42 0103 	orr.w	r1, r2, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	430a      	orrs	r2, r1
 8004744:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	69da      	ldr	r2, [r3, #28]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004754:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3710      	adds	r7, #16
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}

0800476e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800476e:	b580      	push	{r7, lr}
 8004770:	b088      	sub	sp, #32
 8004772:	af00      	add	r7, sp, #0
 8004774:	60f8      	str	r0, [r7, #12]
 8004776:	60b9      	str	r1, [r7, #8]
 8004778:	603b      	str	r3, [r7, #0]
 800477a:	4613      	mov	r3, r2
 800477c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800477e:	2300      	movs	r3, #0
 8004780:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004788:	2b01      	cmp	r3, #1
 800478a:	d101      	bne.n	8004790 <HAL_SPI_Transmit+0x22>
 800478c:	2302      	movs	r3, #2
 800478e:	e15f      	b.n	8004a50 <HAL_SPI_Transmit+0x2e2>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004798:	f7fe fb44 	bl	8002e24 <HAL_GetTick>
 800479c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800479e:	88fb      	ldrh	r3, [r7, #6]
 80047a0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d002      	beq.n	80047b4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80047ae:	2302      	movs	r3, #2
 80047b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80047b2:	e148      	b.n	8004a46 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d002      	beq.n	80047c0 <HAL_SPI_Transmit+0x52>
 80047ba:	88fb      	ldrh	r3, [r7, #6]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d102      	bne.n	80047c6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80047c4:	e13f      	b.n	8004a46 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2203      	movs	r2, #3
 80047ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	68ba      	ldr	r2, [r7, #8]
 80047d8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	88fa      	ldrh	r2, [r7, #6]
 80047de:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	88fa      	ldrh	r2, [r7, #6]
 80047e4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004810:	d10f      	bne.n	8004832 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004820:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004830:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800483c:	2b40      	cmp	r3, #64	@ 0x40
 800483e:	d007      	beq.n	8004850 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800484e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004858:	d94f      	bls.n	80048fa <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d002      	beq.n	8004868 <HAL_SPI_Transmit+0xfa>
 8004862:	8afb      	ldrh	r3, [r7, #22]
 8004864:	2b01      	cmp	r3, #1
 8004866:	d142      	bne.n	80048ee <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800486c:	881a      	ldrh	r2, [r3, #0]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004878:	1c9a      	adds	r2, r3, #2
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004882:	b29b      	uxth	r3, r3
 8004884:	3b01      	subs	r3, #1
 8004886:	b29a      	uxth	r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800488c:	e02f      	b.n	80048ee <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f003 0302 	and.w	r3, r3, #2
 8004898:	2b02      	cmp	r3, #2
 800489a:	d112      	bne.n	80048c2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048a0:	881a      	ldrh	r2, [r3, #0]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ac:	1c9a      	adds	r2, r3, #2
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	3b01      	subs	r3, #1
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80048c0:	e015      	b.n	80048ee <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048c2:	f7fe faaf 	bl	8002e24 <HAL_GetTick>
 80048c6:	4602      	mov	r2, r0
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	683a      	ldr	r2, [r7, #0]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d803      	bhi.n	80048da <HAL_SPI_Transmit+0x16c>
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d8:	d102      	bne.n	80048e0 <HAL_SPI_Transmit+0x172>
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d106      	bne.n	80048ee <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80048ec:	e0ab      	b.n	8004a46 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1ca      	bne.n	800488e <HAL_SPI_Transmit+0x120>
 80048f8:	e080      	b.n	80049fc <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d002      	beq.n	8004908 <HAL_SPI_Transmit+0x19a>
 8004902:	8afb      	ldrh	r3, [r7, #22]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d174      	bne.n	80049f2 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800490c:	b29b      	uxth	r3, r3
 800490e:	2b01      	cmp	r3, #1
 8004910:	d912      	bls.n	8004938 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004916:	881a      	ldrh	r2, [r3, #0]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004922:	1c9a      	adds	r2, r3, #2
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800492c:	b29b      	uxth	r3, r3
 800492e:	3b02      	subs	r3, #2
 8004930:	b29a      	uxth	r2, r3
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004936:	e05c      	b.n	80049f2 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	330c      	adds	r3, #12
 8004942:	7812      	ldrb	r2, [r2, #0]
 8004944:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800494a:	1c5a      	adds	r2, r3, #1
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004954:	b29b      	uxth	r3, r3
 8004956:	3b01      	subs	r3, #1
 8004958:	b29a      	uxth	r2, r3
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800495e:	e048      	b.n	80049f2 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b02      	cmp	r3, #2
 800496c:	d12b      	bne.n	80049c6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004972:	b29b      	uxth	r3, r3
 8004974:	2b01      	cmp	r3, #1
 8004976:	d912      	bls.n	800499e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800497c:	881a      	ldrh	r2, [r3, #0]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004988:	1c9a      	adds	r2, r3, #2
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004992:	b29b      	uxth	r3, r3
 8004994:	3b02      	subs	r3, #2
 8004996:	b29a      	uxth	r2, r3
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800499c:	e029      	b.n	80049f2 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	330c      	adds	r3, #12
 80049a8:	7812      	ldrb	r2, [r2, #0]
 80049aa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049b0:	1c5a      	adds	r2, r3, #1
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	3b01      	subs	r3, #1
 80049be:	b29a      	uxth	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80049c4:	e015      	b.n	80049f2 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049c6:	f7fe fa2d 	bl	8002e24 <HAL_GetTick>
 80049ca:	4602      	mov	r2, r0
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d803      	bhi.n	80049de <HAL_SPI_Transmit+0x270>
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049dc:	d102      	bne.n	80049e4 <HAL_SPI_Transmit+0x276>
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d106      	bne.n	80049f2 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80049f0:	e029      	b.n	8004a46 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d1b1      	bne.n	8004960 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	6839      	ldr	r1, [r7, #0]
 8004a00:	68f8      	ldr	r0, [r7, #12]
 8004a02:	f000 fcf9 	bl	80053f8 <SPI_EndRxTxTransaction>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d002      	beq.n	8004a12 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2220      	movs	r2, #32
 8004a10:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d10a      	bne.n	8004a30 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	613b      	str	r3, [r7, #16]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	613b      	str	r3, [r7, #16]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	613b      	str	r3, [r7, #16]
 8004a2e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d002      	beq.n	8004a3e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	77fb      	strb	r3, [r7, #31]
 8004a3c:	e003      	b.n	8004a46 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2201      	movs	r2, #1
 8004a42:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004a4e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3720      	adds	r7, #32
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b088      	sub	sp, #32
 8004a5c:	af02      	add	r7, sp, #8
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	603b      	str	r3, [r7, #0]
 8004a64:	4613      	mov	r3, r2
 8004a66:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d002      	beq.n	8004a7e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004a78:	2302      	movs	r3, #2
 8004a7a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a7c:	e11a      	b.n	8004cb4 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a86:	d112      	bne.n	8004aae <HAL_SPI_Receive+0x56>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d10e      	bne.n	8004aae <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2204      	movs	r2, #4
 8004a94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004a98:	88fa      	ldrh	r2, [r7, #6]
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	9300      	str	r3, [sp, #0]
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	68ba      	ldr	r2, [r7, #8]
 8004aa2:	68b9      	ldr	r1, [r7, #8]
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f000 f90e 	bl	8004cc6 <HAL_SPI_TransmitReceive>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	e107      	b.n	8004cbe <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d101      	bne.n	8004abc <HAL_SPI_Receive+0x64>
 8004ab8:	2302      	movs	r3, #2
 8004aba:	e100      	b.n	8004cbe <HAL_SPI_Receive+0x266>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ac4:	f7fe f9ae 	bl	8002e24 <HAL_GetTick>
 8004ac8:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d002      	beq.n	8004ad6 <HAL_SPI_Receive+0x7e>
 8004ad0:	88fb      	ldrh	r3, [r7, #6]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d102      	bne.n	8004adc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ada:	e0eb      	b.n	8004cb4 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2204      	movs	r2, #4
 8004ae0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	68ba      	ldr	r2, [r7, #8]
 8004aee:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	88fa      	ldrh	r2, [r7, #6]
 8004af4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	88fa      	ldrh	r2, [r7, #6]
 8004afc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004b26:	d908      	bls.n	8004b3a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	685a      	ldr	r2, [r3, #4]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004b36:	605a      	str	r2, [r3, #4]
 8004b38:	e007      	b.n	8004b4a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	685a      	ldr	r2, [r3, #4]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004b48:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b52:	d10f      	bne.n	8004b74 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b62:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004b72:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b7e:	2b40      	cmp	r3, #64	@ 0x40
 8004b80:	d007      	beq.n	8004b92 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b90:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004b9a:	d86f      	bhi.n	8004c7c <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004b9c:	e034      	b.n	8004c08 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d117      	bne.n	8004bdc <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f103 020c 	add.w	r2, r3, #12
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb8:	7812      	ldrb	r2, [r2, #0]
 8004bba:	b2d2      	uxtb	r2, r2
 8004bbc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc2:	1c5a      	adds	r2, r3, #1
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	b29a      	uxth	r2, r3
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8004bda:	e015      	b.n	8004c08 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bdc:	f7fe f922 	bl	8002e24 <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	683a      	ldr	r2, [r7, #0]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d803      	bhi.n	8004bf4 <HAL_SPI_Receive+0x19c>
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf2:	d102      	bne.n	8004bfa <HAL_SPI_Receive+0x1a2>
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d106      	bne.n	8004c08 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2201      	movs	r2, #1
 8004c02:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004c06:	e055      	b.n	8004cb4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d1c4      	bne.n	8004b9e <HAL_SPI_Receive+0x146>
 8004c14:	e038      	b.n	8004c88 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f003 0301 	and.w	r3, r3, #1
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d115      	bne.n	8004c50 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68da      	ldr	r2, [r3, #12]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c2e:	b292      	uxth	r2, r2
 8004c30:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c36:	1c9a      	adds	r2, r3, #2
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	3b01      	subs	r3, #1
 8004c46:	b29a      	uxth	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8004c4e:	e015      	b.n	8004c7c <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c50:	f7fe f8e8 	bl	8002e24 <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	683a      	ldr	r2, [r7, #0]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d803      	bhi.n	8004c68 <HAL_SPI_Receive+0x210>
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c66:	d102      	bne.n	8004c6e <HAL_SPI_Receive+0x216>
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d106      	bne.n	8004c7c <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004c7a:	e01b      	b.n	8004cb4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1c6      	bne.n	8004c16 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	6839      	ldr	r1, [r7, #0]
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f000 fb5b 	bl	8005348 <SPI_EndRxTransaction>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d002      	beq.n	8004c9e <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2220      	movs	r2, #32
 8004c9c:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d002      	beq.n	8004cac <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	75fb      	strb	r3, [r7, #23]
 8004caa:	e003      	b.n	8004cb4 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004cbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3718      	adds	r7, #24
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b08a      	sub	sp, #40	@ 0x28
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	60f8      	str	r0, [r7, #12]
 8004cce:	60b9      	str	r1, [r7, #8]
 8004cd0:	607a      	str	r2, [r7, #4]
 8004cd2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d101      	bne.n	8004cec <HAL_SPI_TransmitReceive+0x26>
 8004ce8:	2302      	movs	r3, #2
 8004cea:	e20a      	b.n	8005102 <HAL_SPI_TransmitReceive+0x43c>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cf4:	f7fe f896 	bl	8002e24 <HAL_GetTick>
 8004cf8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004d00:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004d08:	887b      	ldrh	r3, [r7, #2]
 8004d0a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004d0c:	887b      	ldrh	r3, [r7, #2]
 8004d0e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004d10:	7efb      	ldrb	r3, [r7, #27]
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d00e      	beq.n	8004d34 <HAL_SPI_TransmitReceive+0x6e>
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d1c:	d106      	bne.n	8004d2c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d102      	bne.n	8004d2c <HAL_SPI_TransmitReceive+0x66>
 8004d26:	7efb      	ldrb	r3, [r7, #27]
 8004d28:	2b04      	cmp	r3, #4
 8004d2a:	d003      	beq.n	8004d34 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004d2c:	2302      	movs	r3, #2
 8004d2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8004d32:	e1e0      	b.n	80050f6 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d005      	beq.n	8004d46 <HAL_SPI_TransmitReceive+0x80>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d002      	beq.n	8004d46 <HAL_SPI_TransmitReceive+0x80>
 8004d40:	887b      	ldrh	r3, [r7, #2]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d103      	bne.n	8004d4e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8004d4c:	e1d3      	b.n	80050f6 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b04      	cmp	r3, #4
 8004d58:	d003      	beq.n	8004d62 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2205      	movs	r2, #5
 8004d5e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2200      	movs	r2, #0
 8004d66:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	887a      	ldrh	r2, [r7, #2]
 8004d72:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	887a      	ldrh	r2, [r7, #2]
 8004d7a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	68ba      	ldr	r2, [r7, #8]
 8004d82:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	887a      	ldrh	r2, [r7, #2]
 8004d88:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	887a      	ldrh	r2, [r7, #2]
 8004d8e:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004da4:	d802      	bhi.n	8004dac <HAL_SPI_TransmitReceive+0xe6>
 8004da6:	8a3b      	ldrh	r3, [r7, #16]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d908      	bls.n	8004dbe <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	685a      	ldr	r2, [r3, #4]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004dba:	605a      	str	r2, [r3, #4]
 8004dbc:	e007      	b.n	8004dce <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	685a      	ldr	r2, [r3, #4]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004dcc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dd8:	2b40      	cmp	r3, #64	@ 0x40
 8004dda:	d007      	beq.n	8004dec <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004dea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004df4:	f240 8081 	bls.w	8004efa <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d002      	beq.n	8004e06 <HAL_SPI_TransmitReceive+0x140>
 8004e00:	8a7b      	ldrh	r3, [r7, #18]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d16d      	bne.n	8004ee2 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e0a:	881a      	ldrh	r2, [r3, #0]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e16:	1c9a      	adds	r2, r3, #2
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	3b01      	subs	r3, #1
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e2a:	e05a      	b.n	8004ee2 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f003 0302 	and.w	r3, r3, #2
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d11b      	bne.n	8004e72 <HAL_SPI_TransmitReceive+0x1ac>
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d016      	beq.n	8004e72 <HAL_SPI_TransmitReceive+0x1ac>
 8004e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d113      	bne.n	8004e72 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e4e:	881a      	ldrh	r2, [r3, #0]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e5a:	1c9a      	adds	r2, r3, #2
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	3b01      	subs	r3, #1
 8004e68:	b29a      	uxth	r2, r3
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	f003 0301 	and.w	r3, r3, #1
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d11c      	bne.n	8004eba <HAL_SPI_TransmitReceive+0x1f4>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d016      	beq.n	8004eba <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68da      	ldr	r2, [r3, #12]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e96:	b292      	uxth	r2, r2
 8004e98:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e9e:	1c9a      	adds	r2, r3, #2
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	3b01      	subs	r3, #1
 8004eae:	b29a      	uxth	r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004eba:	f7fd ffb3 	bl	8002e24 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d80b      	bhi.n	8004ee2 <HAL_SPI_TransmitReceive+0x21c>
 8004eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed0:	d007      	beq.n	8004ee2 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8004ee0:	e109      	b.n	80050f6 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d19f      	bne.n	8004e2c <HAL_SPI_TransmitReceive+0x166>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d199      	bne.n	8004e2c <HAL_SPI_TransmitReceive+0x166>
 8004ef8:	e0e3      	b.n	80050c2 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d003      	beq.n	8004f0a <HAL_SPI_TransmitReceive+0x244>
 8004f02:	8a7b      	ldrh	r3, [r7, #18]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	f040 80cf 	bne.w	80050a8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d912      	bls.n	8004f3a <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f18:	881a      	ldrh	r2, [r3, #0]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f24:	1c9a      	adds	r2, r3, #2
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	3b02      	subs	r3, #2
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004f38:	e0b6      	b.n	80050a8 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	330c      	adds	r3, #12
 8004f44:	7812      	ldrb	r2, [r2, #0]
 8004f46:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f4c:	1c5a      	adds	r2, r3, #1
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	3b01      	subs	r3, #1
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f60:	e0a2      	b.n	80050a8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f003 0302 	and.w	r3, r3, #2
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d134      	bne.n	8004fda <HAL_SPI_TransmitReceive+0x314>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d02f      	beq.n	8004fda <HAL_SPI_TransmitReceive+0x314>
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d12c      	bne.n	8004fda <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d912      	bls.n	8004fb0 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f8e:	881a      	ldrh	r2, [r3, #0]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f9a:	1c9a      	adds	r2, r3, #2
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	3b02      	subs	r3, #2
 8004fa8:	b29a      	uxth	r2, r3
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004fae:	e012      	b.n	8004fd6 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	330c      	adds	r3, #12
 8004fba:	7812      	ldrb	r2, [r2, #0]
 8004fbc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fc2:	1c5a      	adds	r2, r3, #1
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	b29a      	uxth	r2, r3
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f003 0301 	and.w	r3, r3, #1
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d148      	bne.n	800507a <HAL_SPI_TransmitReceive+0x3b4>
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d042      	beq.n	800507a <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d923      	bls.n	8005048 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68da      	ldr	r2, [r3, #12]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800500a:	b292      	uxth	r2, r2
 800500c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005012:	1c9a      	adds	r2, r3, #2
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800501e:	b29b      	uxth	r3, r3
 8005020:	3b02      	subs	r3, #2
 8005022:	b29a      	uxth	r2, r3
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005030:	b29b      	uxth	r3, r3
 8005032:	2b01      	cmp	r3, #1
 8005034:	d81f      	bhi.n	8005076 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	685a      	ldr	r2, [r3, #4]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005044:	605a      	str	r2, [r3, #4]
 8005046:	e016      	b.n	8005076 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f103 020c 	add.w	r2, r3, #12
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005054:	7812      	ldrb	r2, [r2, #0]
 8005056:	b2d2      	uxtb	r2, r2
 8005058:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800505e:	1c5a      	adds	r2, r3, #1
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800506a:	b29b      	uxth	r3, r3
 800506c:	3b01      	subs	r3, #1
 800506e:	b29a      	uxth	r2, r3
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005076:	2301      	movs	r3, #1
 8005078:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800507a:	f7fd fed3 	bl	8002e24 <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005086:	429a      	cmp	r2, r3
 8005088:	d803      	bhi.n	8005092 <HAL_SPI_TransmitReceive+0x3cc>
 800508a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800508c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005090:	d102      	bne.n	8005098 <HAL_SPI_TransmitReceive+0x3d2>
 8005092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005094:	2b00      	cmp	r3, #0
 8005096:	d107      	bne.n	80050a8 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80050a6:	e026      	b.n	80050f6 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	f47f af57 	bne.w	8004f62 <HAL_SPI_TransmitReceive+0x29c>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	2b00      	cmp	r3, #0
 80050be:	f47f af50 	bne.w	8004f62 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050c2:	69fa      	ldr	r2, [r7, #28]
 80050c4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	f000 f996 	bl	80053f8 <SPI_EndRxTxTransaction>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d005      	beq.n	80050de <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2220      	movs	r2, #32
 80050dc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d003      	beq.n	80050ee <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050ec:	e003      	b.n	80050f6 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2201      	movs	r2, #1
 80050f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80050fe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8005102:	4618      	mov	r0, r3
 8005104:	3728      	adds	r7, #40	@ 0x28
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
	...

0800510c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b088      	sub	sp, #32
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	603b      	str	r3, [r7, #0]
 8005118:	4613      	mov	r3, r2
 800511a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800511c:	f7fd fe82 	bl	8002e24 <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005124:	1a9b      	subs	r3, r3, r2
 8005126:	683a      	ldr	r2, [r7, #0]
 8005128:	4413      	add	r3, r2
 800512a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800512c:	f7fd fe7a 	bl	8002e24 <HAL_GetTick>
 8005130:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005132:	4b39      	ldr	r3, [pc, #228]	@ (8005218 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	015b      	lsls	r3, r3, #5
 8005138:	0d1b      	lsrs	r3, r3, #20
 800513a:	69fa      	ldr	r2, [r7, #28]
 800513c:	fb02 f303 	mul.w	r3, r2, r3
 8005140:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005142:	e054      	b.n	80051ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800514a:	d050      	beq.n	80051ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800514c:	f7fd fe6a 	bl	8002e24 <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	69fa      	ldr	r2, [r7, #28]
 8005158:	429a      	cmp	r2, r3
 800515a:	d902      	bls.n	8005162 <SPI_WaitFlagStateUntilTimeout+0x56>
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d13d      	bne.n	80051de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	685a      	ldr	r2, [r3, #4]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005170:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800517a:	d111      	bne.n	80051a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005184:	d004      	beq.n	8005190 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800518e:	d107      	bne.n	80051a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800519e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051a8:	d10f      	bne.n	80051ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80051b8:	601a      	str	r2, [r3, #0]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80051c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e017      	b.n	800520e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d101      	bne.n	80051e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80051e4:	2300      	movs	r3, #0
 80051e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	3b01      	subs	r3, #1
 80051ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	689a      	ldr	r2, [r3, #8]
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	4013      	ands	r3, r2
 80051f8:	68ba      	ldr	r2, [r7, #8]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	bf0c      	ite	eq
 80051fe:	2301      	moveq	r3, #1
 8005200:	2300      	movne	r3, #0
 8005202:	b2db      	uxtb	r3, r3
 8005204:	461a      	mov	r2, r3
 8005206:	79fb      	ldrb	r3, [r7, #7]
 8005208:	429a      	cmp	r2, r3
 800520a:	d19b      	bne.n	8005144 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3720      	adds	r7, #32
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	20000004 	.word	0x20000004

0800521c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b08a      	sub	sp, #40	@ 0x28
 8005220:	af00      	add	r7, sp, #0
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	607a      	str	r2, [r7, #4]
 8005228:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800522a:	2300      	movs	r3, #0
 800522c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800522e:	f7fd fdf9 	bl	8002e24 <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005236:	1a9b      	subs	r3, r3, r2
 8005238:	683a      	ldr	r2, [r7, #0]
 800523a:	4413      	add	r3, r2
 800523c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800523e:	f7fd fdf1 	bl	8002e24 <HAL_GetTick>
 8005242:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	330c      	adds	r3, #12
 800524a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800524c:	4b3d      	ldr	r3, [pc, #244]	@ (8005344 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	4613      	mov	r3, r2
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	4413      	add	r3, r2
 8005256:	00da      	lsls	r2, r3, #3
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	0d1b      	lsrs	r3, r3, #20
 800525c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800525e:	fb02 f303 	mul.w	r3, r2, r3
 8005262:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005264:	e060      	b.n	8005328 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800526c:	d107      	bne.n	800527e <SPI_WaitFifoStateUntilTimeout+0x62>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d104      	bne.n	800527e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	b2db      	uxtb	r3, r3
 800527a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800527c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005284:	d050      	beq.n	8005328 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005286:	f7fd fdcd 	bl	8002e24 <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	6a3b      	ldr	r3, [r7, #32]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005292:	429a      	cmp	r2, r3
 8005294:	d902      	bls.n	800529c <SPI_WaitFifoStateUntilTimeout+0x80>
 8005296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005298:	2b00      	cmp	r3, #0
 800529a:	d13d      	bne.n	8005318 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	685a      	ldr	r2, [r3, #4]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80052aa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052b4:	d111      	bne.n	80052da <SPI_WaitFifoStateUntilTimeout+0xbe>
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052be:	d004      	beq.n	80052ca <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052c8:	d107      	bne.n	80052da <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052d8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052e2:	d10f      	bne.n	8005304 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80052f2:	601a      	str	r2, [r3, #0]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005302:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005314:	2303      	movs	r3, #3
 8005316:	e010      	b.n	800533a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d101      	bne.n	8005322 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800531e:	2300      	movs	r3, #0
 8005320:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	3b01      	subs	r3, #1
 8005326:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	689a      	ldr	r2, [r3, #8]
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	4013      	ands	r3, r2
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	429a      	cmp	r2, r3
 8005336:	d196      	bne.n	8005266 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3728      	adds	r7, #40	@ 0x28
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	20000004 	.word	0x20000004

08005348 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b086      	sub	sp, #24
 800534c:	af02      	add	r7, sp, #8
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800535c:	d111      	bne.n	8005382 <SPI_EndRxTransaction+0x3a>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005366:	d004      	beq.n	8005372 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005370:	d107      	bne.n	8005382 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005380:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	9300      	str	r3, [sp, #0]
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	2200      	movs	r2, #0
 800538a:	2180      	movs	r1, #128	@ 0x80
 800538c:	68f8      	ldr	r0, [r7, #12]
 800538e:	f7ff febd 	bl	800510c <SPI_WaitFlagStateUntilTimeout>
 8005392:	4603      	mov	r3, r0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d007      	beq.n	80053a8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800539c:	f043 0220 	orr.w	r2, r3, #32
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80053a4:	2303      	movs	r3, #3
 80053a6:	e023      	b.n	80053f0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80053b0:	d11d      	bne.n	80053ee <SPI_EndRxTransaction+0xa6>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053ba:	d004      	beq.n	80053c6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053c4:	d113      	bne.n	80053ee <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	9300      	str	r3, [sp, #0]
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80053d2:	68f8      	ldr	r0, [r7, #12]
 80053d4:	f7ff ff22 	bl	800521c <SPI_WaitFifoStateUntilTimeout>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d007      	beq.n	80053ee <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053e2:	f043 0220 	orr.w	r2, r3, #32
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e000      	b.n	80053f0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3710      	adds	r7, #16
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b086      	sub	sp, #24
 80053fc:	af02      	add	r7, sp, #8
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	9300      	str	r3, [sp, #0]
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	2200      	movs	r2, #0
 800540c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	f7ff ff03 	bl	800521c <SPI_WaitFifoStateUntilTimeout>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d007      	beq.n	800542c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005420:	f043 0220 	orr.w	r2, r3, #32
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005428:	2303      	movs	r3, #3
 800542a:	e027      	b.n	800547c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	9300      	str	r3, [sp, #0]
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	2200      	movs	r2, #0
 8005434:	2180      	movs	r1, #128	@ 0x80
 8005436:	68f8      	ldr	r0, [r7, #12]
 8005438:	f7ff fe68 	bl	800510c <SPI_WaitFlagStateUntilTimeout>
 800543c:	4603      	mov	r3, r0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d007      	beq.n	8005452 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005446:	f043 0220 	orr.w	r2, r3, #32
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e014      	b.n	800547c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	9300      	str	r3, [sp, #0]
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	2200      	movs	r2, #0
 800545a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800545e:	68f8      	ldr	r0, [r7, #12]
 8005460:	f7ff fedc 	bl	800521c <SPI_WaitFifoStateUntilTimeout>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d007      	beq.n	800547a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800546e:	f043 0220 	orr.w	r2, r3, #32
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e000      	b.n	800547c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3710      	adds	r7, #16
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d101      	bne.n	8005496 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e049      	b.n	800552a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800549c:	b2db      	uxtb	r3, r3
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d106      	bne.n	80054b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f7fd f986 	bl	80027bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2202      	movs	r2, #2
 80054b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	3304      	adds	r3, #4
 80054c0:	4619      	mov	r1, r3
 80054c2:	4610      	mov	r0, r2
 80054c4:	f000 fe88 	bl	80061d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	3708      	adds	r7, #8
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}

08005532 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005532:	b580      	push	{r7, lr}
 8005534:	b082      	sub	sp, #8
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d101      	bne.n	8005544 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e049      	b.n	80055d8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800554a:	b2db      	uxtb	r3, r3
 800554c:	2b00      	cmp	r3, #0
 800554e:	d106      	bne.n	800555e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 f841 	bl	80055e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2202      	movs	r2, #2
 8005562:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	3304      	adds	r3, #4
 800556e:	4619      	mov	r1, r3
 8005570:	4610      	mov	r0, r2
 8005572:	f000 fe31 	bl	80061d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2201      	movs	r2, #1
 800557a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2201      	movs	r2, #1
 8005582:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2201      	movs	r2, #1
 800558a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2201      	movs	r2, #1
 8005592:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2201      	movs	r2, #1
 800559a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2201      	movs	r2, #1
 80055a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2201      	movs	r2, #1
 80055aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2201      	movs	r2, #1
 80055b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2201      	movs	r2, #1
 80055ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2201      	movs	r2, #1
 80055c2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2201      	movs	r2, #1
 80055ca:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2201      	movs	r2, #1
 80055d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3708      	adds	r7, #8
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80055e8:	bf00      	nop
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d109      	bne.n	8005618 <HAL_TIM_PWM_Start+0x24>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800560a:	b2db      	uxtb	r3, r3
 800560c:	2b01      	cmp	r3, #1
 800560e:	bf14      	ite	ne
 8005610:	2301      	movne	r3, #1
 8005612:	2300      	moveq	r3, #0
 8005614:	b2db      	uxtb	r3, r3
 8005616:	e03c      	b.n	8005692 <HAL_TIM_PWM_Start+0x9e>
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	2b04      	cmp	r3, #4
 800561c:	d109      	bne.n	8005632 <HAL_TIM_PWM_Start+0x3e>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b01      	cmp	r3, #1
 8005628:	bf14      	ite	ne
 800562a:	2301      	movne	r3, #1
 800562c:	2300      	moveq	r3, #0
 800562e:	b2db      	uxtb	r3, r3
 8005630:	e02f      	b.n	8005692 <HAL_TIM_PWM_Start+0x9e>
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	2b08      	cmp	r3, #8
 8005636:	d109      	bne.n	800564c <HAL_TIM_PWM_Start+0x58>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800563e:	b2db      	uxtb	r3, r3
 8005640:	2b01      	cmp	r3, #1
 8005642:	bf14      	ite	ne
 8005644:	2301      	movne	r3, #1
 8005646:	2300      	moveq	r3, #0
 8005648:	b2db      	uxtb	r3, r3
 800564a:	e022      	b.n	8005692 <HAL_TIM_PWM_Start+0x9e>
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	2b0c      	cmp	r3, #12
 8005650:	d109      	bne.n	8005666 <HAL_TIM_PWM_Start+0x72>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005658:	b2db      	uxtb	r3, r3
 800565a:	2b01      	cmp	r3, #1
 800565c:	bf14      	ite	ne
 800565e:	2301      	movne	r3, #1
 8005660:	2300      	moveq	r3, #0
 8005662:	b2db      	uxtb	r3, r3
 8005664:	e015      	b.n	8005692 <HAL_TIM_PWM_Start+0x9e>
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	2b10      	cmp	r3, #16
 800566a:	d109      	bne.n	8005680 <HAL_TIM_PWM_Start+0x8c>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005672:	b2db      	uxtb	r3, r3
 8005674:	2b01      	cmp	r3, #1
 8005676:	bf14      	ite	ne
 8005678:	2301      	movne	r3, #1
 800567a:	2300      	moveq	r3, #0
 800567c:	b2db      	uxtb	r3, r3
 800567e:	e008      	b.n	8005692 <HAL_TIM_PWM_Start+0x9e>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005686:	b2db      	uxtb	r3, r3
 8005688:	2b01      	cmp	r3, #1
 800568a:	bf14      	ite	ne
 800568c:	2301      	movne	r3, #1
 800568e:	2300      	moveq	r3, #0
 8005690:	b2db      	uxtb	r3, r3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d001      	beq.n	800569a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e0a6      	b.n	80057e8 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d104      	bne.n	80056aa <HAL_TIM_PWM_Start+0xb6>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2202      	movs	r2, #2
 80056a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80056a8:	e023      	b.n	80056f2 <HAL_TIM_PWM_Start+0xfe>
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	2b04      	cmp	r3, #4
 80056ae:	d104      	bne.n	80056ba <HAL_TIM_PWM_Start+0xc6>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2202      	movs	r2, #2
 80056b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056b8:	e01b      	b.n	80056f2 <HAL_TIM_PWM_Start+0xfe>
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	2b08      	cmp	r3, #8
 80056be:	d104      	bne.n	80056ca <HAL_TIM_PWM_Start+0xd6>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2202      	movs	r2, #2
 80056c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056c8:	e013      	b.n	80056f2 <HAL_TIM_PWM_Start+0xfe>
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	2b0c      	cmp	r3, #12
 80056ce:	d104      	bne.n	80056da <HAL_TIM_PWM_Start+0xe6>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2202      	movs	r2, #2
 80056d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80056d8:	e00b      	b.n	80056f2 <HAL_TIM_PWM_Start+0xfe>
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	2b10      	cmp	r3, #16
 80056de:	d104      	bne.n	80056ea <HAL_TIM_PWM_Start+0xf6>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2202      	movs	r2, #2
 80056e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056e8:	e003      	b.n	80056f2 <HAL_TIM_PWM_Start+0xfe>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2202      	movs	r2, #2
 80056ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2201      	movs	r2, #1
 80056f8:	6839      	ldr	r1, [r7, #0]
 80056fa:	4618      	mov	r0, r3
 80056fc:	f001 f9e6 	bl	8006acc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a3a      	ldr	r2, [pc, #232]	@ (80057f0 <HAL_TIM_PWM_Start+0x1fc>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d018      	beq.n	800573c <HAL_TIM_PWM_Start+0x148>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a39      	ldr	r2, [pc, #228]	@ (80057f4 <HAL_TIM_PWM_Start+0x200>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d013      	beq.n	800573c <HAL_TIM_PWM_Start+0x148>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a37      	ldr	r2, [pc, #220]	@ (80057f8 <HAL_TIM_PWM_Start+0x204>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d00e      	beq.n	800573c <HAL_TIM_PWM_Start+0x148>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a36      	ldr	r2, [pc, #216]	@ (80057fc <HAL_TIM_PWM_Start+0x208>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d009      	beq.n	800573c <HAL_TIM_PWM_Start+0x148>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a34      	ldr	r2, [pc, #208]	@ (8005800 <HAL_TIM_PWM_Start+0x20c>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d004      	beq.n	800573c <HAL_TIM_PWM_Start+0x148>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a33      	ldr	r2, [pc, #204]	@ (8005804 <HAL_TIM_PWM_Start+0x210>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d101      	bne.n	8005740 <HAL_TIM_PWM_Start+0x14c>
 800573c:	2301      	movs	r3, #1
 800573e:	e000      	b.n	8005742 <HAL_TIM_PWM_Start+0x14e>
 8005740:	2300      	movs	r3, #0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d007      	beq.n	8005756 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005754:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a25      	ldr	r2, [pc, #148]	@ (80057f0 <HAL_TIM_PWM_Start+0x1fc>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d022      	beq.n	80057a6 <HAL_TIM_PWM_Start+0x1b2>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005768:	d01d      	beq.n	80057a6 <HAL_TIM_PWM_Start+0x1b2>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a26      	ldr	r2, [pc, #152]	@ (8005808 <HAL_TIM_PWM_Start+0x214>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d018      	beq.n	80057a6 <HAL_TIM_PWM_Start+0x1b2>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a24      	ldr	r2, [pc, #144]	@ (800580c <HAL_TIM_PWM_Start+0x218>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d013      	beq.n	80057a6 <HAL_TIM_PWM_Start+0x1b2>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a23      	ldr	r2, [pc, #140]	@ (8005810 <HAL_TIM_PWM_Start+0x21c>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d00e      	beq.n	80057a6 <HAL_TIM_PWM_Start+0x1b2>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a19      	ldr	r2, [pc, #100]	@ (80057f4 <HAL_TIM_PWM_Start+0x200>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d009      	beq.n	80057a6 <HAL_TIM_PWM_Start+0x1b2>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a18      	ldr	r2, [pc, #96]	@ (80057f8 <HAL_TIM_PWM_Start+0x204>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d004      	beq.n	80057a6 <HAL_TIM_PWM_Start+0x1b2>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a18      	ldr	r2, [pc, #96]	@ (8005804 <HAL_TIM_PWM_Start+0x210>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d115      	bne.n	80057d2 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	689a      	ldr	r2, [r3, #8]
 80057ac:	4b19      	ldr	r3, [pc, #100]	@ (8005814 <HAL_TIM_PWM_Start+0x220>)
 80057ae:	4013      	ands	r3, r2
 80057b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2b06      	cmp	r3, #6
 80057b6:	d015      	beq.n	80057e4 <HAL_TIM_PWM_Start+0x1f0>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057be:	d011      	beq.n	80057e4 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f042 0201 	orr.w	r2, r2, #1
 80057ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057d0:	e008      	b.n	80057e4 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f042 0201 	orr.w	r2, r2, #1
 80057e0:	601a      	str	r2, [r3, #0]
 80057e2:	e000      	b.n	80057e6 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057e4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3710      	adds	r7, #16
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	40012c00 	.word	0x40012c00
 80057f4:	40013400 	.word	0x40013400
 80057f8:	40014000 	.word	0x40014000
 80057fc:	40014400 	.word	0x40014400
 8005800:	40014800 	.word	0x40014800
 8005804:	40015000 	.word	0x40015000
 8005808:	40000400 	.word	0x40000400
 800580c:	40000800 	.word	0x40000800
 8005810:	40000c00 	.word	0x40000c00
 8005814:	00010007 	.word	0x00010007

08005818 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b086      	sub	sp, #24
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d101      	bne.n	800582c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e097      	b.n	800595c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005832:	b2db      	uxtb	r3, r3
 8005834:	2b00      	cmp	r3, #0
 8005836:	d106      	bne.n	8005846 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f7fc ffdb 	bl	80027fc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2202      	movs	r2, #2
 800584a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	6812      	ldr	r2, [r2, #0]
 8005858:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800585c:	f023 0307 	bic.w	r3, r3, #7
 8005860:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	3304      	adds	r3, #4
 800586a:	4619      	mov	r1, r3
 800586c:	4610      	mov	r0, r2
 800586e:	f000 fcb3 	bl	80061d8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	699b      	ldr	r3, [r3, #24]
 8005880:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	6a1b      	ldr	r3, [r3, #32]
 8005888:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	4313      	orrs	r3, r2
 8005892:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800589a:	f023 0303 	bic.w	r3, r3, #3
 800589e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	689a      	ldr	r2, [r3, #8]
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	699b      	ldr	r3, [r3, #24]
 80058a8:	021b      	lsls	r3, r3, #8
 80058aa:	4313      	orrs	r3, r2
 80058ac:	693a      	ldr	r2, [r7, #16]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80058b8:	f023 030c 	bic.w	r3, r3, #12
 80058bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80058c4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80058c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	68da      	ldr	r2, [r3, #12]
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	69db      	ldr	r3, [r3, #28]
 80058d2:	021b      	lsls	r3, r3, #8
 80058d4:	4313      	orrs	r3, r2
 80058d6:	693a      	ldr	r2, [r7, #16]
 80058d8:	4313      	orrs	r3, r2
 80058da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	011a      	lsls	r2, r3, #4
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	6a1b      	ldr	r3, [r3, #32]
 80058e6:	031b      	lsls	r3, r3, #12
 80058e8:	4313      	orrs	r3, r2
 80058ea:	693a      	ldr	r2, [r7, #16]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80058f6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80058fe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	685a      	ldr	r2, [r3, #4]
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	695b      	ldr	r3, [r3, #20]
 8005908:	011b      	lsls	r3, r3, #4
 800590a:	4313      	orrs	r3, r2
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	4313      	orrs	r3, r2
 8005910:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	697a      	ldr	r2, [r7, #20]
 8005918:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	693a      	ldr	r2, [r7, #16]
 8005920:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2201      	movs	r2, #1
 800592e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2201      	movs	r2, #1
 8005936:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2201      	movs	r2, #1
 800593e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2201      	movs	r2, #1
 8005946:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2201      	movs	r2, #1
 8005956:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800595a:	2300      	movs	r3, #0
}
 800595c:	4618      	mov	r0, r3
 800595e:	3718      	adds	r7, #24
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005974:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800597c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005984:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800598c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d110      	bne.n	80059b6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005994:	7bfb      	ldrb	r3, [r7, #15]
 8005996:	2b01      	cmp	r3, #1
 8005998:	d102      	bne.n	80059a0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800599a:	7b7b      	ldrb	r3, [r7, #13]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d001      	beq.n	80059a4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e069      	b.n	8005a78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2202      	movs	r2, #2
 80059a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2202      	movs	r2, #2
 80059b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059b4:	e031      	b.n	8005a1a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	2b04      	cmp	r3, #4
 80059ba:	d110      	bne.n	80059de <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80059bc:	7bbb      	ldrb	r3, [r7, #14]
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d102      	bne.n	80059c8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80059c2:	7b3b      	ldrb	r3, [r7, #12]
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d001      	beq.n	80059cc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e055      	b.n	8005a78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2202      	movs	r2, #2
 80059d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2202      	movs	r2, #2
 80059d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80059dc:	e01d      	b.n	8005a1a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80059de:	7bfb      	ldrb	r3, [r7, #15]
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d108      	bne.n	80059f6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80059e4:	7bbb      	ldrb	r3, [r7, #14]
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d105      	bne.n	80059f6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80059ea:	7b7b      	ldrb	r3, [r7, #13]
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d102      	bne.n	80059f6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80059f0:	7b3b      	ldrb	r3, [r7, #12]
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d001      	beq.n	80059fa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e03e      	b.n	8005a78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2202      	movs	r2, #2
 80059fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2202      	movs	r2, #2
 8005a06:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2202      	movs	r2, #2
 8005a0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2202      	movs	r2, #2
 8005a16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d003      	beq.n	8005a28 <HAL_TIM_Encoder_Start+0xc4>
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	2b04      	cmp	r3, #4
 8005a24:	d008      	beq.n	8005a38 <HAL_TIM_Encoder_Start+0xd4>
 8005a26:	e00f      	b.n	8005a48 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	2100      	movs	r1, #0
 8005a30:	4618      	mov	r0, r3
 8005a32:	f001 f84b 	bl	8006acc <TIM_CCxChannelCmd>
      break;
 8005a36:	e016      	b.n	8005a66 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	2104      	movs	r1, #4
 8005a40:	4618      	mov	r0, r3
 8005a42:	f001 f843 	bl	8006acc <TIM_CCxChannelCmd>
      break;
 8005a46:	e00e      	b.n	8005a66 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	2100      	movs	r1, #0
 8005a50:	4618      	mov	r0, r3
 8005a52:	f001 f83b 	bl	8006acc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	2104      	movs	r1, #4
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f001 f834 	bl	8006acc <TIM_CCxChannelCmd>
      break;
 8005a64:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f042 0201 	orr.w	r2, r2, #1
 8005a74:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3710      	adds	r7, #16
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	f003 0302 	and.w	r3, r3, #2
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d020      	beq.n	8005ae4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f003 0302 	and.w	r3, r3, #2
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d01b      	beq.n	8005ae4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f06f 0202 	mvn.w	r2, #2
 8005ab4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	699b      	ldr	r3, [r3, #24]
 8005ac2:	f003 0303 	and.w	r3, r3, #3
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d003      	beq.n	8005ad2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 fb66 	bl	800619c <HAL_TIM_IC_CaptureCallback>
 8005ad0:	e005      	b.n	8005ade <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 fb58 	bl	8006188 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f000 fb69 	bl	80061b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	f003 0304 	and.w	r3, r3, #4
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d020      	beq.n	8005b30 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f003 0304 	and.w	r3, r3, #4
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d01b      	beq.n	8005b30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f06f 0204 	mvn.w	r2, #4
 8005b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2202      	movs	r2, #2
 8005b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d003      	beq.n	8005b1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 fb40 	bl	800619c <HAL_TIM_IC_CaptureCallback>
 8005b1c:	e005      	b.n	8005b2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 fb32 	bl	8006188 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 fb43 	bl	80061b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	f003 0308 	and.w	r3, r3, #8
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d020      	beq.n	8005b7c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f003 0308 	and.w	r3, r3, #8
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d01b      	beq.n	8005b7c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f06f 0208 	mvn.w	r2, #8
 8005b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2204      	movs	r2, #4
 8005b52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	69db      	ldr	r3, [r3, #28]
 8005b5a:	f003 0303 	and.w	r3, r3, #3
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d003      	beq.n	8005b6a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 fb1a 	bl	800619c <HAL_TIM_IC_CaptureCallback>
 8005b68:	e005      	b.n	8005b76 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 fb0c 	bl	8006188 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 fb1d 	bl	80061b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	f003 0310 	and.w	r3, r3, #16
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d020      	beq.n	8005bc8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f003 0310 	and.w	r3, r3, #16
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d01b      	beq.n	8005bc8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f06f 0210 	mvn.w	r2, #16
 8005b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2208      	movs	r2, #8
 8005b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	69db      	ldr	r3, [r3, #28]
 8005ba6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d003      	beq.n	8005bb6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 faf4 	bl	800619c <HAL_TIM_IC_CaptureCallback>
 8005bb4:	e005      	b.n	8005bc2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 fae6 	bl	8006188 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 faf7 	bl	80061b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	f003 0301 	and.w	r3, r3, #1
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00c      	beq.n	8005bec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f003 0301 	and.w	r3, r3, #1
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d007      	beq.n	8005bec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f06f 0201 	mvn.w	r2, #1
 8005be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 fac4 	bl	8006174 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d104      	bne.n	8005c00 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d00c      	beq.n	8005c1a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d007      	beq.n	8005c1a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005c12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f001 f8b3 	bl	8006d80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00c      	beq.n	8005c3e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d007      	beq.n	8005c3e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005c36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f001 f8ab 	bl	8006d94 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00c      	beq.n	8005c62 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d007      	beq.n	8005c62 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005c5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 fab1 	bl	80061c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	f003 0320 	and.w	r3, r3, #32
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d00c      	beq.n	8005c86 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f003 0320 	and.w	r3, r3, #32
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d007      	beq.n	8005c86 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f06f 0220 	mvn.w	r2, #32
 8005c7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f001 f873 	bl	8006d6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d00c      	beq.n	8005caa <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d007      	beq.n	8005caa <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005ca2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f001 f87f 	bl	8006da8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00c      	beq.n	8005cce <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d007      	beq.n	8005cce <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005cc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f001 f877 	bl	8006dbc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d00c      	beq.n	8005cf2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d007      	beq.n	8005cf2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005cea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f001 f86f 	bl	8006dd0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d00c      	beq.n	8005d16 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d007      	beq.n	8005d16 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005d0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f001 f867 	bl	8006de4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d16:	bf00      	nop
 8005d18:	3710      	adds	r7, #16
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
	...

08005d20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b086      	sub	sp, #24
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d101      	bne.n	8005d3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d3a:	2302      	movs	r3, #2
 8005d3c:	e0ff      	b.n	8005f3e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2201      	movs	r2, #1
 8005d42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2b14      	cmp	r3, #20
 8005d4a:	f200 80f0 	bhi.w	8005f2e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005d4e:	a201      	add	r2, pc, #4	@ (adr r2, 8005d54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d54:	08005da9 	.word	0x08005da9
 8005d58:	08005f2f 	.word	0x08005f2f
 8005d5c:	08005f2f 	.word	0x08005f2f
 8005d60:	08005f2f 	.word	0x08005f2f
 8005d64:	08005de9 	.word	0x08005de9
 8005d68:	08005f2f 	.word	0x08005f2f
 8005d6c:	08005f2f 	.word	0x08005f2f
 8005d70:	08005f2f 	.word	0x08005f2f
 8005d74:	08005e2b 	.word	0x08005e2b
 8005d78:	08005f2f 	.word	0x08005f2f
 8005d7c:	08005f2f 	.word	0x08005f2f
 8005d80:	08005f2f 	.word	0x08005f2f
 8005d84:	08005e6b 	.word	0x08005e6b
 8005d88:	08005f2f 	.word	0x08005f2f
 8005d8c:	08005f2f 	.word	0x08005f2f
 8005d90:	08005f2f 	.word	0x08005f2f
 8005d94:	08005ead 	.word	0x08005ead
 8005d98:	08005f2f 	.word	0x08005f2f
 8005d9c:	08005f2f 	.word	0x08005f2f
 8005da0:	08005f2f 	.word	0x08005f2f
 8005da4:	08005eed 	.word	0x08005eed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68b9      	ldr	r1, [r7, #8]
 8005dae:	4618      	mov	r0, r3
 8005db0:	f000 fac6 	bl	8006340 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	699a      	ldr	r2, [r3, #24]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f042 0208 	orr.w	r2, r2, #8
 8005dc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	699a      	ldr	r2, [r3, #24]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f022 0204 	bic.w	r2, r2, #4
 8005dd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	6999      	ldr	r1, [r3, #24]
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	691a      	ldr	r2, [r3, #16]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	430a      	orrs	r2, r1
 8005de4:	619a      	str	r2, [r3, #24]
      break;
 8005de6:	e0a5      	b.n	8005f34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68b9      	ldr	r1, [r7, #8]
 8005dee:	4618      	mov	r0, r3
 8005df0:	f000 fb40 	bl	8006474 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	699a      	ldr	r2, [r3, #24]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	699a      	ldr	r2, [r3, #24]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	6999      	ldr	r1, [r3, #24]
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	021a      	lsls	r2, r3, #8
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	430a      	orrs	r2, r1
 8005e26:	619a      	str	r2, [r3, #24]
      break;
 8005e28:	e084      	b.n	8005f34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68b9      	ldr	r1, [r7, #8]
 8005e30:	4618      	mov	r0, r3
 8005e32:	f000 fbb3 	bl	800659c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	69da      	ldr	r2, [r3, #28]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f042 0208 	orr.w	r2, r2, #8
 8005e44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	69da      	ldr	r2, [r3, #28]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f022 0204 	bic.w	r2, r2, #4
 8005e54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	69d9      	ldr	r1, [r3, #28]
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	691a      	ldr	r2, [r3, #16]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	430a      	orrs	r2, r1
 8005e66:	61da      	str	r2, [r3, #28]
      break;
 8005e68:	e064      	b.n	8005f34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68b9      	ldr	r1, [r7, #8]
 8005e70:	4618      	mov	r0, r3
 8005e72:	f000 fc25 	bl	80066c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	69da      	ldr	r2, [r3, #28]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	69da      	ldr	r2, [r3, #28]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	69d9      	ldr	r1, [r3, #28]
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	691b      	ldr	r3, [r3, #16]
 8005ea0:	021a      	lsls	r2, r3, #8
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	430a      	orrs	r2, r1
 8005ea8:	61da      	str	r2, [r3, #28]
      break;
 8005eaa:	e043      	b.n	8005f34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	68b9      	ldr	r1, [r7, #8]
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f000 fc98 	bl	80067e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f042 0208 	orr.w	r2, r2, #8
 8005ec6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f022 0204 	bic.w	r2, r2, #4
 8005ed6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	691a      	ldr	r2, [r3, #16]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	430a      	orrs	r2, r1
 8005ee8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005eea:	e023      	b.n	8005f34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68b9      	ldr	r1, [r7, #8]
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f000 fce2 	bl	80068bc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f06:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f16:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	021a      	lsls	r2, r3, #8
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	430a      	orrs	r2, r1
 8005f2a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005f2c:	e002      	b.n	8005f34 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	75fb      	strb	r3, [r7, #23]
      break;
 8005f32:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3718      	adds	r7, #24
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop

08005f48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f52:	2300      	movs	r3, #0
 8005f54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d101      	bne.n	8005f64 <HAL_TIM_ConfigClockSource+0x1c>
 8005f60:	2302      	movs	r3, #2
 8005f62:	e0f6      	b.n	8006152 <HAL_TIM_ConfigClockSource+0x20a>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2202      	movs	r2, #2
 8005f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005f82:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005f86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68ba      	ldr	r2, [r7, #8]
 8005f96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a6f      	ldr	r2, [pc, #444]	@ (800615c <HAL_TIM_ConfigClockSource+0x214>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	f000 80c1 	beq.w	8006126 <HAL_TIM_ConfigClockSource+0x1de>
 8005fa4:	4a6d      	ldr	r2, [pc, #436]	@ (800615c <HAL_TIM_ConfigClockSource+0x214>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	f200 80c6 	bhi.w	8006138 <HAL_TIM_ConfigClockSource+0x1f0>
 8005fac:	4a6c      	ldr	r2, [pc, #432]	@ (8006160 <HAL_TIM_ConfigClockSource+0x218>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	f000 80b9 	beq.w	8006126 <HAL_TIM_ConfigClockSource+0x1de>
 8005fb4:	4a6a      	ldr	r2, [pc, #424]	@ (8006160 <HAL_TIM_ConfigClockSource+0x218>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	f200 80be 	bhi.w	8006138 <HAL_TIM_ConfigClockSource+0x1f0>
 8005fbc:	4a69      	ldr	r2, [pc, #420]	@ (8006164 <HAL_TIM_ConfigClockSource+0x21c>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	f000 80b1 	beq.w	8006126 <HAL_TIM_ConfigClockSource+0x1de>
 8005fc4:	4a67      	ldr	r2, [pc, #412]	@ (8006164 <HAL_TIM_ConfigClockSource+0x21c>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	f200 80b6 	bhi.w	8006138 <HAL_TIM_ConfigClockSource+0x1f0>
 8005fcc:	4a66      	ldr	r2, [pc, #408]	@ (8006168 <HAL_TIM_ConfigClockSource+0x220>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	f000 80a9 	beq.w	8006126 <HAL_TIM_ConfigClockSource+0x1de>
 8005fd4:	4a64      	ldr	r2, [pc, #400]	@ (8006168 <HAL_TIM_ConfigClockSource+0x220>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	f200 80ae 	bhi.w	8006138 <HAL_TIM_ConfigClockSource+0x1f0>
 8005fdc:	4a63      	ldr	r2, [pc, #396]	@ (800616c <HAL_TIM_ConfigClockSource+0x224>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	f000 80a1 	beq.w	8006126 <HAL_TIM_ConfigClockSource+0x1de>
 8005fe4:	4a61      	ldr	r2, [pc, #388]	@ (800616c <HAL_TIM_ConfigClockSource+0x224>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	f200 80a6 	bhi.w	8006138 <HAL_TIM_ConfigClockSource+0x1f0>
 8005fec:	4a60      	ldr	r2, [pc, #384]	@ (8006170 <HAL_TIM_ConfigClockSource+0x228>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	f000 8099 	beq.w	8006126 <HAL_TIM_ConfigClockSource+0x1de>
 8005ff4:	4a5e      	ldr	r2, [pc, #376]	@ (8006170 <HAL_TIM_ConfigClockSource+0x228>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	f200 809e 	bhi.w	8006138 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ffc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006000:	f000 8091 	beq.w	8006126 <HAL_TIM_ConfigClockSource+0x1de>
 8006004:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006008:	f200 8096 	bhi.w	8006138 <HAL_TIM_ConfigClockSource+0x1f0>
 800600c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006010:	f000 8089 	beq.w	8006126 <HAL_TIM_ConfigClockSource+0x1de>
 8006014:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006018:	f200 808e 	bhi.w	8006138 <HAL_TIM_ConfigClockSource+0x1f0>
 800601c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006020:	d03e      	beq.n	80060a0 <HAL_TIM_ConfigClockSource+0x158>
 8006022:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006026:	f200 8087 	bhi.w	8006138 <HAL_TIM_ConfigClockSource+0x1f0>
 800602a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800602e:	f000 8086 	beq.w	800613e <HAL_TIM_ConfigClockSource+0x1f6>
 8006032:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006036:	d87f      	bhi.n	8006138 <HAL_TIM_ConfigClockSource+0x1f0>
 8006038:	2b70      	cmp	r3, #112	@ 0x70
 800603a:	d01a      	beq.n	8006072 <HAL_TIM_ConfigClockSource+0x12a>
 800603c:	2b70      	cmp	r3, #112	@ 0x70
 800603e:	d87b      	bhi.n	8006138 <HAL_TIM_ConfigClockSource+0x1f0>
 8006040:	2b60      	cmp	r3, #96	@ 0x60
 8006042:	d050      	beq.n	80060e6 <HAL_TIM_ConfigClockSource+0x19e>
 8006044:	2b60      	cmp	r3, #96	@ 0x60
 8006046:	d877      	bhi.n	8006138 <HAL_TIM_ConfigClockSource+0x1f0>
 8006048:	2b50      	cmp	r3, #80	@ 0x50
 800604a:	d03c      	beq.n	80060c6 <HAL_TIM_ConfigClockSource+0x17e>
 800604c:	2b50      	cmp	r3, #80	@ 0x50
 800604e:	d873      	bhi.n	8006138 <HAL_TIM_ConfigClockSource+0x1f0>
 8006050:	2b40      	cmp	r3, #64	@ 0x40
 8006052:	d058      	beq.n	8006106 <HAL_TIM_ConfigClockSource+0x1be>
 8006054:	2b40      	cmp	r3, #64	@ 0x40
 8006056:	d86f      	bhi.n	8006138 <HAL_TIM_ConfigClockSource+0x1f0>
 8006058:	2b30      	cmp	r3, #48	@ 0x30
 800605a:	d064      	beq.n	8006126 <HAL_TIM_ConfigClockSource+0x1de>
 800605c:	2b30      	cmp	r3, #48	@ 0x30
 800605e:	d86b      	bhi.n	8006138 <HAL_TIM_ConfigClockSource+0x1f0>
 8006060:	2b20      	cmp	r3, #32
 8006062:	d060      	beq.n	8006126 <HAL_TIM_ConfigClockSource+0x1de>
 8006064:	2b20      	cmp	r3, #32
 8006066:	d867      	bhi.n	8006138 <HAL_TIM_ConfigClockSource+0x1f0>
 8006068:	2b00      	cmp	r3, #0
 800606a:	d05c      	beq.n	8006126 <HAL_TIM_ConfigClockSource+0x1de>
 800606c:	2b10      	cmp	r3, #16
 800606e:	d05a      	beq.n	8006126 <HAL_TIM_ConfigClockSource+0x1de>
 8006070:	e062      	b.n	8006138 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006082:	f000 fd03 	bl	8006a8c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006094:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68ba      	ldr	r2, [r7, #8]
 800609c:	609a      	str	r2, [r3, #8]
      break;
 800609e:	e04f      	b.n	8006140 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80060b0:	f000 fcec 	bl	8006a8c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	689a      	ldr	r2, [r3, #8]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80060c2:	609a      	str	r2, [r3, #8]
      break;
 80060c4:	e03c      	b.n	8006140 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060d2:	461a      	mov	r2, r3
 80060d4:	f000 fc5e 	bl	8006994 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2150      	movs	r1, #80	@ 0x50
 80060de:	4618      	mov	r0, r3
 80060e0:	f000 fcb7 	bl	8006a52 <TIM_ITRx_SetConfig>
      break;
 80060e4:	e02c      	b.n	8006140 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80060f2:	461a      	mov	r2, r3
 80060f4:	f000 fc7d 	bl	80069f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2160      	movs	r1, #96	@ 0x60
 80060fe:	4618      	mov	r0, r3
 8006100:	f000 fca7 	bl	8006a52 <TIM_ITRx_SetConfig>
      break;
 8006104:	e01c      	b.n	8006140 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006112:	461a      	mov	r2, r3
 8006114:	f000 fc3e 	bl	8006994 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2140      	movs	r1, #64	@ 0x40
 800611e:	4618      	mov	r0, r3
 8006120:	f000 fc97 	bl	8006a52 <TIM_ITRx_SetConfig>
      break;
 8006124:	e00c      	b.n	8006140 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4619      	mov	r1, r3
 8006130:	4610      	mov	r0, r2
 8006132:	f000 fc8e 	bl	8006a52 <TIM_ITRx_SetConfig>
      break;
 8006136:	e003      	b.n	8006140 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	73fb      	strb	r3, [r7, #15]
      break;
 800613c:	e000      	b.n	8006140 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800613e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006150:	7bfb      	ldrb	r3, [r7, #15]
}
 8006152:	4618      	mov	r0, r3
 8006154:	3710      	adds	r7, #16
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop
 800615c:	00100070 	.word	0x00100070
 8006160:	00100060 	.word	0x00100060
 8006164:	00100050 	.word	0x00100050
 8006168:	00100040 	.word	0x00100040
 800616c:	00100030 	.word	0x00100030
 8006170:	00100020 	.word	0x00100020

08006174 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800617c:	bf00      	nop
 800617e:	370c      	adds	r7, #12
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006190:	bf00      	nop
 8006192:	370c      	adds	r7, #12
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061a4:	bf00      	nop
 80061a6:	370c      	adds	r7, #12
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061b8:	bf00      	nop
 80061ba:	370c      	adds	r7, #12
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061cc:	bf00      	nop
 80061ce:	370c      	adds	r7, #12
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80061d8:	b480      	push	{r7}
 80061da:	b085      	sub	sp, #20
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	4a4c      	ldr	r2, [pc, #304]	@ (800631c <TIM_Base_SetConfig+0x144>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d017      	beq.n	8006220 <TIM_Base_SetConfig+0x48>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061f6:	d013      	beq.n	8006220 <TIM_Base_SetConfig+0x48>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a49      	ldr	r2, [pc, #292]	@ (8006320 <TIM_Base_SetConfig+0x148>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d00f      	beq.n	8006220 <TIM_Base_SetConfig+0x48>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4a48      	ldr	r2, [pc, #288]	@ (8006324 <TIM_Base_SetConfig+0x14c>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d00b      	beq.n	8006220 <TIM_Base_SetConfig+0x48>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a47      	ldr	r2, [pc, #284]	@ (8006328 <TIM_Base_SetConfig+0x150>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d007      	beq.n	8006220 <TIM_Base_SetConfig+0x48>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a46      	ldr	r2, [pc, #280]	@ (800632c <TIM_Base_SetConfig+0x154>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d003      	beq.n	8006220 <TIM_Base_SetConfig+0x48>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a45      	ldr	r2, [pc, #276]	@ (8006330 <TIM_Base_SetConfig+0x158>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d108      	bne.n	8006232 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006226:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	4313      	orrs	r3, r2
 8006230:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a39      	ldr	r2, [pc, #228]	@ (800631c <TIM_Base_SetConfig+0x144>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d023      	beq.n	8006282 <TIM_Base_SetConfig+0xaa>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006240:	d01f      	beq.n	8006282 <TIM_Base_SetConfig+0xaa>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a36      	ldr	r2, [pc, #216]	@ (8006320 <TIM_Base_SetConfig+0x148>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d01b      	beq.n	8006282 <TIM_Base_SetConfig+0xaa>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a35      	ldr	r2, [pc, #212]	@ (8006324 <TIM_Base_SetConfig+0x14c>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d017      	beq.n	8006282 <TIM_Base_SetConfig+0xaa>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a34      	ldr	r2, [pc, #208]	@ (8006328 <TIM_Base_SetConfig+0x150>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d013      	beq.n	8006282 <TIM_Base_SetConfig+0xaa>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a33      	ldr	r2, [pc, #204]	@ (800632c <TIM_Base_SetConfig+0x154>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d00f      	beq.n	8006282 <TIM_Base_SetConfig+0xaa>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a33      	ldr	r2, [pc, #204]	@ (8006334 <TIM_Base_SetConfig+0x15c>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d00b      	beq.n	8006282 <TIM_Base_SetConfig+0xaa>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a32      	ldr	r2, [pc, #200]	@ (8006338 <TIM_Base_SetConfig+0x160>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d007      	beq.n	8006282 <TIM_Base_SetConfig+0xaa>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a31      	ldr	r2, [pc, #196]	@ (800633c <TIM_Base_SetConfig+0x164>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d003      	beq.n	8006282 <TIM_Base_SetConfig+0xaa>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a2c      	ldr	r2, [pc, #176]	@ (8006330 <TIM_Base_SetConfig+0x158>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d108      	bne.n	8006294 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006288:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	4313      	orrs	r3, r2
 8006292:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	695b      	ldr	r3, [r3, #20]
 800629e:	4313      	orrs	r3, r2
 80062a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	689a      	ldr	r2, [r3, #8]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4a18      	ldr	r2, [pc, #96]	@ (800631c <TIM_Base_SetConfig+0x144>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d013      	beq.n	80062e8 <TIM_Base_SetConfig+0x110>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4a1a      	ldr	r2, [pc, #104]	@ (800632c <TIM_Base_SetConfig+0x154>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d00f      	beq.n	80062e8 <TIM_Base_SetConfig+0x110>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a1a      	ldr	r2, [pc, #104]	@ (8006334 <TIM_Base_SetConfig+0x15c>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d00b      	beq.n	80062e8 <TIM_Base_SetConfig+0x110>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4a19      	ldr	r2, [pc, #100]	@ (8006338 <TIM_Base_SetConfig+0x160>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d007      	beq.n	80062e8 <TIM_Base_SetConfig+0x110>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4a18      	ldr	r2, [pc, #96]	@ (800633c <TIM_Base_SetConfig+0x164>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d003      	beq.n	80062e8 <TIM_Base_SetConfig+0x110>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4a13      	ldr	r2, [pc, #76]	@ (8006330 <TIM_Base_SetConfig+0x158>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d103      	bne.n	80062f0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	691a      	ldr	r2, [r3, #16]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	f003 0301 	and.w	r3, r3, #1
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d105      	bne.n	800630e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	f023 0201 	bic.w	r2, r3, #1
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	611a      	str	r2, [r3, #16]
  }
}
 800630e:	bf00      	nop
 8006310:	3714      	adds	r7, #20
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	40012c00 	.word	0x40012c00
 8006320:	40000400 	.word	0x40000400
 8006324:	40000800 	.word	0x40000800
 8006328:	40000c00 	.word	0x40000c00
 800632c:	40013400 	.word	0x40013400
 8006330:	40015000 	.word	0x40015000
 8006334:	40014000 	.word	0x40014000
 8006338:	40014400 	.word	0x40014400
 800633c:	40014800 	.word	0x40014800

08006340 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006340:	b480      	push	{r7}
 8006342:	b087      	sub	sp, #28
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a1b      	ldr	r3, [r3, #32]
 800634e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6a1b      	ldr	r3, [r3, #32]
 8006354:	f023 0201 	bic.w	r2, r3, #1
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	699b      	ldr	r3, [r3, #24]
 8006366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800636e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f023 0303 	bic.w	r3, r3, #3
 800637a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	4313      	orrs	r3, r2
 8006384:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	f023 0302 	bic.w	r3, r3, #2
 800638c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	4313      	orrs	r3, r2
 8006396:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a30      	ldr	r2, [pc, #192]	@ (800645c <TIM_OC1_SetConfig+0x11c>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d013      	beq.n	80063c8 <TIM_OC1_SetConfig+0x88>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a2f      	ldr	r2, [pc, #188]	@ (8006460 <TIM_OC1_SetConfig+0x120>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d00f      	beq.n	80063c8 <TIM_OC1_SetConfig+0x88>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4a2e      	ldr	r2, [pc, #184]	@ (8006464 <TIM_OC1_SetConfig+0x124>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d00b      	beq.n	80063c8 <TIM_OC1_SetConfig+0x88>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4a2d      	ldr	r2, [pc, #180]	@ (8006468 <TIM_OC1_SetConfig+0x128>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d007      	beq.n	80063c8 <TIM_OC1_SetConfig+0x88>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	4a2c      	ldr	r2, [pc, #176]	@ (800646c <TIM_OC1_SetConfig+0x12c>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d003      	beq.n	80063c8 <TIM_OC1_SetConfig+0x88>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4a2b      	ldr	r2, [pc, #172]	@ (8006470 <TIM_OC1_SetConfig+0x130>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d10c      	bne.n	80063e2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	f023 0308 	bic.w	r3, r3, #8
 80063ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	697a      	ldr	r2, [r7, #20]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	f023 0304 	bic.w	r3, r3, #4
 80063e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a1d      	ldr	r2, [pc, #116]	@ (800645c <TIM_OC1_SetConfig+0x11c>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d013      	beq.n	8006412 <TIM_OC1_SetConfig+0xd2>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a1c      	ldr	r2, [pc, #112]	@ (8006460 <TIM_OC1_SetConfig+0x120>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d00f      	beq.n	8006412 <TIM_OC1_SetConfig+0xd2>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a1b      	ldr	r2, [pc, #108]	@ (8006464 <TIM_OC1_SetConfig+0x124>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d00b      	beq.n	8006412 <TIM_OC1_SetConfig+0xd2>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a1a      	ldr	r2, [pc, #104]	@ (8006468 <TIM_OC1_SetConfig+0x128>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d007      	beq.n	8006412 <TIM_OC1_SetConfig+0xd2>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a19      	ldr	r2, [pc, #100]	@ (800646c <TIM_OC1_SetConfig+0x12c>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d003      	beq.n	8006412 <TIM_OC1_SetConfig+0xd2>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a18      	ldr	r2, [pc, #96]	@ (8006470 <TIM_OC1_SetConfig+0x130>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d111      	bne.n	8006436 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006418:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006420:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	695b      	ldr	r3, [r3, #20]
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	4313      	orrs	r3, r2
 800642a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	699b      	ldr	r3, [r3, #24]
 8006430:	693a      	ldr	r2, [r7, #16]
 8006432:	4313      	orrs	r3, r2
 8006434:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	693a      	ldr	r2, [r7, #16]
 800643a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	685a      	ldr	r2, [r3, #4]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	697a      	ldr	r2, [r7, #20]
 800644e:	621a      	str	r2, [r3, #32]
}
 8006450:	bf00      	nop
 8006452:	371c      	adds	r7, #28
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr
 800645c:	40012c00 	.word	0x40012c00
 8006460:	40013400 	.word	0x40013400
 8006464:	40014000 	.word	0x40014000
 8006468:	40014400 	.word	0x40014400
 800646c:	40014800 	.word	0x40014800
 8006470:	40015000 	.word	0x40015000

08006474 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006474:	b480      	push	{r7}
 8006476:	b087      	sub	sp, #28
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a1b      	ldr	r3, [r3, #32]
 8006482:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6a1b      	ldr	r3, [r3, #32]
 8006488:	f023 0210 	bic.w	r2, r3, #16
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	699b      	ldr	r3, [r3, #24]
 800649a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80064a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	021b      	lsls	r3, r3, #8
 80064b6:	68fa      	ldr	r2, [r7, #12]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	f023 0320 	bic.w	r3, r3, #32
 80064c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	011b      	lsls	r3, r3, #4
 80064ca:	697a      	ldr	r2, [r7, #20]
 80064cc:	4313      	orrs	r3, r2
 80064ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	4a2c      	ldr	r2, [pc, #176]	@ (8006584 <TIM_OC2_SetConfig+0x110>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d007      	beq.n	80064e8 <TIM_OC2_SetConfig+0x74>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4a2b      	ldr	r2, [pc, #172]	@ (8006588 <TIM_OC2_SetConfig+0x114>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d003      	beq.n	80064e8 <TIM_OC2_SetConfig+0x74>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4a2a      	ldr	r2, [pc, #168]	@ (800658c <TIM_OC2_SetConfig+0x118>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d10d      	bne.n	8006504 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80064ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	011b      	lsls	r3, r3, #4
 80064f6:	697a      	ldr	r2, [r7, #20]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006502:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a1f      	ldr	r2, [pc, #124]	@ (8006584 <TIM_OC2_SetConfig+0x110>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d013      	beq.n	8006534 <TIM_OC2_SetConfig+0xc0>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a1e      	ldr	r2, [pc, #120]	@ (8006588 <TIM_OC2_SetConfig+0x114>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d00f      	beq.n	8006534 <TIM_OC2_SetConfig+0xc0>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a1e      	ldr	r2, [pc, #120]	@ (8006590 <TIM_OC2_SetConfig+0x11c>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d00b      	beq.n	8006534 <TIM_OC2_SetConfig+0xc0>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a1d      	ldr	r2, [pc, #116]	@ (8006594 <TIM_OC2_SetConfig+0x120>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d007      	beq.n	8006534 <TIM_OC2_SetConfig+0xc0>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a1c      	ldr	r2, [pc, #112]	@ (8006598 <TIM_OC2_SetConfig+0x124>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d003      	beq.n	8006534 <TIM_OC2_SetConfig+0xc0>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a17      	ldr	r2, [pc, #92]	@ (800658c <TIM_OC2_SetConfig+0x118>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d113      	bne.n	800655c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800653a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006542:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	695b      	ldr	r3, [r3, #20]
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	693a      	ldr	r2, [r7, #16]
 800654c:	4313      	orrs	r3, r2
 800654e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	699b      	ldr	r3, [r3, #24]
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	693a      	ldr	r2, [r7, #16]
 8006558:	4313      	orrs	r3, r2
 800655a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	693a      	ldr	r2, [r7, #16]
 8006560:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	68fa      	ldr	r2, [r7, #12]
 8006566:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	685a      	ldr	r2, [r3, #4]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	697a      	ldr	r2, [r7, #20]
 8006574:	621a      	str	r2, [r3, #32]
}
 8006576:	bf00      	nop
 8006578:	371c      	adds	r7, #28
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr
 8006582:	bf00      	nop
 8006584:	40012c00 	.word	0x40012c00
 8006588:	40013400 	.word	0x40013400
 800658c:	40015000 	.word	0x40015000
 8006590:	40014000 	.word	0x40014000
 8006594:	40014400 	.word	0x40014400
 8006598:	40014800 	.word	0x40014800

0800659c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800659c:	b480      	push	{r7}
 800659e:	b087      	sub	sp, #28
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6a1b      	ldr	r3, [r3, #32]
 80065aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a1b      	ldr	r3, [r3, #32]
 80065b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	69db      	ldr	r3, [r3, #28]
 80065c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f023 0303 	bic.w	r3, r3, #3
 80065d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68fa      	ldr	r2, [r7, #12]
 80065de:	4313      	orrs	r3, r2
 80065e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80065e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	021b      	lsls	r3, r3, #8
 80065f0:	697a      	ldr	r2, [r7, #20]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a2b      	ldr	r2, [pc, #172]	@ (80066a8 <TIM_OC3_SetConfig+0x10c>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d007      	beq.n	800660e <TIM_OC3_SetConfig+0x72>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a2a      	ldr	r2, [pc, #168]	@ (80066ac <TIM_OC3_SetConfig+0x110>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d003      	beq.n	800660e <TIM_OC3_SetConfig+0x72>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a29      	ldr	r2, [pc, #164]	@ (80066b0 <TIM_OC3_SetConfig+0x114>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d10d      	bne.n	800662a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006614:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	021b      	lsls	r3, r3, #8
 800661c:	697a      	ldr	r2, [r7, #20]
 800661e:	4313      	orrs	r3, r2
 8006620:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006628:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a1e      	ldr	r2, [pc, #120]	@ (80066a8 <TIM_OC3_SetConfig+0x10c>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d013      	beq.n	800665a <TIM_OC3_SetConfig+0xbe>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a1d      	ldr	r2, [pc, #116]	@ (80066ac <TIM_OC3_SetConfig+0x110>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d00f      	beq.n	800665a <TIM_OC3_SetConfig+0xbe>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4a1d      	ldr	r2, [pc, #116]	@ (80066b4 <TIM_OC3_SetConfig+0x118>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d00b      	beq.n	800665a <TIM_OC3_SetConfig+0xbe>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4a1c      	ldr	r2, [pc, #112]	@ (80066b8 <TIM_OC3_SetConfig+0x11c>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d007      	beq.n	800665a <TIM_OC3_SetConfig+0xbe>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4a1b      	ldr	r2, [pc, #108]	@ (80066bc <TIM_OC3_SetConfig+0x120>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d003      	beq.n	800665a <TIM_OC3_SetConfig+0xbe>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a16      	ldr	r2, [pc, #88]	@ (80066b0 <TIM_OC3_SetConfig+0x114>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d113      	bne.n	8006682 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006660:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006668:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	695b      	ldr	r3, [r3, #20]
 800666e:	011b      	lsls	r3, r3, #4
 8006670:	693a      	ldr	r2, [r7, #16]
 8006672:	4313      	orrs	r3, r2
 8006674:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	699b      	ldr	r3, [r3, #24]
 800667a:	011b      	lsls	r3, r3, #4
 800667c:	693a      	ldr	r2, [r7, #16]
 800667e:	4313      	orrs	r3, r2
 8006680:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	693a      	ldr	r2, [r7, #16]
 8006686:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	685a      	ldr	r2, [r3, #4]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	697a      	ldr	r2, [r7, #20]
 800669a:	621a      	str	r2, [r3, #32]
}
 800669c:	bf00      	nop
 800669e:	371c      	adds	r7, #28
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr
 80066a8:	40012c00 	.word	0x40012c00
 80066ac:	40013400 	.word	0x40013400
 80066b0:	40015000 	.word	0x40015000
 80066b4:	40014000 	.word	0x40014000
 80066b8:	40014400 	.word	0x40014400
 80066bc:	40014800 	.word	0x40014800

080066c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b087      	sub	sp, #28
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6a1b      	ldr	r3, [r3, #32]
 80066ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6a1b      	ldr	r3, [r3, #32]
 80066d4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	69db      	ldr	r3, [r3, #28]
 80066e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80066ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	021b      	lsls	r3, r3, #8
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	4313      	orrs	r3, r2
 8006706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800670e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	031b      	lsls	r3, r3, #12
 8006716:	697a      	ldr	r2, [r7, #20]
 8006718:	4313      	orrs	r3, r2
 800671a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4a2c      	ldr	r2, [pc, #176]	@ (80067d0 <TIM_OC4_SetConfig+0x110>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d007      	beq.n	8006734 <TIM_OC4_SetConfig+0x74>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	4a2b      	ldr	r2, [pc, #172]	@ (80067d4 <TIM_OC4_SetConfig+0x114>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d003      	beq.n	8006734 <TIM_OC4_SetConfig+0x74>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	4a2a      	ldr	r2, [pc, #168]	@ (80067d8 <TIM_OC4_SetConfig+0x118>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d10d      	bne.n	8006750 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800673a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	031b      	lsls	r3, r3, #12
 8006742:	697a      	ldr	r2, [r7, #20]
 8006744:	4313      	orrs	r3, r2
 8006746:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800674e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4a1f      	ldr	r2, [pc, #124]	@ (80067d0 <TIM_OC4_SetConfig+0x110>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d013      	beq.n	8006780 <TIM_OC4_SetConfig+0xc0>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4a1e      	ldr	r2, [pc, #120]	@ (80067d4 <TIM_OC4_SetConfig+0x114>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d00f      	beq.n	8006780 <TIM_OC4_SetConfig+0xc0>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4a1e      	ldr	r2, [pc, #120]	@ (80067dc <TIM_OC4_SetConfig+0x11c>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d00b      	beq.n	8006780 <TIM_OC4_SetConfig+0xc0>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4a1d      	ldr	r2, [pc, #116]	@ (80067e0 <TIM_OC4_SetConfig+0x120>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d007      	beq.n	8006780 <TIM_OC4_SetConfig+0xc0>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4a1c      	ldr	r2, [pc, #112]	@ (80067e4 <TIM_OC4_SetConfig+0x124>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d003      	beq.n	8006780 <TIM_OC4_SetConfig+0xc0>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a17      	ldr	r2, [pc, #92]	@ (80067d8 <TIM_OC4_SetConfig+0x118>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d113      	bne.n	80067a8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006786:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800678e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	695b      	ldr	r3, [r3, #20]
 8006794:	019b      	lsls	r3, r3, #6
 8006796:	693a      	ldr	r2, [r7, #16]
 8006798:	4313      	orrs	r3, r2
 800679a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	699b      	ldr	r3, [r3, #24]
 80067a0:	019b      	lsls	r3, r3, #6
 80067a2:	693a      	ldr	r2, [r7, #16]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	693a      	ldr	r2, [r7, #16]
 80067ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	68fa      	ldr	r2, [r7, #12]
 80067b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	685a      	ldr	r2, [r3, #4]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	697a      	ldr	r2, [r7, #20]
 80067c0:	621a      	str	r2, [r3, #32]
}
 80067c2:	bf00      	nop
 80067c4:	371c      	adds	r7, #28
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr
 80067ce:	bf00      	nop
 80067d0:	40012c00 	.word	0x40012c00
 80067d4:	40013400 	.word	0x40013400
 80067d8:	40015000 	.word	0x40015000
 80067dc:	40014000 	.word	0x40014000
 80067e0:	40014400 	.word	0x40014400
 80067e4:	40014800 	.word	0x40014800

080067e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b087      	sub	sp, #28
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a1b      	ldr	r3, [r3, #32]
 80067f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6a1b      	ldr	r3, [r3, #32]
 80067fc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800680e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006816:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800681a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	4313      	orrs	r3, r2
 8006824:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800682c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	041b      	lsls	r3, r3, #16
 8006834:	693a      	ldr	r2, [r7, #16]
 8006836:	4313      	orrs	r3, r2
 8006838:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a19      	ldr	r2, [pc, #100]	@ (80068a4 <TIM_OC5_SetConfig+0xbc>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d013      	beq.n	800686a <TIM_OC5_SetConfig+0x82>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a18      	ldr	r2, [pc, #96]	@ (80068a8 <TIM_OC5_SetConfig+0xc0>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d00f      	beq.n	800686a <TIM_OC5_SetConfig+0x82>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a17      	ldr	r2, [pc, #92]	@ (80068ac <TIM_OC5_SetConfig+0xc4>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d00b      	beq.n	800686a <TIM_OC5_SetConfig+0x82>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a16      	ldr	r2, [pc, #88]	@ (80068b0 <TIM_OC5_SetConfig+0xc8>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d007      	beq.n	800686a <TIM_OC5_SetConfig+0x82>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4a15      	ldr	r2, [pc, #84]	@ (80068b4 <TIM_OC5_SetConfig+0xcc>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d003      	beq.n	800686a <TIM_OC5_SetConfig+0x82>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4a14      	ldr	r2, [pc, #80]	@ (80068b8 <TIM_OC5_SetConfig+0xd0>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d109      	bne.n	800687e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006870:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	695b      	ldr	r3, [r3, #20]
 8006876:	021b      	lsls	r3, r3, #8
 8006878:	697a      	ldr	r2, [r7, #20]
 800687a:	4313      	orrs	r3, r2
 800687c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	697a      	ldr	r2, [r7, #20]
 8006882:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	685a      	ldr	r2, [r3, #4]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	693a      	ldr	r2, [r7, #16]
 8006896:	621a      	str	r2, [r3, #32]
}
 8006898:	bf00      	nop
 800689a:	371c      	adds	r7, #28
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr
 80068a4:	40012c00 	.word	0x40012c00
 80068a8:	40013400 	.word	0x40013400
 80068ac:	40014000 	.word	0x40014000
 80068b0:	40014400 	.word	0x40014400
 80068b4:	40014800 	.word	0x40014800
 80068b8:	40015000 	.word	0x40015000

080068bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80068bc:	b480      	push	{r7}
 80068be:	b087      	sub	sp, #28
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a1b      	ldr	r3, [r3, #32]
 80068ca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6a1b      	ldr	r3, [r3, #32]
 80068d0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80068ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	021b      	lsls	r3, r3, #8
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	4313      	orrs	r3, r2
 80068fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006902:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	051b      	lsls	r3, r3, #20
 800690a:	693a      	ldr	r2, [r7, #16]
 800690c:	4313      	orrs	r3, r2
 800690e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4a1a      	ldr	r2, [pc, #104]	@ (800697c <TIM_OC6_SetConfig+0xc0>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d013      	beq.n	8006940 <TIM_OC6_SetConfig+0x84>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a19      	ldr	r2, [pc, #100]	@ (8006980 <TIM_OC6_SetConfig+0xc4>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d00f      	beq.n	8006940 <TIM_OC6_SetConfig+0x84>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a18      	ldr	r2, [pc, #96]	@ (8006984 <TIM_OC6_SetConfig+0xc8>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d00b      	beq.n	8006940 <TIM_OC6_SetConfig+0x84>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	4a17      	ldr	r2, [pc, #92]	@ (8006988 <TIM_OC6_SetConfig+0xcc>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d007      	beq.n	8006940 <TIM_OC6_SetConfig+0x84>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4a16      	ldr	r2, [pc, #88]	@ (800698c <TIM_OC6_SetConfig+0xd0>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d003      	beq.n	8006940 <TIM_OC6_SetConfig+0x84>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a15      	ldr	r2, [pc, #84]	@ (8006990 <TIM_OC6_SetConfig+0xd4>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d109      	bne.n	8006954 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006946:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	695b      	ldr	r3, [r3, #20]
 800694c:	029b      	lsls	r3, r3, #10
 800694e:	697a      	ldr	r2, [r7, #20]
 8006950:	4313      	orrs	r3, r2
 8006952:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	697a      	ldr	r2, [r7, #20]
 8006958:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	685a      	ldr	r2, [r3, #4]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	693a      	ldr	r2, [r7, #16]
 800696c:	621a      	str	r2, [r3, #32]
}
 800696e:	bf00      	nop
 8006970:	371c      	adds	r7, #28
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr
 800697a:	bf00      	nop
 800697c:	40012c00 	.word	0x40012c00
 8006980:	40013400 	.word	0x40013400
 8006984:	40014000 	.word	0x40014000
 8006988:	40014400 	.word	0x40014400
 800698c:	40014800 	.word	0x40014800
 8006990:	40015000 	.word	0x40015000

08006994 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006994:	b480      	push	{r7}
 8006996:	b087      	sub	sp, #28
 8006998:	af00      	add	r7, sp, #0
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6a1b      	ldr	r3, [r3, #32]
 80069a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6a1b      	ldr	r3, [r3, #32]
 80069aa:	f023 0201 	bic.w	r2, r3, #1
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	699b      	ldr	r3, [r3, #24]
 80069b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80069be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	011b      	lsls	r3, r3, #4
 80069c4:	693a      	ldr	r2, [r7, #16]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	f023 030a 	bic.w	r3, r3, #10
 80069d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80069d2:	697a      	ldr	r2, [r7, #20]
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	693a      	ldr	r2, [r7, #16]
 80069de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	697a      	ldr	r2, [r7, #20]
 80069e4:	621a      	str	r2, [r3, #32]
}
 80069e6:	bf00      	nop
 80069e8:	371c      	adds	r7, #28
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr

080069f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069f2:	b480      	push	{r7}
 80069f4:	b087      	sub	sp, #28
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	60f8      	str	r0, [r7, #12]
 80069fa:	60b9      	str	r1, [r7, #8]
 80069fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	6a1b      	ldr	r3, [r3, #32]
 8006a02:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6a1b      	ldr	r3, [r3, #32]
 8006a08:	f023 0210 	bic.w	r2, r3, #16
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	699b      	ldr	r3, [r3, #24]
 8006a14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006a1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	031b      	lsls	r3, r3, #12
 8006a22:	693a      	ldr	r2, [r7, #16]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006a2e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	011b      	lsls	r3, r3, #4
 8006a34:	697a      	ldr	r2, [r7, #20]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	693a      	ldr	r2, [r7, #16]
 8006a3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	697a      	ldr	r2, [r7, #20]
 8006a44:	621a      	str	r2, [r3, #32]
}
 8006a46:	bf00      	nop
 8006a48:	371c      	adds	r7, #28
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr

08006a52 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a52:	b480      	push	{r7}
 8006a54:	b085      	sub	sp, #20
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
 8006a5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006a68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a6e:	683a      	ldr	r2, [r7, #0]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	f043 0307 	orr.w	r3, r3, #7
 8006a78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	609a      	str	r2, [r3, #8]
}
 8006a80:	bf00      	nop
 8006a82:	3714      	adds	r7, #20
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b087      	sub	sp, #28
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	60b9      	str	r1, [r7, #8]
 8006a96:	607a      	str	r2, [r7, #4]
 8006a98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006aa6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	021a      	lsls	r2, r3, #8
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	431a      	orrs	r2, r3
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	697a      	ldr	r2, [r7, #20]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	697a      	ldr	r2, [r7, #20]
 8006abe:	609a      	str	r2, [r3, #8]
}
 8006ac0:	bf00      	nop
 8006ac2:	371c      	adds	r7, #28
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr

08006acc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b087      	sub	sp, #28
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	60b9      	str	r1, [r7, #8]
 8006ad6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	f003 031f 	and.w	r3, r3, #31
 8006ade:	2201      	movs	r2, #1
 8006ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6a1a      	ldr	r2, [r3, #32]
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	43db      	mvns	r3, r3
 8006aee:	401a      	ands	r2, r3
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6a1a      	ldr	r2, [r3, #32]
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	f003 031f 	and.w	r3, r3, #31
 8006afe:	6879      	ldr	r1, [r7, #4]
 8006b00:	fa01 f303 	lsl.w	r3, r1, r3
 8006b04:	431a      	orrs	r2, r3
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	621a      	str	r2, [r3, #32]
}
 8006b0a:	bf00      	nop
 8006b0c:	371c      	adds	r7, #28
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr
	...

08006b18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b085      	sub	sp, #20
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d101      	bne.n	8006b30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b2c:	2302      	movs	r3, #2
 8006b2e:	e074      	b.n	8006c1a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2202      	movs	r2, #2
 8006b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a34      	ldr	r2, [pc, #208]	@ (8006c28 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d009      	beq.n	8006b6e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a33      	ldr	r2, [pc, #204]	@ (8006c2c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d004      	beq.n	8006b6e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a31      	ldr	r2, [pc, #196]	@ (8006c30 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d108      	bne.n	8006b80 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006b74:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006b86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	68fa      	ldr	r2, [r7, #12]
 8006b92:	4313      	orrs	r3, r2
 8006b94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a21      	ldr	r2, [pc, #132]	@ (8006c28 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d022      	beq.n	8006bee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bb0:	d01d      	beq.n	8006bee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a1f      	ldr	r2, [pc, #124]	@ (8006c34 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d018      	beq.n	8006bee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a1d      	ldr	r2, [pc, #116]	@ (8006c38 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d013      	beq.n	8006bee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a1c      	ldr	r2, [pc, #112]	@ (8006c3c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d00e      	beq.n	8006bee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a15      	ldr	r2, [pc, #84]	@ (8006c2c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d009      	beq.n	8006bee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a18      	ldr	r2, [pc, #96]	@ (8006c40 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d004      	beq.n	8006bee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a11      	ldr	r2, [pc, #68]	@ (8006c30 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d10c      	bne.n	8006c08 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006bf4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	68ba      	ldr	r2, [r7, #8]
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	68ba      	ldr	r2, [r7, #8]
 8006c06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3714      	adds	r7, #20
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop
 8006c28:	40012c00 	.word	0x40012c00
 8006c2c:	40013400 	.word	0x40013400
 8006c30:	40015000 	.word	0x40015000
 8006c34:	40000400 	.word	0x40000400
 8006c38:	40000800 	.word	0x40000800
 8006c3c:	40000c00 	.word	0x40000c00
 8006c40:	40014000 	.word	0x40014000

08006c44 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b085      	sub	sp, #20
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d101      	bne.n	8006c60 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006c5c:	2302      	movs	r3, #2
 8006c5e:	e078      	b.n	8006d52 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	68db      	ldr	r3, [r3, #12]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	691b      	ldr	r3, [r3, #16]
 8006caa:	4313      	orrs	r3, r2
 8006cac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	695b      	ldr	r3, [r3, #20]
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	699b      	ldr	r3, [r3, #24]
 8006cd4:	041b      	lsls	r3, r3, #16
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	69db      	ldr	r3, [r3, #28]
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a1c      	ldr	r2, [pc, #112]	@ (8006d60 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d009      	beq.n	8006d06 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a1b      	ldr	r2, [pc, #108]	@ (8006d64 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d004      	beq.n	8006d06 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a19      	ldr	r2, [pc, #100]	@ (8006d68 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d11c      	bne.n	8006d40 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d10:	051b      	lsls	r3, r3, #20
 8006d12:	4313      	orrs	r3, r2
 8006d14:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	6a1b      	ldr	r3, [r3, #32]
 8006d20:	4313      	orrs	r3, r2
 8006d22:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3714      	adds	r7, #20
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr
 8006d5e:	bf00      	nop
 8006d60:	40012c00 	.word	0x40012c00
 8006d64:	40013400 	.word	0x40013400
 8006d68:	40015000 	.word	0x40015000

08006d6c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d74:	bf00      	nop
 8006d76:	370c      	adds	r7, #12
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d88:	bf00      	nop
 8006d8a:	370c      	adds	r7, #12
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr

08006d94 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b083      	sub	sp, #12
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006d9c:	bf00      	nop
 8006d9e:	370c      	adds	r7, #12
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006db0:	bf00      	nop
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006dc4:	bf00      	nop
 8006dc6:	370c      	adds	r7, #12
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006dd8:	bf00      	nop
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006dec:	bf00      	nop
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b082      	sub	sp, #8
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d101      	bne.n	8006e0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	e042      	b.n	8006e90 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d106      	bne.n	8006e22 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f7fb fda3 	bl	8002968 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2224      	movs	r2, #36	@ 0x24
 8006e26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f022 0201 	bic.w	r2, r2, #1
 8006e38:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d002      	beq.n	8006e48 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 ffbe 	bl	8007dc4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 fcbf 	bl	80077cc <UART_SetConfig>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d101      	bne.n	8006e58 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	e01b      	b.n	8006e90 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	685a      	ldr	r2, [r3, #4]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006e66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	689a      	ldr	r2, [r3, #8]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006e76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f042 0201 	orr.w	r2, r2, #1
 8006e86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f001 f83d 	bl	8007f08 <UART_CheckIdleState>
 8006e8e:	4603      	mov	r3, r0
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3708      	adds	r7, #8
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b08a      	sub	sp, #40	@ 0x28
 8006e9c:	af02      	add	r7, sp, #8
 8006e9e:	60f8      	str	r0, [r7, #12]
 8006ea0:	60b9      	str	r1, [r7, #8]
 8006ea2:	603b      	str	r3, [r7, #0]
 8006ea4:	4613      	mov	r3, r2
 8006ea6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006eae:	2b20      	cmp	r3, #32
 8006eb0:	d17b      	bne.n	8006faa <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d002      	beq.n	8006ebe <HAL_UART_Transmit+0x26>
 8006eb8:	88fb      	ldrh	r3, [r7, #6]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d101      	bne.n	8006ec2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e074      	b.n	8006fac <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2221      	movs	r2, #33	@ 0x21
 8006ece:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ed2:	f7fb ffa7 	bl	8002e24 <HAL_GetTick>
 8006ed6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	88fa      	ldrh	r2, [r7, #6]
 8006edc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	88fa      	ldrh	r2, [r7, #6]
 8006ee4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ef0:	d108      	bne.n	8006f04 <HAL_UART_Transmit+0x6c>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d104      	bne.n	8006f04 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006efa:	2300      	movs	r3, #0
 8006efc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	61bb      	str	r3, [r7, #24]
 8006f02:	e003      	b.n	8006f0c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006f0c:	e030      	b.n	8006f70 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	9300      	str	r3, [sp, #0]
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	2200      	movs	r2, #0
 8006f16:	2180      	movs	r1, #128	@ 0x80
 8006f18:	68f8      	ldr	r0, [r7, #12]
 8006f1a:	f001 f89f 	bl	800805c <UART_WaitOnFlagUntilTimeout>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d005      	beq.n	8006f30 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2220      	movs	r2, #32
 8006f28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006f2c:	2303      	movs	r3, #3
 8006f2e:	e03d      	b.n	8006fac <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d10b      	bne.n	8006f4e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	881b      	ldrh	r3, [r3, #0]
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f44:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	3302      	adds	r3, #2
 8006f4a:	61bb      	str	r3, [r7, #24]
 8006f4c:	e007      	b.n	8006f5e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	781a      	ldrb	r2, [r3, #0]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006f58:	69fb      	ldr	r3, [r7, #28]
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	3b01      	subs	r3, #1
 8006f68:	b29a      	uxth	r2, r3
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d1c8      	bne.n	8006f0e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	9300      	str	r3, [sp, #0]
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	2200      	movs	r2, #0
 8006f84:	2140      	movs	r1, #64	@ 0x40
 8006f86:	68f8      	ldr	r0, [r7, #12]
 8006f88:	f001 f868 	bl	800805c <UART_WaitOnFlagUntilTimeout>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d005      	beq.n	8006f9e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2220      	movs	r2, #32
 8006f96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006f9a:	2303      	movs	r3, #3
 8006f9c:	e006      	b.n	8006fac <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2220      	movs	r2, #32
 8006fa2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	e000      	b.n	8006fac <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006faa:	2302      	movs	r3, #2
  }
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3720      	adds	r7, #32
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b08a      	sub	sp, #40	@ 0x28
 8006fb8:	af02      	add	r7, sp, #8
 8006fba:	60f8      	str	r0, [r7, #12]
 8006fbc:	60b9      	str	r1, [r7, #8]
 8006fbe:	603b      	str	r3, [r7, #0]
 8006fc0:	4613      	mov	r3, r2
 8006fc2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006fca:	2b20      	cmp	r3, #32
 8006fcc:	f040 80b5 	bne.w	800713a <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d002      	beq.n	8006fdc <HAL_UART_Receive+0x28>
 8006fd6:	88fb      	ldrh	r3, [r7, #6]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d101      	bne.n	8006fe0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	e0ad      	b.n	800713c <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2222      	movs	r2, #34	@ 0x22
 8006fec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ff6:	f7fb ff15 	bl	8002e24 <HAL_GetTick>
 8006ffa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	88fa      	ldrh	r2, [r7, #6]
 8007000:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	88fa      	ldrh	r2, [r7, #6]
 8007008:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007014:	d10e      	bne.n	8007034 <HAL_UART_Receive+0x80>
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d105      	bne.n	800702a <HAL_UART_Receive+0x76>
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007024:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007028:	e02d      	b.n	8007086 <HAL_UART_Receive+0xd2>
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	22ff      	movs	r2, #255	@ 0xff
 800702e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007032:	e028      	b.n	8007086 <HAL_UART_Receive+0xd2>
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d10d      	bne.n	8007058 <HAL_UART_Receive+0xa4>
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	691b      	ldr	r3, [r3, #16]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d104      	bne.n	800704e <HAL_UART_Receive+0x9a>
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	22ff      	movs	r2, #255	@ 0xff
 8007048:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800704c:	e01b      	b.n	8007086 <HAL_UART_Receive+0xd2>
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	227f      	movs	r2, #127	@ 0x7f
 8007052:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007056:	e016      	b.n	8007086 <HAL_UART_Receive+0xd2>
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007060:	d10d      	bne.n	800707e <HAL_UART_Receive+0xca>
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	691b      	ldr	r3, [r3, #16]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d104      	bne.n	8007074 <HAL_UART_Receive+0xc0>
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	227f      	movs	r2, #127	@ 0x7f
 800706e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007072:	e008      	b.n	8007086 <HAL_UART_Receive+0xd2>
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	223f      	movs	r2, #63	@ 0x3f
 8007078:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800707c:	e003      	b.n	8007086 <HAL_UART_Receive+0xd2>
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2200      	movs	r2, #0
 8007082:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800708c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007096:	d108      	bne.n	80070aa <HAL_UART_Receive+0xf6>
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	691b      	ldr	r3, [r3, #16]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d104      	bne.n	80070aa <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80070a0:	2300      	movs	r3, #0
 80070a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	61bb      	str	r3, [r7, #24]
 80070a8:	e003      	b.n	80070b2 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80070ae:	2300      	movs	r3, #0
 80070b0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80070b2:	e036      	b.n	8007122 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	9300      	str	r3, [sp, #0]
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	2200      	movs	r2, #0
 80070bc:	2120      	movs	r1, #32
 80070be:	68f8      	ldr	r0, [r7, #12]
 80070c0:	f000 ffcc 	bl	800805c <UART_WaitOnFlagUntilTimeout>
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d005      	beq.n	80070d6 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2220      	movs	r2, #32
 80070ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 80070d2:	2303      	movs	r3, #3
 80070d4:	e032      	b.n	800713c <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d10c      	bne.n	80070f6 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070e2:	b29a      	uxth	r2, r3
 80070e4:	8a7b      	ldrh	r3, [r7, #18]
 80070e6:	4013      	ands	r3, r2
 80070e8:	b29a      	uxth	r2, r3
 80070ea:	69bb      	ldr	r3, [r7, #24]
 80070ec:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80070ee:	69bb      	ldr	r3, [r7, #24]
 80070f0:	3302      	adds	r3, #2
 80070f2:	61bb      	str	r3, [r7, #24]
 80070f4:	e00c      	b.n	8007110 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070fc:	b2da      	uxtb	r2, r3
 80070fe:	8a7b      	ldrh	r3, [r7, #18]
 8007100:	b2db      	uxtb	r3, r3
 8007102:	4013      	ands	r3, r2
 8007104:	b2da      	uxtb	r2, r3
 8007106:	69fb      	ldr	r3, [r7, #28]
 8007108:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800710a:	69fb      	ldr	r3, [r7, #28]
 800710c:	3301      	adds	r3, #1
 800710e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007116:	b29b      	uxth	r3, r3
 8007118:	3b01      	subs	r3, #1
 800711a:	b29a      	uxth	r2, r3
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007128:	b29b      	uxth	r3, r3
 800712a:	2b00      	cmp	r3, #0
 800712c:	d1c2      	bne.n	80070b4 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2220      	movs	r2, #32
 8007132:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8007136:	2300      	movs	r3, #0
 8007138:	e000      	b.n	800713c <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800713a:	2302      	movs	r3, #2
  }
}
 800713c:	4618      	mov	r0, r3
 800713e:	3720      	adds	r7, #32
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b0ba      	sub	sp, #232	@ 0xe8
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	69db      	ldr	r3, [r3, #28]
 8007152:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800716a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800716e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007172:	4013      	ands	r3, r2
 8007174:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007178:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800717c:	2b00      	cmp	r3, #0
 800717e:	d11b      	bne.n	80071b8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007184:	f003 0320 	and.w	r3, r3, #32
 8007188:	2b00      	cmp	r3, #0
 800718a:	d015      	beq.n	80071b8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800718c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007190:	f003 0320 	and.w	r3, r3, #32
 8007194:	2b00      	cmp	r3, #0
 8007196:	d105      	bne.n	80071a4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007198:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800719c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d009      	beq.n	80071b8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	f000 82e3 	beq.w	8007774 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	4798      	blx	r3
      }
      return;
 80071b6:	e2dd      	b.n	8007774 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80071b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80071bc:	2b00      	cmp	r3, #0
 80071be:	f000 8123 	beq.w	8007408 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80071c2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80071c6:	4b8d      	ldr	r3, [pc, #564]	@ (80073fc <HAL_UART_IRQHandler+0x2b8>)
 80071c8:	4013      	ands	r3, r2
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d106      	bne.n	80071dc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80071ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80071d2:	4b8b      	ldr	r3, [pc, #556]	@ (8007400 <HAL_UART_IRQHandler+0x2bc>)
 80071d4:	4013      	ands	r3, r2
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	f000 8116 	beq.w	8007408 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80071dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071e0:	f003 0301 	and.w	r3, r3, #1
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d011      	beq.n	800720c <HAL_UART_IRQHandler+0xc8>
 80071e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d00b      	beq.n	800720c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	2201      	movs	r2, #1
 80071fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007202:	f043 0201 	orr.w	r2, r3, #1
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800720c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007210:	f003 0302 	and.w	r3, r3, #2
 8007214:	2b00      	cmp	r3, #0
 8007216:	d011      	beq.n	800723c <HAL_UART_IRQHandler+0xf8>
 8007218:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800721c:	f003 0301 	and.w	r3, r3, #1
 8007220:	2b00      	cmp	r3, #0
 8007222:	d00b      	beq.n	800723c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	2202      	movs	r2, #2
 800722a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007232:	f043 0204 	orr.w	r2, r3, #4
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800723c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007240:	f003 0304 	and.w	r3, r3, #4
 8007244:	2b00      	cmp	r3, #0
 8007246:	d011      	beq.n	800726c <HAL_UART_IRQHandler+0x128>
 8007248:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800724c:	f003 0301 	and.w	r3, r3, #1
 8007250:	2b00      	cmp	r3, #0
 8007252:	d00b      	beq.n	800726c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	2204      	movs	r2, #4
 800725a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007262:	f043 0202 	orr.w	r2, r3, #2
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800726c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007270:	f003 0308 	and.w	r3, r3, #8
 8007274:	2b00      	cmp	r3, #0
 8007276:	d017      	beq.n	80072a8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800727c:	f003 0320 	and.w	r3, r3, #32
 8007280:	2b00      	cmp	r3, #0
 8007282:	d105      	bne.n	8007290 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007284:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007288:	4b5c      	ldr	r3, [pc, #368]	@ (80073fc <HAL_UART_IRQHandler+0x2b8>)
 800728a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800728c:	2b00      	cmp	r3, #0
 800728e:	d00b      	beq.n	80072a8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	2208      	movs	r2, #8
 8007296:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800729e:	f043 0208 	orr.w	r2, r3, #8
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80072a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d012      	beq.n	80072da <HAL_UART_IRQHandler+0x196>
 80072b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072b8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d00c      	beq.n	80072da <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80072c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072d0:	f043 0220 	orr.w	r2, r3, #32
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	f000 8249 	beq.w	8007778 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80072e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072ea:	f003 0320 	and.w	r3, r3, #32
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d013      	beq.n	800731a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80072f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072f6:	f003 0320 	and.w	r3, r3, #32
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d105      	bne.n	800730a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80072fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007302:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007306:	2b00      	cmp	r3, #0
 8007308:	d007      	beq.n	800731a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800730e:	2b00      	cmp	r3, #0
 8007310:	d003      	beq.n	800731a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007320:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	689b      	ldr	r3, [r3, #8]
 800732a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800732e:	2b40      	cmp	r3, #64	@ 0x40
 8007330:	d005      	beq.n	800733e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007332:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007336:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800733a:	2b00      	cmp	r3, #0
 800733c:	d054      	beq.n	80073e8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 fef9 	bl	8008136 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	689b      	ldr	r3, [r3, #8]
 800734a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800734e:	2b40      	cmp	r3, #64	@ 0x40
 8007350:	d146      	bne.n	80073e0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	3308      	adds	r3, #8
 8007358:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007360:	e853 3f00 	ldrex	r3, [r3]
 8007364:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007368:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800736c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007370:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	3308      	adds	r3, #8
 800737a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800737e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007382:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007386:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800738a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800738e:	e841 2300 	strex	r3, r2, [r1]
 8007392:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007396:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800739a:	2b00      	cmp	r3, #0
 800739c:	d1d9      	bne.n	8007352 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d017      	beq.n	80073d8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073ae:	4a15      	ldr	r2, [pc, #84]	@ (8007404 <HAL_UART_IRQHandler+0x2c0>)
 80073b0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073b8:	4618      	mov	r0, r3
 80073ba:	f7fb fec9 	bl	8003150 <HAL_DMA_Abort_IT>
 80073be:	4603      	mov	r3, r0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d019      	beq.n	80073f8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80073d2:	4610      	mov	r0, r2
 80073d4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073d6:	e00f      	b.n	80073f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 f9e1 	bl	80077a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073de:	e00b      	b.n	80073f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 f9dd 	bl	80077a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073e6:	e007      	b.n	80073f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 f9d9 	bl	80077a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80073f6:	e1bf      	b.n	8007778 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073f8:	bf00      	nop
    return;
 80073fa:	e1bd      	b.n	8007778 <HAL_UART_IRQHandler+0x634>
 80073fc:	10000001 	.word	0x10000001
 8007400:	04000120 	.word	0x04000120
 8007404:	08008203 	.word	0x08008203

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800740c:	2b01      	cmp	r3, #1
 800740e:	f040 8153 	bne.w	80076b8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007416:	f003 0310 	and.w	r3, r3, #16
 800741a:	2b00      	cmp	r3, #0
 800741c:	f000 814c 	beq.w	80076b8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007424:	f003 0310 	and.w	r3, r3, #16
 8007428:	2b00      	cmp	r3, #0
 800742a:	f000 8145 	beq.w	80076b8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	2210      	movs	r2, #16
 8007434:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007440:	2b40      	cmp	r3, #64	@ 0x40
 8007442:	f040 80bb 	bne.w	80075bc <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007454:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007458:	2b00      	cmp	r3, #0
 800745a:	f000 818f 	beq.w	800777c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007464:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007468:	429a      	cmp	r2, r3
 800746a:	f080 8187 	bcs.w	800777c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007474:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f003 0320 	and.w	r3, r3, #32
 8007486:	2b00      	cmp	r3, #0
 8007488:	f040 8087 	bne.w	800759a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007494:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007498:	e853 3f00 	ldrex	r3, [r3]
 800749c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80074a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80074a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80074a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	461a      	mov	r2, r3
 80074b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80074b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80074ba:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074be:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80074c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80074c6:	e841 2300 	strex	r3, r2, [r1]
 80074ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80074ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d1da      	bne.n	800748c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	3308      	adds	r3, #8
 80074dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80074e0:	e853 3f00 	ldrex	r3, [r3]
 80074e4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80074e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80074e8:	f023 0301 	bic.w	r3, r3, #1
 80074ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	3308      	adds	r3, #8
 80074f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80074fa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80074fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007500:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007502:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007506:	e841 2300 	strex	r3, r2, [r1]
 800750a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800750c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800750e:	2b00      	cmp	r3, #0
 8007510:	d1e1      	bne.n	80074d6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	3308      	adds	r3, #8
 8007518:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800751a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800751c:	e853 3f00 	ldrex	r3, [r3]
 8007520:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007522:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007524:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007528:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	3308      	adds	r3, #8
 8007532:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007536:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007538:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800753a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800753c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800753e:	e841 2300 	strex	r3, r2, [r1]
 8007542:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007544:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007546:	2b00      	cmp	r3, #0
 8007548:	d1e3      	bne.n	8007512 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2220      	movs	r2, #32
 800754e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2200      	movs	r2, #0
 8007556:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800755e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007560:	e853 3f00 	ldrex	r3, [r3]
 8007564:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007566:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007568:	f023 0310 	bic.w	r3, r3, #16
 800756c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	461a      	mov	r2, r3
 8007576:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800757a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800757c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007580:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007582:	e841 2300 	strex	r3, r2, [r1]
 8007586:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007588:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800758a:	2b00      	cmp	r3, #0
 800758c:	d1e4      	bne.n	8007558 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007594:	4618      	mov	r0, r3
 8007596:	f7fb fd82 	bl	800309e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2202      	movs	r2, #2
 800759e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	1ad3      	subs	r3, r2, r3
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	4619      	mov	r1, r3
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 f8fd 	bl	80077b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80075ba:	e0df      	b.n	800777c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	1ad3      	subs	r3, r2, r3
 80075cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	2b00      	cmp	r3, #0
 80075da:	f000 80d1 	beq.w	8007780 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80075de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	f000 80cc 	beq.w	8007780 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075f0:	e853 3f00 	ldrex	r3, [r3]
 80075f4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80075f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	461a      	mov	r2, r3
 8007606:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800760a:	647b      	str	r3, [r7, #68]	@ 0x44
 800760c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007610:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007612:	e841 2300 	strex	r3, r2, [r1]
 8007616:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007618:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800761a:	2b00      	cmp	r3, #0
 800761c:	d1e4      	bne.n	80075e8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	3308      	adds	r3, #8
 8007624:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007628:	e853 3f00 	ldrex	r3, [r3]
 800762c:	623b      	str	r3, [r7, #32]
   return(result);
 800762e:	6a3b      	ldr	r3, [r7, #32]
 8007630:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007634:	f023 0301 	bic.w	r3, r3, #1
 8007638:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	3308      	adds	r3, #8
 8007642:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007646:	633a      	str	r2, [r7, #48]	@ 0x30
 8007648:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800764a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800764c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800764e:	e841 2300 	strex	r3, r2, [r1]
 8007652:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007656:	2b00      	cmp	r3, #0
 8007658:	d1e1      	bne.n	800761e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2220      	movs	r2, #32
 800765e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	e853 3f00 	ldrex	r3, [r3]
 800767a:	60fb      	str	r3, [r7, #12]
   return(result);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f023 0310 	bic.w	r3, r3, #16
 8007682:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	461a      	mov	r2, r3
 800768c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007690:	61fb      	str	r3, [r7, #28]
 8007692:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007694:	69b9      	ldr	r1, [r7, #24]
 8007696:	69fa      	ldr	r2, [r7, #28]
 8007698:	e841 2300 	strex	r3, r2, [r1]
 800769c:	617b      	str	r3, [r7, #20]
   return(result);
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d1e4      	bne.n	800766e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2202      	movs	r2, #2
 80076a8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80076aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80076ae:	4619      	mov	r1, r3
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 f87f 	bl	80077b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80076b6:	e063      	b.n	8007780 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80076b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d00e      	beq.n	80076e2 <HAL_UART_IRQHandler+0x59e>
 80076c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80076c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d008      	beq.n	80076e2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80076d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 fdd2 	bl	8008284 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80076e0:	e051      	b.n	8007786 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80076e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d014      	beq.n	8007718 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80076ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d105      	bne.n	8007706 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80076fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80076fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007702:	2b00      	cmp	r3, #0
 8007704:	d008      	beq.n	8007718 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800770a:	2b00      	cmp	r3, #0
 800770c:	d03a      	beq.n	8007784 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	4798      	blx	r3
    }
    return;
 8007716:	e035      	b.n	8007784 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800771c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007720:	2b00      	cmp	r3, #0
 8007722:	d009      	beq.n	8007738 <HAL_UART_IRQHandler+0x5f4>
 8007724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007728:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800772c:	2b00      	cmp	r3, #0
 800772e:	d003      	beq.n	8007738 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f000 fd7c 	bl	800822e <UART_EndTransmit_IT>
    return;
 8007736:	e026      	b.n	8007786 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800773c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007740:	2b00      	cmp	r3, #0
 8007742:	d009      	beq.n	8007758 <HAL_UART_IRQHandler+0x614>
 8007744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007748:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800774c:	2b00      	cmp	r3, #0
 800774e:	d003      	beq.n	8007758 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 fdab 	bl	80082ac <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007756:	e016      	b.n	8007786 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800775c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007760:	2b00      	cmp	r3, #0
 8007762:	d010      	beq.n	8007786 <HAL_UART_IRQHandler+0x642>
 8007764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007768:	2b00      	cmp	r3, #0
 800776a:	da0c      	bge.n	8007786 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 fd93 	bl	8008298 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007772:	e008      	b.n	8007786 <HAL_UART_IRQHandler+0x642>
      return;
 8007774:	bf00      	nop
 8007776:	e006      	b.n	8007786 <HAL_UART_IRQHandler+0x642>
    return;
 8007778:	bf00      	nop
 800777a:	e004      	b.n	8007786 <HAL_UART_IRQHandler+0x642>
      return;
 800777c:	bf00      	nop
 800777e:	e002      	b.n	8007786 <HAL_UART_IRQHandler+0x642>
      return;
 8007780:	bf00      	nop
 8007782:	e000      	b.n	8007786 <HAL_UART_IRQHandler+0x642>
    return;
 8007784:	bf00      	nop
  }
}
 8007786:	37e8      	adds	r7, #232	@ 0xe8
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800778c:	b480      	push	{r7}
 800778e:	b083      	sub	sp, #12
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007794:	bf00      	nop
 8007796:	370c      	adds	r7, #12
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr

080077a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b083      	sub	sp, #12
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80077a8:	bf00      	nop
 80077aa:	370c      	adds	r7, #12
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr

080077b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	460b      	mov	r3, r1
 80077be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80077c0:	bf00      	nop
 80077c2:	370c      	adds	r7, #12
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr

080077cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80077d0:	b08c      	sub	sp, #48	@ 0x30
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80077d6:	2300      	movs	r3, #0
 80077d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	689a      	ldr	r2, [r3, #8]
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	691b      	ldr	r3, [r3, #16]
 80077e4:	431a      	orrs	r2, r3
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	695b      	ldr	r3, [r3, #20]
 80077ea:	431a      	orrs	r2, r3
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	69db      	ldr	r3, [r3, #28]
 80077f0:	4313      	orrs	r3, r2
 80077f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	4baa      	ldr	r3, [pc, #680]	@ (8007aa4 <UART_SetConfig+0x2d8>)
 80077fc:	4013      	ands	r3, r2
 80077fe:	697a      	ldr	r2, [r7, #20]
 8007800:	6812      	ldr	r2, [r2, #0]
 8007802:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007804:	430b      	orrs	r3, r1
 8007806:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	68da      	ldr	r2, [r3, #12]
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	430a      	orrs	r2, r1
 800781c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	699b      	ldr	r3, [r3, #24]
 8007822:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a9f      	ldr	r2, [pc, #636]	@ (8007aa8 <UART_SetConfig+0x2dc>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d004      	beq.n	8007838 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	6a1b      	ldr	r3, [r3, #32]
 8007832:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007834:	4313      	orrs	r3, r2
 8007836:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007842:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007846:	697a      	ldr	r2, [r7, #20]
 8007848:	6812      	ldr	r2, [r2, #0]
 800784a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800784c:	430b      	orrs	r3, r1
 800784e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007856:	f023 010f 	bic.w	r1, r3, #15
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	430a      	orrs	r2, r1
 8007864:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a90      	ldr	r2, [pc, #576]	@ (8007aac <UART_SetConfig+0x2e0>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d125      	bne.n	80078bc <UART_SetConfig+0xf0>
 8007870:	4b8f      	ldr	r3, [pc, #572]	@ (8007ab0 <UART_SetConfig+0x2e4>)
 8007872:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007876:	f003 0303 	and.w	r3, r3, #3
 800787a:	2b03      	cmp	r3, #3
 800787c:	d81a      	bhi.n	80078b4 <UART_SetConfig+0xe8>
 800787e:	a201      	add	r2, pc, #4	@ (adr r2, 8007884 <UART_SetConfig+0xb8>)
 8007880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007884:	08007895 	.word	0x08007895
 8007888:	080078a5 	.word	0x080078a5
 800788c:	0800789d 	.word	0x0800789d
 8007890:	080078ad 	.word	0x080078ad
 8007894:	2301      	movs	r3, #1
 8007896:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800789a:	e116      	b.n	8007aca <UART_SetConfig+0x2fe>
 800789c:	2302      	movs	r3, #2
 800789e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078a2:	e112      	b.n	8007aca <UART_SetConfig+0x2fe>
 80078a4:	2304      	movs	r3, #4
 80078a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078aa:	e10e      	b.n	8007aca <UART_SetConfig+0x2fe>
 80078ac:	2308      	movs	r3, #8
 80078ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078b2:	e10a      	b.n	8007aca <UART_SetConfig+0x2fe>
 80078b4:	2310      	movs	r3, #16
 80078b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078ba:	e106      	b.n	8007aca <UART_SetConfig+0x2fe>
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a7c      	ldr	r2, [pc, #496]	@ (8007ab4 <UART_SetConfig+0x2e8>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d138      	bne.n	8007938 <UART_SetConfig+0x16c>
 80078c6:	4b7a      	ldr	r3, [pc, #488]	@ (8007ab0 <UART_SetConfig+0x2e4>)
 80078c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078cc:	f003 030c 	and.w	r3, r3, #12
 80078d0:	2b0c      	cmp	r3, #12
 80078d2:	d82d      	bhi.n	8007930 <UART_SetConfig+0x164>
 80078d4:	a201      	add	r2, pc, #4	@ (adr r2, 80078dc <UART_SetConfig+0x110>)
 80078d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078da:	bf00      	nop
 80078dc:	08007911 	.word	0x08007911
 80078e0:	08007931 	.word	0x08007931
 80078e4:	08007931 	.word	0x08007931
 80078e8:	08007931 	.word	0x08007931
 80078ec:	08007921 	.word	0x08007921
 80078f0:	08007931 	.word	0x08007931
 80078f4:	08007931 	.word	0x08007931
 80078f8:	08007931 	.word	0x08007931
 80078fc:	08007919 	.word	0x08007919
 8007900:	08007931 	.word	0x08007931
 8007904:	08007931 	.word	0x08007931
 8007908:	08007931 	.word	0x08007931
 800790c:	08007929 	.word	0x08007929
 8007910:	2300      	movs	r3, #0
 8007912:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007916:	e0d8      	b.n	8007aca <UART_SetConfig+0x2fe>
 8007918:	2302      	movs	r3, #2
 800791a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800791e:	e0d4      	b.n	8007aca <UART_SetConfig+0x2fe>
 8007920:	2304      	movs	r3, #4
 8007922:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007926:	e0d0      	b.n	8007aca <UART_SetConfig+0x2fe>
 8007928:	2308      	movs	r3, #8
 800792a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800792e:	e0cc      	b.n	8007aca <UART_SetConfig+0x2fe>
 8007930:	2310      	movs	r3, #16
 8007932:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007936:	e0c8      	b.n	8007aca <UART_SetConfig+0x2fe>
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a5e      	ldr	r2, [pc, #376]	@ (8007ab8 <UART_SetConfig+0x2ec>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d125      	bne.n	800798e <UART_SetConfig+0x1c2>
 8007942:	4b5b      	ldr	r3, [pc, #364]	@ (8007ab0 <UART_SetConfig+0x2e4>)
 8007944:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007948:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800794c:	2b30      	cmp	r3, #48	@ 0x30
 800794e:	d016      	beq.n	800797e <UART_SetConfig+0x1b2>
 8007950:	2b30      	cmp	r3, #48	@ 0x30
 8007952:	d818      	bhi.n	8007986 <UART_SetConfig+0x1ba>
 8007954:	2b20      	cmp	r3, #32
 8007956:	d00a      	beq.n	800796e <UART_SetConfig+0x1a2>
 8007958:	2b20      	cmp	r3, #32
 800795a:	d814      	bhi.n	8007986 <UART_SetConfig+0x1ba>
 800795c:	2b00      	cmp	r3, #0
 800795e:	d002      	beq.n	8007966 <UART_SetConfig+0x19a>
 8007960:	2b10      	cmp	r3, #16
 8007962:	d008      	beq.n	8007976 <UART_SetConfig+0x1aa>
 8007964:	e00f      	b.n	8007986 <UART_SetConfig+0x1ba>
 8007966:	2300      	movs	r3, #0
 8007968:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800796c:	e0ad      	b.n	8007aca <UART_SetConfig+0x2fe>
 800796e:	2302      	movs	r3, #2
 8007970:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007974:	e0a9      	b.n	8007aca <UART_SetConfig+0x2fe>
 8007976:	2304      	movs	r3, #4
 8007978:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800797c:	e0a5      	b.n	8007aca <UART_SetConfig+0x2fe>
 800797e:	2308      	movs	r3, #8
 8007980:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007984:	e0a1      	b.n	8007aca <UART_SetConfig+0x2fe>
 8007986:	2310      	movs	r3, #16
 8007988:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800798c:	e09d      	b.n	8007aca <UART_SetConfig+0x2fe>
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a4a      	ldr	r2, [pc, #296]	@ (8007abc <UART_SetConfig+0x2f0>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d125      	bne.n	80079e4 <UART_SetConfig+0x218>
 8007998:	4b45      	ldr	r3, [pc, #276]	@ (8007ab0 <UART_SetConfig+0x2e4>)
 800799a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800799e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80079a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80079a4:	d016      	beq.n	80079d4 <UART_SetConfig+0x208>
 80079a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80079a8:	d818      	bhi.n	80079dc <UART_SetConfig+0x210>
 80079aa:	2b80      	cmp	r3, #128	@ 0x80
 80079ac:	d00a      	beq.n	80079c4 <UART_SetConfig+0x1f8>
 80079ae:	2b80      	cmp	r3, #128	@ 0x80
 80079b0:	d814      	bhi.n	80079dc <UART_SetConfig+0x210>
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d002      	beq.n	80079bc <UART_SetConfig+0x1f0>
 80079b6:	2b40      	cmp	r3, #64	@ 0x40
 80079b8:	d008      	beq.n	80079cc <UART_SetConfig+0x200>
 80079ba:	e00f      	b.n	80079dc <UART_SetConfig+0x210>
 80079bc:	2300      	movs	r3, #0
 80079be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079c2:	e082      	b.n	8007aca <UART_SetConfig+0x2fe>
 80079c4:	2302      	movs	r3, #2
 80079c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079ca:	e07e      	b.n	8007aca <UART_SetConfig+0x2fe>
 80079cc:	2304      	movs	r3, #4
 80079ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079d2:	e07a      	b.n	8007aca <UART_SetConfig+0x2fe>
 80079d4:	2308      	movs	r3, #8
 80079d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079da:	e076      	b.n	8007aca <UART_SetConfig+0x2fe>
 80079dc:	2310      	movs	r3, #16
 80079de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079e2:	e072      	b.n	8007aca <UART_SetConfig+0x2fe>
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a35      	ldr	r2, [pc, #212]	@ (8007ac0 <UART_SetConfig+0x2f4>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d12a      	bne.n	8007a44 <UART_SetConfig+0x278>
 80079ee:	4b30      	ldr	r3, [pc, #192]	@ (8007ab0 <UART_SetConfig+0x2e4>)
 80079f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80079f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80079fc:	d01a      	beq.n	8007a34 <UART_SetConfig+0x268>
 80079fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a02:	d81b      	bhi.n	8007a3c <UART_SetConfig+0x270>
 8007a04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a08:	d00c      	beq.n	8007a24 <UART_SetConfig+0x258>
 8007a0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a0e:	d815      	bhi.n	8007a3c <UART_SetConfig+0x270>
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d003      	beq.n	8007a1c <UART_SetConfig+0x250>
 8007a14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a18:	d008      	beq.n	8007a2c <UART_SetConfig+0x260>
 8007a1a:	e00f      	b.n	8007a3c <UART_SetConfig+0x270>
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a22:	e052      	b.n	8007aca <UART_SetConfig+0x2fe>
 8007a24:	2302      	movs	r3, #2
 8007a26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a2a:	e04e      	b.n	8007aca <UART_SetConfig+0x2fe>
 8007a2c:	2304      	movs	r3, #4
 8007a2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a32:	e04a      	b.n	8007aca <UART_SetConfig+0x2fe>
 8007a34:	2308      	movs	r3, #8
 8007a36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a3a:	e046      	b.n	8007aca <UART_SetConfig+0x2fe>
 8007a3c:	2310      	movs	r3, #16
 8007a3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a42:	e042      	b.n	8007aca <UART_SetConfig+0x2fe>
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a17      	ldr	r2, [pc, #92]	@ (8007aa8 <UART_SetConfig+0x2dc>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d13a      	bne.n	8007ac4 <UART_SetConfig+0x2f8>
 8007a4e:	4b18      	ldr	r3, [pc, #96]	@ (8007ab0 <UART_SetConfig+0x2e4>)
 8007a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a54:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007a58:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007a5c:	d01a      	beq.n	8007a94 <UART_SetConfig+0x2c8>
 8007a5e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007a62:	d81b      	bhi.n	8007a9c <UART_SetConfig+0x2d0>
 8007a64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a68:	d00c      	beq.n	8007a84 <UART_SetConfig+0x2b8>
 8007a6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a6e:	d815      	bhi.n	8007a9c <UART_SetConfig+0x2d0>
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d003      	beq.n	8007a7c <UART_SetConfig+0x2b0>
 8007a74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a78:	d008      	beq.n	8007a8c <UART_SetConfig+0x2c0>
 8007a7a:	e00f      	b.n	8007a9c <UART_SetConfig+0x2d0>
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a82:	e022      	b.n	8007aca <UART_SetConfig+0x2fe>
 8007a84:	2302      	movs	r3, #2
 8007a86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a8a:	e01e      	b.n	8007aca <UART_SetConfig+0x2fe>
 8007a8c:	2304      	movs	r3, #4
 8007a8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a92:	e01a      	b.n	8007aca <UART_SetConfig+0x2fe>
 8007a94:	2308      	movs	r3, #8
 8007a96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a9a:	e016      	b.n	8007aca <UART_SetConfig+0x2fe>
 8007a9c:	2310      	movs	r3, #16
 8007a9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007aa2:	e012      	b.n	8007aca <UART_SetConfig+0x2fe>
 8007aa4:	cfff69f3 	.word	0xcfff69f3
 8007aa8:	40008000 	.word	0x40008000
 8007aac:	40013800 	.word	0x40013800
 8007ab0:	40021000 	.word	0x40021000
 8007ab4:	40004400 	.word	0x40004400
 8007ab8:	40004800 	.word	0x40004800
 8007abc:	40004c00 	.word	0x40004c00
 8007ac0:	40005000 	.word	0x40005000
 8007ac4:	2310      	movs	r3, #16
 8007ac6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4aae      	ldr	r2, [pc, #696]	@ (8007d88 <UART_SetConfig+0x5bc>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	f040 8097 	bne.w	8007c04 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007ad6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007ada:	2b08      	cmp	r3, #8
 8007adc:	d823      	bhi.n	8007b26 <UART_SetConfig+0x35a>
 8007ade:	a201      	add	r2, pc, #4	@ (adr r2, 8007ae4 <UART_SetConfig+0x318>)
 8007ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ae4:	08007b09 	.word	0x08007b09
 8007ae8:	08007b27 	.word	0x08007b27
 8007aec:	08007b11 	.word	0x08007b11
 8007af0:	08007b27 	.word	0x08007b27
 8007af4:	08007b17 	.word	0x08007b17
 8007af8:	08007b27 	.word	0x08007b27
 8007afc:	08007b27 	.word	0x08007b27
 8007b00:	08007b27 	.word	0x08007b27
 8007b04:	08007b1f 	.word	0x08007b1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b08:	f7fc fac6 	bl	8004098 <HAL_RCC_GetPCLK1Freq>
 8007b0c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007b0e:	e010      	b.n	8007b32 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b10:	4b9e      	ldr	r3, [pc, #632]	@ (8007d8c <UART_SetConfig+0x5c0>)
 8007b12:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007b14:	e00d      	b.n	8007b32 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b16:	f7fc fa51 	bl	8003fbc <HAL_RCC_GetSysClockFreq>
 8007b1a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007b1c:	e009      	b.n	8007b32 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b22:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007b24:	e005      	b.n	8007b32 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007b26:	2300      	movs	r3, #0
 8007b28:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007b30:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	f000 8130 	beq.w	8007d9a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b3e:	4a94      	ldr	r2, [pc, #592]	@ (8007d90 <UART_SetConfig+0x5c4>)
 8007b40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b44:	461a      	mov	r2, r3
 8007b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b48:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b4c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	685a      	ldr	r2, [r3, #4]
 8007b52:	4613      	mov	r3, r2
 8007b54:	005b      	lsls	r3, r3, #1
 8007b56:	4413      	add	r3, r2
 8007b58:	69ba      	ldr	r2, [r7, #24]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d305      	bcc.n	8007b6a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b64:	69ba      	ldr	r2, [r7, #24]
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d903      	bls.n	8007b72 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007b70:	e113      	b.n	8007d9a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b74:	2200      	movs	r2, #0
 8007b76:	60bb      	str	r3, [r7, #8]
 8007b78:	60fa      	str	r2, [r7, #12]
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b7e:	4a84      	ldr	r2, [pc, #528]	@ (8007d90 <UART_SetConfig+0x5c4>)
 8007b80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	2200      	movs	r2, #0
 8007b88:	603b      	str	r3, [r7, #0]
 8007b8a:	607a      	str	r2, [r7, #4]
 8007b8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b90:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007b94:	f7f8 fbac 	bl	80002f0 <__aeabi_uldivmod>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	460b      	mov	r3, r1
 8007b9c:	4610      	mov	r0, r2
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	f04f 0200 	mov.w	r2, #0
 8007ba4:	f04f 0300 	mov.w	r3, #0
 8007ba8:	020b      	lsls	r3, r1, #8
 8007baa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007bae:	0202      	lsls	r2, r0, #8
 8007bb0:	6979      	ldr	r1, [r7, #20]
 8007bb2:	6849      	ldr	r1, [r1, #4]
 8007bb4:	0849      	lsrs	r1, r1, #1
 8007bb6:	2000      	movs	r0, #0
 8007bb8:	460c      	mov	r4, r1
 8007bba:	4605      	mov	r5, r0
 8007bbc:	eb12 0804 	adds.w	r8, r2, r4
 8007bc0:	eb43 0905 	adc.w	r9, r3, r5
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	469a      	mov	sl, r3
 8007bcc:	4693      	mov	fp, r2
 8007bce:	4652      	mov	r2, sl
 8007bd0:	465b      	mov	r3, fp
 8007bd2:	4640      	mov	r0, r8
 8007bd4:	4649      	mov	r1, r9
 8007bd6:	f7f8 fb8b 	bl	80002f0 <__aeabi_uldivmod>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	460b      	mov	r3, r1
 8007bde:	4613      	mov	r3, r2
 8007be0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007be2:	6a3b      	ldr	r3, [r7, #32]
 8007be4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007be8:	d308      	bcc.n	8007bfc <UART_SetConfig+0x430>
 8007bea:	6a3b      	ldr	r3, [r7, #32]
 8007bec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007bf0:	d204      	bcs.n	8007bfc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	6a3a      	ldr	r2, [r7, #32]
 8007bf8:	60da      	str	r2, [r3, #12]
 8007bfa:	e0ce      	b.n	8007d9a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007c02:	e0ca      	b.n	8007d9a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	69db      	ldr	r3, [r3, #28]
 8007c08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c0c:	d166      	bne.n	8007cdc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007c0e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007c12:	2b08      	cmp	r3, #8
 8007c14:	d827      	bhi.n	8007c66 <UART_SetConfig+0x49a>
 8007c16:	a201      	add	r2, pc, #4	@ (adr r2, 8007c1c <UART_SetConfig+0x450>)
 8007c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c1c:	08007c41 	.word	0x08007c41
 8007c20:	08007c49 	.word	0x08007c49
 8007c24:	08007c51 	.word	0x08007c51
 8007c28:	08007c67 	.word	0x08007c67
 8007c2c:	08007c57 	.word	0x08007c57
 8007c30:	08007c67 	.word	0x08007c67
 8007c34:	08007c67 	.word	0x08007c67
 8007c38:	08007c67 	.word	0x08007c67
 8007c3c:	08007c5f 	.word	0x08007c5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c40:	f7fc fa2a 	bl	8004098 <HAL_RCC_GetPCLK1Freq>
 8007c44:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c46:	e014      	b.n	8007c72 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c48:	f7fc fa3c 	bl	80040c4 <HAL_RCC_GetPCLK2Freq>
 8007c4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c4e:	e010      	b.n	8007c72 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c50:	4b4e      	ldr	r3, [pc, #312]	@ (8007d8c <UART_SetConfig+0x5c0>)
 8007c52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007c54:	e00d      	b.n	8007c72 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c56:	f7fc f9b1 	bl	8003fbc <HAL_RCC_GetSysClockFreq>
 8007c5a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c5c:	e009      	b.n	8007c72 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007c64:	e005      	b.n	8007c72 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007c66:	2300      	movs	r3, #0
 8007c68:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007c70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	f000 8090 	beq.w	8007d9a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c7e:	4a44      	ldr	r2, [pc, #272]	@ (8007d90 <UART_SetConfig+0x5c4>)
 8007c80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c84:	461a      	mov	r2, r3
 8007c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c88:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c8c:	005a      	lsls	r2, r3, #1
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	085b      	lsrs	r3, r3, #1
 8007c94:	441a      	add	r2, r3
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c9e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ca0:	6a3b      	ldr	r3, [r7, #32]
 8007ca2:	2b0f      	cmp	r3, #15
 8007ca4:	d916      	bls.n	8007cd4 <UART_SetConfig+0x508>
 8007ca6:	6a3b      	ldr	r3, [r7, #32]
 8007ca8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cac:	d212      	bcs.n	8007cd4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007cae:	6a3b      	ldr	r3, [r7, #32]
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	f023 030f 	bic.w	r3, r3, #15
 8007cb6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007cb8:	6a3b      	ldr	r3, [r7, #32]
 8007cba:	085b      	lsrs	r3, r3, #1
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	f003 0307 	and.w	r3, r3, #7
 8007cc2:	b29a      	uxth	r2, r3
 8007cc4:	8bfb      	ldrh	r3, [r7, #30]
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	8bfa      	ldrh	r2, [r7, #30]
 8007cd0:	60da      	str	r2, [r3, #12]
 8007cd2:	e062      	b.n	8007d9a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007cda:	e05e      	b.n	8007d9a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007cdc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007ce0:	2b08      	cmp	r3, #8
 8007ce2:	d828      	bhi.n	8007d36 <UART_SetConfig+0x56a>
 8007ce4:	a201      	add	r2, pc, #4	@ (adr r2, 8007cec <UART_SetConfig+0x520>)
 8007ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cea:	bf00      	nop
 8007cec:	08007d11 	.word	0x08007d11
 8007cf0:	08007d19 	.word	0x08007d19
 8007cf4:	08007d21 	.word	0x08007d21
 8007cf8:	08007d37 	.word	0x08007d37
 8007cfc:	08007d27 	.word	0x08007d27
 8007d00:	08007d37 	.word	0x08007d37
 8007d04:	08007d37 	.word	0x08007d37
 8007d08:	08007d37 	.word	0x08007d37
 8007d0c:	08007d2f 	.word	0x08007d2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d10:	f7fc f9c2 	bl	8004098 <HAL_RCC_GetPCLK1Freq>
 8007d14:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007d16:	e014      	b.n	8007d42 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d18:	f7fc f9d4 	bl	80040c4 <HAL_RCC_GetPCLK2Freq>
 8007d1c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007d1e:	e010      	b.n	8007d42 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d20:	4b1a      	ldr	r3, [pc, #104]	@ (8007d8c <UART_SetConfig+0x5c0>)
 8007d22:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007d24:	e00d      	b.n	8007d42 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d26:	f7fc f949 	bl	8003fbc <HAL_RCC_GetSysClockFreq>
 8007d2a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007d2c:	e009      	b.n	8007d42 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007d34:	e005      	b.n	8007d42 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007d36:	2300      	movs	r3, #0
 8007d38:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007d40:	bf00      	nop
    }

    if (pclk != 0U)
 8007d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d028      	beq.n	8007d9a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d4c:	4a10      	ldr	r2, [pc, #64]	@ (8007d90 <UART_SetConfig+0x5c4>)
 8007d4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d52:	461a      	mov	r2, r3
 8007d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d56:	fbb3 f2f2 	udiv	r2, r3, r2
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	085b      	lsrs	r3, r3, #1
 8007d60:	441a      	add	r2, r3
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d6a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d6c:	6a3b      	ldr	r3, [r7, #32]
 8007d6e:	2b0f      	cmp	r3, #15
 8007d70:	d910      	bls.n	8007d94 <UART_SetConfig+0x5c8>
 8007d72:	6a3b      	ldr	r3, [r7, #32]
 8007d74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d78:	d20c      	bcs.n	8007d94 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007d7a:	6a3b      	ldr	r3, [r7, #32]
 8007d7c:	b29a      	uxth	r2, r3
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	60da      	str	r2, [r3, #12]
 8007d84:	e009      	b.n	8007d9a <UART_SetConfig+0x5ce>
 8007d86:	bf00      	nop
 8007d88:	40008000 	.word	0x40008000
 8007d8c:	00f42400 	.word	0x00f42400
 8007d90:	0800a0a8 	.word	0x0800a0a8
      }
      else
      {
        ret = HAL_ERROR;
 8007d94:	2301      	movs	r3, #1
 8007d96:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	2201      	movs	r2, #1
 8007da6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	2200      	movs	r2, #0
 8007dae:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	2200      	movs	r2, #0
 8007db4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007db6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3730      	adds	r7, #48	@ 0x30
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007dc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b083      	sub	sp, #12
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dd0:	f003 0308 	and.w	r3, r3, #8
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d00a      	beq.n	8007dee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	430a      	orrs	r2, r1
 8007dec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007df2:	f003 0301 	and.w	r3, r3, #1
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d00a      	beq.n	8007e10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	430a      	orrs	r2, r1
 8007e0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e14:	f003 0302 	and.w	r3, r3, #2
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d00a      	beq.n	8007e32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	430a      	orrs	r2, r1
 8007e30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e36:	f003 0304 	and.w	r3, r3, #4
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d00a      	beq.n	8007e54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	430a      	orrs	r2, r1
 8007e52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e58:	f003 0310 	and.w	r3, r3, #16
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d00a      	beq.n	8007e76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	430a      	orrs	r2, r1
 8007e74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e7a:	f003 0320 	and.w	r3, r3, #32
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d00a      	beq.n	8007e98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	430a      	orrs	r2, r1
 8007e96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d01a      	beq.n	8007eda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	430a      	orrs	r2, r1
 8007eb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ebe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ec2:	d10a      	bne.n	8007eda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	430a      	orrs	r2, r1
 8007ed8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ede:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d00a      	beq.n	8007efc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	430a      	orrs	r2, r1
 8007efa:	605a      	str	r2, [r3, #4]
  }
}
 8007efc:	bf00      	nop
 8007efe:	370c      	adds	r7, #12
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr

08007f08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b098      	sub	sp, #96	@ 0x60
 8007f0c:	af02      	add	r7, sp, #8
 8007f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2200      	movs	r2, #0
 8007f14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007f18:	f7fa ff84 	bl	8002e24 <HAL_GetTick>
 8007f1c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f003 0308 	and.w	r3, r3, #8
 8007f28:	2b08      	cmp	r3, #8
 8007f2a:	d12f      	bne.n	8007f8c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f2c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007f30:	9300      	str	r3, [sp, #0]
 8007f32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f34:	2200      	movs	r2, #0
 8007f36:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 f88e 	bl	800805c <UART_WaitOnFlagUntilTimeout>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d022      	beq.n	8007f8c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f4e:	e853 3f00 	ldrex	r3, [r3]
 8007f52:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007f54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f5a:	653b      	str	r3, [r7, #80]	@ 0x50
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	461a      	mov	r2, r3
 8007f62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f64:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f66:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007f6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007f6c:	e841 2300 	strex	r3, r2, [r1]
 8007f70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007f72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d1e6      	bne.n	8007f46 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2220      	movs	r2, #32
 8007f7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2200      	movs	r2, #0
 8007f84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f88:	2303      	movs	r3, #3
 8007f8a:	e063      	b.n	8008054 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f003 0304 	and.w	r3, r3, #4
 8007f96:	2b04      	cmp	r3, #4
 8007f98:	d149      	bne.n	800802e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f9a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007f9e:	9300      	str	r3, [sp, #0]
 8007fa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f000 f857 	bl	800805c <UART_WaitOnFlagUntilTimeout>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d03c      	beq.n	800802e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fbc:	e853 3f00 	ldrex	r3, [r3]
 8007fc0:	623b      	str	r3, [r7, #32]
   return(result);
 8007fc2:	6a3b      	ldr	r3, [r7, #32]
 8007fc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007fc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	461a      	mov	r2, r3
 8007fd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fd2:	633b      	str	r3, [r7, #48]	@ 0x30
 8007fd4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007fd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fda:	e841 2300 	strex	r3, r2, [r1]
 8007fde:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d1e6      	bne.n	8007fb4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	3308      	adds	r3, #8
 8007fec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	e853 3f00 	ldrex	r3, [r3]
 8007ff4:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	f023 0301 	bic.w	r3, r3, #1
 8007ffc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	3308      	adds	r3, #8
 8008004:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008006:	61fa      	str	r2, [r7, #28]
 8008008:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800800a:	69b9      	ldr	r1, [r7, #24]
 800800c:	69fa      	ldr	r2, [r7, #28]
 800800e:	e841 2300 	strex	r3, r2, [r1]
 8008012:	617b      	str	r3, [r7, #20]
   return(result);
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d1e5      	bne.n	8007fe6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2220      	movs	r2, #32
 800801e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2200      	movs	r2, #0
 8008026:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800802a:	2303      	movs	r3, #3
 800802c:	e012      	b.n	8008054 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2220      	movs	r2, #32
 8008032:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2220      	movs	r2, #32
 800803a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008052:	2300      	movs	r3, #0
}
 8008054:	4618      	mov	r0, r3
 8008056:	3758      	adds	r7, #88	@ 0x58
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b084      	sub	sp, #16
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	60b9      	str	r1, [r7, #8]
 8008066:	603b      	str	r3, [r7, #0]
 8008068:	4613      	mov	r3, r2
 800806a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800806c:	e04f      	b.n	800810e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800806e:	69bb      	ldr	r3, [r7, #24]
 8008070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008074:	d04b      	beq.n	800810e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008076:	f7fa fed5 	bl	8002e24 <HAL_GetTick>
 800807a:	4602      	mov	r2, r0
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	1ad3      	subs	r3, r2, r3
 8008080:	69ba      	ldr	r2, [r7, #24]
 8008082:	429a      	cmp	r2, r3
 8008084:	d302      	bcc.n	800808c <UART_WaitOnFlagUntilTimeout+0x30>
 8008086:	69bb      	ldr	r3, [r7, #24]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d101      	bne.n	8008090 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800808c:	2303      	movs	r3, #3
 800808e:	e04e      	b.n	800812e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f003 0304 	and.w	r3, r3, #4
 800809a:	2b00      	cmp	r3, #0
 800809c:	d037      	beq.n	800810e <UART_WaitOnFlagUntilTimeout+0xb2>
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	2b80      	cmp	r3, #128	@ 0x80
 80080a2:	d034      	beq.n	800810e <UART_WaitOnFlagUntilTimeout+0xb2>
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	2b40      	cmp	r3, #64	@ 0x40
 80080a8:	d031      	beq.n	800810e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	69db      	ldr	r3, [r3, #28]
 80080b0:	f003 0308 	and.w	r3, r3, #8
 80080b4:	2b08      	cmp	r3, #8
 80080b6:	d110      	bne.n	80080da <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	2208      	movs	r2, #8
 80080be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80080c0:	68f8      	ldr	r0, [r7, #12]
 80080c2:	f000 f838 	bl	8008136 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2208      	movs	r2, #8
 80080ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2200      	movs	r2, #0
 80080d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80080d6:	2301      	movs	r3, #1
 80080d8:	e029      	b.n	800812e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	69db      	ldr	r3, [r3, #28]
 80080e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80080e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80080e8:	d111      	bne.n	800810e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80080f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80080f4:	68f8      	ldr	r0, [r7, #12]
 80080f6:	f000 f81e 	bl	8008136 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2220      	movs	r2, #32
 80080fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2200      	movs	r2, #0
 8008106:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800810a:	2303      	movs	r3, #3
 800810c:	e00f      	b.n	800812e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	69da      	ldr	r2, [r3, #28]
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	4013      	ands	r3, r2
 8008118:	68ba      	ldr	r2, [r7, #8]
 800811a:	429a      	cmp	r2, r3
 800811c:	bf0c      	ite	eq
 800811e:	2301      	moveq	r3, #1
 8008120:	2300      	movne	r3, #0
 8008122:	b2db      	uxtb	r3, r3
 8008124:	461a      	mov	r2, r3
 8008126:	79fb      	ldrb	r3, [r7, #7]
 8008128:	429a      	cmp	r2, r3
 800812a:	d0a0      	beq.n	800806e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800812c:	2300      	movs	r3, #0
}
 800812e:	4618      	mov	r0, r3
 8008130:	3710      	adds	r7, #16
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}

08008136 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008136:	b480      	push	{r7}
 8008138:	b095      	sub	sp, #84	@ 0x54
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008144:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008146:	e853 3f00 	ldrex	r3, [r3]
 800814a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800814c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800814e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008152:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	461a      	mov	r2, r3
 800815a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800815c:	643b      	str	r3, [r7, #64]	@ 0x40
 800815e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008160:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008162:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008164:	e841 2300 	strex	r3, r2, [r1]
 8008168:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800816a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800816c:	2b00      	cmp	r3, #0
 800816e:	d1e6      	bne.n	800813e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	3308      	adds	r3, #8
 8008176:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008178:	6a3b      	ldr	r3, [r7, #32]
 800817a:	e853 3f00 	ldrex	r3, [r3]
 800817e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008180:	69fb      	ldr	r3, [r7, #28]
 8008182:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008186:	f023 0301 	bic.w	r3, r3, #1
 800818a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	3308      	adds	r3, #8
 8008192:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008194:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008196:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008198:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800819a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800819c:	e841 2300 	strex	r3, r2, [r1]
 80081a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80081a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d1e3      	bne.n	8008170 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d118      	bne.n	80081e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	e853 3f00 	ldrex	r3, [r3]
 80081bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	f023 0310 	bic.w	r3, r3, #16
 80081c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	461a      	mov	r2, r3
 80081cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80081ce:	61bb      	str	r3, [r7, #24]
 80081d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d2:	6979      	ldr	r1, [r7, #20]
 80081d4:	69ba      	ldr	r2, [r7, #24]
 80081d6:	e841 2300 	strex	r3, r2, [r1]
 80081da:	613b      	str	r3, [r7, #16]
   return(result);
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d1e6      	bne.n	80081b0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2220      	movs	r2, #32
 80081e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2200      	movs	r2, #0
 80081ee:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80081f6:	bf00      	nop
 80081f8:	3754      	adds	r7, #84	@ 0x54
 80081fa:	46bd      	mov	sp, r7
 80081fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008200:	4770      	bx	lr

08008202 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008202:	b580      	push	{r7, lr}
 8008204:	b084      	sub	sp, #16
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800820e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2200      	movs	r2, #0
 8008214:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2200      	movs	r2, #0
 800821c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008220:	68f8      	ldr	r0, [r7, #12]
 8008222:	f7ff fabd 	bl	80077a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008226:	bf00      	nop
 8008228:	3710      	adds	r7, #16
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}

0800822e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800822e:	b580      	push	{r7, lr}
 8008230:	b088      	sub	sp, #32
 8008232:	af00      	add	r7, sp, #0
 8008234:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	e853 3f00 	ldrex	r3, [r3]
 8008242:	60bb      	str	r3, [r7, #8]
   return(result);
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800824a:	61fb      	str	r3, [r7, #28]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	461a      	mov	r2, r3
 8008252:	69fb      	ldr	r3, [r7, #28]
 8008254:	61bb      	str	r3, [r7, #24]
 8008256:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008258:	6979      	ldr	r1, [r7, #20]
 800825a:	69ba      	ldr	r2, [r7, #24]
 800825c:	e841 2300 	strex	r3, r2, [r1]
 8008260:	613b      	str	r3, [r7, #16]
   return(result);
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d1e6      	bne.n	8008236 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2220      	movs	r2, #32
 800826c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f7ff fa88 	bl	800778c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800827c:	bf00      	nop
 800827e:	3720      	adds	r7, #32
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008284:	b480      	push	{r7}
 8008286:	b083      	sub	sp, #12
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800828c:	bf00      	nop
 800828e:	370c      	adds	r7, #12
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr

08008298 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008298:	b480      	push	{r7}
 800829a:	b083      	sub	sp, #12
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80082a0:	bf00      	nop
 80082a2:	370c      	adds	r7, #12
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr

080082ac <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b083      	sub	sp, #12
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80082b4:	bf00      	nop
 80082b6:	370c      	adds	r7, #12
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr

080082c0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b085      	sub	sp, #20
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80082ce:	2b01      	cmp	r3, #1
 80082d0:	d101      	bne.n	80082d6 <HAL_UARTEx_DisableFifoMode+0x16>
 80082d2:	2302      	movs	r3, #2
 80082d4:	e027      	b.n	8008326 <HAL_UARTEx_DisableFifoMode+0x66>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2201      	movs	r2, #1
 80082da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2224      	movs	r2, #36	@ 0x24
 80082e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f022 0201 	bic.w	r2, r2, #1
 80082fc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008304:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2200      	movs	r2, #0
 800830a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	68fa      	ldr	r2, [r7, #12]
 8008312:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2220      	movs	r2, #32
 8008318:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3714      	adds	r7, #20
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr

08008332 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008332:	b580      	push	{r7, lr}
 8008334:	b084      	sub	sp, #16
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
 800833a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008342:	2b01      	cmp	r3, #1
 8008344:	d101      	bne.n	800834a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008346:	2302      	movs	r3, #2
 8008348:	e02d      	b.n	80083a6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2201      	movs	r2, #1
 800834e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2224      	movs	r2, #36	@ 0x24
 8008356:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	681a      	ldr	r2, [r3, #0]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f022 0201 	bic.w	r2, r2, #1
 8008370:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	689b      	ldr	r3, [r3, #8]
 8008378:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	683a      	ldr	r2, [r7, #0]
 8008382:	430a      	orrs	r2, r1
 8008384:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 f850 	bl	800842c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	68fa      	ldr	r2, [r7, #12]
 8008392:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2220      	movs	r2, #32
 8008398:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2200      	movs	r2, #0
 80083a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80083a4:	2300      	movs	r3, #0
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3710      	adds	r7, #16
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}

080083ae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80083ae:	b580      	push	{r7, lr}
 80083b0:	b084      	sub	sp, #16
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
 80083b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80083be:	2b01      	cmp	r3, #1
 80083c0:	d101      	bne.n	80083c6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80083c2:	2302      	movs	r3, #2
 80083c4:	e02d      	b.n	8008422 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2201      	movs	r2, #1
 80083ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2224      	movs	r2, #36	@ 0x24
 80083d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f022 0201 	bic.w	r2, r2, #1
 80083ec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	689b      	ldr	r3, [r3, #8]
 80083f4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	683a      	ldr	r2, [r7, #0]
 80083fe:	430a      	orrs	r2, r1
 8008400:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 f812 	bl	800842c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	68fa      	ldr	r2, [r7, #12]
 800840e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2220      	movs	r2, #32
 8008414:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2200      	movs	r2, #0
 800841c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008420:	2300      	movs	r3, #0
}
 8008422:	4618      	mov	r0, r3
 8008424:	3710      	adds	r7, #16
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
	...

0800842c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800842c:	b480      	push	{r7}
 800842e:	b085      	sub	sp, #20
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008438:	2b00      	cmp	r3, #0
 800843a:	d108      	bne.n	800844e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2201      	movs	r2, #1
 8008440:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2201      	movs	r2, #1
 8008448:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800844c:	e031      	b.n	80084b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800844e:	2308      	movs	r3, #8
 8008450:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008452:	2308      	movs	r3, #8
 8008454:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	689b      	ldr	r3, [r3, #8]
 800845c:	0e5b      	lsrs	r3, r3, #25
 800845e:	b2db      	uxtb	r3, r3
 8008460:	f003 0307 	and.w	r3, r3, #7
 8008464:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	0f5b      	lsrs	r3, r3, #29
 800846e:	b2db      	uxtb	r3, r3
 8008470:	f003 0307 	and.w	r3, r3, #7
 8008474:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008476:	7bbb      	ldrb	r3, [r7, #14]
 8008478:	7b3a      	ldrb	r2, [r7, #12]
 800847a:	4911      	ldr	r1, [pc, #68]	@ (80084c0 <UARTEx_SetNbDataToProcess+0x94>)
 800847c:	5c8a      	ldrb	r2, [r1, r2]
 800847e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008482:	7b3a      	ldrb	r2, [r7, #12]
 8008484:	490f      	ldr	r1, [pc, #60]	@ (80084c4 <UARTEx_SetNbDataToProcess+0x98>)
 8008486:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008488:	fb93 f3f2 	sdiv	r3, r3, r2
 800848c:	b29a      	uxth	r2, r3
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008494:	7bfb      	ldrb	r3, [r7, #15]
 8008496:	7b7a      	ldrb	r2, [r7, #13]
 8008498:	4909      	ldr	r1, [pc, #36]	@ (80084c0 <UARTEx_SetNbDataToProcess+0x94>)
 800849a:	5c8a      	ldrb	r2, [r1, r2]
 800849c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80084a0:	7b7a      	ldrb	r2, [r7, #13]
 80084a2:	4908      	ldr	r1, [pc, #32]	@ (80084c4 <UARTEx_SetNbDataToProcess+0x98>)
 80084a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80084a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80084aa:	b29a      	uxth	r2, r3
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80084b2:	bf00      	nop
 80084b4:	3714      	adds	r7, #20
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr
 80084be:	bf00      	nop
 80084c0:	0800a0c0 	.word	0x0800a0c0
 80084c4:	0800a0c8 	.word	0x0800a0c8

080084c8 <malloc>:
 80084c8:	4b02      	ldr	r3, [pc, #8]	@ (80084d4 <malloc+0xc>)
 80084ca:	4601      	mov	r1, r0
 80084cc:	6818      	ldr	r0, [r3, #0]
 80084ce:	f000 b82d 	b.w	800852c <_malloc_r>
 80084d2:	bf00      	nop
 80084d4:	2000001c 	.word	0x2000001c

080084d8 <free>:
 80084d8:	4b02      	ldr	r3, [pc, #8]	@ (80084e4 <free+0xc>)
 80084da:	4601      	mov	r1, r0
 80084dc:	6818      	ldr	r0, [r3, #0]
 80084de:	f000 bb95 	b.w	8008c0c <_free_r>
 80084e2:	bf00      	nop
 80084e4:	2000001c 	.word	0x2000001c

080084e8 <sbrk_aligned>:
 80084e8:	b570      	push	{r4, r5, r6, lr}
 80084ea:	4e0f      	ldr	r6, [pc, #60]	@ (8008528 <sbrk_aligned+0x40>)
 80084ec:	460c      	mov	r4, r1
 80084ee:	6831      	ldr	r1, [r6, #0]
 80084f0:	4605      	mov	r5, r0
 80084f2:	b911      	cbnz	r1, 80084fa <sbrk_aligned+0x12>
 80084f4:	f000 fb3a 	bl	8008b6c <_sbrk_r>
 80084f8:	6030      	str	r0, [r6, #0]
 80084fa:	4621      	mov	r1, r4
 80084fc:	4628      	mov	r0, r5
 80084fe:	f000 fb35 	bl	8008b6c <_sbrk_r>
 8008502:	1c43      	adds	r3, r0, #1
 8008504:	d103      	bne.n	800850e <sbrk_aligned+0x26>
 8008506:	f04f 34ff 	mov.w	r4, #4294967295
 800850a:	4620      	mov	r0, r4
 800850c:	bd70      	pop	{r4, r5, r6, pc}
 800850e:	1cc4      	adds	r4, r0, #3
 8008510:	f024 0403 	bic.w	r4, r4, #3
 8008514:	42a0      	cmp	r0, r4
 8008516:	d0f8      	beq.n	800850a <sbrk_aligned+0x22>
 8008518:	1a21      	subs	r1, r4, r0
 800851a:	4628      	mov	r0, r5
 800851c:	f000 fb26 	bl	8008b6c <_sbrk_r>
 8008520:	3001      	adds	r0, #1
 8008522:	d1f2      	bne.n	800850a <sbrk_aligned+0x22>
 8008524:	e7ef      	b.n	8008506 <sbrk_aligned+0x1e>
 8008526:	bf00      	nop
 8008528:	20000370 	.word	0x20000370

0800852c <_malloc_r>:
 800852c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008530:	1ccd      	adds	r5, r1, #3
 8008532:	f025 0503 	bic.w	r5, r5, #3
 8008536:	3508      	adds	r5, #8
 8008538:	2d0c      	cmp	r5, #12
 800853a:	bf38      	it	cc
 800853c:	250c      	movcc	r5, #12
 800853e:	2d00      	cmp	r5, #0
 8008540:	4606      	mov	r6, r0
 8008542:	db01      	blt.n	8008548 <_malloc_r+0x1c>
 8008544:	42a9      	cmp	r1, r5
 8008546:	d904      	bls.n	8008552 <_malloc_r+0x26>
 8008548:	230c      	movs	r3, #12
 800854a:	6033      	str	r3, [r6, #0]
 800854c:	2000      	movs	r0, #0
 800854e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008552:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008628 <_malloc_r+0xfc>
 8008556:	f000 f869 	bl	800862c <__malloc_lock>
 800855a:	f8d8 3000 	ldr.w	r3, [r8]
 800855e:	461c      	mov	r4, r3
 8008560:	bb44      	cbnz	r4, 80085b4 <_malloc_r+0x88>
 8008562:	4629      	mov	r1, r5
 8008564:	4630      	mov	r0, r6
 8008566:	f7ff ffbf 	bl	80084e8 <sbrk_aligned>
 800856a:	1c43      	adds	r3, r0, #1
 800856c:	4604      	mov	r4, r0
 800856e:	d158      	bne.n	8008622 <_malloc_r+0xf6>
 8008570:	f8d8 4000 	ldr.w	r4, [r8]
 8008574:	4627      	mov	r7, r4
 8008576:	2f00      	cmp	r7, #0
 8008578:	d143      	bne.n	8008602 <_malloc_r+0xd6>
 800857a:	2c00      	cmp	r4, #0
 800857c:	d04b      	beq.n	8008616 <_malloc_r+0xea>
 800857e:	6823      	ldr	r3, [r4, #0]
 8008580:	4639      	mov	r1, r7
 8008582:	4630      	mov	r0, r6
 8008584:	eb04 0903 	add.w	r9, r4, r3
 8008588:	f000 faf0 	bl	8008b6c <_sbrk_r>
 800858c:	4581      	cmp	r9, r0
 800858e:	d142      	bne.n	8008616 <_malloc_r+0xea>
 8008590:	6821      	ldr	r1, [r4, #0]
 8008592:	1a6d      	subs	r5, r5, r1
 8008594:	4629      	mov	r1, r5
 8008596:	4630      	mov	r0, r6
 8008598:	f7ff ffa6 	bl	80084e8 <sbrk_aligned>
 800859c:	3001      	adds	r0, #1
 800859e:	d03a      	beq.n	8008616 <_malloc_r+0xea>
 80085a0:	6823      	ldr	r3, [r4, #0]
 80085a2:	442b      	add	r3, r5
 80085a4:	6023      	str	r3, [r4, #0]
 80085a6:	f8d8 3000 	ldr.w	r3, [r8]
 80085aa:	685a      	ldr	r2, [r3, #4]
 80085ac:	bb62      	cbnz	r2, 8008608 <_malloc_r+0xdc>
 80085ae:	f8c8 7000 	str.w	r7, [r8]
 80085b2:	e00f      	b.n	80085d4 <_malloc_r+0xa8>
 80085b4:	6822      	ldr	r2, [r4, #0]
 80085b6:	1b52      	subs	r2, r2, r5
 80085b8:	d420      	bmi.n	80085fc <_malloc_r+0xd0>
 80085ba:	2a0b      	cmp	r2, #11
 80085bc:	d917      	bls.n	80085ee <_malloc_r+0xc2>
 80085be:	1961      	adds	r1, r4, r5
 80085c0:	42a3      	cmp	r3, r4
 80085c2:	6025      	str	r5, [r4, #0]
 80085c4:	bf18      	it	ne
 80085c6:	6059      	strne	r1, [r3, #4]
 80085c8:	6863      	ldr	r3, [r4, #4]
 80085ca:	bf08      	it	eq
 80085cc:	f8c8 1000 	streq.w	r1, [r8]
 80085d0:	5162      	str	r2, [r4, r5]
 80085d2:	604b      	str	r3, [r1, #4]
 80085d4:	4630      	mov	r0, r6
 80085d6:	f000 f82f 	bl	8008638 <__malloc_unlock>
 80085da:	f104 000b 	add.w	r0, r4, #11
 80085de:	1d23      	adds	r3, r4, #4
 80085e0:	f020 0007 	bic.w	r0, r0, #7
 80085e4:	1ac2      	subs	r2, r0, r3
 80085e6:	bf1c      	itt	ne
 80085e8:	1a1b      	subne	r3, r3, r0
 80085ea:	50a3      	strne	r3, [r4, r2]
 80085ec:	e7af      	b.n	800854e <_malloc_r+0x22>
 80085ee:	6862      	ldr	r2, [r4, #4]
 80085f0:	42a3      	cmp	r3, r4
 80085f2:	bf0c      	ite	eq
 80085f4:	f8c8 2000 	streq.w	r2, [r8]
 80085f8:	605a      	strne	r2, [r3, #4]
 80085fa:	e7eb      	b.n	80085d4 <_malloc_r+0xa8>
 80085fc:	4623      	mov	r3, r4
 80085fe:	6864      	ldr	r4, [r4, #4]
 8008600:	e7ae      	b.n	8008560 <_malloc_r+0x34>
 8008602:	463c      	mov	r4, r7
 8008604:	687f      	ldr	r7, [r7, #4]
 8008606:	e7b6      	b.n	8008576 <_malloc_r+0x4a>
 8008608:	461a      	mov	r2, r3
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	42a3      	cmp	r3, r4
 800860e:	d1fb      	bne.n	8008608 <_malloc_r+0xdc>
 8008610:	2300      	movs	r3, #0
 8008612:	6053      	str	r3, [r2, #4]
 8008614:	e7de      	b.n	80085d4 <_malloc_r+0xa8>
 8008616:	230c      	movs	r3, #12
 8008618:	6033      	str	r3, [r6, #0]
 800861a:	4630      	mov	r0, r6
 800861c:	f000 f80c 	bl	8008638 <__malloc_unlock>
 8008620:	e794      	b.n	800854c <_malloc_r+0x20>
 8008622:	6005      	str	r5, [r0, #0]
 8008624:	e7d6      	b.n	80085d4 <_malloc_r+0xa8>
 8008626:	bf00      	nop
 8008628:	20000374 	.word	0x20000374

0800862c <__malloc_lock>:
 800862c:	4801      	ldr	r0, [pc, #4]	@ (8008634 <__malloc_lock+0x8>)
 800862e:	f000 baea 	b.w	8008c06 <__retarget_lock_acquire_recursive>
 8008632:	bf00      	nop
 8008634:	200004b8 	.word	0x200004b8

08008638 <__malloc_unlock>:
 8008638:	4801      	ldr	r0, [pc, #4]	@ (8008640 <__malloc_unlock+0x8>)
 800863a:	f000 bae5 	b.w	8008c08 <__retarget_lock_release_recursive>
 800863e:	bf00      	nop
 8008640:	200004b8 	.word	0x200004b8

08008644 <std>:
 8008644:	2300      	movs	r3, #0
 8008646:	b510      	push	{r4, lr}
 8008648:	4604      	mov	r4, r0
 800864a:	e9c0 3300 	strd	r3, r3, [r0]
 800864e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008652:	6083      	str	r3, [r0, #8]
 8008654:	8181      	strh	r1, [r0, #12]
 8008656:	6643      	str	r3, [r0, #100]	@ 0x64
 8008658:	81c2      	strh	r2, [r0, #14]
 800865a:	6183      	str	r3, [r0, #24]
 800865c:	4619      	mov	r1, r3
 800865e:	2208      	movs	r2, #8
 8008660:	305c      	adds	r0, #92	@ 0x5c
 8008662:	f000 fa33 	bl	8008acc <memset>
 8008666:	4b0d      	ldr	r3, [pc, #52]	@ (800869c <std+0x58>)
 8008668:	6263      	str	r3, [r4, #36]	@ 0x24
 800866a:	4b0d      	ldr	r3, [pc, #52]	@ (80086a0 <std+0x5c>)
 800866c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800866e:	4b0d      	ldr	r3, [pc, #52]	@ (80086a4 <std+0x60>)
 8008670:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008672:	4b0d      	ldr	r3, [pc, #52]	@ (80086a8 <std+0x64>)
 8008674:	6323      	str	r3, [r4, #48]	@ 0x30
 8008676:	4b0d      	ldr	r3, [pc, #52]	@ (80086ac <std+0x68>)
 8008678:	6224      	str	r4, [r4, #32]
 800867a:	429c      	cmp	r4, r3
 800867c:	d006      	beq.n	800868c <std+0x48>
 800867e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008682:	4294      	cmp	r4, r2
 8008684:	d002      	beq.n	800868c <std+0x48>
 8008686:	33d0      	adds	r3, #208	@ 0xd0
 8008688:	429c      	cmp	r4, r3
 800868a:	d105      	bne.n	8008698 <std+0x54>
 800868c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008694:	f000 bab6 	b.w	8008c04 <__retarget_lock_init_recursive>
 8008698:	bd10      	pop	{r4, pc}
 800869a:	bf00      	nop
 800869c:	08008919 	.word	0x08008919
 80086a0:	0800893f 	.word	0x0800893f
 80086a4:	08008977 	.word	0x08008977
 80086a8:	0800899b 	.word	0x0800899b
 80086ac:	20000378 	.word	0x20000378

080086b0 <stdio_exit_handler>:
 80086b0:	4a02      	ldr	r2, [pc, #8]	@ (80086bc <stdio_exit_handler+0xc>)
 80086b2:	4903      	ldr	r1, [pc, #12]	@ (80086c0 <stdio_exit_handler+0x10>)
 80086b4:	4803      	ldr	r0, [pc, #12]	@ (80086c4 <stdio_exit_handler+0x14>)
 80086b6:	f000 b869 	b.w	800878c <_fwalk_sglue>
 80086ba:	bf00      	nop
 80086bc:	20000010 	.word	0x20000010
 80086c0:	080099a9 	.word	0x080099a9
 80086c4:	20000020 	.word	0x20000020

080086c8 <cleanup_stdio>:
 80086c8:	6841      	ldr	r1, [r0, #4]
 80086ca:	4b0c      	ldr	r3, [pc, #48]	@ (80086fc <cleanup_stdio+0x34>)
 80086cc:	4299      	cmp	r1, r3
 80086ce:	b510      	push	{r4, lr}
 80086d0:	4604      	mov	r4, r0
 80086d2:	d001      	beq.n	80086d8 <cleanup_stdio+0x10>
 80086d4:	f001 f968 	bl	80099a8 <_fflush_r>
 80086d8:	68a1      	ldr	r1, [r4, #8]
 80086da:	4b09      	ldr	r3, [pc, #36]	@ (8008700 <cleanup_stdio+0x38>)
 80086dc:	4299      	cmp	r1, r3
 80086de:	d002      	beq.n	80086e6 <cleanup_stdio+0x1e>
 80086e0:	4620      	mov	r0, r4
 80086e2:	f001 f961 	bl	80099a8 <_fflush_r>
 80086e6:	68e1      	ldr	r1, [r4, #12]
 80086e8:	4b06      	ldr	r3, [pc, #24]	@ (8008704 <cleanup_stdio+0x3c>)
 80086ea:	4299      	cmp	r1, r3
 80086ec:	d004      	beq.n	80086f8 <cleanup_stdio+0x30>
 80086ee:	4620      	mov	r0, r4
 80086f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086f4:	f001 b958 	b.w	80099a8 <_fflush_r>
 80086f8:	bd10      	pop	{r4, pc}
 80086fa:	bf00      	nop
 80086fc:	20000378 	.word	0x20000378
 8008700:	200003e0 	.word	0x200003e0
 8008704:	20000448 	.word	0x20000448

08008708 <global_stdio_init.part.0>:
 8008708:	b510      	push	{r4, lr}
 800870a:	4b0b      	ldr	r3, [pc, #44]	@ (8008738 <global_stdio_init.part.0+0x30>)
 800870c:	4c0b      	ldr	r4, [pc, #44]	@ (800873c <global_stdio_init.part.0+0x34>)
 800870e:	4a0c      	ldr	r2, [pc, #48]	@ (8008740 <global_stdio_init.part.0+0x38>)
 8008710:	601a      	str	r2, [r3, #0]
 8008712:	4620      	mov	r0, r4
 8008714:	2200      	movs	r2, #0
 8008716:	2104      	movs	r1, #4
 8008718:	f7ff ff94 	bl	8008644 <std>
 800871c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008720:	2201      	movs	r2, #1
 8008722:	2109      	movs	r1, #9
 8008724:	f7ff ff8e 	bl	8008644 <std>
 8008728:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800872c:	2202      	movs	r2, #2
 800872e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008732:	2112      	movs	r1, #18
 8008734:	f7ff bf86 	b.w	8008644 <std>
 8008738:	200004b0 	.word	0x200004b0
 800873c:	20000378 	.word	0x20000378
 8008740:	080086b1 	.word	0x080086b1

08008744 <__sfp_lock_acquire>:
 8008744:	4801      	ldr	r0, [pc, #4]	@ (800874c <__sfp_lock_acquire+0x8>)
 8008746:	f000 ba5e 	b.w	8008c06 <__retarget_lock_acquire_recursive>
 800874a:	bf00      	nop
 800874c:	200004b9 	.word	0x200004b9

08008750 <__sfp_lock_release>:
 8008750:	4801      	ldr	r0, [pc, #4]	@ (8008758 <__sfp_lock_release+0x8>)
 8008752:	f000 ba59 	b.w	8008c08 <__retarget_lock_release_recursive>
 8008756:	bf00      	nop
 8008758:	200004b9 	.word	0x200004b9

0800875c <__sinit>:
 800875c:	b510      	push	{r4, lr}
 800875e:	4604      	mov	r4, r0
 8008760:	f7ff fff0 	bl	8008744 <__sfp_lock_acquire>
 8008764:	6a23      	ldr	r3, [r4, #32]
 8008766:	b11b      	cbz	r3, 8008770 <__sinit+0x14>
 8008768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800876c:	f7ff bff0 	b.w	8008750 <__sfp_lock_release>
 8008770:	4b04      	ldr	r3, [pc, #16]	@ (8008784 <__sinit+0x28>)
 8008772:	6223      	str	r3, [r4, #32]
 8008774:	4b04      	ldr	r3, [pc, #16]	@ (8008788 <__sinit+0x2c>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d1f5      	bne.n	8008768 <__sinit+0xc>
 800877c:	f7ff ffc4 	bl	8008708 <global_stdio_init.part.0>
 8008780:	e7f2      	b.n	8008768 <__sinit+0xc>
 8008782:	bf00      	nop
 8008784:	080086c9 	.word	0x080086c9
 8008788:	200004b0 	.word	0x200004b0

0800878c <_fwalk_sglue>:
 800878c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008790:	4607      	mov	r7, r0
 8008792:	4688      	mov	r8, r1
 8008794:	4614      	mov	r4, r2
 8008796:	2600      	movs	r6, #0
 8008798:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800879c:	f1b9 0901 	subs.w	r9, r9, #1
 80087a0:	d505      	bpl.n	80087ae <_fwalk_sglue+0x22>
 80087a2:	6824      	ldr	r4, [r4, #0]
 80087a4:	2c00      	cmp	r4, #0
 80087a6:	d1f7      	bne.n	8008798 <_fwalk_sglue+0xc>
 80087a8:	4630      	mov	r0, r6
 80087aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087ae:	89ab      	ldrh	r3, [r5, #12]
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d907      	bls.n	80087c4 <_fwalk_sglue+0x38>
 80087b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80087b8:	3301      	adds	r3, #1
 80087ba:	d003      	beq.n	80087c4 <_fwalk_sglue+0x38>
 80087bc:	4629      	mov	r1, r5
 80087be:	4638      	mov	r0, r7
 80087c0:	47c0      	blx	r8
 80087c2:	4306      	orrs	r6, r0
 80087c4:	3568      	adds	r5, #104	@ 0x68
 80087c6:	e7e9      	b.n	800879c <_fwalk_sglue+0x10>

080087c8 <_puts_r>:
 80087c8:	6a03      	ldr	r3, [r0, #32]
 80087ca:	b570      	push	{r4, r5, r6, lr}
 80087cc:	6884      	ldr	r4, [r0, #8]
 80087ce:	4605      	mov	r5, r0
 80087d0:	460e      	mov	r6, r1
 80087d2:	b90b      	cbnz	r3, 80087d8 <_puts_r+0x10>
 80087d4:	f7ff ffc2 	bl	800875c <__sinit>
 80087d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80087da:	07db      	lsls	r3, r3, #31
 80087dc:	d405      	bmi.n	80087ea <_puts_r+0x22>
 80087de:	89a3      	ldrh	r3, [r4, #12]
 80087e0:	0598      	lsls	r0, r3, #22
 80087e2:	d402      	bmi.n	80087ea <_puts_r+0x22>
 80087e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80087e6:	f000 fa0e 	bl	8008c06 <__retarget_lock_acquire_recursive>
 80087ea:	89a3      	ldrh	r3, [r4, #12]
 80087ec:	0719      	lsls	r1, r3, #28
 80087ee:	d502      	bpl.n	80087f6 <_puts_r+0x2e>
 80087f0:	6923      	ldr	r3, [r4, #16]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d135      	bne.n	8008862 <_puts_r+0x9a>
 80087f6:	4621      	mov	r1, r4
 80087f8:	4628      	mov	r0, r5
 80087fa:	f000 f911 	bl	8008a20 <__swsetup_r>
 80087fe:	b380      	cbz	r0, 8008862 <_puts_r+0x9a>
 8008800:	f04f 35ff 	mov.w	r5, #4294967295
 8008804:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008806:	07da      	lsls	r2, r3, #31
 8008808:	d405      	bmi.n	8008816 <_puts_r+0x4e>
 800880a:	89a3      	ldrh	r3, [r4, #12]
 800880c:	059b      	lsls	r3, r3, #22
 800880e:	d402      	bmi.n	8008816 <_puts_r+0x4e>
 8008810:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008812:	f000 f9f9 	bl	8008c08 <__retarget_lock_release_recursive>
 8008816:	4628      	mov	r0, r5
 8008818:	bd70      	pop	{r4, r5, r6, pc}
 800881a:	2b00      	cmp	r3, #0
 800881c:	da04      	bge.n	8008828 <_puts_r+0x60>
 800881e:	69a2      	ldr	r2, [r4, #24]
 8008820:	429a      	cmp	r2, r3
 8008822:	dc17      	bgt.n	8008854 <_puts_r+0x8c>
 8008824:	290a      	cmp	r1, #10
 8008826:	d015      	beq.n	8008854 <_puts_r+0x8c>
 8008828:	6823      	ldr	r3, [r4, #0]
 800882a:	1c5a      	adds	r2, r3, #1
 800882c:	6022      	str	r2, [r4, #0]
 800882e:	7019      	strb	r1, [r3, #0]
 8008830:	68a3      	ldr	r3, [r4, #8]
 8008832:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008836:	3b01      	subs	r3, #1
 8008838:	60a3      	str	r3, [r4, #8]
 800883a:	2900      	cmp	r1, #0
 800883c:	d1ed      	bne.n	800881a <_puts_r+0x52>
 800883e:	2b00      	cmp	r3, #0
 8008840:	da11      	bge.n	8008866 <_puts_r+0x9e>
 8008842:	4622      	mov	r2, r4
 8008844:	210a      	movs	r1, #10
 8008846:	4628      	mov	r0, r5
 8008848:	f000 f8ab 	bl	80089a2 <__swbuf_r>
 800884c:	3001      	adds	r0, #1
 800884e:	d0d7      	beq.n	8008800 <_puts_r+0x38>
 8008850:	250a      	movs	r5, #10
 8008852:	e7d7      	b.n	8008804 <_puts_r+0x3c>
 8008854:	4622      	mov	r2, r4
 8008856:	4628      	mov	r0, r5
 8008858:	f000 f8a3 	bl	80089a2 <__swbuf_r>
 800885c:	3001      	adds	r0, #1
 800885e:	d1e7      	bne.n	8008830 <_puts_r+0x68>
 8008860:	e7ce      	b.n	8008800 <_puts_r+0x38>
 8008862:	3e01      	subs	r6, #1
 8008864:	e7e4      	b.n	8008830 <_puts_r+0x68>
 8008866:	6823      	ldr	r3, [r4, #0]
 8008868:	1c5a      	adds	r2, r3, #1
 800886a:	6022      	str	r2, [r4, #0]
 800886c:	220a      	movs	r2, #10
 800886e:	701a      	strb	r2, [r3, #0]
 8008870:	e7ee      	b.n	8008850 <_puts_r+0x88>
	...

08008874 <puts>:
 8008874:	4b02      	ldr	r3, [pc, #8]	@ (8008880 <puts+0xc>)
 8008876:	4601      	mov	r1, r0
 8008878:	6818      	ldr	r0, [r3, #0]
 800887a:	f7ff bfa5 	b.w	80087c8 <_puts_r>
 800887e:	bf00      	nop
 8008880:	2000001c 	.word	0x2000001c

08008884 <siprintf>:
 8008884:	b40e      	push	{r1, r2, r3}
 8008886:	b500      	push	{lr}
 8008888:	b09c      	sub	sp, #112	@ 0x70
 800888a:	ab1d      	add	r3, sp, #116	@ 0x74
 800888c:	9002      	str	r0, [sp, #8]
 800888e:	9006      	str	r0, [sp, #24]
 8008890:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008894:	4809      	ldr	r0, [pc, #36]	@ (80088bc <siprintf+0x38>)
 8008896:	9107      	str	r1, [sp, #28]
 8008898:	9104      	str	r1, [sp, #16]
 800889a:	4909      	ldr	r1, [pc, #36]	@ (80088c0 <siprintf+0x3c>)
 800889c:	f853 2b04 	ldr.w	r2, [r3], #4
 80088a0:	9105      	str	r1, [sp, #20]
 80088a2:	6800      	ldr	r0, [r0, #0]
 80088a4:	9301      	str	r3, [sp, #4]
 80088a6:	a902      	add	r1, sp, #8
 80088a8:	f000 fa56 	bl	8008d58 <_svfiprintf_r>
 80088ac:	9b02      	ldr	r3, [sp, #8]
 80088ae:	2200      	movs	r2, #0
 80088b0:	701a      	strb	r2, [r3, #0]
 80088b2:	b01c      	add	sp, #112	@ 0x70
 80088b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80088b8:	b003      	add	sp, #12
 80088ba:	4770      	bx	lr
 80088bc:	2000001c 	.word	0x2000001c
 80088c0:	ffff0208 	.word	0xffff0208

080088c4 <siscanf>:
 80088c4:	b40e      	push	{r1, r2, r3}
 80088c6:	b530      	push	{r4, r5, lr}
 80088c8:	b09c      	sub	sp, #112	@ 0x70
 80088ca:	ac1f      	add	r4, sp, #124	@ 0x7c
 80088cc:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80088d0:	f854 5b04 	ldr.w	r5, [r4], #4
 80088d4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80088d8:	9002      	str	r0, [sp, #8]
 80088da:	9006      	str	r0, [sp, #24]
 80088dc:	f7f7 fcaa 	bl	8000234 <strlen>
 80088e0:	4b0b      	ldr	r3, [pc, #44]	@ (8008910 <siscanf+0x4c>)
 80088e2:	9003      	str	r0, [sp, #12]
 80088e4:	9007      	str	r0, [sp, #28]
 80088e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80088e8:	480a      	ldr	r0, [pc, #40]	@ (8008914 <siscanf+0x50>)
 80088ea:	9401      	str	r4, [sp, #4]
 80088ec:	2300      	movs	r3, #0
 80088ee:	930f      	str	r3, [sp, #60]	@ 0x3c
 80088f0:	9314      	str	r3, [sp, #80]	@ 0x50
 80088f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80088f6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80088fa:	462a      	mov	r2, r5
 80088fc:	4623      	mov	r3, r4
 80088fe:	a902      	add	r1, sp, #8
 8008900:	6800      	ldr	r0, [r0, #0]
 8008902:	f000 fb7d 	bl	8009000 <__ssvfiscanf_r>
 8008906:	b01c      	add	sp, #112	@ 0x70
 8008908:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800890c:	b003      	add	sp, #12
 800890e:	4770      	bx	lr
 8008910:	0800893b 	.word	0x0800893b
 8008914:	2000001c 	.word	0x2000001c

08008918 <__sread>:
 8008918:	b510      	push	{r4, lr}
 800891a:	460c      	mov	r4, r1
 800891c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008920:	f000 f912 	bl	8008b48 <_read_r>
 8008924:	2800      	cmp	r0, #0
 8008926:	bfab      	itete	ge
 8008928:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800892a:	89a3      	ldrhlt	r3, [r4, #12]
 800892c:	181b      	addge	r3, r3, r0
 800892e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008932:	bfac      	ite	ge
 8008934:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008936:	81a3      	strhlt	r3, [r4, #12]
 8008938:	bd10      	pop	{r4, pc}

0800893a <__seofread>:
 800893a:	2000      	movs	r0, #0
 800893c:	4770      	bx	lr

0800893e <__swrite>:
 800893e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008942:	461f      	mov	r7, r3
 8008944:	898b      	ldrh	r3, [r1, #12]
 8008946:	05db      	lsls	r3, r3, #23
 8008948:	4605      	mov	r5, r0
 800894a:	460c      	mov	r4, r1
 800894c:	4616      	mov	r6, r2
 800894e:	d505      	bpl.n	800895c <__swrite+0x1e>
 8008950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008954:	2302      	movs	r3, #2
 8008956:	2200      	movs	r2, #0
 8008958:	f000 f8e4 	bl	8008b24 <_lseek_r>
 800895c:	89a3      	ldrh	r3, [r4, #12]
 800895e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008962:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008966:	81a3      	strh	r3, [r4, #12]
 8008968:	4632      	mov	r2, r6
 800896a:	463b      	mov	r3, r7
 800896c:	4628      	mov	r0, r5
 800896e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008972:	f000 b90b 	b.w	8008b8c <_write_r>

08008976 <__sseek>:
 8008976:	b510      	push	{r4, lr}
 8008978:	460c      	mov	r4, r1
 800897a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800897e:	f000 f8d1 	bl	8008b24 <_lseek_r>
 8008982:	1c43      	adds	r3, r0, #1
 8008984:	89a3      	ldrh	r3, [r4, #12]
 8008986:	bf15      	itete	ne
 8008988:	6560      	strne	r0, [r4, #84]	@ 0x54
 800898a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800898e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008992:	81a3      	strheq	r3, [r4, #12]
 8008994:	bf18      	it	ne
 8008996:	81a3      	strhne	r3, [r4, #12]
 8008998:	bd10      	pop	{r4, pc}

0800899a <__sclose>:
 800899a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800899e:	f000 b8b1 	b.w	8008b04 <_close_r>

080089a2 <__swbuf_r>:
 80089a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089a4:	460e      	mov	r6, r1
 80089a6:	4614      	mov	r4, r2
 80089a8:	4605      	mov	r5, r0
 80089aa:	b118      	cbz	r0, 80089b4 <__swbuf_r+0x12>
 80089ac:	6a03      	ldr	r3, [r0, #32]
 80089ae:	b90b      	cbnz	r3, 80089b4 <__swbuf_r+0x12>
 80089b0:	f7ff fed4 	bl	800875c <__sinit>
 80089b4:	69a3      	ldr	r3, [r4, #24]
 80089b6:	60a3      	str	r3, [r4, #8]
 80089b8:	89a3      	ldrh	r3, [r4, #12]
 80089ba:	071a      	lsls	r2, r3, #28
 80089bc:	d501      	bpl.n	80089c2 <__swbuf_r+0x20>
 80089be:	6923      	ldr	r3, [r4, #16]
 80089c0:	b943      	cbnz	r3, 80089d4 <__swbuf_r+0x32>
 80089c2:	4621      	mov	r1, r4
 80089c4:	4628      	mov	r0, r5
 80089c6:	f000 f82b 	bl	8008a20 <__swsetup_r>
 80089ca:	b118      	cbz	r0, 80089d4 <__swbuf_r+0x32>
 80089cc:	f04f 37ff 	mov.w	r7, #4294967295
 80089d0:	4638      	mov	r0, r7
 80089d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089d4:	6823      	ldr	r3, [r4, #0]
 80089d6:	6922      	ldr	r2, [r4, #16]
 80089d8:	1a98      	subs	r0, r3, r2
 80089da:	6963      	ldr	r3, [r4, #20]
 80089dc:	b2f6      	uxtb	r6, r6
 80089de:	4283      	cmp	r3, r0
 80089e0:	4637      	mov	r7, r6
 80089e2:	dc05      	bgt.n	80089f0 <__swbuf_r+0x4e>
 80089e4:	4621      	mov	r1, r4
 80089e6:	4628      	mov	r0, r5
 80089e8:	f000 ffde 	bl	80099a8 <_fflush_r>
 80089ec:	2800      	cmp	r0, #0
 80089ee:	d1ed      	bne.n	80089cc <__swbuf_r+0x2a>
 80089f0:	68a3      	ldr	r3, [r4, #8]
 80089f2:	3b01      	subs	r3, #1
 80089f4:	60a3      	str	r3, [r4, #8]
 80089f6:	6823      	ldr	r3, [r4, #0]
 80089f8:	1c5a      	adds	r2, r3, #1
 80089fa:	6022      	str	r2, [r4, #0]
 80089fc:	701e      	strb	r6, [r3, #0]
 80089fe:	6962      	ldr	r2, [r4, #20]
 8008a00:	1c43      	adds	r3, r0, #1
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d004      	beq.n	8008a10 <__swbuf_r+0x6e>
 8008a06:	89a3      	ldrh	r3, [r4, #12]
 8008a08:	07db      	lsls	r3, r3, #31
 8008a0a:	d5e1      	bpl.n	80089d0 <__swbuf_r+0x2e>
 8008a0c:	2e0a      	cmp	r6, #10
 8008a0e:	d1df      	bne.n	80089d0 <__swbuf_r+0x2e>
 8008a10:	4621      	mov	r1, r4
 8008a12:	4628      	mov	r0, r5
 8008a14:	f000 ffc8 	bl	80099a8 <_fflush_r>
 8008a18:	2800      	cmp	r0, #0
 8008a1a:	d0d9      	beq.n	80089d0 <__swbuf_r+0x2e>
 8008a1c:	e7d6      	b.n	80089cc <__swbuf_r+0x2a>
	...

08008a20 <__swsetup_r>:
 8008a20:	b538      	push	{r3, r4, r5, lr}
 8008a22:	4b29      	ldr	r3, [pc, #164]	@ (8008ac8 <__swsetup_r+0xa8>)
 8008a24:	4605      	mov	r5, r0
 8008a26:	6818      	ldr	r0, [r3, #0]
 8008a28:	460c      	mov	r4, r1
 8008a2a:	b118      	cbz	r0, 8008a34 <__swsetup_r+0x14>
 8008a2c:	6a03      	ldr	r3, [r0, #32]
 8008a2e:	b90b      	cbnz	r3, 8008a34 <__swsetup_r+0x14>
 8008a30:	f7ff fe94 	bl	800875c <__sinit>
 8008a34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a38:	0719      	lsls	r1, r3, #28
 8008a3a:	d422      	bmi.n	8008a82 <__swsetup_r+0x62>
 8008a3c:	06da      	lsls	r2, r3, #27
 8008a3e:	d407      	bmi.n	8008a50 <__swsetup_r+0x30>
 8008a40:	2209      	movs	r2, #9
 8008a42:	602a      	str	r2, [r5, #0]
 8008a44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a48:	81a3      	strh	r3, [r4, #12]
 8008a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a4e:	e033      	b.n	8008ab8 <__swsetup_r+0x98>
 8008a50:	0758      	lsls	r0, r3, #29
 8008a52:	d512      	bpl.n	8008a7a <__swsetup_r+0x5a>
 8008a54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a56:	b141      	cbz	r1, 8008a6a <__swsetup_r+0x4a>
 8008a58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a5c:	4299      	cmp	r1, r3
 8008a5e:	d002      	beq.n	8008a66 <__swsetup_r+0x46>
 8008a60:	4628      	mov	r0, r5
 8008a62:	f000 f8d3 	bl	8008c0c <_free_r>
 8008a66:	2300      	movs	r3, #0
 8008a68:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a6a:	89a3      	ldrh	r3, [r4, #12]
 8008a6c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008a70:	81a3      	strh	r3, [r4, #12]
 8008a72:	2300      	movs	r3, #0
 8008a74:	6063      	str	r3, [r4, #4]
 8008a76:	6923      	ldr	r3, [r4, #16]
 8008a78:	6023      	str	r3, [r4, #0]
 8008a7a:	89a3      	ldrh	r3, [r4, #12]
 8008a7c:	f043 0308 	orr.w	r3, r3, #8
 8008a80:	81a3      	strh	r3, [r4, #12]
 8008a82:	6923      	ldr	r3, [r4, #16]
 8008a84:	b94b      	cbnz	r3, 8008a9a <__swsetup_r+0x7a>
 8008a86:	89a3      	ldrh	r3, [r4, #12]
 8008a88:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008a8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a90:	d003      	beq.n	8008a9a <__swsetup_r+0x7a>
 8008a92:	4621      	mov	r1, r4
 8008a94:	4628      	mov	r0, r5
 8008a96:	f000 ffd5 	bl	8009a44 <__smakebuf_r>
 8008a9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a9e:	f013 0201 	ands.w	r2, r3, #1
 8008aa2:	d00a      	beq.n	8008aba <__swsetup_r+0x9a>
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	60a2      	str	r2, [r4, #8]
 8008aa8:	6962      	ldr	r2, [r4, #20]
 8008aaa:	4252      	negs	r2, r2
 8008aac:	61a2      	str	r2, [r4, #24]
 8008aae:	6922      	ldr	r2, [r4, #16]
 8008ab0:	b942      	cbnz	r2, 8008ac4 <__swsetup_r+0xa4>
 8008ab2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008ab6:	d1c5      	bne.n	8008a44 <__swsetup_r+0x24>
 8008ab8:	bd38      	pop	{r3, r4, r5, pc}
 8008aba:	0799      	lsls	r1, r3, #30
 8008abc:	bf58      	it	pl
 8008abe:	6962      	ldrpl	r2, [r4, #20]
 8008ac0:	60a2      	str	r2, [r4, #8]
 8008ac2:	e7f4      	b.n	8008aae <__swsetup_r+0x8e>
 8008ac4:	2000      	movs	r0, #0
 8008ac6:	e7f7      	b.n	8008ab8 <__swsetup_r+0x98>
 8008ac8:	2000001c 	.word	0x2000001c

08008acc <memset>:
 8008acc:	4402      	add	r2, r0
 8008ace:	4603      	mov	r3, r0
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d100      	bne.n	8008ad6 <memset+0xa>
 8008ad4:	4770      	bx	lr
 8008ad6:	f803 1b01 	strb.w	r1, [r3], #1
 8008ada:	e7f9      	b.n	8008ad0 <memset+0x4>

08008adc <strncpy>:
 8008adc:	b510      	push	{r4, lr}
 8008ade:	3901      	subs	r1, #1
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	b132      	cbz	r2, 8008af2 <strncpy+0x16>
 8008ae4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008ae8:	f803 4b01 	strb.w	r4, [r3], #1
 8008aec:	3a01      	subs	r2, #1
 8008aee:	2c00      	cmp	r4, #0
 8008af0:	d1f7      	bne.n	8008ae2 <strncpy+0x6>
 8008af2:	441a      	add	r2, r3
 8008af4:	2100      	movs	r1, #0
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d100      	bne.n	8008afc <strncpy+0x20>
 8008afa:	bd10      	pop	{r4, pc}
 8008afc:	f803 1b01 	strb.w	r1, [r3], #1
 8008b00:	e7f9      	b.n	8008af6 <strncpy+0x1a>
	...

08008b04 <_close_r>:
 8008b04:	b538      	push	{r3, r4, r5, lr}
 8008b06:	4d06      	ldr	r5, [pc, #24]	@ (8008b20 <_close_r+0x1c>)
 8008b08:	2300      	movs	r3, #0
 8008b0a:	4604      	mov	r4, r0
 8008b0c:	4608      	mov	r0, r1
 8008b0e:	602b      	str	r3, [r5, #0]
 8008b10:	f7fa f87d 	bl	8002c0e <_close>
 8008b14:	1c43      	adds	r3, r0, #1
 8008b16:	d102      	bne.n	8008b1e <_close_r+0x1a>
 8008b18:	682b      	ldr	r3, [r5, #0]
 8008b1a:	b103      	cbz	r3, 8008b1e <_close_r+0x1a>
 8008b1c:	6023      	str	r3, [r4, #0]
 8008b1e:	bd38      	pop	{r3, r4, r5, pc}
 8008b20:	200004b4 	.word	0x200004b4

08008b24 <_lseek_r>:
 8008b24:	b538      	push	{r3, r4, r5, lr}
 8008b26:	4d07      	ldr	r5, [pc, #28]	@ (8008b44 <_lseek_r+0x20>)
 8008b28:	4604      	mov	r4, r0
 8008b2a:	4608      	mov	r0, r1
 8008b2c:	4611      	mov	r1, r2
 8008b2e:	2200      	movs	r2, #0
 8008b30:	602a      	str	r2, [r5, #0]
 8008b32:	461a      	mov	r2, r3
 8008b34:	f7fa f892 	bl	8002c5c <_lseek>
 8008b38:	1c43      	adds	r3, r0, #1
 8008b3a:	d102      	bne.n	8008b42 <_lseek_r+0x1e>
 8008b3c:	682b      	ldr	r3, [r5, #0]
 8008b3e:	b103      	cbz	r3, 8008b42 <_lseek_r+0x1e>
 8008b40:	6023      	str	r3, [r4, #0]
 8008b42:	bd38      	pop	{r3, r4, r5, pc}
 8008b44:	200004b4 	.word	0x200004b4

08008b48 <_read_r>:
 8008b48:	b538      	push	{r3, r4, r5, lr}
 8008b4a:	4d07      	ldr	r5, [pc, #28]	@ (8008b68 <_read_r+0x20>)
 8008b4c:	4604      	mov	r4, r0
 8008b4e:	4608      	mov	r0, r1
 8008b50:	4611      	mov	r1, r2
 8008b52:	2200      	movs	r2, #0
 8008b54:	602a      	str	r2, [r5, #0]
 8008b56:	461a      	mov	r2, r3
 8008b58:	f7fa f820 	bl	8002b9c <_read>
 8008b5c:	1c43      	adds	r3, r0, #1
 8008b5e:	d102      	bne.n	8008b66 <_read_r+0x1e>
 8008b60:	682b      	ldr	r3, [r5, #0]
 8008b62:	b103      	cbz	r3, 8008b66 <_read_r+0x1e>
 8008b64:	6023      	str	r3, [r4, #0]
 8008b66:	bd38      	pop	{r3, r4, r5, pc}
 8008b68:	200004b4 	.word	0x200004b4

08008b6c <_sbrk_r>:
 8008b6c:	b538      	push	{r3, r4, r5, lr}
 8008b6e:	4d06      	ldr	r5, [pc, #24]	@ (8008b88 <_sbrk_r+0x1c>)
 8008b70:	2300      	movs	r3, #0
 8008b72:	4604      	mov	r4, r0
 8008b74:	4608      	mov	r0, r1
 8008b76:	602b      	str	r3, [r5, #0]
 8008b78:	f7fa f87e 	bl	8002c78 <_sbrk>
 8008b7c:	1c43      	adds	r3, r0, #1
 8008b7e:	d102      	bne.n	8008b86 <_sbrk_r+0x1a>
 8008b80:	682b      	ldr	r3, [r5, #0]
 8008b82:	b103      	cbz	r3, 8008b86 <_sbrk_r+0x1a>
 8008b84:	6023      	str	r3, [r4, #0]
 8008b86:	bd38      	pop	{r3, r4, r5, pc}
 8008b88:	200004b4 	.word	0x200004b4

08008b8c <_write_r>:
 8008b8c:	b538      	push	{r3, r4, r5, lr}
 8008b8e:	4d07      	ldr	r5, [pc, #28]	@ (8008bac <_write_r+0x20>)
 8008b90:	4604      	mov	r4, r0
 8008b92:	4608      	mov	r0, r1
 8008b94:	4611      	mov	r1, r2
 8008b96:	2200      	movs	r2, #0
 8008b98:	602a      	str	r2, [r5, #0]
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	f7fa f81b 	bl	8002bd6 <_write>
 8008ba0:	1c43      	adds	r3, r0, #1
 8008ba2:	d102      	bne.n	8008baa <_write_r+0x1e>
 8008ba4:	682b      	ldr	r3, [r5, #0]
 8008ba6:	b103      	cbz	r3, 8008baa <_write_r+0x1e>
 8008ba8:	6023      	str	r3, [r4, #0]
 8008baa:	bd38      	pop	{r3, r4, r5, pc}
 8008bac:	200004b4 	.word	0x200004b4

08008bb0 <__errno>:
 8008bb0:	4b01      	ldr	r3, [pc, #4]	@ (8008bb8 <__errno+0x8>)
 8008bb2:	6818      	ldr	r0, [r3, #0]
 8008bb4:	4770      	bx	lr
 8008bb6:	bf00      	nop
 8008bb8:	2000001c 	.word	0x2000001c

08008bbc <__libc_init_array>:
 8008bbc:	b570      	push	{r4, r5, r6, lr}
 8008bbe:	4d0d      	ldr	r5, [pc, #52]	@ (8008bf4 <__libc_init_array+0x38>)
 8008bc0:	4c0d      	ldr	r4, [pc, #52]	@ (8008bf8 <__libc_init_array+0x3c>)
 8008bc2:	1b64      	subs	r4, r4, r5
 8008bc4:	10a4      	asrs	r4, r4, #2
 8008bc6:	2600      	movs	r6, #0
 8008bc8:	42a6      	cmp	r6, r4
 8008bca:	d109      	bne.n	8008be0 <__libc_init_array+0x24>
 8008bcc:	4d0b      	ldr	r5, [pc, #44]	@ (8008bfc <__libc_init_array+0x40>)
 8008bce:	4c0c      	ldr	r4, [pc, #48]	@ (8008c00 <__libc_init_array+0x44>)
 8008bd0:	f001 f954 	bl	8009e7c <_init>
 8008bd4:	1b64      	subs	r4, r4, r5
 8008bd6:	10a4      	asrs	r4, r4, #2
 8008bd8:	2600      	movs	r6, #0
 8008bda:	42a6      	cmp	r6, r4
 8008bdc:	d105      	bne.n	8008bea <__libc_init_array+0x2e>
 8008bde:	bd70      	pop	{r4, r5, r6, pc}
 8008be0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008be4:	4798      	blx	r3
 8008be6:	3601      	adds	r6, #1
 8008be8:	e7ee      	b.n	8008bc8 <__libc_init_array+0xc>
 8008bea:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bee:	4798      	blx	r3
 8008bf0:	3601      	adds	r6, #1
 8008bf2:	e7f2      	b.n	8008bda <__libc_init_array+0x1e>
 8008bf4:	0800a228 	.word	0x0800a228
 8008bf8:	0800a228 	.word	0x0800a228
 8008bfc:	0800a228 	.word	0x0800a228
 8008c00:	0800a22c 	.word	0x0800a22c

08008c04 <__retarget_lock_init_recursive>:
 8008c04:	4770      	bx	lr

08008c06 <__retarget_lock_acquire_recursive>:
 8008c06:	4770      	bx	lr

08008c08 <__retarget_lock_release_recursive>:
 8008c08:	4770      	bx	lr
	...

08008c0c <_free_r>:
 8008c0c:	b538      	push	{r3, r4, r5, lr}
 8008c0e:	4605      	mov	r5, r0
 8008c10:	2900      	cmp	r1, #0
 8008c12:	d041      	beq.n	8008c98 <_free_r+0x8c>
 8008c14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c18:	1f0c      	subs	r4, r1, #4
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	bfb8      	it	lt
 8008c1e:	18e4      	addlt	r4, r4, r3
 8008c20:	f7ff fd04 	bl	800862c <__malloc_lock>
 8008c24:	4a1d      	ldr	r2, [pc, #116]	@ (8008c9c <_free_r+0x90>)
 8008c26:	6813      	ldr	r3, [r2, #0]
 8008c28:	b933      	cbnz	r3, 8008c38 <_free_r+0x2c>
 8008c2a:	6063      	str	r3, [r4, #4]
 8008c2c:	6014      	str	r4, [r2, #0]
 8008c2e:	4628      	mov	r0, r5
 8008c30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c34:	f7ff bd00 	b.w	8008638 <__malloc_unlock>
 8008c38:	42a3      	cmp	r3, r4
 8008c3a:	d908      	bls.n	8008c4e <_free_r+0x42>
 8008c3c:	6820      	ldr	r0, [r4, #0]
 8008c3e:	1821      	adds	r1, r4, r0
 8008c40:	428b      	cmp	r3, r1
 8008c42:	bf01      	itttt	eq
 8008c44:	6819      	ldreq	r1, [r3, #0]
 8008c46:	685b      	ldreq	r3, [r3, #4]
 8008c48:	1809      	addeq	r1, r1, r0
 8008c4a:	6021      	streq	r1, [r4, #0]
 8008c4c:	e7ed      	b.n	8008c2a <_free_r+0x1e>
 8008c4e:	461a      	mov	r2, r3
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	b10b      	cbz	r3, 8008c58 <_free_r+0x4c>
 8008c54:	42a3      	cmp	r3, r4
 8008c56:	d9fa      	bls.n	8008c4e <_free_r+0x42>
 8008c58:	6811      	ldr	r1, [r2, #0]
 8008c5a:	1850      	adds	r0, r2, r1
 8008c5c:	42a0      	cmp	r0, r4
 8008c5e:	d10b      	bne.n	8008c78 <_free_r+0x6c>
 8008c60:	6820      	ldr	r0, [r4, #0]
 8008c62:	4401      	add	r1, r0
 8008c64:	1850      	adds	r0, r2, r1
 8008c66:	4283      	cmp	r3, r0
 8008c68:	6011      	str	r1, [r2, #0]
 8008c6a:	d1e0      	bne.n	8008c2e <_free_r+0x22>
 8008c6c:	6818      	ldr	r0, [r3, #0]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	6053      	str	r3, [r2, #4]
 8008c72:	4408      	add	r0, r1
 8008c74:	6010      	str	r0, [r2, #0]
 8008c76:	e7da      	b.n	8008c2e <_free_r+0x22>
 8008c78:	d902      	bls.n	8008c80 <_free_r+0x74>
 8008c7a:	230c      	movs	r3, #12
 8008c7c:	602b      	str	r3, [r5, #0]
 8008c7e:	e7d6      	b.n	8008c2e <_free_r+0x22>
 8008c80:	6820      	ldr	r0, [r4, #0]
 8008c82:	1821      	adds	r1, r4, r0
 8008c84:	428b      	cmp	r3, r1
 8008c86:	bf04      	itt	eq
 8008c88:	6819      	ldreq	r1, [r3, #0]
 8008c8a:	685b      	ldreq	r3, [r3, #4]
 8008c8c:	6063      	str	r3, [r4, #4]
 8008c8e:	bf04      	itt	eq
 8008c90:	1809      	addeq	r1, r1, r0
 8008c92:	6021      	streq	r1, [r4, #0]
 8008c94:	6054      	str	r4, [r2, #4]
 8008c96:	e7ca      	b.n	8008c2e <_free_r+0x22>
 8008c98:	bd38      	pop	{r3, r4, r5, pc}
 8008c9a:	bf00      	nop
 8008c9c:	20000374 	.word	0x20000374

08008ca0 <__ssputs_r>:
 8008ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ca4:	688e      	ldr	r6, [r1, #8]
 8008ca6:	461f      	mov	r7, r3
 8008ca8:	42be      	cmp	r6, r7
 8008caa:	680b      	ldr	r3, [r1, #0]
 8008cac:	4682      	mov	sl, r0
 8008cae:	460c      	mov	r4, r1
 8008cb0:	4690      	mov	r8, r2
 8008cb2:	d82d      	bhi.n	8008d10 <__ssputs_r+0x70>
 8008cb4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008cb8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008cbc:	d026      	beq.n	8008d0c <__ssputs_r+0x6c>
 8008cbe:	6965      	ldr	r5, [r4, #20]
 8008cc0:	6909      	ldr	r1, [r1, #16]
 8008cc2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008cc6:	eba3 0901 	sub.w	r9, r3, r1
 8008cca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008cce:	1c7b      	adds	r3, r7, #1
 8008cd0:	444b      	add	r3, r9
 8008cd2:	106d      	asrs	r5, r5, #1
 8008cd4:	429d      	cmp	r5, r3
 8008cd6:	bf38      	it	cc
 8008cd8:	461d      	movcc	r5, r3
 8008cda:	0553      	lsls	r3, r2, #21
 8008cdc:	d527      	bpl.n	8008d2e <__ssputs_r+0x8e>
 8008cde:	4629      	mov	r1, r5
 8008ce0:	f7ff fc24 	bl	800852c <_malloc_r>
 8008ce4:	4606      	mov	r6, r0
 8008ce6:	b360      	cbz	r0, 8008d42 <__ssputs_r+0xa2>
 8008ce8:	6921      	ldr	r1, [r4, #16]
 8008cea:	464a      	mov	r2, r9
 8008cec:	f000 ff96 	bl	8009c1c <memcpy>
 8008cf0:	89a3      	ldrh	r3, [r4, #12]
 8008cf2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008cf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cfa:	81a3      	strh	r3, [r4, #12]
 8008cfc:	6126      	str	r6, [r4, #16]
 8008cfe:	6165      	str	r5, [r4, #20]
 8008d00:	444e      	add	r6, r9
 8008d02:	eba5 0509 	sub.w	r5, r5, r9
 8008d06:	6026      	str	r6, [r4, #0]
 8008d08:	60a5      	str	r5, [r4, #8]
 8008d0a:	463e      	mov	r6, r7
 8008d0c:	42be      	cmp	r6, r7
 8008d0e:	d900      	bls.n	8008d12 <__ssputs_r+0x72>
 8008d10:	463e      	mov	r6, r7
 8008d12:	6820      	ldr	r0, [r4, #0]
 8008d14:	4632      	mov	r2, r6
 8008d16:	4641      	mov	r1, r8
 8008d18:	f000 ff43 	bl	8009ba2 <memmove>
 8008d1c:	68a3      	ldr	r3, [r4, #8]
 8008d1e:	1b9b      	subs	r3, r3, r6
 8008d20:	60a3      	str	r3, [r4, #8]
 8008d22:	6823      	ldr	r3, [r4, #0]
 8008d24:	4433      	add	r3, r6
 8008d26:	6023      	str	r3, [r4, #0]
 8008d28:	2000      	movs	r0, #0
 8008d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d2e:	462a      	mov	r2, r5
 8008d30:	f000 ff82 	bl	8009c38 <_realloc_r>
 8008d34:	4606      	mov	r6, r0
 8008d36:	2800      	cmp	r0, #0
 8008d38:	d1e0      	bne.n	8008cfc <__ssputs_r+0x5c>
 8008d3a:	6921      	ldr	r1, [r4, #16]
 8008d3c:	4650      	mov	r0, sl
 8008d3e:	f7ff ff65 	bl	8008c0c <_free_r>
 8008d42:	230c      	movs	r3, #12
 8008d44:	f8ca 3000 	str.w	r3, [sl]
 8008d48:	89a3      	ldrh	r3, [r4, #12]
 8008d4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d4e:	81a3      	strh	r3, [r4, #12]
 8008d50:	f04f 30ff 	mov.w	r0, #4294967295
 8008d54:	e7e9      	b.n	8008d2a <__ssputs_r+0x8a>
	...

08008d58 <_svfiprintf_r>:
 8008d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d5c:	4698      	mov	r8, r3
 8008d5e:	898b      	ldrh	r3, [r1, #12]
 8008d60:	061b      	lsls	r3, r3, #24
 8008d62:	b09d      	sub	sp, #116	@ 0x74
 8008d64:	4607      	mov	r7, r0
 8008d66:	460d      	mov	r5, r1
 8008d68:	4614      	mov	r4, r2
 8008d6a:	d510      	bpl.n	8008d8e <_svfiprintf_r+0x36>
 8008d6c:	690b      	ldr	r3, [r1, #16]
 8008d6e:	b973      	cbnz	r3, 8008d8e <_svfiprintf_r+0x36>
 8008d70:	2140      	movs	r1, #64	@ 0x40
 8008d72:	f7ff fbdb 	bl	800852c <_malloc_r>
 8008d76:	6028      	str	r0, [r5, #0]
 8008d78:	6128      	str	r0, [r5, #16]
 8008d7a:	b930      	cbnz	r0, 8008d8a <_svfiprintf_r+0x32>
 8008d7c:	230c      	movs	r3, #12
 8008d7e:	603b      	str	r3, [r7, #0]
 8008d80:	f04f 30ff 	mov.w	r0, #4294967295
 8008d84:	b01d      	add	sp, #116	@ 0x74
 8008d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d8a:	2340      	movs	r3, #64	@ 0x40
 8008d8c:	616b      	str	r3, [r5, #20]
 8008d8e:	2300      	movs	r3, #0
 8008d90:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d92:	2320      	movs	r3, #32
 8008d94:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008d98:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d9c:	2330      	movs	r3, #48	@ 0x30
 8008d9e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008f3c <_svfiprintf_r+0x1e4>
 8008da2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008da6:	f04f 0901 	mov.w	r9, #1
 8008daa:	4623      	mov	r3, r4
 8008dac:	469a      	mov	sl, r3
 8008dae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008db2:	b10a      	cbz	r2, 8008db8 <_svfiprintf_r+0x60>
 8008db4:	2a25      	cmp	r2, #37	@ 0x25
 8008db6:	d1f9      	bne.n	8008dac <_svfiprintf_r+0x54>
 8008db8:	ebba 0b04 	subs.w	fp, sl, r4
 8008dbc:	d00b      	beq.n	8008dd6 <_svfiprintf_r+0x7e>
 8008dbe:	465b      	mov	r3, fp
 8008dc0:	4622      	mov	r2, r4
 8008dc2:	4629      	mov	r1, r5
 8008dc4:	4638      	mov	r0, r7
 8008dc6:	f7ff ff6b 	bl	8008ca0 <__ssputs_r>
 8008dca:	3001      	adds	r0, #1
 8008dcc:	f000 80a7 	beq.w	8008f1e <_svfiprintf_r+0x1c6>
 8008dd0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008dd2:	445a      	add	r2, fp
 8008dd4:	9209      	str	r2, [sp, #36]	@ 0x24
 8008dd6:	f89a 3000 	ldrb.w	r3, [sl]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	f000 809f 	beq.w	8008f1e <_svfiprintf_r+0x1c6>
 8008de0:	2300      	movs	r3, #0
 8008de2:	f04f 32ff 	mov.w	r2, #4294967295
 8008de6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008dea:	f10a 0a01 	add.w	sl, sl, #1
 8008dee:	9304      	str	r3, [sp, #16]
 8008df0:	9307      	str	r3, [sp, #28]
 8008df2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008df6:	931a      	str	r3, [sp, #104]	@ 0x68
 8008df8:	4654      	mov	r4, sl
 8008dfa:	2205      	movs	r2, #5
 8008dfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e00:	484e      	ldr	r0, [pc, #312]	@ (8008f3c <_svfiprintf_r+0x1e4>)
 8008e02:	f7f7 fa25 	bl	8000250 <memchr>
 8008e06:	9a04      	ldr	r2, [sp, #16]
 8008e08:	b9d8      	cbnz	r0, 8008e42 <_svfiprintf_r+0xea>
 8008e0a:	06d0      	lsls	r0, r2, #27
 8008e0c:	bf44      	itt	mi
 8008e0e:	2320      	movmi	r3, #32
 8008e10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e14:	0711      	lsls	r1, r2, #28
 8008e16:	bf44      	itt	mi
 8008e18:	232b      	movmi	r3, #43	@ 0x2b
 8008e1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e1e:	f89a 3000 	ldrb.w	r3, [sl]
 8008e22:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e24:	d015      	beq.n	8008e52 <_svfiprintf_r+0xfa>
 8008e26:	9a07      	ldr	r2, [sp, #28]
 8008e28:	4654      	mov	r4, sl
 8008e2a:	2000      	movs	r0, #0
 8008e2c:	f04f 0c0a 	mov.w	ip, #10
 8008e30:	4621      	mov	r1, r4
 8008e32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e36:	3b30      	subs	r3, #48	@ 0x30
 8008e38:	2b09      	cmp	r3, #9
 8008e3a:	d94b      	bls.n	8008ed4 <_svfiprintf_r+0x17c>
 8008e3c:	b1b0      	cbz	r0, 8008e6c <_svfiprintf_r+0x114>
 8008e3e:	9207      	str	r2, [sp, #28]
 8008e40:	e014      	b.n	8008e6c <_svfiprintf_r+0x114>
 8008e42:	eba0 0308 	sub.w	r3, r0, r8
 8008e46:	fa09 f303 	lsl.w	r3, r9, r3
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	9304      	str	r3, [sp, #16]
 8008e4e:	46a2      	mov	sl, r4
 8008e50:	e7d2      	b.n	8008df8 <_svfiprintf_r+0xa0>
 8008e52:	9b03      	ldr	r3, [sp, #12]
 8008e54:	1d19      	adds	r1, r3, #4
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	9103      	str	r1, [sp, #12]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	bfbb      	ittet	lt
 8008e5e:	425b      	neglt	r3, r3
 8008e60:	f042 0202 	orrlt.w	r2, r2, #2
 8008e64:	9307      	strge	r3, [sp, #28]
 8008e66:	9307      	strlt	r3, [sp, #28]
 8008e68:	bfb8      	it	lt
 8008e6a:	9204      	strlt	r2, [sp, #16]
 8008e6c:	7823      	ldrb	r3, [r4, #0]
 8008e6e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e70:	d10a      	bne.n	8008e88 <_svfiprintf_r+0x130>
 8008e72:	7863      	ldrb	r3, [r4, #1]
 8008e74:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e76:	d132      	bne.n	8008ede <_svfiprintf_r+0x186>
 8008e78:	9b03      	ldr	r3, [sp, #12]
 8008e7a:	1d1a      	adds	r2, r3, #4
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	9203      	str	r2, [sp, #12]
 8008e80:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008e84:	3402      	adds	r4, #2
 8008e86:	9305      	str	r3, [sp, #20]
 8008e88:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008f4c <_svfiprintf_r+0x1f4>
 8008e8c:	7821      	ldrb	r1, [r4, #0]
 8008e8e:	2203      	movs	r2, #3
 8008e90:	4650      	mov	r0, sl
 8008e92:	f7f7 f9dd 	bl	8000250 <memchr>
 8008e96:	b138      	cbz	r0, 8008ea8 <_svfiprintf_r+0x150>
 8008e98:	9b04      	ldr	r3, [sp, #16]
 8008e9a:	eba0 000a 	sub.w	r0, r0, sl
 8008e9e:	2240      	movs	r2, #64	@ 0x40
 8008ea0:	4082      	lsls	r2, r0
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	3401      	adds	r4, #1
 8008ea6:	9304      	str	r3, [sp, #16]
 8008ea8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008eac:	4824      	ldr	r0, [pc, #144]	@ (8008f40 <_svfiprintf_r+0x1e8>)
 8008eae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008eb2:	2206      	movs	r2, #6
 8008eb4:	f7f7 f9cc 	bl	8000250 <memchr>
 8008eb8:	2800      	cmp	r0, #0
 8008eba:	d036      	beq.n	8008f2a <_svfiprintf_r+0x1d2>
 8008ebc:	4b21      	ldr	r3, [pc, #132]	@ (8008f44 <_svfiprintf_r+0x1ec>)
 8008ebe:	bb1b      	cbnz	r3, 8008f08 <_svfiprintf_r+0x1b0>
 8008ec0:	9b03      	ldr	r3, [sp, #12]
 8008ec2:	3307      	adds	r3, #7
 8008ec4:	f023 0307 	bic.w	r3, r3, #7
 8008ec8:	3308      	adds	r3, #8
 8008eca:	9303      	str	r3, [sp, #12]
 8008ecc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ece:	4433      	add	r3, r6
 8008ed0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ed2:	e76a      	b.n	8008daa <_svfiprintf_r+0x52>
 8008ed4:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ed8:	460c      	mov	r4, r1
 8008eda:	2001      	movs	r0, #1
 8008edc:	e7a8      	b.n	8008e30 <_svfiprintf_r+0xd8>
 8008ede:	2300      	movs	r3, #0
 8008ee0:	3401      	adds	r4, #1
 8008ee2:	9305      	str	r3, [sp, #20]
 8008ee4:	4619      	mov	r1, r3
 8008ee6:	f04f 0c0a 	mov.w	ip, #10
 8008eea:	4620      	mov	r0, r4
 8008eec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ef0:	3a30      	subs	r2, #48	@ 0x30
 8008ef2:	2a09      	cmp	r2, #9
 8008ef4:	d903      	bls.n	8008efe <_svfiprintf_r+0x1a6>
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d0c6      	beq.n	8008e88 <_svfiprintf_r+0x130>
 8008efa:	9105      	str	r1, [sp, #20]
 8008efc:	e7c4      	b.n	8008e88 <_svfiprintf_r+0x130>
 8008efe:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f02:	4604      	mov	r4, r0
 8008f04:	2301      	movs	r3, #1
 8008f06:	e7f0      	b.n	8008eea <_svfiprintf_r+0x192>
 8008f08:	ab03      	add	r3, sp, #12
 8008f0a:	9300      	str	r3, [sp, #0]
 8008f0c:	462a      	mov	r2, r5
 8008f0e:	4b0e      	ldr	r3, [pc, #56]	@ (8008f48 <_svfiprintf_r+0x1f0>)
 8008f10:	a904      	add	r1, sp, #16
 8008f12:	4638      	mov	r0, r7
 8008f14:	f3af 8000 	nop.w
 8008f18:	1c42      	adds	r2, r0, #1
 8008f1a:	4606      	mov	r6, r0
 8008f1c:	d1d6      	bne.n	8008ecc <_svfiprintf_r+0x174>
 8008f1e:	89ab      	ldrh	r3, [r5, #12]
 8008f20:	065b      	lsls	r3, r3, #25
 8008f22:	f53f af2d 	bmi.w	8008d80 <_svfiprintf_r+0x28>
 8008f26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f28:	e72c      	b.n	8008d84 <_svfiprintf_r+0x2c>
 8008f2a:	ab03      	add	r3, sp, #12
 8008f2c:	9300      	str	r3, [sp, #0]
 8008f2e:	462a      	mov	r2, r5
 8008f30:	4b05      	ldr	r3, [pc, #20]	@ (8008f48 <_svfiprintf_r+0x1f0>)
 8008f32:	a904      	add	r1, sp, #16
 8008f34:	4638      	mov	r0, r7
 8008f36:	f000 fa45 	bl	80093c4 <_printf_i>
 8008f3a:	e7ed      	b.n	8008f18 <_svfiprintf_r+0x1c0>
 8008f3c:	0800a0d0 	.word	0x0800a0d0
 8008f40:	0800a0da 	.word	0x0800a0da
 8008f44:	00000000 	.word	0x00000000
 8008f48:	08008ca1 	.word	0x08008ca1
 8008f4c:	0800a0d6 	.word	0x0800a0d6

08008f50 <_sungetc_r>:
 8008f50:	b538      	push	{r3, r4, r5, lr}
 8008f52:	1c4b      	adds	r3, r1, #1
 8008f54:	4614      	mov	r4, r2
 8008f56:	d103      	bne.n	8008f60 <_sungetc_r+0x10>
 8008f58:	f04f 35ff 	mov.w	r5, #4294967295
 8008f5c:	4628      	mov	r0, r5
 8008f5e:	bd38      	pop	{r3, r4, r5, pc}
 8008f60:	8993      	ldrh	r3, [r2, #12]
 8008f62:	f023 0320 	bic.w	r3, r3, #32
 8008f66:	8193      	strh	r3, [r2, #12]
 8008f68:	6853      	ldr	r3, [r2, #4]
 8008f6a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008f6c:	b2cd      	uxtb	r5, r1
 8008f6e:	b18a      	cbz	r2, 8008f94 <_sungetc_r+0x44>
 8008f70:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8008f72:	429a      	cmp	r2, r3
 8008f74:	dd08      	ble.n	8008f88 <_sungetc_r+0x38>
 8008f76:	6823      	ldr	r3, [r4, #0]
 8008f78:	1e5a      	subs	r2, r3, #1
 8008f7a:	6022      	str	r2, [r4, #0]
 8008f7c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008f80:	6863      	ldr	r3, [r4, #4]
 8008f82:	3301      	adds	r3, #1
 8008f84:	6063      	str	r3, [r4, #4]
 8008f86:	e7e9      	b.n	8008f5c <_sungetc_r+0xc>
 8008f88:	4621      	mov	r1, r4
 8008f8a:	f000 fdd0 	bl	8009b2e <__submore>
 8008f8e:	2800      	cmp	r0, #0
 8008f90:	d0f1      	beq.n	8008f76 <_sungetc_r+0x26>
 8008f92:	e7e1      	b.n	8008f58 <_sungetc_r+0x8>
 8008f94:	6921      	ldr	r1, [r4, #16]
 8008f96:	6822      	ldr	r2, [r4, #0]
 8008f98:	b141      	cbz	r1, 8008fac <_sungetc_r+0x5c>
 8008f9a:	4291      	cmp	r1, r2
 8008f9c:	d206      	bcs.n	8008fac <_sungetc_r+0x5c>
 8008f9e:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8008fa2:	42a9      	cmp	r1, r5
 8008fa4:	d102      	bne.n	8008fac <_sungetc_r+0x5c>
 8008fa6:	3a01      	subs	r2, #1
 8008fa8:	6022      	str	r2, [r4, #0]
 8008faa:	e7ea      	b.n	8008f82 <_sungetc_r+0x32>
 8008fac:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8008fb0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008fb4:	6363      	str	r3, [r4, #52]	@ 0x34
 8008fb6:	2303      	movs	r3, #3
 8008fb8:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008fba:	4623      	mov	r3, r4
 8008fbc:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008fc0:	6023      	str	r3, [r4, #0]
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	e7de      	b.n	8008f84 <_sungetc_r+0x34>

08008fc6 <__ssrefill_r>:
 8008fc6:	b510      	push	{r4, lr}
 8008fc8:	460c      	mov	r4, r1
 8008fca:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8008fcc:	b169      	cbz	r1, 8008fea <__ssrefill_r+0x24>
 8008fce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008fd2:	4299      	cmp	r1, r3
 8008fd4:	d001      	beq.n	8008fda <__ssrefill_r+0x14>
 8008fd6:	f7ff fe19 	bl	8008c0c <_free_r>
 8008fda:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008fdc:	6063      	str	r3, [r4, #4]
 8008fde:	2000      	movs	r0, #0
 8008fe0:	6360      	str	r0, [r4, #52]	@ 0x34
 8008fe2:	b113      	cbz	r3, 8008fea <__ssrefill_r+0x24>
 8008fe4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008fe6:	6023      	str	r3, [r4, #0]
 8008fe8:	bd10      	pop	{r4, pc}
 8008fea:	6923      	ldr	r3, [r4, #16]
 8008fec:	6023      	str	r3, [r4, #0]
 8008fee:	2300      	movs	r3, #0
 8008ff0:	6063      	str	r3, [r4, #4]
 8008ff2:	89a3      	ldrh	r3, [r4, #12]
 8008ff4:	f043 0320 	orr.w	r3, r3, #32
 8008ff8:	81a3      	strh	r3, [r4, #12]
 8008ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8008ffe:	e7f3      	b.n	8008fe8 <__ssrefill_r+0x22>

08009000 <__ssvfiscanf_r>:
 8009000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009004:	460c      	mov	r4, r1
 8009006:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800900a:	2100      	movs	r1, #0
 800900c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8009010:	49a5      	ldr	r1, [pc, #660]	@ (80092a8 <__ssvfiscanf_r+0x2a8>)
 8009012:	91a0      	str	r1, [sp, #640]	@ 0x280
 8009014:	f10d 0804 	add.w	r8, sp, #4
 8009018:	49a4      	ldr	r1, [pc, #656]	@ (80092ac <__ssvfiscanf_r+0x2ac>)
 800901a:	4fa5      	ldr	r7, [pc, #660]	@ (80092b0 <__ssvfiscanf_r+0x2b0>)
 800901c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8009020:	4606      	mov	r6, r0
 8009022:	91a1      	str	r1, [sp, #644]	@ 0x284
 8009024:	9300      	str	r3, [sp, #0]
 8009026:	7813      	ldrb	r3, [r2, #0]
 8009028:	2b00      	cmp	r3, #0
 800902a:	f000 8158 	beq.w	80092de <__ssvfiscanf_r+0x2de>
 800902e:	5cf9      	ldrb	r1, [r7, r3]
 8009030:	f011 0108 	ands.w	r1, r1, #8
 8009034:	f102 0501 	add.w	r5, r2, #1
 8009038:	d019      	beq.n	800906e <__ssvfiscanf_r+0x6e>
 800903a:	6863      	ldr	r3, [r4, #4]
 800903c:	2b00      	cmp	r3, #0
 800903e:	dd0f      	ble.n	8009060 <__ssvfiscanf_r+0x60>
 8009040:	6823      	ldr	r3, [r4, #0]
 8009042:	781a      	ldrb	r2, [r3, #0]
 8009044:	5cba      	ldrb	r2, [r7, r2]
 8009046:	0712      	lsls	r2, r2, #28
 8009048:	d401      	bmi.n	800904e <__ssvfiscanf_r+0x4e>
 800904a:	462a      	mov	r2, r5
 800904c:	e7eb      	b.n	8009026 <__ssvfiscanf_r+0x26>
 800904e:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009050:	3201      	adds	r2, #1
 8009052:	9245      	str	r2, [sp, #276]	@ 0x114
 8009054:	6862      	ldr	r2, [r4, #4]
 8009056:	3301      	adds	r3, #1
 8009058:	3a01      	subs	r2, #1
 800905a:	6062      	str	r2, [r4, #4]
 800905c:	6023      	str	r3, [r4, #0]
 800905e:	e7ec      	b.n	800903a <__ssvfiscanf_r+0x3a>
 8009060:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009062:	4621      	mov	r1, r4
 8009064:	4630      	mov	r0, r6
 8009066:	4798      	blx	r3
 8009068:	2800      	cmp	r0, #0
 800906a:	d0e9      	beq.n	8009040 <__ssvfiscanf_r+0x40>
 800906c:	e7ed      	b.n	800904a <__ssvfiscanf_r+0x4a>
 800906e:	2b25      	cmp	r3, #37	@ 0x25
 8009070:	d012      	beq.n	8009098 <__ssvfiscanf_r+0x98>
 8009072:	4699      	mov	r9, r3
 8009074:	6863      	ldr	r3, [r4, #4]
 8009076:	2b00      	cmp	r3, #0
 8009078:	f340 8093 	ble.w	80091a2 <__ssvfiscanf_r+0x1a2>
 800907c:	6822      	ldr	r2, [r4, #0]
 800907e:	7813      	ldrb	r3, [r2, #0]
 8009080:	454b      	cmp	r3, r9
 8009082:	f040 812c 	bne.w	80092de <__ssvfiscanf_r+0x2de>
 8009086:	6863      	ldr	r3, [r4, #4]
 8009088:	3b01      	subs	r3, #1
 800908a:	6063      	str	r3, [r4, #4]
 800908c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800908e:	3201      	adds	r2, #1
 8009090:	3301      	adds	r3, #1
 8009092:	6022      	str	r2, [r4, #0]
 8009094:	9345      	str	r3, [sp, #276]	@ 0x114
 8009096:	e7d8      	b.n	800904a <__ssvfiscanf_r+0x4a>
 8009098:	9141      	str	r1, [sp, #260]	@ 0x104
 800909a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800909c:	7853      	ldrb	r3, [r2, #1]
 800909e:	2b2a      	cmp	r3, #42	@ 0x2a
 80090a0:	bf02      	ittt	eq
 80090a2:	2310      	moveq	r3, #16
 80090a4:	1c95      	addeq	r5, r2, #2
 80090a6:	9341      	streq	r3, [sp, #260]	@ 0x104
 80090a8:	220a      	movs	r2, #10
 80090aa:	46a9      	mov	r9, r5
 80090ac:	f819 1b01 	ldrb.w	r1, [r9], #1
 80090b0:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80090b4:	2b09      	cmp	r3, #9
 80090b6:	d91e      	bls.n	80090f6 <__ssvfiscanf_r+0xf6>
 80090b8:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 80092b4 <__ssvfiscanf_r+0x2b4>
 80090bc:	2203      	movs	r2, #3
 80090be:	4650      	mov	r0, sl
 80090c0:	f7f7 f8c6 	bl	8000250 <memchr>
 80090c4:	b138      	cbz	r0, 80090d6 <__ssvfiscanf_r+0xd6>
 80090c6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80090c8:	eba0 000a 	sub.w	r0, r0, sl
 80090cc:	2301      	movs	r3, #1
 80090ce:	4083      	lsls	r3, r0
 80090d0:	4313      	orrs	r3, r2
 80090d2:	9341      	str	r3, [sp, #260]	@ 0x104
 80090d4:	464d      	mov	r5, r9
 80090d6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80090da:	2b78      	cmp	r3, #120	@ 0x78
 80090dc:	d806      	bhi.n	80090ec <__ssvfiscanf_r+0xec>
 80090de:	2b57      	cmp	r3, #87	@ 0x57
 80090e0:	d810      	bhi.n	8009104 <__ssvfiscanf_r+0x104>
 80090e2:	2b25      	cmp	r3, #37	@ 0x25
 80090e4:	d0c5      	beq.n	8009072 <__ssvfiscanf_r+0x72>
 80090e6:	d857      	bhi.n	8009198 <__ssvfiscanf_r+0x198>
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d065      	beq.n	80091b8 <__ssvfiscanf_r+0x1b8>
 80090ec:	2303      	movs	r3, #3
 80090ee:	9347      	str	r3, [sp, #284]	@ 0x11c
 80090f0:	230a      	movs	r3, #10
 80090f2:	9342      	str	r3, [sp, #264]	@ 0x108
 80090f4:	e078      	b.n	80091e8 <__ssvfiscanf_r+0x1e8>
 80090f6:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80090f8:	fb02 1103 	mla	r1, r2, r3, r1
 80090fc:	3930      	subs	r1, #48	@ 0x30
 80090fe:	9143      	str	r1, [sp, #268]	@ 0x10c
 8009100:	464d      	mov	r5, r9
 8009102:	e7d2      	b.n	80090aa <__ssvfiscanf_r+0xaa>
 8009104:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8009108:	2a20      	cmp	r2, #32
 800910a:	d8ef      	bhi.n	80090ec <__ssvfiscanf_r+0xec>
 800910c:	a101      	add	r1, pc, #4	@ (adr r1, 8009114 <__ssvfiscanf_r+0x114>)
 800910e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009112:	bf00      	nop
 8009114:	080091c7 	.word	0x080091c7
 8009118:	080090ed 	.word	0x080090ed
 800911c:	080090ed 	.word	0x080090ed
 8009120:	08009221 	.word	0x08009221
 8009124:	080090ed 	.word	0x080090ed
 8009128:	080090ed 	.word	0x080090ed
 800912c:	080090ed 	.word	0x080090ed
 8009130:	080090ed 	.word	0x080090ed
 8009134:	080090ed 	.word	0x080090ed
 8009138:	080090ed 	.word	0x080090ed
 800913c:	080090ed 	.word	0x080090ed
 8009140:	08009237 	.word	0x08009237
 8009144:	0800921d 	.word	0x0800921d
 8009148:	0800919f 	.word	0x0800919f
 800914c:	0800919f 	.word	0x0800919f
 8009150:	0800919f 	.word	0x0800919f
 8009154:	080090ed 	.word	0x080090ed
 8009158:	080091d9 	.word	0x080091d9
 800915c:	080090ed 	.word	0x080090ed
 8009160:	080090ed 	.word	0x080090ed
 8009164:	080090ed 	.word	0x080090ed
 8009168:	080090ed 	.word	0x080090ed
 800916c:	08009247 	.word	0x08009247
 8009170:	080091e1 	.word	0x080091e1
 8009174:	080091bf 	.word	0x080091bf
 8009178:	080090ed 	.word	0x080090ed
 800917c:	080090ed 	.word	0x080090ed
 8009180:	08009243 	.word	0x08009243
 8009184:	080090ed 	.word	0x080090ed
 8009188:	0800921d 	.word	0x0800921d
 800918c:	080090ed 	.word	0x080090ed
 8009190:	080090ed 	.word	0x080090ed
 8009194:	080091c7 	.word	0x080091c7
 8009198:	3b45      	subs	r3, #69	@ 0x45
 800919a:	2b02      	cmp	r3, #2
 800919c:	d8a6      	bhi.n	80090ec <__ssvfiscanf_r+0xec>
 800919e:	2305      	movs	r3, #5
 80091a0:	e021      	b.n	80091e6 <__ssvfiscanf_r+0x1e6>
 80091a2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80091a4:	4621      	mov	r1, r4
 80091a6:	4630      	mov	r0, r6
 80091a8:	4798      	blx	r3
 80091aa:	2800      	cmp	r0, #0
 80091ac:	f43f af66 	beq.w	800907c <__ssvfiscanf_r+0x7c>
 80091b0:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80091b2:	2800      	cmp	r0, #0
 80091b4:	f040 808b 	bne.w	80092ce <__ssvfiscanf_r+0x2ce>
 80091b8:	f04f 30ff 	mov.w	r0, #4294967295
 80091bc:	e08b      	b.n	80092d6 <__ssvfiscanf_r+0x2d6>
 80091be:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80091c0:	f042 0220 	orr.w	r2, r2, #32
 80091c4:	9241      	str	r2, [sp, #260]	@ 0x104
 80091c6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80091c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80091cc:	9241      	str	r2, [sp, #260]	@ 0x104
 80091ce:	2210      	movs	r2, #16
 80091d0:	2b6e      	cmp	r3, #110	@ 0x6e
 80091d2:	9242      	str	r2, [sp, #264]	@ 0x108
 80091d4:	d902      	bls.n	80091dc <__ssvfiscanf_r+0x1dc>
 80091d6:	e005      	b.n	80091e4 <__ssvfiscanf_r+0x1e4>
 80091d8:	2300      	movs	r3, #0
 80091da:	9342      	str	r3, [sp, #264]	@ 0x108
 80091dc:	2303      	movs	r3, #3
 80091de:	e002      	b.n	80091e6 <__ssvfiscanf_r+0x1e6>
 80091e0:	2308      	movs	r3, #8
 80091e2:	9342      	str	r3, [sp, #264]	@ 0x108
 80091e4:	2304      	movs	r3, #4
 80091e6:	9347      	str	r3, [sp, #284]	@ 0x11c
 80091e8:	6863      	ldr	r3, [r4, #4]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	dd39      	ble.n	8009262 <__ssvfiscanf_r+0x262>
 80091ee:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80091f0:	0659      	lsls	r1, r3, #25
 80091f2:	d404      	bmi.n	80091fe <__ssvfiscanf_r+0x1fe>
 80091f4:	6823      	ldr	r3, [r4, #0]
 80091f6:	781a      	ldrb	r2, [r3, #0]
 80091f8:	5cba      	ldrb	r2, [r7, r2]
 80091fa:	0712      	lsls	r2, r2, #28
 80091fc:	d438      	bmi.n	8009270 <__ssvfiscanf_r+0x270>
 80091fe:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8009200:	2b02      	cmp	r3, #2
 8009202:	dc47      	bgt.n	8009294 <__ssvfiscanf_r+0x294>
 8009204:	466b      	mov	r3, sp
 8009206:	4622      	mov	r2, r4
 8009208:	a941      	add	r1, sp, #260	@ 0x104
 800920a:	4630      	mov	r0, r6
 800920c:	f000 f9fa 	bl	8009604 <_scanf_chars>
 8009210:	2801      	cmp	r0, #1
 8009212:	d064      	beq.n	80092de <__ssvfiscanf_r+0x2de>
 8009214:	2802      	cmp	r0, #2
 8009216:	f47f af18 	bne.w	800904a <__ssvfiscanf_r+0x4a>
 800921a:	e7c9      	b.n	80091b0 <__ssvfiscanf_r+0x1b0>
 800921c:	220a      	movs	r2, #10
 800921e:	e7d7      	b.n	80091d0 <__ssvfiscanf_r+0x1d0>
 8009220:	4629      	mov	r1, r5
 8009222:	4640      	mov	r0, r8
 8009224:	f000 fc4a 	bl	8009abc <__sccl>
 8009228:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800922a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800922e:	9341      	str	r3, [sp, #260]	@ 0x104
 8009230:	4605      	mov	r5, r0
 8009232:	2301      	movs	r3, #1
 8009234:	e7d7      	b.n	80091e6 <__ssvfiscanf_r+0x1e6>
 8009236:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009238:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800923c:	9341      	str	r3, [sp, #260]	@ 0x104
 800923e:	2300      	movs	r3, #0
 8009240:	e7d1      	b.n	80091e6 <__ssvfiscanf_r+0x1e6>
 8009242:	2302      	movs	r3, #2
 8009244:	e7cf      	b.n	80091e6 <__ssvfiscanf_r+0x1e6>
 8009246:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8009248:	06c3      	lsls	r3, r0, #27
 800924a:	f53f aefe 	bmi.w	800904a <__ssvfiscanf_r+0x4a>
 800924e:	9b00      	ldr	r3, [sp, #0]
 8009250:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009252:	1d19      	adds	r1, r3, #4
 8009254:	9100      	str	r1, [sp, #0]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	07c0      	lsls	r0, r0, #31
 800925a:	bf4c      	ite	mi
 800925c:	801a      	strhmi	r2, [r3, #0]
 800925e:	601a      	strpl	r2, [r3, #0]
 8009260:	e6f3      	b.n	800904a <__ssvfiscanf_r+0x4a>
 8009262:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009264:	4621      	mov	r1, r4
 8009266:	4630      	mov	r0, r6
 8009268:	4798      	blx	r3
 800926a:	2800      	cmp	r0, #0
 800926c:	d0bf      	beq.n	80091ee <__ssvfiscanf_r+0x1ee>
 800926e:	e79f      	b.n	80091b0 <__ssvfiscanf_r+0x1b0>
 8009270:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009272:	3201      	adds	r2, #1
 8009274:	9245      	str	r2, [sp, #276]	@ 0x114
 8009276:	6862      	ldr	r2, [r4, #4]
 8009278:	3a01      	subs	r2, #1
 800927a:	2a00      	cmp	r2, #0
 800927c:	6062      	str	r2, [r4, #4]
 800927e:	dd02      	ble.n	8009286 <__ssvfiscanf_r+0x286>
 8009280:	3301      	adds	r3, #1
 8009282:	6023      	str	r3, [r4, #0]
 8009284:	e7b6      	b.n	80091f4 <__ssvfiscanf_r+0x1f4>
 8009286:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009288:	4621      	mov	r1, r4
 800928a:	4630      	mov	r0, r6
 800928c:	4798      	blx	r3
 800928e:	2800      	cmp	r0, #0
 8009290:	d0b0      	beq.n	80091f4 <__ssvfiscanf_r+0x1f4>
 8009292:	e78d      	b.n	80091b0 <__ssvfiscanf_r+0x1b0>
 8009294:	2b04      	cmp	r3, #4
 8009296:	dc0f      	bgt.n	80092b8 <__ssvfiscanf_r+0x2b8>
 8009298:	466b      	mov	r3, sp
 800929a:	4622      	mov	r2, r4
 800929c:	a941      	add	r1, sp, #260	@ 0x104
 800929e:	4630      	mov	r0, r6
 80092a0:	f000 fa0a 	bl	80096b8 <_scanf_i>
 80092a4:	e7b4      	b.n	8009210 <__ssvfiscanf_r+0x210>
 80092a6:	bf00      	nop
 80092a8:	08008f51 	.word	0x08008f51
 80092ac:	08008fc7 	.word	0x08008fc7
 80092b0:	0800a11f 	.word	0x0800a11f
 80092b4:	0800a0d6 	.word	0x0800a0d6
 80092b8:	4b0a      	ldr	r3, [pc, #40]	@ (80092e4 <__ssvfiscanf_r+0x2e4>)
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	f43f aec5 	beq.w	800904a <__ssvfiscanf_r+0x4a>
 80092c0:	466b      	mov	r3, sp
 80092c2:	4622      	mov	r2, r4
 80092c4:	a941      	add	r1, sp, #260	@ 0x104
 80092c6:	4630      	mov	r0, r6
 80092c8:	f3af 8000 	nop.w
 80092cc:	e7a0      	b.n	8009210 <__ssvfiscanf_r+0x210>
 80092ce:	89a3      	ldrh	r3, [r4, #12]
 80092d0:	065b      	lsls	r3, r3, #25
 80092d2:	f53f af71 	bmi.w	80091b8 <__ssvfiscanf_r+0x1b8>
 80092d6:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80092da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092de:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80092e0:	e7f9      	b.n	80092d6 <__ssvfiscanf_r+0x2d6>
 80092e2:	bf00      	nop
 80092e4:	00000000 	.word	0x00000000

080092e8 <_printf_common>:
 80092e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092ec:	4616      	mov	r6, r2
 80092ee:	4698      	mov	r8, r3
 80092f0:	688a      	ldr	r2, [r1, #8]
 80092f2:	690b      	ldr	r3, [r1, #16]
 80092f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80092f8:	4293      	cmp	r3, r2
 80092fa:	bfb8      	it	lt
 80092fc:	4613      	movlt	r3, r2
 80092fe:	6033      	str	r3, [r6, #0]
 8009300:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009304:	4607      	mov	r7, r0
 8009306:	460c      	mov	r4, r1
 8009308:	b10a      	cbz	r2, 800930e <_printf_common+0x26>
 800930a:	3301      	adds	r3, #1
 800930c:	6033      	str	r3, [r6, #0]
 800930e:	6823      	ldr	r3, [r4, #0]
 8009310:	0699      	lsls	r1, r3, #26
 8009312:	bf42      	ittt	mi
 8009314:	6833      	ldrmi	r3, [r6, #0]
 8009316:	3302      	addmi	r3, #2
 8009318:	6033      	strmi	r3, [r6, #0]
 800931a:	6825      	ldr	r5, [r4, #0]
 800931c:	f015 0506 	ands.w	r5, r5, #6
 8009320:	d106      	bne.n	8009330 <_printf_common+0x48>
 8009322:	f104 0a19 	add.w	sl, r4, #25
 8009326:	68e3      	ldr	r3, [r4, #12]
 8009328:	6832      	ldr	r2, [r6, #0]
 800932a:	1a9b      	subs	r3, r3, r2
 800932c:	42ab      	cmp	r3, r5
 800932e:	dc26      	bgt.n	800937e <_printf_common+0x96>
 8009330:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009334:	6822      	ldr	r2, [r4, #0]
 8009336:	3b00      	subs	r3, #0
 8009338:	bf18      	it	ne
 800933a:	2301      	movne	r3, #1
 800933c:	0692      	lsls	r2, r2, #26
 800933e:	d42b      	bmi.n	8009398 <_printf_common+0xb0>
 8009340:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009344:	4641      	mov	r1, r8
 8009346:	4638      	mov	r0, r7
 8009348:	47c8      	blx	r9
 800934a:	3001      	adds	r0, #1
 800934c:	d01e      	beq.n	800938c <_printf_common+0xa4>
 800934e:	6823      	ldr	r3, [r4, #0]
 8009350:	6922      	ldr	r2, [r4, #16]
 8009352:	f003 0306 	and.w	r3, r3, #6
 8009356:	2b04      	cmp	r3, #4
 8009358:	bf02      	ittt	eq
 800935a:	68e5      	ldreq	r5, [r4, #12]
 800935c:	6833      	ldreq	r3, [r6, #0]
 800935e:	1aed      	subeq	r5, r5, r3
 8009360:	68a3      	ldr	r3, [r4, #8]
 8009362:	bf0c      	ite	eq
 8009364:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009368:	2500      	movne	r5, #0
 800936a:	4293      	cmp	r3, r2
 800936c:	bfc4      	itt	gt
 800936e:	1a9b      	subgt	r3, r3, r2
 8009370:	18ed      	addgt	r5, r5, r3
 8009372:	2600      	movs	r6, #0
 8009374:	341a      	adds	r4, #26
 8009376:	42b5      	cmp	r5, r6
 8009378:	d11a      	bne.n	80093b0 <_printf_common+0xc8>
 800937a:	2000      	movs	r0, #0
 800937c:	e008      	b.n	8009390 <_printf_common+0xa8>
 800937e:	2301      	movs	r3, #1
 8009380:	4652      	mov	r2, sl
 8009382:	4641      	mov	r1, r8
 8009384:	4638      	mov	r0, r7
 8009386:	47c8      	blx	r9
 8009388:	3001      	adds	r0, #1
 800938a:	d103      	bne.n	8009394 <_printf_common+0xac>
 800938c:	f04f 30ff 	mov.w	r0, #4294967295
 8009390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009394:	3501      	adds	r5, #1
 8009396:	e7c6      	b.n	8009326 <_printf_common+0x3e>
 8009398:	18e1      	adds	r1, r4, r3
 800939a:	1c5a      	adds	r2, r3, #1
 800939c:	2030      	movs	r0, #48	@ 0x30
 800939e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80093a2:	4422      	add	r2, r4
 80093a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80093a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80093ac:	3302      	adds	r3, #2
 80093ae:	e7c7      	b.n	8009340 <_printf_common+0x58>
 80093b0:	2301      	movs	r3, #1
 80093b2:	4622      	mov	r2, r4
 80093b4:	4641      	mov	r1, r8
 80093b6:	4638      	mov	r0, r7
 80093b8:	47c8      	blx	r9
 80093ba:	3001      	adds	r0, #1
 80093bc:	d0e6      	beq.n	800938c <_printf_common+0xa4>
 80093be:	3601      	adds	r6, #1
 80093c0:	e7d9      	b.n	8009376 <_printf_common+0x8e>
	...

080093c4 <_printf_i>:
 80093c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093c8:	7e0f      	ldrb	r7, [r1, #24]
 80093ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80093cc:	2f78      	cmp	r7, #120	@ 0x78
 80093ce:	4691      	mov	r9, r2
 80093d0:	4680      	mov	r8, r0
 80093d2:	460c      	mov	r4, r1
 80093d4:	469a      	mov	sl, r3
 80093d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80093da:	d807      	bhi.n	80093ec <_printf_i+0x28>
 80093dc:	2f62      	cmp	r7, #98	@ 0x62
 80093de:	d80a      	bhi.n	80093f6 <_printf_i+0x32>
 80093e0:	2f00      	cmp	r7, #0
 80093e2:	f000 80d2 	beq.w	800958a <_printf_i+0x1c6>
 80093e6:	2f58      	cmp	r7, #88	@ 0x58
 80093e8:	f000 80b9 	beq.w	800955e <_printf_i+0x19a>
 80093ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80093f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80093f4:	e03a      	b.n	800946c <_printf_i+0xa8>
 80093f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80093fa:	2b15      	cmp	r3, #21
 80093fc:	d8f6      	bhi.n	80093ec <_printf_i+0x28>
 80093fe:	a101      	add	r1, pc, #4	@ (adr r1, 8009404 <_printf_i+0x40>)
 8009400:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009404:	0800945d 	.word	0x0800945d
 8009408:	08009471 	.word	0x08009471
 800940c:	080093ed 	.word	0x080093ed
 8009410:	080093ed 	.word	0x080093ed
 8009414:	080093ed 	.word	0x080093ed
 8009418:	080093ed 	.word	0x080093ed
 800941c:	08009471 	.word	0x08009471
 8009420:	080093ed 	.word	0x080093ed
 8009424:	080093ed 	.word	0x080093ed
 8009428:	080093ed 	.word	0x080093ed
 800942c:	080093ed 	.word	0x080093ed
 8009430:	08009571 	.word	0x08009571
 8009434:	0800949b 	.word	0x0800949b
 8009438:	0800952b 	.word	0x0800952b
 800943c:	080093ed 	.word	0x080093ed
 8009440:	080093ed 	.word	0x080093ed
 8009444:	08009593 	.word	0x08009593
 8009448:	080093ed 	.word	0x080093ed
 800944c:	0800949b 	.word	0x0800949b
 8009450:	080093ed 	.word	0x080093ed
 8009454:	080093ed 	.word	0x080093ed
 8009458:	08009533 	.word	0x08009533
 800945c:	6833      	ldr	r3, [r6, #0]
 800945e:	1d1a      	adds	r2, r3, #4
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	6032      	str	r2, [r6, #0]
 8009464:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009468:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800946c:	2301      	movs	r3, #1
 800946e:	e09d      	b.n	80095ac <_printf_i+0x1e8>
 8009470:	6833      	ldr	r3, [r6, #0]
 8009472:	6820      	ldr	r0, [r4, #0]
 8009474:	1d19      	adds	r1, r3, #4
 8009476:	6031      	str	r1, [r6, #0]
 8009478:	0606      	lsls	r6, r0, #24
 800947a:	d501      	bpl.n	8009480 <_printf_i+0xbc>
 800947c:	681d      	ldr	r5, [r3, #0]
 800947e:	e003      	b.n	8009488 <_printf_i+0xc4>
 8009480:	0645      	lsls	r5, r0, #25
 8009482:	d5fb      	bpl.n	800947c <_printf_i+0xb8>
 8009484:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009488:	2d00      	cmp	r5, #0
 800948a:	da03      	bge.n	8009494 <_printf_i+0xd0>
 800948c:	232d      	movs	r3, #45	@ 0x2d
 800948e:	426d      	negs	r5, r5
 8009490:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009494:	4859      	ldr	r0, [pc, #356]	@ (80095fc <_printf_i+0x238>)
 8009496:	230a      	movs	r3, #10
 8009498:	e011      	b.n	80094be <_printf_i+0xfa>
 800949a:	6821      	ldr	r1, [r4, #0]
 800949c:	6833      	ldr	r3, [r6, #0]
 800949e:	0608      	lsls	r0, r1, #24
 80094a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80094a4:	d402      	bmi.n	80094ac <_printf_i+0xe8>
 80094a6:	0649      	lsls	r1, r1, #25
 80094a8:	bf48      	it	mi
 80094aa:	b2ad      	uxthmi	r5, r5
 80094ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80094ae:	4853      	ldr	r0, [pc, #332]	@ (80095fc <_printf_i+0x238>)
 80094b0:	6033      	str	r3, [r6, #0]
 80094b2:	bf14      	ite	ne
 80094b4:	230a      	movne	r3, #10
 80094b6:	2308      	moveq	r3, #8
 80094b8:	2100      	movs	r1, #0
 80094ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80094be:	6866      	ldr	r6, [r4, #4]
 80094c0:	60a6      	str	r6, [r4, #8]
 80094c2:	2e00      	cmp	r6, #0
 80094c4:	bfa2      	ittt	ge
 80094c6:	6821      	ldrge	r1, [r4, #0]
 80094c8:	f021 0104 	bicge.w	r1, r1, #4
 80094cc:	6021      	strge	r1, [r4, #0]
 80094ce:	b90d      	cbnz	r5, 80094d4 <_printf_i+0x110>
 80094d0:	2e00      	cmp	r6, #0
 80094d2:	d04b      	beq.n	800956c <_printf_i+0x1a8>
 80094d4:	4616      	mov	r6, r2
 80094d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80094da:	fb03 5711 	mls	r7, r3, r1, r5
 80094de:	5dc7      	ldrb	r7, [r0, r7]
 80094e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80094e4:	462f      	mov	r7, r5
 80094e6:	42bb      	cmp	r3, r7
 80094e8:	460d      	mov	r5, r1
 80094ea:	d9f4      	bls.n	80094d6 <_printf_i+0x112>
 80094ec:	2b08      	cmp	r3, #8
 80094ee:	d10b      	bne.n	8009508 <_printf_i+0x144>
 80094f0:	6823      	ldr	r3, [r4, #0]
 80094f2:	07df      	lsls	r7, r3, #31
 80094f4:	d508      	bpl.n	8009508 <_printf_i+0x144>
 80094f6:	6923      	ldr	r3, [r4, #16]
 80094f8:	6861      	ldr	r1, [r4, #4]
 80094fa:	4299      	cmp	r1, r3
 80094fc:	bfde      	ittt	le
 80094fe:	2330      	movle	r3, #48	@ 0x30
 8009500:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009504:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009508:	1b92      	subs	r2, r2, r6
 800950a:	6122      	str	r2, [r4, #16]
 800950c:	f8cd a000 	str.w	sl, [sp]
 8009510:	464b      	mov	r3, r9
 8009512:	aa03      	add	r2, sp, #12
 8009514:	4621      	mov	r1, r4
 8009516:	4640      	mov	r0, r8
 8009518:	f7ff fee6 	bl	80092e8 <_printf_common>
 800951c:	3001      	adds	r0, #1
 800951e:	d14a      	bne.n	80095b6 <_printf_i+0x1f2>
 8009520:	f04f 30ff 	mov.w	r0, #4294967295
 8009524:	b004      	add	sp, #16
 8009526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800952a:	6823      	ldr	r3, [r4, #0]
 800952c:	f043 0320 	orr.w	r3, r3, #32
 8009530:	6023      	str	r3, [r4, #0]
 8009532:	4833      	ldr	r0, [pc, #204]	@ (8009600 <_printf_i+0x23c>)
 8009534:	2778      	movs	r7, #120	@ 0x78
 8009536:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800953a:	6823      	ldr	r3, [r4, #0]
 800953c:	6831      	ldr	r1, [r6, #0]
 800953e:	061f      	lsls	r7, r3, #24
 8009540:	f851 5b04 	ldr.w	r5, [r1], #4
 8009544:	d402      	bmi.n	800954c <_printf_i+0x188>
 8009546:	065f      	lsls	r7, r3, #25
 8009548:	bf48      	it	mi
 800954a:	b2ad      	uxthmi	r5, r5
 800954c:	6031      	str	r1, [r6, #0]
 800954e:	07d9      	lsls	r1, r3, #31
 8009550:	bf44      	itt	mi
 8009552:	f043 0320 	orrmi.w	r3, r3, #32
 8009556:	6023      	strmi	r3, [r4, #0]
 8009558:	b11d      	cbz	r5, 8009562 <_printf_i+0x19e>
 800955a:	2310      	movs	r3, #16
 800955c:	e7ac      	b.n	80094b8 <_printf_i+0xf4>
 800955e:	4827      	ldr	r0, [pc, #156]	@ (80095fc <_printf_i+0x238>)
 8009560:	e7e9      	b.n	8009536 <_printf_i+0x172>
 8009562:	6823      	ldr	r3, [r4, #0]
 8009564:	f023 0320 	bic.w	r3, r3, #32
 8009568:	6023      	str	r3, [r4, #0]
 800956a:	e7f6      	b.n	800955a <_printf_i+0x196>
 800956c:	4616      	mov	r6, r2
 800956e:	e7bd      	b.n	80094ec <_printf_i+0x128>
 8009570:	6833      	ldr	r3, [r6, #0]
 8009572:	6825      	ldr	r5, [r4, #0]
 8009574:	6961      	ldr	r1, [r4, #20]
 8009576:	1d18      	adds	r0, r3, #4
 8009578:	6030      	str	r0, [r6, #0]
 800957a:	062e      	lsls	r6, r5, #24
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	d501      	bpl.n	8009584 <_printf_i+0x1c0>
 8009580:	6019      	str	r1, [r3, #0]
 8009582:	e002      	b.n	800958a <_printf_i+0x1c6>
 8009584:	0668      	lsls	r0, r5, #25
 8009586:	d5fb      	bpl.n	8009580 <_printf_i+0x1bc>
 8009588:	8019      	strh	r1, [r3, #0]
 800958a:	2300      	movs	r3, #0
 800958c:	6123      	str	r3, [r4, #16]
 800958e:	4616      	mov	r6, r2
 8009590:	e7bc      	b.n	800950c <_printf_i+0x148>
 8009592:	6833      	ldr	r3, [r6, #0]
 8009594:	1d1a      	adds	r2, r3, #4
 8009596:	6032      	str	r2, [r6, #0]
 8009598:	681e      	ldr	r6, [r3, #0]
 800959a:	6862      	ldr	r2, [r4, #4]
 800959c:	2100      	movs	r1, #0
 800959e:	4630      	mov	r0, r6
 80095a0:	f7f6 fe56 	bl	8000250 <memchr>
 80095a4:	b108      	cbz	r0, 80095aa <_printf_i+0x1e6>
 80095a6:	1b80      	subs	r0, r0, r6
 80095a8:	6060      	str	r0, [r4, #4]
 80095aa:	6863      	ldr	r3, [r4, #4]
 80095ac:	6123      	str	r3, [r4, #16]
 80095ae:	2300      	movs	r3, #0
 80095b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80095b4:	e7aa      	b.n	800950c <_printf_i+0x148>
 80095b6:	6923      	ldr	r3, [r4, #16]
 80095b8:	4632      	mov	r2, r6
 80095ba:	4649      	mov	r1, r9
 80095bc:	4640      	mov	r0, r8
 80095be:	47d0      	blx	sl
 80095c0:	3001      	adds	r0, #1
 80095c2:	d0ad      	beq.n	8009520 <_printf_i+0x15c>
 80095c4:	6823      	ldr	r3, [r4, #0]
 80095c6:	079b      	lsls	r3, r3, #30
 80095c8:	d413      	bmi.n	80095f2 <_printf_i+0x22e>
 80095ca:	68e0      	ldr	r0, [r4, #12]
 80095cc:	9b03      	ldr	r3, [sp, #12]
 80095ce:	4298      	cmp	r0, r3
 80095d0:	bfb8      	it	lt
 80095d2:	4618      	movlt	r0, r3
 80095d4:	e7a6      	b.n	8009524 <_printf_i+0x160>
 80095d6:	2301      	movs	r3, #1
 80095d8:	4632      	mov	r2, r6
 80095da:	4649      	mov	r1, r9
 80095dc:	4640      	mov	r0, r8
 80095de:	47d0      	blx	sl
 80095e0:	3001      	adds	r0, #1
 80095e2:	d09d      	beq.n	8009520 <_printf_i+0x15c>
 80095e4:	3501      	adds	r5, #1
 80095e6:	68e3      	ldr	r3, [r4, #12]
 80095e8:	9903      	ldr	r1, [sp, #12]
 80095ea:	1a5b      	subs	r3, r3, r1
 80095ec:	42ab      	cmp	r3, r5
 80095ee:	dcf2      	bgt.n	80095d6 <_printf_i+0x212>
 80095f0:	e7eb      	b.n	80095ca <_printf_i+0x206>
 80095f2:	2500      	movs	r5, #0
 80095f4:	f104 0619 	add.w	r6, r4, #25
 80095f8:	e7f5      	b.n	80095e6 <_printf_i+0x222>
 80095fa:	bf00      	nop
 80095fc:	0800a0e1 	.word	0x0800a0e1
 8009600:	0800a0f2 	.word	0x0800a0f2

08009604 <_scanf_chars>:
 8009604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009608:	4615      	mov	r5, r2
 800960a:	688a      	ldr	r2, [r1, #8]
 800960c:	4680      	mov	r8, r0
 800960e:	460c      	mov	r4, r1
 8009610:	b932      	cbnz	r2, 8009620 <_scanf_chars+0x1c>
 8009612:	698a      	ldr	r2, [r1, #24]
 8009614:	2a00      	cmp	r2, #0
 8009616:	bf14      	ite	ne
 8009618:	f04f 32ff 	movne.w	r2, #4294967295
 800961c:	2201      	moveq	r2, #1
 800961e:	608a      	str	r2, [r1, #8]
 8009620:	6822      	ldr	r2, [r4, #0]
 8009622:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80096b4 <_scanf_chars+0xb0>
 8009626:	06d1      	lsls	r1, r2, #27
 8009628:	bf5f      	itttt	pl
 800962a:	681a      	ldrpl	r2, [r3, #0]
 800962c:	1d11      	addpl	r1, r2, #4
 800962e:	6019      	strpl	r1, [r3, #0]
 8009630:	6816      	ldrpl	r6, [r2, #0]
 8009632:	2700      	movs	r7, #0
 8009634:	69a0      	ldr	r0, [r4, #24]
 8009636:	b188      	cbz	r0, 800965c <_scanf_chars+0x58>
 8009638:	2801      	cmp	r0, #1
 800963a:	d107      	bne.n	800964c <_scanf_chars+0x48>
 800963c:	682b      	ldr	r3, [r5, #0]
 800963e:	781a      	ldrb	r2, [r3, #0]
 8009640:	6963      	ldr	r3, [r4, #20]
 8009642:	5c9b      	ldrb	r3, [r3, r2]
 8009644:	b953      	cbnz	r3, 800965c <_scanf_chars+0x58>
 8009646:	2f00      	cmp	r7, #0
 8009648:	d031      	beq.n	80096ae <_scanf_chars+0xaa>
 800964a:	e022      	b.n	8009692 <_scanf_chars+0x8e>
 800964c:	2802      	cmp	r0, #2
 800964e:	d120      	bne.n	8009692 <_scanf_chars+0x8e>
 8009650:	682b      	ldr	r3, [r5, #0]
 8009652:	781b      	ldrb	r3, [r3, #0]
 8009654:	f819 3003 	ldrb.w	r3, [r9, r3]
 8009658:	071b      	lsls	r3, r3, #28
 800965a:	d41a      	bmi.n	8009692 <_scanf_chars+0x8e>
 800965c:	6823      	ldr	r3, [r4, #0]
 800965e:	06da      	lsls	r2, r3, #27
 8009660:	bf5e      	ittt	pl
 8009662:	682b      	ldrpl	r3, [r5, #0]
 8009664:	781b      	ldrbpl	r3, [r3, #0]
 8009666:	f806 3b01 	strbpl.w	r3, [r6], #1
 800966a:	682a      	ldr	r2, [r5, #0]
 800966c:	686b      	ldr	r3, [r5, #4]
 800966e:	3201      	adds	r2, #1
 8009670:	602a      	str	r2, [r5, #0]
 8009672:	68a2      	ldr	r2, [r4, #8]
 8009674:	3b01      	subs	r3, #1
 8009676:	3a01      	subs	r2, #1
 8009678:	606b      	str	r3, [r5, #4]
 800967a:	3701      	adds	r7, #1
 800967c:	60a2      	str	r2, [r4, #8]
 800967e:	b142      	cbz	r2, 8009692 <_scanf_chars+0x8e>
 8009680:	2b00      	cmp	r3, #0
 8009682:	dcd7      	bgt.n	8009634 <_scanf_chars+0x30>
 8009684:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009688:	4629      	mov	r1, r5
 800968a:	4640      	mov	r0, r8
 800968c:	4798      	blx	r3
 800968e:	2800      	cmp	r0, #0
 8009690:	d0d0      	beq.n	8009634 <_scanf_chars+0x30>
 8009692:	6823      	ldr	r3, [r4, #0]
 8009694:	f013 0310 	ands.w	r3, r3, #16
 8009698:	d105      	bne.n	80096a6 <_scanf_chars+0xa2>
 800969a:	68e2      	ldr	r2, [r4, #12]
 800969c:	3201      	adds	r2, #1
 800969e:	60e2      	str	r2, [r4, #12]
 80096a0:	69a2      	ldr	r2, [r4, #24]
 80096a2:	b102      	cbz	r2, 80096a6 <_scanf_chars+0xa2>
 80096a4:	7033      	strb	r3, [r6, #0]
 80096a6:	6923      	ldr	r3, [r4, #16]
 80096a8:	443b      	add	r3, r7
 80096aa:	6123      	str	r3, [r4, #16]
 80096ac:	2000      	movs	r0, #0
 80096ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096b2:	bf00      	nop
 80096b4:	0800a11f 	.word	0x0800a11f

080096b8 <_scanf_i>:
 80096b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096bc:	4698      	mov	r8, r3
 80096be:	4b74      	ldr	r3, [pc, #464]	@ (8009890 <_scanf_i+0x1d8>)
 80096c0:	460c      	mov	r4, r1
 80096c2:	4682      	mov	sl, r0
 80096c4:	4616      	mov	r6, r2
 80096c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80096ca:	b087      	sub	sp, #28
 80096cc:	ab03      	add	r3, sp, #12
 80096ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80096d2:	4b70      	ldr	r3, [pc, #448]	@ (8009894 <_scanf_i+0x1dc>)
 80096d4:	69a1      	ldr	r1, [r4, #24]
 80096d6:	4a70      	ldr	r2, [pc, #448]	@ (8009898 <_scanf_i+0x1e0>)
 80096d8:	2903      	cmp	r1, #3
 80096da:	bf08      	it	eq
 80096dc:	461a      	moveq	r2, r3
 80096de:	68a3      	ldr	r3, [r4, #8]
 80096e0:	9201      	str	r2, [sp, #4]
 80096e2:	1e5a      	subs	r2, r3, #1
 80096e4:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80096e8:	bf88      	it	hi
 80096ea:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80096ee:	4627      	mov	r7, r4
 80096f0:	bf82      	ittt	hi
 80096f2:	eb03 0905 	addhi.w	r9, r3, r5
 80096f6:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80096fa:	60a3      	strhi	r3, [r4, #8]
 80096fc:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009700:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8009704:	bf98      	it	ls
 8009706:	f04f 0900 	movls.w	r9, #0
 800970a:	6023      	str	r3, [r4, #0]
 800970c:	463d      	mov	r5, r7
 800970e:	f04f 0b00 	mov.w	fp, #0
 8009712:	6831      	ldr	r1, [r6, #0]
 8009714:	ab03      	add	r3, sp, #12
 8009716:	7809      	ldrb	r1, [r1, #0]
 8009718:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800971c:	2202      	movs	r2, #2
 800971e:	f7f6 fd97 	bl	8000250 <memchr>
 8009722:	b328      	cbz	r0, 8009770 <_scanf_i+0xb8>
 8009724:	f1bb 0f01 	cmp.w	fp, #1
 8009728:	d159      	bne.n	80097de <_scanf_i+0x126>
 800972a:	6862      	ldr	r2, [r4, #4]
 800972c:	b92a      	cbnz	r2, 800973a <_scanf_i+0x82>
 800972e:	6822      	ldr	r2, [r4, #0]
 8009730:	2108      	movs	r1, #8
 8009732:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009736:	6061      	str	r1, [r4, #4]
 8009738:	6022      	str	r2, [r4, #0]
 800973a:	6822      	ldr	r2, [r4, #0]
 800973c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8009740:	6022      	str	r2, [r4, #0]
 8009742:	68a2      	ldr	r2, [r4, #8]
 8009744:	1e51      	subs	r1, r2, #1
 8009746:	60a1      	str	r1, [r4, #8]
 8009748:	b192      	cbz	r2, 8009770 <_scanf_i+0xb8>
 800974a:	6832      	ldr	r2, [r6, #0]
 800974c:	1c51      	adds	r1, r2, #1
 800974e:	6031      	str	r1, [r6, #0]
 8009750:	7812      	ldrb	r2, [r2, #0]
 8009752:	f805 2b01 	strb.w	r2, [r5], #1
 8009756:	6872      	ldr	r2, [r6, #4]
 8009758:	3a01      	subs	r2, #1
 800975a:	2a00      	cmp	r2, #0
 800975c:	6072      	str	r2, [r6, #4]
 800975e:	dc07      	bgt.n	8009770 <_scanf_i+0xb8>
 8009760:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8009764:	4631      	mov	r1, r6
 8009766:	4650      	mov	r0, sl
 8009768:	4790      	blx	r2
 800976a:	2800      	cmp	r0, #0
 800976c:	f040 8085 	bne.w	800987a <_scanf_i+0x1c2>
 8009770:	f10b 0b01 	add.w	fp, fp, #1
 8009774:	f1bb 0f03 	cmp.w	fp, #3
 8009778:	d1cb      	bne.n	8009712 <_scanf_i+0x5a>
 800977a:	6863      	ldr	r3, [r4, #4]
 800977c:	b90b      	cbnz	r3, 8009782 <_scanf_i+0xca>
 800977e:	230a      	movs	r3, #10
 8009780:	6063      	str	r3, [r4, #4]
 8009782:	6863      	ldr	r3, [r4, #4]
 8009784:	4945      	ldr	r1, [pc, #276]	@ (800989c <_scanf_i+0x1e4>)
 8009786:	6960      	ldr	r0, [r4, #20]
 8009788:	1ac9      	subs	r1, r1, r3
 800978a:	f000 f997 	bl	8009abc <__sccl>
 800978e:	f04f 0b00 	mov.w	fp, #0
 8009792:	68a3      	ldr	r3, [r4, #8]
 8009794:	6822      	ldr	r2, [r4, #0]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d03d      	beq.n	8009816 <_scanf_i+0x15e>
 800979a:	6831      	ldr	r1, [r6, #0]
 800979c:	6960      	ldr	r0, [r4, #20]
 800979e:	f891 c000 	ldrb.w	ip, [r1]
 80097a2:	f810 000c 	ldrb.w	r0, [r0, ip]
 80097a6:	2800      	cmp	r0, #0
 80097a8:	d035      	beq.n	8009816 <_scanf_i+0x15e>
 80097aa:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80097ae:	d124      	bne.n	80097fa <_scanf_i+0x142>
 80097b0:	0510      	lsls	r0, r2, #20
 80097b2:	d522      	bpl.n	80097fa <_scanf_i+0x142>
 80097b4:	f10b 0b01 	add.w	fp, fp, #1
 80097b8:	f1b9 0f00 	cmp.w	r9, #0
 80097bc:	d003      	beq.n	80097c6 <_scanf_i+0x10e>
 80097be:	3301      	adds	r3, #1
 80097c0:	f109 39ff 	add.w	r9, r9, #4294967295
 80097c4:	60a3      	str	r3, [r4, #8]
 80097c6:	6873      	ldr	r3, [r6, #4]
 80097c8:	3b01      	subs	r3, #1
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	6073      	str	r3, [r6, #4]
 80097ce:	dd1b      	ble.n	8009808 <_scanf_i+0x150>
 80097d0:	6833      	ldr	r3, [r6, #0]
 80097d2:	3301      	adds	r3, #1
 80097d4:	6033      	str	r3, [r6, #0]
 80097d6:	68a3      	ldr	r3, [r4, #8]
 80097d8:	3b01      	subs	r3, #1
 80097da:	60a3      	str	r3, [r4, #8]
 80097dc:	e7d9      	b.n	8009792 <_scanf_i+0xda>
 80097de:	f1bb 0f02 	cmp.w	fp, #2
 80097e2:	d1ae      	bne.n	8009742 <_scanf_i+0x8a>
 80097e4:	6822      	ldr	r2, [r4, #0]
 80097e6:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80097ea:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80097ee:	d1bf      	bne.n	8009770 <_scanf_i+0xb8>
 80097f0:	2110      	movs	r1, #16
 80097f2:	6061      	str	r1, [r4, #4]
 80097f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80097f8:	e7a2      	b.n	8009740 <_scanf_i+0x88>
 80097fa:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80097fe:	6022      	str	r2, [r4, #0]
 8009800:	780b      	ldrb	r3, [r1, #0]
 8009802:	f805 3b01 	strb.w	r3, [r5], #1
 8009806:	e7de      	b.n	80097c6 <_scanf_i+0x10e>
 8009808:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800980c:	4631      	mov	r1, r6
 800980e:	4650      	mov	r0, sl
 8009810:	4798      	blx	r3
 8009812:	2800      	cmp	r0, #0
 8009814:	d0df      	beq.n	80097d6 <_scanf_i+0x11e>
 8009816:	6823      	ldr	r3, [r4, #0]
 8009818:	05d9      	lsls	r1, r3, #23
 800981a:	d50d      	bpl.n	8009838 <_scanf_i+0x180>
 800981c:	42bd      	cmp	r5, r7
 800981e:	d909      	bls.n	8009834 <_scanf_i+0x17c>
 8009820:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009824:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009828:	4632      	mov	r2, r6
 800982a:	4650      	mov	r0, sl
 800982c:	4798      	blx	r3
 800982e:	f105 39ff 	add.w	r9, r5, #4294967295
 8009832:	464d      	mov	r5, r9
 8009834:	42bd      	cmp	r5, r7
 8009836:	d028      	beq.n	800988a <_scanf_i+0x1d2>
 8009838:	6822      	ldr	r2, [r4, #0]
 800983a:	f012 0210 	ands.w	r2, r2, #16
 800983e:	d113      	bne.n	8009868 <_scanf_i+0x1b0>
 8009840:	702a      	strb	r2, [r5, #0]
 8009842:	6863      	ldr	r3, [r4, #4]
 8009844:	9e01      	ldr	r6, [sp, #4]
 8009846:	4639      	mov	r1, r7
 8009848:	4650      	mov	r0, sl
 800984a:	47b0      	blx	r6
 800984c:	f8d8 3000 	ldr.w	r3, [r8]
 8009850:	6821      	ldr	r1, [r4, #0]
 8009852:	1d1a      	adds	r2, r3, #4
 8009854:	f8c8 2000 	str.w	r2, [r8]
 8009858:	f011 0f20 	tst.w	r1, #32
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	d00f      	beq.n	8009880 <_scanf_i+0x1c8>
 8009860:	6018      	str	r0, [r3, #0]
 8009862:	68e3      	ldr	r3, [r4, #12]
 8009864:	3301      	adds	r3, #1
 8009866:	60e3      	str	r3, [r4, #12]
 8009868:	6923      	ldr	r3, [r4, #16]
 800986a:	1bed      	subs	r5, r5, r7
 800986c:	445d      	add	r5, fp
 800986e:	442b      	add	r3, r5
 8009870:	6123      	str	r3, [r4, #16]
 8009872:	2000      	movs	r0, #0
 8009874:	b007      	add	sp, #28
 8009876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800987a:	f04f 0b00 	mov.w	fp, #0
 800987e:	e7ca      	b.n	8009816 <_scanf_i+0x15e>
 8009880:	07ca      	lsls	r2, r1, #31
 8009882:	bf4c      	ite	mi
 8009884:	8018      	strhmi	r0, [r3, #0]
 8009886:	6018      	strpl	r0, [r3, #0]
 8009888:	e7eb      	b.n	8009862 <_scanf_i+0x1aa>
 800988a:	2001      	movs	r0, #1
 800988c:	e7f2      	b.n	8009874 <_scanf_i+0x1bc>
 800988e:	bf00      	nop
 8009890:	0800a084 	.word	0x0800a084
 8009894:	08009d89 	.word	0x08009d89
 8009898:	08009e69 	.word	0x08009e69
 800989c:	0800a113 	.word	0x0800a113

080098a0 <__sflush_r>:
 80098a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80098a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098a8:	0716      	lsls	r6, r2, #28
 80098aa:	4605      	mov	r5, r0
 80098ac:	460c      	mov	r4, r1
 80098ae:	d454      	bmi.n	800995a <__sflush_r+0xba>
 80098b0:	684b      	ldr	r3, [r1, #4]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	dc02      	bgt.n	80098bc <__sflush_r+0x1c>
 80098b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	dd48      	ble.n	800994e <__sflush_r+0xae>
 80098bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80098be:	2e00      	cmp	r6, #0
 80098c0:	d045      	beq.n	800994e <__sflush_r+0xae>
 80098c2:	2300      	movs	r3, #0
 80098c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80098c8:	682f      	ldr	r7, [r5, #0]
 80098ca:	6a21      	ldr	r1, [r4, #32]
 80098cc:	602b      	str	r3, [r5, #0]
 80098ce:	d030      	beq.n	8009932 <__sflush_r+0x92>
 80098d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80098d2:	89a3      	ldrh	r3, [r4, #12]
 80098d4:	0759      	lsls	r1, r3, #29
 80098d6:	d505      	bpl.n	80098e4 <__sflush_r+0x44>
 80098d8:	6863      	ldr	r3, [r4, #4]
 80098da:	1ad2      	subs	r2, r2, r3
 80098dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80098de:	b10b      	cbz	r3, 80098e4 <__sflush_r+0x44>
 80098e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80098e2:	1ad2      	subs	r2, r2, r3
 80098e4:	2300      	movs	r3, #0
 80098e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80098e8:	6a21      	ldr	r1, [r4, #32]
 80098ea:	4628      	mov	r0, r5
 80098ec:	47b0      	blx	r6
 80098ee:	1c43      	adds	r3, r0, #1
 80098f0:	89a3      	ldrh	r3, [r4, #12]
 80098f2:	d106      	bne.n	8009902 <__sflush_r+0x62>
 80098f4:	6829      	ldr	r1, [r5, #0]
 80098f6:	291d      	cmp	r1, #29
 80098f8:	d82b      	bhi.n	8009952 <__sflush_r+0xb2>
 80098fa:	4a2a      	ldr	r2, [pc, #168]	@ (80099a4 <__sflush_r+0x104>)
 80098fc:	410a      	asrs	r2, r1
 80098fe:	07d6      	lsls	r6, r2, #31
 8009900:	d427      	bmi.n	8009952 <__sflush_r+0xb2>
 8009902:	2200      	movs	r2, #0
 8009904:	6062      	str	r2, [r4, #4]
 8009906:	04d9      	lsls	r1, r3, #19
 8009908:	6922      	ldr	r2, [r4, #16]
 800990a:	6022      	str	r2, [r4, #0]
 800990c:	d504      	bpl.n	8009918 <__sflush_r+0x78>
 800990e:	1c42      	adds	r2, r0, #1
 8009910:	d101      	bne.n	8009916 <__sflush_r+0x76>
 8009912:	682b      	ldr	r3, [r5, #0]
 8009914:	b903      	cbnz	r3, 8009918 <__sflush_r+0x78>
 8009916:	6560      	str	r0, [r4, #84]	@ 0x54
 8009918:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800991a:	602f      	str	r7, [r5, #0]
 800991c:	b1b9      	cbz	r1, 800994e <__sflush_r+0xae>
 800991e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009922:	4299      	cmp	r1, r3
 8009924:	d002      	beq.n	800992c <__sflush_r+0x8c>
 8009926:	4628      	mov	r0, r5
 8009928:	f7ff f970 	bl	8008c0c <_free_r>
 800992c:	2300      	movs	r3, #0
 800992e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009930:	e00d      	b.n	800994e <__sflush_r+0xae>
 8009932:	2301      	movs	r3, #1
 8009934:	4628      	mov	r0, r5
 8009936:	47b0      	blx	r6
 8009938:	4602      	mov	r2, r0
 800993a:	1c50      	adds	r0, r2, #1
 800993c:	d1c9      	bne.n	80098d2 <__sflush_r+0x32>
 800993e:	682b      	ldr	r3, [r5, #0]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d0c6      	beq.n	80098d2 <__sflush_r+0x32>
 8009944:	2b1d      	cmp	r3, #29
 8009946:	d001      	beq.n	800994c <__sflush_r+0xac>
 8009948:	2b16      	cmp	r3, #22
 800994a:	d11e      	bne.n	800998a <__sflush_r+0xea>
 800994c:	602f      	str	r7, [r5, #0]
 800994e:	2000      	movs	r0, #0
 8009950:	e022      	b.n	8009998 <__sflush_r+0xf8>
 8009952:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009956:	b21b      	sxth	r3, r3
 8009958:	e01b      	b.n	8009992 <__sflush_r+0xf2>
 800995a:	690f      	ldr	r7, [r1, #16]
 800995c:	2f00      	cmp	r7, #0
 800995e:	d0f6      	beq.n	800994e <__sflush_r+0xae>
 8009960:	0793      	lsls	r3, r2, #30
 8009962:	680e      	ldr	r6, [r1, #0]
 8009964:	bf08      	it	eq
 8009966:	694b      	ldreq	r3, [r1, #20]
 8009968:	600f      	str	r7, [r1, #0]
 800996a:	bf18      	it	ne
 800996c:	2300      	movne	r3, #0
 800996e:	eba6 0807 	sub.w	r8, r6, r7
 8009972:	608b      	str	r3, [r1, #8]
 8009974:	f1b8 0f00 	cmp.w	r8, #0
 8009978:	dde9      	ble.n	800994e <__sflush_r+0xae>
 800997a:	6a21      	ldr	r1, [r4, #32]
 800997c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800997e:	4643      	mov	r3, r8
 8009980:	463a      	mov	r2, r7
 8009982:	4628      	mov	r0, r5
 8009984:	47b0      	blx	r6
 8009986:	2800      	cmp	r0, #0
 8009988:	dc08      	bgt.n	800999c <__sflush_r+0xfc>
 800998a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800998e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009992:	81a3      	strh	r3, [r4, #12]
 8009994:	f04f 30ff 	mov.w	r0, #4294967295
 8009998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800999c:	4407      	add	r7, r0
 800999e:	eba8 0800 	sub.w	r8, r8, r0
 80099a2:	e7e7      	b.n	8009974 <__sflush_r+0xd4>
 80099a4:	dfbffffe 	.word	0xdfbffffe

080099a8 <_fflush_r>:
 80099a8:	b538      	push	{r3, r4, r5, lr}
 80099aa:	690b      	ldr	r3, [r1, #16]
 80099ac:	4605      	mov	r5, r0
 80099ae:	460c      	mov	r4, r1
 80099b0:	b913      	cbnz	r3, 80099b8 <_fflush_r+0x10>
 80099b2:	2500      	movs	r5, #0
 80099b4:	4628      	mov	r0, r5
 80099b6:	bd38      	pop	{r3, r4, r5, pc}
 80099b8:	b118      	cbz	r0, 80099c2 <_fflush_r+0x1a>
 80099ba:	6a03      	ldr	r3, [r0, #32]
 80099bc:	b90b      	cbnz	r3, 80099c2 <_fflush_r+0x1a>
 80099be:	f7fe fecd 	bl	800875c <__sinit>
 80099c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d0f3      	beq.n	80099b2 <_fflush_r+0xa>
 80099ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80099cc:	07d0      	lsls	r0, r2, #31
 80099ce:	d404      	bmi.n	80099da <_fflush_r+0x32>
 80099d0:	0599      	lsls	r1, r3, #22
 80099d2:	d402      	bmi.n	80099da <_fflush_r+0x32>
 80099d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80099d6:	f7ff f916 	bl	8008c06 <__retarget_lock_acquire_recursive>
 80099da:	4628      	mov	r0, r5
 80099dc:	4621      	mov	r1, r4
 80099de:	f7ff ff5f 	bl	80098a0 <__sflush_r>
 80099e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80099e4:	07da      	lsls	r2, r3, #31
 80099e6:	4605      	mov	r5, r0
 80099e8:	d4e4      	bmi.n	80099b4 <_fflush_r+0xc>
 80099ea:	89a3      	ldrh	r3, [r4, #12]
 80099ec:	059b      	lsls	r3, r3, #22
 80099ee:	d4e1      	bmi.n	80099b4 <_fflush_r+0xc>
 80099f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80099f2:	f7ff f909 	bl	8008c08 <__retarget_lock_release_recursive>
 80099f6:	e7dd      	b.n	80099b4 <_fflush_r+0xc>

080099f8 <__swhatbuf_r>:
 80099f8:	b570      	push	{r4, r5, r6, lr}
 80099fa:	460c      	mov	r4, r1
 80099fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a00:	2900      	cmp	r1, #0
 8009a02:	b096      	sub	sp, #88	@ 0x58
 8009a04:	4615      	mov	r5, r2
 8009a06:	461e      	mov	r6, r3
 8009a08:	da0d      	bge.n	8009a26 <__swhatbuf_r+0x2e>
 8009a0a:	89a3      	ldrh	r3, [r4, #12]
 8009a0c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009a10:	f04f 0100 	mov.w	r1, #0
 8009a14:	bf14      	ite	ne
 8009a16:	2340      	movne	r3, #64	@ 0x40
 8009a18:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009a1c:	2000      	movs	r0, #0
 8009a1e:	6031      	str	r1, [r6, #0]
 8009a20:	602b      	str	r3, [r5, #0]
 8009a22:	b016      	add	sp, #88	@ 0x58
 8009a24:	bd70      	pop	{r4, r5, r6, pc}
 8009a26:	466a      	mov	r2, sp
 8009a28:	f000 f8d6 	bl	8009bd8 <_fstat_r>
 8009a2c:	2800      	cmp	r0, #0
 8009a2e:	dbec      	blt.n	8009a0a <__swhatbuf_r+0x12>
 8009a30:	9901      	ldr	r1, [sp, #4]
 8009a32:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009a36:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009a3a:	4259      	negs	r1, r3
 8009a3c:	4159      	adcs	r1, r3
 8009a3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009a42:	e7eb      	b.n	8009a1c <__swhatbuf_r+0x24>

08009a44 <__smakebuf_r>:
 8009a44:	898b      	ldrh	r3, [r1, #12]
 8009a46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a48:	079d      	lsls	r5, r3, #30
 8009a4a:	4606      	mov	r6, r0
 8009a4c:	460c      	mov	r4, r1
 8009a4e:	d507      	bpl.n	8009a60 <__smakebuf_r+0x1c>
 8009a50:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009a54:	6023      	str	r3, [r4, #0]
 8009a56:	6123      	str	r3, [r4, #16]
 8009a58:	2301      	movs	r3, #1
 8009a5a:	6163      	str	r3, [r4, #20]
 8009a5c:	b003      	add	sp, #12
 8009a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a60:	ab01      	add	r3, sp, #4
 8009a62:	466a      	mov	r2, sp
 8009a64:	f7ff ffc8 	bl	80099f8 <__swhatbuf_r>
 8009a68:	9f00      	ldr	r7, [sp, #0]
 8009a6a:	4605      	mov	r5, r0
 8009a6c:	4639      	mov	r1, r7
 8009a6e:	4630      	mov	r0, r6
 8009a70:	f7fe fd5c 	bl	800852c <_malloc_r>
 8009a74:	b948      	cbnz	r0, 8009a8a <__smakebuf_r+0x46>
 8009a76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a7a:	059a      	lsls	r2, r3, #22
 8009a7c:	d4ee      	bmi.n	8009a5c <__smakebuf_r+0x18>
 8009a7e:	f023 0303 	bic.w	r3, r3, #3
 8009a82:	f043 0302 	orr.w	r3, r3, #2
 8009a86:	81a3      	strh	r3, [r4, #12]
 8009a88:	e7e2      	b.n	8009a50 <__smakebuf_r+0xc>
 8009a8a:	89a3      	ldrh	r3, [r4, #12]
 8009a8c:	6020      	str	r0, [r4, #0]
 8009a8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a92:	81a3      	strh	r3, [r4, #12]
 8009a94:	9b01      	ldr	r3, [sp, #4]
 8009a96:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009a9a:	b15b      	cbz	r3, 8009ab4 <__smakebuf_r+0x70>
 8009a9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009aa0:	4630      	mov	r0, r6
 8009aa2:	f000 f8ab 	bl	8009bfc <_isatty_r>
 8009aa6:	b128      	cbz	r0, 8009ab4 <__smakebuf_r+0x70>
 8009aa8:	89a3      	ldrh	r3, [r4, #12]
 8009aaa:	f023 0303 	bic.w	r3, r3, #3
 8009aae:	f043 0301 	orr.w	r3, r3, #1
 8009ab2:	81a3      	strh	r3, [r4, #12]
 8009ab4:	89a3      	ldrh	r3, [r4, #12]
 8009ab6:	431d      	orrs	r5, r3
 8009ab8:	81a5      	strh	r5, [r4, #12]
 8009aba:	e7cf      	b.n	8009a5c <__smakebuf_r+0x18>

08009abc <__sccl>:
 8009abc:	b570      	push	{r4, r5, r6, lr}
 8009abe:	780b      	ldrb	r3, [r1, #0]
 8009ac0:	4604      	mov	r4, r0
 8009ac2:	2b5e      	cmp	r3, #94	@ 0x5e
 8009ac4:	bf0b      	itete	eq
 8009ac6:	784b      	ldrbeq	r3, [r1, #1]
 8009ac8:	1c4a      	addne	r2, r1, #1
 8009aca:	1c8a      	addeq	r2, r1, #2
 8009acc:	2100      	movne	r1, #0
 8009ace:	bf08      	it	eq
 8009ad0:	2101      	moveq	r1, #1
 8009ad2:	3801      	subs	r0, #1
 8009ad4:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8009ad8:	f800 1f01 	strb.w	r1, [r0, #1]!
 8009adc:	42a8      	cmp	r0, r5
 8009ade:	d1fb      	bne.n	8009ad8 <__sccl+0x1c>
 8009ae0:	b90b      	cbnz	r3, 8009ae6 <__sccl+0x2a>
 8009ae2:	1e50      	subs	r0, r2, #1
 8009ae4:	bd70      	pop	{r4, r5, r6, pc}
 8009ae6:	f081 0101 	eor.w	r1, r1, #1
 8009aea:	54e1      	strb	r1, [r4, r3]
 8009aec:	4610      	mov	r0, r2
 8009aee:	4602      	mov	r2, r0
 8009af0:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009af4:	2d2d      	cmp	r5, #45	@ 0x2d
 8009af6:	d005      	beq.n	8009b04 <__sccl+0x48>
 8009af8:	2d5d      	cmp	r5, #93	@ 0x5d
 8009afa:	d016      	beq.n	8009b2a <__sccl+0x6e>
 8009afc:	2d00      	cmp	r5, #0
 8009afe:	d0f1      	beq.n	8009ae4 <__sccl+0x28>
 8009b00:	462b      	mov	r3, r5
 8009b02:	e7f2      	b.n	8009aea <__sccl+0x2e>
 8009b04:	7846      	ldrb	r6, [r0, #1]
 8009b06:	2e5d      	cmp	r6, #93	@ 0x5d
 8009b08:	d0fa      	beq.n	8009b00 <__sccl+0x44>
 8009b0a:	42b3      	cmp	r3, r6
 8009b0c:	dcf8      	bgt.n	8009b00 <__sccl+0x44>
 8009b0e:	3002      	adds	r0, #2
 8009b10:	461a      	mov	r2, r3
 8009b12:	3201      	adds	r2, #1
 8009b14:	4296      	cmp	r6, r2
 8009b16:	54a1      	strb	r1, [r4, r2]
 8009b18:	dcfb      	bgt.n	8009b12 <__sccl+0x56>
 8009b1a:	1af2      	subs	r2, r6, r3
 8009b1c:	3a01      	subs	r2, #1
 8009b1e:	1c5d      	adds	r5, r3, #1
 8009b20:	42b3      	cmp	r3, r6
 8009b22:	bfa8      	it	ge
 8009b24:	2200      	movge	r2, #0
 8009b26:	18ab      	adds	r3, r5, r2
 8009b28:	e7e1      	b.n	8009aee <__sccl+0x32>
 8009b2a:	4610      	mov	r0, r2
 8009b2c:	e7da      	b.n	8009ae4 <__sccl+0x28>

08009b2e <__submore>:
 8009b2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b32:	460c      	mov	r4, r1
 8009b34:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8009b36:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009b3a:	4299      	cmp	r1, r3
 8009b3c:	d11d      	bne.n	8009b7a <__submore+0x4c>
 8009b3e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009b42:	f7fe fcf3 	bl	800852c <_malloc_r>
 8009b46:	b918      	cbnz	r0, 8009b50 <__submore+0x22>
 8009b48:	f04f 30ff 	mov.w	r0, #4294967295
 8009b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009b54:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009b56:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8009b5a:	6360      	str	r0, [r4, #52]	@ 0x34
 8009b5c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8009b60:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8009b64:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8009b68:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8009b6c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8009b70:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8009b74:	6020      	str	r0, [r4, #0]
 8009b76:	2000      	movs	r0, #0
 8009b78:	e7e8      	b.n	8009b4c <__submore+0x1e>
 8009b7a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8009b7c:	0077      	lsls	r7, r6, #1
 8009b7e:	463a      	mov	r2, r7
 8009b80:	f000 f85a 	bl	8009c38 <_realloc_r>
 8009b84:	4605      	mov	r5, r0
 8009b86:	2800      	cmp	r0, #0
 8009b88:	d0de      	beq.n	8009b48 <__submore+0x1a>
 8009b8a:	eb00 0806 	add.w	r8, r0, r6
 8009b8e:	4601      	mov	r1, r0
 8009b90:	4632      	mov	r2, r6
 8009b92:	4640      	mov	r0, r8
 8009b94:	f000 f842 	bl	8009c1c <memcpy>
 8009b98:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8009b9c:	f8c4 8000 	str.w	r8, [r4]
 8009ba0:	e7e9      	b.n	8009b76 <__submore+0x48>

08009ba2 <memmove>:
 8009ba2:	4288      	cmp	r0, r1
 8009ba4:	b510      	push	{r4, lr}
 8009ba6:	eb01 0402 	add.w	r4, r1, r2
 8009baa:	d902      	bls.n	8009bb2 <memmove+0x10>
 8009bac:	4284      	cmp	r4, r0
 8009bae:	4623      	mov	r3, r4
 8009bb0:	d807      	bhi.n	8009bc2 <memmove+0x20>
 8009bb2:	1e43      	subs	r3, r0, #1
 8009bb4:	42a1      	cmp	r1, r4
 8009bb6:	d008      	beq.n	8009bca <memmove+0x28>
 8009bb8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009bbc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009bc0:	e7f8      	b.n	8009bb4 <memmove+0x12>
 8009bc2:	4402      	add	r2, r0
 8009bc4:	4601      	mov	r1, r0
 8009bc6:	428a      	cmp	r2, r1
 8009bc8:	d100      	bne.n	8009bcc <memmove+0x2a>
 8009bca:	bd10      	pop	{r4, pc}
 8009bcc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009bd0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009bd4:	e7f7      	b.n	8009bc6 <memmove+0x24>
	...

08009bd8 <_fstat_r>:
 8009bd8:	b538      	push	{r3, r4, r5, lr}
 8009bda:	4d07      	ldr	r5, [pc, #28]	@ (8009bf8 <_fstat_r+0x20>)
 8009bdc:	2300      	movs	r3, #0
 8009bde:	4604      	mov	r4, r0
 8009be0:	4608      	mov	r0, r1
 8009be2:	4611      	mov	r1, r2
 8009be4:	602b      	str	r3, [r5, #0]
 8009be6:	f7f9 f81e 	bl	8002c26 <_fstat>
 8009bea:	1c43      	adds	r3, r0, #1
 8009bec:	d102      	bne.n	8009bf4 <_fstat_r+0x1c>
 8009bee:	682b      	ldr	r3, [r5, #0]
 8009bf0:	b103      	cbz	r3, 8009bf4 <_fstat_r+0x1c>
 8009bf2:	6023      	str	r3, [r4, #0]
 8009bf4:	bd38      	pop	{r3, r4, r5, pc}
 8009bf6:	bf00      	nop
 8009bf8:	200004b4 	.word	0x200004b4

08009bfc <_isatty_r>:
 8009bfc:	b538      	push	{r3, r4, r5, lr}
 8009bfe:	4d06      	ldr	r5, [pc, #24]	@ (8009c18 <_isatty_r+0x1c>)
 8009c00:	2300      	movs	r3, #0
 8009c02:	4604      	mov	r4, r0
 8009c04:	4608      	mov	r0, r1
 8009c06:	602b      	str	r3, [r5, #0]
 8009c08:	f7f9 f81d 	bl	8002c46 <_isatty>
 8009c0c:	1c43      	adds	r3, r0, #1
 8009c0e:	d102      	bne.n	8009c16 <_isatty_r+0x1a>
 8009c10:	682b      	ldr	r3, [r5, #0]
 8009c12:	b103      	cbz	r3, 8009c16 <_isatty_r+0x1a>
 8009c14:	6023      	str	r3, [r4, #0]
 8009c16:	bd38      	pop	{r3, r4, r5, pc}
 8009c18:	200004b4 	.word	0x200004b4

08009c1c <memcpy>:
 8009c1c:	440a      	add	r2, r1
 8009c1e:	4291      	cmp	r1, r2
 8009c20:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c24:	d100      	bne.n	8009c28 <memcpy+0xc>
 8009c26:	4770      	bx	lr
 8009c28:	b510      	push	{r4, lr}
 8009c2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c32:	4291      	cmp	r1, r2
 8009c34:	d1f9      	bne.n	8009c2a <memcpy+0xe>
 8009c36:	bd10      	pop	{r4, pc}

08009c38 <_realloc_r>:
 8009c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c3c:	4680      	mov	r8, r0
 8009c3e:	4615      	mov	r5, r2
 8009c40:	460c      	mov	r4, r1
 8009c42:	b921      	cbnz	r1, 8009c4e <_realloc_r+0x16>
 8009c44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c48:	4611      	mov	r1, r2
 8009c4a:	f7fe bc6f 	b.w	800852c <_malloc_r>
 8009c4e:	b92a      	cbnz	r2, 8009c5c <_realloc_r+0x24>
 8009c50:	f7fe ffdc 	bl	8008c0c <_free_r>
 8009c54:	2400      	movs	r4, #0
 8009c56:	4620      	mov	r0, r4
 8009c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c5c:	f000 f906 	bl	8009e6c <_malloc_usable_size_r>
 8009c60:	4285      	cmp	r5, r0
 8009c62:	4606      	mov	r6, r0
 8009c64:	d802      	bhi.n	8009c6c <_realloc_r+0x34>
 8009c66:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009c6a:	d8f4      	bhi.n	8009c56 <_realloc_r+0x1e>
 8009c6c:	4629      	mov	r1, r5
 8009c6e:	4640      	mov	r0, r8
 8009c70:	f7fe fc5c 	bl	800852c <_malloc_r>
 8009c74:	4607      	mov	r7, r0
 8009c76:	2800      	cmp	r0, #0
 8009c78:	d0ec      	beq.n	8009c54 <_realloc_r+0x1c>
 8009c7a:	42b5      	cmp	r5, r6
 8009c7c:	462a      	mov	r2, r5
 8009c7e:	4621      	mov	r1, r4
 8009c80:	bf28      	it	cs
 8009c82:	4632      	movcs	r2, r6
 8009c84:	f7ff ffca 	bl	8009c1c <memcpy>
 8009c88:	4621      	mov	r1, r4
 8009c8a:	4640      	mov	r0, r8
 8009c8c:	f7fe ffbe 	bl	8008c0c <_free_r>
 8009c90:	463c      	mov	r4, r7
 8009c92:	e7e0      	b.n	8009c56 <_realloc_r+0x1e>

08009c94 <_strtol_l.constprop.0>:
 8009c94:	2b24      	cmp	r3, #36	@ 0x24
 8009c96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c9a:	4686      	mov	lr, r0
 8009c9c:	4690      	mov	r8, r2
 8009c9e:	d801      	bhi.n	8009ca4 <_strtol_l.constprop.0+0x10>
 8009ca0:	2b01      	cmp	r3, #1
 8009ca2:	d106      	bne.n	8009cb2 <_strtol_l.constprop.0+0x1e>
 8009ca4:	f7fe ff84 	bl	8008bb0 <__errno>
 8009ca8:	2316      	movs	r3, #22
 8009caa:	6003      	str	r3, [r0, #0]
 8009cac:	2000      	movs	r0, #0
 8009cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cb2:	4834      	ldr	r0, [pc, #208]	@ (8009d84 <_strtol_l.constprop.0+0xf0>)
 8009cb4:	460d      	mov	r5, r1
 8009cb6:	462a      	mov	r2, r5
 8009cb8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009cbc:	5d06      	ldrb	r6, [r0, r4]
 8009cbe:	f016 0608 	ands.w	r6, r6, #8
 8009cc2:	d1f8      	bne.n	8009cb6 <_strtol_l.constprop.0+0x22>
 8009cc4:	2c2d      	cmp	r4, #45	@ 0x2d
 8009cc6:	d12d      	bne.n	8009d24 <_strtol_l.constprop.0+0x90>
 8009cc8:	782c      	ldrb	r4, [r5, #0]
 8009cca:	2601      	movs	r6, #1
 8009ccc:	1c95      	adds	r5, r2, #2
 8009cce:	f033 0210 	bics.w	r2, r3, #16
 8009cd2:	d109      	bne.n	8009ce8 <_strtol_l.constprop.0+0x54>
 8009cd4:	2c30      	cmp	r4, #48	@ 0x30
 8009cd6:	d12a      	bne.n	8009d2e <_strtol_l.constprop.0+0x9a>
 8009cd8:	782a      	ldrb	r2, [r5, #0]
 8009cda:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009cde:	2a58      	cmp	r2, #88	@ 0x58
 8009ce0:	d125      	bne.n	8009d2e <_strtol_l.constprop.0+0x9a>
 8009ce2:	786c      	ldrb	r4, [r5, #1]
 8009ce4:	2310      	movs	r3, #16
 8009ce6:	3502      	adds	r5, #2
 8009ce8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009cec:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	fbbc f9f3 	udiv	r9, ip, r3
 8009cf6:	4610      	mov	r0, r2
 8009cf8:	fb03 ca19 	mls	sl, r3, r9, ip
 8009cfc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009d00:	2f09      	cmp	r7, #9
 8009d02:	d81b      	bhi.n	8009d3c <_strtol_l.constprop.0+0xa8>
 8009d04:	463c      	mov	r4, r7
 8009d06:	42a3      	cmp	r3, r4
 8009d08:	dd27      	ble.n	8009d5a <_strtol_l.constprop.0+0xc6>
 8009d0a:	1c57      	adds	r7, r2, #1
 8009d0c:	d007      	beq.n	8009d1e <_strtol_l.constprop.0+0x8a>
 8009d0e:	4581      	cmp	r9, r0
 8009d10:	d320      	bcc.n	8009d54 <_strtol_l.constprop.0+0xc0>
 8009d12:	d101      	bne.n	8009d18 <_strtol_l.constprop.0+0x84>
 8009d14:	45a2      	cmp	sl, r4
 8009d16:	db1d      	blt.n	8009d54 <_strtol_l.constprop.0+0xc0>
 8009d18:	fb00 4003 	mla	r0, r0, r3, r4
 8009d1c:	2201      	movs	r2, #1
 8009d1e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009d22:	e7eb      	b.n	8009cfc <_strtol_l.constprop.0+0x68>
 8009d24:	2c2b      	cmp	r4, #43	@ 0x2b
 8009d26:	bf04      	itt	eq
 8009d28:	782c      	ldrbeq	r4, [r5, #0]
 8009d2a:	1c95      	addeq	r5, r2, #2
 8009d2c:	e7cf      	b.n	8009cce <_strtol_l.constprop.0+0x3a>
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d1da      	bne.n	8009ce8 <_strtol_l.constprop.0+0x54>
 8009d32:	2c30      	cmp	r4, #48	@ 0x30
 8009d34:	bf0c      	ite	eq
 8009d36:	2308      	moveq	r3, #8
 8009d38:	230a      	movne	r3, #10
 8009d3a:	e7d5      	b.n	8009ce8 <_strtol_l.constprop.0+0x54>
 8009d3c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009d40:	2f19      	cmp	r7, #25
 8009d42:	d801      	bhi.n	8009d48 <_strtol_l.constprop.0+0xb4>
 8009d44:	3c37      	subs	r4, #55	@ 0x37
 8009d46:	e7de      	b.n	8009d06 <_strtol_l.constprop.0+0x72>
 8009d48:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009d4c:	2f19      	cmp	r7, #25
 8009d4e:	d804      	bhi.n	8009d5a <_strtol_l.constprop.0+0xc6>
 8009d50:	3c57      	subs	r4, #87	@ 0x57
 8009d52:	e7d8      	b.n	8009d06 <_strtol_l.constprop.0+0x72>
 8009d54:	f04f 32ff 	mov.w	r2, #4294967295
 8009d58:	e7e1      	b.n	8009d1e <_strtol_l.constprop.0+0x8a>
 8009d5a:	1c53      	adds	r3, r2, #1
 8009d5c:	d108      	bne.n	8009d70 <_strtol_l.constprop.0+0xdc>
 8009d5e:	2322      	movs	r3, #34	@ 0x22
 8009d60:	f8ce 3000 	str.w	r3, [lr]
 8009d64:	4660      	mov	r0, ip
 8009d66:	f1b8 0f00 	cmp.w	r8, #0
 8009d6a:	d0a0      	beq.n	8009cae <_strtol_l.constprop.0+0x1a>
 8009d6c:	1e69      	subs	r1, r5, #1
 8009d6e:	e006      	b.n	8009d7e <_strtol_l.constprop.0+0xea>
 8009d70:	b106      	cbz	r6, 8009d74 <_strtol_l.constprop.0+0xe0>
 8009d72:	4240      	negs	r0, r0
 8009d74:	f1b8 0f00 	cmp.w	r8, #0
 8009d78:	d099      	beq.n	8009cae <_strtol_l.constprop.0+0x1a>
 8009d7a:	2a00      	cmp	r2, #0
 8009d7c:	d1f6      	bne.n	8009d6c <_strtol_l.constprop.0+0xd8>
 8009d7e:	f8c8 1000 	str.w	r1, [r8]
 8009d82:	e794      	b.n	8009cae <_strtol_l.constprop.0+0x1a>
 8009d84:	0800a11f 	.word	0x0800a11f

08009d88 <_strtol_r>:
 8009d88:	f7ff bf84 	b.w	8009c94 <_strtol_l.constprop.0>

08009d8c <_strtoul_l.constprop.0>:
 8009d8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009d90:	4e34      	ldr	r6, [pc, #208]	@ (8009e64 <_strtoul_l.constprop.0+0xd8>)
 8009d92:	4686      	mov	lr, r0
 8009d94:	460d      	mov	r5, r1
 8009d96:	4628      	mov	r0, r5
 8009d98:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009d9c:	5d37      	ldrb	r7, [r6, r4]
 8009d9e:	f017 0708 	ands.w	r7, r7, #8
 8009da2:	d1f8      	bne.n	8009d96 <_strtoul_l.constprop.0+0xa>
 8009da4:	2c2d      	cmp	r4, #45	@ 0x2d
 8009da6:	d12f      	bne.n	8009e08 <_strtoul_l.constprop.0+0x7c>
 8009da8:	782c      	ldrb	r4, [r5, #0]
 8009daa:	2701      	movs	r7, #1
 8009dac:	1c85      	adds	r5, r0, #2
 8009dae:	f033 0010 	bics.w	r0, r3, #16
 8009db2:	d109      	bne.n	8009dc8 <_strtoul_l.constprop.0+0x3c>
 8009db4:	2c30      	cmp	r4, #48	@ 0x30
 8009db6:	d12c      	bne.n	8009e12 <_strtoul_l.constprop.0+0x86>
 8009db8:	7828      	ldrb	r0, [r5, #0]
 8009dba:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8009dbe:	2858      	cmp	r0, #88	@ 0x58
 8009dc0:	d127      	bne.n	8009e12 <_strtoul_l.constprop.0+0x86>
 8009dc2:	786c      	ldrb	r4, [r5, #1]
 8009dc4:	2310      	movs	r3, #16
 8009dc6:	3502      	adds	r5, #2
 8009dc8:	f04f 38ff 	mov.w	r8, #4294967295
 8009dcc:	2600      	movs	r6, #0
 8009dce:	fbb8 f8f3 	udiv	r8, r8, r3
 8009dd2:	fb03 f908 	mul.w	r9, r3, r8
 8009dd6:	ea6f 0909 	mvn.w	r9, r9
 8009dda:	4630      	mov	r0, r6
 8009ddc:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8009de0:	f1bc 0f09 	cmp.w	ip, #9
 8009de4:	d81c      	bhi.n	8009e20 <_strtoul_l.constprop.0+0x94>
 8009de6:	4664      	mov	r4, ip
 8009de8:	42a3      	cmp	r3, r4
 8009dea:	dd2a      	ble.n	8009e42 <_strtoul_l.constprop.0+0xb6>
 8009dec:	f1b6 3fff 	cmp.w	r6, #4294967295
 8009df0:	d007      	beq.n	8009e02 <_strtoul_l.constprop.0+0x76>
 8009df2:	4580      	cmp	r8, r0
 8009df4:	d322      	bcc.n	8009e3c <_strtoul_l.constprop.0+0xb0>
 8009df6:	d101      	bne.n	8009dfc <_strtoul_l.constprop.0+0x70>
 8009df8:	45a1      	cmp	r9, r4
 8009dfa:	db1f      	blt.n	8009e3c <_strtoul_l.constprop.0+0xb0>
 8009dfc:	fb00 4003 	mla	r0, r0, r3, r4
 8009e00:	2601      	movs	r6, #1
 8009e02:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e06:	e7e9      	b.n	8009ddc <_strtoul_l.constprop.0+0x50>
 8009e08:	2c2b      	cmp	r4, #43	@ 0x2b
 8009e0a:	bf04      	itt	eq
 8009e0c:	782c      	ldrbeq	r4, [r5, #0]
 8009e0e:	1c85      	addeq	r5, r0, #2
 8009e10:	e7cd      	b.n	8009dae <_strtoul_l.constprop.0+0x22>
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d1d8      	bne.n	8009dc8 <_strtoul_l.constprop.0+0x3c>
 8009e16:	2c30      	cmp	r4, #48	@ 0x30
 8009e18:	bf0c      	ite	eq
 8009e1a:	2308      	moveq	r3, #8
 8009e1c:	230a      	movne	r3, #10
 8009e1e:	e7d3      	b.n	8009dc8 <_strtoul_l.constprop.0+0x3c>
 8009e20:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8009e24:	f1bc 0f19 	cmp.w	ip, #25
 8009e28:	d801      	bhi.n	8009e2e <_strtoul_l.constprop.0+0xa2>
 8009e2a:	3c37      	subs	r4, #55	@ 0x37
 8009e2c:	e7dc      	b.n	8009de8 <_strtoul_l.constprop.0+0x5c>
 8009e2e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8009e32:	f1bc 0f19 	cmp.w	ip, #25
 8009e36:	d804      	bhi.n	8009e42 <_strtoul_l.constprop.0+0xb6>
 8009e38:	3c57      	subs	r4, #87	@ 0x57
 8009e3a:	e7d5      	b.n	8009de8 <_strtoul_l.constprop.0+0x5c>
 8009e3c:	f04f 36ff 	mov.w	r6, #4294967295
 8009e40:	e7df      	b.n	8009e02 <_strtoul_l.constprop.0+0x76>
 8009e42:	1c73      	adds	r3, r6, #1
 8009e44:	d106      	bne.n	8009e54 <_strtoul_l.constprop.0+0xc8>
 8009e46:	2322      	movs	r3, #34	@ 0x22
 8009e48:	f8ce 3000 	str.w	r3, [lr]
 8009e4c:	4630      	mov	r0, r6
 8009e4e:	b932      	cbnz	r2, 8009e5e <_strtoul_l.constprop.0+0xd2>
 8009e50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e54:	b107      	cbz	r7, 8009e58 <_strtoul_l.constprop.0+0xcc>
 8009e56:	4240      	negs	r0, r0
 8009e58:	2a00      	cmp	r2, #0
 8009e5a:	d0f9      	beq.n	8009e50 <_strtoul_l.constprop.0+0xc4>
 8009e5c:	b106      	cbz	r6, 8009e60 <_strtoul_l.constprop.0+0xd4>
 8009e5e:	1e69      	subs	r1, r5, #1
 8009e60:	6011      	str	r1, [r2, #0]
 8009e62:	e7f5      	b.n	8009e50 <_strtoul_l.constprop.0+0xc4>
 8009e64:	0800a11f 	.word	0x0800a11f

08009e68 <_strtoul_r>:
 8009e68:	f7ff bf90 	b.w	8009d8c <_strtoul_l.constprop.0>

08009e6c <_malloc_usable_size_r>:
 8009e6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e70:	1f18      	subs	r0, r3, #4
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	bfbc      	itt	lt
 8009e76:	580b      	ldrlt	r3, [r1, r0]
 8009e78:	18c0      	addlt	r0, r0, r3
 8009e7a:	4770      	bx	lr

08009e7c <_init>:
 8009e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e7e:	bf00      	nop
 8009e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e82:	bc08      	pop	{r3}
 8009e84:	469e      	mov	lr, r3
 8009e86:	4770      	bx	lr

08009e88 <_fini>:
 8009e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e8a:	bf00      	nop
 8009e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e8e:	bc08      	pop	{r3}
 8009e90:	469e      	mov	lr, r3
 8009e92:	4770      	bx	lr
