
communication_try01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d08  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  08007ee8  08007ee8  00008ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080f8  080080f8  0000a07c  2**0
                  CONTENTS
  4 .ARM          00000008  080080f8  080080f8  000090f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008100  08008100  0000a07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008100  08008100  00009100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008104  08008104  00009104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08008108  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000404  2000007c  08008184  0000a07c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000480  08008184  0000a480  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a07c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016941  00000000  00000000  0000a0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002db3  00000000  00000000  000209ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001310  00000000  00000000  000237a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ee3  00000000  00000000  00024ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027516  00000000  00000000  00025993  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017860  00000000  00000000  0004cea9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe2a3  00000000  00000000  00064709  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001629ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057bc  00000000  00000000  001629f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  001681ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000007c 	.word	0x2000007c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007ed0 	.word	0x08007ed0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000080 	.word	0x20000080
 800021c:	08007ed0 	.word	0x08007ed0

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <command_checker>:
int8_t posABS = 0;
int8_t TileON = 0;


char* command_checker(uint8_t* buffer)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
    int8_t ending_condition = 1;
 80005e8:	2301      	movs	r3, #1
 80005ea:	73fb      	strb	r3, [r7, #15]
    int8_t index = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	73bb      	strb	r3, [r7, #14]

    while (ending_condition)
 80005f0:	e00f      	b.n	8000612 <command_checker+0x32>
    {
        if (buffer[index] == '#')
 80005f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005f6:	687a      	ldr	r2, [r7, #4]
 80005f8:	4413      	add	r3, r2
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b23      	cmp	r3, #35	@ 0x23
 80005fe:	d102      	bne.n	8000606 <command_checker+0x26>
        {
            ending_condition = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	73fb      	strb	r3, [r7, #15]
 8000604:	e005      	b.n	8000612 <command_checker+0x32>
        }
        else
        {
            index++;
 8000606:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800060a:	b2db      	uxtb	r3, r3
 800060c:	3301      	adds	r3, #1
 800060e:	b2db      	uxtb	r3, r3
 8000610:	73bb      	strb	r3, [r7, #14]
    while (ending_condition)
 8000612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d1eb      	bne.n	80005f2 <command_checker+0x12>
        }

    }

    // Allocate memory for the command string with an extra byte for the null terminator
    char* command = (char*)malloc(index + 1);
 800061a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800061e:	3301      	adds	r3, #1
 8000620:	4618      	mov	r0, r3
 8000622:	f006 fe0b 	bl	800723c <malloc>
 8000626:	4603      	mov	r3, r0
 8000628:	60bb      	str	r3, [r7, #8]
    if (command == NULL)
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d101      	bne.n	8000634 <command_checker+0x54>
    {
        return NULL;  // Allocation failed
 8000630:	2300      	movs	r3, #0
 8000632:	e00d      	b.n	8000650 <command_checker+0x70>
    }

    // Copy the command part from buffer to the newly allocated string
    strncpy(command, (char*)buffer, index);
 8000634:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000638:	461a      	mov	r2, r3
 800063a:	6879      	ldr	r1, [r7, #4]
 800063c:	68b8      	ldr	r0, [r7, #8]
 800063e:	f006 feef 	bl	8007420 <strncpy>
    command[index] = '\0';  // Null-terminate the string
 8000642:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000646:	68ba      	ldr	r2, [r7, #8]
 8000648:	4413      	add	r3, r2
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]

    return command;
 800064e:	68bb      	ldr	r3, [r7, #8]
}
 8000650:	4618      	mov	r0, r3
 8000652:	3710      	adds	r7, #16
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <head_control>:
char* head_control(void) {
 8000658:	b580      	push	{r7, lr}
 800065a:	b08a      	sub	sp, #40	@ 0x28
 800065c:	af00      	add	r7, sp, #0
    char RxBuffer1[RX_BUFFER_SIZE];
    memset(RxBuffer1, '\0', sizeof(RxBuffer1)); // Clear the buffer
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	2220      	movs	r2, #32
 8000662:	2100      	movs	r1, #0
 8000664:	4618      	mov	r0, r3
 8000666:	f006 fed3 	bl	8007410 <memset>

    char received_char1;
    int8_t index = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // Continue to receive characters until the character '$' is found
    while (1) {
        // Receive one character at a time
        if (HAL_UART_Receive(&huart5, (uint8_t*)&received_char1, 1, HAL_MAX_DELAY) == HAL_OK) {
 8000670:	1cf9      	adds	r1, r7, #3
 8000672:	f04f 33ff 	mov.w	r3, #4294967295
 8000676:	2201      	movs	r2, #1
 8000678:	4817      	ldr	r0, [pc, #92]	@ (80006d8 <head_control+0x80>)
 800067a:	f005 fb55 	bl	8005d28 <HAL_UART_Receive>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d1f5      	bne.n	8000670 <head_control+0x18>
            // Skip adding to buffer if the received character is '\0'
            if (received_char1 == '\0') {
 8000684:	78fb      	ldrb	r3, [r7, #3]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d017      	beq.n	80006ba <head_control+0x62>
                continue;
            }

            RxBuffer1[index++] = received_char1;
 800068a:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 800068e:	b2d3      	uxtb	r3, r2
 8000690:	3301      	adds	r3, #1
 8000692:	b2db      	uxtb	r3, r3
 8000694:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000698:	4613      	mov	r3, r2
 800069a:	78fa      	ldrb	r2, [r7, #3]
 800069c:	3328      	adds	r3, #40	@ 0x28
 800069e:	443b      	add	r3, r7
 80006a0:	f803 2c24 	strb.w	r2, [r3, #-36]
            HAL_Delay(1);
 80006a4:	2001      	movs	r0, #1
 80006a6:	f001 f989 	bl	80019bc <HAL_Delay>
            // Break the loop if the end of the buffer is reached or if '$' is received
            if (index >= RX_BUFFER_SIZE || received_char1 == '$') {
 80006aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80006ae:	2b1f      	cmp	r3, #31
 80006b0:	dc05      	bgt.n	80006be <head_control+0x66>
 80006b2:	78fb      	ldrb	r3, [r7, #3]
 80006b4:	2b24      	cmp	r3, #36	@ 0x24
 80006b6:	d002      	beq.n	80006be <head_control+0x66>
 80006b8:	e7da      	b.n	8000670 <head_control+0x18>
                continue;
 80006ba:	bf00      	nop
        if (HAL_UART_Receive(&huart5, (uint8_t*)&received_char1, 1, HAL_MAX_DELAY) == HAL_OK) {
 80006bc:	e7d8      	b.n	8000670 <head_control+0x18>
            }
        }
    }

    // Null-terminate the string
    RxBuffer1[index] = '\0';
 80006be:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80006c2:	3328      	adds	r3, #40	@ 0x28
 80006c4:	443b      	add	r3, r7
 80006c6:	2200      	movs	r2, #0
 80006c8:	f803 2c24 	strb.w	r2, [r3, #-36]

    return RxBuffer1;
 80006cc:	2300      	movs	r3, #0
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3728      	adds	r7, #40	@ 0x28
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000298 	.word	0x20000298

080006dc <SPI_Communication>:




void SPI_Communication(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08a      	sub	sp, #40	@ 0x28
 80006e0:	af00      	add	r7, sp, #0

    int8_t index = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint8_t receivedData;
    uint8_t pinstate = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 80006e8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006f0:	f001 fcd8 	bl	80020a4 <HAL_GPIO_ReadPin>
 80006f4:	4603      	mov	r3, r0
 80006f6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26


    if (!pinstate) {memset(RxBuffer, 0, sizeof(RxBuffer));}
 80006fa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80006fe:	2b00      	cmp	r3, #0
 8000700:	f040 80fd 	bne.w	80008fe <SPI_Communication+0x222>
 8000704:	2220      	movs	r2, #32
 8000706:	2100      	movs	r1, #0
 8000708:	4882      	ldr	r0, [pc, #520]	@ (8000914 <SPI_Communication+0x238>)
 800070a:	f006 fe81 	bl	8007410 <memset>

    while (!pinstate) {
 800070e:	e0f6      	b.n	80008fe <SPI_Communication+0x222>
        // Receive data from SPI
        HAL_SPI_Receive(&hspi1, &receivedData, 1, HAL_MAX_DELAY);
 8000710:	f107 010b 	add.w	r1, r7, #11
 8000714:	f04f 33ff 	mov.w	r3, #4294967295
 8000718:	2201      	movs	r2, #1
 800071a:	487f      	ldr	r0, [pc, #508]	@ (8000918 <SPI_Communication+0x23c>)
 800071c:	f002 ff42 	bl	80035a4 <HAL_SPI_Receive>

        // Check for buffer overflow
        if (index < MAX_BUFFER_SIZE)
 8000720:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8000724:	2b1f      	cmp	r3, #31
 8000726:	f300 80e1 	bgt.w	80008ec <SPI_Communication+0x210>
        {
            // Store received data in buffer
            RxBuffer[index++] = (char)receivedData;
 800072a:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 800072e:	b2d3      	uxtb	r3, r2
 8000730:	3301      	adds	r3, #1
 8000732:	b2db      	uxtb	r3, r3
 8000734:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000738:	7af9      	ldrb	r1, [r7, #11]
 800073a:	4b76      	ldr	r3, [pc, #472]	@ (8000914 <SPI_Communication+0x238>)
 800073c:	5499      	strb	r1, [r3, r2]

            // Check if end of message
            if ((char)receivedData == END_OF_MESSAGE)
 800073e:	7afb      	ldrb	r3, [r7, #11]
 8000740:	2b24      	cmp	r3, #36	@ 0x24
 8000742:	f040 80d3 	bne.w	80008ec <SPI_Communication+0x210>
            {
            	char* command = command_checker(RxBuffer);
 8000746:	4873      	ldr	r0, [pc, #460]	@ (8000914 <SPI_Communication+0x238>)
 8000748:	f7ff ff4a 	bl	80005e0 <command_checker>
 800074c:	6238      	str	r0, [r7, #32]
            	if(command == NULL){command = "MEM#ERR";}
 800074e:	6a3b      	ldr	r3, [r7, #32]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d102      	bne.n	800075a <SPI_Communication+0x7e>
 8000754:	4b71      	ldr	r3, [pc, #452]	@ (800091c <SPI_Communication+0x240>)
 8000756:	623b      	str	r3, [r7, #32]
 8000758:	e0b0      	b.n	80008bc <SPI_Communication+0x1e0>
////////////////////////////////////////////////////////////////////////////////////////////////////////////
            	else if(strcmp(command, "HEAD") == 0)
 800075a:	4971      	ldr	r1, [pc, #452]	@ (8000920 <SPI_Communication+0x244>)
 800075c:	6a38      	ldr	r0, [r7, #32]
 800075e:	f7ff fd5f 	bl	8000220 <strcmp>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d12e      	bne.n	80007c6 <SPI_Communication+0xea>
            	{

            		HAL_UART_Transmit(&huart5, (uint8_t *)RxBuffer, strlen(RxBuffer), HAL_MAX_DELAY);
 8000768:	486a      	ldr	r0, [pc, #424]	@ (8000914 <SPI_Communication+0x238>)
 800076a:	f7ff fd63 	bl	8000234 <strlen>
 800076e:	4603      	mov	r3, r0
 8000770:	b29a      	uxth	r2, r3
 8000772:	f04f 33ff 	mov.w	r3, #4294967295
 8000776:	4967      	ldr	r1, [pc, #412]	@ (8000914 <SPI_Communication+0x238>)
 8000778:	486a      	ldr	r0, [pc, #424]	@ (8000924 <SPI_Communication+0x248>)
 800077a:	f005 fa47 	bl	8005c0c <HAL_UART_Transmit>
            		HAL_Delay(1);
 800077e:	2001      	movs	r0, #1
 8000780:	f001 f91c 	bl	80019bc <HAL_Delay>
            		char* received_data = head_control();
 8000784:	f7ff ff68 	bl	8000658 <head_control>
 8000788:	60f8      	str	r0, [r7, #12]
            		char* str;
            		memset(TxBuffer, '\0', sizeof(TxBuffer));
 800078a:	2220      	movs	r2, #32
 800078c:	2100      	movs	r1, #0
 800078e:	4866      	ldr	r0, [pc, #408]	@ (8000928 <SPI_Communication+0x24c>)
 8000790:	f006 fe3e 	bl	8007410 <memset>
            		if((strcmp(command, "HEAD#0#F0F0F0F0$") == 0 )|| (strcmp(command, "HEAD#1#F0F0F0F0$") == 0 ) ){str = "MAGNET#NOK$";}
 8000794:	4965      	ldr	r1, [pc, #404]	@ (800092c <SPI_Communication+0x250>)
 8000796:	6a38      	ldr	r0, [r7, #32]
 8000798:	f7ff fd42 	bl	8000220 <strcmp>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d006      	beq.n	80007b0 <SPI_Communication+0xd4>
 80007a2:	4963      	ldr	r1, [pc, #396]	@ (8000930 <SPI_Communication+0x254>)
 80007a4:	6a38      	ldr	r0, [r7, #32]
 80007a6:	f7ff fd3b 	bl	8000220 <strcmp>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d102      	bne.n	80007b6 <SPI_Communication+0xda>
 80007b0:	4b60      	ldr	r3, [pc, #384]	@ (8000934 <SPI_Communication+0x258>)
 80007b2:	61fb      	str	r3, [r7, #28]
 80007b4:	e001      	b.n	80007ba <SPI_Communication+0xde>
            		else{str = "MAGNET#OK$";}
 80007b6:	4b60      	ldr	r3, [pc, #384]	@ (8000938 <SPI_Communication+0x25c>)
 80007b8:	61fb      	str	r3, [r7, #28]
            		strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
 80007ba:	221f      	movs	r2, #31
 80007bc:	69f9      	ldr	r1, [r7, #28]
 80007be:	485a      	ldr	r0, [pc, #360]	@ (8000928 <SPI_Communication+0x24c>)
 80007c0:	f006 fe2e 	bl	8007420 <strncpy>
 80007c4:	e07a      	b.n	80008bc <SPI_Communication+0x1e0>


            	 }
///////////////////////////////////////////////////////////////////////////////////////////////////////////
            	else if(strcmp(command, "MAGNET") == 0)
 80007c6:	495d      	ldr	r1, [pc, #372]	@ (800093c <SPI_Communication+0x260>)
 80007c8:	6a38      	ldr	r0, [r7, #32]
 80007ca:	f7ff fd29 	bl	8000220 <strcmp>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d12c      	bne.n	800082e <SPI_Communication+0x152>
            	{


            		int8_t MagState;
            		HAL_UART_Transmit(&huart5, (uint8_t *)RxBuffer, strlen(RxBuffer), HAL_MAX_DELAY);
 80007d4:	484f      	ldr	r0, [pc, #316]	@ (8000914 <SPI_Communication+0x238>)
 80007d6:	f7ff fd2d 	bl	8000234 <strlen>
 80007da:	4603      	mov	r3, r0
 80007dc:	b29a      	uxth	r2, r3
 80007de:	f04f 33ff 	mov.w	r3, #4294967295
 80007e2:	494c      	ldr	r1, [pc, #304]	@ (8000914 <SPI_Communication+0x238>)
 80007e4:	484f      	ldr	r0, [pc, #316]	@ (8000924 <SPI_Communication+0x248>)
 80007e6:	f005 fa11 	bl	8005c0c <HAL_UART_Transmit>
            		memset(TxBuffer, '\0', sizeof(TxBuffer));
 80007ea:	2220      	movs	r2, #32
 80007ec:	2100      	movs	r1, #0
 80007ee:	484e      	ldr	r0, [pc, #312]	@ (8000928 <SPI_Communication+0x24c>)
 80007f0:	f006 fe0e 	bl	8007410 <memset>
					sscanf(RxBuffer, "MAGNET#%d$", &MagState);
 80007f4:	f107 030a 	add.w	r3, r7, #10
 80007f8:	461a      	mov	r2, r3
 80007fa:	4951      	ldr	r1, [pc, #324]	@ (8000940 <SPI_Communication+0x264>)
 80007fc:	4845      	ldr	r0, [pc, #276]	@ (8000914 <SPI_Communication+0x238>)
 80007fe:	f006 fddb 	bl	80073b8 <siscanf>
					if(MagState != 0){TileON = 1 ;}
 8000802:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d003      	beq.n	8000812 <SPI_Communication+0x136>
 800080a:	4b4e      	ldr	r3, [pc, #312]	@ (8000944 <SPI_Communication+0x268>)
 800080c:	2201      	movs	r2, #1
 800080e:	701a      	strb	r2, [r3, #0]
 8000810:	e002      	b.n	8000818 <SPI_Communication+0x13c>
					else{TileON = 0 ;}
 8000812:	4b4c      	ldr	r3, [pc, #304]	@ (8000944 <SPI_Communication+0x268>)
 8000814:	2200      	movs	r2, #0
 8000816:	701a      	strb	r2, [r3, #0]
            		char *str = "MAGNET#OK$";
 8000818:	4b47      	ldr	r3, [pc, #284]	@ (8000938 <SPI_Communication+0x25c>)
 800081a:	613b      	str	r3, [r7, #16]
            		HAL_Delay(200);
 800081c:	20c8      	movs	r0, #200	@ 0xc8
 800081e:	f001 f8cd 	bl	80019bc <HAL_Delay>
            		strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
 8000822:	221f      	movs	r2, #31
 8000824:	6939      	ldr	r1, [r7, #16]
 8000826:	4840      	ldr	r0, [pc, #256]	@ (8000928 <SPI_Communication+0x24c>)
 8000828:	f006 fdfa 	bl	8007420 <strncpy>
 800082c:	e046      	b.n	80008bc <SPI_Communication+0x1e0>


            	}
///////////////////////////////////////////////////////////////////////////////////////////////////////////
            	else if(strcmp(command,"ROT")==0)
 800082e:	4946      	ldr	r1, [pc, #280]	@ (8000948 <SPI_Communication+0x26c>)
 8000830:	6a38      	ldr	r0, [r7, #32]
 8000832:	f7ff fcf5 	bl	8000220 <strcmp>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d117      	bne.n	800086c <SPI_Communication+0x190>
            	{
            		    int number;
            		    sscanf(RxBuffer, "ROT#%d$", &number);
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	461a      	mov	r2, r3
 8000840:	4942      	ldr	r1, [pc, #264]	@ (800094c <SPI_Communication+0x270>)
 8000842:	4834      	ldr	r0, [pc, #208]	@ (8000914 <SPI_Communication+0x238>)
 8000844:	f006 fdb8 	bl	80073b8 <siscanf>
            		    Motor_Steer(number);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	b25b      	sxtb	r3, r3
 800084c:	4618      	mov	r0, r3
 800084e:	f000 fbf7 	bl	8001040 <Motor_Steer>
            		memset(TxBuffer, '\0', sizeof(TxBuffer));
 8000852:	2220      	movs	r2, #32
 8000854:	2100      	movs	r1, #0
 8000856:	4834      	ldr	r0, [pc, #208]	@ (8000928 <SPI_Communication+0x24c>)
 8000858:	f006 fdda 	bl	8007410 <memset>
            		char *str = "ROT#OK$";
 800085c:	4b3c      	ldr	r3, [pc, #240]	@ (8000950 <SPI_Communication+0x274>)
 800085e:	617b      	str	r3, [r7, #20]
            		strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
 8000860:	221f      	movs	r2, #31
 8000862:	6979      	ldr	r1, [r7, #20]
 8000864:	4830      	ldr	r0, [pc, #192]	@ (8000928 <SPI_Communication+0x24c>)
 8000866:	f006 fddb 	bl	8007420 <strncpy>
 800086a:	e027      	b.n	80008bc <SPI_Communication+0x1e0>
            	}
/////////////////////////////////////////////////////////////////////////////////////////////////////////
            	else if(strcmp(command,"AROT")==0)
 800086c:	4939      	ldr	r1, [pc, #228]	@ (8000954 <SPI_Communication+0x278>)
 800086e:	6a38      	ldr	r0, [r7, #32]
 8000870:	f7ff fcd6 	bl	8000220 <strcmp>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d117      	bne.n	80008aa <SPI_Communication+0x1ce>
            	{

            		 int number;
            		 sscanf(RxBuffer, "AROT#%d$", &number);
 800087a:	463b      	mov	r3, r7
 800087c:	461a      	mov	r2, r3
 800087e:	4936      	ldr	r1, [pc, #216]	@ (8000958 <SPI_Communication+0x27c>)
 8000880:	4824      	ldr	r0, [pc, #144]	@ (8000914 <SPI_Communication+0x238>)
 8000882:	f006 fd99 	bl	80073b8 <siscanf>


            		 ABSRotateHead(number);
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	b25b      	sxtb	r3, r3
 800088a:	4618      	mov	r0, r3
 800088c:	f000 fc7a 	bl	8001184 <ABSRotateHead>

            		 memset(TxBuffer, '\0', sizeof(TxBuffer));
 8000890:	2220      	movs	r2, #32
 8000892:	2100      	movs	r1, #0
 8000894:	4824      	ldr	r0, [pc, #144]	@ (8000928 <SPI_Communication+0x24c>)
 8000896:	f006 fdbb 	bl	8007410 <memset>
            		 char *str = "AROT#OK$";
 800089a:	4b30      	ldr	r3, [pc, #192]	@ (800095c <SPI_Communication+0x280>)
 800089c:	61bb      	str	r3, [r7, #24]
            		 strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
 800089e:	221f      	movs	r2, #31
 80008a0:	69b9      	ldr	r1, [r7, #24]
 80008a2:	4821      	ldr	r0, [pc, #132]	@ (8000928 <SPI_Communication+0x24c>)
 80008a4:	f006 fdbc 	bl	8007420 <strncpy>
 80008a8:	e008      	b.n	80008bc <SPI_Communication+0x1e0>
            	}
/////////////////////////////////////////////////////////////////////////////////////////////////////////
            	else if(strcmp(command,"TILEBASE")==0)
 80008aa:	492d      	ldr	r1, [pc, #180]	@ (8000960 <SPI_Communication+0x284>)
 80008ac:	6a38      	ldr	r0, [r7, #32]
 80008ae:	f7ff fcb7 	bl	8000220 <strcmp>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d101      	bne.n	80008bc <SPI_Communication+0x1e0>
            	{
            		HeadBase();
 80008b8:	f000 fc9c 	bl	80011f4 <HeadBase>
            	}
////////////////////////////////////////////////////////////////////////////////////////////////////////

            	free(command);
 80008bc:	6a38      	ldr	r0, [r7, #32]
 80008be:	f006 fcc5 	bl	800724c <free>
            	command = NULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	623b      	str	r3, [r7, #32]
                HAL_SPI_Transmit(&hspi1, (uint8_t *)TxBuffer, strlen(TxBuffer), HAL_MAX_DELAY);
 80008c6:	4818      	ldr	r0, [pc, #96]	@ (8000928 <SPI_Communication+0x24c>)
 80008c8:	f7ff fcb4 	bl	8000234 <strlen>
 80008cc:	4603      	mov	r3, r0
 80008ce:	b29a      	uxth	r2, r3
 80008d0:	f04f 33ff 	mov.w	r3, #4294967295
 80008d4:	4914      	ldr	r1, [pc, #80]	@ (8000928 <SPI_Communication+0x24c>)
 80008d6:	4810      	ldr	r0, [pc, #64]	@ (8000918 <SPI_Communication+0x23c>)
 80008d8:	f002 fcef 	bl	80032ba <HAL_SPI_Transmit>
                index = 0; // Reset buffer index
 80008dc:	2300      	movs	r3, #0
 80008de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                memset(RxBuffer, '\0', sizeof(RxBuffer));
 80008e2:	2220      	movs	r2, #32
 80008e4:	2100      	movs	r1, #0
 80008e6:	480b      	ldr	r0, [pc, #44]	@ (8000914 <SPI_Communication+0x238>)
 80008e8:	f006 fd92 	bl	8007410 <memset>
            }
        }

        // Update pin state
        pinstate = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 80008ec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008f4:	f001 fbd6 	bl	80020a4 <HAL_GPIO_ReadPin>
 80008f8:	4603      	mov	r3, r0
 80008fa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    while (!pinstate) {
 80008fe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000902:	2b00      	cmp	r3, #0
 8000904:	f43f af04 	beq.w	8000710 <SPI_Communication+0x34>
    }
}
 8000908:	bf00      	nop
 800090a:	bf00      	nop
 800090c:	3728      	adds	r7, #40	@ 0x28
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000098 	.word	0x20000098
 8000918:	200000bc 	.word	0x200000bc
 800091c:	08007ee8 	.word	0x08007ee8
 8000920:	08007ef0 	.word	0x08007ef0
 8000924:	20000298 	.word	0x20000298
 8000928:	20000000 	.word	0x20000000
 800092c:	08007ef8 	.word	0x08007ef8
 8000930:	08007f0c 	.word	0x08007f0c
 8000934:	08007f20 	.word	0x08007f20
 8000938:	08007f2c 	.word	0x08007f2c
 800093c:	08007f38 	.word	0x08007f38
 8000940:	08007f40 	.word	0x08007f40
 8000944:	200000b9 	.word	0x200000b9
 8000948:	08007f4c 	.word	0x08007f4c
 800094c:	08007f50 	.word	0x08007f50
 8000950:	08007f58 	.word	0x08007f58
 8000954:	08007f60 	.word	0x08007f60
 8000958:	08007f68 	.word	0x08007f68
 800095c:	08007f74 	.word	0x08007f74
 8000960:	08007f80 	.word	0x08007f80

08000964 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000968:	f000 ffb7 	bl	80018da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800096c:	f000 f811 	bl	8000992 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000970:	f000 faac 	bl	8000ecc <MX_GPIO_Init>
  MX_SPI1_Init();
 8000974:	f000 f85a 	bl	8000a2c <MX_SPI1_Init>
  MX_UART5_Init();
 8000978:	f000 fa5c 	bl	8000e34 <MX_UART5_Init>
  MX_UART4_Init();
 800097c:	f000 fa0e 	bl	8000d9c <MX_UART4_Init>
  MX_TIM1_Init();
 8000980:	f000 f88c 	bl	8000a9c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000984:	f000 f95e 	bl	8000c44 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000988:	f000 f9b2 	bl	8000cf0 <MX_TIM4_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  SPI_Communication();
 800098c:	f7ff fea6 	bl	80006dc <SPI_Communication>
 8000990:	e7fc      	b.n	800098c <main+0x28>

08000992 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000992:	b580      	push	{r7, lr}
 8000994:	b094      	sub	sp, #80	@ 0x50
 8000996:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000998:	f107 0318 	add.w	r3, r7, #24
 800099c:	2238      	movs	r2, #56	@ 0x38
 800099e:	2100      	movs	r1, #0
 80009a0:	4618      	mov	r0, r3
 80009a2:	f006 fd35 	bl	8007410 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a6:	1d3b      	adds	r3, r7, #4
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009b4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80009b8:	f001 fba4 	bl	8002104 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009bc:	2302      	movs	r3, #2
 80009be:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009c4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009c6:	2340      	movs	r3, #64	@ 0x40
 80009c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ca:	2302      	movs	r3, #2
 80009cc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009ce:	2302      	movs	r3, #2
 80009d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80009d2:	2301      	movs	r3, #1
 80009d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 80009d6:	2308      	movs	r3, #8
 80009d8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009da:	2302      	movs	r3, #2
 80009dc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009de:	2302      	movs	r3, #2
 80009e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009e2:	2302      	movs	r3, #2
 80009e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e6:	f107 0318 	add.w	r3, r7, #24
 80009ea:	4618      	mov	r0, r3
 80009ec:	f001 fc3e 	bl	800226c <HAL_RCC_OscConfig>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <SystemClock_Config+0x68>
  {
    Error_Handler();
 80009f6:	f000 fb09 	bl	800100c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009fa:	230f      	movs	r3, #15
 80009fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009fe:	2303      	movs	r3, #3
 8000a00:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000a02:	2380      	movs	r3, #128	@ 0x80
 8000a04:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a06:	2300      	movs	r3, #0
 8000a08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a0e:	1d3b      	adds	r3, r7, #4
 8000a10:	2101      	movs	r1, #1
 8000a12:	4618      	mov	r0, r3
 8000a14:	f001 ff3c 	bl	8002890 <HAL_RCC_ClockConfig>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000a1e:	f000 faf5 	bl	800100c <Error_Handler>
  }
}
 8000a22:	bf00      	nop
 8000a24:	3750      	adds	r7, #80	@ 0x50
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
	...

08000a2c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a30:	4b18      	ldr	r3, [pc, #96]	@ (8000a94 <MX_SPI1_Init+0x68>)
 8000a32:	4a19      	ldr	r2, [pc, #100]	@ (8000a98 <MX_SPI1_Init+0x6c>)
 8000a34:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000a36:	4b17      	ldr	r3, [pc, #92]	@ (8000a94 <MX_SPI1_Init+0x68>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a3c:	4b15      	ldr	r3, [pc, #84]	@ (8000a94 <MX_SPI1_Init+0x68>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a42:	4b14      	ldr	r3, [pc, #80]	@ (8000a94 <MX_SPI1_Init+0x68>)
 8000a44:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000a48:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a4a:	4b12      	ldr	r3, [pc, #72]	@ (8000a94 <MX_SPI1_Init+0x68>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a50:	4b10      	ldr	r3, [pc, #64]	@ (8000a94 <MX_SPI1_Init+0x68>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000a56:	4b0f      	ldr	r3, [pc, #60]	@ (8000a94 <MX_SPI1_Init+0x68>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000a94 <MX_SPI1_Init+0x68>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a62:	4b0c      	ldr	r3, [pc, #48]	@ (8000a94 <MX_SPI1_Init+0x68>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a68:	4b0a      	ldr	r3, [pc, #40]	@ (8000a94 <MX_SPI1_Init+0x68>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a6e:	4b09      	ldr	r3, [pc, #36]	@ (8000a94 <MX_SPI1_Init+0x68>)
 8000a70:	2207      	movs	r2, #7
 8000a72:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a74:	4b07      	ldr	r3, [pc, #28]	@ (8000a94 <MX_SPI1_Init+0x68>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000a7a:	4b06      	ldr	r3, [pc, #24]	@ (8000a94 <MX_SPI1_Init+0x68>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a80:	4804      	ldr	r0, [pc, #16]	@ (8000a94 <MX_SPI1_Init+0x68>)
 8000a82:	f002 fb6f 	bl	8003164 <HAL_SPI_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8000a8c:	f000 fabe 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	200000bc 	.word	0x200000bc
 8000a98:	40013000 	.word	0x40013000

08000a9c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b09c      	sub	sp, #112	@ 0x70
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aa2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ab0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000abc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
 8000acc:	615a      	str	r2, [r3, #20]
 8000ace:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	2234      	movs	r2, #52	@ 0x34
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f006 fc9a 	bl	8007410 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000adc:	4b57      	ldr	r3, [pc, #348]	@ (8000c3c <MX_TIM1_Init+0x1a0>)
 8000ade:	4a58      	ldr	r2, [pc, #352]	@ (8000c40 <MX_TIM1_Init+0x1a4>)
 8000ae0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ae2:	4b56      	ldr	r3, [pc, #344]	@ (8000c3c <MX_TIM1_Init+0x1a0>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae8:	4b54      	ldr	r3, [pc, #336]	@ (8000c3c <MX_TIM1_Init+0x1a0>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 399;
 8000aee:	4b53      	ldr	r3, [pc, #332]	@ (8000c3c <MX_TIM1_Init+0x1a0>)
 8000af0:	f240 128f 	movw	r2, #399	@ 0x18f
 8000af4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af6:	4b51      	ldr	r3, [pc, #324]	@ (8000c3c <MX_TIM1_Init+0x1a0>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000afc:	4b4f      	ldr	r3, [pc, #316]	@ (8000c3c <MX_TIM1_Init+0x1a0>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b02:	4b4e      	ldr	r3, [pc, #312]	@ (8000c3c <MX_TIM1_Init+0x1a0>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b08:	484c      	ldr	r0, [pc, #304]	@ (8000c3c <MX_TIM1_Init+0x1a0>)
 8000b0a:	f003 fb75 	bl	80041f8 <HAL_TIM_Base_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000b14:	f000 fa7a 	bl	800100c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b1c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b1e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000b22:	4619      	mov	r1, r3
 8000b24:	4845      	ldr	r0, [pc, #276]	@ (8000c3c <MX_TIM1_Init+0x1a0>)
 8000b26:	f004 f8c9 	bl	8004cbc <HAL_TIM_ConfigClockSource>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000b30:	f000 fa6c 	bl	800100c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b34:	4841      	ldr	r0, [pc, #260]	@ (8000c3c <MX_TIM1_Init+0x1a0>)
 8000b36:	f003 fbb6 	bl	80042a6 <HAL_TIM_PWM_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000b40:	f000 fa64 	bl	800100c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b44:	2300      	movs	r3, #0
 8000b46:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b50:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000b54:	4619      	mov	r1, r3
 8000b56:	4839      	ldr	r0, [pc, #228]	@ (8000c3c <MX_TIM1_Init+0x1a0>)
 8000b58:	f004 fe98 	bl	800588c <HAL_TIMEx_MasterConfigSynchronization>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000b62:	f000 fa53 	bl	800100c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b66:	2360      	movs	r3, #96	@ 0x60
 8000b68:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b72:	2300      	movs	r3, #0
 8000b74:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b76:	2300      	movs	r3, #0
 8000b78:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b82:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b86:	2200      	movs	r2, #0
 8000b88:	4619      	mov	r1, r3
 8000b8a:	482c      	ldr	r0, [pc, #176]	@ (8000c3c <MX_TIM1_Init+0x1a0>)
 8000b8c:	f003 ff82 	bl	8004a94 <HAL_TIM_PWM_ConfigChannel>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000b96:	f000 fa39 	bl	800100c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b9a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b9e:	2204      	movs	r2, #4
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4826      	ldr	r0, [pc, #152]	@ (8000c3c <MX_TIM1_Init+0x1a0>)
 8000ba4:	f003 ff76 	bl	8004a94 <HAL_TIM_PWM_ConfigChannel>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000bae:	f000 fa2d 	bl	800100c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bb2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000bb6:	2208      	movs	r2, #8
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4820      	ldr	r0, [pc, #128]	@ (8000c3c <MX_TIM1_Init+0x1a0>)
 8000bbc:	f003 ff6a 	bl	8004a94 <HAL_TIM_PWM_ConfigChannel>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000bc6:	f000 fa21 	bl	800100c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000bca:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000bce:	220c      	movs	r2, #12
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	481a      	ldr	r0, [pc, #104]	@ (8000c3c <MX_TIM1_Init+0x1a0>)
 8000bd4:	f003 ff5e 	bl	8004a94 <HAL_TIM_PWM_ConfigChannel>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8000bde:	f000 fa15 	bl	800100c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000be2:	2300      	movs	r3, #0
 8000be4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000be6:	2300      	movs	r3, #0
 8000be8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bf6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bfa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000c00:	2300      	movs	r3, #0
 8000c02:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c04:	2300      	movs	r3, #0
 8000c06:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c08:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000c12:	2300      	movs	r3, #0
 8000c14:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c16:	2300      	movs	r3, #0
 8000c18:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4807      	ldr	r0, [pc, #28]	@ (8000c3c <MX_TIM1_Init+0x1a0>)
 8000c20:	f004 feca 	bl	80059b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_TIM1_Init+0x192>
  {
    Error_Handler();
 8000c2a:	f000 f9ef 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c2e:	4803      	ldr	r0, [pc, #12]	@ (8000c3c <MX_TIM1_Init+0x1a0>)
 8000c30:	f000 fc86 	bl	8001540 <HAL_TIM_MspPostInit>

}
 8000c34:	bf00      	nop
 8000c36:	3770      	adds	r7, #112	@ 0x70
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20000120 	.word	0x20000120
 8000c40:	40012c00 	.word	0x40012c00

08000c44 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08c      	sub	sp, #48	@ 0x30
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c4a:	f107 030c 	add.w	r3, r7, #12
 8000c4e:	2224      	movs	r2, #36	@ 0x24
 8000c50:	2100      	movs	r1, #0
 8000c52:	4618      	mov	r0, r3
 8000c54:	f006 fbdc 	bl	8007410 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c58:	463b      	mov	r3, r7
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c62:	4b21      	ldr	r3, [pc, #132]	@ (8000ce8 <MX_TIM3_Init+0xa4>)
 8000c64:	4a21      	ldr	r2, [pc, #132]	@ (8000cec <MX_TIM3_Init+0xa8>)
 8000c66:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c68:	4b1f      	ldr	r3, [pc, #124]	@ (8000ce8 <MX_TIM3_Init+0xa4>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c6e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce8 <MX_TIM3_Init+0xa4>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000c74:	4b1c      	ldr	r3, [pc, #112]	@ (8000ce8 <MX_TIM3_Init+0xa4>)
 8000c76:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c7a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce8 <MX_TIM3_Init+0xa4>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c82:	4b19      	ldr	r3, [pc, #100]	@ (8000ce8 <MX_TIM3_Init+0xa4>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c88:	2303      	movs	r3, #3
 8000c8a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c90:	2301      	movs	r3, #1
 8000c92:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c94:	2300      	movs	r3, #0
 8000c96:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000cac:	f107 030c 	add.w	r3, r7, #12
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	480d      	ldr	r0, [pc, #52]	@ (8000ce8 <MX_TIM3_Init+0xa4>)
 8000cb4:	f003 fc6a 	bl	800458c <HAL_TIM_Encoder_Init>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000cbe:	f000 f9a5 	bl	800100c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cca:	463b      	mov	r3, r7
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4806      	ldr	r0, [pc, #24]	@ (8000ce8 <MX_TIM3_Init+0xa4>)
 8000cd0:	f004 fddc 	bl	800588c <HAL_TIMEx_MasterConfigSynchronization>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000cda:	f000 f997 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000cde:	bf00      	nop
 8000ce0:	3730      	adds	r7, #48	@ 0x30
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	2000016c 	.word	0x2000016c
 8000cec:	40000400 	.word	0x40000400

08000cf0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08c      	sub	sp, #48	@ 0x30
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000cf6:	f107 030c 	add.w	r3, r7, #12
 8000cfa:	2224      	movs	r2, #36	@ 0x24
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f006 fb86 	bl	8007410 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d04:	463b      	mov	r3, r7
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d0e:	4b21      	ldr	r3, [pc, #132]	@ (8000d94 <MX_TIM4_Init+0xa4>)
 8000d10:	4a21      	ldr	r2, [pc, #132]	@ (8000d98 <MX_TIM4_Init+0xa8>)
 8000d12:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 8000d14:	4b1f      	ldr	r3, [pc, #124]	@ (8000d94 <MX_TIM4_Init+0xa4>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d1a:	4b1e      	ldr	r3, [pc, #120]	@ (8000d94 <MX_TIM4_Init+0xa4>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000d20:	4b1c      	ldr	r3, [pc, #112]	@ (8000d94 <MX_TIM4_Init+0xa4>)
 8000d22:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d26:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d28:	4b1a      	ldr	r3, [pc, #104]	@ (8000d94 <MX_TIM4_Init+0xa4>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d2e:	4b19      	ldr	r3, [pc, #100]	@ (8000d94 <MX_TIM4_Init+0xa4>)
 8000d30:	2280      	movs	r2, #128	@ 0x80
 8000d32:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000d34:	2303      	movs	r3, #3
 8000d36:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d40:	2300      	movs	r3, #0
 8000d42:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 8000d44:	2301      	movs	r3, #1
 8000d46:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d50:	2300      	movs	r3, #0
 8000d52:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 1;
 8000d54:	2301      	movs	r3, #1
 8000d56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000d58:	f107 030c 	add.w	r3, r7, #12
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	480d      	ldr	r0, [pc, #52]	@ (8000d94 <MX_TIM4_Init+0xa4>)
 8000d60:	f003 fc14 	bl	800458c <HAL_TIM_Encoder_Init>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000d6a:	f000 f94f 	bl	800100c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d72:	2300      	movs	r3, #0
 8000d74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d76:	463b      	mov	r3, r7
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4806      	ldr	r0, [pc, #24]	@ (8000d94 <MX_TIM4_Init+0xa4>)
 8000d7c:	f004 fd86 	bl	800588c <HAL_TIMEx_MasterConfigSynchronization>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000d86:	f000 f941 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d8a:	bf00      	nop
 8000d8c:	3730      	adds	r7, #48	@ 0x30
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	200001b8 	.word	0x200001b8
 8000d98:	40000800 	.word	0x40000800

08000d9c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000da0:	4b22      	ldr	r3, [pc, #136]	@ (8000e2c <MX_UART4_Init+0x90>)
 8000da2:	4a23      	ldr	r2, [pc, #140]	@ (8000e30 <MX_UART4_Init+0x94>)
 8000da4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000da6:	4b21      	ldr	r3, [pc, #132]	@ (8000e2c <MX_UART4_Init+0x90>)
 8000da8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000dac:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000dae:	4b1f      	ldr	r3, [pc, #124]	@ (8000e2c <MX_UART4_Init+0x90>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000db4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e2c <MX_UART4_Init+0x90>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000dba:	4b1c      	ldr	r3, [pc, #112]	@ (8000e2c <MX_UART4_Init+0x90>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000dc0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e2c <MX_UART4_Init+0x90>)
 8000dc2:	220c      	movs	r2, #12
 8000dc4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dc6:	4b19      	ldr	r3, [pc, #100]	@ (8000e2c <MX_UART4_Init+0x90>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dcc:	4b17      	ldr	r3, [pc, #92]	@ (8000e2c <MX_UART4_Init+0x90>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dd2:	4b16      	ldr	r3, [pc, #88]	@ (8000e2c <MX_UART4_Init+0x90>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000dd8:	4b14      	ldr	r3, [pc, #80]	@ (8000e2c <MX_UART4_Init+0x90>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dde:	4b13      	ldr	r3, [pc, #76]	@ (8000e2c <MX_UART4_Init+0x90>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000de4:	4811      	ldr	r0, [pc, #68]	@ (8000e2c <MX_UART4_Init+0x90>)
 8000de6:	f004 fec1 	bl	8005b6c <HAL_UART_Init>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000df0:	f000 f90c 	bl	800100c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000df4:	2100      	movs	r1, #0
 8000df6:	480d      	ldr	r0, [pc, #52]	@ (8000e2c <MX_UART4_Init+0x90>)
 8000df8:	f006 f955 	bl	80070a6 <HAL_UARTEx_SetTxFifoThreshold>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000e02:	f000 f903 	bl	800100c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e06:	2100      	movs	r1, #0
 8000e08:	4808      	ldr	r0, [pc, #32]	@ (8000e2c <MX_UART4_Init+0x90>)
 8000e0a:	f006 f98a 	bl	8007122 <HAL_UARTEx_SetRxFifoThreshold>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000e14:	f000 f8fa 	bl	800100c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000e18:	4804      	ldr	r0, [pc, #16]	@ (8000e2c <MX_UART4_Init+0x90>)
 8000e1a:	f006 f90b 	bl	8007034 <HAL_UARTEx_DisableFifoMode>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000e24:	f000 f8f2 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20000204 	.word	0x20000204
 8000e30:	40004c00 	.word	0x40004c00

08000e34 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000e38:	4b22      	ldr	r3, [pc, #136]	@ (8000ec4 <MX_UART5_Init+0x90>)
 8000e3a:	4a23      	ldr	r2, [pc, #140]	@ (8000ec8 <MX_UART5_Init+0x94>)
 8000e3c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000e3e:	4b21      	ldr	r3, [pc, #132]	@ (8000ec4 <MX_UART5_Init+0x90>)
 8000e40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e44:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000e46:	4b1f      	ldr	r3, [pc, #124]	@ (8000ec4 <MX_UART5_Init+0x90>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000e4c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ec4 <MX_UART5_Init+0x90>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000e52:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec4 <MX_UART5_Init+0x90>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000e58:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec4 <MX_UART5_Init+0x90>)
 8000e5a:	220c      	movs	r2, #12
 8000e5c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e5e:	4b19      	ldr	r3, [pc, #100]	@ (8000ec4 <MX_UART5_Init+0x90>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e64:	4b17      	ldr	r3, [pc, #92]	@ (8000ec4 <MX_UART5_Init+0x90>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e6a:	4b16      	ldr	r3, [pc, #88]	@ (8000ec4 <MX_UART5_Init+0x90>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e70:	4b14      	ldr	r3, [pc, #80]	@ (8000ec4 <MX_UART5_Init+0x90>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e76:	4b13      	ldr	r3, [pc, #76]	@ (8000ec4 <MX_UART5_Init+0x90>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000e7c:	4811      	ldr	r0, [pc, #68]	@ (8000ec4 <MX_UART5_Init+0x90>)
 8000e7e:	f004 fe75 	bl	8005b6c <HAL_UART_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8000e88:	f000 f8c0 	bl	800100c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	480d      	ldr	r0, [pc, #52]	@ (8000ec4 <MX_UART5_Init+0x90>)
 8000e90:	f006 f909 	bl	80070a6 <HAL_UARTEx_SetTxFifoThreshold>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8000e9a:	f000 f8b7 	bl	800100c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4808      	ldr	r0, [pc, #32]	@ (8000ec4 <MX_UART5_Init+0x90>)
 8000ea2:	f006 f93e 	bl	8007122 <HAL_UARTEx_SetRxFifoThreshold>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8000eac:	f000 f8ae 	bl	800100c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8000eb0:	4804      	ldr	r0, [pc, #16]	@ (8000ec4 <MX_UART5_Init+0x90>)
 8000eb2:	f006 f8bf 	bl	8007034 <HAL_UARTEx_DisableFifoMode>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8000ebc:	f000 f8a6 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20000298 	.word	0x20000298
 8000ec8:	40005000 	.word	0x40005000

08000ecc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08c      	sub	sp, #48	@ 0x30
 8000ed0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed2:	f107 031c 	add.w	r3, r7, #28
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	60da      	str	r2, [r3, #12]
 8000ee0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ee2:	4b47      	ldr	r3, [pc, #284]	@ (8001000 <MX_GPIO_Init+0x134>)
 8000ee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ee6:	4a46      	ldr	r2, [pc, #280]	@ (8001000 <MX_GPIO_Init+0x134>)
 8000ee8:	f043 0310 	orr.w	r3, r3, #16
 8000eec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eee:	4b44      	ldr	r3, [pc, #272]	@ (8001000 <MX_GPIO_Init+0x134>)
 8000ef0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ef2:	f003 0310 	and.w	r3, r3, #16
 8000ef6:	61bb      	str	r3, [r7, #24]
 8000ef8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000efa:	4b41      	ldr	r3, [pc, #260]	@ (8001000 <MX_GPIO_Init+0x134>)
 8000efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000efe:	4a40      	ldr	r2, [pc, #256]	@ (8001000 <MX_GPIO_Init+0x134>)
 8000f00:	f043 0320 	orr.w	r3, r3, #32
 8000f04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f06:	4b3e      	ldr	r3, [pc, #248]	@ (8001000 <MX_GPIO_Init+0x134>)
 8000f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f0a:	f003 0320 	and.w	r3, r3, #32
 8000f0e:	617b      	str	r3, [r7, #20]
 8000f10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f12:	4b3b      	ldr	r3, [pc, #236]	@ (8001000 <MX_GPIO_Init+0x134>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f16:	4a3a      	ldr	r2, [pc, #232]	@ (8001000 <MX_GPIO_Init+0x134>)
 8000f18:	f043 0304 	orr.w	r3, r3, #4
 8000f1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f1e:	4b38      	ldr	r3, [pc, #224]	@ (8001000 <MX_GPIO_Init+0x134>)
 8000f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f22:	f003 0304 	and.w	r3, r3, #4
 8000f26:	613b      	str	r3, [r7, #16]
 8000f28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2a:	4b35      	ldr	r3, [pc, #212]	@ (8001000 <MX_GPIO_Init+0x134>)
 8000f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f2e:	4a34      	ldr	r2, [pc, #208]	@ (8001000 <MX_GPIO_Init+0x134>)
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f36:	4b32      	ldr	r3, [pc, #200]	@ (8001000 <MX_GPIO_Init+0x134>)
 8000f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f42:	4b2f      	ldr	r3, [pc, #188]	@ (8001000 <MX_GPIO_Init+0x134>)
 8000f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f46:	4a2e      	ldr	r2, [pc, #184]	@ (8001000 <MX_GPIO_Init+0x134>)
 8000f48:	f043 0308 	orr.w	r3, r3, #8
 8000f4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f4e:	4b2c      	ldr	r3, [pc, #176]	@ (8001000 <MX_GPIO_Init+0x134>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f52:	f003 0308 	and.w	r3, r3, #8
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5a:	4b29      	ldr	r3, [pc, #164]	@ (8001000 <MX_GPIO_Init+0x134>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f5e:	4a28      	ldr	r2, [pc, #160]	@ (8001000 <MX_GPIO_Init+0x134>)
 8000f60:	f043 0302 	orr.w	r3, r3, #2
 8000f64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f66:	4b26      	ldr	r3, [pc, #152]	@ (8001000 <MX_GPIO_Init+0x134>)
 8000f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f6a:	f003 0302 	and.w	r3, r3, #2
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000f72:	2201      	movs	r2, #1
 8000f74:	2108      	movs	r1, #8
 8000f76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f7a:	f001 f8ab 	bl	80020d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8000f7e:	2201      	movs	r2, #1
 8000f80:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f84:	481f      	ldr	r0, [pc, #124]	@ (8001004 <MX_GPIO_Init+0x138>)
 8000f86:	f001 f8a5 	bl	80020d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000f8a:	23ff      	movs	r3, #255	@ 0xff
 8000f8c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f96:	f107 031c 	add.w	r3, r7, #28
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4819      	ldr	r0, [pc, #100]	@ (8001004 <MX_GPIO_Init+0x138>)
 8000f9e:	f000 feff 	bl	8001da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000fa2:	2308      	movs	r3, #8
 8000fa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb2:	f107 031c 	add.w	r3, r7, #28
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fbc:	f000 fef0 	bl	8001da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000fc0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000fc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fd2:	f107 031c 	add.w	r3, r7, #28
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	480a      	ldr	r0, [pc, #40]	@ (8001004 <MX_GPIO_Init+0x138>)
 8000fda:	f000 fee1 	bl	8001da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Limiter_switch_j19_Pin LS2_DRV1_NO_Pin LS1_DRV1_NO_Pin */
  GPIO_InitStruct.Pin = Limiter_switch_j19_Pin|LS2_DRV1_NO_Pin|LS1_DRV1_NO_Pin;
 8000fde:	f44f 43a2 	mov.w	r3, #20736	@ 0x5100
 8000fe2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fec:	f107 031c 	add.w	r3, r7, #28
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4805      	ldr	r0, [pc, #20]	@ (8001008 <MX_GPIO_Init+0x13c>)
 8000ff4:	f000 fed4 	bl	8001da0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ff8:	bf00      	nop
 8000ffa:	3730      	adds	r7, #48	@ 0x30
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40021000 	.word	0x40021000
 8001004:	48001000 	.word	0x48001000
 8001008:	48000c00 	.word	0x48000c00

0800100c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001010:	b672      	cpsid	i
}
 8001012:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001014:	bf00      	nop
 8001016:	e7fd      	b.n	8001014 <Error_Handler+0x8>

08001018 <Motor_Init>:
extern int8_t TileON;

#define MOTOR_SPEED_TILE_ON 250
#define MOTOR_SPEED_TILE_OFF 180

void Motor_Init(void) {
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800101c:	2108      	movs	r1, #8
 800101e:	4806      	ldr	r0, [pc, #24]	@ (8001038 <Motor_Init+0x20>)
 8001020:	f003 f9a2 	bl	8004368 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001024:	210c      	movs	r1, #12
 8001026:	4804      	ldr	r0, [pc, #16]	@ (8001038 <Motor_Init+0x20>)
 8001028:	f003 f99e 	bl	8004368 <HAL_TIM_PWM_Start>
	  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800102c:	213c      	movs	r1, #60	@ 0x3c
 800102e:	4803      	ldr	r0, [pc, #12]	@ (800103c <Motor_Init+0x24>)
 8001030:	f003 fb52 	bl	80046d8 <HAL_TIM_Encoder_Start>
    // Initialize motor control here (if any initialization is needed)
}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000120 	.word	0x20000120
 800103c:	200001b8 	.word	0x200001b8

08001040 <Motor_Steer>:

void Motor_Steer(int8_t target)
{	SlotSensor_Init();
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	71fb      	strb	r3, [r7, #7]
 800104a:	f000 f90d 	bl	8001268 <SlotSensor_Init>
	Motor_Init();
 800104e:	f7ff ffe3 	bl	8001018 <Motor_Init>
	int8_t count = 0 ;
 8001052:	2300      	movs	r3, #0
 8001054:	73fb      	strb	r3, [r7, #15]
	int16_t Motorspeed;

	if(TileON)
 8001056:	4b49      	ldr	r3, [pc, #292]	@ (800117c <Motor_Steer+0x13c>)
 8001058:	f993 3000 	ldrsb.w	r3, [r3]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d044      	beq.n	80010ea <Motor_Steer+0xaa>
	{

		Motorspeed = MOTOR_SPEED_TILE_ON - 1 ;
 8001060:	23f9      	movs	r3, #249	@ 0xf9
 8001062:	81bb      	strh	r3, [r7, #12]
		if(target > 0)
 8001064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001068:	2b00      	cmp	r3, #0
 800106a:	dd1c      	ble.n	80010a6 <Motor_Steer+0x66>
		{

			while(count < target)
 800106c:	e00c      	b.n	8001088 <Motor_Steer+0x48>
			{	  count = SlotSensor_Update();
 800106e:	f000 f911 	bl	8001294 <SlotSensor_Update>
 8001072:	4603      	mov	r3, r0
 8001074:	73fb      	strb	r3, [r7, #15]
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, Motorspeed);
 8001076:	4b42      	ldr	r3, [pc, #264]	@ (8001180 <Motor_Steer+0x140>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800107e:	63da      	str	r2, [r3, #60]	@ 0x3c
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001080:	4b3f      	ldr	r3, [pc, #252]	@ (8001180 <Motor_Steer+0x140>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2200      	movs	r2, #0
 8001086:	641a      	str	r2, [r3, #64]	@ 0x40
			while(count < target)
 8001088:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800108c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001090:	429a      	cmp	r2, r3
 8001092:	dbec      	blt.n	800106e <Motor_Steer+0x2e>
			}
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001094:	4b3a      	ldr	r3, [pc, #232]	@ (8001180 <Motor_Steer+0x140>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2200      	movs	r2, #0
 800109a:	63da      	str	r2, [r3, #60]	@ 0x3c
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 800109c:	4b38      	ldr	r3, [pc, #224]	@ (8001180 <Motor_Steer+0x140>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2200      	movs	r2, #0
 80010a2:	641a      	str	r2, [r3, #64]	@ 0x40
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
		}

	}

}
 80010a4:	e065      	b.n	8001172 <Motor_Steer+0x132>
		else if(target< 0)
 80010a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	da61      	bge.n	8001172 <Motor_Steer+0x132>
			while(count < -target)
 80010ae:	e00c      	b.n	80010ca <Motor_Steer+0x8a>
					{	  count = SlotSensor_Update();
 80010b0:	f000 f8f0 	bl	8001294 <SlotSensor_Update>
 80010b4:	4603      	mov	r3, r0
 80010b6:	73fb      	strb	r3, [r7, #15]
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80010b8:	4b31      	ldr	r3, [pc, #196]	@ (8001180 <Motor_Steer+0x140>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2200      	movs	r2, #0
 80010be:	63da      	str	r2, [r3, #60]	@ 0x3c
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, Motorspeed);
 80010c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001180 <Motor_Steer+0x140>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80010c8:	641a      	str	r2, [r3, #64]	@ 0x40
			while(count < -target)
 80010ca:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80010ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d2:	425b      	negs	r3, r3
 80010d4:	429a      	cmp	r2, r3
 80010d6:	dbeb      	blt.n	80010b0 <Motor_Steer+0x70>
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80010d8:	4b29      	ldr	r3, [pc, #164]	@ (8001180 <Motor_Steer+0x140>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2200      	movs	r2, #0
 80010de:	63da      	str	r2, [r3, #60]	@ 0x3c
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 80010e0:	4b27      	ldr	r3, [pc, #156]	@ (8001180 <Motor_Steer+0x140>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2200      	movs	r2, #0
 80010e6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80010e8:	e043      	b.n	8001172 <Motor_Steer+0x132>
		Motorspeed = MOTOR_SPEED_TILE_OFF -1 ;
 80010ea:	23b3      	movs	r3, #179	@ 0xb3
 80010ec:	81bb      	strh	r3, [r7, #12]
		if(target > 0)
 80010ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	dd1c      	ble.n	8001130 <Motor_Steer+0xf0>
					while(count < target)
 80010f6:	e00c      	b.n	8001112 <Motor_Steer+0xd2>
						count = SlotSensor_Update();
 80010f8:	f000 f8cc 	bl	8001294 <SlotSensor_Update>
 80010fc:	4603      	mov	r3, r0
 80010fe:	73fb      	strb	r3, [r7, #15]
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, Motorspeed);
 8001100:	4b1f      	ldr	r3, [pc, #124]	@ (8001180 <Motor_Steer+0x140>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001108:	63da      	str	r2, [r3, #60]	@ 0x3c
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 800110a:	4b1d      	ldr	r3, [pc, #116]	@ (8001180 <Motor_Steer+0x140>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2200      	movs	r2, #0
 8001110:	641a      	str	r2, [r3, #64]	@ 0x40
					while(count < target)
 8001112:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111a:	429a      	cmp	r2, r3
 800111c:	dbec      	blt.n	80010f8 <Motor_Steer+0xb8>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 800111e:	4b18      	ldr	r3, [pc, #96]	@ (8001180 <Motor_Steer+0x140>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2200      	movs	r2, #0
 8001124:	63da      	str	r2, [r3, #60]	@ 0x3c
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001126:	4b16      	ldr	r3, [pc, #88]	@ (8001180 <Motor_Steer+0x140>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2200      	movs	r2, #0
 800112c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800112e:	e020      	b.n	8001172 <Motor_Steer+0x132>
		else if(target< 0)
 8001130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001134:	2b00      	cmp	r3, #0
 8001136:	da1c      	bge.n	8001172 <Motor_Steer+0x132>
			while(count < -target)
 8001138:	e00c      	b.n	8001154 <Motor_Steer+0x114>
				count = SlotSensor_Update();
 800113a:	f000 f8ab 	bl	8001294 <SlotSensor_Update>
 800113e:	4603      	mov	r3, r0
 8001140:	73fb      	strb	r3, [r7, #15]
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001142:	4b0f      	ldr	r3, [pc, #60]	@ (8001180 <Motor_Steer+0x140>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2200      	movs	r2, #0
 8001148:	63da      	str	r2, [r3, #60]	@ 0x3c
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, Motorspeed);
 800114a:	4b0d      	ldr	r3, [pc, #52]	@ (8001180 <Motor_Steer+0x140>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001152:	641a      	str	r2, [r3, #64]	@ 0x40
			while(count < -target)
 8001154:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115c:	425b      	negs	r3, r3
 800115e:	429a      	cmp	r2, r3
 8001160:	dbeb      	blt.n	800113a <Motor_Steer+0xfa>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001162:	4b07      	ldr	r3, [pc, #28]	@ (8001180 <Motor_Steer+0x140>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2200      	movs	r2, #0
 8001168:	63da      	str	r2, [r3, #60]	@ 0x3c
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 800116a:	4b05      	ldr	r3, [pc, #20]	@ (8001180 <Motor_Steer+0x140>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2200      	movs	r2, #0
 8001170:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001172:	bf00      	nop
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	200000b9 	.word	0x200000b9
 8001180:	20000120 	.word	0x20000120

08001184 <ABSRotateHead>:
	Motor_Steer(target_position);


}
int8_t ABSRotateHead(int8_t target_position)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]

	int8_t absolute_target_position = target_position*5 - posABS;
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	461a      	mov	r2, r3
 8001192:	0092      	lsls	r2, r2, #2
 8001194:	4413      	add	r3, r2
 8001196:	b2da      	uxtb	r2, r3
 8001198:	4b14      	ldr	r3, [pc, #80]	@ (80011ec <ABSRotateHead+0x68>)
 800119a:	f993 3000 	ldrsb.w	r3, [r3]
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	73fb      	strb	r3, [r7, #15]

	Motor_Steer(absolute_target_position);
 80011a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff ff48 	bl	8001040 <Motor_Steer>
	if(target_position*5 != posABS){posABS = target_position*5;}
 80011b0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80011b4:	4613      	mov	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	4413      	add	r3, r2
 80011ba:	4a0c      	ldr	r2, [pc, #48]	@ (80011ec <ABSRotateHead+0x68>)
 80011bc:	f992 2000 	ldrsb.w	r2, [r2]
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d008      	beq.n	80011d6 <ABSRotateHead+0x52>
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	461a      	mov	r2, r3
 80011c8:	0092      	lsls	r2, r2, #2
 80011ca:	4413      	add	r3, r2
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	b25a      	sxtb	r2, r3
 80011d0:	4b06      	ldr	r3, [pc, #24]	@ (80011ec <ABSRotateHead+0x68>)
 80011d2:	701a      	strb	r2, [r3, #0]
 80011d4:	e004      	b.n	80011e0 <ABSRotateHead+0x5c>
	else{HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);}
 80011d6:	2200      	movs	r2, #0
 80011d8:	2110      	movs	r1, #16
 80011da:	4805      	ldr	r0, [pc, #20]	@ (80011f0 <ABSRotateHead+0x6c>)
 80011dc:	f000 ff7a 	bl	80020d4 <HAL_GPIO_WritePin>
return 1;
 80011e0:	2301      	movs	r3, #1


}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	200000b8 	.word	0x200000b8
 80011f0:	48000400 	.word	0x48000400

080011f4 <HeadBase>:
void HeadBase(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0

	int16_t BaseSpeed = 150;
 80011fa:	2396      	movs	r3, #150	@ 0x96
 80011fc:	80bb      	strh	r3, [r7, #4]
	Motor_Init();
 80011fe:	f7ff ff0b 	bl	8001018 <Motor_Init>
	uint8_t pinstate1;
	pinstate1 = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8);
 8001202:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001206:	4816      	ldr	r0, [pc, #88]	@ (8001260 <HeadBase+0x6c>)
 8001208:	f000 ff4c 	bl	80020a4 <HAL_GPIO_ReadPin>
 800120c:	4603      	mov	r3, r0
 800120e:	71fb      	strb	r3, [r7, #7]

	while(pinstate1)
 8001210:	e010      	b.n	8001234 <HeadBase+0x40>
	{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001212:	4b14      	ldr	r3, [pc, #80]	@ (8001264 <HeadBase+0x70>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2200      	movs	r2, #0
 8001218:	63da      	str	r2, [r3, #60]	@ 0x3c
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, BaseSpeed-1);
 800121a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800121e:	1e5a      	subs	r2, r3, #1
 8001220:	4b10      	ldr	r3, [pc, #64]	@ (8001264 <HeadBase+0x70>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	641a      	str	r2, [r3, #64]	@ 0x40

		pinstate1 = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8);
 8001226:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800122a:	480d      	ldr	r0, [pc, #52]	@ (8001260 <HeadBase+0x6c>)
 800122c:	f000 ff3a 	bl	80020a4 <HAL_GPIO_ReadPin>
 8001230:	4603      	mov	r3, r0
 8001232:	71fb      	strb	r3, [r7, #7]
	while(pinstate1)
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d1eb      	bne.n	8001212 <HeadBase+0x1e>

	}

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 800123a:	4b0a      	ldr	r3, [pc, #40]	@ (8001264 <HeadBase+0x70>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2200      	movs	r2, #0
 8001240:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001242:	4b08      	ldr	r3, [pc, #32]	@ (8001264 <HeadBase+0x70>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2200      	movs	r2, #0
 8001248:	641a      	str	r2, [r3, #64]	@ 0x40
	HAL_Delay(2000);
 800124a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800124e:	f000 fbb5 	bl	80019bc <HAL_Delay>
	Motor_Steer(3);
 8001252:	2003      	movs	r0, #3
 8001254:	f7ff fef4 	bl	8001040 <Motor_Steer>

}
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	48000c00 	.word	0x48000c00
 8001264:	20000120 	.word	0x20000120

08001268 <SlotSensor_Init>:

// Counter for slot sensor
static GPIO_PinState last_state = GPIO_PIN_RESET; // Last state of the sensor
int8_t counter = 0;

void SlotSensor_Init(void) {
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
	counter = 0;
 800126c:	4b06      	ldr	r3, [pc, #24]	@ (8001288 <SlotSensor_Init+0x20>)
 800126e:	2200      	movs	r2, #0
 8001270:	701a      	strb	r2, [r3, #0]
    // Initialize the last state
    last_state = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7);
 8001272:	2180      	movs	r1, #128	@ 0x80
 8001274:	4805      	ldr	r0, [pc, #20]	@ (800128c <SlotSensor_Init+0x24>)
 8001276:	f000 ff15 	bl	80020a4 <HAL_GPIO_ReadPin>
 800127a:	4603      	mov	r3, r0
 800127c:	461a      	mov	r2, r3
 800127e:	4b04      	ldr	r3, [pc, #16]	@ (8001290 <SlotSensor_Init+0x28>)
 8001280:	701a      	strb	r2, [r3, #0]
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	2000032d 	.word	0x2000032d
 800128c:	48001000 	.word	0x48001000
 8001290:	2000032c 	.word	0x2000032c

08001294 <SlotSensor_Update>:

int SlotSensor_Update(void) {
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
    GPIO_PinState current_state = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7); // Read pin state
 800129a:	2180      	movs	r1, #128	@ 0x80
 800129c:	480f      	ldr	r0, [pc, #60]	@ (80012dc <SlotSensor_Update+0x48>)
 800129e:	f000 ff01 	bl	80020a4 <HAL_GPIO_ReadPin>
 80012a2:	4603      	mov	r3, r0
 80012a4:	71fb      	strb	r3, [r7, #7]

    // Check for a change in state
    if (current_state == GPIO_PIN_SET && last_state == GPIO_PIN_RESET) {
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d10c      	bne.n	80012c6 <SlotSensor_Update+0x32>
 80012ac:	4b0c      	ldr	r3, [pc, #48]	@ (80012e0 <SlotSensor_Update+0x4c>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d108      	bne.n	80012c6 <SlotSensor_Update+0x32>
        counter++; // Increment counter on state change
 80012b4:	4b0b      	ldr	r3, [pc, #44]	@ (80012e4 <SlotSensor_Update+0x50>)
 80012b6:	f993 3000 	ldrsb.w	r3, [r3]
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	3301      	adds	r3, #1
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	b25a      	sxtb	r2, r3
 80012c2:	4b08      	ldr	r3, [pc, #32]	@ (80012e4 <SlotSensor_Update+0x50>)
 80012c4:	701a      	strb	r2, [r3, #0]
         // Update last state
    }
    last_state = current_state;
 80012c6:	4a06      	ldr	r2, [pc, #24]	@ (80012e0 <SlotSensor_Update+0x4c>)
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	7013      	strb	r3, [r2, #0]
    return counter ;
 80012cc:	4b05      	ldr	r3, [pc, #20]	@ (80012e4 <SlotSensor_Update+0x50>)
 80012ce:	f993 3000 	ldrsb.w	r3, [r3]
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	48001000 	.word	0x48001000
 80012e0:	2000032c 	.word	0x2000032c
 80012e4:	2000032d 	.word	0x2000032d

080012e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ee:	4b0f      	ldr	r3, [pc, #60]	@ (800132c <HAL_MspInit+0x44>)
 80012f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012f2:	4a0e      	ldr	r2, [pc, #56]	@ (800132c <HAL_MspInit+0x44>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80012fa:	4b0c      	ldr	r3, [pc, #48]	@ (800132c <HAL_MspInit+0x44>)
 80012fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001306:	4b09      	ldr	r3, [pc, #36]	@ (800132c <HAL_MspInit+0x44>)
 8001308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800130a:	4a08      	ldr	r2, [pc, #32]	@ (800132c <HAL_MspInit+0x44>)
 800130c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001310:	6593      	str	r3, [r2, #88]	@ 0x58
 8001312:	4b06      	ldr	r3, [pc, #24]	@ (800132c <HAL_MspInit+0x44>)
 8001314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001316:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800131a:	603b      	str	r3, [r7, #0]
 800131c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800131e:	f000 ff95 	bl	800224c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40021000 	.word	0x40021000

08001330 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08a      	sub	sp, #40	@ 0x28
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a2a      	ldr	r2, [pc, #168]	@ (80013f8 <HAL_SPI_MspInit+0xc8>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d14d      	bne.n	80013ee <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001352:	4b2a      	ldr	r3, [pc, #168]	@ (80013fc <HAL_SPI_MspInit+0xcc>)
 8001354:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001356:	4a29      	ldr	r2, [pc, #164]	@ (80013fc <HAL_SPI_MspInit+0xcc>)
 8001358:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800135c:	6613      	str	r3, [r2, #96]	@ 0x60
 800135e:	4b27      	ldr	r3, [pc, #156]	@ (80013fc <HAL_SPI_MspInit+0xcc>)
 8001360:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001362:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001366:	613b      	str	r3, [r7, #16]
 8001368:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800136a:	4b24      	ldr	r3, [pc, #144]	@ (80013fc <HAL_SPI_MspInit+0xcc>)
 800136c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136e:	4a23      	ldr	r2, [pc, #140]	@ (80013fc <HAL_SPI_MspInit+0xcc>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001376:	4b21      	ldr	r3, [pc, #132]	@ (80013fc <HAL_SPI_MspInit+0xcc>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001382:	4b1e      	ldr	r3, [pc, #120]	@ (80013fc <HAL_SPI_MspInit+0xcc>)
 8001384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001386:	4a1d      	ldr	r2, [pc, #116]	@ (80013fc <HAL_SPI_MspInit+0xcc>)
 8001388:	f043 0302 	orr.w	r3, r3, #2
 800138c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800138e:	4b1b      	ldr	r3, [pc, #108]	@ (80013fc <HAL_SPI_MspInit+0xcc>)
 8001390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800139a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800139e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a0:	2302      	movs	r3, #2
 80013a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a8:	2303      	movs	r3, #3
 80013aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013ac:	2305      	movs	r3, #5
 80013ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b0:	f107 0314 	add.w	r3, r7, #20
 80013b4:	4619      	mov	r1, r3
 80013b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013ba:	f000 fcf1 	bl	8001da0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80013be:	2338      	movs	r3, #56	@ 0x38
 80013c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c2:	2302      	movs	r3, #2
 80013c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ca:	2303      	movs	r3, #3
 80013cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013ce:	2305      	movs	r3, #5
 80013d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d2:	f107 0314 	add.w	r3, r7, #20
 80013d6:	4619      	mov	r1, r3
 80013d8:	4809      	ldr	r0, [pc, #36]	@ (8001400 <HAL_SPI_MspInit+0xd0>)
 80013da:	f000 fce1 	bl	8001da0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80013de:	2200      	movs	r2, #0
 80013e0:	2100      	movs	r1, #0
 80013e2:	2023      	movs	r0, #35	@ 0x23
 80013e4:	f000 fbe7 	bl	8001bb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80013e8:	2023      	movs	r0, #35	@ 0x23
 80013ea:	f000 fbfe 	bl	8001bea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80013ee:	bf00      	nop
 80013f0:	3728      	adds	r7, #40	@ 0x28
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40013000 	.word	0x40013000
 80013fc:	40021000 	.word	0x40021000
 8001400:	48000400 	.word	0x48000400

08001404 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a0a      	ldr	r2, [pc, #40]	@ (800143c <HAL_TIM_Base_MspInit+0x38>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d10b      	bne.n	800142e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001416:	4b0a      	ldr	r3, [pc, #40]	@ (8001440 <HAL_TIM_Base_MspInit+0x3c>)
 8001418:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800141a:	4a09      	ldr	r2, [pc, #36]	@ (8001440 <HAL_TIM_Base_MspInit+0x3c>)
 800141c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001420:	6613      	str	r3, [r2, #96]	@ 0x60
 8001422:	4b07      	ldr	r3, [pc, #28]	@ (8001440 <HAL_TIM_Base_MspInit+0x3c>)
 8001424:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001426:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800142e:	bf00      	nop
 8001430:	3714      	adds	r7, #20
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	40012c00 	.word	0x40012c00
 8001440:	40021000 	.word	0x40021000

08001444 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08c      	sub	sp, #48	@ 0x30
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	f107 031c 	add.w	r3, r7, #28
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a33      	ldr	r2, [pc, #204]	@ (8001530 <HAL_TIM_Encoder_MspInit+0xec>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d128      	bne.n	80014b8 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001466:	4b33      	ldr	r3, [pc, #204]	@ (8001534 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800146a:	4a32      	ldr	r2, [pc, #200]	@ (8001534 <HAL_TIM_Encoder_MspInit+0xf0>)
 800146c:	f043 0302 	orr.w	r3, r3, #2
 8001470:	6593      	str	r3, [r2, #88]	@ 0x58
 8001472:	4b30      	ldr	r3, [pc, #192]	@ (8001534 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	61bb      	str	r3, [r7, #24]
 800147c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800147e:	4b2d      	ldr	r3, [pc, #180]	@ (8001534 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001482:	4a2c      	ldr	r2, [pc, #176]	@ (8001534 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001484:	f043 0304 	orr.w	r3, r3, #4
 8001488:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800148a:	4b2a      	ldr	r3, [pc, #168]	@ (8001534 <HAL_TIM_Encoder_MspInit+0xf0>)
 800148c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800148e:	f003 0304 	and.w	r3, r3, #4
 8001492:	617b      	str	r3, [r7, #20]
 8001494:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Motor_B_EN_CH1_Pin|Motor_B_EN_CH2_Pin;
 8001496:	23c0      	movs	r3, #192	@ 0xc0
 8001498:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149a:	2302      	movs	r3, #2
 800149c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a2:	2300      	movs	r3, #0
 80014a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014a6:	2302      	movs	r3, #2
 80014a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014aa:	f107 031c 	add.w	r3, r7, #28
 80014ae:	4619      	mov	r1, r3
 80014b0:	4821      	ldr	r0, [pc, #132]	@ (8001538 <HAL_TIM_Encoder_MspInit+0xf4>)
 80014b2:	f000 fc75 	bl	8001da0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80014b6:	e036      	b.n	8001526 <HAL_TIM_Encoder_MspInit+0xe2>
  else if(htim_encoder->Instance==TIM4)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a1f      	ldr	r2, [pc, #124]	@ (800153c <HAL_TIM_Encoder_MspInit+0xf8>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d131      	bne.n	8001526 <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80014c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001534 <HAL_TIM_Encoder_MspInit+0xf0>)
 80014c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014c6:	4a1b      	ldr	r2, [pc, #108]	@ (8001534 <HAL_TIM_Encoder_MspInit+0xf0>)
 80014c8:	f043 0304 	orr.w	r3, r3, #4
 80014cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80014ce:	4b19      	ldr	r3, [pc, #100]	@ (8001534 <HAL_TIM_Encoder_MspInit+0xf0>)
 80014d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014d2:	f003 0304 	and.w	r3, r3, #4
 80014d6:	613b      	str	r3, [r7, #16]
 80014d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014da:	4b16      	ldr	r3, [pc, #88]	@ (8001534 <HAL_TIM_Encoder_MspInit+0xf0>)
 80014dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014de:	4a15      	ldr	r2, [pc, #84]	@ (8001534 <HAL_TIM_Encoder_MspInit+0xf0>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014e6:	4b13      	ldr	r3, [pc, #76]	@ (8001534 <HAL_TIM_Encoder_MspInit+0xf0>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Motor_A_EN_CH2_Pin|Motor_A_EN_CH1_Pin;
 80014f2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80014f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f8:	2302      	movs	r3, #2
 80014fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001500:	2300      	movs	r3, #0
 8001502:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001504:	230a      	movs	r3, #10
 8001506:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001508:	f107 031c 	add.w	r3, r7, #28
 800150c:	4619      	mov	r1, r3
 800150e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001512:	f000 fc45 	bl	8001da0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001516:	2200      	movs	r2, #0
 8001518:	2100      	movs	r1, #0
 800151a:	201e      	movs	r0, #30
 800151c:	f000 fb4b 	bl	8001bb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001520:	201e      	movs	r0, #30
 8001522:	f000 fb62 	bl	8001bea <HAL_NVIC_EnableIRQ>
}
 8001526:	bf00      	nop
 8001528:	3730      	adds	r7, #48	@ 0x30
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40000400 	.word	0x40000400
 8001534:	40021000 	.word	0x40021000
 8001538:	48000800 	.word	0x48000800
 800153c:	40000800 	.word	0x40000800

08001540 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b088      	sub	sp, #32
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001548:	f107 030c 	add.w	r3, r7, #12
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a11      	ldr	r2, [pc, #68]	@ (80015a4 <HAL_TIM_MspPostInit+0x64>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d11b      	bne.n	800159a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001562:	4b11      	ldr	r3, [pc, #68]	@ (80015a8 <HAL_TIM_MspPostInit+0x68>)
 8001564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001566:	4a10      	ldr	r2, [pc, #64]	@ (80015a8 <HAL_TIM_MspPostInit+0x68>)
 8001568:	f043 0304 	orr.w	r3, r3, #4
 800156c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800156e:	4b0e      	ldr	r3, [pc, #56]	@ (80015a8 <HAL_TIM_MspPostInit+0x68>)
 8001570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001572:	f003 0304 	and.w	r3, r3, #4
 8001576:	60bb      	str	r3, [r7, #8]
 8001578:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Motor_A_CH1_Pin|Motor_A_CH2_Pin|Motor_B_CH3_Pin|Motor_A_CH4_Pin;
 800157a:	230f      	movs	r3, #15
 800157c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157e:	2302      	movs	r3, #2
 8001580:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001586:	2300      	movs	r3, #0
 8001588:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800158a:	2302      	movs	r3, #2
 800158c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800158e:	f107 030c 	add.w	r3, r7, #12
 8001592:	4619      	mov	r1, r3
 8001594:	4805      	ldr	r0, [pc, #20]	@ (80015ac <HAL_TIM_MspPostInit+0x6c>)
 8001596:	f000 fc03 	bl	8001da0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800159a:	bf00      	nop
 800159c:	3720      	adds	r7, #32
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40012c00 	.word	0x40012c00
 80015a8:	40021000 	.word	0x40021000
 80015ac:	48000800 	.word	0x48000800

080015b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b0a2      	sub	sp, #136	@ 0x88
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015c8:	f107 0320 	add.w	r3, r7, #32
 80015cc:	2254      	movs	r2, #84	@ 0x54
 80015ce:	2100      	movs	r1, #0
 80015d0:	4618      	mov	r0, r3
 80015d2:	f005 ff1d 	bl	8007410 <memset>
  if(huart->Instance==UART4)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a56      	ldr	r2, [pc, #344]	@ (8001734 <HAL_UART_MspInit+0x184>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d141      	bne.n	8001664 <HAL_UART_MspInit+0xb4>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80015e0:	2308      	movs	r3, #8
 80015e2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80015e4:	2300      	movs	r3, #0
 80015e6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015e8:	f107 0320 	add.w	r3, r7, #32
 80015ec:	4618      	mov	r0, r3
 80015ee:	f001 fb6b 	bl	8002cc8 <HAL_RCCEx_PeriphCLKConfig>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80015f8:	f7ff fd08 	bl	800100c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80015fc:	4b4e      	ldr	r3, [pc, #312]	@ (8001738 <HAL_UART_MspInit+0x188>)
 80015fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001600:	4a4d      	ldr	r2, [pc, #308]	@ (8001738 <HAL_UART_MspInit+0x188>)
 8001602:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001606:	6593      	str	r3, [r2, #88]	@ 0x58
 8001608:	4b4b      	ldr	r3, [pc, #300]	@ (8001738 <HAL_UART_MspInit+0x188>)
 800160a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800160c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001610:	61fb      	str	r3, [r7, #28]
 8001612:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001614:	4b48      	ldr	r3, [pc, #288]	@ (8001738 <HAL_UART_MspInit+0x188>)
 8001616:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001618:	4a47      	ldr	r2, [pc, #284]	@ (8001738 <HAL_UART_MspInit+0x188>)
 800161a:	f043 0304 	orr.w	r3, r3, #4
 800161e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001620:	4b45      	ldr	r3, [pc, #276]	@ (8001738 <HAL_UART_MspInit+0x188>)
 8001622:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001624:	f003 0304 	and.w	r3, r3, #4
 8001628:	61bb      	str	r3, [r7, #24]
 800162a:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800162c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001630:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001632:	2302      	movs	r3, #2
 8001634:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163a:	2300      	movs	r3, #0
 800163c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8001640:	2305      	movs	r3, #5
 8001642:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001646:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800164a:	4619      	mov	r1, r3
 800164c:	483b      	ldr	r0, [pc, #236]	@ (800173c <HAL_UART_MspInit+0x18c>)
 800164e:	f000 fba7 	bl	8001da0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001652:	2200      	movs	r2, #0
 8001654:	2100      	movs	r1, #0
 8001656:	2034      	movs	r0, #52	@ 0x34
 8001658:	f000 faad 	bl	8001bb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800165c:	2034      	movs	r0, #52	@ 0x34
 800165e:	f000 fac4 	bl	8001bea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8001662:	e063      	b.n	800172c <HAL_UART_MspInit+0x17c>
  else if(huart->Instance==UART5)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a35      	ldr	r2, [pc, #212]	@ (8001740 <HAL_UART_MspInit+0x190>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d15e      	bne.n	800172c <HAL_UART_MspInit+0x17c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800166e:	2310      	movs	r3, #16
 8001670:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001672:	2300      	movs	r3, #0
 8001674:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001676:	f107 0320 	add.w	r3, r7, #32
 800167a:	4618      	mov	r0, r3
 800167c:	f001 fb24 	bl	8002cc8 <HAL_RCCEx_PeriphCLKConfig>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <HAL_UART_MspInit+0xda>
      Error_Handler();
 8001686:	f7ff fcc1 	bl	800100c <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 800168a:	4b2b      	ldr	r3, [pc, #172]	@ (8001738 <HAL_UART_MspInit+0x188>)
 800168c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800168e:	4a2a      	ldr	r2, [pc, #168]	@ (8001738 <HAL_UART_MspInit+0x188>)
 8001690:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001694:	6593      	str	r3, [r2, #88]	@ 0x58
 8001696:	4b28      	ldr	r3, [pc, #160]	@ (8001738 <HAL_UART_MspInit+0x188>)
 8001698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800169a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800169e:	617b      	str	r3, [r7, #20]
 80016a0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a2:	4b25      	ldr	r3, [pc, #148]	@ (8001738 <HAL_UART_MspInit+0x188>)
 80016a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016a6:	4a24      	ldr	r2, [pc, #144]	@ (8001738 <HAL_UART_MspInit+0x188>)
 80016a8:	f043 0304 	orr.w	r3, r3, #4
 80016ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ae:	4b22      	ldr	r3, [pc, #136]	@ (8001738 <HAL_UART_MspInit+0x188>)
 80016b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016b2:	f003 0304 	and.w	r3, r3, #4
 80016b6:	613b      	str	r3, [r7, #16]
 80016b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001738 <HAL_UART_MspInit+0x188>)
 80016bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016be:	4a1e      	ldr	r2, [pc, #120]	@ (8001738 <HAL_UART_MspInit+0x188>)
 80016c0:	f043 0308 	orr.w	r3, r3, #8
 80016c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001738 <HAL_UART_MspInit+0x188>)
 80016c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ca:	f003 0308 	and.w	r3, r3, #8
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80016d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016d6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d8:	2302      	movs	r3, #2
 80016da:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e0:	2300      	movs	r3, #0
 80016e2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80016e6:	2305      	movs	r3, #5
 80016e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ec:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80016f0:	4619      	mov	r1, r3
 80016f2:	4812      	ldr	r0, [pc, #72]	@ (800173c <HAL_UART_MspInit+0x18c>)
 80016f4:	f000 fb54 	bl	8001da0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016f8:	2304      	movs	r3, #4
 80016fa:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fc:	2302      	movs	r3, #2
 80016fe:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001704:	2300      	movs	r3, #0
 8001706:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 800170a:	2305      	movs	r3, #5
 800170c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001710:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001714:	4619      	mov	r1, r3
 8001716:	480b      	ldr	r0, [pc, #44]	@ (8001744 <HAL_UART_MspInit+0x194>)
 8001718:	f000 fb42 	bl	8001da0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800171c:	2200      	movs	r2, #0
 800171e:	2100      	movs	r1, #0
 8001720:	2035      	movs	r0, #53	@ 0x35
 8001722:	f000 fa48 	bl	8001bb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001726:	2035      	movs	r0, #53	@ 0x35
 8001728:	f000 fa5f 	bl	8001bea <HAL_NVIC_EnableIRQ>
}
 800172c:	bf00      	nop
 800172e:	3788      	adds	r7, #136	@ 0x88
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40004c00 	.word	0x40004c00
 8001738:	40021000 	.word	0x40021000
 800173c:	48000800 	.word	0x48000800
 8001740:	40005000 	.word	0x40005000
 8001744:	48000c00 	.word	0x48000c00

08001748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800174c:	bf00      	nop
 800174e:	e7fd      	b.n	800174c <NMI_Handler+0x4>

08001750 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001754:	bf00      	nop
 8001756:	e7fd      	b.n	8001754 <HardFault_Handler+0x4>

08001758 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800175c:	bf00      	nop
 800175e:	e7fd      	b.n	800175c <MemManage_Handler+0x4>

08001760 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001764:	bf00      	nop
 8001766:	e7fd      	b.n	8001764 <BusFault_Handler+0x4>

08001768 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800176c:	bf00      	nop
 800176e:	e7fd      	b.n	800176c <UsageFault_Handler+0x4>

08001770 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800177e:	b480      	push	{r7}
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800179e:	f000 f8ef 	bl	8001980 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
	...

080017a8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80017ac:	4802      	ldr	r0, [pc, #8]	@ (80017b8 <TIM4_IRQHandler+0x10>)
 80017ae:	f003 f821 	bl	80047f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	200001b8 	.word	0x200001b8

080017bc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80017c0:	4802      	ldr	r0, [pc, #8]	@ (80017cc <SPI1_IRQHandler+0x10>)
 80017c2:	f002 fa49 	bl	8003c58 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	200000bc 	.word	0x200000bc

080017d0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80017d4:	4802      	ldr	r0, [pc, #8]	@ (80017e0 <UART4_IRQHandler+0x10>)
 80017d6:	f004 fb6f 	bl	8005eb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000204 	.word	0x20000204

080017e4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt / UART5 wake-up interrupt through EXTI line 35.
  */
void UART5_IRQHandler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80017e8:	4802      	ldr	r0, [pc, #8]	@ (80017f4 <UART5_IRQHandler+0x10>)
 80017ea:	f004 fb65 	bl	8005eb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000298 	.word	0x20000298

080017f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001800:	4a14      	ldr	r2, [pc, #80]	@ (8001854 <_sbrk+0x5c>)
 8001802:	4b15      	ldr	r3, [pc, #84]	@ (8001858 <_sbrk+0x60>)
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800180c:	4b13      	ldr	r3, [pc, #76]	@ (800185c <_sbrk+0x64>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d102      	bne.n	800181a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001814:	4b11      	ldr	r3, [pc, #68]	@ (800185c <_sbrk+0x64>)
 8001816:	4a12      	ldr	r2, [pc, #72]	@ (8001860 <_sbrk+0x68>)
 8001818:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800181a:	4b10      	ldr	r3, [pc, #64]	@ (800185c <_sbrk+0x64>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4413      	add	r3, r2
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	429a      	cmp	r2, r3
 8001826:	d207      	bcs.n	8001838 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001828:	f005 fe1e 	bl	8007468 <__errno>
 800182c:	4603      	mov	r3, r0
 800182e:	220c      	movs	r2, #12
 8001830:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001832:	f04f 33ff 	mov.w	r3, #4294967295
 8001836:	e009      	b.n	800184c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001838:	4b08      	ldr	r3, [pc, #32]	@ (800185c <_sbrk+0x64>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800183e:	4b07      	ldr	r3, [pc, #28]	@ (800185c <_sbrk+0x64>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4413      	add	r3, r2
 8001846:	4a05      	ldr	r2, [pc, #20]	@ (800185c <_sbrk+0x64>)
 8001848:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800184a:	68fb      	ldr	r3, [r7, #12]
}
 800184c:	4618      	mov	r0, r3
 800184e:	3718      	adds	r7, #24
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20020000 	.word	0x20020000
 8001858:	00000400 	.word	0x00000400
 800185c:	20000330 	.word	0x20000330
 8001860:	20000480 	.word	0x20000480

08001864 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001868:	4b06      	ldr	r3, [pc, #24]	@ (8001884 <SystemInit+0x20>)
 800186a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800186e:	4a05      	ldr	r2, [pc, #20]	@ (8001884 <SystemInit+0x20>)
 8001870:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001874:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001888:	480d      	ldr	r0, [pc, #52]	@ (80018c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800188a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800188c:	f7ff ffea 	bl	8001864 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001890:	480c      	ldr	r0, [pc, #48]	@ (80018c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001892:	490d      	ldr	r1, [pc, #52]	@ (80018c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001894:	4a0d      	ldr	r2, [pc, #52]	@ (80018cc <LoopForever+0xe>)
  movs r3, #0
 8001896:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001898:	e002      	b.n	80018a0 <LoopCopyDataInit>

0800189a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800189a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800189c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800189e:	3304      	adds	r3, #4

080018a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018a4:	d3f9      	bcc.n	800189a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018a6:	4a0a      	ldr	r2, [pc, #40]	@ (80018d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018a8:	4c0a      	ldr	r4, [pc, #40]	@ (80018d4 <LoopForever+0x16>)
  movs r3, #0
 80018aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018ac:	e001      	b.n	80018b2 <LoopFillZerobss>

080018ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018b0:	3204      	adds	r2, #4

080018b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018b4:	d3fb      	bcc.n	80018ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018b6:	f005 fddd 	bl	8007474 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018ba:	f7ff f853 	bl	8000964 <main>

080018be <LoopForever>:

LoopForever:
    b LoopForever
 80018be:	e7fe      	b.n	80018be <LoopForever>
  ldr   r0, =_estack
 80018c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018c8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80018cc:	08008108 	.word	0x08008108
  ldr r2, =_sbss
 80018d0:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80018d4:	20000480 	.word	0x20000480

080018d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018d8:	e7fe      	b.n	80018d8 <ADC1_2_IRQHandler>

080018da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018e0:	2300      	movs	r3, #0
 80018e2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018e4:	2003      	movs	r0, #3
 80018e6:	f000 f95b 	bl	8001ba0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018ea:	200f      	movs	r0, #15
 80018ec:	f000 f80e 	bl	800190c <HAL_InitTick>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d002      	beq.n	80018fc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	71fb      	strb	r3, [r7, #7]
 80018fa:	e001      	b.n	8001900 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018fc:	f7ff fcf4 	bl	80012e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001900:	79fb      	ldrb	r3, [r7, #7]

}
 8001902:	4618      	mov	r0, r3
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
	...

0800190c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001914:	2300      	movs	r3, #0
 8001916:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001918:	4b16      	ldr	r3, [pc, #88]	@ (8001974 <HAL_InitTick+0x68>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d022      	beq.n	8001966 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001920:	4b15      	ldr	r3, [pc, #84]	@ (8001978 <HAL_InitTick+0x6c>)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	4b13      	ldr	r3, [pc, #76]	@ (8001974 <HAL_InitTick+0x68>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800192c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001930:	fbb2 f3f3 	udiv	r3, r2, r3
 8001934:	4618      	mov	r0, r3
 8001936:	f000 f966 	bl	8001c06 <HAL_SYSTICK_Config>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d10f      	bne.n	8001960 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2b0f      	cmp	r3, #15
 8001944:	d809      	bhi.n	800195a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001946:	2200      	movs	r2, #0
 8001948:	6879      	ldr	r1, [r7, #4]
 800194a:	f04f 30ff 	mov.w	r0, #4294967295
 800194e:	f000 f932 	bl	8001bb6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001952:	4a0a      	ldr	r2, [pc, #40]	@ (800197c <HAL_InitTick+0x70>)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6013      	str	r3, [r2, #0]
 8001958:	e007      	b.n	800196a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	73fb      	strb	r3, [r7, #15]
 800195e:	e004      	b.n	800196a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	73fb      	strb	r3, [r7, #15]
 8001964:	e001      	b.n	800196a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800196a:	7bfb      	ldrb	r3, [r7, #15]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	20000028 	.word	0x20000028
 8001978:	20000020 	.word	0x20000020
 800197c:	20000024 	.word	0x20000024

08001980 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001984:	4b05      	ldr	r3, [pc, #20]	@ (800199c <HAL_IncTick+0x1c>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	4b05      	ldr	r3, [pc, #20]	@ (80019a0 <HAL_IncTick+0x20>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4413      	add	r3, r2
 800198e:	4a03      	ldr	r2, [pc, #12]	@ (800199c <HAL_IncTick+0x1c>)
 8001990:	6013      	str	r3, [r2, #0]
}
 8001992:	bf00      	nop
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	20000334 	.word	0x20000334
 80019a0:	20000028 	.word	0x20000028

080019a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  return uwTick;
 80019a8:	4b03      	ldr	r3, [pc, #12]	@ (80019b8 <HAL_GetTick+0x14>)
 80019aa:	681b      	ldr	r3, [r3, #0]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	20000334 	.word	0x20000334

080019bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019c4:	f7ff ffee 	bl	80019a4 <HAL_GetTick>
 80019c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019d4:	d004      	beq.n	80019e0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80019d6:	4b09      	ldr	r3, [pc, #36]	@ (80019fc <HAL_Delay+0x40>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	4413      	add	r3, r2
 80019de:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019e0:	bf00      	nop
 80019e2:	f7ff ffdf 	bl	80019a4 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	68fa      	ldr	r2, [r7, #12]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d8f7      	bhi.n	80019e2 <HAL_Delay+0x26>
  {
  }
}
 80019f2:	bf00      	nop
 80019f4:	bf00      	nop
 80019f6:	3710      	adds	r7, #16
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	20000028 	.word	0x20000028

08001a00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a10:	4b0c      	ldr	r3, [pc, #48]	@ (8001a44 <__NVIC_SetPriorityGrouping+0x44>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a16:	68ba      	ldr	r2, [r7, #8]
 8001a18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a32:	4a04      	ldr	r2, [pc, #16]	@ (8001a44 <__NVIC_SetPriorityGrouping+0x44>)
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	60d3      	str	r3, [r2, #12]
}
 8001a38:	bf00      	nop
 8001a3a:	3714      	adds	r7, #20
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a4c:	4b04      	ldr	r3, [pc, #16]	@ (8001a60 <__NVIC_GetPriorityGrouping+0x18>)
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	0a1b      	lsrs	r3, r3, #8
 8001a52:	f003 0307 	and.w	r3, r3, #7
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	e000ed00 	.word	0xe000ed00

08001a64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	db0b      	blt.n	8001a8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a76:	79fb      	ldrb	r3, [r7, #7]
 8001a78:	f003 021f 	and.w	r2, r3, #31
 8001a7c:	4907      	ldr	r1, [pc, #28]	@ (8001a9c <__NVIC_EnableIRQ+0x38>)
 8001a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a82:	095b      	lsrs	r3, r3, #5
 8001a84:	2001      	movs	r0, #1
 8001a86:	fa00 f202 	lsl.w	r2, r0, r2
 8001a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	e000e100 	.word	0xe000e100

08001aa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	6039      	str	r1, [r7, #0]
 8001aaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	db0a      	blt.n	8001aca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	b2da      	uxtb	r2, r3
 8001ab8:	490c      	ldr	r1, [pc, #48]	@ (8001aec <__NVIC_SetPriority+0x4c>)
 8001aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abe:	0112      	lsls	r2, r2, #4
 8001ac0:	b2d2      	uxtb	r2, r2
 8001ac2:	440b      	add	r3, r1
 8001ac4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ac8:	e00a      	b.n	8001ae0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	b2da      	uxtb	r2, r3
 8001ace:	4908      	ldr	r1, [pc, #32]	@ (8001af0 <__NVIC_SetPriority+0x50>)
 8001ad0:	79fb      	ldrb	r3, [r7, #7]
 8001ad2:	f003 030f 	and.w	r3, r3, #15
 8001ad6:	3b04      	subs	r3, #4
 8001ad8:	0112      	lsls	r2, r2, #4
 8001ada:	b2d2      	uxtb	r2, r2
 8001adc:	440b      	add	r3, r1
 8001ade:	761a      	strb	r2, [r3, #24]
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	e000e100 	.word	0xe000e100
 8001af0:	e000ed00 	.word	0xe000ed00

08001af4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b089      	sub	sp, #36	@ 0x24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	f1c3 0307 	rsb	r3, r3, #7
 8001b0e:	2b04      	cmp	r3, #4
 8001b10:	bf28      	it	cs
 8001b12:	2304      	movcs	r3, #4
 8001b14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	3304      	adds	r3, #4
 8001b1a:	2b06      	cmp	r3, #6
 8001b1c:	d902      	bls.n	8001b24 <NVIC_EncodePriority+0x30>
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	3b03      	subs	r3, #3
 8001b22:	e000      	b.n	8001b26 <NVIC_EncodePriority+0x32>
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b28:	f04f 32ff 	mov.w	r2, #4294967295
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	43da      	mvns	r2, r3
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	401a      	ands	r2, r3
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	fa01 f303 	lsl.w	r3, r1, r3
 8001b46:	43d9      	mvns	r1, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b4c:	4313      	orrs	r3, r2
         );
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3724      	adds	r7, #36	@ 0x24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
	...

08001b5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3b01      	subs	r3, #1
 8001b68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b6c:	d301      	bcc.n	8001b72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e00f      	b.n	8001b92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b72:	4a0a      	ldr	r2, [pc, #40]	@ (8001b9c <SysTick_Config+0x40>)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3b01      	subs	r3, #1
 8001b78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b7a:	210f      	movs	r1, #15
 8001b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b80:	f7ff ff8e 	bl	8001aa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b84:	4b05      	ldr	r3, [pc, #20]	@ (8001b9c <SysTick_Config+0x40>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b8a:	4b04      	ldr	r3, [pc, #16]	@ (8001b9c <SysTick_Config+0x40>)
 8001b8c:	2207      	movs	r2, #7
 8001b8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	e000e010 	.word	0xe000e010

08001ba0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f7ff ff29 	bl	8001a00 <__NVIC_SetPriorityGrouping>
}
 8001bae:	bf00      	nop
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b086      	sub	sp, #24
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	60b9      	str	r1, [r7, #8]
 8001bc0:	607a      	str	r2, [r7, #4]
 8001bc2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bc4:	f7ff ff40 	bl	8001a48 <__NVIC_GetPriorityGrouping>
 8001bc8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	68b9      	ldr	r1, [r7, #8]
 8001bce:	6978      	ldr	r0, [r7, #20]
 8001bd0:	f7ff ff90 	bl	8001af4 <NVIC_EncodePriority>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bda:	4611      	mov	r1, r2
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff ff5f 	bl	8001aa0 <__NVIC_SetPriority>
}
 8001be2:	bf00      	nop
 8001be4:	3718      	adds	r7, #24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff ff33 	bl	8001a64 <__NVIC_EnableIRQ>
}
 8001bfe:	bf00      	nop
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b082      	sub	sp, #8
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f7ff ffa4 	bl	8001b5c <SysTick_Config>
 8001c14:	4603      	mov	r3, r0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	b085      	sub	sp, #20
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c26:	2300      	movs	r3, #0
 8001c28:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d005      	beq.n	8001c42 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2204      	movs	r2, #4
 8001c3a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	73fb      	strb	r3, [r7, #15]
 8001c40:	e037      	b.n	8001cb2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f022 020e 	bic.w	r2, r2, #14
 8001c50:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c5c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c60:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f022 0201 	bic.w	r2, r2, #1
 8001c70:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c76:	f003 021f 	and.w	r2, r3, #31
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7e:	2101      	movs	r1, #1
 8001c80:	fa01 f202 	lsl.w	r2, r1, r2
 8001c84:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001c8e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d00c      	beq.n	8001cb2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ca2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ca6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001cb0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3714      	adds	r7, #20
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d00d      	beq.n	8001d04 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2204      	movs	r2, #4
 8001cec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	73fb      	strb	r3, [r7, #15]
 8001d02:	e047      	b.n	8001d94 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f022 020e 	bic.w	r2, r2, #14
 8001d12:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f022 0201 	bic.w	r2, r2, #1
 8001d22:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d2e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d38:	f003 021f 	and.w	r2, r3, #31
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d40:	2101      	movs	r1, #1
 8001d42:	fa01 f202 	lsl.w	r2, r1, r2
 8001d46:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001d50:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d00c      	beq.n	8001d74 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d64:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d68:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001d72:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d003      	beq.n	8001d94 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	4798      	blx	r3
    }
  }
  return status;
 8001d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
	...

08001da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b087      	sub	sp, #28
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001daa:	2300      	movs	r3, #0
 8001dac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001dae:	e15a      	b.n	8002066 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	2101      	movs	r1, #1
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 814c 	beq.w	8002060 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 0303 	and.w	r3, r3, #3
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d005      	beq.n	8001de0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d130      	bne.n	8001e42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	2203      	movs	r2, #3
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	43db      	mvns	r3, r3
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	4013      	ands	r3, r2
 8001df6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	68da      	ldr	r2, [r3, #12]
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	693a      	ldr	r2, [r7, #16]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e16:	2201      	movs	r2, #1
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	4013      	ands	r3, r2
 8001e24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	091b      	lsrs	r3, r3, #4
 8001e2c:	f003 0201 	and.w	r2, r3, #1
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f003 0303 	and.w	r3, r3, #3
 8001e4a:	2b03      	cmp	r3, #3
 8001e4c:	d017      	beq.n	8001e7e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	2203      	movs	r2, #3
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	4013      	ands	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	689a      	ldr	r2, [r3, #8]
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f003 0303 	and.w	r3, r3, #3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d123      	bne.n	8001ed2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	08da      	lsrs	r2, r3, #3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	3208      	adds	r2, #8
 8001e92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	220f      	movs	r2, #15
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	691a      	ldr	r2, [r3, #16]
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	f003 0307 	and.w	r3, r3, #7
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	08da      	lsrs	r2, r3, #3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3208      	adds	r2, #8
 8001ecc:	6939      	ldr	r1, [r7, #16]
 8001ece:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	2203      	movs	r2, #3
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f003 0203 	and.w	r2, r3, #3
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f000 80a6 	beq.w	8002060 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f14:	4b5b      	ldr	r3, [pc, #364]	@ (8002084 <HAL_GPIO_Init+0x2e4>)
 8001f16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f18:	4a5a      	ldr	r2, [pc, #360]	@ (8002084 <HAL_GPIO_Init+0x2e4>)
 8001f1a:	f043 0301 	orr.w	r3, r3, #1
 8001f1e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f20:	4b58      	ldr	r3, [pc, #352]	@ (8002084 <HAL_GPIO_Init+0x2e4>)
 8001f22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	60bb      	str	r3, [r7, #8]
 8001f2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f2c:	4a56      	ldr	r2, [pc, #344]	@ (8002088 <HAL_GPIO_Init+0x2e8>)
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	089b      	lsrs	r3, r3, #2
 8001f32:	3302      	adds	r3, #2
 8001f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	f003 0303 	and.w	r3, r3, #3
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	220f      	movs	r2, #15
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001f56:	d01f      	beq.n	8001f98 <HAL_GPIO_Init+0x1f8>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a4c      	ldr	r2, [pc, #304]	@ (800208c <HAL_GPIO_Init+0x2ec>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d019      	beq.n	8001f94 <HAL_GPIO_Init+0x1f4>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a4b      	ldr	r2, [pc, #300]	@ (8002090 <HAL_GPIO_Init+0x2f0>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d013      	beq.n	8001f90 <HAL_GPIO_Init+0x1f0>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a4a      	ldr	r2, [pc, #296]	@ (8002094 <HAL_GPIO_Init+0x2f4>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d00d      	beq.n	8001f8c <HAL_GPIO_Init+0x1ec>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a49      	ldr	r2, [pc, #292]	@ (8002098 <HAL_GPIO_Init+0x2f8>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d007      	beq.n	8001f88 <HAL_GPIO_Init+0x1e8>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a48      	ldr	r2, [pc, #288]	@ (800209c <HAL_GPIO_Init+0x2fc>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d101      	bne.n	8001f84 <HAL_GPIO_Init+0x1e4>
 8001f80:	2305      	movs	r3, #5
 8001f82:	e00a      	b.n	8001f9a <HAL_GPIO_Init+0x1fa>
 8001f84:	2306      	movs	r3, #6
 8001f86:	e008      	b.n	8001f9a <HAL_GPIO_Init+0x1fa>
 8001f88:	2304      	movs	r3, #4
 8001f8a:	e006      	b.n	8001f9a <HAL_GPIO_Init+0x1fa>
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e004      	b.n	8001f9a <HAL_GPIO_Init+0x1fa>
 8001f90:	2302      	movs	r3, #2
 8001f92:	e002      	b.n	8001f9a <HAL_GPIO_Init+0x1fa>
 8001f94:	2301      	movs	r3, #1
 8001f96:	e000      	b.n	8001f9a <HAL_GPIO_Init+0x1fa>
 8001f98:	2300      	movs	r3, #0
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	f002 0203 	and.w	r2, r2, #3
 8001fa0:	0092      	lsls	r2, r2, #2
 8001fa2:	4093      	lsls	r3, r2
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001faa:	4937      	ldr	r1, [pc, #220]	@ (8002088 <HAL_GPIO_Init+0x2e8>)
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	089b      	lsrs	r3, r3, #2
 8001fb0:	3302      	adds	r3, #2
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fb8:	4b39      	ldr	r3, [pc, #228]	@ (80020a0 <HAL_GPIO_Init+0x300>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d003      	beq.n	8001fdc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001fdc:	4a30      	ldr	r2, [pc, #192]	@ (80020a0 <HAL_GPIO_Init+0x300>)
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001fe2:	4b2f      	ldr	r3, [pc, #188]	@ (80020a0 <HAL_GPIO_Init+0x300>)
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	43db      	mvns	r3, r3
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d003      	beq.n	8002006 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4313      	orrs	r3, r2
 8002004:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002006:	4a26      	ldr	r2, [pc, #152]	@ (80020a0 <HAL_GPIO_Init+0x300>)
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800200c:	4b24      	ldr	r3, [pc, #144]	@ (80020a0 <HAL_GPIO_Init+0x300>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	43db      	mvns	r3, r3
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	4013      	ands	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d003      	beq.n	8002030 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	4313      	orrs	r3, r2
 800202e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002030:	4a1b      	ldr	r2, [pc, #108]	@ (80020a0 <HAL_GPIO_Init+0x300>)
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002036:	4b1a      	ldr	r3, [pc, #104]	@ (80020a0 <HAL_GPIO_Init+0x300>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	43db      	mvns	r3, r3
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	4013      	ands	r3, r2
 8002044:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4313      	orrs	r3, r2
 8002058:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800205a:	4a11      	ldr	r2, [pc, #68]	@ (80020a0 <HAL_GPIO_Init+0x300>)
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	3301      	adds	r3, #1
 8002064:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	fa22 f303 	lsr.w	r3, r2, r3
 8002070:	2b00      	cmp	r3, #0
 8002072:	f47f ae9d 	bne.w	8001db0 <HAL_GPIO_Init+0x10>
  }
}
 8002076:	bf00      	nop
 8002078:	bf00      	nop
 800207a:	371c      	adds	r7, #28
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	40021000 	.word	0x40021000
 8002088:	40010000 	.word	0x40010000
 800208c:	48000400 	.word	0x48000400
 8002090:	48000800 	.word	0x48000800
 8002094:	48000c00 	.word	0x48000c00
 8002098:	48001000 	.word	0x48001000
 800209c:	48001400 	.word	0x48001400
 80020a0:	40010400 	.word	0x40010400

080020a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	460b      	mov	r3, r1
 80020ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	691a      	ldr	r2, [r3, #16]
 80020b4:	887b      	ldrh	r3, [r7, #2]
 80020b6:	4013      	ands	r3, r2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d002      	beq.n	80020c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020bc:	2301      	movs	r3, #1
 80020be:	73fb      	strb	r3, [r7, #15]
 80020c0:	e001      	b.n	80020c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020c2:	2300      	movs	r3, #0
 80020c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3714      	adds	r7, #20
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	460b      	mov	r3, r1
 80020de:	807b      	strh	r3, [r7, #2]
 80020e0:	4613      	mov	r3, r2
 80020e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020e4:	787b      	ldrb	r3, [r7, #1]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d003      	beq.n	80020f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020ea:	887a      	ldrh	r2, [r7, #2]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020f0:	e002      	b.n	80020f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020f2:	887a      	ldrh	r2, [r7, #2]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d141      	bne.n	8002196 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002112:	4b4b      	ldr	r3, [pc, #300]	@ (8002240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800211a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800211e:	d131      	bne.n	8002184 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002120:	4b47      	ldr	r3, [pc, #284]	@ (8002240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002122:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002126:	4a46      	ldr	r2, [pc, #280]	@ (8002240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002128:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800212c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002130:	4b43      	ldr	r3, [pc, #268]	@ (8002240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002138:	4a41      	ldr	r2, [pc, #260]	@ (8002240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800213a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800213e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002140:	4b40      	ldr	r3, [pc, #256]	@ (8002244 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2232      	movs	r2, #50	@ 0x32
 8002146:	fb02 f303 	mul.w	r3, r2, r3
 800214a:	4a3f      	ldr	r2, [pc, #252]	@ (8002248 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800214c:	fba2 2303 	umull	r2, r3, r2, r3
 8002150:	0c9b      	lsrs	r3, r3, #18
 8002152:	3301      	adds	r3, #1
 8002154:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002156:	e002      	b.n	800215e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	3b01      	subs	r3, #1
 800215c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800215e:	4b38      	ldr	r3, [pc, #224]	@ (8002240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002166:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800216a:	d102      	bne.n	8002172 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1f2      	bne.n	8002158 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002172:	4b33      	ldr	r3, [pc, #204]	@ (8002240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800217a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800217e:	d158      	bne.n	8002232 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e057      	b.n	8002234 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002184:	4b2e      	ldr	r3, [pc, #184]	@ (8002240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002186:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800218a:	4a2d      	ldr	r2, [pc, #180]	@ (8002240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800218c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002190:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002194:	e04d      	b.n	8002232 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800219c:	d141      	bne.n	8002222 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800219e:	4b28      	ldr	r3, [pc, #160]	@ (8002240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80021a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021aa:	d131      	bne.n	8002210 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021ac:	4b24      	ldr	r3, [pc, #144]	@ (8002240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80021b2:	4a23      	ldr	r2, [pc, #140]	@ (8002240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021bc:	4b20      	ldr	r3, [pc, #128]	@ (8002240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80021c4:	4a1e      	ldr	r2, [pc, #120]	@ (8002240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002244 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2232      	movs	r2, #50	@ 0x32
 80021d2:	fb02 f303 	mul.w	r3, r2, r3
 80021d6:	4a1c      	ldr	r2, [pc, #112]	@ (8002248 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80021d8:	fba2 2303 	umull	r2, r3, r2, r3
 80021dc:	0c9b      	lsrs	r3, r3, #18
 80021de:	3301      	adds	r3, #1
 80021e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021e2:	e002      	b.n	80021ea <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	3b01      	subs	r3, #1
 80021e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021ea:	4b15      	ldr	r3, [pc, #84]	@ (8002240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021f6:	d102      	bne.n	80021fe <HAL_PWREx_ControlVoltageScaling+0xfa>
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1f2      	bne.n	80021e4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021fe:	4b10      	ldr	r3, [pc, #64]	@ (8002240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002206:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800220a:	d112      	bne.n	8002232 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e011      	b.n	8002234 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002210:	4b0b      	ldr	r3, [pc, #44]	@ (8002240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002212:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002216:	4a0a      	ldr	r2, [pc, #40]	@ (8002240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002218:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800221c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002220:	e007      	b.n	8002232 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002222:	4b07      	ldr	r3, [pc, #28]	@ (8002240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800222a:	4a05      	ldr	r2, [pc, #20]	@ (8002240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800222c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002230:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	3714      	adds	r7, #20
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	40007000 	.word	0x40007000
 8002244:	20000020 	.word	0x20000020
 8002248:	431bde83 	.word	0x431bde83

0800224c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002250:	4b05      	ldr	r3, [pc, #20]	@ (8002268 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	4a04      	ldr	r2, [pc, #16]	@ (8002268 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002256:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800225a:	6093      	str	r3, [r2, #8]
}
 800225c:	bf00      	nop
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	40007000 	.word	0x40007000

0800226c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b088      	sub	sp, #32
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e2fe      	b.n	800287c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b00      	cmp	r3, #0
 8002288:	d075      	beq.n	8002376 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800228a:	4b97      	ldr	r3, [pc, #604]	@ (80024e8 <HAL_RCC_OscConfig+0x27c>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f003 030c 	and.w	r3, r3, #12
 8002292:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002294:	4b94      	ldr	r3, [pc, #592]	@ (80024e8 <HAL_RCC_OscConfig+0x27c>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	f003 0303 	and.w	r3, r3, #3
 800229c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	2b0c      	cmp	r3, #12
 80022a2:	d102      	bne.n	80022aa <HAL_RCC_OscConfig+0x3e>
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	2b03      	cmp	r3, #3
 80022a8:	d002      	beq.n	80022b0 <HAL_RCC_OscConfig+0x44>
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	2b08      	cmp	r3, #8
 80022ae:	d10b      	bne.n	80022c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022b0:	4b8d      	ldr	r3, [pc, #564]	@ (80024e8 <HAL_RCC_OscConfig+0x27c>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d05b      	beq.n	8002374 <HAL_RCC_OscConfig+0x108>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d157      	bne.n	8002374 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e2d9      	b.n	800287c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022d0:	d106      	bne.n	80022e0 <HAL_RCC_OscConfig+0x74>
 80022d2:	4b85      	ldr	r3, [pc, #532]	@ (80024e8 <HAL_RCC_OscConfig+0x27c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a84      	ldr	r2, [pc, #528]	@ (80024e8 <HAL_RCC_OscConfig+0x27c>)
 80022d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022dc:	6013      	str	r3, [r2, #0]
 80022de:	e01d      	b.n	800231c <HAL_RCC_OscConfig+0xb0>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022e8:	d10c      	bne.n	8002304 <HAL_RCC_OscConfig+0x98>
 80022ea:	4b7f      	ldr	r3, [pc, #508]	@ (80024e8 <HAL_RCC_OscConfig+0x27c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a7e      	ldr	r2, [pc, #504]	@ (80024e8 <HAL_RCC_OscConfig+0x27c>)
 80022f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022f4:	6013      	str	r3, [r2, #0]
 80022f6:	4b7c      	ldr	r3, [pc, #496]	@ (80024e8 <HAL_RCC_OscConfig+0x27c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a7b      	ldr	r2, [pc, #492]	@ (80024e8 <HAL_RCC_OscConfig+0x27c>)
 80022fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	e00b      	b.n	800231c <HAL_RCC_OscConfig+0xb0>
 8002304:	4b78      	ldr	r3, [pc, #480]	@ (80024e8 <HAL_RCC_OscConfig+0x27c>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a77      	ldr	r2, [pc, #476]	@ (80024e8 <HAL_RCC_OscConfig+0x27c>)
 800230a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800230e:	6013      	str	r3, [r2, #0]
 8002310:	4b75      	ldr	r3, [pc, #468]	@ (80024e8 <HAL_RCC_OscConfig+0x27c>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a74      	ldr	r2, [pc, #464]	@ (80024e8 <HAL_RCC_OscConfig+0x27c>)
 8002316:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800231a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d013      	beq.n	800234c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002324:	f7ff fb3e 	bl	80019a4 <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800232c:	f7ff fb3a 	bl	80019a4 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b64      	cmp	r3, #100	@ 0x64
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e29e      	b.n	800287c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800233e:	4b6a      	ldr	r3, [pc, #424]	@ (80024e8 <HAL_RCC_OscConfig+0x27c>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d0f0      	beq.n	800232c <HAL_RCC_OscConfig+0xc0>
 800234a:	e014      	b.n	8002376 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800234c:	f7ff fb2a 	bl	80019a4 <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002354:	f7ff fb26 	bl	80019a4 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b64      	cmp	r3, #100	@ 0x64
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e28a      	b.n	800287c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002366:	4b60      	ldr	r3, [pc, #384]	@ (80024e8 <HAL_RCC_OscConfig+0x27c>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1f0      	bne.n	8002354 <HAL_RCC_OscConfig+0xe8>
 8002372:	e000      	b.n	8002376 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002374:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d075      	beq.n	800246e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002382:	4b59      	ldr	r3, [pc, #356]	@ (80024e8 <HAL_RCC_OscConfig+0x27c>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f003 030c 	and.w	r3, r3, #12
 800238a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800238c:	4b56      	ldr	r3, [pc, #344]	@ (80024e8 <HAL_RCC_OscConfig+0x27c>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	f003 0303 	and.w	r3, r3, #3
 8002394:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	2b0c      	cmp	r3, #12
 800239a:	d102      	bne.n	80023a2 <HAL_RCC_OscConfig+0x136>
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d002      	beq.n	80023a8 <HAL_RCC_OscConfig+0x13c>
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	2b04      	cmp	r3, #4
 80023a6:	d11f      	bne.n	80023e8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023a8:	4b4f      	ldr	r3, [pc, #316]	@ (80024e8 <HAL_RCC_OscConfig+0x27c>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d005      	beq.n	80023c0 <HAL_RCC_OscConfig+0x154>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e25d      	b.n	800287c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c0:	4b49      	ldr	r3, [pc, #292]	@ (80024e8 <HAL_RCC_OscConfig+0x27c>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	061b      	lsls	r3, r3, #24
 80023ce:	4946      	ldr	r1, [pc, #280]	@ (80024e8 <HAL_RCC_OscConfig+0x27c>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80023d4:	4b45      	ldr	r3, [pc, #276]	@ (80024ec <HAL_RCC_OscConfig+0x280>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff fa97 	bl	800190c <HAL_InitTick>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d043      	beq.n	800246c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e249      	b.n	800287c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d023      	beq.n	8002438 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023f0:	4b3d      	ldr	r3, [pc, #244]	@ (80024e8 <HAL_RCC_OscConfig+0x27c>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a3c      	ldr	r2, [pc, #240]	@ (80024e8 <HAL_RCC_OscConfig+0x27c>)
 80023f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fc:	f7ff fad2 	bl	80019a4 <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002404:	f7ff face 	bl	80019a4 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e232      	b.n	800287c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002416:	4b34      	ldr	r3, [pc, #208]	@ (80024e8 <HAL_RCC_OscConfig+0x27c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800241e:	2b00      	cmp	r3, #0
 8002420:	d0f0      	beq.n	8002404 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002422:	4b31      	ldr	r3, [pc, #196]	@ (80024e8 <HAL_RCC_OscConfig+0x27c>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	061b      	lsls	r3, r3, #24
 8002430:	492d      	ldr	r1, [pc, #180]	@ (80024e8 <HAL_RCC_OscConfig+0x27c>)
 8002432:	4313      	orrs	r3, r2
 8002434:	604b      	str	r3, [r1, #4]
 8002436:	e01a      	b.n	800246e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002438:	4b2b      	ldr	r3, [pc, #172]	@ (80024e8 <HAL_RCC_OscConfig+0x27c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a2a      	ldr	r2, [pc, #168]	@ (80024e8 <HAL_RCC_OscConfig+0x27c>)
 800243e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002442:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002444:	f7ff faae 	bl	80019a4 <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800244c:	f7ff faaa 	bl	80019a4 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b02      	cmp	r3, #2
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e20e      	b.n	800287c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800245e:	4b22      	ldr	r3, [pc, #136]	@ (80024e8 <HAL_RCC_OscConfig+0x27c>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1f0      	bne.n	800244c <HAL_RCC_OscConfig+0x1e0>
 800246a:	e000      	b.n	800246e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800246c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0308 	and.w	r3, r3, #8
 8002476:	2b00      	cmp	r3, #0
 8002478:	d041      	beq.n	80024fe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d01c      	beq.n	80024bc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002482:	4b19      	ldr	r3, [pc, #100]	@ (80024e8 <HAL_RCC_OscConfig+0x27c>)
 8002484:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002488:	4a17      	ldr	r2, [pc, #92]	@ (80024e8 <HAL_RCC_OscConfig+0x27c>)
 800248a:	f043 0301 	orr.w	r3, r3, #1
 800248e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002492:	f7ff fa87 	bl	80019a4 <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002498:	e008      	b.n	80024ac <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800249a:	f7ff fa83 	bl	80019a4 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e1e7      	b.n	800287c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024ac:	4b0e      	ldr	r3, [pc, #56]	@ (80024e8 <HAL_RCC_OscConfig+0x27c>)
 80024ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d0ef      	beq.n	800249a <HAL_RCC_OscConfig+0x22e>
 80024ba:	e020      	b.n	80024fe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024bc:	4b0a      	ldr	r3, [pc, #40]	@ (80024e8 <HAL_RCC_OscConfig+0x27c>)
 80024be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024c2:	4a09      	ldr	r2, [pc, #36]	@ (80024e8 <HAL_RCC_OscConfig+0x27c>)
 80024c4:	f023 0301 	bic.w	r3, r3, #1
 80024c8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024cc:	f7ff fa6a 	bl	80019a4 <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024d2:	e00d      	b.n	80024f0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024d4:	f7ff fa66 	bl	80019a4 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d906      	bls.n	80024f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e1ca      	b.n	800287c <HAL_RCC_OscConfig+0x610>
 80024e6:	bf00      	nop
 80024e8:	40021000 	.word	0x40021000
 80024ec:	20000024 	.word	0x20000024
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024f0:	4b8c      	ldr	r3, [pc, #560]	@ (8002724 <HAL_RCC_OscConfig+0x4b8>)
 80024f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1ea      	bne.n	80024d4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0304 	and.w	r3, r3, #4
 8002506:	2b00      	cmp	r3, #0
 8002508:	f000 80a6 	beq.w	8002658 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800250c:	2300      	movs	r3, #0
 800250e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002510:	4b84      	ldr	r3, [pc, #528]	@ (8002724 <HAL_RCC_OscConfig+0x4b8>)
 8002512:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002514:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <HAL_RCC_OscConfig+0x2b4>
 800251c:	2301      	movs	r3, #1
 800251e:	e000      	b.n	8002522 <HAL_RCC_OscConfig+0x2b6>
 8002520:	2300      	movs	r3, #0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00d      	beq.n	8002542 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002526:	4b7f      	ldr	r3, [pc, #508]	@ (8002724 <HAL_RCC_OscConfig+0x4b8>)
 8002528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800252a:	4a7e      	ldr	r2, [pc, #504]	@ (8002724 <HAL_RCC_OscConfig+0x4b8>)
 800252c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002530:	6593      	str	r3, [r2, #88]	@ 0x58
 8002532:	4b7c      	ldr	r3, [pc, #496]	@ (8002724 <HAL_RCC_OscConfig+0x4b8>)
 8002534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002536:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800253e:	2301      	movs	r3, #1
 8002540:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002542:	4b79      	ldr	r3, [pc, #484]	@ (8002728 <HAL_RCC_OscConfig+0x4bc>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800254a:	2b00      	cmp	r3, #0
 800254c:	d118      	bne.n	8002580 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800254e:	4b76      	ldr	r3, [pc, #472]	@ (8002728 <HAL_RCC_OscConfig+0x4bc>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a75      	ldr	r2, [pc, #468]	@ (8002728 <HAL_RCC_OscConfig+0x4bc>)
 8002554:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002558:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800255a:	f7ff fa23 	bl	80019a4 <HAL_GetTick>
 800255e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002560:	e008      	b.n	8002574 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002562:	f7ff fa1f 	bl	80019a4 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e183      	b.n	800287c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002574:	4b6c      	ldr	r3, [pc, #432]	@ (8002728 <HAL_RCC_OscConfig+0x4bc>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800257c:	2b00      	cmp	r3, #0
 800257e:	d0f0      	beq.n	8002562 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d108      	bne.n	800259a <HAL_RCC_OscConfig+0x32e>
 8002588:	4b66      	ldr	r3, [pc, #408]	@ (8002724 <HAL_RCC_OscConfig+0x4b8>)
 800258a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800258e:	4a65      	ldr	r2, [pc, #404]	@ (8002724 <HAL_RCC_OscConfig+0x4b8>)
 8002590:	f043 0301 	orr.w	r3, r3, #1
 8002594:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002598:	e024      	b.n	80025e4 <HAL_RCC_OscConfig+0x378>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	2b05      	cmp	r3, #5
 80025a0:	d110      	bne.n	80025c4 <HAL_RCC_OscConfig+0x358>
 80025a2:	4b60      	ldr	r3, [pc, #384]	@ (8002724 <HAL_RCC_OscConfig+0x4b8>)
 80025a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025a8:	4a5e      	ldr	r2, [pc, #376]	@ (8002724 <HAL_RCC_OscConfig+0x4b8>)
 80025aa:	f043 0304 	orr.w	r3, r3, #4
 80025ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025b2:	4b5c      	ldr	r3, [pc, #368]	@ (8002724 <HAL_RCC_OscConfig+0x4b8>)
 80025b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025b8:	4a5a      	ldr	r2, [pc, #360]	@ (8002724 <HAL_RCC_OscConfig+0x4b8>)
 80025ba:	f043 0301 	orr.w	r3, r3, #1
 80025be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025c2:	e00f      	b.n	80025e4 <HAL_RCC_OscConfig+0x378>
 80025c4:	4b57      	ldr	r3, [pc, #348]	@ (8002724 <HAL_RCC_OscConfig+0x4b8>)
 80025c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ca:	4a56      	ldr	r2, [pc, #344]	@ (8002724 <HAL_RCC_OscConfig+0x4b8>)
 80025cc:	f023 0301 	bic.w	r3, r3, #1
 80025d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025d4:	4b53      	ldr	r3, [pc, #332]	@ (8002724 <HAL_RCC_OscConfig+0x4b8>)
 80025d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025da:	4a52      	ldr	r2, [pc, #328]	@ (8002724 <HAL_RCC_OscConfig+0x4b8>)
 80025dc:	f023 0304 	bic.w	r3, r3, #4
 80025e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d016      	beq.n	800261a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ec:	f7ff f9da 	bl	80019a4 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025f2:	e00a      	b.n	800260a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025f4:	f7ff f9d6 	bl	80019a4 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002602:	4293      	cmp	r3, r2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e138      	b.n	800287c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800260a:	4b46      	ldr	r3, [pc, #280]	@ (8002724 <HAL_RCC_OscConfig+0x4b8>)
 800260c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d0ed      	beq.n	80025f4 <HAL_RCC_OscConfig+0x388>
 8002618:	e015      	b.n	8002646 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800261a:	f7ff f9c3 	bl	80019a4 <HAL_GetTick>
 800261e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002620:	e00a      	b.n	8002638 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002622:	f7ff f9bf 	bl	80019a4 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002630:	4293      	cmp	r3, r2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e121      	b.n	800287c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002638:	4b3a      	ldr	r3, [pc, #232]	@ (8002724 <HAL_RCC_OscConfig+0x4b8>)
 800263a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1ed      	bne.n	8002622 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002646:	7ffb      	ldrb	r3, [r7, #31]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d105      	bne.n	8002658 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800264c:	4b35      	ldr	r3, [pc, #212]	@ (8002724 <HAL_RCC_OscConfig+0x4b8>)
 800264e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002650:	4a34      	ldr	r2, [pc, #208]	@ (8002724 <HAL_RCC_OscConfig+0x4b8>)
 8002652:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002656:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0320 	and.w	r3, r3, #32
 8002660:	2b00      	cmp	r3, #0
 8002662:	d03c      	beq.n	80026de <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d01c      	beq.n	80026a6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800266c:	4b2d      	ldr	r3, [pc, #180]	@ (8002724 <HAL_RCC_OscConfig+0x4b8>)
 800266e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002672:	4a2c      	ldr	r2, [pc, #176]	@ (8002724 <HAL_RCC_OscConfig+0x4b8>)
 8002674:	f043 0301 	orr.w	r3, r3, #1
 8002678:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800267c:	f7ff f992 	bl	80019a4 <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002684:	f7ff f98e 	bl	80019a4 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e0f2      	b.n	800287c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002696:	4b23      	ldr	r3, [pc, #140]	@ (8002724 <HAL_RCC_OscConfig+0x4b8>)
 8002698:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d0ef      	beq.n	8002684 <HAL_RCC_OscConfig+0x418>
 80026a4:	e01b      	b.n	80026de <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80026a6:	4b1f      	ldr	r3, [pc, #124]	@ (8002724 <HAL_RCC_OscConfig+0x4b8>)
 80026a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80026ac:	4a1d      	ldr	r2, [pc, #116]	@ (8002724 <HAL_RCC_OscConfig+0x4b8>)
 80026ae:	f023 0301 	bic.w	r3, r3, #1
 80026b2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b6:	f7ff f975 	bl	80019a4 <HAL_GetTick>
 80026ba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026bc:	e008      	b.n	80026d0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026be:	f7ff f971 	bl	80019a4 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e0d5      	b.n	800287c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026d0:	4b14      	ldr	r3, [pc, #80]	@ (8002724 <HAL_RCC_OscConfig+0x4b8>)
 80026d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1ef      	bne.n	80026be <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f000 80c9 	beq.w	800287a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002724 <HAL_RCC_OscConfig+0x4b8>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f003 030c 	and.w	r3, r3, #12
 80026f0:	2b0c      	cmp	r3, #12
 80026f2:	f000 8083 	beq.w	80027fc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	69db      	ldr	r3, [r3, #28]
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d15e      	bne.n	80027bc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026fe:	4b09      	ldr	r3, [pc, #36]	@ (8002724 <HAL_RCC_OscConfig+0x4b8>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a08      	ldr	r2, [pc, #32]	@ (8002724 <HAL_RCC_OscConfig+0x4b8>)
 8002704:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002708:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270a:	f7ff f94b 	bl	80019a4 <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002710:	e00c      	b.n	800272c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002712:	f7ff f947 	bl	80019a4 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d905      	bls.n	800272c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e0ab      	b.n	800287c <HAL_RCC_OscConfig+0x610>
 8002724:	40021000 	.word	0x40021000
 8002728:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800272c:	4b55      	ldr	r3, [pc, #340]	@ (8002884 <HAL_RCC_OscConfig+0x618>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d1ec      	bne.n	8002712 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002738:	4b52      	ldr	r3, [pc, #328]	@ (8002884 <HAL_RCC_OscConfig+0x618>)
 800273a:	68da      	ldr	r2, [r3, #12]
 800273c:	4b52      	ldr	r3, [pc, #328]	@ (8002888 <HAL_RCC_OscConfig+0x61c>)
 800273e:	4013      	ands	r3, r2
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	6a11      	ldr	r1, [r2, #32]
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002748:	3a01      	subs	r2, #1
 800274a:	0112      	lsls	r2, r2, #4
 800274c:	4311      	orrs	r1, r2
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002752:	0212      	lsls	r2, r2, #8
 8002754:	4311      	orrs	r1, r2
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800275a:	0852      	lsrs	r2, r2, #1
 800275c:	3a01      	subs	r2, #1
 800275e:	0552      	lsls	r2, r2, #21
 8002760:	4311      	orrs	r1, r2
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002766:	0852      	lsrs	r2, r2, #1
 8002768:	3a01      	subs	r2, #1
 800276a:	0652      	lsls	r2, r2, #25
 800276c:	4311      	orrs	r1, r2
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002772:	06d2      	lsls	r2, r2, #27
 8002774:	430a      	orrs	r2, r1
 8002776:	4943      	ldr	r1, [pc, #268]	@ (8002884 <HAL_RCC_OscConfig+0x618>)
 8002778:	4313      	orrs	r3, r2
 800277a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800277c:	4b41      	ldr	r3, [pc, #260]	@ (8002884 <HAL_RCC_OscConfig+0x618>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a40      	ldr	r2, [pc, #256]	@ (8002884 <HAL_RCC_OscConfig+0x618>)
 8002782:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002786:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002788:	4b3e      	ldr	r3, [pc, #248]	@ (8002884 <HAL_RCC_OscConfig+0x618>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	4a3d      	ldr	r2, [pc, #244]	@ (8002884 <HAL_RCC_OscConfig+0x618>)
 800278e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002792:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002794:	f7ff f906 	bl	80019a4 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800279c:	f7ff f902 	bl	80019a4 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e066      	b.n	800287c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027ae:	4b35      	ldr	r3, [pc, #212]	@ (8002884 <HAL_RCC_OscConfig+0x618>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d0f0      	beq.n	800279c <HAL_RCC_OscConfig+0x530>
 80027ba:	e05e      	b.n	800287a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027bc:	4b31      	ldr	r3, [pc, #196]	@ (8002884 <HAL_RCC_OscConfig+0x618>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a30      	ldr	r2, [pc, #192]	@ (8002884 <HAL_RCC_OscConfig+0x618>)
 80027c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c8:	f7ff f8ec 	bl	80019a4 <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027ce:	e008      	b.n	80027e2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027d0:	f7ff f8e8 	bl	80019a4 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e04c      	b.n	800287c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027e2:	4b28      	ldr	r3, [pc, #160]	@ (8002884 <HAL_RCC_OscConfig+0x618>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1f0      	bne.n	80027d0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80027ee:	4b25      	ldr	r3, [pc, #148]	@ (8002884 <HAL_RCC_OscConfig+0x618>)
 80027f0:	68da      	ldr	r2, [r3, #12]
 80027f2:	4924      	ldr	r1, [pc, #144]	@ (8002884 <HAL_RCC_OscConfig+0x618>)
 80027f4:	4b25      	ldr	r3, [pc, #148]	@ (800288c <HAL_RCC_OscConfig+0x620>)
 80027f6:	4013      	ands	r3, r2
 80027f8:	60cb      	str	r3, [r1, #12]
 80027fa:	e03e      	b.n	800287a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	69db      	ldr	r3, [r3, #28]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d101      	bne.n	8002808 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e039      	b.n	800287c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002808:	4b1e      	ldr	r3, [pc, #120]	@ (8002884 <HAL_RCC_OscConfig+0x618>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	f003 0203 	and.w	r2, r3, #3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a1b      	ldr	r3, [r3, #32]
 8002818:	429a      	cmp	r2, r3
 800281a:	d12c      	bne.n	8002876 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002826:	3b01      	subs	r3, #1
 8002828:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800282a:	429a      	cmp	r2, r3
 800282c:	d123      	bne.n	8002876 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002838:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800283a:	429a      	cmp	r2, r3
 800283c:	d11b      	bne.n	8002876 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002848:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800284a:	429a      	cmp	r2, r3
 800284c:	d113      	bne.n	8002876 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002858:	085b      	lsrs	r3, r3, #1
 800285a:	3b01      	subs	r3, #1
 800285c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800285e:	429a      	cmp	r2, r3
 8002860:	d109      	bne.n	8002876 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800286c:	085b      	lsrs	r3, r3, #1
 800286e:	3b01      	subs	r3, #1
 8002870:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002872:	429a      	cmp	r2, r3
 8002874:	d001      	beq.n	800287a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e000      	b.n	800287c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	3720      	adds	r7, #32
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40021000 	.word	0x40021000
 8002888:	019f800c 	.word	0x019f800c
 800288c:	feeefffc 	.word	0xfeeefffc

08002890 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800289a:	2300      	movs	r3, #0
 800289c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d101      	bne.n	80028a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e11e      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028a8:	4b91      	ldr	r3, [pc, #580]	@ (8002af0 <HAL_RCC_ClockConfig+0x260>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 030f 	and.w	r3, r3, #15
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d910      	bls.n	80028d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028b6:	4b8e      	ldr	r3, [pc, #568]	@ (8002af0 <HAL_RCC_ClockConfig+0x260>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f023 020f 	bic.w	r2, r3, #15
 80028be:	498c      	ldr	r1, [pc, #560]	@ (8002af0 <HAL_RCC_ClockConfig+0x260>)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c6:	4b8a      	ldr	r3, [pc, #552]	@ (8002af0 <HAL_RCC_ClockConfig+0x260>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d001      	beq.n	80028d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e106      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d073      	beq.n	80029cc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	2b03      	cmp	r3, #3
 80028ea:	d129      	bne.n	8002940 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ec:	4b81      	ldr	r3, [pc, #516]	@ (8002af4 <HAL_RCC_ClockConfig+0x264>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d101      	bne.n	80028fc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e0f4      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80028fc:	f000 f99e 	bl	8002c3c <RCC_GetSysClockFreqFromPLLSource>
 8002900:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	4a7c      	ldr	r2, [pc, #496]	@ (8002af8 <HAL_RCC_ClockConfig+0x268>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d93f      	bls.n	800298a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800290a:	4b7a      	ldr	r3, [pc, #488]	@ (8002af4 <HAL_RCC_ClockConfig+0x264>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d009      	beq.n	800292a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800291e:	2b00      	cmp	r3, #0
 8002920:	d033      	beq.n	800298a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002926:	2b00      	cmp	r3, #0
 8002928:	d12f      	bne.n	800298a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800292a:	4b72      	ldr	r3, [pc, #456]	@ (8002af4 <HAL_RCC_ClockConfig+0x264>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002932:	4a70      	ldr	r2, [pc, #448]	@ (8002af4 <HAL_RCC_ClockConfig+0x264>)
 8002934:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002938:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800293a:	2380      	movs	r3, #128	@ 0x80
 800293c:	617b      	str	r3, [r7, #20]
 800293e:	e024      	b.n	800298a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	2b02      	cmp	r3, #2
 8002946:	d107      	bne.n	8002958 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002948:	4b6a      	ldr	r3, [pc, #424]	@ (8002af4 <HAL_RCC_ClockConfig+0x264>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d109      	bne.n	8002968 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e0c6      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002958:	4b66      	ldr	r3, [pc, #408]	@ (8002af4 <HAL_RCC_ClockConfig+0x264>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002960:	2b00      	cmp	r3, #0
 8002962:	d101      	bne.n	8002968 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e0be      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002968:	f000 f8ce 	bl	8002b08 <HAL_RCC_GetSysClockFreq>
 800296c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	4a61      	ldr	r2, [pc, #388]	@ (8002af8 <HAL_RCC_ClockConfig+0x268>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d909      	bls.n	800298a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002976:	4b5f      	ldr	r3, [pc, #380]	@ (8002af4 <HAL_RCC_ClockConfig+0x264>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800297e:	4a5d      	ldr	r2, [pc, #372]	@ (8002af4 <HAL_RCC_ClockConfig+0x264>)
 8002980:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002984:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002986:	2380      	movs	r3, #128	@ 0x80
 8002988:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800298a:	4b5a      	ldr	r3, [pc, #360]	@ (8002af4 <HAL_RCC_ClockConfig+0x264>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f023 0203 	bic.w	r2, r3, #3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	4957      	ldr	r1, [pc, #348]	@ (8002af4 <HAL_RCC_ClockConfig+0x264>)
 8002998:	4313      	orrs	r3, r2
 800299a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800299c:	f7ff f802 	bl	80019a4 <HAL_GetTick>
 80029a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029a2:	e00a      	b.n	80029ba <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029a4:	f7fe fffe 	bl	80019a4 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e095      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ba:	4b4e      	ldr	r3, [pc, #312]	@ (8002af4 <HAL_RCC_ClockConfig+0x264>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 020c 	and.w	r2, r3, #12
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d1eb      	bne.n	80029a4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d023      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0304 	and.w	r3, r3, #4
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d005      	beq.n	80029f0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029e4:	4b43      	ldr	r3, [pc, #268]	@ (8002af4 <HAL_RCC_ClockConfig+0x264>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	4a42      	ldr	r2, [pc, #264]	@ (8002af4 <HAL_RCC_ClockConfig+0x264>)
 80029ea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80029ee:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0308 	and.w	r3, r3, #8
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d007      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80029fc:	4b3d      	ldr	r3, [pc, #244]	@ (8002af4 <HAL_RCC_ClockConfig+0x264>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002a04:	4a3b      	ldr	r2, [pc, #236]	@ (8002af4 <HAL_RCC_ClockConfig+0x264>)
 8002a06:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002a0a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a0c:	4b39      	ldr	r3, [pc, #228]	@ (8002af4 <HAL_RCC_ClockConfig+0x264>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	4936      	ldr	r1, [pc, #216]	@ (8002af4 <HAL_RCC_ClockConfig+0x264>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	608b      	str	r3, [r1, #8]
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	2b80      	cmp	r3, #128	@ 0x80
 8002a24:	d105      	bne.n	8002a32 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002a26:	4b33      	ldr	r3, [pc, #204]	@ (8002af4 <HAL_RCC_ClockConfig+0x264>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	4a32      	ldr	r2, [pc, #200]	@ (8002af4 <HAL_RCC_ClockConfig+0x264>)
 8002a2c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a30:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a32:	4b2f      	ldr	r3, [pc, #188]	@ (8002af0 <HAL_RCC_ClockConfig+0x260>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 030f 	and.w	r3, r3, #15
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d21d      	bcs.n	8002a7c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a40:	4b2b      	ldr	r3, [pc, #172]	@ (8002af0 <HAL_RCC_ClockConfig+0x260>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f023 020f 	bic.w	r2, r3, #15
 8002a48:	4929      	ldr	r1, [pc, #164]	@ (8002af0 <HAL_RCC_ClockConfig+0x260>)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a50:	f7fe ffa8 	bl	80019a4 <HAL_GetTick>
 8002a54:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a56:	e00a      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a58:	f7fe ffa4 	bl	80019a4 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e03b      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a6e:	4b20      	ldr	r3, [pc, #128]	@ (8002af0 <HAL_RCC_ClockConfig+0x260>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 030f 	and.w	r3, r3, #15
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d1ed      	bne.n	8002a58 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0304 	and.w	r3, r3, #4
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d008      	beq.n	8002a9a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a88:	4b1a      	ldr	r3, [pc, #104]	@ (8002af4 <HAL_RCC_ClockConfig+0x264>)
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	4917      	ldr	r1, [pc, #92]	@ (8002af4 <HAL_RCC_ClockConfig+0x264>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0308 	and.w	r3, r3, #8
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d009      	beq.n	8002aba <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002aa6:	4b13      	ldr	r3, [pc, #76]	@ (8002af4 <HAL_RCC_ClockConfig+0x264>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	490f      	ldr	r1, [pc, #60]	@ (8002af4 <HAL_RCC_ClockConfig+0x264>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002aba:	f000 f825 	bl	8002b08 <HAL_RCC_GetSysClockFreq>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8002af4 <HAL_RCC_ClockConfig+0x264>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	091b      	lsrs	r3, r3, #4
 8002ac6:	f003 030f 	and.w	r3, r3, #15
 8002aca:	490c      	ldr	r1, [pc, #48]	@ (8002afc <HAL_RCC_ClockConfig+0x26c>)
 8002acc:	5ccb      	ldrb	r3, [r1, r3]
 8002ace:	f003 031f 	and.w	r3, r3, #31
 8002ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ad6:	4a0a      	ldr	r2, [pc, #40]	@ (8002b00 <HAL_RCC_ClockConfig+0x270>)
 8002ad8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002ada:	4b0a      	ldr	r3, [pc, #40]	@ (8002b04 <HAL_RCC_ClockConfig+0x274>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7fe ff14 	bl	800190c <HAL_InitTick>
 8002ae4:	4603      	mov	r3, r0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3718      	adds	r7, #24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	40022000 	.word	0x40022000
 8002af4:	40021000 	.word	0x40021000
 8002af8:	04c4b400 	.word	0x04c4b400
 8002afc:	08007f98 	.word	0x08007f98
 8002b00:	20000020 	.word	0x20000020
 8002b04:	20000024 	.word	0x20000024

08002b08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b087      	sub	sp, #28
 8002b0c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002b0e:	4b2c      	ldr	r3, [pc, #176]	@ (8002bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f003 030c 	and.w	r3, r3, #12
 8002b16:	2b04      	cmp	r3, #4
 8002b18:	d102      	bne.n	8002b20 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b1a:	4b2a      	ldr	r3, [pc, #168]	@ (8002bc4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b1c:	613b      	str	r3, [r7, #16]
 8002b1e:	e047      	b.n	8002bb0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002b20:	4b27      	ldr	r3, [pc, #156]	@ (8002bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f003 030c 	and.w	r3, r3, #12
 8002b28:	2b08      	cmp	r3, #8
 8002b2a:	d102      	bne.n	8002b32 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b2c:	4b26      	ldr	r3, [pc, #152]	@ (8002bc8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b2e:	613b      	str	r3, [r7, #16]
 8002b30:	e03e      	b.n	8002bb0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002b32:	4b23      	ldr	r3, [pc, #140]	@ (8002bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f003 030c 	and.w	r3, r3, #12
 8002b3a:	2b0c      	cmp	r3, #12
 8002b3c:	d136      	bne.n	8002bac <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b3e:	4b20      	ldr	r3, [pc, #128]	@ (8002bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	f003 0303 	and.w	r3, r3, #3
 8002b46:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b48:	4b1d      	ldr	r3, [pc, #116]	@ (8002bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	091b      	lsrs	r3, r3, #4
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	3301      	adds	r3, #1
 8002b54:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2b03      	cmp	r3, #3
 8002b5a:	d10c      	bne.n	8002b76 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b5c:	4a1a      	ldr	r2, [pc, #104]	@ (8002bc8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b64:	4a16      	ldr	r2, [pc, #88]	@ (8002bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b66:	68d2      	ldr	r2, [r2, #12]
 8002b68:	0a12      	lsrs	r2, r2, #8
 8002b6a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b6e:	fb02 f303 	mul.w	r3, r2, r3
 8002b72:	617b      	str	r3, [r7, #20]
      break;
 8002b74:	e00c      	b.n	8002b90 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b76:	4a13      	ldr	r2, [pc, #76]	@ (8002bc4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b7e:	4a10      	ldr	r2, [pc, #64]	@ (8002bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b80:	68d2      	ldr	r2, [r2, #12]
 8002b82:	0a12      	lsrs	r2, r2, #8
 8002b84:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b88:	fb02 f303 	mul.w	r3, r2, r3
 8002b8c:	617b      	str	r3, [r7, #20]
      break;
 8002b8e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b90:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	0e5b      	lsrs	r3, r3, #25
 8002b96:	f003 0303 	and.w	r3, r3, #3
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002ba0:	697a      	ldr	r2, [r7, #20]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba8:	613b      	str	r3, [r7, #16]
 8002baa:	e001      	b.n	8002bb0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002bac:	2300      	movs	r3, #0
 8002bae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002bb0:	693b      	ldr	r3, [r7, #16]
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	371c      	adds	r7, #28
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	00f42400 	.word	0x00f42400
 8002bc8:	016e3600 	.word	0x016e3600

08002bcc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bd0:	4b03      	ldr	r3, [pc, #12]	@ (8002be0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	20000020 	.word	0x20000020

08002be4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002be8:	f7ff fff0 	bl	8002bcc <HAL_RCC_GetHCLKFreq>
 8002bec:	4602      	mov	r2, r0
 8002bee:	4b06      	ldr	r3, [pc, #24]	@ (8002c08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	0a1b      	lsrs	r3, r3, #8
 8002bf4:	f003 0307 	and.w	r3, r3, #7
 8002bf8:	4904      	ldr	r1, [pc, #16]	@ (8002c0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002bfa:	5ccb      	ldrb	r3, [r1, r3]
 8002bfc:	f003 031f 	and.w	r3, r3, #31
 8002c00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	40021000 	.word	0x40021000
 8002c0c:	08007fa8 	.word	0x08007fa8

08002c10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002c14:	f7ff ffda 	bl	8002bcc <HAL_RCC_GetHCLKFreq>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	4b06      	ldr	r3, [pc, #24]	@ (8002c34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	0adb      	lsrs	r3, r3, #11
 8002c20:	f003 0307 	and.w	r3, r3, #7
 8002c24:	4904      	ldr	r1, [pc, #16]	@ (8002c38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c26:	5ccb      	ldrb	r3, [r1, r3]
 8002c28:	f003 031f 	and.w	r3, r3, #31
 8002c2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40021000 	.word	0x40021000
 8002c38:	08007fa8 	.word	0x08007fa8

08002c3c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b087      	sub	sp, #28
 8002c40:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c42:	4b1e      	ldr	r3, [pc, #120]	@ (8002cbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	f003 0303 	and.w	r3, r3, #3
 8002c4a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c4c:	4b1b      	ldr	r3, [pc, #108]	@ (8002cbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	091b      	lsrs	r3, r3, #4
 8002c52:	f003 030f 	and.w	r3, r3, #15
 8002c56:	3301      	adds	r3, #1
 8002c58:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	2b03      	cmp	r3, #3
 8002c5e:	d10c      	bne.n	8002c7a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c60:	4a17      	ldr	r2, [pc, #92]	@ (8002cc0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c68:	4a14      	ldr	r2, [pc, #80]	@ (8002cbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c6a:	68d2      	ldr	r2, [r2, #12]
 8002c6c:	0a12      	lsrs	r2, r2, #8
 8002c6e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002c72:	fb02 f303 	mul.w	r3, r2, r3
 8002c76:	617b      	str	r3, [r7, #20]
    break;
 8002c78:	e00c      	b.n	8002c94 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c7a:	4a12      	ldr	r2, [pc, #72]	@ (8002cc4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c82:	4a0e      	ldr	r2, [pc, #56]	@ (8002cbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c84:	68d2      	ldr	r2, [r2, #12]
 8002c86:	0a12      	lsrs	r2, r2, #8
 8002c88:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002c8c:	fb02 f303 	mul.w	r3, r2, r3
 8002c90:	617b      	str	r3, [r7, #20]
    break;
 8002c92:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c94:	4b09      	ldr	r3, [pc, #36]	@ (8002cbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	0e5b      	lsrs	r3, r3, #25
 8002c9a:	f003 0303 	and.w	r3, r3, #3
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002ca4:	697a      	ldr	r2, [r7, #20]
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cac:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002cae:	687b      	ldr	r3, [r7, #4]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	371c      	adds	r7, #28
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	016e3600 	.word	0x016e3600
 8002cc4:	00f42400 	.word	0x00f42400

08002cc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f000 8098 	beq.w	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cea:	4b43      	ldr	r3, [pc, #268]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d10d      	bne.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cf6:	4b40      	ldr	r3, [pc, #256]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cfa:	4a3f      	ldr	r2, [pc, #252]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d00:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d02:	4b3d      	ldr	r3, [pc, #244]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d0a:	60bb      	str	r3, [r7, #8]
 8002d0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d12:	4b3a      	ldr	r3, [pc, #232]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a39      	ldr	r2, [pc, #228]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002d18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d1c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d1e:	f7fe fe41 	bl	80019a4 <HAL_GetTick>
 8002d22:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d24:	e009      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d26:	f7fe fe3d 	bl	80019a4 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d902      	bls.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	74fb      	strb	r3, [r7, #19]
        break;
 8002d38:	e005      	b.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d3a:	4b30      	ldr	r3, [pc, #192]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d0ef      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002d46:	7cfb      	ldrb	r3, [r7, #19]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d159      	bne.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d4c:	4b2a      	ldr	r3, [pc, #168]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d56:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d01e      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d019      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d68:	4b23      	ldr	r3, [pc, #140]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d72:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d74:	4b20      	ldr	r3, [pc, #128]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d7a:	4a1f      	ldr	r2, [pc, #124]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d84:	4b1c      	ldr	r3, [pc, #112]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d8a:	4a1b      	ldr	r2, [pc, #108]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d94:	4a18      	ldr	r2, [pc, #96]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d016      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da6:	f7fe fdfd 	bl	80019a4 <HAL_GetTick>
 8002daa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dac:	e00b      	b.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dae:	f7fe fdf9 	bl	80019a4 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d902      	bls.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	74fb      	strb	r3, [r7, #19]
            break;
 8002dc4:	e006      	b.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dc6:	4b0c      	ldr	r3, [pc, #48]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d0ec      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002dd4:	7cfb      	ldrb	r3, [r7, #19]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10b      	bne.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dda:	4b07      	ldr	r3, [pc, #28]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002de0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002de8:	4903      	ldr	r1, [pc, #12]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002df0:	e008      	b.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002df2:	7cfb      	ldrb	r3, [r7, #19]
 8002df4:	74bb      	strb	r3, [r7, #18]
 8002df6:	e005      	b.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e00:	7cfb      	ldrb	r3, [r7, #19]
 8002e02:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e04:	7c7b      	ldrb	r3, [r7, #17]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d105      	bne.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e0a:	4ba7      	ldr	r3, [pc, #668]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e0e:	4aa6      	ldr	r2, [pc, #664]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e14:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00a      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e22:	4ba1      	ldr	r3, [pc, #644]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e28:	f023 0203 	bic.w	r2, r3, #3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	499d      	ldr	r1, [pc, #628]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00a      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e44:	4b98      	ldr	r3, [pc, #608]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e4a:	f023 020c 	bic.w	r2, r3, #12
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	4995      	ldr	r1, [pc, #596]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0304 	and.w	r3, r3, #4
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00a      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e66:	4b90      	ldr	r3, [pc, #576]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e6c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	498c      	ldr	r1, [pc, #560]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0308 	and.w	r3, r3, #8
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d00a      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e88:	4b87      	ldr	r3, [pc, #540]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e8e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	4984      	ldr	r1, [pc, #528]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0310 	and.w	r3, r3, #16
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00a      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002eaa:	4b7f      	ldr	r3, [pc, #508]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eb0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	497b      	ldr	r1, [pc, #492]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0320 	and.w	r3, r3, #32
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00a      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ecc:	4b76      	ldr	r3, [pc, #472]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ed2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	4973      	ldr	r1, [pc, #460]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00a      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002eee:	4b6e      	ldr	r3, [pc, #440]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ef4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	69db      	ldr	r3, [r3, #28]
 8002efc:	496a      	ldr	r1, [pc, #424]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00a      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f10:	4b65      	ldr	r3, [pc, #404]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f16:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	4962      	ldr	r1, [pc, #392]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00a      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f32:	4b5d      	ldr	r3, [pc, #372]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f38:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f40:	4959      	ldr	r1, [pc, #356]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00a      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002f54:	4b54      	ldr	r3, [pc, #336]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f56:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002f5a:	f023 0203 	bic.w	r2, r3, #3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f62:	4951      	ldr	r1, [pc, #324]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00a      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f76:	4b4c      	ldr	r3, [pc, #304]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f7c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f84:	4948      	ldr	r1, [pc, #288]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d015      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f98:	4b43      	ldr	r3, [pc, #268]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f9e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa6:	4940      	ldr	r1, [pc, #256]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002fb6:	d105      	bne.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fb8:	4b3b      	ldr	r3, [pc, #236]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	4a3a      	ldr	r2, [pc, #232]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fc2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d015      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002fd0:	4b35      	ldr	r3, [pc, #212]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fd6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fde:	4932      	ldr	r1, [pc, #200]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fee:	d105      	bne.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ff0:	4b2d      	ldr	r3, [pc, #180]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	4a2c      	ldr	r2, [pc, #176]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ff6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ffa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d015      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003008:	4b27      	ldr	r3, [pc, #156]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800300a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800300e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003016:	4924      	ldr	r1, [pc, #144]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003018:	4313      	orrs	r3, r2
 800301a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003022:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003026:	d105      	bne.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003028:	4b1f      	ldr	r3, [pc, #124]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	4a1e      	ldr	r2, [pc, #120]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800302e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003032:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d015      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003040:	4b19      	ldr	r3, [pc, #100]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003042:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003046:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800304e:	4916      	ldr	r1, [pc, #88]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003050:	4313      	orrs	r3, r2
 8003052:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800305a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800305e:	d105      	bne.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003060:	4b11      	ldr	r3, [pc, #68]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	4a10      	ldr	r2, [pc, #64]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003066:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800306a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d019      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003078:	4b0b      	ldr	r3, [pc, #44]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800307a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800307e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003086:	4908      	ldr	r1, [pc, #32]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003088:	4313      	orrs	r3, r2
 800308a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003092:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003096:	d109      	bne.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003098:	4b03      	ldr	r3, [pc, #12]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	4a02      	ldr	r2, [pc, #8]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800309e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030a2:	60d3      	str	r3, [r2, #12]
 80030a4:	e002      	b.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80030a6:	bf00      	nop
 80030a8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d015      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80030b8:	4b29      	ldr	r3, [pc, #164]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030be:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030c6:	4926      	ldr	r1, [pc, #152]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80030d6:	d105      	bne.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80030d8:	4b21      	ldr	r3, [pc, #132]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	4a20      	ldr	r2, [pc, #128]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030e2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d015      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80030f0:	4b1b      	ldr	r3, [pc, #108]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030f6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030fe:	4918      	ldr	r1, [pc, #96]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003100:	4313      	orrs	r3, r2
 8003102:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800310a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800310e:	d105      	bne.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003110:	4b13      	ldr	r3, [pc, #76]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	4a12      	ldr	r2, [pc, #72]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003116:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800311a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d015      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003128:	4b0d      	ldr	r3, [pc, #52]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800312a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800312e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003136:	490a      	ldr	r1, [pc, #40]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003138:	4313      	orrs	r3, r2
 800313a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003142:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003146:	d105      	bne.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003148:	4b05      	ldr	r3, [pc, #20]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	4a04      	ldr	r2, [pc, #16]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800314e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003152:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003154:	7cbb      	ldrb	r3, [r7, #18]
}
 8003156:	4618      	mov	r0, r3
 8003158:	3718      	adds	r7, #24
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	40021000 	.word	0x40021000

08003164 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e09d      	b.n	80032b2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317a:	2b00      	cmp	r3, #0
 800317c:	d108      	bne.n	8003190 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003186:	d009      	beq.n	800319c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	61da      	str	r2, [r3, #28]
 800318e:	e005      	b.n	800319c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d106      	bne.n	80031bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f7fe f8ba 	bl	8001330 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2202      	movs	r2, #2
 80031c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031d2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80031dc:	d902      	bls.n	80031e4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80031de:	2300      	movs	r3, #0
 80031e0:	60fb      	str	r3, [r7, #12]
 80031e2:	e002      	b.n	80031ea <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80031e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80031e8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80031f2:	d007      	beq.n	8003204 <HAL_SPI_Init+0xa0>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80031fc:	d002      	beq.n	8003204 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003214:	431a      	orrs	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	431a      	orrs	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	695b      	ldr	r3, [r3, #20]
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	431a      	orrs	r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003232:	431a      	orrs	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	69db      	ldr	r3, [r3, #28]
 8003238:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800323c:	431a      	orrs	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003246:	ea42 0103 	orr.w	r1, r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800324e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	430a      	orrs	r2, r1
 8003258:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	0c1b      	lsrs	r3, r3, #16
 8003260:	f003 0204 	and.w	r2, r3, #4
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003268:	f003 0310 	and.w	r3, r3, #16
 800326c:	431a      	orrs	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003272:	f003 0308 	and.w	r3, r3, #8
 8003276:	431a      	orrs	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003280:	ea42 0103 	orr.w	r1, r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	430a      	orrs	r2, r1
 8003290:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	69da      	ldr	r2, [r3, #28]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b088      	sub	sp, #32
 80032be:	af00      	add	r7, sp, #0
 80032c0:	60f8      	str	r0, [r7, #12]
 80032c2:	60b9      	str	r1, [r7, #8]
 80032c4:	603b      	str	r3, [r7, #0]
 80032c6:	4613      	mov	r3, r2
 80032c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80032ca:	2300      	movs	r3, #0
 80032cc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d101      	bne.n	80032dc <HAL_SPI_Transmit+0x22>
 80032d8:	2302      	movs	r3, #2
 80032da:	e15f      	b.n	800359c <HAL_SPI_Transmit+0x2e2>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032e4:	f7fe fb5e 	bl	80019a4 <HAL_GetTick>
 80032e8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80032ea:	88fb      	ldrh	r3, [r7, #6]
 80032ec:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d002      	beq.n	8003300 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80032fa:	2302      	movs	r3, #2
 80032fc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032fe:	e148      	b.n	8003592 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d002      	beq.n	800330c <HAL_SPI_Transmit+0x52>
 8003306:	88fb      	ldrh	r3, [r7, #6]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d102      	bne.n	8003312 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003310:	e13f      	b.n	8003592 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2203      	movs	r2, #3
 8003316:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2200      	movs	r2, #0
 800331e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	68ba      	ldr	r2, [r7, #8]
 8003324:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	88fa      	ldrh	r2, [r7, #6]
 800332a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	88fa      	ldrh	r2, [r7, #6]
 8003330:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800335c:	d10f      	bne.n	800337e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800336c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800337c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003388:	2b40      	cmp	r3, #64	@ 0x40
 800338a:	d007      	beq.n	800339c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800339a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80033a4:	d94f      	bls.n	8003446 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d002      	beq.n	80033b4 <HAL_SPI_Transmit+0xfa>
 80033ae:	8afb      	ldrh	r3, [r7, #22]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d142      	bne.n	800343a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033b8:	881a      	ldrh	r2, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033c4:	1c9a      	adds	r2, r3, #2
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	3b01      	subs	r3, #1
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80033d8:	e02f      	b.n	800343a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f003 0302 	and.w	r3, r3, #2
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d112      	bne.n	800340e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ec:	881a      	ldrh	r2, [r3, #0]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033f8:	1c9a      	adds	r2, r3, #2
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003402:	b29b      	uxth	r3, r3
 8003404:	3b01      	subs	r3, #1
 8003406:	b29a      	uxth	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800340c:	e015      	b.n	800343a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800340e:	f7fe fac9 	bl	80019a4 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	683a      	ldr	r2, [r7, #0]
 800341a:	429a      	cmp	r2, r3
 800341c:	d803      	bhi.n	8003426 <HAL_SPI_Transmit+0x16c>
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003424:	d102      	bne.n	800342c <HAL_SPI_Transmit+0x172>
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d106      	bne.n	800343a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003438:	e0ab      	b.n	8003592 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800343e:	b29b      	uxth	r3, r3
 8003440:	2b00      	cmp	r3, #0
 8003442:	d1ca      	bne.n	80033da <HAL_SPI_Transmit+0x120>
 8003444:	e080      	b.n	8003548 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d002      	beq.n	8003454 <HAL_SPI_Transmit+0x19a>
 800344e:	8afb      	ldrh	r3, [r7, #22]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d174      	bne.n	800353e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003458:	b29b      	uxth	r3, r3
 800345a:	2b01      	cmp	r3, #1
 800345c:	d912      	bls.n	8003484 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003462:	881a      	ldrh	r2, [r3, #0]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800346e:	1c9a      	adds	r2, r3, #2
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003478:	b29b      	uxth	r3, r3
 800347a:	3b02      	subs	r3, #2
 800347c:	b29a      	uxth	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003482:	e05c      	b.n	800353e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	330c      	adds	r3, #12
 800348e:	7812      	ldrb	r2, [r2, #0]
 8003490:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003496:	1c5a      	adds	r2, r3, #1
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	3b01      	subs	r3, #1
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80034aa:	e048      	b.n	800353e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d12b      	bne.n	8003512 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034be:	b29b      	uxth	r3, r3
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d912      	bls.n	80034ea <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034c8:	881a      	ldrh	r2, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034d4:	1c9a      	adds	r2, r3, #2
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034de:	b29b      	uxth	r3, r3
 80034e0:	3b02      	subs	r3, #2
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80034e8:	e029      	b.n	800353e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	330c      	adds	r3, #12
 80034f4:	7812      	ldrb	r2, [r2, #0]
 80034f6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034fc:	1c5a      	adds	r2, r3, #1
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003506:	b29b      	uxth	r3, r3
 8003508:	3b01      	subs	r3, #1
 800350a:	b29a      	uxth	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003510:	e015      	b.n	800353e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003512:	f7fe fa47 	bl	80019a4 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	683a      	ldr	r2, [r7, #0]
 800351e:	429a      	cmp	r2, r3
 8003520:	d803      	bhi.n	800352a <HAL_SPI_Transmit+0x270>
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003528:	d102      	bne.n	8003530 <HAL_SPI_Transmit+0x276>
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d106      	bne.n	800353e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800353c:	e029      	b.n	8003592 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003542:	b29b      	uxth	r3, r3
 8003544:	2b00      	cmp	r3, #0
 8003546:	d1b1      	bne.n	80034ac <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	6839      	ldr	r1, [r7, #0]
 800354c:	68f8      	ldr	r0, [r7, #12]
 800354e:	f000 fe0d 	bl	800416c <SPI_EndRxTxTransaction>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d002      	beq.n	800355e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2220      	movs	r2, #32
 800355c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d10a      	bne.n	800357c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003566:	2300      	movs	r3, #0
 8003568:	613b      	str	r3, [r7, #16]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	613b      	str	r3, [r7, #16]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	613b      	str	r3, [r7, #16]
 800357a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003580:	2b00      	cmp	r3, #0
 8003582:	d002      	beq.n	800358a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	77fb      	strb	r3, [r7, #31]
 8003588:	e003      	b.n	8003592 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800359a:	7ffb      	ldrb	r3, [r7, #31]
}
 800359c:	4618      	mov	r0, r3
 800359e:	3720      	adds	r7, #32
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b088      	sub	sp, #32
 80035a8:	af02      	add	r7, sp, #8
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	603b      	str	r3, [r7, #0]
 80035b0:	4613      	mov	r3, r2
 80035b2:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80035b4:	2300      	movs	r3, #0
 80035b6:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d002      	beq.n	80035ca <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80035c4:	2302      	movs	r3, #2
 80035c6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80035c8:	e11a      	b.n	8003800 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035d2:	d112      	bne.n	80035fa <HAL_SPI_Receive+0x56>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10e      	bne.n	80035fa <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2204      	movs	r2, #4
 80035e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80035e4:	88fa      	ldrh	r2, [r7, #6]
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	9300      	str	r3, [sp, #0]
 80035ea:	4613      	mov	r3, r2
 80035ec:	68ba      	ldr	r2, [r7, #8]
 80035ee:	68b9      	ldr	r1, [r7, #8]
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	f000 f90e 	bl	8003812 <HAL_SPI_TransmitReceive>
 80035f6:	4603      	mov	r3, r0
 80035f8:	e107      	b.n	800380a <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003600:	2b01      	cmp	r3, #1
 8003602:	d101      	bne.n	8003608 <HAL_SPI_Receive+0x64>
 8003604:	2302      	movs	r3, #2
 8003606:	e100      	b.n	800380a <HAL_SPI_Receive+0x266>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003610:	f7fe f9c8 	bl	80019a4 <HAL_GetTick>
 8003614:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d002      	beq.n	8003622 <HAL_SPI_Receive+0x7e>
 800361c:	88fb      	ldrh	r3, [r7, #6]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d102      	bne.n	8003628 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003626:	e0eb      	b.n	8003800 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2204      	movs	r2, #4
 800362c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	68ba      	ldr	r2, [r7, #8]
 800363a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	88fa      	ldrh	r2, [r7, #6]
 8003640:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	88fa      	ldrh	r2, [r7, #6]
 8003648:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003672:	d908      	bls.n	8003686 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	685a      	ldr	r2, [r3, #4]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003682:	605a      	str	r2, [r3, #4]
 8003684:	e007      	b.n	8003696 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	685a      	ldr	r2, [r3, #4]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003694:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800369e:	d10f      	bne.n	80036c0 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036ae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80036be:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036ca:	2b40      	cmp	r3, #64	@ 0x40
 80036cc:	d007      	beq.n	80036de <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80036dc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80036e6:	d86f      	bhi.n	80037c8 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80036e8:	e034      	b.n	8003754 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f003 0301 	and.w	r3, r3, #1
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d117      	bne.n	8003728 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f103 020c 	add.w	r2, r3, #12
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003704:	7812      	ldrb	r2, [r2, #0]
 8003706:	b2d2      	uxtb	r2, r2
 8003708:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370e:	1c5a      	adds	r2, r3, #1
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800371a:	b29b      	uxth	r3, r3
 800371c:	3b01      	subs	r3, #1
 800371e:	b29a      	uxth	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003726:	e015      	b.n	8003754 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003728:	f7fe f93c 	bl	80019a4 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	683a      	ldr	r2, [r7, #0]
 8003734:	429a      	cmp	r2, r3
 8003736:	d803      	bhi.n	8003740 <HAL_SPI_Receive+0x19c>
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800373e:	d102      	bne.n	8003746 <HAL_SPI_Receive+0x1a2>
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d106      	bne.n	8003754 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003752:	e055      	b.n	8003800 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800375a:	b29b      	uxth	r3, r3
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1c4      	bne.n	80036ea <HAL_SPI_Receive+0x146>
 8003760:	e038      	b.n	80037d4 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	2b01      	cmp	r3, #1
 800376e:	d115      	bne.n	800379c <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68da      	ldr	r2, [r3, #12]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377a:	b292      	uxth	r2, r2
 800377c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003782:	1c9a      	adds	r2, r3, #2
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800378e:	b29b      	uxth	r3, r3
 8003790:	3b01      	subs	r3, #1
 8003792:	b29a      	uxth	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800379a:	e015      	b.n	80037c8 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800379c:	f7fe f902 	bl	80019a4 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	683a      	ldr	r2, [r7, #0]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d803      	bhi.n	80037b4 <HAL_SPI_Receive+0x210>
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b2:	d102      	bne.n	80037ba <HAL_SPI_Receive+0x216>
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d106      	bne.n	80037c8 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80037c6:	e01b      	b.n	8003800 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1c6      	bne.n	8003762 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	6839      	ldr	r1, [r7, #0]
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f000 fc6f 	bl	80040bc <SPI_EndRxTransaction>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d002      	beq.n	80037ea <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2220      	movs	r2, #32
 80037e8:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d002      	beq.n	80037f8 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	75fb      	strb	r3, [r7, #23]
 80037f6:	e003      	b.n	8003800 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003808:	7dfb      	ldrb	r3, [r7, #23]
}
 800380a:	4618      	mov	r0, r3
 800380c:	3718      	adds	r7, #24
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	b08a      	sub	sp, #40	@ 0x28
 8003816:	af00      	add	r7, sp, #0
 8003818:	60f8      	str	r0, [r7, #12]
 800381a:	60b9      	str	r1, [r7, #8]
 800381c:	607a      	str	r2, [r7, #4]
 800381e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003820:	2301      	movs	r3, #1
 8003822:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003824:	2300      	movs	r3, #0
 8003826:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003830:	2b01      	cmp	r3, #1
 8003832:	d101      	bne.n	8003838 <HAL_SPI_TransmitReceive+0x26>
 8003834:	2302      	movs	r3, #2
 8003836:	e20a      	b.n	8003c4e <HAL_SPI_TransmitReceive+0x43c>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003840:	f7fe f8b0 	bl	80019a4 <HAL_GetTick>
 8003844:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800384c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003854:	887b      	ldrh	r3, [r7, #2]
 8003856:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003858:	887b      	ldrh	r3, [r7, #2]
 800385a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800385c:	7efb      	ldrb	r3, [r7, #27]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d00e      	beq.n	8003880 <HAL_SPI_TransmitReceive+0x6e>
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003868:	d106      	bne.n	8003878 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d102      	bne.n	8003878 <HAL_SPI_TransmitReceive+0x66>
 8003872:	7efb      	ldrb	r3, [r7, #27]
 8003874:	2b04      	cmp	r3, #4
 8003876:	d003      	beq.n	8003880 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003878:	2302      	movs	r3, #2
 800387a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800387e:	e1e0      	b.n	8003c42 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d005      	beq.n	8003892 <HAL_SPI_TransmitReceive+0x80>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d002      	beq.n	8003892 <HAL_SPI_TransmitReceive+0x80>
 800388c:	887b      	ldrh	r3, [r7, #2]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d103      	bne.n	800389a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003898:	e1d3      	b.n	8003c42 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	2b04      	cmp	r3, #4
 80038a4:	d003      	beq.n	80038ae <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2205      	movs	r2, #5
 80038aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	887a      	ldrh	r2, [r7, #2]
 80038be:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	887a      	ldrh	r2, [r7, #2]
 80038c6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	68ba      	ldr	r2, [r7, #8]
 80038ce:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	887a      	ldrh	r2, [r7, #2]
 80038d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	887a      	ldrh	r2, [r7, #2]
 80038da:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80038f0:	d802      	bhi.n	80038f8 <HAL_SPI_TransmitReceive+0xe6>
 80038f2:	8a3b      	ldrh	r3, [r7, #16]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d908      	bls.n	800390a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	685a      	ldr	r2, [r3, #4]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003906:	605a      	str	r2, [r3, #4]
 8003908:	e007      	b.n	800391a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	685a      	ldr	r2, [r3, #4]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003918:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003924:	2b40      	cmp	r3, #64	@ 0x40
 8003926:	d007      	beq.n	8003938 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003936:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003940:	f240 8081 	bls.w	8003a46 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d002      	beq.n	8003952 <HAL_SPI_TransmitReceive+0x140>
 800394c:	8a7b      	ldrh	r3, [r7, #18]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d16d      	bne.n	8003a2e <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003956:	881a      	ldrh	r2, [r3, #0]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003962:	1c9a      	adds	r2, r3, #2
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800396c:	b29b      	uxth	r3, r3
 800396e:	3b01      	subs	r3, #1
 8003970:	b29a      	uxth	r2, r3
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003976:	e05a      	b.n	8003a2e <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b02      	cmp	r3, #2
 8003984:	d11b      	bne.n	80039be <HAL_SPI_TransmitReceive+0x1ac>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800398a:	b29b      	uxth	r3, r3
 800398c:	2b00      	cmp	r3, #0
 800398e:	d016      	beq.n	80039be <HAL_SPI_TransmitReceive+0x1ac>
 8003990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003992:	2b01      	cmp	r3, #1
 8003994:	d113      	bne.n	80039be <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800399a:	881a      	ldrh	r2, [r3, #0]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039a6:	1c9a      	adds	r2, r3, #2
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	3b01      	subs	r3, #1
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039ba:	2300      	movs	r3, #0
 80039bc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f003 0301 	and.w	r3, r3, #1
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d11c      	bne.n	8003a06 <HAL_SPI_TransmitReceive+0x1f4>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d016      	beq.n	8003a06 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68da      	ldr	r2, [r3, #12]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e2:	b292      	uxth	r2, r2
 80039e4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ea:	1c9a      	adds	r2, r3, #2
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	3b01      	subs	r3, #1
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a02:	2301      	movs	r3, #1
 8003a04:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003a06:	f7fd ffcd 	bl	80019a4 <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d80b      	bhi.n	8003a2e <HAL_SPI_TransmitReceive+0x21c>
 8003a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a1c:	d007      	beq.n	8003a2e <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003a2c:	e109      	b.n	8003c42 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d19f      	bne.n	8003978 <HAL_SPI_TransmitReceive+0x166>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d199      	bne.n	8003978 <HAL_SPI_TransmitReceive+0x166>
 8003a44:	e0e3      	b.n	8003c0e <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d003      	beq.n	8003a56 <HAL_SPI_TransmitReceive+0x244>
 8003a4e:	8a7b      	ldrh	r3, [r7, #18]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	f040 80cf 	bne.w	8003bf4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d912      	bls.n	8003a86 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a64:	881a      	ldrh	r2, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a70:	1c9a      	adds	r2, r3, #2
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	3b02      	subs	r3, #2
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003a84:	e0b6      	b.n	8003bf4 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	330c      	adds	r3, #12
 8003a90:	7812      	ldrb	r2, [r2, #0]
 8003a92:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a98:	1c5a      	adds	r2, r3, #1
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003aac:	e0a2      	b.n	8003bf4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d134      	bne.n	8003b26 <HAL_SPI_TransmitReceive+0x314>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d02f      	beq.n	8003b26 <HAL_SPI_TransmitReceive+0x314>
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d12c      	bne.n	8003b26 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d912      	bls.n	8003afc <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ada:	881a      	ldrh	r2, [r3, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ae6:	1c9a      	adds	r2, r3, #2
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	3b02      	subs	r3, #2
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003afa:	e012      	b.n	8003b22 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	330c      	adds	r3, #12
 8003b06:	7812      	ldrb	r2, [r2, #0]
 8003b08:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b0e:	1c5a      	adds	r2, r3, #1
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b22:	2300      	movs	r3, #0
 8003b24:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f003 0301 	and.w	r3, r3, #1
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d148      	bne.n	8003bc6 <HAL_SPI_TransmitReceive+0x3b4>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d042      	beq.n	8003bc6 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d923      	bls.n	8003b94 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68da      	ldr	r2, [r3, #12]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b56:	b292      	uxth	r2, r2
 8003b58:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b5e:	1c9a      	adds	r2, r3, #2
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	3b02      	subs	r3, #2
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d81f      	bhi.n	8003bc2 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	685a      	ldr	r2, [r3, #4]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003b90:	605a      	str	r2, [r3, #4]
 8003b92:	e016      	b.n	8003bc2 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f103 020c 	add.w	r2, r3, #12
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba0:	7812      	ldrb	r2, [r2, #0]
 8003ba2:	b2d2      	uxtb	r2, r2
 8003ba4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003baa:	1c5a      	adds	r2, r3, #1
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003bc6:	f7fd feed 	bl	80019a4 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d803      	bhi.n	8003bde <HAL_SPI_TransmitReceive+0x3cc>
 8003bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bdc:	d102      	bne.n	8003be4 <HAL_SPI_TransmitReceive+0x3d2>
 8003bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d107      	bne.n	8003bf4 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003bf2:	e026      	b.n	8003c42 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f47f af57 	bne.w	8003aae <HAL_SPI_TransmitReceive+0x29c>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f47f af50 	bne.w	8003aae <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c0e:	69fa      	ldr	r2, [r7, #28]
 8003c10:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f000 faaa 	bl	800416c <SPI_EndRxTxTransaction>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d005      	beq.n	8003c2a <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2220      	movs	r2, #32
 8003c28:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d003      	beq.n	8003c3a <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c38:	e003      	b.n	8003c42 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003c4a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3728      	adds	r7, #40	@ 0x28
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
	...

08003c58 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b088      	sub	sp, #32
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10e      	bne.n	8003c98 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d009      	beq.n	8003c98 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d004      	beq.n	8003c98 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	4798      	blx	r3
    return;
 8003c96:	e0ce      	b.n	8003e36 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d009      	beq.n	8003cb6 <HAL_SPI_IRQHandler+0x5e>
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d004      	beq.n	8003cb6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	4798      	blx	r3
    return;
 8003cb4:	e0bf      	b.n	8003e36 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	f003 0320 	and.w	r3, r3, #32
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10a      	bne.n	8003cd6 <HAL_SPI_IRQHandler+0x7e>
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d105      	bne.n	8003cd6 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f000 80b0 	beq.w	8003e36 <HAL_SPI_IRQHandler+0x1de>
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	f003 0320 	and.w	r3, r3, #32
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f000 80aa 	beq.w	8003e36 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d023      	beq.n	8003d34 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b03      	cmp	r3, #3
 8003cf6:	d011      	beq.n	8003d1c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cfc:	f043 0204 	orr.w	r2, r3, #4
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d04:	2300      	movs	r3, #0
 8003d06:	617b      	str	r3, [r7, #20]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	617b      	str	r3, [r7, #20]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	617b      	str	r3, [r7, #20]
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	e00b      	b.n	8003d34 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	613b      	str	r3, [r7, #16]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	613b      	str	r3, [r7, #16]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	613b      	str	r3, [r7, #16]
 8003d30:	693b      	ldr	r3, [r7, #16]
        return;
 8003d32:	e080      	b.n	8003e36 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	f003 0320 	and.w	r3, r3, #32
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d014      	beq.n	8003d68 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d42:	f043 0201 	orr.w	r2, r3, #1
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	60fb      	str	r3, [r7, #12]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	60fb      	str	r3, [r7, #12]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d64:	601a      	str	r2, [r3, #0]
 8003d66:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00c      	beq.n	8003d8c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d76:	f043 0208 	orr.w	r2, r3, #8
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003d7e:	2300      	movs	r3, #0
 8003d80:	60bb      	str	r3, [r7, #8]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	60bb      	str	r3, [r7, #8]
 8003d8a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d04f      	beq.n	8003e34 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	685a      	ldr	r2, [r3, #4]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003da2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d104      	bne.n	8003dc0 <HAL_SPI_IRQHandler+0x168>
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	f003 0301 	and.w	r3, r3, #1
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d034      	beq.n	8003e2a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685a      	ldr	r2, [r3, #4]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f022 0203 	bic.w	r2, r2, #3
 8003dce:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d011      	beq.n	8003dfc <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ddc:	4a17      	ldr	r2, [pc, #92]	@ (8003e3c <HAL_SPI_IRQHandler+0x1e4>)
 8003dde:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7fd ff73 	bl	8001cd0 <HAL_DMA_Abort_IT>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d005      	beq.n	8003dfc <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003df4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d016      	beq.n	8003e32 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e08:	4a0c      	ldr	r2, [pc, #48]	@ (8003e3c <HAL_SPI_IRQHandler+0x1e4>)
 8003e0a:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7fd ff5d 	bl	8001cd0 <HAL_DMA_Abort_IT>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00a      	beq.n	8003e32 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e20:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8003e28:	e003      	b.n	8003e32 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f808 	bl	8003e40 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003e30:	e000      	b.n	8003e34 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8003e32:	bf00      	nop
    return;
 8003e34:	bf00      	nop
  }
}
 8003e36:	3720      	adds	r7, #32
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	08003e55 	.word	0x08003e55

08003e40 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e60:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	f7ff ffe5 	bl	8003e40 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003e76:	bf00      	nop
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
	...

08003e80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b088      	sub	sp, #32
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	603b      	str	r3, [r7, #0]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e90:	f7fd fd88 	bl	80019a4 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e98:	1a9b      	subs	r3, r3, r2
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ea0:	f7fd fd80 	bl	80019a4 <HAL_GetTick>
 8003ea4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ea6:	4b39      	ldr	r3, [pc, #228]	@ (8003f8c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	015b      	lsls	r3, r3, #5
 8003eac:	0d1b      	lsrs	r3, r3, #20
 8003eae:	69fa      	ldr	r2, [r7, #28]
 8003eb0:	fb02 f303 	mul.w	r3, r2, r3
 8003eb4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003eb6:	e054      	b.n	8003f62 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ebe:	d050      	beq.n	8003f62 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ec0:	f7fd fd70 	bl	80019a4 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	69fa      	ldr	r2, [r7, #28]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d902      	bls.n	8003ed6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d13d      	bne.n	8003f52 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	685a      	ldr	r2, [r3, #4]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003ee4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003eee:	d111      	bne.n	8003f14 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ef8:	d004      	beq.n	8003f04 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f02:	d107      	bne.n	8003f14 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f1c:	d10f      	bne.n	8003f3e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f2c:	601a      	str	r2, [r3, #0]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e017      	b.n	8003f82 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d101      	bne.n	8003f5c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	689a      	ldr	r2, [r3, #8]
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	68ba      	ldr	r2, [r7, #8]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	bf0c      	ite	eq
 8003f72:	2301      	moveq	r3, #1
 8003f74:	2300      	movne	r3, #0
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	461a      	mov	r2, r3
 8003f7a:	79fb      	ldrb	r3, [r7, #7]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d19b      	bne.n	8003eb8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3720      	adds	r7, #32
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	20000020 	.word	0x20000020

08003f90 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b08a      	sub	sp, #40	@ 0x28
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
 8003f9c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003fa2:	f7fd fcff 	bl	80019a4 <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003faa:	1a9b      	subs	r3, r3, r2
 8003fac:	683a      	ldr	r2, [r7, #0]
 8003fae:	4413      	add	r3, r2
 8003fb0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003fb2:	f7fd fcf7 	bl	80019a4 <HAL_GetTick>
 8003fb6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	330c      	adds	r3, #12
 8003fbe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003fc0:	4b3d      	ldr	r3, [pc, #244]	@ (80040b8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4413      	add	r3, r2
 8003fca:	00da      	lsls	r2, r3, #3
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	0d1b      	lsrs	r3, r3, #20
 8003fd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fd2:	fb02 f303 	mul.w	r3, r2, r3
 8003fd6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003fd8:	e060      	b.n	800409c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003fe0:	d107      	bne.n	8003ff2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d104      	bne.n	8003ff2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003ff0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff8:	d050      	beq.n	800409c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ffa:	f7fd fcd3 	bl	80019a4 <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	6a3b      	ldr	r3, [r7, #32]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004006:	429a      	cmp	r2, r3
 8004008:	d902      	bls.n	8004010 <SPI_WaitFifoStateUntilTimeout+0x80>
 800400a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400c:	2b00      	cmp	r3, #0
 800400e:	d13d      	bne.n	800408c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685a      	ldr	r2, [r3, #4]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800401e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004028:	d111      	bne.n	800404e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004032:	d004      	beq.n	800403e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800403c:	d107      	bne.n	800404e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800404c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004052:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004056:	d10f      	bne.n	8004078 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004066:	601a      	str	r2, [r3, #0]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004076:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e010      	b.n	80040ae <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004092:	2300      	movs	r3, #0
 8004094:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	3b01      	subs	r3, #1
 800409a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	689a      	ldr	r2, [r3, #8]
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	4013      	ands	r3, r2
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d196      	bne.n	8003fda <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3728      	adds	r7, #40	@ 0x28
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	20000020 	.word	0x20000020

080040bc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b086      	sub	sp, #24
 80040c0:	af02      	add	r7, sp, #8
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040d0:	d111      	bne.n	80040f6 <SPI_EndRxTransaction+0x3a>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040da:	d004      	beq.n	80040e6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040e4:	d107      	bne.n	80040f6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040f4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	9300      	str	r3, [sp, #0]
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	2200      	movs	r2, #0
 80040fe:	2180      	movs	r1, #128	@ 0x80
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f7ff febd 	bl	8003e80 <SPI_WaitFlagStateUntilTimeout>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d007      	beq.n	800411c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004110:	f043 0220 	orr.w	r2, r3, #32
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e023      	b.n	8004164 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004124:	d11d      	bne.n	8004162 <SPI_EndRxTransaction+0xa6>
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800412e:	d004      	beq.n	800413a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004138:	d113      	bne.n	8004162 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	9300      	str	r3, [sp, #0]
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	2200      	movs	r2, #0
 8004142:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	f7ff ff22 	bl	8003f90 <SPI_WaitFifoStateUntilTimeout>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d007      	beq.n	8004162 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004156:	f043 0220 	orr.w	r2, r3, #32
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e000      	b.n	8004164 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	3710      	adds	r7, #16
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af02      	add	r7, sp, #8
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	9300      	str	r3, [sp, #0]
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	2200      	movs	r2, #0
 8004180:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004184:	68f8      	ldr	r0, [r7, #12]
 8004186:	f7ff ff03 	bl	8003f90 <SPI_WaitFifoStateUntilTimeout>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d007      	beq.n	80041a0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004194:	f043 0220 	orr.w	r2, r3, #32
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e027      	b.n	80041f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	9300      	str	r3, [sp, #0]
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	2200      	movs	r2, #0
 80041a8:	2180      	movs	r1, #128	@ 0x80
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	f7ff fe68 	bl	8003e80 <SPI_WaitFlagStateUntilTimeout>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d007      	beq.n	80041c6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041ba:	f043 0220 	orr.w	r2, r3, #32
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e014      	b.n	80041f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	9300      	str	r3, [sp, #0]
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f7ff fedc 	bl	8003f90 <SPI_WaitFifoStateUntilTimeout>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d007      	beq.n	80041ee <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041e2:	f043 0220 	orr.w	r2, r3, #32
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e000      	b.n	80041f0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e049      	b.n	800429e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d106      	bne.n	8004224 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7fd f8f0 	bl	8001404 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2202      	movs	r2, #2
 8004228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	3304      	adds	r3, #4
 8004234:	4619      	mov	r1, r3
 8004236:	4610      	mov	r0, r2
 8004238:	f000 fe88 	bl	8004f4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3708      	adds	r7, #8
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042a6:	b580      	push	{r7, lr}
 80042a8:	b082      	sub	sp, #8
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d101      	bne.n	80042b8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e049      	b.n	800434c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d106      	bne.n	80042d2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 f841 	bl	8004354 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2202      	movs	r2, #2
 80042d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	3304      	adds	r3, #4
 80042e2:	4619      	mov	r1, r3
 80042e4:	4610      	mov	r0, r2
 80042e6:	f000 fe31 	bl	8004f4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2201      	movs	r2, #1
 80042ee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2201      	movs	r2, #1
 80042fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2201      	movs	r2, #1
 800430e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2201      	movs	r2, #1
 800431e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2201      	movs	r2, #1
 800432e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2201      	movs	r2, #1
 8004346:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	3708      	adds	r7, #8
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d109      	bne.n	800438c <HAL_TIM_PWM_Start+0x24>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800437e:	b2db      	uxtb	r3, r3
 8004380:	2b01      	cmp	r3, #1
 8004382:	bf14      	ite	ne
 8004384:	2301      	movne	r3, #1
 8004386:	2300      	moveq	r3, #0
 8004388:	b2db      	uxtb	r3, r3
 800438a:	e03c      	b.n	8004406 <HAL_TIM_PWM_Start+0x9e>
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	2b04      	cmp	r3, #4
 8004390:	d109      	bne.n	80043a6 <HAL_TIM_PWM_Start+0x3e>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b01      	cmp	r3, #1
 800439c:	bf14      	ite	ne
 800439e:	2301      	movne	r3, #1
 80043a0:	2300      	moveq	r3, #0
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	e02f      	b.n	8004406 <HAL_TIM_PWM_Start+0x9e>
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	2b08      	cmp	r3, #8
 80043aa:	d109      	bne.n	80043c0 <HAL_TIM_PWM_Start+0x58>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	bf14      	ite	ne
 80043b8:	2301      	movne	r3, #1
 80043ba:	2300      	moveq	r3, #0
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	e022      	b.n	8004406 <HAL_TIM_PWM_Start+0x9e>
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	2b0c      	cmp	r3, #12
 80043c4:	d109      	bne.n	80043da <HAL_TIM_PWM_Start+0x72>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	bf14      	ite	ne
 80043d2:	2301      	movne	r3, #1
 80043d4:	2300      	moveq	r3, #0
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	e015      	b.n	8004406 <HAL_TIM_PWM_Start+0x9e>
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	2b10      	cmp	r3, #16
 80043de:	d109      	bne.n	80043f4 <HAL_TIM_PWM_Start+0x8c>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	bf14      	ite	ne
 80043ec:	2301      	movne	r3, #1
 80043ee:	2300      	moveq	r3, #0
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	e008      	b.n	8004406 <HAL_TIM_PWM_Start+0x9e>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	bf14      	ite	ne
 8004400:	2301      	movne	r3, #1
 8004402:	2300      	moveq	r3, #0
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d001      	beq.n	800440e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e0a6      	b.n	800455c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d104      	bne.n	800441e <HAL_TIM_PWM_Start+0xb6>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2202      	movs	r2, #2
 8004418:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800441c:	e023      	b.n	8004466 <HAL_TIM_PWM_Start+0xfe>
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	2b04      	cmp	r3, #4
 8004422:	d104      	bne.n	800442e <HAL_TIM_PWM_Start+0xc6>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2202      	movs	r2, #2
 8004428:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800442c:	e01b      	b.n	8004466 <HAL_TIM_PWM_Start+0xfe>
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	2b08      	cmp	r3, #8
 8004432:	d104      	bne.n	800443e <HAL_TIM_PWM_Start+0xd6>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2202      	movs	r2, #2
 8004438:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800443c:	e013      	b.n	8004466 <HAL_TIM_PWM_Start+0xfe>
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	2b0c      	cmp	r3, #12
 8004442:	d104      	bne.n	800444e <HAL_TIM_PWM_Start+0xe6>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2202      	movs	r2, #2
 8004448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800444c:	e00b      	b.n	8004466 <HAL_TIM_PWM_Start+0xfe>
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	2b10      	cmp	r3, #16
 8004452:	d104      	bne.n	800445e <HAL_TIM_PWM_Start+0xf6>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2202      	movs	r2, #2
 8004458:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800445c:	e003      	b.n	8004466 <HAL_TIM_PWM_Start+0xfe>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2202      	movs	r2, #2
 8004462:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2201      	movs	r2, #1
 800446c:	6839      	ldr	r1, [r7, #0]
 800446e:	4618      	mov	r0, r3
 8004470:	f001 f9e6 	bl	8005840 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a3a      	ldr	r2, [pc, #232]	@ (8004564 <HAL_TIM_PWM_Start+0x1fc>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d018      	beq.n	80044b0 <HAL_TIM_PWM_Start+0x148>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a39      	ldr	r2, [pc, #228]	@ (8004568 <HAL_TIM_PWM_Start+0x200>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d013      	beq.n	80044b0 <HAL_TIM_PWM_Start+0x148>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a37      	ldr	r2, [pc, #220]	@ (800456c <HAL_TIM_PWM_Start+0x204>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d00e      	beq.n	80044b0 <HAL_TIM_PWM_Start+0x148>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a36      	ldr	r2, [pc, #216]	@ (8004570 <HAL_TIM_PWM_Start+0x208>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d009      	beq.n	80044b0 <HAL_TIM_PWM_Start+0x148>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a34      	ldr	r2, [pc, #208]	@ (8004574 <HAL_TIM_PWM_Start+0x20c>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d004      	beq.n	80044b0 <HAL_TIM_PWM_Start+0x148>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a33      	ldr	r2, [pc, #204]	@ (8004578 <HAL_TIM_PWM_Start+0x210>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d101      	bne.n	80044b4 <HAL_TIM_PWM_Start+0x14c>
 80044b0:	2301      	movs	r3, #1
 80044b2:	e000      	b.n	80044b6 <HAL_TIM_PWM_Start+0x14e>
 80044b4:	2300      	movs	r3, #0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d007      	beq.n	80044ca <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80044c8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a25      	ldr	r2, [pc, #148]	@ (8004564 <HAL_TIM_PWM_Start+0x1fc>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d022      	beq.n	800451a <HAL_TIM_PWM_Start+0x1b2>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044dc:	d01d      	beq.n	800451a <HAL_TIM_PWM_Start+0x1b2>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a26      	ldr	r2, [pc, #152]	@ (800457c <HAL_TIM_PWM_Start+0x214>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d018      	beq.n	800451a <HAL_TIM_PWM_Start+0x1b2>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a24      	ldr	r2, [pc, #144]	@ (8004580 <HAL_TIM_PWM_Start+0x218>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d013      	beq.n	800451a <HAL_TIM_PWM_Start+0x1b2>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a23      	ldr	r2, [pc, #140]	@ (8004584 <HAL_TIM_PWM_Start+0x21c>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d00e      	beq.n	800451a <HAL_TIM_PWM_Start+0x1b2>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a19      	ldr	r2, [pc, #100]	@ (8004568 <HAL_TIM_PWM_Start+0x200>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d009      	beq.n	800451a <HAL_TIM_PWM_Start+0x1b2>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a18      	ldr	r2, [pc, #96]	@ (800456c <HAL_TIM_PWM_Start+0x204>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d004      	beq.n	800451a <HAL_TIM_PWM_Start+0x1b2>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a18      	ldr	r2, [pc, #96]	@ (8004578 <HAL_TIM_PWM_Start+0x210>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d115      	bne.n	8004546 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	689a      	ldr	r2, [r3, #8]
 8004520:	4b19      	ldr	r3, [pc, #100]	@ (8004588 <HAL_TIM_PWM_Start+0x220>)
 8004522:	4013      	ands	r3, r2
 8004524:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2b06      	cmp	r3, #6
 800452a:	d015      	beq.n	8004558 <HAL_TIM_PWM_Start+0x1f0>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004532:	d011      	beq.n	8004558 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f042 0201 	orr.w	r2, r2, #1
 8004542:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004544:	e008      	b.n	8004558 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f042 0201 	orr.w	r2, r2, #1
 8004554:	601a      	str	r2, [r3, #0]
 8004556:	e000      	b.n	800455a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004558:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3710      	adds	r7, #16
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	40012c00 	.word	0x40012c00
 8004568:	40013400 	.word	0x40013400
 800456c:	40014000 	.word	0x40014000
 8004570:	40014400 	.word	0x40014400
 8004574:	40014800 	.word	0x40014800
 8004578:	40015000 	.word	0x40015000
 800457c:	40000400 	.word	0x40000400
 8004580:	40000800 	.word	0x40000800
 8004584:	40000c00 	.word	0x40000c00
 8004588:	00010007 	.word	0x00010007

0800458c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d101      	bne.n	80045a0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e097      	b.n	80046d0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d106      	bne.n	80045ba <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f7fc ff45 	bl	8001444 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2202      	movs	r2, #2
 80045be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	6812      	ldr	r2, [r2, #0]
 80045cc:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80045d0:	f023 0307 	bic.w	r3, r3, #7
 80045d4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	3304      	adds	r3, #4
 80045de:	4619      	mov	r1, r3
 80045e0:	4610      	mov	r0, r2
 80045e2:	f000 fcb3 	bl	8004f4c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	6a1b      	ldr	r3, [r3, #32]
 80045fc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	697a      	ldr	r2, [r7, #20]
 8004604:	4313      	orrs	r3, r2
 8004606:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800460e:	f023 0303 	bic.w	r3, r3, #3
 8004612:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	689a      	ldr	r2, [r3, #8]
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	021b      	lsls	r3, r3, #8
 800461e:	4313      	orrs	r3, r2
 8004620:	693a      	ldr	r2, [r7, #16]
 8004622:	4313      	orrs	r3, r2
 8004624:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800462c:	f023 030c 	bic.w	r3, r3, #12
 8004630:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004638:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800463c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	68da      	ldr	r2, [r3, #12]
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	69db      	ldr	r3, [r3, #28]
 8004646:	021b      	lsls	r3, r3, #8
 8004648:	4313      	orrs	r3, r2
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	4313      	orrs	r3, r2
 800464e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	011a      	lsls	r2, r3, #4
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	031b      	lsls	r3, r3, #12
 800465c:	4313      	orrs	r3, r2
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	4313      	orrs	r3, r2
 8004662:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800466a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004672:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	685a      	ldr	r2, [r3, #4]
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	695b      	ldr	r3, [r3, #20]
 800467c:	011b      	lsls	r3, r3, #4
 800467e:	4313      	orrs	r3, r2
 8004680:	68fa      	ldr	r2, [r7, #12]
 8004682:	4313      	orrs	r3, r2
 8004684:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2201      	movs	r2, #1
 80046b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2201      	movs	r2, #1
 80046ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2201      	movs	r2, #1
 80046c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3718      	adds	r7, #24
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80046e8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80046f0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80046f8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004700:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d110      	bne.n	800472a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004708:	7bfb      	ldrb	r3, [r7, #15]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d102      	bne.n	8004714 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800470e:	7b7b      	ldrb	r3, [r7, #13]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d001      	beq.n	8004718 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e069      	b.n	80047ec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2202      	movs	r2, #2
 800471c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2202      	movs	r2, #2
 8004724:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004728:	e031      	b.n	800478e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	2b04      	cmp	r3, #4
 800472e:	d110      	bne.n	8004752 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004730:	7bbb      	ldrb	r3, [r7, #14]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d102      	bne.n	800473c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004736:	7b3b      	ldrb	r3, [r7, #12]
 8004738:	2b01      	cmp	r3, #1
 800473a:	d001      	beq.n	8004740 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e055      	b.n	80047ec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2202      	movs	r2, #2
 8004744:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2202      	movs	r2, #2
 800474c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004750:	e01d      	b.n	800478e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004752:	7bfb      	ldrb	r3, [r7, #15]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d108      	bne.n	800476a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004758:	7bbb      	ldrb	r3, [r7, #14]
 800475a:	2b01      	cmp	r3, #1
 800475c:	d105      	bne.n	800476a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800475e:	7b7b      	ldrb	r3, [r7, #13]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d102      	bne.n	800476a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004764:	7b3b      	ldrb	r3, [r7, #12]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d001      	beq.n	800476e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e03e      	b.n	80047ec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2202      	movs	r2, #2
 8004772:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2202      	movs	r2, #2
 800477a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2202      	movs	r2, #2
 8004782:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2202      	movs	r2, #2
 800478a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d003      	beq.n	800479c <HAL_TIM_Encoder_Start+0xc4>
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	2b04      	cmp	r3, #4
 8004798:	d008      	beq.n	80047ac <HAL_TIM_Encoder_Start+0xd4>
 800479a:	e00f      	b.n	80047bc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2201      	movs	r2, #1
 80047a2:	2100      	movs	r1, #0
 80047a4:	4618      	mov	r0, r3
 80047a6:	f001 f84b 	bl	8005840 <TIM_CCxChannelCmd>
      break;
 80047aa:	e016      	b.n	80047da <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2201      	movs	r2, #1
 80047b2:	2104      	movs	r1, #4
 80047b4:	4618      	mov	r0, r3
 80047b6:	f001 f843 	bl	8005840 <TIM_CCxChannelCmd>
      break;
 80047ba:	e00e      	b.n	80047da <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2201      	movs	r2, #1
 80047c2:	2100      	movs	r1, #0
 80047c4:	4618      	mov	r0, r3
 80047c6:	f001 f83b 	bl	8005840 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2201      	movs	r2, #1
 80047d0:	2104      	movs	r1, #4
 80047d2:	4618      	mov	r0, r3
 80047d4:	f001 f834 	bl	8005840 <TIM_CCxChannelCmd>
      break;
 80047d8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f042 0201 	orr.w	r2, r2, #1
 80047e8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3710      	adds	r7, #16
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d020      	beq.n	8004858 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f003 0302 	and.w	r3, r3, #2
 800481c:	2b00      	cmp	r3, #0
 800481e:	d01b      	beq.n	8004858 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f06f 0202 	mvn.w	r2, #2
 8004828:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	f003 0303 	and.w	r3, r3, #3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d003      	beq.n	8004846 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 fb66 	bl	8004f10 <HAL_TIM_IC_CaptureCallback>
 8004844:	e005      	b.n	8004852 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 fb58 	bl	8004efc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 fb69 	bl	8004f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	f003 0304 	and.w	r3, r3, #4
 800485e:	2b00      	cmp	r3, #0
 8004860:	d020      	beq.n	80048a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f003 0304 	and.w	r3, r3, #4
 8004868:	2b00      	cmp	r3, #0
 800486a:	d01b      	beq.n	80048a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f06f 0204 	mvn.w	r2, #4
 8004874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2202      	movs	r2, #2
 800487a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004886:	2b00      	cmp	r3, #0
 8004888:	d003      	beq.n	8004892 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 fb40 	bl	8004f10 <HAL_TIM_IC_CaptureCallback>
 8004890:	e005      	b.n	800489e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 fb32 	bl	8004efc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f000 fb43 	bl	8004f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	f003 0308 	and.w	r3, r3, #8
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d020      	beq.n	80048f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f003 0308 	and.w	r3, r3, #8
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d01b      	beq.n	80048f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f06f 0208 	mvn.w	r2, #8
 80048c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2204      	movs	r2, #4
 80048c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	69db      	ldr	r3, [r3, #28]
 80048ce:	f003 0303 	and.w	r3, r3, #3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d003      	beq.n	80048de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 fb1a 	bl	8004f10 <HAL_TIM_IC_CaptureCallback>
 80048dc:	e005      	b.n	80048ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 fb0c 	bl	8004efc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 fb1d 	bl	8004f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	f003 0310 	and.w	r3, r3, #16
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d020      	beq.n	800493c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f003 0310 	and.w	r3, r3, #16
 8004900:	2b00      	cmp	r3, #0
 8004902:	d01b      	beq.n	800493c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f06f 0210 	mvn.w	r2, #16
 800490c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2208      	movs	r2, #8
 8004912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	69db      	ldr	r3, [r3, #28]
 800491a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 faf4 	bl	8004f10 <HAL_TIM_IC_CaptureCallback>
 8004928:	e005      	b.n	8004936 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 fae6 	bl	8004efc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 faf7 	bl	8004f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	f003 0301 	and.w	r3, r3, #1
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00c      	beq.n	8004960 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	2b00      	cmp	r3, #0
 800494e:	d007      	beq.n	8004960 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f06f 0201 	mvn.w	r2, #1
 8004958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 fac4 	bl	8004ee8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004966:	2b00      	cmp	r3, #0
 8004968:	d104      	bne.n	8004974 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00c      	beq.n	800498e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800497a:	2b00      	cmp	r3, #0
 800497c:	d007      	beq.n	800498e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f001 f8b3 	bl	8005af4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004994:	2b00      	cmp	r3, #0
 8004996:	d00c      	beq.n	80049b2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d007      	beq.n	80049b2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80049aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f001 f8ab 	bl	8005b08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d00c      	beq.n	80049d6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d007      	beq.n	80049d6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80049ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 fab1 	bl	8004f38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	f003 0320 	and.w	r3, r3, #32
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00c      	beq.n	80049fa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f003 0320 	and.w	r3, r3, #32
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d007      	beq.n	80049fa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f06f 0220 	mvn.w	r2, #32
 80049f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f001 f873 	bl	8005ae0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00c      	beq.n	8004a1e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d007      	beq.n	8004a1e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004a16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f001 f87f 	bl	8005b1c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00c      	beq.n	8004a42 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d007      	beq.n	8004a42 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004a3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f001 f877 	bl	8005b30 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d00c      	beq.n	8004a66 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d007      	beq.n	8004a66 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004a5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f001 f86f 	bl	8005b44 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00c      	beq.n	8004a8a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d007      	beq.n	8004a8a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8004a82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f001 f867 	bl	8005b58 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a8a:	bf00      	nop
 8004a8c:	3710      	adds	r7, #16
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
	...

08004a94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b086      	sub	sp, #24
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d101      	bne.n	8004ab2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004aae:	2302      	movs	r3, #2
 8004ab0:	e0ff      	b.n	8004cb2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2b14      	cmp	r3, #20
 8004abe:	f200 80f0 	bhi.w	8004ca2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004ac2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ac8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac8:	08004b1d 	.word	0x08004b1d
 8004acc:	08004ca3 	.word	0x08004ca3
 8004ad0:	08004ca3 	.word	0x08004ca3
 8004ad4:	08004ca3 	.word	0x08004ca3
 8004ad8:	08004b5d 	.word	0x08004b5d
 8004adc:	08004ca3 	.word	0x08004ca3
 8004ae0:	08004ca3 	.word	0x08004ca3
 8004ae4:	08004ca3 	.word	0x08004ca3
 8004ae8:	08004b9f 	.word	0x08004b9f
 8004aec:	08004ca3 	.word	0x08004ca3
 8004af0:	08004ca3 	.word	0x08004ca3
 8004af4:	08004ca3 	.word	0x08004ca3
 8004af8:	08004bdf 	.word	0x08004bdf
 8004afc:	08004ca3 	.word	0x08004ca3
 8004b00:	08004ca3 	.word	0x08004ca3
 8004b04:	08004ca3 	.word	0x08004ca3
 8004b08:	08004c21 	.word	0x08004c21
 8004b0c:	08004ca3 	.word	0x08004ca3
 8004b10:	08004ca3 	.word	0x08004ca3
 8004b14:	08004ca3 	.word	0x08004ca3
 8004b18:	08004c61 	.word	0x08004c61
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68b9      	ldr	r1, [r7, #8]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f000 fac6 	bl	80050b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	699a      	ldr	r2, [r3, #24]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f042 0208 	orr.w	r2, r2, #8
 8004b36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	699a      	ldr	r2, [r3, #24]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f022 0204 	bic.w	r2, r2, #4
 8004b46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6999      	ldr	r1, [r3, #24]
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	691a      	ldr	r2, [r3, #16]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	430a      	orrs	r2, r1
 8004b58:	619a      	str	r2, [r3, #24]
      break;
 8004b5a:	e0a5      	b.n	8004ca8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68b9      	ldr	r1, [r7, #8]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f000 fb40 	bl	80051e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	699a      	ldr	r2, [r3, #24]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	699a      	ldr	r2, [r3, #24]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	6999      	ldr	r1, [r3, #24]
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	021a      	lsls	r2, r3, #8
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	430a      	orrs	r2, r1
 8004b9a:	619a      	str	r2, [r3, #24]
      break;
 8004b9c:	e084      	b.n	8004ca8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68b9      	ldr	r1, [r7, #8]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f000 fbb3 	bl	8005310 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	69da      	ldr	r2, [r3, #28]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f042 0208 	orr.w	r2, r2, #8
 8004bb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	69da      	ldr	r2, [r3, #28]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f022 0204 	bic.w	r2, r2, #4
 8004bc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	69d9      	ldr	r1, [r3, #28]
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	691a      	ldr	r2, [r3, #16]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	61da      	str	r2, [r3, #28]
      break;
 8004bdc:	e064      	b.n	8004ca8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68b9      	ldr	r1, [r7, #8]
 8004be4:	4618      	mov	r0, r3
 8004be6:	f000 fc25 	bl	8005434 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	69da      	ldr	r2, [r3, #28]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	69da      	ldr	r2, [r3, #28]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	69d9      	ldr	r1, [r3, #28]
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	021a      	lsls	r2, r3, #8
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	61da      	str	r2, [r3, #28]
      break;
 8004c1e:	e043      	b.n	8004ca8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68b9      	ldr	r1, [r7, #8]
 8004c26:	4618      	mov	r0, r3
 8004c28:	f000 fc98 	bl	800555c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f042 0208 	orr.w	r2, r2, #8
 8004c3a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f022 0204 	bic.w	r2, r2, #4
 8004c4a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	691a      	ldr	r2, [r3, #16]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004c5e:	e023      	b.n	8004ca8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68b9      	ldr	r1, [r7, #8]
 8004c66:	4618      	mov	r0, r3
 8004c68:	f000 fce2 	bl	8005630 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c7a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c8a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	021a      	lsls	r2, r3, #8
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	430a      	orrs	r2, r1
 8004c9e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004ca0:	e002      	b.n	8004ca8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	75fb      	strb	r3, [r7, #23]
      break;
 8004ca6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004cb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3718      	adds	r7, #24
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop

08004cbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d101      	bne.n	8004cd8 <HAL_TIM_ConfigClockSource+0x1c>
 8004cd4:	2302      	movs	r3, #2
 8004cd6:	e0f6      	b.n	8004ec6 <HAL_TIM_ConfigClockSource+0x20a>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2202      	movs	r2, #2
 8004ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004cf6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004cfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	68ba      	ldr	r2, [r7, #8]
 8004d0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a6f      	ldr	r2, [pc, #444]	@ (8004ed0 <HAL_TIM_ConfigClockSource+0x214>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	f000 80c1 	beq.w	8004e9a <HAL_TIM_ConfigClockSource+0x1de>
 8004d18:	4a6d      	ldr	r2, [pc, #436]	@ (8004ed0 <HAL_TIM_ConfigClockSource+0x214>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	f200 80c6 	bhi.w	8004eac <HAL_TIM_ConfigClockSource+0x1f0>
 8004d20:	4a6c      	ldr	r2, [pc, #432]	@ (8004ed4 <HAL_TIM_ConfigClockSource+0x218>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	f000 80b9 	beq.w	8004e9a <HAL_TIM_ConfigClockSource+0x1de>
 8004d28:	4a6a      	ldr	r2, [pc, #424]	@ (8004ed4 <HAL_TIM_ConfigClockSource+0x218>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	f200 80be 	bhi.w	8004eac <HAL_TIM_ConfigClockSource+0x1f0>
 8004d30:	4a69      	ldr	r2, [pc, #420]	@ (8004ed8 <HAL_TIM_ConfigClockSource+0x21c>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	f000 80b1 	beq.w	8004e9a <HAL_TIM_ConfigClockSource+0x1de>
 8004d38:	4a67      	ldr	r2, [pc, #412]	@ (8004ed8 <HAL_TIM_ConfigClockSource+0x21c>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	f200 80b6 	bhi.w	8004eac <HAL_TIM_ConfigClockSource+0x1f0>
 8004d40:	4a66      	ldr	r2, [pc, #408]	@ (8004edc <HAL_TIM_ConfigClockSource+0x220>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	f000 80a9 	beq.w	8004e9a <HAL_TIM_ConfigClockSource+0x1de>
 8004d48:	4a64      	ldr	r2, [pc, #400]	@ (8004edc <HAL_TIM_ConfigClockSource+0x220>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	f200 80ae 	bhi.w	8004eac <HAL_TIM_ConfigClockSource+0x1f0>
 8004d50:	4a63      	ldr	r2, [pc, #396]	@ (8004ee0 <HAL_TIM_ConfigClockSource+0x224>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	f000 80a1 	beq.w	8004e9a <HAL_TIM_ConfigClockSource+0x1de>
 8004d58:	4a61      	ldr	r2, [pc, #388]	@ (8004ee0 <HAL_TIM_ConfigClockSource+0x224>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	f200 80a6 	bhi.w	8004eac <HAL_TIM_ConfigClockSource+0x1f0>
 8004d60:	4a60      	ldr	r2, [pc, #384]	@ (8004ee4 <HAL_TIM_ConfigClockSource+0x228>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	f000 8099 	beq.w	8004e9a <HAL_TIM_ConfigClockSource+0x1de>
 8004d68:	4a5e      	ldr	r2, [pc, #376]	@ (8004ee4 <HAL_TIM_ConfigClockSource+0x228>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	f200 809e 	bhi.w	8004eac <HAL_TIM_ConfigClockSource+0x1f0>
 8004d70:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004d74:	f000 8091 	beq.w	8004e9a <HAL_TIM_ConfigClockSource+0x1de>
 8004d78:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004d7c:	f200 8096 	bhi.w	8004eac <HAL_TIM_ConfigClockSource+0x1f0>
 8004d80:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d84:	f000 8089 	beq.w	8004e9a <HAL_TIM_ConfigClockSource+0x1de>
 8004d88:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d8c:	f200 808e 	bhi.w	8004eac <HAL_TIM_ConfigClockSource+0x1f0>
 8004d90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d94:	d03e      	beq.n	8004e14 <HAL_TIM_ConfigClockSource+0x158>
 8004d96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d9a:	f200 8087 	bhi.w	8004eac <HAL_TIM_ConfigClockSource+0x1f0>
 8004d9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004da2:	f000 8086 	beq.w	8004eb2 <HAL_TIM_ConfigClockSource+0x1f6>
 8004da6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004daa:	d87f      	bhi.n	8004eac <HAL_TIM_ConfigClockSource+0x1f0>
 8004dac:	2b70      	cmp	r3, #112	@ 0x70
 8004dae:	d01a      	beq.n	8004de6 <HAL_TIM_ConfigClockSource+0x12a>
 8004db0:	2b70      	cmp	r3, #112	@ 0x70
 8004db2:	d87b      	bhi.n	8004eac <HAL_TIM_ConfigClockSource+0x1f0>
 8004db4:	2b60      	cmp	r3, #96	@ 0x60
 8004db6:	d050      	beq.n	8004e5a <HAL_TIM_ConfigClockSource+0x19e>
 8004db8:	2b60      	cmp	r3, #96	@ 0x60
 8004dba:	d877      	bhi.n	8004eac <HAL_TIM_ConfigClockSource+0x1f0>
 8004dbc:	2b50      	cmp	r3, #80	@ 0x50
 8004dbe:	d03c      	beq.n	8004e3a <HAL_TIM_ConfigClockSource+0x17e>
 8004dc0:	2b50      	cmp	r3, #80	@ 0x50
 8004dc2:	d873      	bhi.n	8004eac <HAL_TIM_ConfigClockSource+0x1f0>
 8004dc4:	2b40      	cmp	r3, #64	@ 0x40
 8004dc6:	d058      	beq.n	8004e7a <HAL_TIM_ConfigClockSource+0x1be>
 8004dc8:	2b40      	cmp	r3, #64	@ 0x40
 8004dca:	d86f      	bhi.n	8004eac <HAL_TIM_ConfigClockSource+0x1f0>
 8004dcc:	2b30      	cmp	r3, #48	@ 0x30
 8004dce:	d064      	beq.n	8004e9a <HAL_TIM_ConfigClockSource+0x1de>
 8004dd0:	2b30      	cmp	r3, #48	@ 0x30
 8004dd2:	d86b      	bhi.n	8004eac <HAL_TIM_ConfigClockSource+0x1f0>
 8004dd4:	2b20      	cmp	r3, #32
 8004dd6:	d060      	beq.n	8004e9a <HAL_TIM_ConfigClockSource+0x1de>
 8004dd8:	2b20      	cmp	r3, #32
 8004dda:	d867      	bhi.n	8004eac <HAL_TIM_ConfigClockSource+0x1f0>
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d05c      	beq.n	8004e9a <HAL_TIM_ConfigClockSource+0x1de>
 8004de0:	2b10      	cmp	r3, #16
 8004de2:	d05a      	beq.n	8004e9a <HAL_TIM_ConfigClockSource+0x1de>
 8004de4:	e062      	b.n	8004eac <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004df6:	f000 fd03 	bl	8005800 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004e08:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68ba      	ldr	r2, [r7, #8]
 8004e10:	609a      	str	r2, [r3, #8]
      break;
 8004e12:	e04f      	b.n	8004eb4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e24:	f000 fcec 	bl	8005800 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	689a      	ldr	r2, [r3, #8]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e36:	609a      	str	r2, [r3, #8]
      break;
 8004e38:	e03c      	b.n	8004eb4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e46:	461a      	mov	r2, r3
 8004e48:	f000 fc5e 	bl	8005708 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2150      	movs	r1, #80	@ 0x50
 8004e52:	4618      	mov	r0, r3
 8004e54:	f000 fcb7 	bl	80057c6 <TIM_ITRx_SetConfig>
      break;
 8004e58:	e02c      	b.n	8004eb4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e66:	461a      	mov	r2, r3
 8004e68:	f000 fc7d 	bl	8005766 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2160      	movs	r1, #96	@ 0x60
 8004e72:	4618      	mov	r0, r3
 8004e74:	f000 fca7 	bl	80057c6 <TIM_ITRx_SetConfig>
      break;
 8004e78:	e01c      	b.n	8004eb4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e86:	461a      	mov	r2, r3
 8004e88:	f000 fc3e 	bl	8005708 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2140      	movs	r1, #64	@ 0x40
 8004e92:	4618      	mov	r0, r3
 8004e94:	f000 fc97 	bl	80057c6 <TIM_ITRx_SetConfig>
      break;
 8004e98:	e00c      	b.n	8004eb4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	4610      	mov	r0, r2
 8004ea6:	f000 fc8e 	bl	80057c6 <TIM_ITRx_SetConfig>
      break;
 8004eaa:	e003      	b.n	8004eb4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	73fb      	strb	r3, [r7, #15]
      break;
 8004eb0:	e000      	b.n	8004eb4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004eb2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3710      	adds	r7, #16
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	00100070 	.word	0x00100070
 8004ed4:	00100060 	.word	0x00100060
 8004ed8:	00100050 	.word	0x00100050
 8004edc:	00100040 	.word	0x00100040
 8004ee0:	00100030 	.word	0x00100030
 8004ee4:	00100020 	.word	0x00100020

08004ee8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004ef0:	bf00      	nop
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f04:	bf00      	nop
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f18:	bf00      	nop
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f2c:	bf00      	nop
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a4c      	ldr	r2, [pc, #304]	@ (8005090 <TIM_Base_SetConfig+0x144>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d017      	beq.n	8004f94 <TIM_Base_SetConfig+0x48>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f6a:	d013      	beq.n	8004f94 <TIM_Base_SetConfig+0x48>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a49      	ldr	r2, [pc, #292]	@ (8005094 <TIM_Base_SetConfig+0x148>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d00f      	beq.n	8004f94 <TIM_Base_SetConfig+0x48>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a48      	ldr	r2, [pc, #288]	@ (8005098 <TIM_Base_SetConfig+0x14c>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d00b      	beq.n	8004f94 <TIM_Base_SetConfig+0x48>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a47      	ldr	r2, [pc, #284]	@ (800509c <TIM_Base_SetConfig+0x150>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d007      	beq.n	8004f94 <TIM_Base_SetConfig+0x48>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a46      	ldr	r2, [pc, #280]	@ (80050a0 <TIM_Base_SetConfig+0x154>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d003      	beq.n	8004f94 <TIM_Base_SetConfig+0x48>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a45      	ldr	r2, [pc, #276]	@ (80050a4 <TIM_Base_SetConfig+0x158>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d108      	bne.n	8004fa6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a39      	ldr	r2, [pc, #228]	@ (8005090 <TIM_Base_SetConfig+0x144>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d023      	beq.n	8004ff6 <TIM_Base_SetConfig+0xaa>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fb4:	d01f      	beq.n	8004ff6 <TIM_Base_SetConfig+0xaa>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a36      	ldr	r2, [pc, #216]	@ (8005094 <TIM_Base_SetConfig+0x148>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d01b      	beq.n	8004ff6 <TIM_Base_SetConfig+0xaa>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a35      	ldr	r2, [pc, #212]	@ (8005098 <TIM_Base_SetConfig+0x14c>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d017      	beq.n	8004ff6 <TIM_Base_SetConfig+0xaa>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a34      	ldr	r2, [pc, #208]	@ (800509c <TIM_Base_SetConfig+0x150>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d013      	beq.n	8004ff6 <TIM_Base_SetConfig+0xaa>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a33      	ldr	r2, [pc, #204]	@ (80050a0 <TIM_Base_SetConfig+0x154>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d00f      	beq.n	8004ff6 <TIM_Base_SetConfig+0xaa>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a33      	ldr	r2, [pc, #204]	@ (80050a8 <TIM_Base_SetConfig+0x15c>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d00b      	beq.n	8004ff6 <TIM_Base_SetConfig+0xaa>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a32      	ldr	r2, [pc, #200]	@ (80050ac <TIM_Base_SetConfig+0x160>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d007      	beq.n	8004ff6 <TIM_Base_SetConfig+0xaa>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a31      	ldr	r2, [pc, #196]	@ (80050b0 <TIM_Base_SetConfig+0x164>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d003      	beq.n	8004ff6 <TIM_Base_SetConfig+0xaa>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a2c      	ldr	r2, [pc, #176]	@ (80050a4 <TIM_Base_SetConfig+0x158>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d108      	bne.n	8005008 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ffc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	4313      	orrs	r3, r2
 8005006:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	4313      	orrs	r3, r2
 8005014:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	689a      	ldr	r2, [r3, #8]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a18      	ldr	r2, [pc, #96]	@ (8005090 <TIM_Base_SetConfig+0x144>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d013      	beq.n	800505c <TIM_Base_SetConfig+0x110>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a1a      	ldr	r2, [pc, #104]	@ (80050a0 <TIM_Base_SetConfig+0x154>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d00f      	beq.n	800505c <TIM_Base_SetConfig+0x110>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a1a      	ldr	r2, [pc, #104]	@ (80050a8 <TIM_Base_SetConfig+0x15c>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d00b      	beq.n	800505c <TIM_Base_SetConfig+0x110>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a19      	ldr	r2, [pc, #100]	@ (80050ac <TIM_Base_SetConfig+0x160>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d007      	beq.n	800505c <TIM_Base_SetConfig+0x110>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a18      	ldr	r2, [pc, #96]	@ (80050b0 <TIM_Base_SetConfig+0x164>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d003      	beq.n	800505c <TIM_Base_SetConfig+0x110>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a13      	ldr	r2, [pc, #76]	@ (80050a4 <TIM_Base_SetConfig+0x158>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d103      	bne.n	8005064 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	691a      	ldr	r2, [r3, #16]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	f003 0301 	and.w	r3, r3, #1
 8005072:	2b01      	cmp	r3, #1
 8005074:	d105      	bne.n	8005082 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	f023 0201 	bic.w	r2, r3, #1
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	611a      	str	r2, [r3, #16]
  }
}
 8005082:	bf00      	nop
 8005084:	3714      	adds	r7, #20
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	40012c00 	.word	0x40012c00
 8005094:	40000400 	.word	0x40000400
 8005098:	40000800 	.word	0x40000800
 800509c:	40000c00 	.word	0x40000c00
 80050a0:	40013400 	.word	0x40013400
 80050a4:	40015000 	.word	0x40015000
 80050a8:	40014000 	.word	0x40014000
 80050ac:	40014400 	.word	0x40014400
 80050b0:	40014800 	.word	0x40014800

080050b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b087      	sub	sp, #28
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a1b      	ldr	r3, [r3, #32]
 80050c8:	f023 0201 	bic.w	r2, r3, #1
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f023 0303 	bic.w	r3, r3, #3
 80050ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	f023 0302 	bic.w	r3, r3, #2
 8005100:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	697a      	ldr	r2, [r7, #20]
 8005108:	4313      	orrs	r3, r2
 800510a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a30      	ldr	r2, [pc, #192]	@ (80051d0 <TIM_OC1_SetConfig+0x11c>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d013      	beq.n	800513c <TIM_OC1_SetConfig+0x88>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a2f      	ldr	r2, [pc, #188]	@ (80051d4 <TIM_OC1_SetConfig+0x120>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d00f      	beq.n	800513c <TIM_OC1_SetConfig+0x88>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a2e      	ldr	r2, [pc, #184]	@ (80051d8 <TIM_OC1_SetConfig+0x124>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d00b      	beq.n	800513c <TIM_OC1_SetConfig+0x88>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a2d      	ldr	r2, [pc, #180]	@ (80051dc <TIM_OC1_SetConfig+0x128>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d007      	beq.n	800513c <TIM_OC1_SetConfig+0x88>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a2c      	ldr	r2, [pc, #176]	@ (80051e0 <TIM_OC1_SetConfig+0x12c>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d003      	beq.n	800513c <TIM_OC1_SetConfig+0x88>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a2b      	ldr	r2, [pc, #172]	@ (80051e4 <TIM_OC1_SetConfig+0x130>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d10c      	bne.n	8005156 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	f023 0308 	bic.w	r3, r3, #8
 8005142:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	697a      	ldr	r2, [r7, #20]
 800514a:	4313      	orrs	r3, r2
 800514c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	f023 0304 	bic.w	r3, r3, #4
 8005154:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a1d      	ldr	r2, [pc, #116]	@ (80051d0 <TIM_OC1_SetConfig+0x11c>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d013      	beq.n	8005186 <TIM_OC1_SetConfig+0xd2>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a1c      	ldr	r2, [pc, #112]	@ (80051d4 <TIM_OC1_SetConfig+0x120>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d00f      	beq.n	8005186 <TIM_OC1_SetConfig+0xd2>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a1b      	ldr	r2, [pc, #108]	@ (80051d8 <TIM_OC1_SetConfig+0x124>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d00b      	beq.n	8005186 <TIM_OC1_SetConfig+0xd2>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a1a      	ldr	r2, [pc, #104]	@ (80051dc <TIM_OC1_SetConfig+0x128>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d007      	beq.n	8005186 <TIM_OC1_SetConfig+0xd2>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a19      	ldr	r2, [pc, #100]	@ (80051e0 <TIM_OC1_SetConfig+0x12c>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d003      	beq.n	8005186 <TIM_OC1_SetConfig+0xd2>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a18      	ldr	r2, [pc, #96]	@ (80051e4 <TIM_OC1_SetConfig+0x130>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d111      	bne.n	80051aa <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800518c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005194:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	693a      	ldr	r2, [r7, #16]
 800519c:	4313      	orrs	r3, r2
 800519e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	699b      	ldr	r3, [r3, #24]
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	685a      	ldr	r2, [r3, #4]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	697a      	ldr	r2, [r7, #20]
 80051c2:	621a      	str	r2, [r3, #32]
}
 80051c4:	bf00      	nop
 80051c6:	371c      	adds	r7, #28
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr
 80051d0:	40012c00 	.word	0x40012c00
 80051d4:	40013400 	.word	0x40013400
 80051d8:	40014000 	.word	0x40014000
 80051dc:	40014400 	.word	0x40014400
 80051e0:	40014800 	.word	0x40014800
 80051e4:	40015000 	.word	0x40015000

080051e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b087      	sub	sp, #28
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	f023 0210 	bic.w	r2, r3, #16
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005216:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800521a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005222:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	021b      	lsls	r3, r3, #8
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	4313      	orrs	r3, r2
 800522e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	f023 0320 	bic.w	r3, r3, #32
 8005236:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	011b      	lsls	r3, r3, #4
 800523e:	697a      	ldr	r2, [r7, #20]
 8005240:	4313      	orrs	r3, r2
 8005242:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a2c      	ldr	r2, [pc, #176]	@ (80052f8 <TIM_OC2_SetConfig+0x110>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d007      	beq.n	800525c <TIM_OC2_SetConfig+0x74>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4a2b      	ldr	r2, [pc, #172]	@ (80052fc <TIM_OC2_SetConfig+0x114>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d003      	beq.n	800525c <TIM_OC2_SetConfig+0x74>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a2a      	ldr	r2, [pc, #168]	@ (8005300 <TIM_OC2_SetConfig+0x118>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d10d      	bne.n	8005278 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005262:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	011b      	lsls	r3, r3, #4
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	4313      	orrs	r3, r2
 800526e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005276:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a1f      	ldr	r2, [pc, #124]	@ (80052f8 <TIM_OC2_SetConfig+0x110>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d013      	beq.n	80052a8 <TIM_OC2_SetConfig+0xc0>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a1e      	ldr	r2, [pc, #120]	@ (80052fc <TIM_OC2_SetConfig+0x114>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d00f      	beq.n	80052a8 <TIM_OC2_SetConfig+0xc0>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a1e      	ldr	r2, [pc, #120]	@ (8005304 <TIM_OC2_SetConfig+0x11c>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d00b      	beq.n	80052a8 <TIM_OC2_SetConfig+0xc0>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a1d      	ldr	r2, [pc, #116]	@ (8005308 <TIM_OC2_SetConfig+0x120>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d007      	beq.n	80052a8 <TIM_OC2_SetConfig+0xc0>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a1c      	ldr	r2, [pc, #112]	@ (800530c <TIM_OC2_SetConfig+0x124>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d003      	beq.n	80052a8 <TIM_OC2_SetConfig+0xc0>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a17      	ldr	r2, [pc, #92]	@ (8005300 <TIM_OC2_SetConfig+0x118>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d113      	bne.n	80052d0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80052ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80052b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	695b      	ldr	r3, [r3, #20]
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	693a      	ldr	r2, [r7, #16]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	699b      	ldr	r3, [r3, #24]
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	693a      	ldr	r2, [r7, #16]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	693a      	ldr	r2, [r7, #16]
 80052d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	685a      	ldr	r2, [r3, #4]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	621a      	str	r2, [r3, #32]
}
 80052ea:	bf00      	nop
 80052ec:	371c      	adds	r7, #28
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	40012c00 	.word	0x40012c00
 80052fc:	40013400 	.word	0x40013400
 8005300:	40015000 	.word	0x40015000
 8005304:	40014000 	.word	0x40014000
 8005308:	40014400 	.word	0x40014400
 800530c:	40014800 	.word	0x40014800

08005310 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005310:	b480      	push	{r7}
 8005312:	b087      	sub	sp, #28
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a1b      	ldr	r3, [r3, #32]
 800531e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6a1b      	ldr	r3, [r3, #32]
 8005324:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	69db      	ldr	r3, [r3, #28]
 8005336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800533e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005342:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f023 0303 	bic.w	r3, r3, #3
 800534a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	4313      	orrs	r3, r2
 8005354:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800535c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	021b      	lsls	r3, r3, #8
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	4313      	orrs	r3, r2
 8005368:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a2b      	ldr	r2, [pc, #172]	@ (800541c <TIM_OC3_SetConfig+0x10c>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d007      	beq.n	8005382 <TIM_OC3_SetConfig+0x72>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a2a      	ldr	r2, [pc, #168]	@ (8005420 <TIM_OC3_SetConfig+0x110>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d003      	beq.n	8005382 <TIM_OC3_SetConfig+0x72>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a29      	ldr	r2, [pc, #164]	@ (8005424 <TIM_OC3_SetConfig+0x114>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d10d      	bne.n	800539e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005388:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	021b      	lsls	r3, r3, #8
 8005390:	697a      	ldr	r2, [r7, #20]
 8005392:	4313      	orrs	r3, r2
 8005394:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800539c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a1e      	ldr	r2, [pc, #120]	@ (800541c <TIM_OC3_SetConfig+0x10c>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d013      	beq.n	80053ce <TIM_OC3_SetConfig+0xbe>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a1d      	ldr	r2, [pc, #116]	@ (8005420 <TIM_OC3_SetConfig+0x110>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d00f      	beq.n	80053ce <TIM_OC3_SetConfig+0xbe>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a1d      	ldr	r2, [pc, #116]	@ (8005428 <TIM_OC3_SetConfig+0x118>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d00b      	beq.n	80053ce <TIM_OC3_SetConfig+0xbe>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a1c      	ldr	r2, [pc, #112]	@ (800542c <TIM_OC3_SetConfig+0x11c>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d007      	beq.n	80053ce <TIM_OC3_SetConfig+0xbe>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a1b      	ldr	r2, [pc, #108]	@ (8005430 <TIM_OC3_SetConfig+0x120>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d003      	beq.n	80053ce <TIM_OC3_SetConfig+0xbe>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a16      	ldr	r2, [pc, #88]	@ (8005424 <TIM_OC3_SetConfig+0x114>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d113      	bne.n	80053f6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80053d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80053dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	695b      	ldr	r3, [r3, #20]
 80053e2:	011b      	lsls	r3, r3, #4
 80053e4:	693a      	ldr	r2, [r7, #16]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	011b      	lsls	r3, r3, #4
 80053f0:	693a      	ldr	r2, [r7, #16]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	693a      	ldr	r2, [r7, #16]
 80053fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	685a      	ldr	r2, [r3, #4]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	697a      	ldr	r2, [r7, #20]
 800540e:	621a      	str	r2, [r3, #32]
}
 8005410:	bf00      	nop
 8005412:	371c      	adds	r7, #28
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr
 800541c:	40012c00 	.word	0x40012c00
 8005420:	40013400 	.word	0x40013400
 8005424:	40015000 	.word	0x40015000
 8005428:	40014000 	.word	0x40014000
 800542c:	40014400 	.word	0x40014400
 8005430:	40014800 	.word	0x40014800

08005434 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005434:	b480      	push	{r7}
 8005436:	b087      	sub	sp, #28
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a1b      	ldr	r3, [r3, #32]
 8005442:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6a1b      	ldr	r3, [r3, #32]
 8005448:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	69db      	ldr	r3, [r3, #28]
 800545a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005462:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005466:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800546e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	021b      	lsls	r3, r3, #8
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	4313      	orrs	r3, r2
 800547a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005482:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	031b      	lsls	r3, r3, #12
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	4313      	orrs	r3, r2
 800548e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a2c      	ldr	r2, [pc, #176]	@ (8005544 <TIM_OC4_SetConfig+0x110>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d007      	beq.n	80054a8 <TIM_OC4_SetConfig+0x74>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a2b      	ldr	r2, [pc, #172]	@ (8005548 <TIM_OC4_SetConfig+0x114>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d003      	beq.n	80054a8 <TIM_OC4_SetConfig+0x74>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a2a      	ldr	r2, [pc, #168]	@ (800554c <TIM_OC4_SetConfig+0x118>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d10d      	bne.n	80054c4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80054ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	031b      	lsls	r3, r3, #12
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80054c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a1f      	ldr	r2, [pc, #124]	@ (8005544 <TIM_OC4_SetConfig+0x110>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d013      	beq.n	80054f4 <TIM_OC4_SetConfig+0xc0>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a1e      	ldr	r2, [pc, #120]	@ (8005548 <TIM_OC4_SetConfig+0x114>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d00f      	beq.n	80054f4 <TIM_OC4_SetConfig+0xc0>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a1e      	ldr	r2, [pc, #120]	@ (8005550 <TIM_OC4_SetConfig+0x11c>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d00b      	beq.n	80054f4 <TIM_OC4_SetConfig+0xc0>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a1d      	ldr	r2, [pc, #116]	@ (8005554 <TIM_OC4_SetConfig+0x120>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d007      	beq.n	80054f4 <TIM_OC4_SetConfig+0xc0>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4a1c      	ldr	r2, [pc, #112]	@ (8005558 <TIM_OC4_SetConfig+0x124>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d003      	beq.n	80054f4 <TIM_OC4_SetConfig+0xc0>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a17      	ldr	r2, [pc, #92]	@ (800554c <TIM_OC4_SetConfig+0x118>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d113      	bne.n	800551c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80054fa:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005502:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	695b      	ldr	r3, [r3, #20]
 8005508:	019b      	lsls	r3, r3, #6
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	4313      	orrs	r3, r2
 800550e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	699b      	ldr	r3, [r3, #24]
 8005514:	019b      	lsls	r3, r3, #6
 8005516:	693a      	ldr	r2, [r7, #16]
 8005518:	4313      	orrs	r3, r2
 800551a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	693a      	ldr	r2, [r7, #16]
 8005520:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	685a      	ldr	r2, [r3, #4]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	697a      	ldr	r2, [r7, #20]
 8005534:	621a      	str	r2, [r3, #32]
}
 8005536:	bf00      	nop
 8005538:	371c      	adds	r7, #28
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	40012c00 	.word	0x40012c00
 8005548:	40013400 	.word	0x40013400
 800554c:	40015000 	.word	0x40015000
 8005550:	40014000 	.word	0x40014000
 8005554:	40014400 	.word	0x40014400
 8005558:	40014800 	.word	0x40014800

0800555c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800555c:	b480      	push	{r7}
 800555e:	b087      	sub	sp, #28
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a1b      	ldr	r3, [r3, #32]
 8005570:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800558a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800558e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	4313      	orrs	r3, r2
 8005598:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80055a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	041b      	lsls	r3, r3, #16
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a19      	ldr	r2, [pc, #100]	@ (8005618 <TIM_OC5_SetConfig+0xbc>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d013      	beq.n	80055de <TIM_OC5_SetConfig+0x82>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a18      	ldr	r2, [pc, #96]	@ (800561c <TIM_OC5_SetConfig+0xc0>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d00f      	beq.n	80055de <TIM_OC5_SetConfig+0x82>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a17      	ldr	r2, [pc, #92]	@ (8005620 <TIM_OC5_SetConfig+0xc4>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d00b      	beq.n	80055de <TIM_OC5_SetConfig+0x82>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a16      	ldr	r2, [pc, #88]	@ (8005624 <TIM_OC5_SetConfig+0xc8>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d007      	beq.n	80055de <TIM_OC5_SetConfig+0x82>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a15      	ldr	r2, [pc, #84]	@ (8005628 <TIM_OC5_SetConfig+0xcc>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d003      	beq.n	80055de <TIM_OC5_SetConfig+0x82>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a14      	ldr	r2, [pc, #80]	@ (800562c <TIM_OC5_SetConfig+0xd0>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d109      	bne.n	80055f2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	021b      	lsls	r3, r3, #8
 80055ec:	697a      	ldr	r2, [r7, #20]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	697a      	ldr	r2, [r7, #20]
 80055f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	685a      	ldr	r2, [r3, #4]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	621a      	str	r2, [r3, #32]
}
 800560c:	bf00      	nop
 800560e:	371c      	adds	r7, #28
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr
 8005618:	40012c00 	.word	0x40012c00
 800561c:	40013400 	.word	0x40013400
 8005620:	40014000 	.word	0x40014000
 8005624:	40014400 	.word	0x40014400
 8005628:	40014800 	.word	0x40014800
 800562c:	40015000 	.word	0x40015000

08005630 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005630:	b480      	push	{r7}
 8005632:	b087      	sub	sp, #28
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a1b      	ldr	r3, [r3, #32]
 800563e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6a1b      	ldr	r3, [r3, #32]
 8005644:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800565e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005662:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	021b      	lsls	r3, r3, #8
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	4313      	orrs	r3, r2
 800566e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005676:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	051b      	lsls	r3, r3, #20
 800567e:	693a      	ldr	r2, [r7, #16]
 8005680:	4313      	orrs	r3, r2
 8005682:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a1a      	ldr	r2, [pc, #104]	@ (80056f0 <TIM_OC6_SetConfig+0xc0>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d013      	beq.n	80056b4 <TIM_OC6_SetConfig+0x84>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a19      	ldr	r2, [pc, #100]	@ (80056f4 <TIM_OC6_SetConfig+0xc4>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d00f      	beq.n	80056b4 <TIM_OC6_SetConfig+0x84>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a18      	ldr	r2, [pc, #96]	@ (80056f8 <TIM_OC6_SetConfig+0xc8>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d00b      	beq.n	80056b4 <TIM_OC6_SetConfig+0x84>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a17      	ldr	r2, [pc, #92]	@ (80056fc <TIM_OC6_SetConfig+0xcc>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d007      	beq.n	80056b4 <TIM_OC6_SetConfig+0x84>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a16      	ldr	r2, [pc, #88]	@ (8005700 <TIM_OC6_SetConfig+0xd0>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d003      	beq.n	80056b4 <TIM_OC6_SetConfig+0x84>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a15      	ldr	r2, [pc, #84]	@ (8005704 <TIM_OC6_SetConfig+0xd4>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d109      	bne.n	80056c8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80056ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	695b      	ldr	r3, [r3, #20]
 80056c0:	029b      	lsls	r3, r3, #10
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	685a      	ldr	r2, [r3, #4]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	693a      	ldr	r2, [r7, #16]
 80056e0:	621a      	str	r2, [r3, #32]
}
 80056e2:	bf00      	nop
 80056e4:	371c      	adds	r7, #28
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	40012c00 	.word	0x40012c00
 80056f4:	40013400 	.word	0x40013400
 80056f8:	40014000 	.word	0x40014000
 80056fc:	40014400 	.word	0x40014400
 8005700:	40014800 	.word	0x40014800
 8005704:	40015000 	.word	0x40015000

08005708 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005708:	b480      	push	{r7}
 800570a:	b087      	sub	sp, #28
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6a1b      	ldr	r3, [r3, #32]
 8005718:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6a1b      	ldr	r3, [r3, #32]
 800571e:	f023 0201 	bic.w	r2, r3, #1
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005732:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	011b      	lsls	r3, r3, #4
 8005738:	693a      	ldr	r2, [r7, #16]
 800573a:	4313      	orrs	r3, r2
 800573c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	f023 030a 	bic.w	r3, r3, #10
 8005744:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005746:	697a      	ldr	r2, [r7, #20]
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	4313      	orrs	r3, r2
 800574c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	621a      	str	r2, [r3, #32]
}
 800575a:	bf00      	nop
 800575c:	371c      	adds	r7, #28
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr

08005766 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005766:	b480      	push	{r7}
 8005768:	b087      	sub	sp, #28
 800576a:	af00      	add	r7, sp, #0
 800576c:	60f8      	str	r0, [r7, #12]
 800576e:	60b9      	str	r1, [r7, #8]
 8005770:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6a1b      	ldr	r3, [r3, #32]
 8005776:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6a1b      	ldr	r3, [r3, #32]
 800577c:	f023 0210 	bic.w	r2, r3, #16
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	699b      	ldr	r3, [r3, #24]
 8005788:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005790:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	031b      	lsls	r3, r3, #12
 8005796:	693a      	ldr	r2, [r7, #16]
 8005798:	4313      	orrs	r3, r2
 800579a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80057a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	011b      	lsls	r3, r3, #4
 80057a8:	697a      	ldr	r2, [r7, #20]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	693a      	ldr	r2, [r7, #16]
 80057b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	697a      	ldr	r2, [r7, #20]
 80057b8:	621a      	str	r2, [r3, #32]
}
 80057ba:	bf00      	nop
 80057bc:	371c      	adds	r7, #28
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr

080057c6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057c6:	b480      	push	{r7}
 80057c8:	b085      	sub	sp, #20
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
 80057ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80057dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057e2:	683a      	ldr	r2, [r7, #0]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	f043 0307 	orr.w	r3, r3, #7
 80057ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	609a      	str	r2, [r3, #8]
}
 80057f4:	bf00      	nop
 80057f6:	3714      	adds	r7, #20
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005800:	b480      	push	{r7}
 8005802:	b087      	sub	sp, #28
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	607a      	str	r2, [r7, #4]
 800580c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800581a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	021a      	lsls	r2, r3, #8
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	431a      	orrs	r2, r3
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	4313      	orrs	r3, r2
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	4313      	orrs	r3, r2
 800582c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	609a      	str	r2, [r3, #8]
}
 8005834:	bf00      	nop
 8005836:	371c      	adds	r7, #28
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005840:	b480      	push	{r7}
 8005842:	b087      	sub	sp, #28
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	f003 031f 	and.w	r3, r3, #31
 8005852:	2201      	movs	r2, #1
 8005854:	fa02 f303 	lsl.w	r3, r2, r3
 8005858:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6a1a      	ldr	r2, [r3, #32]
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	43db      	mvns	r3, r3
 8005862:	401a      	ands	r2, r3
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6a1a      	ldr	r2, [r3, #32]
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	f003 031f 	and.w	r3, r3, #31
 8005872:	6879      	ldr	r1, [r7, #4]
 8005874:	fa01 f303 	lsl.w	r3, r1, r3
 8005878:	431a      	orrs	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	621a      	str	r2, [r3, #32]
}
 800587e:	bf00      	nop
 8005880:	371c      	adds	r7, #28
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
	...

0800588c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800588c:	b480      	push	{r7}
 800588e:	b085      	sub	sp, #20
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800589c:	2b01      	cmp	r3, #1
 800589e:	d101      	bne.n	80058a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058a0:	2302      	movs	r3, #2
 80058a2:	e074      	b.n	800598e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2202      	movs	r2, #2
 80058b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a34      	ldr	r2, [pc, #208]	@ (800599c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d009      	beq.n	80058e2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a33      	ldr	r2, [pc, #204]	@ (80059a0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d004      	beq.n	80058e2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a31      	ldr	r2, [pc, #196]	@ (80059a4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d108      	bne.n	80058f4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80058e8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80058fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	4313      	orrs	r3, r2
 8005908:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a21      	ldr	r2, [pc, #132]	@ (800599c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d022      	beq.n	8005962 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005924:	d01d      	beq.n	8005962 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a1f      	ldr	r2, [pc, #124]	@ (80059a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d018      	beq.n	8005962 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a1d      	ldr	r2, [pc, #116]	@ (80059ac <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d013      	beq.n	8005962 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a1c      	ldr	r2, [pc, #112]	@ (80059b0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d00e      	beq.n	8005962 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a15      	ldr	r2, [pc, #84]	@ (80059a0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d009      	beq.n	8005962 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a18      	ldr	r2, [pc, #96]	@ (80059b4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d004      	beq.n	8005962 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a11      	ldr	r2, [pc, #68]	@ (80059a4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d10c      	bne.n	800597c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005968:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	68ba      	ldr	r2, [r7, #8]
 8005970:	4313      	orrs	r3, r2
 8005972:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68ba      	ldr	r2, [r7, #8]
 800597a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3714      	adds	r7, #20
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	40012c00 	.word	0x40012c00
 80059a0:	40013400 	.word	0x40013400
 80059a4:	40015000 	.word	0x40015000
 80059a8:	40000400 	.word	0x40000400
 80059ac:	40000800 	.word	0x40000800
 80059b0:	40000c00 	.word	0x40000c00
 80059b4:	40014000 	.word	0x40014000

080059b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80059c2:	2300      	movs	r3, #0
 80059c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d101      	bne.n	80059d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80059d0:	2302      	movs	r3, #2
 80059d2:	e078      	b.n	8005ac6 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	695b      	ldr	r3, [r3, #20]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	041b      	lsls	r3, r3, #16
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	69db      	ldr	r3, [r3, #28]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a1c      	ldr	r2, [pc, #112]	@ (8005ad4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d009      	beq.n	8005a7a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a1b      	ldr	r2, [pc, #108]	@ (8005ad8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d004      	beq.n	8005a7a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a19      	ldr	r2, [pc, #100]	@ (8005adc <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d11c      	bne.n	8005ab4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a84:	051b      	lsls	r3, r3, #20
 8005a86:	4313      	orrs	r3, r2
 8005a88:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	6a1b      	ldr	r3, [r3, #32]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3714      	adds	r7, #20
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop
 8005ad4:	40012c00 	.word	0x40012c00
 8005ad8:	40013400 	.word	0x40013400
 8005adc:	40015000 	.word	0x40015000

08005ae0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005afc:	bf00      	nop
 8005afe:	370c      	adds	r7, #12
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b10:	bf00      	nop
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005b24:	bf00      	nop
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005b38:	bf00      	nop
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005b4c:	bf00      	nop
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005b60:	bf00      	nop
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b082      	sub	sp, #8
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d101      	bne.n	8005b7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e042      	b.n	8005c04 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d106      	bne.n	8005b96 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f7fb fd0d 	bl	80015b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2224      	movs	r2, #36	@ 0x24
 8005b9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f022 0201 	bic.w	r2, r2, #1
 8005bac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d002      	beq.n	8005bbc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 ffbe 	bl	8006b38 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 fcbf 	bl	8006540 <UART_SetConfig>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d101      	bne.n	8005bcc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e01b      	b.n	8005c04 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	685a      	ldr	r2, [r3, #4]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005bda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	689a      	ldr	r2, [r3, #8]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005bea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f042 0201 	orr.w	r2, r2, #1
 8005bfa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f001 f83d 	bl	8006c7c <UART_CheckIdleState>
 8005c02:	4603      	mov	r3, r0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3708      	adds	r7, #8
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b08a      	sub	sp, #40	@ 0x28
 8005c10:	af02      	add	r7, sp, #8
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	603b      	str	r3, [r7, #0]
 8005c18:	4613      	mov	r3, r2
 8005c1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c22:	2b20      	cmp	r3, #32
 8005c24:	d17b      	bne.n	8005d1e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d002      	beq.n	8005c32 <HAL_UART_Transmit+0x26>
 8005c2c:	88fb      	ldrh	r3, [r7, #6]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d101      	bne.n	8005c36 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e074      	b.n	8005d20 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2221      	movs	r2, #33	@ 0x21
 8005c42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c46:	f7fb fead 	bl	80019a4 <HAL_GetTick>
 8005c4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	88fa      	ldrh	r2, [r7, #6]
 8005c50:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	88fa      	ldrh	r2, [r7, #6]
 8005c58:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c64:	d108      	bne.n	8005c78 <HAL_UART_Transmit+0x6c>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d104      	bne.n	8005c78 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	61bb      	str	r3, [r7, #24]
 8005c76:	e003      	b.n	8005c80 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c80:	e030      	b.n	8005ce4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	9300      	str	r3, [sp, #0]
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	2180      	movs	r1, #128	@ 0x80
 8005c8c:	68f8      	ldr	r0, [r7, #12]
 8005c8e:	f001 f89f 	bl	8006dd0 <UART_WaitOnFlagUntilTimeout>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d005      	beq.n	8005ca4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2220      	movs	r2, #32
 8005c9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	e03d      	b.n	8005d20 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d10b      	bne.n	8005cc2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	881b      	ldrh	r3, [r3, #0]
 8005cae:	461a      	mov	r2, r3
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cb8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	3302      	adds	r3, #2
 8005cbe:	61bb      	str	r3, [r7, #24]
 8005cc0:	e007      	b.n	8005cd2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	781a      	ldrb	r2, [r3, #0]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	3301      	adds	r3, #1
 8005cd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	b29a      	uxth	r2, r3
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d1c8      	bne.n	8005c82 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	9300      	str	r3, [sp, #0]
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	2140      	movs	r1, #64	@ 0x40
 8005cfa:	68f8      	ldr	r0, [r7, #12]
 8005cfc:	f001 f868 	bl	8006dd0 <UART_WaitOnFlagUntilTimeout>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d005      	beq.n	8005d12 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2220      	movs	r2, #32
 8005d0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e006      	b.n	8005d20 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2220      	movs	r2, #32
 8005d16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	e000      	b.n	8005d20 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005d1e:	2302      	movs	r3, #2
  }
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3720      	adds	r7, #32
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b08a      	sub	sp, #40	@ 0x28
 8005d2c:	af02      	add	r7, sp, #8
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	603b      	str	r3, [r7, #0]
 8005d34:	4613      	mov	r3, r2
 8005d36:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005d3e:	2b20      	cmp	r3, #32
 8005d40:	f040 80b5 	bne.w	8005eae <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d002      	beq.n	8005d50 <HAL_UART_Receive+0x28>
 8005d4a:	88fb      	ldrh	r3, [r7, #6]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d101      	bne.n	8005d54 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e0ad      	b.n	8005eb0 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2222      	movs	r2, #34	@ 0x22
 8005d60:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2200      	movs	r2, #0
 8005d68:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d6a:	f7fb fe1b 	bl	80019a4 <HAL_GetTick>
 8005d6e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	88fa      	ldrh	r2, [r7, #6]
 8005d74:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	88fa      	ldrh	r2, [r7, #6]
 8005d7c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d88:	d10e      	bne.n	8005da8 <HAL_UART_Receive+0x80>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d105      	bne.n	8005d9e <HAL_UART_Receive+0x76>
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005d98:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005d9c:	e02d      	b.n	8005dfa <HAL_UART_Receive+0xd2>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	22ff      	movs	r2, #255	@ 0xff
 8005da2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005da6:	e028      	b.n	8005dfa <HAL_UART_Receive+0xd2>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d10d      	bne.n	8005dcc <HAL_UART_Receive+0xa4>
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d104      	bne.n	8005dc2 <HAL_UART_Receive+0x9a>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	22ff      	movs	r2, #255	@ 0xff
 8005dbc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005dc0:	e01b      	b.n	8005dfa <HAL_UART_Receive+0xd2>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	227f      	movs	r2, #127	@ 0x7f
 8005dc6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005dca:	e016      	b.n	8005dfa <HAL_UART_Receive+0xd2>
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005dd4:	d10d      	bne.n	8005df2 <HAL_UART_Receive+0xca>
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	691b      	ldr	r3, [r3, #16]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d104      	bne.n	8005de8 <HAL_UART_Receive+0xc0>
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	227f      	movs	r2, #127	@ 0x7f
 8005de2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005de6:	e008      	b.n	8005dfa <HAL_UART_Receive+0xd2>
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	223f      	movs	r2, #63	@ 0x3f
 8005dec:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005df0:	e003      	b.n	8005dfa <HAL_UART_Receive+0xd2>
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005e00:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e0a:	d108      	bne.n	8005e1e <HAL_UART_Receive+0xf6>
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d104      	bne.n	8005e1e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005e14:	2300      	movs	r3, #0
 8005e16:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	61bb      	str	r3, [r7, #24]
 8005e1c:	e003      	b.n	8005e26 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e22:	2300      	movs	r3, #0
 8005e24:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005e26:	e036      	b.n	8005e96 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	9300      	str	r3, [sp, #0]
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	2120      	movs	r1, #32
 8005e32:	68f8      	ldr	r0, [r7, #12]
 8005e34:	f000 ffcc 	bl	8006dd0 <UART_WaitOnFlagUntilTimeout>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d005      	beq.n	8005e4a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2220      	movs	r2, #32
 8005e42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e032      	b.n	8005eb0 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d10c      	bne.n	8005e6a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e56:	b29a      	uxth	r2, r3
 8005e58:	8a7b      	ldrh	r3, [r7, #18]
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	b29a      	uxth	r2, r3
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	3302      	adds	r3, #2
 8005e66:	61bb      	str	r3, [r7, #24]
 8005e68:	e00c      	b.n	8005e84 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e70:	b2da      	uxtb	r2, r3
 8005e72:	8a7b      	ldrh	r3, [r7, #18]
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	4013      	ands	r3, r2
 8005e78:	b2da      	uxtb	r2, r3
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	3301      	adds	r3, #1
 8005e82:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	3b01      	subs	r3, #1
 8005e8e:	b29a      	uxth	r2, r3
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d1c2      	bne.n	8005e28 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2220      	movs	r2, #32
 8005ea6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	e000      	b.n	8005eb0 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8005eae:	2302      	movs	r3, #2
  }
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3720      	adds	r7, #32
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b0ba      	sub	sp, #232	@ 0xe8
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	69db      	ldr	r3, [r3, #28]
 8005ec6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005ede:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005ee2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005eec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d11b      	bne.n	8005f2c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005ef4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ef8:	f003 0320 	and.w	r3, r3, #32
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d015      	beq.n	8005f2c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005f00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f04:	f003 0320 	and.w	r3, r3, #32
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d105      	bne.n	8005f18 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005f0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d009      	beq.n	8005f2c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	f000 82e3 	beq.w	80064e8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	4798      	blx	r3
      }
      return;
 8005f2a:	e2dd      	b.n	80064e8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005f2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	f000 8123 	beq.w	800617c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005f36:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005f3a:	4b8d      	ldr	r3, [pc, #564]	@ (8006170 <HAL_UART_IRQHandler+0x2b8>)
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d106      	bne.n	8005f50 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005f42:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005f46:	4b8b      	ldr	r3, [pc, #556]	@ (8006174 <HAL_UART_IRQHandler+0x2bc>)
 8005f48:	4013      	ands	r3, r2
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	f000 8116 	beq.w	800617c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f54:	f003 0301 	and.w	r3, r3, #1
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d011      	beq.n	8005f80 <HAL_UART_IRQHandler+0xc8>
 8005f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d00b      	beq.n	8005f80 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f76:	f043 0201 	orr.w	r2, r3, #1
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f84:	f003 0302 	and.w	r3, r3, #2
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d011      	beq.n	8005fb0 <HAL_UART_IRQHandler+0xf8>
 8005f8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f90:	f003 0301 	and.w	r3, r3, #1
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d00b      	beq.n	8005fb0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2202      	movs	r2, #2
 8005f9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fa6:	f043 0204 	orr.w	r2, r3, #4
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fb4:	f003 0304 	and.w	r3, r3, #4
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d011      	beq.n	8005fe0 <HAL_UART_IRQHandler+0x128>
 8005fbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005fc0:	f003 0301 	and.w	r3, r3, #1
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d00b      	beq.n	8005fe0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2204      	movs	r2, #4
 8005fce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fd6:	f043 0202 	orr.w	r2, r3, #2
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005fe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fe4:	f003 0308 	and.w	r3, r3, #8
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d017      	beq.n	800601c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005fec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ff0:	f003 0320 	and.w	r3, r3, #32
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d105      	bne.n	8006004 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005ff8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005ffc:	4b5c      	ldr	r3, [pc, #368]	@ (8006170 <HAL_UART_IRQHandler+0x2b8>)
 8005ffe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006000:	2b00      	cmp	r3, #0
 8006002:	d00b      	beq.n	800601c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2208      	movs	r2, #8
 800600a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006012:	f043 0208 	orr.w	r2, r3, #8
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800601c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006020:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006024:	2b00      	cmp	r3, #0
 8006026:	d012      	beq.n	800604e <HAL_UART_IRQHandler+0x196>
 8006028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800602c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006030:	2b00      	cmp	r3, #0
 8006032:	d00c      	beq.n	800604e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800603c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006044:	f043 0220 	orr.w	r2, r3, #32
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006054:	2b00      	cmp	r3, #0
 8006056:	f000 8249 	beq.w	80064ec <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800605a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800605e:	f003 0320 	and.w	r3, r3, #32
 8006062:	2b00      	cmp	r3, #0
 8006064:	d013      	beq.n	800608e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006066:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800606a:	f003 0320 	and.w	r3, r3, #32
 800606e:	2b00      	cmp	r3, #0
 8006070:	d105      	bne.n	800607e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006072:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006076:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800607a:	2b00      	cmp	r3, #0
 800607c:	d007      	beq.n	800608e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006082:	2b00      	cmp	r3, #0
 8006084:	d003      	beq.n	800608e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006094:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060a2:	2b40      	cmp	r3, #64	@ 0x40
 80060a4:	d005      	beq.n	80060b2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80060a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80060aa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d054      	beq.n	800615c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 fef9 	bl	8006eaa <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060c2:	2b40      	cmp	r3, #64	@ 0x40
 80060c4:	d146      	bne.n	8006154 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	3308      	adds	r3, #8
 80060cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80060d4:	e853 3f00 	ldrex	r3, [r3]
 80060d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80060dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80060e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	3308      	adds	r3, #8
 80060ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80060f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80060f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80060fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006102:	e841 2300 	strex	r3, r2, [r1]
 8006106:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800610a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d1d9      	bne.n	80060c6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006118:	2b00      	cmp	r3, #0
 800611a:	d017      	beq.n	800614c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006122:	4a15      	ldr	r2, [pc, #84]	@ (8006178 <HAL_UART_IRQHandler+0x2c0>)
 8006124:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800612c:	4618      	mov	r0, r3
 800612e:	f7fb fdcf 	bl	8001cd0 <HAL_DMA_Abort_IT>
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d019      	beq.n	800616c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800613e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006146:	4610      	mov	r0, r2
 8006148:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800614a:	e00f      	b.n	800616c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f000 f9e1 	bl	8006514 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006152:	e00b      	b.n	800616c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 f9dd 	bl	8006514 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800615a:	e007      	b.n	800616c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 f9d9 	bl	8006514 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800616a:	e1bf      	b.n	80064ec <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800616c:	bf00      	nop
    return;
 800616e:	e1bd      	b.n	80064ec <HAL_UART_IRQHandler+0x634>
 8006170:	10000001 	.word	0x10000001
 8006174:	04000120 	.word	0x04000120
 8006178:	08006f77 	.word	0x08006f77

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006180:	2b01      	cmp	r3, #1
 8006182:	f040 8153 	bne.w	800642c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800618a:	f003 0310 	and.w	r3, r3, #16
 800618e:	2b00      	cmp	r3, #0
 8006190:	f000 814c 	beq.w	800642c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006198:	f003 0310 	and.w	r3, r3, #16
 800619c:	2b00      	cmp	r3, #0
 800619e:	f000 8145 	beq.w	800642c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2210      	movs	r2, #16
 80061a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061b4:	2b40      	cmp	r3, #64	@ 0x40
 80061b6:	f040 80bb 	bne.w	8006330 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80061c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	f000 818f 	beq.w	80064f0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80061d8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80061dc:	429a      	cmp	r2, r3
 80061de:	f080 8187 	bcs.w	80064f0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80061e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 0320 	and.w	r3, r3, #32
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	f040 8087 	bne.w	800630e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006208:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800620c:	e853 3f00 	ldrex	r3, [r3]
 8006210:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006214:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006218:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800621c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	461a      	mov	r2, r3
 8006226:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800622a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800622e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006232:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006236:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800623a:	e841 2300 	strex	r3, r2, [r1]
 800623e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006242:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006246:	2b00      	cmp	r3, #0
 8006248:	d1da      	bne.n	8006200 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	3308      	adds	r3, #8
 8006250:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006252:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006254:	e853 3f00 	ldrex	r3, [r3]
 8006258:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800625a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800625c:	f023 0301 	bic.w	r3, r3, #1
 8006260:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	3308      	adds	r3, #8
 800626a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800626e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006272:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006274:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006276:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800627a:	e841 2300 	strex	r3, r2, [r1]
 800627e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006280:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1e1      	bne.n	800624a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	3308      	adds	r3, #8
 800628c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006290:	e853 3f00 	ldrex	r3, [r3]
 8006294:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006296:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006298:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800629c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	3308      	adds	r3, #8
 80062a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80062aa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80062ac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80062b0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80062b2:	e841 2300 	strex	r3, r2, [r1]
 80062b6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80062b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d1e3      	bne.n	8006286 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2220      	movs	r2, #32
 80062c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062d4:	e853 3f00 	ldrex	r3, [r3]
 80062d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80062da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062dc:	f023 0310 	bic.w	r3, r3, #16
 80062e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	461a      	mov	r2, r3
 80062ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80062ee:	65bb      	str	r3, [r7, #88]	@ 0x58
 80062f0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80062f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80062f6:	e841 2300 	strex	r3, r2, [r1]
 80062fa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80062fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1e4      	bne.n	80062cc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006308:	4618      	mov	r0, r3
 800630a:	f7fb fc88 	bl	8001c1e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2202      	movs	r2, #2
 8006312:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006320:	b29b      	uxth	r3, r3
 8006322:	1ad3      	subs	r3, r2, r3
 8006324:	b29b      	uxth	r3, r3
 8006326:	4619      	mov	r1, r3
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 f8fd 	bl	8006528 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800632e:	e0df      	b.n	80064f0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800633c:	b29b      	uxth	r3, r3
 800633e:	1ad3      	subs	r3, r2, r3
 8006340:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800634a:	b29b      	uxth	r3, r3
 800634c:	2b00      	cmp	r3, #0
 800634e:	f000 80d1 	beq.w	80064f4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8006352:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006356:	2b00      	cmp	r3, #0
 8006358:	f000 80cc 	beq.w	80064f4 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006364:	e853 3f00 	ldrex	r3, [r3]
 8006368:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800636a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800636c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006370:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	461a      	mov	r2, r3
 800637a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800637e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006380:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006382:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006384:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006386:	e841 2300 	strex	r3, r2, [r1]
 800638a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800638c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1e4      	bne.n	800635c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	3308      	adds	r3, #8
 8006398:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800639a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800639c:	e853 3f00 	ldrex	r3, [r3]
 80063a0:	623b      	str	r3, [r7, #32]
   return(result);
 80063a2:	6a3b      	ldr	r3, [r7, #32]
 80063a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80063a8:	f023 0301 	bic.w	r3, r3, #1
 80063ac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	3308      	adds	r3, #8
 80063b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80063ba:	633a      	str	r2, [r7, #48]	@ 0x30
 80063bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80063c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063c2:	e841 2300 	strex	r3, r2, [r1]
 80063c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80063c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d1e1      	bne.n	8006392 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2220      	movs	r2, #32
 80063d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	e853 3f00 	ldrex	r3, [r3]
 80063ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f023 0310 	bic.w	r3, r3, #16
 80063f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	461a      	mov	r2, r3
 8006400:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006404:	61fb      	str	r3, [r7, #28]
 8006406:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006408:	69b9      	ldr	r1, [r7, #24]
 800640a:	69fa      	ldr	r2, [r7, #28]
 800640c:	e841 2300 	strex	r3, r2, [r1]
 8006410:	617b      	str	r3, [r7, #20]
   return(result);
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d1e4      	bne.n	80063e2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2202      	movs	r2, #2
 800641c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800641e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006422:	4619      	mov	r1, r3
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 f87f 	bl	8006528 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800642a:	e063      	b.n	80064f4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800642c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006430:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006434:	2b00      	cmp	r3, #0
 8006436:	d00e      	beq.n	8006456 <HAL_UART_IRQHandler+0x59e>
 8006438:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800643c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006440:	2b00      	cmp	r3, #0
 8006442:	d008      	beq.n	8006456 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800644c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 fdd2 	bl	8006ff8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006454:	e051      	b.n	80064fa <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800645a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800645e:	2b00      	cmp	r3, #0
 8006460:	d014      	beq.n	800648c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006462:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800646a:	2b00      	cmp	r3, #0
 800646c:	d105      	bne.n	800647a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800646e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006472:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006476:	2b00      	cmp	r3, #0
 8006478:	d008      	beq.n	800648c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800647e:	2b00      	cmp	r3, #0
 8006480:	d03a      	beq.n	80064f8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	4798      	blx	r3
    }
    return;
 800648a:	e035      	b.n	80064f8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800648c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006490:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006494:	2b00      	cmp	r3, #0
 8006496:	d009      	beq.n	80064ac <HAL_UART_IRQHandler+0x5f4>
 8006498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800649c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d003      	beq.n	80064ac <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 fd7c 	bl	8006fa2 <UART_EndTransmit_IT>
    return;
 80064aa:	e026      	b.n	80064fa <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80064ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d009      	beq.n	80064cc <HAL_UART_IRQHandler+0x614>
 80064b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064bc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d003      	beq.n	80064cc <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 fdab 	bl	8007020 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80064ca:	e016      	b.n	80064fa <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80064cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d010      	beq.n	80064fa <HAL_UART_IRQHandler+0x642>
 80064d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	da0c      	bge.n	80064fa <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 fd93 	bl	800700c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80064e6:	e008      	b.n	80064fa <HAL_UART_IRQHandler+0x642>
      return;
 80064e8:	bf00      	nop
 80064ea:	e006      	b.n	80064fa <HAL_UART_IRQHandler+0x642>
    return;
 80064ec:	bf00      	nop
 80064ee:	e004      	b.n	80064fa <HAL_UART_IRQHandler+0x642>
      return;
 80064f0:	bf00      	nop
 80064f2:	e002      	b.n	80064fa <HAL_UART_IRQHandler+0x642>
      return;
 80064f4:	bf00      	nop
 80064f6:	e000      	b.n	80064fa <HAL_UART_IRQHandler+0x642>
    return;
 80064f8:	bf00      	nop
  }
}
 80064fa:	37e8      	adds	r7, #232	@ 0xe8
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006508:	bf00      	nop
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800651c:	bf00      	nop
 800651e:	370c      	adds	r7, #12
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	460b      	mov	r3, r1
 8006532:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006534:	bf00      	nop
 8006536:	370c      	adds	r7, #12
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006540:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006544:	b08c      	sub	sp, #48	@ 0x30
 8006546:	af00      	add	r7, sp, #0
 8006548:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800654a:	2300      	movs	r3, #0
 800654c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	689a      	ldr	r2, [r3, #8]
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	691b      	ldr	r3, [r3, #16]
 8006558:	431a      	orrs	r2, r3
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	695b      	ldr	r3, [r3, #20]
 800655e:	431a      	orrs	r2, r3
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	69db      	ldr	r3, [r3, #28]
 8006564:	4313      	orrs	r3, r2
 8006566:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	4baa      	ldr	r3, [pc, #680]	@ (8006818 <UART_SetConfig+0x2d8>)
 8006570:	4013      	ands	r3, r2
 8006572:	697a      	ldr	r2, [r7, #20]
 8006574:	6812      	ldr	r2, [r2, #0]
 8006576:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006578:	430b      	orrs	r3, r1
 800657a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	68da      	ldr	r2, [r3, #12]
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	430a      	orrs	r2, r1
 8006590:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	699b      	ldr	r3, [r3, #24]
 8006596:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a9f      	ldr	r2, [pc, #636]	@ (800681c <UART_SetConfig+0x2dc>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d004      	beq.n	80065ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	6a1b      	ldr	r3, [r3, #32]
 80065a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065a8:	4313      	orrs	r3, r2
 80065aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80065b6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80065ba:	697a      	ldr	r2, [r7, #20]
 80065bc:	6812      	ldr	r2, [r2, #0]
 80065be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80065c0:	430b      	orrs	r3, r1
 80065c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ca:	f023 010f 	bic.w	r1, r3, #15
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	430a      	orrs	r2, r1
 80065d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a90      	ldr	r2, [pc, #576]	@ (8006820 <UART_SetConfig+0x2e0>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d125      	bne.n	8006630 <UART_SetConfig+0xf0>
 80065e4:	4b8f      	ldr	r3, [pc, #572]	@ (8006824 <UART_SetConfig+0x2e4>)
 80065e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065ea:	f003 0303 	and.w	r3, r3, #3
 80065ee:	2b03      	cmp	r3, #3
 80065f0:	d81a      	bhi.n	8006628 <UART_SetConfig+0xe8>
 80065f2:	a201      	add	r2, pc, #4	@ (adr r2, 80065f8 <UART_SetConfig+0xb8>)
 80065f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f8:	08006609 	.word	0x08006609
 80065fc:	08006619 	.word	0x08006619
 8006600:	08006611 	.word	0x08006611
 8006604:	08006621 	.word	0x08006621
 8006608:	2301      	movs	r3, #1
 800660a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800660e:	e116      	b.n	800683e <UART_SetConfig+0x2fe>
 8006610:	2302      	movs	r3, #2
 8006612:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006616:	e112      	b.n	800683e <UART_SetConfig+0x2fe>
 8006618:	2304      	movs	r3, #4
 800661a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800661e:	e10e      	b.n	800683e <UART_SetConfig+0x2fe>
 8006620:	2308      	movs	r3, #8
 8006622:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006626:	e10a      	b.n	800683e <UART_SetConfig+0x2fe>
 8006628:	2310      	movs	r3, #16
 800662a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800662e:	e106      	b.n	800683e <UART_SetConfig+0x2fe>
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a7c      	ldr	r2, [pc, #496]	@ (8006828 <UART_SetConfig+0x2e8>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d138      	bne.n	80066ac <UART_SetConfig+0x16c>
 800663a:	4b7a      	ldr	r3, [pc, #488]	@ (8006824 <UART_SetConfig+0x2e4>)
 800663c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006640:	f003 030c 	and.w	r3, r3, #12
 8006644:	2b0c      	cmp	r3, #12
 8006646:	d82d      	bhi.n	80066a4 <UART_SetConfig+0x164>
 8006648:	a201      	add	r2, pc, #4	@ (adr r2, 8006650 <UART_SetConfig+0x110>)
 800664a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800664e:	bf00      	nop
 8006650:	08006685 	.word	0x08006685
 8006654:	080066a5 	.word	0x080066a5
 8006658:	080066a5 	.word	0x080066a5
 800665c:	080066a5 	.word	0x080066a5
 8006660:	08006695 	.word	0x08006695
 8006664:	080066a5 	.word	0x080066a5
 8006668:	080066a5 	.word	0x080066a5
 800666c:	080066a5 	.word	0x080066a5
 8006670:	0800668d 	.word	0x0800668d
 8006674:	080066a5 	.word	0x080066a5
 8006678:	080066a5 	.word	0x080066a5
 800667c:	080066a5 	.word	0x080066a5
 8006680:	0800669d 	.word	0x0800669d
 8006684:	2300      	movs	r3, #0
 8006686:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800668a:	e0d8      	b.n	800683e <UART_SetConfig+0x2fe>
 800668c:	2302      	movs	r3, #2
 800668e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006692:	e0d4      	b.n	800683e <UART_SetConfig+0x2fe>
 8006694:	2304      	movs	r3, #4
 8006696:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800669a:	e0d0      	b.n	800683e <UART_SetConfig+0x2fe>
 800669c:	2308      	movs	r3, #8
 800669e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066a2:	e0cc      	b.n	800683e <UART_SetConfig+0x2fe>
 80066a4:	2310      	movs	r3, #16
 80066a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066aa:	e0c8      	b.n	800683e <UART_SetConfig+0x2fe>
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a5e      	ldr	r2, [pc, #376]	@ (800682c <UART_SetConfig+0x2ec>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d125      	bne.n	8006702 <UART_SetConfig+0x1c2>
 80066b6:	4b5b      	ldr	r3, [pc, #364]	@ (8006824 <UART_SetConfig+0x2e4>)
 80066b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066bc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80066c0:	2b30      	cmp	r3, #48	@ 0x30
 80066c2:	d016      	beq.n	80066f2 <UART_SetConfig+0x1b2>
 80066c4:	2b30      	cmp	r3, #48	@ 0x30
 80066c6:	d818      	bhi.n	80066fa <UART_SetConfig+0x1ba>
 80066c8:	2b20      	cmp	r3, #32
 80066ca:	d00a      	beq.n	80066e2 <UART_SetConfig+0x1a2>
 80066cc:	2b20      	cmp	r3, #32
 80066ce:	d814      	bhi.n	80066fa <UART_SetConfig+0x1ba>
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d002      	beq.n	80066da <UART_SetConfig+0x19a>
 80066d4:	2b10      	cmp	r3, #16
 80066d6:	d008      	beq.n	80066ea <UART_SetConfig+0x1aa>
 80066d8:	e00f      	b.n	80066fa <UART_SetConfig+0x1ba>
 80066da:	2300      	movs	r3, #0
 80066dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066e0:	e0ad      	b.n	800683e <UART_SetConfig+0x2fe>
 80066e2:	2302      	movs	r3, #2
 80066e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066e8:	e0a9      	b.n	800683e <UART_SetConfig+0x2fe>
 80066ea:	2304      	movs	r3, #4
 80066ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066f0:	e0a5      	b.n	800683e <UART_SetConfig+0x2fe>
 80066f2:	2308      	movs	r3, #8
 80066f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066f8:	e0a1      	b.n	800683e <UART_SetConfig+0x2fe>
 80066fa:	2310      	movs	r3, #16
 80066fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006700:	e09d      	b.n	800683e <UART_SetConfig+0x2fe>
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a4a      	ldr	r2, [pc, #296]	@ (8006830 <UART_SetConfig+0x2f0>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d125      	bne.n	8006758 <UART_SetConfig+0x218>
 800670c:	4b45      	ldr	r3, [pc, #276]	@ (8006824 <UART_SetConfig+0x2e4>)
 800670e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006712:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006716:	2bc0      	cmp	r3, #192	@ 0xc0
 8006718:	d016      	beq.n	8006748 <UART_SetConfig+0x208>
 800671a:	2bc0      	cmp	r3, #192	@ 0xc0
 800671c:	d818      	bhi.n	8006750 <UART_SetConfig+0x210>
 800671e:	2b80      	cmp	r3, #128	@ 0x80
 8006720:	d00a      	beq.n	8006738 <UART_SetConfig+0x1f8>
 8006722:	2b80      	cmp	r3, #128	@ 0x80
 8006724:	d814      	bhi.n	8006750 <UART_SetConfig+0x210>
 8006726:	2b00      	cmp	r3, #0
 8006728:	d002      	beq.n	8006730 <UART_SetConfig+0x1f0>
 800672a:	2b40      	cmp	r3, #64	@ 0x40
 800672c:	d008      	beq.n	8006740 <UART_SetConfig+0x200>
 800672e:	e00f      	b.n	8006750 <UART_SetConfig+0x210>
 8006730:	2300      	movs	r3, #0
 8006732:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006736:	e082      	b.n	800683e <UART_SetConfig+0x2fe>
 8006738:	2302      	movs	r3, #2
 800673a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800673e:	e07e      	b.n	800683e <UART_SetConfig+0x2fe>
 8006740:	2304      	movs	r3, #4
 8006742:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006746:	e07a      	b.n	800683e <UART_SetConfig+0x2fe>
 8006748:	2308      	movs	r3, #8
 800674a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800674e:	e076      	b.n	800683e <UART_SetConfig+0x2fe>
 8006750:	2310      	movs	r3, #16
 8006752:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006756:	e072      	b.n	800683e <UART_SetConfig+0x2fe>
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a35      	ldr	r2, [pc, #212]	@ (8006834 <UART_SetConfig+0x2f4>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d12a      	bne.n	80067b8 <UART_SetConfig+0x278>
 8006762:	4b30      	ldr	r3, [pc, #192]	@ (8006824 <UART_SetConfig+0x2e4>)
 8006764:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006768:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800676c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006770:	d01a      	beq.n	80067a8 <UART_SetConfig+0x268>
 8006772:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006776:	d81b      	bhi.n	80067b0 <UART_SetConfig+0x270>
 8006778:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800677c:	d00c      	beq.n	8006798 <UART_SetConfig+0x258>
 800677e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006782:	d815      	bhi.n	80067b0 <UART_SetConfig+0x270>
 8006784:	2b00      	cmp	r3, #0
 8006786:	d003      	beq.n	8006790 <UART_SetConfig+0x250>
 8006788:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800678c:	d008      	beq.n	80067a0 <UART_SetConfig+0x260>
 800678e:	e00f      	b.n	80067b0 <UART_SetConfig+0x270>
 8006790:	2300      	movs	r3, #0
 8006792:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006796:	e052      	b.n	800683e <UART_SetConfig+0x2fe>
 8006798:	2302      	movs	r3, #2
 800679a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800679e:	e04e      	b.n	800683e <UART_SetConfig+0x2fe>
 80067a0:	2304      	movs	r3, #4
 80067a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067a6:	e04a      	b.n	800683e <UART_SetConfig+0x2fe>
 80067a8:	2308      	movs	r3, #8
 80067aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067ae:	e046      	b.n	800683e <UART_SetConfig+0x2fe>
 80067b0:	2310      	movs	r3, #16
 80067b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067b6:	e042      	b.n	800683e <UART_SetConfig+0x2fe>
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a17      	ldr	r2, [pc, #92]	@ (800681c <UART_SetConfig+0x2dc>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d13a      	bne.n	8006838 <UART_SetConfig+0x2f8>
 80067c2:	4b18      	ldr	r3, [pc, #96]	@ (8006824 <UART_SetConfig+0x2e4>)
 80067c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067c8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80067cc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80067d0:	d01a      	beq.n	8006808 <UART_SetConfig+0x2c8>
 80067d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80067d6:	d81b      	bhi.n	8006810 <UART_SetConfig+0x2d0>
 80067d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067dc:	d00c      	beq.n	80067f8 <UART_SetConfig+0x2b8>
 80067de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067e2:	d815      	bhi.n	8006810 <UART_SetConfig+0x2d0>
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d003      	beq.n	80067f0 <UART_SetConfig+0x2b0>
 80067e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067ec:	d008      	beq.n	8006800 <UART_SetConfig+0x2c0>
 80067ee:	e00f      	b.n	8006810 <UART_SetConfig+0x2d0>
 80067f0:	2300      	movs	r3, #0
 80067f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067f6:	e022      	b.n	800683e <UART_SetConfig+0x2fe>
 80067f8:	2302      	movs	r3, #2
 80067fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067fe:	e01e      	b.n	800683e <UART_SetConfig+0x2fe>
 8006800:	2304      	movs	r3, #4
 8006802:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006806:	e01a      	b.n	800683e <UART_SetConfig+0x2fe>
 8006808:	2308      	movs	r3, #8
 800680a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800680e:	e016      	b.n	800683e <UART_SetConfig+0x2fe>
 8006810:	2310      	movs	r3, #16
 8006812:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006816:	e012      	b.n	800683e <UART_SetConfig+0x2fe>
 8006818:	cfff69f3 	.word	0xcfff69f3
 800681c:	40008000 	.word	0x40008000
 8006820:	40013800 	.word	0x40013800
 8006824:	40021000 	.word	0x40021000
 8006828:	40004400 	.word	0x40004400
 800682c:	40004800 	.word	0x40004800
 8006830:	40004c00 	.word	0x40004c00
 8006834:	40005000 	.word	0x40005000
 8006838:	2310      	movs	r3, #16
 800683a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4aae      	ldr	r2, [pc, #696]	@ (8006afc <UART_SetConfig+0x5bc>)
 8006844:	4293      	cmp	r3, r2
 8006846:	f040 8097 	bne.w	8006978 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800684a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800684e:	2b08      	cmp	r3, #8
 8006850:	d823      	bhi.n	800689a <UART_SetConfig+0x35a>
 8006852:	a201      	add	r2, pc, #4	@ (adr r2, 8006858 <UART_SetConfig+0x318>)
 8006854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006858:	0800687d 	.word	0x0800687d
 800685c:	0800689b 	.word	0x0800689b
 8006860:	08006885 	.word	0x08006885
 8006864:	0800689b 	.word	0x0800689b
 8006868:	0800688b 	.word	0x0800688b
 800686c:	0800689b 	.word	0x0800689b
 8006870:	0800689b 	.word	0x0800689b
 8006874:	0800689b 	.word	0x0800689b
 8006878:	08006893 	.word	0x08006893
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800687c:	f7fc f9b2 	bl	8002be4 <HAL_RCC_GetPCLK1Freq>
 8006880:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006882:	e010      	b.n	80068a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006884:	4b9e      	ldr	r3, [pc, #632]	@ (8006b00 <UART_SetConfig+0x5c0>)
 8006886:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006888:	e00d      	b.n	80068a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800688a:	f7fc f93d 	bl	8002b08 <HAL_RCC_GetSysClockFreq>
 800688e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006890:	e009      	b.n	80068a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006892:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006896:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006898:	e005      	b.n	80068a6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800689a:	2300      	movs	r3, #0
 800689c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80068a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80068a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	f000 8130 	beq.w	8006b0e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068b2:	4a94      	ldr	r2, [pc, #592]	@ (8006b04 <UART_SetConfig+0x5c4>)
 80068b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068b8:	461a      	mov	r2, r3
 80068ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80068c0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	685a      	ldr	r2, [r3, #4]
 80068c6:	4613      	mov	r3, r2
 80068c8:	005b      	lsls	r3, r3, #1
 80068ca:	4413      	add	r3, r2
 80068cc:	69ba      	ldr	r2, [r7, #24]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d305      	bcc.n	80068de <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80068d8:	69ba      	ldr	r2, [r7, #24]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d903      	bls.n	80068e6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80068e4:	e113      	b.n	8006b0e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e8:	2200      	movs	r2, #0
 80068ea:	60bb      	str	r3, [r7, #8]
 80068ec:	60fa      	str	r2, [r7, #12]
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068f2:	4a84      	ldr	r2, [pc, #528]	@ (8006b04 <UART_SetConfig+0x5c4>)
 80068f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	2200      	movs	r2, #0
 80068fc:	603b      	str	r3, [r7, #0]
 80068fe:	607a      	str	r2, [r7, #4]
 8006900:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006904:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006908:	f7f9 fcf2 	bl	80002f0 <__aeabi_uldivmod>
 800690c:	4602      	mov	r2, r0
 800690e:	460b      	mov	r3, r1
 8006910:	4610      	mov	r0, r2
 8006912:	4619      	mov	r1, r3
 8006914:	f04f 0200 	mov.w	r2, #0
 8006918:	f04f 0300 	mov.w	r3, #0
 800691c:	020b      	lsls	r3, r1, #8
 800691e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006922:	0202      	lsls	r2, r0, #8
 8006924:	6979      	ldr	r1, [r7, #20]
 8006926:	6849      	ldr	r1, [r1, #4]
 8006928:	0849      	lsrs	r1, r1, #1
 800692a:	2000      	movs	r0, #0
 800692c:	460c      	mov	r4, r1
 800692e:	4605      	mov	r5, r0
 8006930:	eb12 0804 	adds.w	r8, r2, r4
 8006934:	eb43 0905 	adc.w	r9, r3, r5
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	469a      	mov	sl, r3
 8006940:	4693      	mov	fp, r2
 8006942:	4652      	mov	r2, sl
 8006944:	465b      	mov	r3, fp
 8006946:	4640      	mov	r0, r8
 8006948:	4649      	mov	r1, r9
 800694a:	f7f9 fcd1 	bl	80002f0 <__aeabi_uldivmod>
 800694e:	4602      	mov	r2, r0
 8006950:	460b      	mov	r3, r1
 8006952:	4613      	mov	r3, r2
 8006954:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006956:	6a3b      	ldr	r3, [r7, #32]
 8006958:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800695c:	d308      	bcc.n	8006970 <UART_SetConfig+0x430>
 800695e:	6a3b      	ldr	r3, [r7, #32]
 8006960:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006964:	d204      	bcs.n	8006970 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	6a3a      	ldr	r2, [r7, #32]
 800696c:	60da      	str	r2, [r3, #12]
 800696e:	e0ce      	b.n	8006b0e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006976:	e0ca      	b.n	8006b0e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	69db      	ldr	r3, [r3, #28]
 800697c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006980:	d166      	bne.n	8006a50 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006982:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006986:	2b08      	cmp	r3, #8
 8006988:	d827      	bhi.n	80069da <UART_SetConfig+0x49a>
 800698a:	a201      	add	r2, pc, #4	@ (adr r2, 8006990 <UART_SetConfig+0x450>)
 800698c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006990:	080069b5 	.word	0x080069b5
 8006994:	080069bd 	.word	0x080069bd
 8006998:	080069c5 	.word	0x080069c5
 800699c:	080069db 	.word	0x080069db
 80069a0:	080069cb 	.word	0x080069cb
 80069a4:	080069db 	.word	0x080069db
 80069a8:	080069db 	.word	0x080069db
 80069ac:	080069db 	.word	0x080069db
 80069b0:	080069d3 	.word	0x080069d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069b4:	f7fc f916 	bl	8002be4 <HAL_RCC_GetPCLK1Freq>
 80069b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80069ba:	e014      	b.n	80069e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069bc:	f7fc f928 	bl	8002c10 <HAL_RCC_GetPCLK2Freq>
 80069c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80069c2:	e010      	b.n	80069e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069c4:	4b4e      	ldr	r3, [pc, #312]	@ (8006b00 <UART_SetConfig+0x5c0>)
 80069c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80069c8:	e00d      	b.n	80069e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069ca:	f7fc f89d 	bl	8002b08 <HAL_RCC_GetSysClockFreq>
 80069ce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80069d0:	e009      	b.n	80069e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80069d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80069d8:	e005      	b.n	80069e6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80069da:	2300      	movs	r3, #0
 80069dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80069e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80069e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	f000 8090 	beq.w	8006b0e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069f2:	4a44      	ldr	r2, [pc, #272]	@ (8006b04 <UART_SetConfig+0x5c4>)
 80069f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069f8:	461a      	mov	r2, r3
 80069fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a00:	005a      	lsls	r2, r3, #1
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	085b      	lsrs	r3, r3, #1
 8006a08:	441a      	add	r2, r3
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a12:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a14:	6a3b      	ldr	r3, [r7, #32]
 8006a16:	2b0f      	cmp	r3, #15
 8006a18:	d916      	bls.n	8006a48 <UART_SetConfig+0x508>
 8006a1a:	6a3b      	ldr	r3, [r7, #32]
 8006a1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a20:	d212      	bcs.n	8006a48 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a22:	6a3b      	ldr	r3, [r7, #32]
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	f023 030f 	bic.w	r3, r3, #15
 8006a2a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a2c:	6a3b      	ldr	r3, [r7, #32]
 8006a2e:	085b      	lsrs	r3, r3, #1
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	f003 0307 	and.w	r3, r3, #7
 8006a36:	b29a      	uxth	r2, r3
 8006a38:	8bfb      	ldrh	r3, [r7, #30]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	8bfa      	ldrh	r2, [r7, #30]
 8006a44:	60da      	str	r2, [r3, #12]
 8006a46:	e062      	b.n	8006b0e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006a4e:	e05e      	b.n	8006b0e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a50:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006a54:	2b08      	cmp	r3, #8
 8006a56:	d828      	bhi.n	8006aaa <UART_SetConfig+0x56a>
 8006a58:	a201      	add	r2, pc, #4	@ (adr r2, 8006a60 <UART_SetConfig+0x520>)
 8006a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a5e:	bf00      	nop
 8006a60:	08006a85 	.word	0x08006a85
 8006a64:	08006a8d 	.word	0x08006a8d
 8006a68:	08006a95 	.word	0x08006a95
 8006a6c:	08006aab 	.word	0x08006aab
 8006a70:	08006a9b 	.word	0x08006a9b
 8006a74:	08006aab 	.word	0x08006aab
 8006a78:	08006aab 	.word	0x08006aab
 8006a7c:	08006aab 	.word	0x08006aab
 8006a80:	08006aa3 	.word	0x08006aa3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a84:	f7fc f8ae 	bl	8002be4 <HAL_RCC_GetPCLK1Freq>
 8006a88:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a8a:	e014      	b.n	8006ab6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a8c:	f7fc f8c0 	bl	8002c10 <HAL_RCC_GetPCLK2Freq>
 8006a90:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a92:	e010      	b.n	8006ab6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a94:	4b1a      	ldr	r3, [pc, #104]	@ (8006b00 <UART_SetConfig+0x5c0>)
 8006a96:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006a98:	e00d      	b.n	8006ab6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a9a:	f7fc f835 	bl	8002b08 <HAL_RCC_GetSysClockFreq>
 8006a9e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006aa0:	e009      	b.n	8006ab6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006aa2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006aa6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006aa8:	e005      	b.n	8006ab6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006ab4:	bf00      	nop
    }

    if (pclk != 0U)
 8006ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d028      	beq.n	8006b0e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ac0:	4a10      	ldr	r2, [pc, #64]	@ (8006b04 <UART_SetConfig+0x5c4>)
 8006ac2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aca:	fbb3 f2f2 	udiv	r2, r3, r2
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	085b      	lsrs	r3, r3, #1
 8006ad4:	441a      	add	r2, r3
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ade:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ae0:	6a3b      	ldr	r3, [r7, #32]
 8006ae2:	2b0f      	cmp	r3, #15
 8006ae4:	d910      	bls.n	8006b08 <UART_SetConfig+0x5c8>
 8006ae6:	6a3b      	ldr	r3, [r7, #32]
 8006ae8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006aec:	d20c      	bcs.n	8006b08 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006aee:	6a3b      	ldr	r3, [r7, #32]
 8006af0:	b29a      	uxth	r2, r3
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	60da      	str	r2, [r3, #12]
 8006af8:	e009      	b.n	8006b0e <UART_SetConfig+0x5ce>
 8006afa:	bf00      	nop
 8006afc:	40008000 	.word	0x40008000
 8006b00:	00f42400 	.word	0x00f42400
 8006b04:	08007fb0 	.word	0x08007fb0
      }
      else
      {
        ret = HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	2201      	movs	r2, #1
 8006b12:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	2201      	movs	r2, #1
 8006b1a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	2200      	movs	r2, #0
 8006b22:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	2200      	movs	r2, #0
 8006b28:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006b2a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3730      	adds	r7, #48	@ 0x30
 8006b32:	46bd      	mov	sp, r7
 8006b34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006b38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b44:	f003 0308 	and.w	r3, r3, #8
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00a      	beq.n	8006b62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	430a      	orrs	r2, r1
 8006b60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b66:	f003 0301 	and.w	r3, r3, #1
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00a      	beq.n	8006b84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	430a      	orrs	r2, r1
 8006b82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b88:	f003 0302 	and.w	r3, r3, #2
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d00a      	beq.n	8006ba6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	430a      	orrs	r2, r1
 8006ba4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006baa:	f003 0304 	and.w	r3, r3, #4
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d00a      	beq.n	8006bc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	430a      	orrs	r2, r1
 8006bc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bcc:	f003 0310 	and.w	r3, r3, #16
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00a      	beq.n	8006bea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	430a      	orrs	r2, r1
 8006be8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bee:	f003 0320 	and.w	r3, r3, #32
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d00a      	beq.n	8006c0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	430a      	orrs	r2, r1
 8006c0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d01a      	beq.n	8006c4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	430a      	orrs	r2, r1
 8006c2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c36:	d10a      	bne.n	8006c4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	430a      	orrs	r2, r1
 8006c4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d00a      	beq.n	8006c70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	430a      	orrs	r2, r1
 8006c6e:	605a      	str	r2, [r3, #4]
  }
}
 8006c70:	bf00      	nop
 8006c72:	370c      	adds	r7, #12
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b098      	sub	sp, #96	@ 0x60
 8006c80:	af02      	add	r7, sp, #8
 8006c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c8c:	f7fa fe8a 	bl	80019a4 <HAL_GetTick>
 8006c90:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f003 0308 	and.w	r3, r3, #8
 8006c9c:	2b08      	cmp	r3, #8
 8006c9e:	d12f      	bne.n	8006d00 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ca0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ca4:	9300      	str	r3, [sp, #0]
 8006ca6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 f88e 	bl	8006dd0 <UART_WaitOnFlagUntilTimeout>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d022      	beq.n	8006d00 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cc2:	e853 3f00 	ldrex	r3, [r3]
 8006cc6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006cc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006cce:	653b      	str	r3, [r7, #80]	@ 0x50
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006cd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cda:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cdc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006cde:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ce0:	e841 2300 	strex	r3, r2, [r1]
 8006ce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ce6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d1e6      	bne.n	8006cba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2220      	movs	r2, #32
 8006cf0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cfc:	2303      	movs	r3, #3
 8006cfe:	e063      	b.n	8006dc8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f003 0304 	and.w	r3, r3, #4
 8006d0a:	2b04      	cmp	r3, #4
 8006d0c:	d149      	bne.n	8006da2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d0e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006d12:	9300      	str	r3, [sp, #0]
 8006d14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d16:	2200      	movs	r2, #0
 8006d18:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 f857 	bl	8006dd0 <UART_WaitOnFlagUntilTimeout>
 8006d22:	4603      	mov	r3, r0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d03c      	beq.n	8006da2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d30:	e853 3f00 	ldrex	r3, [r3]
 8006d34:	623b      	str	r3, [r7, #32]
   return(result);
 8006d36:	6a3b      	ldr	r3, [r7, #32]
 8006d38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	461a      	mov	r2, r3
 8006d44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d46:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d48:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d4e:	e841 2300 	strex	r3, r2, [r1]
 8006d52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d1e6      	bne.n	8006d28 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	3308      	adds	r3, #8
 8006d60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	e853 3f00 	ldrex	r3, [r3]
 8006d68:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f023 0301 	bic.w	r3, r3, #1
 8006d70:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	3308      	adds	r3, #8
 8006d78:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d7a:	61fa      	str	r2, [r7, #28]
 8006d7c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7e:	69b9      	ldr	r1, [r7, #24]
 8006d80:	69fa      	ldr	r2, [r7, #28]
 8006d82:	e841 2300 	strex	r3, r2, [r1]
 8006d86:	617b      	str	r3, [r7, #20]
   return(result);
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d1e5      	bne.n	8006d5a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2220      	movs	r2, #32
 8006d92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d9e:	2303      	movs	r3, #3
 8006da0:	e012      	b.n	8006dc8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2220      	movs	r2, #32
 8006da6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2220      	movs	r2, #32
 8006dae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006dc6:	2300      	movs	r3, #0
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3758      	adds	r7, #88	@ 0x58
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	60f8      	str	r0, [r7, #12]
 8006dd8:	60b9      	str	r1, [r7, #8]
 8006dda:	603b      	str	r3, [r7, #0]
 8006ddc:	4613      	mov	r3, r2
 8006dde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006de0:	e04f      	b.n	8006e82 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006de2:	69bb      	ldr	r3, [r7, #24]
 8006de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006de8:	d04b      	beq.n	8006e82 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dea:	f7fa fddb 	bl	80019a4 <HAL_GetTick>
 8006dee:	4602      	mov	r2, r0
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	1ad3      	subs	r3, r2, r3
 8006df4:	69ba      	ldr	r2, [r7, #24]
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d302      	bcc.n	8006e00 <UART_WaitOnFlagUntilTimeout+0x30>
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d101      	bne.n	8006e04 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006e00:	2303      	movs	r3, #3
 8006e02:	e04e      	b.n	8006ea2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f003 0304 	and.w	r3, r3, #4
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d037      	beq.n	8006e82 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	2b80      	cmp	r3, #128	@ 0x80
 8006e16:	d034      	beq.n	8006e82 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	2b40      	cmp	r3, #64	@ 0x40
 8006e1c:	d031      	beq.n	8006e82 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	69db      	ldr	r3, [r3, #28]
 8006e24:	f003 0308 	and.w	r3, r3, #8
 8006e28:	2b08      	cmp	r3, #8
 8006e2a:	d110      	bne.n	8006e4e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2208      	movs	r2, #8
 8006e32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e34:	68f8      	ldr	r0, [r7, #12]
 8006e36:	f000 f838 	bl	8006eaa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2208      	movs	r2, #8
 8006e3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e029      	b.n	8006ea2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	69db      	ldr	r3, [r3, #28]
 8006e54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e5c:	d111      	bne.n	8006e82 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006e66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e68:	68f8      	ldr	r0, [r7, #12]
 8006e6a:	f000 f81e 	bl	8006eaa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2220      	movs	r2, #32
 8006e72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	e00f      	b.n	8006ea2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	69da      	ldr	r2, [r3, #28]
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	4013      	ands	r3, r2
 8006e8c:	68ba      	ldr	r2, [r7, #8]
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	bf0c      	ite	eq
 8006e92:	2301      	moveq	r3, #1
 8006e94:	2300      	movne	r3, #0
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	461a      	mov	r2, r3
 8006e9a:	79fb      	ldrb	r3, [r7, #7]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d0a0      	beq.n	8006de2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3710      	adds	r7, #16
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}

08006eaa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006eaa:	b480      	push	{r7}
 8006eac:	b095      	sub	sp, #84	@ 0x54
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eba:	e853 3f00 	ldrex	r3, [r3]
 8006ebe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ec6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	461a      	mov	r2, r3
 8006ece:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ed0:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ed2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006ed6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006ed8:	e841 2300 	strex	r3, r2, [r1]
 8006edc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d1e6      	bne.n	8006eb2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	3308      	adds	r3, #8
 8006eea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eec:	6a3b      	ldr	r3, [r7, #32]
 8006eee:	e853 3f00 	ldrex	r3, [r3]
 8006ef2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006efa:	f023 0301 	bic.w	r3, r3, #1
 8006efe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	3308      	adds	r3, #8
 8006f06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f08:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f10:	e841 2300 	strex	r3, r2, [r1]
 8006f14:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d1e3      	bne.n	8006ee4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d118      	bne.n	8006f56 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	e853 3f00 	ldrex	r3, [r3]
 8006f30:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	f023 0310 	bic.w	r3, r3, #16
 8006f38:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	461a      	mov	r2, r3
 8006f40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f42:	61bb      	str	r3, [r7, #24]
 8006f44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f46:	6979      	ldr	r1, [r7, #20]
 8006f48:	69ba      	ldr	r2, [r7, #24]
 8006f4a:	e841 2300 	strex	r3, r2, [r1]
 8006f4e:	613b      	str	r3, [r7, #16]
   return(result);
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d1e6      	bne.n	8006f24 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2220      	movs	r2, #32
 8006f5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006f6a:	bf00      	nop
 8006f6c:	3754      	adds	r7, #84	@ 0x54
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr

08006f76 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f76:	b580      	push	{r7, lr}
 8006f78:	b084      	sub	sp, #16
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2200      	movs	r2, #0
 8006f88:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f94:	68f8      	ldr	r0, [r7, #12]
 8006f96:	f7ff fabd 	bl	8006514 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f9a:	bf00      	nop
 8006f9c:	3710      	adds	r7, #16
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}

08006fa2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b088      	sub	sp, #32
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	e853 3f00 	ldrex	r3, [r3]
 8006fb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fbe:	61fb      	str	r3, [r7, #28]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	69fb      	ldr	r3, [r7, #28]
 8006fc8:	61bb      	str	r3, [r7, #24]
 8006fca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fcc:	6979      	ldr	r1, [r7, #20]
 8006fce:	69ba      	ldr	r2, [r7, #24]
 8006fd0:	e841 2300 	strex	r3, r2, [r1]
 8006fd4:	613b      	str	r3, [r7, #16]
   return(result);
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d1e6      	bne.n	8006faa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2220      	movs	r2, #32
 8006fe0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f7ff fa88 	bl	8006500 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ff0:	bf00      	nop
 8006ff2:	3720      	adds	r7, #32
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b083      	sub	sp, #12
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007000:	bf00      	nop
 8007002:	370c      	adds	r7, #12
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr

0800700c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007014:	bf00      	nop
 8007016:	370c      	adds	r7, #12
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007028:	bf00      	nop
 800702a:	370c      	adds	r7, #12
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007034:	b480      	push	{r7}
 8007036:	b085      	sub	sp, #20
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007042:	2b01      	cmp	r3, #1
 8007044:	d101      	bne.n	800704a <HAL_UARTEx_DisableFifoMode+0x16>
 8007046:	2302      	movs	r3, #2
 8007048:	e027      	b.n	800709a <HAL_UARTEx_DisableFifoMode+0x66>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2201      	movs	r2, #1
 800704e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2224      	movs	r2, #36	@ 0x24
 8007056:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f022 0201 	bic.w	r2, r2, #1
 8007070:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007078:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	68fa      	ldr	r2, [r7, #12]
 8007086:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2220      	movs	r2, #32
 800708c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007098:	2300      	movs	r3, #0
}
 800709a:	4618      	mov	r0, r3
 800709c:	3714      	adds	r7, #20
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr

080070a6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80070a6:	b580      	push	{r7, lr}
 80070a8:	b084      	sub	sp, #16
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
 80070ae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d101      	bne.n	80070be <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80070ba:	2302      	movs	r3, #2
 80070bc:	e02d      	b.n	800711a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2201      	movs	r2, #1
 80070c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2224      	movs	r2, #36	@ 0x24
 80070ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f022 0201 	bic.w	r2, r2, #1
 80070e4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	683a      	ldr	r2, [r7, #0]
 80070f6:	430a      	orrs	r2, r1
 80070f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 f850 	bl	80071a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	68fa      	ldr	r2, [r7, #12]
 8007106:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2220      	movs	r2, #32
 800710c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007118:	2300      	movs	r3, #0
}
 800711a:	4618      	mov	r0, r3
 800711c:	3710      	adds	r7, #16
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007122:	b580      	push	{r7, lr}
 8007124:	b084      	sub	sp, #16
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
 800712a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007132:	2b01      	cmp	r3, #1
 8007134:	d101      	bne.n	800713a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007136:	2302      	movs	r3, #2
 8007138:	e02d      	b.n	8007196 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2201      	movs	r2, #1
 800713e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2224      	movs	r2, #36	@ 0x24
 8007146:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f022 0201 	bic.w	r2, r2, #1
 8007160:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	683a      	ldr	r2, [r7, #0]
 8007172:	430a      	orrs	r2, r1
 8007174:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 f812 	bl	80071a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	68fa      	ldr	r2, [r7, #12]
 8007182:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2220      	movs	r2, #32
 8007188:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007194:	2300      	movs	r3, #0
}
 8007196:	4618      	mov	r0, r3
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
	...

080071a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b085      	sub	sp, #20
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d108      	bne.n	80071c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2201      	movs	r2, #1
 80071b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2201      	movs	r2, #1
 80071bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80071c0:	e031      	b.n	8007226 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80071c2:	2308      	movs	r3, #8
 80071c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80071c6:	2308      	movs	r3, #8
 80071c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	0e5b      	lsrs	r3, r3, #25
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	f003 0307 	and.w	r3, r3, #7
 80071d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	0f5b      	lsrs	r3, r3, #29
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	f003 0307 	and.w	r3, r3, #7
 80071e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80071ea:	7bbb      	ldrb	r3, [r7, #14]
 80071ec:	7b3a      	ldrb	r2, [r7, #12]
 80071ee:	4911      	ldr	r1, [pc, #68]	@ (8007234 <UARTEx_SetNbDataToProcess+0x94>)
 80071f0:	5c8a      	ldrb	r2, [r1, r2]
 80071f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80071f6:	7b3a      	ldrb	r2, [r7, #12]
 80071f8:	490f      	ldr	r1, [pc, #60]	@ (8007238 <UARTEx_SetNbDataToProcess+0x98>)
 80071fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80071fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8007200:	b29a      	uxth	r2, r3
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007208:	7bfb      	ldrb	r3, [r7, #15]
 800720a:	7b7a      	ldrb	r2, [r7, #13]
 800720c:	4909      	ldr	r1, [pc, #36]	@ (8007234 <UARTEx_SetNbDataToProcess+0x94>)
 800720e:	5c8a      	ldrb	r2, [r1, r2]
 8007210:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007214:	7b7a      	ldrb	r2, [r7, #13]
 8007216:	4908      	ldr	r1, [pc, #32]	@ (8007238 <UARTEx_SetNbDataToProcess+0x98>)
 8007218:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800721a:	fb93 f3f2 	sdiv	r3, r3, r2
 800721e:	b29a      	uxth	r2, r3
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007226:	bf00      	nop
 8007228:	3714      	adds	r7, #20
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	08007fc8 	.word	0x08007fc8
 8007238:	08007fd0 	.word	0x08007fd0

0800723c <malloc>:
 800723c:	4b02      	ldr	r3, [pc, #8]	@ (8007248 <malloc+0xc>)
 800723e:	4601      	mov	r1, r0
 8007240:	6818      	ldr	r0, [r3, #0]
 8007242:	f000 b82d 	b.w	80072a0 <_malloc_r>
 8007246:	bf00      	nop
 8007248:	2000002c 	.word	0x2000002c

0800724c <free>:
 800724c:	4b02      	ldr	r3, [pc, #8]	@ (8007258 <free+0xc>)
 800724e:	4601      	mov	r1, r0
 8007250:	6818      	ldr	r0, [r3, #0]
 8007252:	f000 b935 	b.w	80074c0 <_free_r>
 8007256:	bf00      	nop
 8007258:	2000002c 	.word	0x2000002c

0800725c <sbrk_aligned>:
 800725c:	b570      	push	{r4, r5, r6, lr}
 800725e:	4e0f      	ldr	r6, [pc, #60]	@ (800729c <sbrk_aligned+0x40>)
 8007260:	460c      	mov	r4, r1
 8007262:	6831      	ldr	r1, [r6, #0]
 8007264:	4605      	mov	r5, r0
 8007266:	b911      	cbnz	r1, 800726e <sbrk_aligned+0x12>
 8007268:	f000 f8ee 	bl	8007448 <_sbrk_r>
 800726c:	6030      	str	r0, [r6, #0]
 800726e:	4621      	mov	r1, r4
 8007270:	4628      	mov	r0, r5
 8007272:	f000 f8e9 	bl	8007448 <_sbrk_r>
 8007276:	1c43      	adds	r3, r0, #1
 8007278:	d103      	bne.n	8007282 <sbrk_aligned+0x26>
 800727a:	f04f 34ff 	mov.w	r4, #4294967295
 800727e:	4620      	mov	r0, r4
 8007280:	bd70      	pop	{r4, r5, r6, pc}
 8007282:	1cc4      	adds	r4, r0, #3
 8007284:	f024 0403 	bic.w	r4, r4, #3
 8007288:	42a0      	cmp	r0, r4
 800728a:	d0f8      	beq.n	800727e <sbrk_aligned+0x22>
 800728c:	1a21      	subs	r1, r4, r0
 800728e:	4628      	mov	r0, r5
 8007290:	f000 f8da 	bl	8007448 <_sbrk_r>
 8007294:	3001      	adds	r0, #1
 8007296:	d1f2      	bne.n	800727e <sbrk_aligned+0x22>
 8007298:	e7ef      	b.n	800727a <sbrk_aligned+0x1e>
 800729a:	bf00      	nop
 800729c:	20000338 	.word	0x20000338

080072a0 <_malloc_r>:
 80072a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072a4:	1ccd      	adds	r5, r1, #3
 80072a6:	f025 0503 	bic.w	r5, r5, #3
 80072aa:	3508      	adds	r5, #8
 80072ac:	2d0c      	cmp	r5, #12
 80072ae:	bf38      	it	cc
 80072b0:	250c      	movcc	r5, #12
 80072b2:	2d00      	cmp	r5, #0
 80072b4:	4606      	mov	r6, r0
 80072b6:	db01      	blt.n	80072bc <_malloc_r+0x1c>
 80072b8:	42a9      	cmp	r1, r5
 80072ba:	d904      	bls.n	80072c6 <_malloc_r+0x26>
 80072bc:	230c      	movs	r3, #12
 80072be:	6033      	str	r3, [r6, #0]
 80072c0:	2000      	movs	r0, #0
 80072c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800739c <_malloc_r+0xfc>
 80072ca:	f000 f869 	bl	80073a0 <__malloc_lock>
 80072ce:	f8d8 3000 	ldr.w	r3, [r8]
 80072d2:	461c      	mov	r4, r3
 80072d4:	bb44      	cbnz	r4, 8007328 <_malloc_r+0x88>
 80072d6:	4629      	mov	r1, r5
 80072d8:	4630      	mov	r0, r6
 80072da:	f7ff ffbf 	bl	800725c <sbrk_aligned>
 80072de:	1c43      	adds	r3, r0, #1
 80072e0:	4604      	mov	r4, r0
 80072e2:	d158      	bne.n	8007396 <_malloc_r+0xf6>
 80072e4:	f8d8 4000 	ldr.w	r4, [r8]
 80072e8:	4627      	mov	r7, r4
 80072ea:	2f00      	cmp	r7, #0
 80072ec:	d143      	bne.n	8007376 <_malloc_r+0xd6>
 80072ee:	2c00      	cmp	r4, #0
 80072f0:	d04b      	beq.n	800738a <_malloc_r+0xea>
 80072f2:	6823      	ldr	r3, [r4, #0]
 80072f4:	4639      	mov	r1, r7
 80072f6:	4630      	mov	r0, r6
 80072f8:	eb04 0903 	add.w	r9, r4, r3
 80072fc:	f000 f8a4 	bl	8007448 <_sbrk_r>
 8007300:	4581      	cmp	r9, r0
 8007302:	d142      	bne.n	800738a <_malloc_r+0xea>
 8007304:	6821      	ldr	r1, [r4, #0]
 8007306:	1a6d      	subs	r5, r5, r1
 8007308:	4629      	mov	r1, r5
 800730a:	4630      	mov	r0, r6
 800730c:	f7ff ffa6 	bl	800725c <sbrk_aligned>
 8007310:	3001      	adds	r0, #1
 8007312:	d03a      	beq.n	800738a <_malloc_r+0xea>
 8007314:	6823      	ldr	r3, [r4, #0]
 8007316:	442b      	add	r3, r5
 8007318:	6023      	str	r3, [r4, #0]
 800731a:	f8d8 3000 	ldr.w	r3, [r8]
 800731e:	685a      	ldr	r2, [r3, #4]
 8007320:	bb62      	cbnz	r2, 800737c <_malloc_r+0xdc>
 8007322:	f8c8 7000 	str.w	r7, [r8]
 8007326:	e00f      	b.n	8007348 <_malloc_r+0xa8>
 8007328:	6822      	ldr	r2, [r4, #0]
 800732a:	1b52      	subs	r2, r2, r5
 800732c:	d420      	bmi.n	8007370 <_malloc_r+0xd0>
 800732e:	2a0b      	cmp	r2, #11
 8007330:	d917      	bls.n	8007362 <_malloc_r+0xc2>
 8007332:	1961      	adds	r1, r4, r5
 8007334:	42a3      	cmp	r3, r4
 8007336:	6025      	str	r5, [r4, #0]
 8007338:	bf18      	it	ne
 800733a:	6059      	strne	r1, [r3, #4]
 800733c:	6863      	ldr	r3, [r4, #4]
 800733e:	bf08      	it	eq
 8007340:	f8c8 1000 	streq.w	r1, [r8]
 8007344:	5162      	str	r2, [r4, r5]
 8007346:	604b      	str	r3, [r1, #4]
 8007348:	4630      	mov	r0, r6
 800734a:	f000 f82f 	bl	80073ac <__malloc_unlock>
 800734e:	f104 000b 	add.w	r0, r4, #11
 8007352:	1d23      	adds	r3, r4, #4
 8007354:	f020 0007 	bic.w	r0, r0, #7
 8007358:	1ac2      	subs	r2, r0, r3
 800735a:	bf1c      	itt	ne
 800735c:	1a1b      	subne	r3, r3, r0
 800735e:	50a3      	strne	r3, [r4, r2]
 8007360:	e7af      	b.n	80072c2 <_malloc_r+0x22>
 8007362:	6862      	ldr	r2, [r4, #4]
 8007364:	42a3      	cmp	r3, r4
 8007366:	bf0c      	ite	eq
 8007368:	f8c8 2000 	streq.w	r2, [r8]
 800736c:	605a      	strne	r2, [r3, #4]
 800736e:	e7eb      	b.n	8007348 <_malloc_r+0xa8>
 8007370:	4623      	mov	r3, r4
 8007372:	6864      	ldr	r4, [r4, #4]
 8007374:	e7ae      	b.n	80072d4 <_malloc_r+0x34>
 8007376:	463c      	mov	r4, r7
 8007378:	687f      	ldr	r7, [r7, #4]
 800737a:	e7b6      	b.n	80072ea <_malloc_r+0x4a>
 800737c:	461a      	mov	r2, r3
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	42a3      	cmp	r3, r4
 8007382:	d1fb      	bne.n	800737c <_malloc_r+0xdc>
 8007384:	2300      	movs	r3, #0
 8007386:	6053      	str	r3, [r2, #4]
 8007388:	e7de      	b.n	8007348 <_malloc_r+0xa8>
 800738a:	230c      	movs	r3, #12
 800738c:	6033      	str	r3, [r6, #0]
 800738e:	4630      	mov	r0, r6
 8007390:	f000 f80c 	bl	80073ac <__malloc_unlock>
 8007394:	e794      	b.n	80072c0 <_malloc_r+0x20>
 8007396:	6005      	str	r5, [r0, #0]
 8007398:	e7d6      	b.n	8007348 <_malloc_r+0xa8>
 800739a:	bf00      	nop
 800739c:	2000033c 	.word	0x2000033c

080073a0 <__malloc_lock>:
 80073a0:	4801      	ldr	r0, [pc, #4]	@ (80073a8 <__malloc_lock+0x8>)
 80073a2:	f000 b88b 	b.w	80074bc <__retarget_lock_acquire_recursive>
 80073a6:	bf00      	nop
 80073a8:	2000047c 	.word	0x2000047c

080073ac <__malloc_unlock>:
 80073ac:	4801      	ldr	r0, [pc, #4]	@ (80073b4 <__malloc_unlock+0x8>)
 80073ae:	f000 b886 	b.w	80074be <__retarget_lock_release_recursive>
 80073b2:	bf00      	nop
 80073b4:	2000047c 	.word	0x2000047c

080073b8 <siscanf>:
 80073b8:	b40e      	push	{r1, r2, r3}
 80073ba:	b530      	push	{r4, r5, lr}
 80073bc:	b09c      	sub	sp, #112	@ 0x70
 80073be:	ac1f      	add	r4, sp, #124	@ 0x7c
 80073c0:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80073c4:	f854 5b04 	ldr.w	r5, [r4], #4
 80073c8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80073cc:	9002      	str	r0, [sp, #8]
 80073ce:	9006      	str	r0, [sp, #24]
 80073d0:	f7f8 ff30 	bl	8000234 <strlen>
 80073d4:	4b0b      	ldr	r3, [pc, #44]	@ (8007404 <siscanf+0x4c>)
 80073d6:	9003      	str	r0, [sp, #12]
 80073d8:	9007      	str	r0, [sp, #28]
 80073da:	930b      	str	r3, [sp, #44]	@ 0x2c
 80073dc:	480a      	ldr	r0, [pc, #40]	@ (8007408 <siscanf+0x50>)
 80073de:	9401      	str	r4, [sp, #4]
 80073e0:	2300      	movs	r3, #0
 80073e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80073e4:	9314      	str	r3, [sp, #80]	@ 0x50
 80073e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80073ea:	f8ad 3016 	strh.w	r3, [sp, #22]
 80073ee:	462a      	mov	r2, r5
 80073f0:	4623      	mov	r3, r4
 80073f2:	a902      	add	r1, sp, #8
 80073f4:	6800      	ldr	r0, [r0, #0]
 80073f6:	f000 f905 	bl	8007604 <__ssvfiscanf_r>
 80073fa:	b01c      	add	sp, #112	@ 0x70
 80073fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007400:	b003      	add	sp, #12
 8007402:	4770      	bx	lr
 8007404:	0800740d 	.word	0x0800740d
 8007408:	2000002c 	.word	0x2000002c

0800740c <__seofread>:
 800740c:	2000      	movs	r0, #0
 800740e:	4770      	bx	lr

08007410 <memset>:
 8007410:	4402      	add	r2, r0
 8007412:	4603      	mov	r3, r0
 8007414:	4293      	cmp	r3, r2
 8007416:	d100      	bne.n	800741a <memset+0xa>
 8007418:	4770      	bx	lr
 800741a:	f803 1b01 	strb.w	r1, [r3], #1
 800741e:	e7f9      	b.n	8007414 <memset+0x4>

08007420 <strncpy>:
 8007420:	b510      	push	{r4, lr}
 8007422:	3901      	subs	r1, #1
 8007424:	4603      	mov	r3, r0
 8007426:	b132      	cbz	r2, 8007436 <strncpy+0x16>
 8007428:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800742c:	f803 4b01 	strb.w	r4, [r3], #1
 8007430:	3a01      	subs	r2, #1
 8007432:	2c00      	cmp	r4, #0
 8007434:	d1f7      	bne.n	8007426 <strncpy+0x6>
 8007436:	441a      	add	r2, r3
 8007438:	2100      	movs	r1, #0
 800743a:	4293      	cmp	r3, r2
 800743c:	d100      	bne.n	8007440 <strncpy+0x20>
 800743e:	bd10      	pop	{r4, pc}
 8007440:	f803 1b01 	strb.w	r1, [r3], #1
 8007444:	e7f9      	b.n	800743a <strncpy+0x1a>
	...

08007448 <_sbrk_r>:
 8007448:	b538      	push	{r3, r4, r5, lr}
 800744a:	4d06      	ldr	r5, [pc, #24]	@ (8007464 <_sbrk_r+0x1c>)
 800744c:	2300      	movs	r3, #0
 800744e:	4604      	mov	r4, r0
 8007450:	4608      	mov	r0, r1
 8007452:	602b      	str	r3, [r5, #0]
 8007454:	f7fa f9d0 	bl	80017f8 <_sbrk>
 8007458:	1c43      	adds	r3, r0, #1
 800745a:	d102      	bne.n	8007462 <_sbrk_r+0x1a>
 800745c:	682b      	ldr	r3, [r5, #0]
 800745e:	b103      	cbz	r3, 8007462 <_sbrk_r+0x1a>
 8007460:	6023      	str	r3, [r4, #0]
 8007462:	bd38      	pop	{r3, r4, r5, pc}
 8007464:	20000478 	.word	0x20000478

08007468 <__errno>:
 8007468:	4b01      	ldr	r3, [pc, #4]	@ (8007470 <__errno+0x8>)
 800746a:	6818      	ldr	r0, [r3, #0]
 800746c:	4770      	bx	lr
 800746e:	bf00      	nop
 8007470:	2000002c 	.word	0x2000002c

08007474 <__libc_init_array>:
 8007474:	b570      	push	{r4, r5, r6, lr}
 8007476:	4d0d      	ldr	r5, [pc, #52]	@ (80074ac <__libc_init_array+0x38>)
 8007478:	4c0d      	ldr	r4, [pc, #52]	@ (80074b0 <__libc_init_array+0x3c>)
 800747a:	1b64      	subs	r4, r4, r5
 800747c:	10a4      	asrs	r4, r4, #2
 800747e:	2600      	movs	r6, #0
 8007480:	42a6      	cmp	r6, r4
 8007482:	d109      	bne.n	8007498 <__libc_init_array+0x24>
 8007484:	4d0b      	ldr	r5, [pc, #44]	@ (80074b4 <__libc_init_array+0x40>)
 8007486:	4c0c      	ldr	r4, [pc, #48]	@ (80074b8 <__libc_init_array+0x44>)
 8007488:	f000 fd22 	bl	8007ed0 <_init>
 800748c:	1b64      	subs	r4, r4, r5
 800748e:	10a4      	asrs	r4, r4, #2
 8007490:	2600      	movs	r6, #0
 8007492:	42a6      	cmp	r6, r4
 8007494:	d105      	bne.n	80074a2 <__libc_init_array+0x2e>
 8007496:	bd70      	pop	{r4, r5, r6, pc}
 8007498:	f855 3b04 	ldr.w	r3, [r5], #4
 800749c:	4798      	blx	r3
 800749e:	3601      	adds	r6, #1
 80074a0:	e7ee      	b.n	8007480 <__libc_init_array+0xc>
 80074a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80074a6:	4798      	blx	r3
 80074a8:	3601      	adds	r6, #1
 80074aa:	e7f2      	b.n	8007492 <__libc_init_array+0x1e>
 80074ac:	08008100 	.word	0x08008100
 80074b0:	08008100 	.word	0x08008100
 80074b4:	08008100 	.word	0x08008100
 80074b8:	08008104 	.word	0x08008104

080074bc <__retarget_lock_acquire_recursive>:
 80074bc:	4770      	bx	lr

080074be <__retarget_lock_release_recursive>:
 80074be:	4770      	bx	lr

080074c0 <_free_r>:
 80074c0:	b538      	push	{r3, r4, r5, lr}
 80074c2:	4605      	mov	r5, r0
 80074c4:	2900      	cmp	r1, #0
 80074c6:	d041      	beq.n	800754c <_free_r+0x8c>
 80074c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074cc:	1f0c      	subs	r4, r1, #4
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	bfb8      	it	lt
 80074d2:	18e4      	addlt	r4, r4, r3
 80074d4:	f7ff ff64 	bl	80073a0 <__malloc_lock>
 80074d8:	4a1d      	ldr	r2, [pc, #116]	@ (8007550 <_free_r+0x90>)
 80074da:	6813      	ldr	r3, [r2, #0]
 80074dc:	b933      	cbnz	r3, 80074ec <_free_r+0x2c>
 80074de:	6063      	str	r3, [r4, #4]
 80074e0:	6014      	str	r4, [r2, #0]
 80074e2:	4628      	mov	r0, r5
 80074e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074e8:	f7ff bf60 	b.w	80073ac <__malloc_unlock>
 80074ec:	42a3      	cmp	r3, r4
 80074ee:	d908      	bls.n	8007502 <_free_r+0x42>
 80074f0:	6820      	ldr	r0, [r4, #0]
 80074f2:	1821      	adds	r1, r4, r0
 80074f4:	428b      	cmp	r3, r1
 80074f6:	bf01      	itttt	eq
 80074f8:	6819      	ldreq	r1, [r3, #0]
 80074fa:	685b      	ldreq	r3, [r3, #4]
 80074fc:	1809      	addeq	r1, r1, r0
 80074fe:	6021      	streq	r1, [r4, #0]
 8007500:	e7ed      	b.n	80074de <_free_r+0x1e>
 8007502:	461a      	mov	r2, r3
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	b10b      	cbz	r3, 800750c <_free_r+0x4c>
 8007508:	42a3      	cmp	r3, r4
 800750a:	d9fa      	bls.n	8007502 <_free_r+0x42>
 800750c:	6811      	ldr	r1, [r2, #0]
 800750e:	1850      	adds	r0, r2, r1
 8007510:	42a0      	cmp	r0, r4
 8007512:	d10b      	bne.n	800752c <_free_r+0x6c>
 8007514:	6820      	ldr	r0, [r4, #0]
 8007516:	4401      	add	r1, r0
 8007518:	1850      	adds	r0, r2, r1
 800751a:	4283      	cmp	r3, r0
 800751c:	6011      	str	r1, [r2, #0]
 800751e:	d1e0      	bne.n	80074e2 <_free_r+0x22>
 8007520:	6818      	ldr	r0, [r3, #0]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	6053      	str	r3, [r2, #4]
 8007526:	4408      	add	r0, r1
 8007528:	6010      	str	r0, [r2, #0]
 800752a:	e7da      	b.n	80074e2 <_free_r+0x22>
 800752c:	d902      	bls.n	8007534 <_free_r+0x74>
 800752e:	230c      	movs	r3, #12
 8007530:	602b      	str	r3, [r5, #0]
 8007532:	e7d6      	b.n	80074e2 <_free_r+0x22>
 8007534:	6820      	ldr	r0, [r4, #0]
 8007536:	1821      	adds	r1, r4, r0
 8007538:	428b      	cmp	r3, r1
 800753a:	bf04      	itt	eq
 800753c:	6819      	ldreq	r1, [r3, #0]
 800753e:	685b      	ldreq	r3, [r3, #4]
 8007540:	6063      	str	r3, [r4, #4]
 8007542:	bf04      	itt	eq
 8007544:	1809      	addeq	r1, r1, r0
 8007546:	6021      	streq	r1, [r4, #0]
 8007548:	6054      	str	r4, [r2, #4]
 800754a:	e7ca      	b.n	80074e2 <_free_r+0x22>
 800754c:	bd38      	pop	{r3, r4, r5, pc}
 800754e:	bf00      	nop
 8007550:	2000033c 	.word	0x2000033c

08007554 <_sungetc_r>:
 8007554:	b538      	push	{r3, r4, r5, lr}
 8007556:	1c4b      	adds	r3, r1, #1
 8007558:	4614      	mov	r4, r2
 800755a:	d103      	bne.n	8007564 <_sungetc_r+0x10>
 800755c:	f04f 35ff 	mov.w	r5, #4294967295
 8007560:	4628      	mov	r0, r5
 8007562:	bd38      	pop	{r3, r4, r5, pc}
 8007564:	8993      	ldrh	r3, [r2, #12]
 8007566:	f023 0320 	bic.w	r3, r3, #32
 800756a:	8193      	strh	r3, [r2, #12]
 800756c:	6853      	ldr	r3, [r2, #4]
 800756e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007570:	b2cd      	uxtb	r5, r1
 8007572:	b18a      	cbz	r2, 8007598 <_sungetc_r+0x44>
 8007574:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007576:	429a      	cmp	r2, r3
 8007578:	dd08      	ble.n	800758c <_sungetc_r+0x38>
 800757a:	6823      	ldr	r3, [r4, #0]
 800757c:	1e5a      	subs	r2, r3, #1
 800757e:	6022      	str	r2, [r4, #0]
 8007580:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007584:	6863      	ldr	r3, [r4, #4]
 8007586:	3301      	adds	r3, #1
 8007588:	6063      	str	r3, [r4, #4]
 800758a:	e7e9      	b.n	8007560 <_sungetc_r+0xc>
 800758c:	4621      	mov	r1, r4
 800758e:	f000 fb34 	bl	8007bfa <__submore>
 8007592:	2800      	cmp	r0, #0
 8007594:	d0f1      	beq.n	800757a <_sungetc_r+0x26>
 8007596:	e7e1      	b.n	800755c <_sungetc_r+0x8>
 8007598:	6921      	ldr	r1, [r4, #16]
 800759a:	6822      	ldr	r2, [r4, #0]
 800759c:	b141      	cbz	r1, 80075b0 <_sungetc_r+0x5c>
 800759e:	4291      	cmp	r1, r2
 80075a0:	d206      	bcs.n	80075b0 <_sungetc_r+0x5c>
 80075a2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80075a6:	42a9      	cmp	r1, r5
 80075a8:	d102      	bne.n	80075b0 <_sungetc_r+0x5c>
 80075aa:	3a01      	subs	r2, #1
 80075ac:	6022      	str	r2, [r4, #0]
 80075ae:	e7ea      	b.n	8007586 <_sungetc_r+0x32>
 80075b0:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 80075b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80075b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80075ba:	2303      	movs	r3, #3
 80075bc:	63a3      	str	r3, [r4, #56]	@ 0x38
 80075be:	4623      	mov	r3, r4
 80075c0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80075c4:	6023      	str	r3, [r4, #0]
 80075c6:	2301      	movs	r3, #1
 80075c8:	e7de      	b.n	8007588 <_sungetc_r+0x34>

080075ca <__ssrefill_r>:
 80075ca:	b510      	push	{r4, lr}
 80075cc:	460c      	mov	r4, r1
 80075ce:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80075d0:	b169      	cbz	r1, 80075ee <__ssrefill_r+0x24>
 80075d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80075d6:	4299      	cmp	r1, r3
 80075d8:	d001      	beq.n	80075de <__ssrefill_r+0x14>
 80075da:	f7ff ff71 	bl	80074c0 <_free_r>
 80075de:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80075e0:	6063      	str	r3, [r4, #4]
 80075e2:	2000      	movs	r0, #0
 80075e4:	6360      	str	r0, [r4, #52]	@ 0x34
 80075e6:	b113      	cbz	r3, 80075ee <__ssrefill_r+0x24>
 80075e8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80075ea:	6023      	str	r3, [r4, #0]
 80075ec:	bd10      	pop	{r4, pc}
 80075ee:	6923      	ldr	r3, [r4, #16]
 80075f0:	6023      	str	r3, [r4, #0]
 80075f2:	2300      	movs	r3, #0
 80075f4:	6063      	str	r3, [r4, #4]
 80075f6:	89a3      	ldrh	r3, [r4, #12]
 80075f8:	f043 0320 	orr.w	r3, r3, #32
 80075fc:	81a3      	strh	r3, [r4, #12]
 80075fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007602:	e7f3      	b.n	80075ec <__ssrefill_r+0x22>

08007604 <__ssvfiscanf_r>:
 8007604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007608:	460c      	mov	r4, r1
 800760a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800760e:	2100      	movs	r1, #0
 8007610:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8007614:	49a5      	ldr	r1, [pc, #660]	@ (80078ac <__ssvfiscanf_r+0x2a8>)
 8007616:	91a0      	str	r1, [sp, #640]	@ 0x280
 8007618:	f10d 0804 	add.w	r8, sp, #4
 800761c:	49a4      	ldr	r1, [pc, #656]	@ (80078b0 <__ssvfiscanf_r+0x2ac>)
 800761e:	4fa5      	ldr	r7, [pc, #660]	@ (80078b4 <__ssvfiscanf_r+0x2b0>)
 8007620:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8007624:	4606      	mov	r6, r0
 8007626:	91a1      	str	r1, [sp, #644]	@ 0x284
 8007628:	9300      	str	r3, [sp, #0]
 800762a:	7813      	ldrb	r3, [r2, #0]
 800762c:	2b00      	cmp	r3, #0
 800762e:	f000 8158 	beq.w	80078e2 <__ssvfiscanf_r+0x2de>
 8007632:	5cf9      	ldrb	r1, [r7, r3]
 8007634:	f011 0108 	ands.w	r1, r1, #8
 8007638:	f102 0501 	add.w	r5, r2, #1
 800763c:	d019      	beq.n	8007672 <__ssvfiscanf_r+0x6e>
 800763e:	6863      	ldr	r3, [r4, #4]
 8007640:	2b00      	cmp	r3, #0
 8007642:	dd0f      	ble.n	8007664 <__ssvfiscanf_r+0x60>
 8007644:	6823      	ldr	r3, [r4, #0]
 8007646:	781a      	ldrb	r2, [r3, #0]
 8007648:	5cba      	ldrb	r2, [r7, r2]
 800764a:	0712      	lsls	r2, r2, #28
 800764c:	d401      	bmi.n	8007652 <__ssvfiscanf_r+0x4e>
 800764e:	462a      	mov	r2, r5
 8007650:	e7eb      	b.n	800762a <__ssvfiscanf_r+0x26>
 8007652:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8007654:	3201      	adds	r2, #1
 8007656:	9245      	str	r2, [sp, #276]	@ 0x114
 8007658:	6862      	ldr	r2, [r4, #4]
 800765a:	3301      	adds	r3, #1
 800765c:	3a01      	subs	r2, #1
 800765e:	6062      	str	r2, [r4, #4]
 8007660:	6023      	str	r3, [r4, #0]
 8007662:	e7ec      	b.n	800763e <__ssvfiscanf_r+0x3a>
 8007664:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007666:	4621      	mov	r1, r4
 8007668:	4630      	mov	r0, r6
 800766a:	4798      	blx	r3
 800766c:	2800      	cmp	r0, #0
 800766e:	d0e9      	beq.n	8007644 <__ssvfiscanf_r+0x40>
 8007670:	e7ed      	b.n	800764e <__ssvfiscanf_r+0x4a>
 8007672:	2b25      	cmp	r3, #37	@ 0x25
 8007674:	d012      	beq.n	800769c <__ssvfiscanf_r+0x98>
 8007676:	4699      	mov	r9, r3
 8007678:	6863      	ldr	r3, [r4, #4]
 800767a:	2b00      	cmp	r3, #0
 800767c:	f340 8093 	ble.w	80077a6 <__ssvfiscanf_r+0x1a2>
 8007680:	6822      	ldr	r2, [r4, #0]
 8007682:	7813      	ldrb	r3, [r2, #0]
 8007684:	454b      	cmp	r3, r9
 8007686:	f040 812c 	bne.w	80078e2 <__ssvfiscanf_r+0x2de>
 800768a:	6863      	ldr	r3, [r4, #4]
 800768c:	3b01      	subs	r3, #1
 800768e:	6063      	str	r3, [r4, #4]
 8007690:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8007692:	3201      	adds	r2, #1
 8007694:	3301      	adds	r3, #1
 8007696:	6022      	str	r2, [r4, #0]
 8007698:	9345      	str	r3, [sp, #276]	@ 0x114
 800769a:	e7d8      	b.n	800764e <__ssvfiscanf_r+0x4a>
 800769c:	9141      	str	r1, [sp, #260]	@ 0x104
 800769e:	9143      	str	r1, [sp, #268]	@ 0x10c
 80076a0:	7853      	ldrb	r3, [r2, #1]
 80076a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80076a4:	bf02      	ittt	eq
 80076a6:	2310      	moveq	r3, #16
 80076a8:	1c95      	addeq	r5, r2, #2
 80076aa:	9341      	streq	r3, [sp, #260]	@ 0x104
 80076ac:	220a      	movs	r2, #10
 80076ae:	46a9      	mov	r9, r5
 80076b0:	f819 1b01 	ldrb.w	r1, [r9], #1
 80076b4:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80076b8:	2b09      	cmp	r3, #9
 80076ba:	d91e      	bls.n	80076fa <__ssvfiscanf_r+0xf6>
 80076bc:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 80078b8 <__ssvfiscanf_r+0x2b4>
 80076c0:	2203      	movs	r2, #3
 80076c2:	4650      	mov	r0, sl
 80076c4:	f7f8 fdc4 	bl	8000250 <memchr>
 80076c8:	b138      	cbz	r0, 80076da <__ssvfiscanf_r+0xd6>
 80076ca:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80076cc:	eba0 000a 	sub.w	r0, r0, sl
 80076d0:	2301      	movs	r3, #1
 80076d2:	4083      	lsls	r3, r0
 80076d4:	4313      	orrs	r3, r2
 80076d6:	9341      	str	r3, [sp, #260]	@ 0x104
 80076d8:	464d      	mov	r5, r9
 80076da:	f815 3b01 	ldrb.w	r3, [r5], #1
 80076de:	2b78      	cmp	r3, #120	@ 0x78
 80076e0:	d806      	bhi.n	80076f0 <__ssvfiscanf_r+0xec>
 80076e2:	2b57      	cmp	r3, #87	@ 0x57
 80076e4:	d810      	bhi.n	8007708 <__ssvfiscanf_r+0x104>
 80076e6:	2b25      	cmp	r3, #37	@ 0x25
 80076e8:	d0c5      	beq.n	8007676 <__ssvfiscanf_r+0x72>
 80076ea:	d857      	bhi.n	800779c <__ssvfiscanf_r+0x198>
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d065      	beq.n	80077bc <__ssvfiscanf_r+0x1b8>
 80076f0:	2303      	movs	r3, #3
 80076f2:	9347      	str	r3, [sp, #284]	@ 0x11c
 80076f4:	230a      	movs	r3, #10
 80076f6:	9342      	str	r3, [sp, #264]	@ 0x108
 80076f8:	e078      	b.n	80077ec <__ssvfiscanf_r+0x1e8>
 80076fa:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80076fc:	fb02 1103 	mla	r1, r2, r3, r1
 8007700:	3930      	subs	r1, #48	@ 0x30
 8007702:	9143      	str	r1, [sp, #268]	@ 0x10c
 8007704:	464d      	mov	r5, r9
 8007706:	e7d2      	b.n	80076ae <__ssvfiscanf_r+0xaa>
 8007708:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800770c:	2a20      	cmp	r2, #32
 800770e:	d8ef      	bhi.n	80076f0 <__ssvfiscanf_r+0xec>
 8007710:	a101      	add	r1, pc, #4	@ (adr r1, 8007718 <__ssvfiscanf_r+0x114>)
 8007712:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007716:	bf00      	nop
 8007718:	080077cb 	.word	0x080077cb
 800771c:	080076f1 	.word	0x080076f1
 8007720:	080076f1 	.word	0x080076f1
 8007724:	08007825 	.word	0x08007825
 8007728:	080076f1 	.word	0x080076f1
 800772c:	080076f1 	.word	0x080076f1
 8007730:	080076f1 	.word	0x080076f1
 8007734:	080076f1 	.word	0x080076f1
 8007738:	080076f1 	.word	0x080076f1
 800773c:	080076f1 	.word	0x080076f1
 8007740:	080076f1 	.word	0x080076f1
 8007744:	0800783b 	.word	0x0800783b
 8007748:	08007821 	.word	0x08007821
 800774c:	080077a3 	.word	0x080077a3
 8007750:	080077a3 	.word	0x080077a3
 8007754:	080077a3 	.word	0x080077a3
 8007758:	080076f1 	.word	0x080076f1
 800775c:	080077dd 	.word	0x080077dd
 8007760:	080076f1 	.word	0x080076f1
 8007764:	080076f1 	.word	0x080076f1
 8007768:	080076f1 	.word	0x080076f1
 800776c:	080076f1 	.word	0x080076f1
 8007770:	0800784b 	.word	0x0800784b
 8007774:	080077e5 	.word	0x080077e5
 8007778:	080077c3 	.word	0x080077c3
 800777c:	080076f1 	.word	0x080076f1
 8007780:	080076f1 	.word	0x080076f1
 8007784:	08007847 	.word	0x08007847
 8007788:	080076f1 	.word	0x080076f1
 800778c:	08007821 	.word	0x08007821
 8007790:	080076f1 	.word	0x080076f1
 8007794:	080076f1 	.word	0x080076f1
 8007798:	080077cb 	.word	0x080077cb
 800779c:	3b45      	subs	r3, #69	@ 0x45
 800779e:	2b02      	cmp	r3, #2
 80077a0:	d8a6      	bhi.n	80076f0 <__ssvfiscanf_r+0xec>
 80077a2:	2305      	movs	r3, #5
 80077a4:	e021      	b.n	80077ea <__ssvfiscanf_r+0x1e6>
 80077a6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80077a8:	4621      	mov	r1, r4
 80077aa:	4630      	mov	r0, r6
 80077ac:	4798      	blx	r3
 80077ae:	2800      	cmp	r0, #0
 80077b0:	f43f af66 	beq.w	8007680 <__ssvfiscanf_r+0x7c>
 80077b4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80077b6:	2800      	cmp	r0, #0
 80077b8:	f040 808b 	bne.w	80078d2 <__ssvfiscanf_r+0x2ce>
 80077bc:	f04f 30ff 	mov.w	r0, #4294967295
 80077c0:	e08b      	b.n	80078da <__ssvfiscanf_r+0x2d6>
 80077c2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80077c4:	f042 0220 	orr.w	r2, r2, #32
 80077c8:	9241      	str	r2, [sp, #260]	@ 0x104
 80077ca:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80077cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80077d0:	9241      	str	r2, [sp, #260]	@ 0x104
 80077d2:	2210      	movs	r2, #16
 80077d4:	2b6e      	cmp	r3, #110	@ 0x6e
 80077d6:	9242      	str	r2, [sp, #264]	@ 0x108
 80077d8:	d902      	bls.n	80077e0 <__ssvfiscanf_r+0x1dc>
 80077da:	e005      	b.n	80077e8 <__ssvfiscanf_r+0x1e4>
 80077dc:	2300      	movs	r3, #0
 80077de:	9342      	str	r3, [sp, #264]	@ 0x108
 80077e0:	2303      	movs	r3, #3
 80077e2:	e002      	b.n	80077ea <__ssvfiscanf_r+0x1e6>
 80077e4:	2308      	movs	r3, #8
 80077e6:	9342      	str	r3, [sp, #264]	@ 0x108
 80077e8:	2304      	movs	r3, #4
 80077ea:	9347      	str	r3, [sp, #284]	@ 0x11c
 80077ec:	6863      	ldr	r3, [r4, #4]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	dd39      	ble.n	8007866 <__ssvfiscanf_r+0x262>
 80077f2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80077f4:	0659      	lsls	r1, r3, #25
 80077f6:	d404      	bmi.n	8007802 <__ssvfiscanf_r+0x1fe>
 80077f8:	6823      	ldr	r3, [r4, #0]
 80077fa:	781a      	ldrb	r2, [r3, #0]
 80077fc:	5cba      	ldrb	r2, [r7, r2]
 80077fe:	0712      	lsls	r2, r2, #28
 8007800:	d438      	bmi.n	8007874 <__ssvfiscanf_r+0x270>
 8007802:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8007804:	2b02      	cmp	r3, #2
 8007806:	dc47      	bgt.n	8007898 <__ssvfiscanf_r+0x294>
 8007808:	466b      	mov	r3, sp
 800780a:	4622      	mov	r2, r4
 800780c:	a941      	add	r1, sp, #260	@ 0x104
 800780e:	4630      	mov	r0, r6
 8007810:	f000 f86c 	bl	80078ec <_scanf_chars>
 8007814:	2801      	cmp	r0, #1
 8007816:	d064      	beq.n	80078e2 <__ssvfiscanf_r+0x2de>
 8007818:	2802      	cmp	r0, #2
 800781a:	f47f af18 	bne.w	800764e <__ssvfiscanf_r+0x4a>
 800781e:	e7c9      	b.n	80077b4 <__ssvfiscanf_r+0x1b0>
 8007820:	220a      	movs	r2, #10
 8007822:	e7d7      	b.n	80077d4 <__ssvfiscanf_r+0x1d0>
 8007824:	4629      	mov	r1, r5
 8007826:	4640      	mov	r0, r8
 8007828:	f000 f9ae 	bl	8007b88 <__sccl>
 800782c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800782e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007832:	9341      	str	r3, [sp, #260]	@ 0x104
 8007834:	4605      	mov	r5, r0
 8007836:	2301      	movs	r3, #1
 8007838:	e7d7      	b.n	80077ea <__ssvfiscanf_r+0x1e6>
 800783a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800783c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007840:	9341      	str	r3, [sp, #260]	@ 0x104
 8007842:	2300      	movs	r3, #0
 8007844:	e7d1      	b.n	80077ea <__ssvfiscanf_r+0x1e6>
 8007846:	2302      	movs	r3, #2
 8007848:	e7cf      	b.n	80077ea <__ssvfiscanf_r+0x1e6>
 800784a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800784c:	06c3      	lsls	r3, r0, #27
 800784e:	f53f aefe 	bmi.w	800764e <__ssvfiscanf_r+0x4a>
 8007852:	9b00      	ldr	r3, [sp, #0]
 8007854:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8007856:	1d19      	adds	r1, r3, #4
 8007858:	9100      	str	r1, [sp, #0]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	07c0      	lsls	r0, r0, #31
 800785e:	bf4c      	ite	mi
 8007860:	801a      	strhmi	r2, [r3, #0]
 8007862:	601a      	strpl	r2, [r3, #0]
 8007864:	e6f3      	b.n	800764e <__ssvfiscanf_r+0x4a>
 8007866:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007868:	4621      	mov	r1, r4
 800786a:	4630      	mov	r0, r6
 800786c:	4798      	blx	r3
 800786e:	2800      	cmp	r0, #0
 8007870:	d0bf      	beq.n	80077f2 <__ssvfiscanf_r+0x1ee>
 8007872:	e79f      	b.n	80077b4 <__ssvfiscanf_r+0x1b0>
 8007874:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8007876:	3201      	adds	r2, #1
 8007878:	9245      	str	r2, [sp, #276]	@ 0x114
 800787a:	6862      	ldr	r2, [r4, #4]
 800787c:	3a01      	subs	r2, #1
 800787e:	2a00      	cmp	r2, #0
 8007880:	6062      	str	r2, [r4, #4]
 8007882:	dd02      	ble.n	800788a <__ssvfiscanf_r+0x286>
 8007884:	3301      	adds	r3, #1
 8007886:	6023      	str	r3, [r4, #0]
 8007888:	e7b6      	b.n	80077f8 <__ssvfiscanf_r+0x1f4>
 800788a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800788c:	4621      	mov	r1, r4
 800788e:	4630      	mov	r0, r6
 8007890:	4798      	blx	r3
 8007892:	2800      	cmp	r0, #0
 8007894:	d0b0      	beq.n	80077f8 <__ssvfiscanf_r+0x1f4>
 8007896:	e78d      	b.n	80077b4 <__ssvfiscanf_r+0x1b0>
 8007898:	2b04      	cmp	r3, #4
 800789a:	dc0f      	bgt.n	80078bc <__ssvfiscanf_r+0x2b8>
 800789c:	466b      	mov	r3, sp
 800789e:	4622      	mov	r2, r4
 80078a0:	a941      	add	r1, sp, #260	@ 0x104
 80078a2:	4630      	mov	r0, r6
 80078a4:	f000 f87c 	bl	80079a0 <_scanf_i>
 80078a8:	e7b4      	b.n	8007814 <__ssvfiscanf_r+0x210>
 80078aa:	bf00      	nop
 80078ac:	08007555 	.word	0x08007555
 80078b0:	080075cb 	.word	0x080075cb
 80078b4:	08007ff8 	.word	0x08007ff8
 80078b8:	08007fd8 	.word	0x08007fd8
 80078bc:	4b0a      	ldr	r3, [pc, #40]	@ (80078e8 <__ssvfiscanf_r+0x2e4>)
 80078be:	2b00      	cmp	r3, #0
 80078c0:	f43f aec5 	beq.w	800764e <__ssvfiscanf_r+0x4a>
 80078c4:	466b      	mov	r3, sp
 80078c6:	4622      	mov	r2, r4
 80078c8:	a941      	add	r1, sp, #260	@ 0x104
 80078ca:	4630      	mov	r0, r6
 80078cc:	f3af 8000 	nop.w
 80078d0:	e7a0      	b.n	8007814 <__ssvfiscanf_r+0x210>
 80078d2:	89a3      	ldrh	r3, [r4, #12]
 80078d4:	065b      	lsls	r3, r3, #25
 80078d6:	f53f af71 	bmi.w	80077bc <__ssvfiscanf_r+0x1b8>
 80078da:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80078de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078e2:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80078e4:	e7f9      	b.n	80078da <__ssvfiscanf_r+0x2d6>
 80078e6:	bf00      	nop
 80078e8:	00000000 	.word	0x00000000

080078ec <_scanf_chars>:
 80078ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078f0:	4615      	mov	r5, r2
 80078f2:	688a      	ldr	r2, [r1, #8]
 80078f4:	4680      	mov	r8, r0
 80078f6:	460c      	mov	r4, r1
 80078f8:	b932      	cbnz	r2, 8007908 <_scanf_chars+0x1c>
 80078fa:	698a      	ldr	r2, [r1, #24]
 80078fc:	2a00      	cmp	r2, #0
 80078fe:	bf14      	ite	ne
 8007900:	f04f 32ff 	movne.w	r2, #4294967295
 8007904:	2201      	moveq	r2, #1
 8007906:	608a      	str	r2, [r1, #8]
 8007908:	6822      	ldr	r2, [r4, #0]
 800790a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800799c <_scanf_chars+0xb0>
 800790e:	06d1      	lsls	r1, r2, #27
 8007910:	bf5f      	itttt	pl
 8007912:	681a      	ldrpl	r2, [r3, #0]
 8007914:	1d11      	addpl	r1, r2, #4
 8007916:	6019      	strpl	r1, [r3, #0]
 8007918:	6816      	ldrpl	r6, [r2, #0]
 800791a:	2700      	movs	r7, #0
 800791c:	69a0      	ldr	r0, [r4, #24]
 800791e:	b188      	cbz	r0, 8007944 <_scanf_chars+0x58>
 8007920:	2801      	cmp	r0, #1
 8007922:	d107      	bne.n	8007934 <_scanf_chars+0x48>
 8007924:	682b      	ldr	r3, [r5, #0]
 8007926:	781a      	ldrb	r2, [r3, #0]
 8007928:	6963      	ldr	r3, [r4, #20]
 800792a:	5c9b      	ldrb	r3, [r3, r2]
 800792c:	b953      	cbnz	r3, 8007944 <_scanf_chars+0x58>
 800792e:	2f00      	cmp	r7, #0
 8007930:	d031      	beq.n	8007996 <_scanf_chars+0xaa>
 8007932:	e022      	b.n	800797a <_scanf_chars+0x8e>
 8007934:	2802      	cmp	r0, #2
 8007936:	d120      	bne.n	800797a <_scanf_chars+0x8e>
 8007938:	682b      	ldr	r3, [r5, #0]
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8007940:	071b      	lsls	r3, r3, #28
 8007942:	d41a      	bmi.n	800797a <_scanf_chars+0x8e>
 8007944:	6823      	ldr	r3, [r4, #0]
 8007946:	06da      	lsls	r2, r3, #27
 8007948:	bf5e      	ittt	pl
 800794a:	682b      	ldrpl	r3, [r5, #0]
 800794c:	781b      	ldrbpl	r3, [r3, #0]
 800794e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8007952:	682a      	ldr	r2, [r5, #0]
 8007954:	686b      	ldr	r3, [r5, #4]
 8007956:	3201      	adds	r2, #1
 8007958:	602a      	str	r2, [r5, #0]
 800795a:	68a2      	ldr	r2, [r4, #8]
 800795c:	3b01      	subs	r3, #1
 800795e:	3a01      	subs	r2, #1
 8007960:	606b      	str	r3, [r5, #4]
 8007962:	3701      	adds	r7, #1
 8007964:	60a2      	str	r2, [r4, #8]
 8007966:	b142      	cbz	r2, 800797a <_scanf_chars+0x8e>
 8007968:	2b00      	cmp	r3, #0
 800796a:	dcd7      	bgt.n	800791c <_scanf_chars+0x30>
 800796c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007970:	4629      	mov	r1, r5
 8007972:	4640      	mov	r0, r8
 8007974:	4798      	blx	r3
 8007976:	2800      	cmp	r0, #0
 8007978:	d0d0      	beq.n	800791c <_scanf_chars+0x30>
 800797a:	6823      	ldr	r3, [r4, #0]
 800797c:	f013 0310 	ands.w	r3, r3, #16
 8007980:	d105      	bne.n	800798e <_scanf_chars+0xa2>
 8007982:	68e2      	ldr	r2, [r4, #12]
 8007984:	3201      	adds	r2, #1
 8007986:	60e2      	str	r2, [r4, #12]
 8007988:	69a2      	ldr	r2, [r4, #24]
 800798a:	b102      	cbz	r2, 800798e <_scanf_chars+0xa2>
 800798c:	7033      	strb	r3, [r6, #0]
 800798e:	6923      	ldr	r3, [r4, #16]
 8007990:	443b      	add	r3, r7
 8007992:	6123      	str	r3, [r4, #16]
 8007994:	2000      	movs	r0, #0
 8007996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800799a:	bf00      	nop
 800799c:	08007ff8 	.word	0x08007ff8

080079a0 <_scanf_i>:
 80079a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079a4:	4698      	mov	r8, r3
 80079a6:	4b74      	ldr	r3, [pc, #464]	@ (8007b78 <_scanf_i+0x1d8>)
 80079a8:	460c      	mov	r4, r1
 80079aa:	4682      	mov	sl, r0
 80079ac:	4616      	mov	r6, r2
 80079ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80079b2:	b087      	sub	sp, #28
 80079b4:	ab03      	add	r3, sp, #12
 80079b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80079ba:	4b70      	ldr	r3, [pc, #448]	@ (8007b7c <_scanf_i+0x1dc>)
 80079bc:	69a1      	ldr	r1, [r4, #24]
 80079be:	4a70      	ldr	r2, [pc, #448]	@ (8007b80 <_scanf_i+0x1e0>)
 80079c0:	2903      	cmp	r1, #3
 80079c2:	bf08      	it	eq
 80079c4:	461a      	moveq	r2, r3
 80079c6:	68a3      	ldr	r3, [r4, #8]
 80079c8:	9201      	str	r2, [sp, #4]
 80079ca:	1e5a      	subs	r2, r3, #1
 80079cc:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80079d0:	bf88      	it	hi
 80079d2:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80079d6:	4627      	mov	r7, r4
 80079d8:	bf82      	ittt	hi
 80079da:	eb03 0905 	addhi.w	r9, r3, r5
 80079de:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80079e2:	60a3      	strhi	r3, [r4, #8]
 80079e4:	f857 3b1c 	ldr.w	r3, [r7], #28
 80079e8:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80079ec:	bf98      	it	ls
 80079ee:	f04f 0900 	movls.w	r9, #0
 80079f2:	6023      	str	r3, [r4, #0]
 80079f4:	463d      	mov	r5, r7
 80079f6:	f04f 0b00 	mov.w	fp, #0
 80079fa:	6831      	ldr	r1, [r6, #0]
 80079fc:	ab03      	add	r3, sp, #12
 80079fe:	7809      	ldrb	r1, [r1, #0]
 8007a00:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8007a04:	2202      	movs	r2, #2
 8007a06:	f7f8 fc23 	bl	8000250 <memchr>
 8007a0a:	b328      	cbz	r0, 8007a58 <_scanf_i+0xb8>
 8007a0c:	f1bb 0f01 	cmp.w	fp, #1
 8007a10:	d159      	bne.n	8007ac6 <_scanf_i+0x126>
 8007a12:	6862      	ldr	r2, [r4, #4]
 8007a14:	b92a      	cbnz	r2, 8007a22 <_scanf_i+0x82>
 8007a16:	6822      	ldr	r2, [r4, #0]
 8007a18:	2108      	movs	r1, #8
 8007a1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a1e:	6061      	str	r1, [r4, #4]
 8007a20:	6022      	str	r2, [r4, #0]
 8007a22:	6822      	ldr	r2, [r4, #0]
 8007a24:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8007a28:	6022      	str	r2, [r4, #0]
 8007a2a:	68a2      	ldr	r2, [r4, #8]
 8007a2c:	1e51      	subs	r1, r2, #1
 8007a2e:	60a1      	str	r1, [r4, #8]
 8007a30:	b192      	cbz	r2, 8007a58 <_scanf_i+0xb8>
 8007a32:	6832      	ldr	r2, [r6, #0]
 8007a34:	1c51      	adds	r1, r2, #1
 8007a36:	6031      	str	r1, [r6, #0]
 8007a38:	7812      	ldrb	r2, [r2, #0]
 8007a3a:	f805 2b01 	strb.w	r2, [r5], #1
 8007a3e:	6872      	ldr	r2, [r6, #4]
 8007a40:	3a01      	subs	r2, #1
 8007a42:	2a00      	cmp	r2, #0
 8007a44:	6072      	str	r2, [r6, #4]
 8007a46:	dc07      	bgt.n	8007a58 <_scanf_i+0xb8>
 8007a48:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8007a4c:	4631      	mov	r1, r6
 8007a4e:	4650      	mov	r0, sl
 8007a50:	4790      	blx	r2
 8007a52:	2800      	cmp	r0, #0
 8007a54:	f040 8085 	bne.w	8007b62 <_scanf_i+0x1c2>
 8007a58:	f10b 0b01 	add.w	fp, fp, #1
 8007a5c:	f1bb 0f03 	cmp.w	fp, #3
 8007a60:	d1cb      	bne.n	80079fa <_scanf_i+0x5a>
 8007a62:	6863      	ldr	r3, [r4, #4]
 8007a64:	b90b      	cbnz	r3, 8007a6a <_scanf_i+0xca>
 8007a66:	230a      	movs	r3, #10
 8007a68:	6063      	str	r3, [r4, #4]
 8007a6a:	6863      	ldr	r3, [r4, #4]
 8007a6c:	4945      	ldr	r1, [pc, #276]	@ (8007b84 <_scanf_i+0x1e4>)
 8007a6e:	6960      	ldr	r0, [r4, #20]
 8007a70:	1ac9      	subs	r1, r1, r3
 8007a72:	f000 f889 	bl	8007b88 <__sccl>
 8007a76:	f04f 0b00 	mov.w	fp, #0
 8007a7a:	68a3      	ldr	r3, [r4, #8]
 8007a7c:	6822      	ldr	r2, [r4, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d03d      	beq.n	8007afe <_scanf_i+0x15e>
 8007a82:	6831      	ldr	r1, [r6, #0]
 8007a84:	6960      	ldr	r0, [r4, #20]
 8007a86:	f891 c000 	ldrb.w	ip, [r1]
 8007a8a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8007a8e:	2800      	cmp	r0, #0
 8007a90:	d035      	beq.n	8007afe <_scanf_i+0x15e>
 8007a92:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8007a96:	d124      	bne.n	8007ae2 <_scanf_i+0x142>
 8007a98:	0510      	lsls	r0, r2, #20
 8007a9a:	d522      	bpl.n	8007ae2 <_scanf_i+0x142>
 8007a9c:	f10b 0b01 	add.w	fp, fp, #1
 8007aa0:	f1b9 0f00 	cmp.w	r9, #0
 8007aa4:	d003      	beq.n	8007aae <_scanf_i+0x10e>
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	f109 39ff 	add.w	r9, r9, #4294967295
 8007aac:	60a3      	str	r3, [r4, #8]
 8007aae:	6873      	ldr	r3, [r6, #4]
 8007ab0:	3b01      	subs	r3, #1
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	6073      	str	r3, [r6, #4]
 8007ab6:	dd1b      	ble.n	8007af0 <_scanf_i+0x150>
 8007ab8:	6833      	ldr	r3, [r6, #0]
 8007aba:	3301      	adds	r3, #1
 8007abc:	6033      	str	r3, [r6, #0]
 8007abe:	68a3      	ldr	r3, [r4, #8]
 8007ac0:	3b01      	subs	r3, #1
 8007ac2:	60a3      	str	r3, [r4, #8]
 8007ac4:	e7d9      	b.n	8007a7a <_scanf_i+0xda>
 8007ac6:	f1bb 0f02 	cmp.w	fp, #2
 8007aca:	d1ae      	bne.n	8007a2a <_scanf_i+0x8a>
 8007acc:	6822      	ldr	r2, [r4, #0]
 8007ace:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8007ad2:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8007ad6:	d1bf      	bne.n	8007a58 <_scanf_i+0xb8>
 8007ad8:	2110      	movs	r1, #16
 8007ada:	6061      	str	r1, [r4, #4]
 8007adc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007ae0:	e7a2      	b.n	8007a28 <_scanf_i+0x88>
 8007ae2:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8007ae6:	6022      	str	r2, [r4, #0]
 8007ae8:	780b      	ldrb	r3, [r1, #0]
 8007aea:	f805 3b01 	strb.w	r3, [r5], #1
 8007aee:	e7de      	b.n	8007aae <_scanf_i+0x10e>
 8007af0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007af4:	4631      	mov	r1, r6
 8007af6:	4650      	mov	r0, sl
 8007af8:	4798      	blx	r3
 8007afa:	2800      	cmp	r0, #0
 8007afc:	d0df      	beq.n	8007abe <_scanf_i+0x11e>
 8007afe:	6823      	ldr	r3, [r4, #0]
 8007b00:	05d9      	lsls	r1, r3, #23
 8007b02:	d50d      	bpl.n	8007b20 <_scanf_i+0x180>
 8007b04:	42bd      	cmp	r5, r7
 8007b06:	d909      	bls.n	8007b1c <_scanf_i+0x17c>
 8007b08:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007b0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007b10:	4632      	mov	r2, r6
 8007b12:	4650      	mov	r0, sl
 8007b14:	4798      	blx	r3
 8007b16:	f105 39ff 	add.w	r9, r5, #4294967295
 8007b1a:	464d      	mov	r5, r9
 8007b1c:	42bd      	cmp	r5, r7
 8007b1e:	d028      	beq.n	8007b72 <_scanf_i+0x1d2>
 8007b20:	6822      	ldr	r2, [r4, #0]
 8007b22:	f012 0210 	ands.w	r2, r2, #16
 8007b26:	d113      	bne.n	8007b50 <_scanf_i+0x1b0>
 8007b28:	702a      	strb	r2, [r5, #0]
 8007b2a:	6863      	ldr	r3, [r4, #4]
 8007b2c:	9e01      	ldr	r6, [sp, #4]
 8007b2e:	4639      	mov	r1, r7
 8007b30:	4650      	mov	r0, sl
 8007b32:	47b0      	blx	r6
 8007b34:	f8d8 3000 	ldr.w	r3, [r8]
 8007b38:	6821      	ldr	r1, [r4, #0]
 8007b3a:	1d1a      	adds	r2, r3, #4
 8007b3c:	f8c8 2000 	str.w	r2, [r8]
 8007b40:	f011 0f20 	tst.w	r1, #32
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	d00f      	beq.n	8007b68 <_scanf_i+0x1c8>
 8007b48:	6018      	str	r0, [r3, #0]
 8007b4a:	68e3      	ldr	r3, [r4, #12]
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	60e3      	str	r3, [r4, #12]
 8007b50:	6923      	ldr	r3, [r4, #16]
 8007b52:	1bed      	subs	r5, r5, r7
 8007b54:	445d      	add	r5, fp
 8007b56:	442b      	add	r3, r5
 8007b58:	6123      	str	r3, [r4, #16]
 8007b5a:	2000      	movs	r0, #0
 8007b5c:	b007      	add	sp, #28
 8007b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b62:	f04f 0b00 	mov.w	fp, #0
 8007b66:	e7ca      	b.n	8007afe <_scanf_i+0x15e>
 8007b68:	07ca      	lsls	r2, r1, #31
 8007b6a:	bf4c      	ite	mi
 8007b6c:	8018      	strhmi	r0, [r3, #0]
 8007b6e:	6018      	strpl	r0, [r3, #0]
 8007b70:	e7eb      	b.n	8007b4a <_scanf_i+0x1aa>
 8007b72:	2001      	movs	r0, #1
 8007b74:	e7f2      	b.n	8007b5c <_scanf_i+0x1bc>
 8007b76:	bf00      	nop
 8007b78:	08007f8c 	.word	0x08007f8c
 8007b7c:	08007ddd 	.word	0x08007ddd
 8007b80:	08007ebd 	.word	0x08007ebd
 8007b84:	08007fec 	.word	0x08007fec

08007b88 <__sccl>:
 8007b88:	b570      	push	{r4, r5, r6, lr}
 8007b8a:	780b      	ldrb	r3, [r1, #0]
 8007b8c:	4604      	mov	r4, r0
 8007b8e:	2b5e      	cmp	r3, #94	@ 0x5e
 8007b90:	bf0b      	itete	eq
 8007b92:	784b      	ldrbeq	r3, [r1, #1]
 8007b94:	1c4a      	addne	r2, r1, #1
 8007b96:	1c8a      	addeq	r2, r1, #2
 8007b98:	2100      	movne	r1, #0
 8007b9a:	bf08      	it	eq
 8007b9c:	2101      	moveq	r1, #1
 8007b9e:	3801      	subs	r0, #1
 8007ba0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8007ba4:	f800 1f01 	strb.w	r1, [r0, #1]!
 8007ba8:	42a8      	cmp	r0, r5
 8007baa:	d1fb      	bne.n	8007ba4 <__sccl+0x1c>
 8007bac:	b90b      	cbnz	r3, 8007bb2 <__sccl+0x2a>
 8007bae:	1e50      	subs	r0, r2, #1
 8007bb0:	bd70      	pop	{r4, r5, r6, pc}
 8007bb2:	f081 0101 	eor.w	r1, r1, #1
 8007bb6:	54e1      	strb	r1, [r4, r3]
 8007bb8:	4610      	mov	r0, r2
 8007bba:	4602      	mov	r2, r0
 8007bbc:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007bc0:	2d2d      	cmp	r5, #45	@ 0x2d
 8007bc2:	d005      	beq.n	8007bd0 <__sccl+0x48>
 8007bc4:	2d5d      	cmp	r5, #93	@ 0x5d
 8007bc6:	d016      	beq.n	8007bf6 <__sccl+0x6e>
 8007bc8:	2d00      	cmp	r5, #0
 8007bca:	d0f1      	beq.n	8007bb0 <__sccl+0x28>
 8007bcc:	462b      	mov	r3, r5
 8007bce:	e7f2      	b.n	8007bb6 <__sccl+0x2e>
 8007bd0:	7846      	ldrb	r6, [r0, #1]
 8007bd2:	2e5d      	cmp	r6, #93	@ 0x5d
 8007bd4:	d0fa      	beq.n	8007bcc <__sccl+0x44>
 8007bd6:	42b3      	cmp	r3, r6
 8007bd8:	dcf8      	bgt.n	8007bcc <__sccl+0x44>
 8007bda:	3002      	adds	r0, #2
 8007bdc:	461a      	mov	r2, r3
 8007bde:	3201      	adds	r2, #1
 8007be0:	4296      	cmp	r6, r2
 8007be2:	54a1      	strb	r1, [r4, r2]
 8007be4:	dcfb      	bgt.n	8007bde <__sccl+0x56>
 8007be6:	1af2      	subs	r2, r6, r3
 8007be8:	3a01      	subs	r2, #1
 8007bea:	1c5d      	adds	r5, r3, #1
 8007bec:	42b3      	cmp	r3, r6
 8007bee:	bfa8      	it	ge
 8007bf0:	2200      	movge	r2, #0
 8007bf2:	18ab      	adds	r3, r5, r2
 8007bf4:	e7e1      	b.n	8007bba <__sccl+0x32>
 8007bf6:	4610      	mov	r0, r2
 8007bf8:	e7da      	b.n	8007bb0 <__sccl+0x28>

08007bfa <__submore>:
 8007bfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bfe:	460c      	mov	r4, r1
 8007c00:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8007c02:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007c06:	4299      	cmp	r1, r3
 8007c08:	d11d      	bne.n	8007c46 <__submore+0x4c>
 8007c0a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007c0e:	f7ff fb47 	bl	80072a0 <_malloc_r>
 8007c12:	b918      	cbnz	r0, 8007c1c <__submore+0x22>
 8007c14:	f04f 30ff 	mov.w	r0, #4294967295
 8007c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007c20:	63a3      	str	r3, [r4, #56]	@ 0x38
 8007c22:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8007c26:	6360      	str	r0, [r4, #52]	@ 0x34
 8007c28:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8007c2c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007c30:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8007c34:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007c38:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8007c3c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8007c40:	6020      	str	r0, [r4, #0]
 8007c42:	2000      	movs	r0, #0
 8007c44:	e7e8      	b.n	8007c18 <__submore+0x1e>
 8007c46:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8007c48:	0077      	lsls	r7, r6, #1
 8007c4a:	463a      	mov	r2, r7
 8007c4c:	f000 f81d 	bl	8007c8a <_realloc_r>
 8007c50:	4605      	mov	r5, r0
 8007c52:	2800      	cmp	r0, #0
 8007c54:	d0de      	beq.n	8007c14 <__submore+0x1a>
 8007c56:	eb00 0806 	add.w	r8, r0, r6
 8007c5a:	4601      	mov	r1, r0
 8007c5c:	4632      	mov	r2, r6
 8007c5e:	4640      	mov	r0, r8
 8007c60:	f000 f805 	bl	8007c6e <memcpy>
 8007c64:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8007c68:	f8c4 8000 	str.w	r8, [r4]
 8007c6c:	e7e9      	b.n	8007c42 <__submore+0x48>

08007c6e <memcpy>:
 8007c6e:	440a      	add	r2, r1
 8007c70:	4291      	cmp	r1, r2
 8007c72:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c76:	d100      	bne.n	8007c7a <memcpy+0xc>
 8007c78:	4770      	bx	lr
 8007c7a:	b510      	push	{r4, lr}
 8007c7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c80:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c84:	4291      	cmp	r1, r2
 8007c86:	d1f9      	bne.n	8007c7c <memcpy+0xe>
 8007c88:	bd10      	pop	{r4, pc}

08007c8a <_realloc_r>:
 8007c8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c8e:	4680      	mov	r8, r0
 8007c90:	4615      	mov	r5, r2
 8007c92:	460c      	mov	r4, r1
 8007c94:	b921      	cbnz	r1, 8007ca0 <_realloc_r+0x16>
 8007c96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c9a:	4611      	mov	r1, r2
 8007c9c:	f7ff bb00 	b.w	80072a0 <_malloc_r>
 8007ca0:	b92a      	cbnz	r2, 8007cae <_realloc_r+0x24>
 8007ca2:	f7ff fc0d 	bl	80074c0 <_free_r>
 8007ca6:	2400      	movs	r4, #0
 8007ca8:	4620      	mov	r0, r4
 8007caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cae:	f000 f907 	bl	8007ec0 <_malloc_usable_size_r>
 8007cb2:	4285      	cmp	r5, r0
 8007cb4:	4606      	mov	r6, r0
 8007cb6:	d802      	bhi.n	8007cbe <_realloc_r+0x34>
 8007cb8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007cbc:	d8f4      	bhi.n	8007ca8 <_realloc_r+0x1e>
 8007cbe:	4629      	mov	r1, r5
 8007cc0:	4640      	mov	r0, r8
 8007cc2:	f7ff faed 	bl	80072a0 <_malloc_r>
 8007cc6:	4607      	mov	r7, r0
 8007cc8:	2800      	cmp	r0, #0
 8007cca:	d0ec      	beq.n	8007ca6 <_realloc_r+0x1c>
 8007ccc:	42b5      	cmp	r5, r6
 8007cce:	462a      	mov	r2, r5
 8007cd0:	4621      	mov	r1, r4
 8007cd2:	bf28      	it	cs
 8007cd4:	4632      	movcs	r2, r6
 8007cd6:	f7ff ffca 	bl	8007c6e <memcpy>
 8007cda:	4621      	mov	r1, r4
 8007cdc:	4640      	mov	r0, r8
 8007cde:	f7ff fbef 	bl	80074c0 <_free_r>
 8007ce2:	463c      	mov	r4, r7
 8007ce4:	e7e0      	b.n	8007ca8 <_realloc_r+0x1e>
	...

08007ce8 <_strtol_l.constprop.0>:
 8007ce8:	2b24      	cmp	r3, #36	@ 0x24
 8007cea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cee:	4686      	mov	lr, r0
 8007cf0:	4690      	mov	r8, r2
 8007cf2:	d801      	bhi.n	8007cf8 <_strtol_l.constprop.0+0x10>
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d106      	bne.n	8007d06 <_strtol_l.constprop.0+0x1e>
 8007cf8:	f7ff fbb6 	bl	8007468 <__errno>
 8007cfc:	2316      	movs	r3, #22
 8007cfe:	6003      	str	r3, [r0, #0]
 8007d00:	2000      	movs	r0, #0
 8007d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d06:	4834      	ldr	r0, [pc, #208]	@ (8007dd8 <_strtol_l.constprop.0+0xf0>)
 8007d08:	460d      	mov	r5, r1
 8007d0a:	462a      	mov	r2, r5
 8007d0c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d10:	5d06      	ldrb	r6, [r0, r4]
 8007d12:	f016 0608 	ands.w	r6, r6, #8
 8007d16:	d1f8      	bne.n	8007d0a <_strtol_l.constprop.0+0x22>
 8007d18:	2c2d      	cmp	r4, #45	@ 0x2d
 8007d1a:	d12d      	bne.n	8007d78 <_strtol_l.constprop.0+0x90>
 8007d1c:	782c      	ldrb	r4, [r5, #0]
 8007d1e:	2601      	movs	r6, #1
 8007d20:	1c95      	adds	r5, r2, #2
 8007d22:	f033 0210 	bics.w	r2, r3, #16
 8007d26:	d109      	bne.n	8007d3c <_strtol_l.constprop.0+0x54>
 8007d28:	2c30      	cmp	r4, #48	@ 0x30
 8007d2a:	d12a      	bne.n	8007d82 <_strtol_l.constprop.0+0x9a>
 8007d2c:	782a      	ldrb	r2, [r5, #0]
 8007d2e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007d32:	2a58      	cmp	r2, #88	@ 0x58
 8007d34:	d125      	bne.n	8007d82 <_strtol_l.constprop.0+0x9a>
 8007d36:	786c      	ldrb	r4, [r5, #1]
 8007d38:	2310      	movs	r3, #16
 8007d3a:	3502      	adds	r5, #2
 8007d3c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007d40:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007d44:	2200      	movs	r2, #0
 8007d46:	fbbc f9f3 	udiv	r9, ip, r3
 8007d4a:	4610      	mov	r0, r2
 8007d4c:	fb03 ca19 	mls	sl, r3, r9, ip
 8007d50:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007d54:	2f09      	cmp	r7, #9
 8007d56:	d81b      	bhi.n	8007d90 <_strtol_l.constprop.0+0xa8>
 8007d58:	463c      	mov	r4, r7
 8007d5a:	42a3      	cmp	r3, r4
 8007d5c:	dd27      	ble.n	8007dae <_strtol_l.constprop.0+0xc6>
 8007d5e:	1c57      	adds	r7, r2, #1
 8007d60:	d007      	beq.n	8007d72 <_strtol_l.constprop.0+0x8a>
 8007d62:	4581      	cmp	r9, r0
 8007d64:	d320      	bcc.n	8007da8 <_strtol_l.constprop.0+0xc0>
 8007d66:	d101      	bne.n	8007d6c <_strtol_l.constprop.0+0x84>
 8007d68:	45a2      	cmp	sl, r4
 8007d6a:	db1d      	blt.n	8007da8 <_strtol_l.constprop.0+0xc0>
 8007d6c:	fb00 4003 	mla	r0, r0, r3, r4
 8007d70:	2201      	movs	r2, #1
 8007d72:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d76:	e7eb      	b.n	8007d50 <_strtol_l.constprop.0+0x68>
 8007d78:	2c2b      	cmp	r4, #43	@ 0x2b
 8007d7a:	bf04      	itt	eq
 8007d7c:	782c      	ldrbeq	r4, [r5, #0]
 8007d7e:	1c95      	addeq	r5, r2, #2
 8007d80:	e7cf      	b.n	8007d22 <_strtol_l.constprop.0+0x3a>
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d1da      	bne.n	8007d3c <_strtol_l.constprop.0+0x54>
 8007d86:	2c30      	cmp	r4, #48	@ 0x30
 8007d88:	bf0c      	ite	eq
 8007d8a:	2308      	moveq	r3, #8
 8007d8c:	230a      	movne	r3, #10
 8007d8e:	e7d5      	b.n	8007d3c <_strtol_l.constprop.0+0x54>
 8007d90:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007d94:	2f19      	cmp	r7, #25
 8007d96:	d801      	bhi.n	8007d9c <_strtol_l.constprop.0+0xb4>
 8007d98:	3c37      	subs	r4, #55	@ 0x37
 8007d9a:	e7de      	b.n	8007d5a <_strtol_l.constprop.0+0x72>
 8007d9c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007da0:	2f19      	cmp	r7, #25
 8007da2:	d804      	bhi.n	8007dae <_strtol_l.constprop.0+0xc6>
 8007da4:	3c57      	subs	r4, #87	@ 0x57
 8007da6:	e7d8      	b.n	8007d5a <_strtol_l.constprop.0+0x72>
 8007da8:	f04f 32ff 	mov.w	r2, #4294967295
 8007dac:	e7e1      	b.n	8007d72 <_strtol_l.constprop.0+0x8a>
 8007dae:	1c53      	adds	r3, r2, #1
 8007db0:	d108      	bne.n	8007dc4 <_strtol_l.constprop.0+0xdc>
 8007db2:	2322      	movs	r3, #34	@ 0x22
 8007db4:	f8ce 3000 	str.w	r3, [lr]
 8007db8:	4660      	mov	r0, ip
 8007dba:	f1b8 0f00 	cmp.w	r8, #0
 8007dbe:	d0a0      	beq.n	8007d02 <_strtol_l.constprop.0+0x1a>
 8007dc0:	1e69      	subs	r1, r5, #1
 8007dc2:	e006      	b.n	8007dd2 <_strtol_l.constprop.0+0xea>
 8007dc4:	b106      	cbz	r6, 8007dc8 <_strtol_l.constprop.0+0xe0>
 8007dc6:	4240      	negs	r0, r0
 8007dc8:	f1b8 0f00 	cmp.w	r8, #0
 8007dcc:	d099      	beq.n	8007d02 <_strtol_l.constprop.0+0x1a>
 8007dce:	2a00      	cmp	r2, #0
 8007dd0:	d1f6      	bne.n	8007dc0 <_strtol_l.constprop.0+0xd8>
 8007dd2:	f8c8 1000 	str.w	r1, [r8]
 8007dd6:	e794      	b.n	8007d02 <_strtol_l.constprop.0+0x1a>
 8007dd8:	08007ff8 	.word	0x08007ff8

08007ddc <_strtol_r>:
 8007ddc:	f7ff bf84 	b.w	8007ce8 <_strtol_l.constprop.0>

08007de0 <_strtoul_l.constprop.0>:
 8007de0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007de4:	4e34      	ldr	r6, [pc, #208]	@ (8007eb8 <_strtoul_l.constprop.0+0xd8>)
 8007de6:	4686      	mov	lr, r0
 8007de8:	460d      	mov	r5, r1
 8007dea:	4628      	mov	r0, r5
 8007dec:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007df0:	5d37      	ldrb	r7, [r6, r4]
 8007df2:	f017 0708 	ands.w	r7, r7, #8
 8007df6:	d1f8      	bne.n	8007dea <_strtoul_l.constprop.0+0xa>
 8007df8:	2c2d      	cmp	r4, #45	@ 0x2d
 8007dfa:	d12f      	bne.n	8007e5c <_strtoul_l.constprop.0+0x7c>
 8007dfc:	782c      	ldrb	r4, [r5, #0]
 8007dfe:	2701      	movs	r7, #1
 8007e00:	1c85      	adds	r5, r0, #2
 8007e02:	f033 0010 	bics.w	r0, r3, #16
 8007e06:	d109      	bne.n	8007e1c <_strtoul_l.constprop.0+0x3c>
 8007e08:	2c30      	cmp	r4, #48	@ 0x30
 8007e0a:	d12c      	bne.n	8007e66 <_strtoul_l.constprop.0+0x86>
 8007e0c:	7828      	ldrb	r0, [r5, #0]
 8007e0e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8007e12:	2858      	cmp	r0, #88	@ 0x58
 8007e14:	d127      	bne.n	8007e66 <_strtoul_l.constprop.0+0x86>
 8007e16:	786c      	ldrb	r4, [r5, #1]
 8007e18:	2310      	movs	r3, #16
 8007e1a:	3502      	adds	r5, #2
 8007e1c:	f04f 38ff 	mov.w	r8, #4294967295
 8007e20:	2600      	movs	r6, #0
 8007e22:	fbb8 f8f3 	udiv	r8, r8, r3
 8007e26:	fb03 f908 	mul.w	r9, r3, r8
 8007e2a:	ea6f 0909 	mvn.w	r9, r9
 8007e2e:	4630      	mov	r0, r6
 8007e30:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8007e34:	f1bc 0f09 	cmp.w	ip, #9
 8007e38:	d81c      	bhi.n	8007e74 <_strtoul_l.constprop.0+0x94>
 8007e3a:	4664      	mov	r4, ip
 8007e3c:	42a3      	cmp	r3, r4
 8007e3e:	dd2a      	ble.n	8007e96 <_strtoul_l.constprop.0+0xb6>
 8007e40:	f1b6 3fff 	cmp.w	r6, #4294967295
 8007e44:	d007      	beq.n	8007e56 <_strtoul_l.constprop.0+0x76>
 8007e46:	4580      	cmp	r8, r0
 8007e48:	d322      	bcc.n	8007e90 <_strtoul_l.constprop.0+0xb0>
 8007e4a:	d101      	bne.n	8007e50 <_strtoul_l.constprop.0+0x70>
 8007e4c:	45a1      	cmp	r9, r4
 8007e4e:	db1f      	blt.n	8007e90 <_strtoul_l.constprop.0+0xb0>
 8007e50:	fb00 4003 	mla	r0, r0, r3, r4
 8007e54:	2601      	movs	r6, #1
 8007e56:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007e5a:	e7e9      	b.n	8007e30 <_strtoul_l.constprop.0+0x50>
 8007e5c:	2c2b      	cmp	r4, #43	@ 0x2b
 8007e5e:	bf04      	itt	eq
 8007e60:	782c      	ldrbeq	r4, [r5, #0]
 8007e62:	1c85      	addeq	r5, r0, #2
 8007e64:	e7cd      	b.n	8007e02 <_strtoul_l.constprop.0+0x22>
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d1d8      	bne.n	8007e1c <_strtoul_l.constprop.0+0x3c>
 8007e6a:	2c30      	cmp	r4, #48	@ 0x30
 8007e6c:	bf0c      	ite	eq
 8007e6e:	2308      	moveq	r3, #8
 8007e70:	230a      	movne	r3, #10
 8007e72:	e7d3      	b.n	8007e1c <_strtoul_l.constprop.0+0x3c>
 8007e74:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8007e78:	f1bc 0f19 	cmp.w	ip, #25
 8007e7c:	d801      	bhi.n	8007e82 <_strtoul_l.constprop.0+0xa2>
 8007e7e:	3c37      	subs	r4, #55	@ 0x37
 8007e80:	e7dc      	b.n	8007e3c <_strtoul_l.constprop.0+0x5c>
 8007e82:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8007e86:	f1bc 0f19 	cmp.w	ip, #25
 8007e8a:	d804      	bhi.n	8007e96 <_strtoul_l.constprop.0+0xb6>
 8007e8c:	3c57      	subs	r4, #87	@ 0x57
 8007e8e:	e7d5      	b.n	8007e3c <_strtoul_l.constprop.0+0x5c>
 8007e90:	f04f 36ff 	mov.w	r6, #4294967295
 8007e94:	e7df      	b.n	8007e56 <_strtoul_l.constprop.0+0x76>
 8007e96:	1c73      	adds	r3, r6, #1
 8007e98:	d106      	bne.n	8007ea8 <_strtoul_l.constprop.0+0xc8>
 8007e9a:	2322      	movs	r3, #34	@ 0x22
 8007e9c:	f8ce 3000 	str.w	r3, [lr]
 8007ea0:	4630      	mov	r0, r6
 8007ea2:	b932      	cbnz	r2, 8007eb2 <_strtoul_l.constprop.0+0xd2>
 8007ea4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ea8:	b107      	cbz	r7, 8007eac <_strtoul_l.constprop.0+0xcc>
 8007eaa:	4240      	negs	r0, r0
 8007eac:	2a00      	cmp	r2, #0
 8007eae:	d0f9      	beq.n	8007ea4 <_strtoul_l.constprop.0+0xc4>
 8007eb0:	b106      	cbz	r6, 8007eb4 <_strtoul_l.constprop.0+0xd4>
 8007eb2:	1e69      	subs	r1, r5, #1
 8007eb4:	6011      	str	r1, [r2, #0]
 8007eb6:	e7f5      	b.n	8007ea4 <_strtoul_l.constprop.0+0xc4>
 8007eb8:	08007ff8 	.word	0x08007ff8

08007ebc <_strtoul_r>:
 8007ebc:	f7ff bf90 	b.w	8007de0 <_strtoul_l.constprop.0>

08007ec0 <_malloc_usable_size_r>:
 8007ec0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ec4:	1f18      	subs	r0, r3, #4
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	bfbc      	itt	lt
 8007eca:	580b      	ldrlt	r3, [r1, r0]
 8007ecc:	18c0      	addlt	r0, r0, r3
 8007ece:	4770      	bx	lr

08007ed0 <_init>:
 8007ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ed2:	bf00      	nop
 8007ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ed6:	bc08      	pop	{r3}
 8007ed8:	469e      	mov	lr, r3
 8007eda:	4770      	bx	lr

08007edc <_fini>:
 8007edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ede:	bf00      	nop
 8007ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ee2:	bc08      	pop	{r3}
 8007ee4:	469e      	mov	lr, r3
 8007ee6:	4770      	bx	lr
