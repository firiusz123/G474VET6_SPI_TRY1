
communication_try01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093b0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000038c  08009590  08009590  0000a590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800991c  0800991c  0000b06c  2**0
                  CONTENTS
  4 .ARM          00000008  0800991c  0800991c  0000a91c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009924  08009924  0000b06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009924  08009924  0000a924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009928  08009928  0000a928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800992c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000450  2000006c  08009998  0000b06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004bc  08009998  0000b4bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017446  00000000  00000000  0000b09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003001  00000000  00000000  000224e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c0  00000000  00000000  000254e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f64  00000000  00000000  000268a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028045  00000000  00000000  0002780c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018528  00000000  00000000  0004f851  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fff22  00000000  00000000  00067d79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00167c9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005eb8  00000000  00000000  00167ce0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0016db98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009578 	.word	0x08009578

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	08009578 	.word	0x08009578

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <command_checker>:
uint32_t diff=0;
uint32_t diff1=0;


char* command_checker(uint8_t* buffer)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
    int8_t ending_condition = 1;
 80005e8:	2301      	movs	r3, #1
 80005ea:	73fb      	strb	r3, [r7, #15]
    int8_t index = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	73bb      	strb	r3, [r7, #14]

    while (ending_condition)
 80005f0:	e00f      	b.n	8000612 <command_checker+0x32>
    {
        if (buffer[index] == '#')
 80005f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005f6:	687a      	ldr	r2, [r7, #4]
 80005f8:	4413      	add	r3, r2
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b23      	cmp	r3, #35	@ 0x23
 80005fe:	d102      	bne.n	8000606 <command_checker+0x26>
        {
            ending_condition = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	73fb      	strb	r3, [r7, #15]
 8000604:	e005      	b.n	8000612 <command_checker+0x32>
        }
        else
        {
            index++;
 8000606:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800060a:	b2db      	uxtb	r3, r3
 800060c:	3301      	adds	r3, #1
 800060e:	b2db      	uxtb	r3, r3
 8000610:	73bb      	strb	r3, [r7, #14]
    while (ending_condition)
 8000612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d1eb      	bne.n	80005f2 <command_checker+0x12>
        }

    }

    // Allocate memory for the command string with an extra byte for the null terminator
    char* command = (char*)malloc(index + 1);
 800061a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800061e:	3301      	adds	r3, #1
 8000620:	4618      	mov	r0, r3
 8000622:	f007 facf 	bl	8007bc4 <malloc>
 8000626:	4603      	mov	r3, r0
 8000628:	60bb      	str	r3, [r7, #8]
    if (command == NULL)
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d101      	bne.n	8000634 <command_checker+0x54>
    {
        return NULL;  // Allocation failed
 8000630:	2300      	movs	r3, #0
 8000632:	e00d      	b.n	8000650 <command_checker+0x70>
    }

    // Copy the command part from buffer to the newly allocated string
    strncpy(command, (char*)buffer, index);
 8000634:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000638:	461a      	mov	r2, r3
 800063a:	6879      	ldr	r1, [r7, #4]
 800063c:	68b8      	ldr	r0, [r7, #8]
 800063e:	f007 fdcb 	bl	80081d8 <strncpy>
    command[index] = '\0';  // Null-terminate the string
 8000642:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000646:	68ba      	ldr	r2, [r7, #8]
 8000648:	4413      	add	r3, r2
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]

    return command;
 800064e:	68bb      	ldr	r3, [r7, #8]
}
 8000650:	4618      	mov	r0, r3
 8000652:	3710      	adds	r7, #16
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <head_control>:
char* head_control(UART_HandleTypeDef *huart) {
 8000658:	b580      	push	{r7, lr}
 800065a:	b086      	sub	sp, #24
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
    //char RxBuffer1[RX_BUFFER_SIZE];
    //memset(RxBuffer1, '\0', sizeof(RxBuffer1)); // Clear the buffer

    char received_char1;
    int8_t index = 0;
 8000660:	2300      	movs	r3, #0
 8000662:	75fb      	strb	r3, [r7, #23]
    memset(RxBuffer1, '\0', sizeof(RxBuffer1));
 8000664:	2220      	movs	r2, #32
 8000666:	2100      	movs	r1, #0
 8000668:	4836      	ldr	r0, [pc, #216]	@ (8000744 <head_control+0xec>)
 800066a:	f007 fdad 	bl	80081c8 <memset>
    // Continue to receive characters until the character '$' is found

    uint32_t start_time=HAL_GetTick();
 800066e:	f001 ff57 	bl	8002520 <HAL_GetTick>
 8000672:	6138      	str	r0, [r7, #16]
    uint32_t timeout1=7000;
 8000674:	f641 3358 	movw	r3, #7000	@ 0x1b58
 8000678:	60fb      	str	r3, [r7, #12]


    while (1) {
        // Receive one character at a time
		diff1=HAL_GetTick()-start_time;
 800067a:	f001 ff51 	bl	8002520 <HAL_GetTick>
 800067e:	4602      	mov	r2, r0
 8000680:	693b      	ldr	r3, [r7, #16]
 8000682:	1ad3      	subs	r3, r2, r3
 8000684:	4a30      	ldr	r2, [pc, #192]	@ (8000748 <head_control+0xf0>)
 8000686:	6013      	str	r3, [r2, #0]
		if(diff1>=timeout1){
 8000688:	4b2f      	ldr	r3, [pc, #188]	@ (8000748 <head_control+0xf0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	68fa      	ldr	r2, [r7, #12]
 800068e:	429a      	cmp	r2, r3
 8000690:	d801      	bhi.n	8000696 <head_control+0x3e>
		return "error$"; }
 8000692:	4b2e      	ldr	r3, [pc, #184]	@ (800074c <head_control+0xf4>)
 8000694:	e052      	b.n	800073c <head_control+0xe4>

    	if (HAL_UART_Receive(huart, (uint8_t*)&received_char1, 1, 100) == HAL_OK) {
 8000696:	f107 010b 	add.w	r1, r7, #11
 800069a:	2364      	movs	r3, #100	@ 0x64
 800069c:	2201      	movs	r2, #1
 800069e:	6878      	ldr	r0, [r7, #4]
 80006a0:	f006 f806 	bl	80066b0 <HAL_UART_Receive>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d1e7      	bne.n	800067a <head_control+0x22>
        //if (HAL_UART_Receive(&huart5, (uint8_t*)&received_char1, 1, HAL_MAX_DELAY) == HAL_OK) {
        //if (HAL_UART_Receive(&huart5, (uint8_t*)received_char1, 1, HAL_MAX_DELAY) == HAL_OK) {
            // Skip adding to buffer if the received character is '\0'
    		if (received_char1=='H'){
 80006aa:	7afb      	ldrb	r3, [r7, #11]
 80006ac:	2b48      	cmp	r3, #72	@ 0x48
 80006ae:	d136      	bne.n	800071e <head_control+0xc6>
    			RxBuffer1[index++] = received_char1;
 80006b0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80006b4:	b2d3      	uxtb	r3, r2
 80006b6:	3301      	adds	r3, #1
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	75fb      	strb	r3, [r7, #23]
 80006bc:	7af9      	ldrb	r1, [r7, #11]
 80006be:	4b21      	ldr	r3, [pc, #132]	@ (8000744 <head_control+0xec>)
 80006c0:	5499      	strb	r1, [r3, r2]

    			while(1){
    				diff=HAL_GetTick()-start_time;
 80006c2:	f001 ff2d 	bl	8002520 <HAL_GetTick>
 80006c6:	4602      	mov	r2, r0
 80006c8:	693b      	ldr	r3, [r7, #16]
 80006ca:	1ad3      	subs	r3, r2, r3
 80006cc:	4a20      	ldr	r2, [pc, #128]	@ (8000750 <head_control+0xf8>)
 80006ce:	6013      	str	r3, [r2, #0]
    				if(diff>=timeout1){
 80006d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000750 <head_control+0xf8>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	68fa      	ldr	r2, [r7, #12]
 80006d6:	429a      	cmp	r2, r3
 80006d8:	d920      	bls.n	800071c <head_control+0xc4>
    				break;}
    				if (HAL_UART_Receive(huart, (uint8_t*)&received_char1, 1, 100) == HAL_OK) {
 80006da:	f107 010b 	add.w	r1, r7, #11
 80006de:	2364      	movs	r3, #100	@ 0x64
 80006e0:	2201      	movs	r2, #1
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f005 ffe4 	bl	80066b0 <HAL_UART_Receive>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d1e9      	bne.n	80006c2 <head_control+0x6a>


    						if (received_char1 == '\0') {
 80006ee:	7afb      	ldrb	r3, [r7, #11]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d011      	beq.n	8000718 <head_control+0xc0>
    							continue;
    						}


    						RxBuffer1[index++] = received_char1;
 80006f4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80006f8:	b2d3      	uxtb	r3, r2
 80006fa:	3301      	adds	r3, #1
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	75fb      	strb	r3, [r7, #23]
 8000700:	7af9      	ldrb	r1, [r7, #11]
 8000702:	4b10      	ldr	r3, [pc, #64]	@ (8000744 <head_control+0xec>)
 8000704:	5499      	strb	r1, [r3, r2]
            //HAL_Delay(1);
            // Break the loop if the end of the buffer is reached or if '$' is received
    						if (index >= RX_BUFFER_SIZE || received_char1 == '$') {
 8000706:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800070a:	2b1f      	cmp	r3, #31
 800070c:	dc02      	bgt.n	8000714 <head_control+0xbc>
 800070e:	7afb      	ldrb	r3, [r7, #11]
 8000710:	2b24      	cmp	r3, #36	@ 0x24
 8000712:	d1d6      	bne.n	80006c2 <head_control+0x6a>
    							return RxBuffer1;
 8000714:	4b0b      	ldr	r3, [pc, #44]	@ (8000744 <head_control+0xec>)
 8000716:	e011      	b.n	800073c <head_control+0xe4>
    							continue;
 8000718:	bf00      	nop
    				diff=HAL_GetTick()-start_time;
 800071a:	e7d2      	b.n	80006c2 <head_control+0x6a>
    				break;}
 800071c:	bf00      	nop
    						}
    						//else {break;}
    					}
    				}
    			}
    		if (index >= RX_BUFFER_SIZE || received_char1 == '$') {
 800071e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000722:	2b1f      	cmp	r3, #31
 8000724:	dc02      	bgt.n	800072c <head_control+0xd4>
 8000726:	7afb      	ldrb	r3, [r7, #11]
 8000728:	2b24      	cmp	r3, #36	@ 0x24
 800072a:	d101      	bne.n	8000730 <head_control+0xd8>
    			return RxBuffer1;
 800072c:	4b05      	ldr	r3, [pc, #20]	@ (8000744 <head_control+0xec>)
 800072e:	e005      	b.n	800073c <head_control+0xe4>
    		    						}
			if(diff>=timeout1){
 8000730:	4b07      	ldr	r3, [pc, #28]	@ (8000750 <head_control+0xf8>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	68fa      	ldr	r2, [r7, #12]
 8000736:	429a      	cmp	r2, r3
 8000738:	d89f      	bhi.n	800067a <head_control+0x22>
				return "error$";}
 800073a:	4b04      	ldr	r3, [pc, #16]	@ (800074c <head_control+0xf4>)

    // Null-terminate the string
    RxBuffer1[index] = '\0';

    return RxBuffer1;
}
 800073c:	4618      	mov	r0, r3
 800073e:	3718      	adds	r7, #24
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	200000c8 	.word	0x200000c8
 8000748:	200000f0 	.word	0x200000f0
 800074c:	08009590 	.word	0x08009590
 8000750:	200000ec 	.word	0x200000ec

08000754 <swtch_control>:

char* swtch_control(void){ //odbiór stanów czujników obrotu kafelka
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0

		memset(RxBuffer1, '\0', sizeof(RxBuffer1)); // Clear the buffer
 800075a:	2220      	movs	r2, #32
 800075c:	2100      	movs	r1, #0
 800075e:	4817      	ldr	r0, [pc, #92]	@ (80007bc <swtch_control+0x68>)
 8000760:	f007 fd32 	bl	80081c8 <memset>

	    char received_char2;
	    int8_t index = 0;
 8000764:	2300      	movs	r3, #0
 8000766:	71fb      	strb	r3, [r7, #7]

	    // Continue to receive characters until the character '$' is found
	    while (1) {
	            // Receive one character at a time
	        	if (HAL_UART_Receive(&huart5, (uint8_t*)&received_char2, 1, 1000) == HAL_OK) {
 8000768:	1db9      	adds	r1, r7, #6
 800076a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800076e:	2201      	movs	r2, #1
 8000770:	4813      	ldr	r0, [pc, #76]	@ (80007c0 <swtch_control+0x6c>)
 8000772:	f005 ff9d 	bl	80066b0 <HAL_UART_Receive>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d1f5      	bne.n	8000768 <swtch_control+0x14>

	        		// Skip adding to buffer if the received character is '\0'
	                if (received_char2 == '\0') {
 800077c:	79bb      	ldrb	r3, [r7, #6]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d010      	beq.n	80007a4 <swtch_control+0x50>
	                    continue;
	                }

	                RxBuffer1[index++] = received_char2;
 8000782:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000786:	b2d3      	uxtb	r3, r2
 8000788:	3301      	adds	r3, #1
 800078a:	b2db      	uxtb	r3, r3
 800078c:	71fb      	strb	r3, [r7, #7]
 800078e:	79b9      	ldrb	r1, [r7, #6]
 8000790:	4b0a      	ldr	r3, [pc, #40]	@ (80007bc <swtch_control+0x68>)
 8000792:	5499      	strb	r1, [r3, r2]
	                //HAL_Delay(1);
	                // Break the loop if the end of the buffer is reached or if '$' is received
	                if (index >= RX_BUFFER_SIZE || received_char2 == '$') {
 8000794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000798:	2b1f      	cmp	r3, #31
 800079a:	dc05      	bgt.n	80007a8 <swtch_control+0x54>
 800079c:	79bb      	ldrb	r3, [r7, #6]
 800079e:	2b24      	cmp	r3, #36	@ 0x24
 80007a0:	d002      	beq.n	80007a8 <swtch_control+0x54>
 80007a2:	e7e1      	b.n	8000768 <swtch_control+0x14>
	                    continue;
 80007a4:	bf00      	nop
	        	if (HAL_UART_Receive(&huart5, (uint8_t*)&received_char2, 1, 1000) == HAL_OK) {
 80007a6:	e7df      	b.n	8000768 <swtch_control+0x14>

	                }
	            }
	    }
	        // Null-terminate the string
	        RxBuffer1[index] = '\0';
 80007a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ac:	4a03      	ldr	r2, [pc, #12]	@ (80007bc <swtch_control+0x68>)
 80007ae:	2100      	movs	r1, #0
 80007b0:	54d1      	strb	r1, [r2, r3]

	        return RxBuffer1;
 80007b2:	4b02      	ldr	r3, [pc, #8]	@ (80007bc <swtch_control+0x68>)
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	200000c8 	.word	0x200000c8
 80007c0:	200002d0 	.word	0x200002d0

080007c4 <gaps_control>:
char* gaps_control(void){ //odbiór stanów czujników szczelinowych w odkręcaczach
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0

		memset(RxBuffer1, '\0', sizeof(RxBuffer1)); // Clear the buffer
 80007ca:	2220      	movs	r2, #32
 80007cc:	2100      	movs	r1, #0
 80007ce:	4817      	ldr	r0, [pc, #92]	@ (800082c <gaps_control+0x68>)
 80007d0:	f007 fcfa 	bl	80081c8 <memset>

	    char received_char2;
	    int8_t index = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	71fb      	strb	r3, [r7, #7]

	    // Continue to receive characters until the character '$' is found
	    while (1) {
	            // Receive one character at a time
	        	if (HAL_UART_Receive(&huart5, (uint8_t*)&received_char2, 1, 1000) == HAL_OK) {
 80007d8:	1db9      	adds	r1, r7, #6
 80007da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007de:	2201      	movs	r2, #1
 80007e0:	4813      	ldr	r0, [pc, #76]	@ (8000830 <gaps_control+0x6c>)
 80007e2:	f005 ff65 	bl	80066b0 <HAL_UART_Receive>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d1f5      	bne.n	80007d8 <gaps_control+0x14>

	        		// Skip adding to buffer if the received character is '\0'
	                if (received_char2 == '\0') {
 80007ec:	79bb      	ldrb	r3, [r7, #6]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d010      	beq.n	8000814 <gaps_control+0x50>
	                    continue;
	                }

	                RxBuffer1[index++] = received_char2;
 80007f2:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80007f6:	b2d3      	uxtb	r3, r2
 80007f8:	3301      	adds	r3, #1
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	71fb      	strb	r3, [r7, #7]
 80007fe:	79b9      	ldrb	r1, [r7, #6]
 8000800:	4b0a      	ldr	r3, [pc, #40]	@ (800082c <gaps_control+0x68>)
 8000802:	5499      	strb	r1, [r3, r2]
	                //HAL_Delay(1);
	                // Break the loop if the end of the buffer is reached or if '$' is received
	                if (index >= RX_BUFFER_SIZE || received_char2 == '$') {
 8000804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000808:	2b1f      	cmp	r3, #31
 800080a:	dc05      	bgt.n	8000818 <gaps_control+0x54>
 800080c:	79bb      	ldrb	r3, [r7, #6]
 800080e:	2b24      	cmp	r3, #36	@ 0x24
 8000810:	d002      	beq.n	8000818 <gaps_control+0x54>
 8000812:	e7e1      	b.n	80007d8 <gaps_control+0x14>
	                    continue;
 8000814:	bf00      	nop
	        	if (HAL_UART_Receive(&huart5, (uint8_t*)&received_char2, 1, 1000) == HAL_OK) {
 8000816:	e7df      	b.n	80007d8 <gaps_control+0x14>

	                }
	            }
	    }
	        // Null-terminate the string
	        RxBuffer1[index] = '\0';
 8000818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081c:	4a03      	ldr	r2, [pc, #12]	@ (800082c <gaps_control+0x68>)
 800081e:	2100      	movs	r1, #0
 8000820:	54d1      	strb	r1, [r2, r3]

	        return RxBuffer1;
 8000822:	4b02      	ldr	r3, [pc, #8]	@ (800082c <gaps_control+0x68>)
}
 8000824:	4618      	mov	r0, r3
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	200000c8 	.word	0x200000c8
 8000830:	200002d0 	.word	0x200002d0

08000834 <SPI_Communication>:
void SPI_Communication(void)
{
 8000834:	b590      	push	{r4, r7, lr}
 8000836:	b0a7      	sub	sp, #156	@ 0x9c
 8000838:	af02      	add	r7, sp, #8

    int8_t index = 0;
 800083a:	2300      	movs	r3, #0
 800083c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    uint8_t receivedData;
    uint8_t pinstate = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 8000840:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000844:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000848:	f002 f9ea 	bl	8002c20 <HAL_GPIO_ReadPin>
 800084c:	4603      	mov	r3, r0
 800084e:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e


    if (!pinstate) {memset(RxBuffer, 0, sizeof(RxBuffer));}
 8000852:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8000856:	2b00      	cmp	r3, #0
 8000858:	f040 82f9 	bne.w	8000e4e <SPI_Communication+0x61a>
 800085c:	2220      	movs	r2, #32
 800085e:	2100      	movs	r1, #0
 8000860:	48b3      	ldr	r0, [pc, #716]	@ (8000b30 <SPI_Communication+0x2fc>)
 8000862:	f007 fcb1 	bl	80081c8 <memset>

    while (!pinstate) {
 8000866:	e2f2      	b.n	8000e4e <SPI_Communication+0x61a>
        // Receive data from SPI
        HAL_SPI_Receive(&hspi1, &receivedData, 1, HAL_MAX_DELAY);
 8000868:	f107 0152 	add.w	r1, r7, #82	@ 0x52
 800086c:	f04f 33ff 	mov.w	r3, #4294967295
 8000870:	2201      	movs	r2, #1
 8000872:	48b0      	ldr	r0, [pc, #704]	@ (8000b34 <SPI_Communication+0x300>)
 8000874:	f003 fc6e 	bl	8004154 <HAL_SPI_Receive>

        // Check for buffer overflow
        if (index < MAX_BUFFER_SIZE)
 8000878:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 800087c:	2b1f      	cmp	r3, #31
 800087e:	f300 82e6 	bgt.w	8000e4e <SPI_Communication+0x61a>
        {
            // Store received data in buffer
            RxBuffer[index++] = (char)receivedData;
 8000882:	f997 208f 	ldrsb.w	r2, [r7, #143]	@ 0x8f
 8000886:	b2d3      	uxtb	r3, r2
 8000888:	3301      	adds	r3, #1
 800088a:	b2db      	uxtb	r3, r3
 800088c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8000890:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 8000894:	4ba6      	ldr	r3, [pc, #664]	@ (8000b30 <SPI_Communication+0x2fc>)
 8000896:	5499      	strb	r1, [r3, r2]

            // Check if end of message
            if ((char)receivedData == END_OF_MESSAGE)
 8000898:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800089c:	2b24      	cmp	r3, #36	@ 0x24
 800089e:	f040 82cd 	bne.w	8000e3c <SPI_Communication+0x608>
            {
            	char* command = command_checker(RxBuffer);
 80008a2:	48a3      	ldr	r0, [pc, #652]	@ (8000b30 <SPI_Communication+0x2fc>)
 80008a4:	f7ff fe9c 	bl	80005e0 <command_checker>
 80008a8:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
            	if(command == NULL){command = "MEM#ERR";}
 80008ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d103      	bne.n	80008bc <SPI_Communication+0x88>
 80008b4:	4ba0      	ldr	r3, [pc, #640]	@ (8000b38 <SPI_Communication+0x304>)
 80008b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80008ba:	e2aa      	b.n	8000e12 <SPI_Communication+0x5de>


////////////////////////////////////////////////////////////////////////////////////////////////////////////
            	//change to 2 heads
            	//done
            	else if(strcmp(command, "HEAD") == 0)
 80008bc:	499f      	ldr	r1, [pc, #636]	@ (8000b3c <SPI_Communication+0x308>)
 80008be:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80008c2:	f7ff fcad 	bl	8000220 <strcmp>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	f040 809b 	bne.w	8000a04 <SPI_Communication+0x1d0>
            	{


            		char WhichHead;
            		int HeadState;
            		char* received_data = NULL;  // Initialize to avoid undefined behavior
 80008ce:	2300      	movs	r3, #0
 80008d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            		char* str = NULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

            		memset(TxBuffer, '\0', sizeof(TxBuffer));
 80008da:	2220      	movs	r2, #32
 80008dc:	2100      	movs	r1, #0
 80008de:	4898      	ldr	r0, [pc, #608]	@ (8000b40 <SPI_Communication+0x30c>)
 80008e0:	f007 fc72 	bl	80081c8 <memset>
            		sscanf(RxBuffer, "HEAD#%c#%d$", &WhichHead,&HeadState);
 80008e4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80008e8:	f107 0251 	add.w	r2, r7, #81	@ 0x51
 80008ec:	4995      	ldr	r1, [pc, #596]	@ (8000b44 <SPI_Communication+0x310>)
 80008ee:	4890      	ldr	r0, [pc, #576]	@ (8000b30 <SPI_Communication+0x2fc>)
 80008f0:	f007 fb66 	bl	8007fc0 <siscanf>




            		if(WhichHead == 'A')
 80008f4:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 80008f8:	2b41      	cmp	r3, #65	@ 0x41
 80008fa:	d10f      	bne.n	800091c <SPI_Communication+0xe8>
            		{
            			HAL_UART_Transmit(&huart4, (uint8_t *)RxBuffer, strlen(RxBuffer), 100);
 80008fc:	488c      	ldr	r0, [pc, #560]	@ (8000b30 <SPI_Communication+0x2fc>)
 80008fe:	f7ff fc99 	bl	8000234 <strlen>
 8000902:	4603      	mov	r3, r0
 8000904:	b29a      	uxth	r2, r3
 8000906:	2364      	movs	r3, #100	@ 0x64
 8000908:	4989      	ldr	r1, [pc, #548]	@ (8000b30 <SPI_Communication+0x2fc>)
 800090a:	488f      	ldr	r0, [pc, #572]	@ (8000b48 <SPI_Communication+0x314>)
 800090c:	f005 fe42 	bl	8006594 <HAL_UART_Transmit>
            			received_data = head_control(&huart4);
 8000910:	488d      	ldr	r0, [pc, #564]	@ (8000b48 <SPI_Communication+0x314>)
 8000912:	f7ff fea1 	bl	8000658 <head_control>
 8000916:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
 800091a:	e016      	b.n	800094a <SPI_Communication+0x116>


            		}
            		else if(WhichHead == 'B')
 800091c:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8000920:	2b42      	cmp	r3, #66	@ 0x42
 8000922:	d10f      	bne.n	8000944 <SPI_Communication+0x110>
            		{
            			HAL_UART_Transmit(&huart5, (uint8_t *)RxBuffer, strlen(RxBuffer), 100);
 8000924:	4882      	ldr	r0, [pc, #520]	@ (8000b30 <SPI_Communication+0x2fc>)
 8000926:	f7ff fc85 	bl	8000234 <strlen>
 800092a:	4603      	mov	r3, r0
 800092c:	b29a      	uxth	r2, r3
 800092e:	2364      	movs	r3, #100	@ 0x64
 8000930:	497f      	ldr	r1, [pc, #508]	@ (8000b30 <SPI_Communication+0x2fc>)
 8000932:	4886      	ldr	r0, [pc, #536]	@ (8000b4c <SPI_Communication+0x318>)
 8000934:	f005 fe2e 	bl	8006594 <HAL_UART_Transmit>
            			received_data = head_control(&huart5);
 8000938:	4884      	ldr	r0, [pc, #528]	@ (8000b4c <SPI_Communication+0x318>)
 800093a:	f7ff fe8d 	bl	8000658 <head_control>
 800093e:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
 8000942:	e002      	b.n	800094a <SPI_Communication+0x116>

            		}
            		else{str = "error$";}
 8000944:	4b82      	ldr	r3, [pc, #520]	@ (8000b50 <SPI_Communication+0x31c>)
 8000946:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

            		memset(TxBuffer, '\0', sizeof(TxBuffer));
 800094a:	2220      	movs	r2, #32
 800094c:	2100      	movs	r1, #0
 800094e:	487c      	ldr	r0, [pc, #496]	@ (8000b40 <SPI_Communication+0x30c>)
 8000950:	f007 fc3a 	bl	80081c8 <memset>
            		if(strcmp(received_data, "HEAD#0#F0F0F0F0$") == 0 )
 8000954:	497f      	ldr	r1, [pc, #508]	@ (8000b54 <SPI_Communication+0x320>)
 8000956:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 800095a:	f7ff fc61 	bl	8000220 <strcmp>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d103      	bne.n	800096c <SPI_Communication+0x138>
            		{str = "HEAD#0#NOK$";}
 8000964:	4b7c      	ldr	r3, [pc, #496]	@ (8000b58 <SPI_Communication+0x324>)
 8000966:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800096a:	e022      	b.n	80009b2 <SPI_Communication+0x17e>
            		else if(strcmp(received_data, "HEAD#1#F0F0F0F0$") == 0 )
 800096c:	497b      	ldr	r1, [pc, #492]	@ (8000b5c <SPI_Communication+0x328>)
 800096e:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8000972:	f7ff fc55 	bl	8000220 <strcmp>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d103      	bne.n	8000984 <SPI_Communication+0x150>
            		{str = "HEAD#1#NOK$";}
 800097c:	4b78      	ldr	r3, [pc, #480]	@ (8000b60 <SPI_Communication+0x32c>)
 800097e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000982:	e016      	b.n	80009b2 <SPI_Communication+0x17e>
            		else if (received_data[5]=='0')
 8000984:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000988:	3305      	adds	r3, #5
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2b30      	cmp	r3, #48	@ 0x30
 800098e:	d103      	bne.n	8000998 <SPI_Communication+0x164>
            		{str = "HEAD#A#OK$";}
 8000990:	4b74      	ldr	r3, [pc, #464]	@ (8000b64 <SPI_Communication+0x330>)
 8000992:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000996:	e00c      	b.n	80009b2 <SPI_Communication+0x17e>
            		else if (received_data[5]=='1')
 8000998:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800099c:	3305      	adds	r3, #5
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	2b31      	cmp	r3, #49	@ 0x31
 80009a2:	d103      	bne.n	80009ac <SPI_Communication+0x178>
            		{str="HEAD#B#OK$";}
 80009a4:	4b70      	ldr	r3, [pc, #448]	@ (8000b68 <SPI_Communication+0x334>)
 80009a6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80009aa:	e002      	b.n	80009b2 <SPI_Communication+0x17e>
            		else{str="HEAD#0#NOK$";}
 80009ac:	4b6a      	ldr	r3, [pc, #424]	@ (8000b58 <SPI_Communication+0x324>)
 80009ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

            		if (received_data == NULL || strcmp(received_data, "error$") == 0){
 80009b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d007      	beq.n	80009ca <SPI_Communication+0x196>
 80009ba:	4965      	ldr	r1, [pc, #404]	@ (8000b50 <SPI_Communication+0x31c>)
 80009bc:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80009c0:	f7ff fc2e 	bl	8000220 <strcmp>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d110      	bne.n	80009ec <SPI_Communication+0x1b8>
            			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 80009ca:	2110      	movs	r1, #16
 80009cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009d0:	f002 f956 	bl	8002c80 <HAL_GPIO_TogglePin>
            			HAL_Delay(500);
 80009d4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80009d8:	f001 fdae 	bl	8002538 <HAL_Delay>
            			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 80009dc:	2110      	movs	r1, #16
 80009de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009e2:	f002 f94d 	bl	8002c80 <HAL_GPIO_TogglePin>
            			str = "error$";}
 80009e6:	4b5a      	ldr	r3, [pc, #360]	@ (8000b50 <SPI_Communication+0x31c>)
 80009e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

            		strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
 80009ec:	221f      	movs	r2, #31
 80009ee:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 80009f2:	4853      	ldr	r0, [pc, #332]	@ (8000b40 <SPI_Communication+0x30c>)
 80009f4:	f007 fbf0 	bl	80081d8 <strncpy>
            		memset(RxBuffer, '\0', sizeof(RxBuffer));
 80009f8:	2220      	movs	r2, #32
 80009fa:	2100      	movs	r1, #0
 80009fc:	484c      	ldr	r0, [pc, #304]	@ (8000b30 <SPI_Communication+0x2fc>)
 80009fe:	f007 fbe3 	bl	80081c8 <memset>
 8000a02:	e206      	b.n	8000e12 <SPI_Communication+0x5de>

            	 }
///////////////////////////////////////////////////////////////////////////////////////////////////////////
            	// fix it according to the commands file
            	//done
            	else if(strcmp(command, "MAGNET") == 0)
 8000a04:	4959      	ldr	r1, [pc, #356]	@ (8000b6c <SPI_Communication+0x338>)
 8000a06:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8000a0a:	f7ff fc09 	bl	8000220 <strcmp>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d166      	bne.n	8000ae2 <SPI_Communication+0x2ae>


            		int8_t MagState;
            		char WhitchMag;
            		char message_to_uart;
            		memset(TxBuffer, '\0', sizeof(TxBuffer));
 8000a14:	2220      	movs	r2, #32
 8000a16:	2100      	movs	r1, #0
 8000a18:	4849      	ldr	r0, [pc, #292]	@ (8000b40 <SPI_Communication+0x30c>)
 8000a1a:	f007 fbd5 	bl	80081c8 <memset>
					sscanf(RxBuffer, "MAGNET#%c#%d$", &WhitchMag,&MagState);
 8000a1e:	f107 034b 	add.w	r3, r7, #75	@ 0x4b
 8000a22:	f107 024a 	add.w	r2, r7, #74	@ 0x4a
 8000a26:	4952      	ldr	r1, [pc, #328]	@ (8000b70 <SPI_Communication+0x33c>)
 8000a28:	4841      	ldr	r0, [pc, #260]	@ (8000b30 <SPI_Communication+0x2fc>)
 8000a2a:	f007 fac9 	bl	8007fc0 <siscanf>
					sprintf(message_to_uart, "MAGNET#%d$", MagState);
 8000a2e:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000a32:	4618      	mov	r0, r3
 8000a34:	f997 304b 	ldrsb.w	r3, [r7, #75]	@ 0x4b
 8000a38:	461a      	mov	r2, r3
 8000a3a:	494e      	ldr	r1, [pc, #312]	@ (8000b74 <SPI_Communication+0x340>)
 8000a3c:	f007 faa0 	bl	8007f80 <siprintf>

					if (WhitchMag == 'A')
 8000a40:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8000a44:	2b41      	cmp	r3, #65	@ 0x41
 8000a46:	d110      	bne.n	8000a6a <SPI_Communication+0x236>
					{
					  HAL_UART_Transmit(&huart5, (uint8_t *)message_to_uart, strlen(message_to_uart), HAL_MAX_DELAY);
 8000a48:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000a4c:	461c      	mov	r4, r3
 8000a4e:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff fbee 	bl	8000234 <strlen>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	b29a      	uxth	r2, r3
 8000a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a60:	4621      	mov	r1, r4
 8000a62:	483a      	ldr	r0, [pc, #232]	@ (8000b4c <SPI_Communication+0x318>)
 8000a64:	f005 fd96 	bl	8006594 <HAL_UART_Transmit>
 8000a68:	e013      	b.n	8000a92 <SPI_Communication+0x25e>
					}
					else if (WhitchMag == 'B')
 8000a6a:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8000a6e:	2b42      	cmp	r3, #66	@ 0x42
 8000a70:	d10f      	bne.n	8000a92 <SPI_Communication+0x25e>
					{
					  HAL_UART_Transmit(&huart4, (uint8_t *)message_to_uart, strlen(message_to_uart), HAL_MAX_DELAY);
 8000a72:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000a76:	461c      	mov	r4, r3
 8000a78:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff fbd9 	bl	8000234 <strlen>
 8000a82:	4603      	mov	r3, r0
 8000a84:	b29a      	uxth	r2, r3
 8000a86:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8a:	4621      	mov	r1, r4
 8000a8c:	482e      	ldr	r0, [pc, #184]	@ (8000b48 <SPI_Communication+0x314>)
 8000a8e:	f005 fd81 	bl	8006594 <HAL_UART_Transmit>
					}
					TileON = (MagState != 0) ? 1 : 0;
 8000a92:	f997 304b 	ldrsb.w	r3, [r7, #75]	@ 0x4b
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	bf14      	ite	ne
 8000a9a:	2301      	movne	r3, #1
 8000a9c:	2300      	moveq	r3, #0
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	b25a      	sxtb	r2, r3
 8000aa2:	4b35      	ldr	r3, [pc, #212]	@ (8000b78 <SPI_Communication+0x344>)
 8000aa4:	701a      	strb	r2, [r3, #0]
					%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
					*/


					char response[50];
					sprintf(response, "MAGNET#%c#%d#OK$", WhitchMag, MagState);
 8000aa6:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8000aaa:	461a      	mov	r2, r3
 8000aac:	f997 304b 	ldrsb.w	r3, [r7, #75]	@ 0x4b
 8000ab0:	4638      	mov	r0, r7
 8000ab2:	4932      	ldr	r1, [pc, #200]	@ (8000b7c <SPI_Communication+0x348>)
 8000ab4:	f007 fa64 	bl	8007f80 <siprintf>

					strncpy(TxBuffer, response, sizeof(TxBuffer) - 1);
 8000ab8:	463b      	mov	r3, r7
 8000aba:	221f      	movs	r2, #31
 8000abc:	4619      	mov	r1, r3
 8000abe:	4820      	ldr	r0, [pc, #128]	@ (8000b40 <SPI_Communication+0x30c>)
 8000ac0:	f007 fb8a 	bl	80081d8 <strncpy>
					HAL_Delay(200);
 8000ac4:	20c8      	movs	r0, #200	@ 0xc8
 8000ac6:	f001 fd37 	bl	8002538 <HAL_Delay>
					//char *str = "MAGNET#4#OK$";
					//HAL_Delay(200);
					//strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
            		//HAL_Delay(200);

            		memset(RxBuffer, '\0', sizeof(RxBuffer));
 8000aca:	2220      	movs	r2, #32
 8000acc:	2100      	movs	r1, #0
 8000ace:	4818      	ldr	r0, [pc, #96]	@ (8000b30 <SPI_Communication+0x2fc>)
 8000ad0:	f007 fb7a 	bl	80081c8 <memset>
            		memset(response,'\0',sizeof(response));
 8000ad4:	463b      	mov	r3, r7
 8000ad6:	2232      	movs	r2, #50	@ 0x32
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4618      	mov	r0, r3
 8000adc:	f007 fb74 	bl	80081c8 <memset>
 8000ae0:	e197      	b.n	8000e12 <SPI_Communication+0x5de>
            	}
///////////////////////////////////////////////////////////////////////////////////////////////////////////
            	else if(strcmp(command,"ROT")==0)
 8000ae2:	4927      	ldr	r1, [pc, #156]	@ (8000b80 <SPI_Communication+0x34c>)
 8000ae4:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8000ae8:	f7ff fb9a 	bl	8000220 <strcmp>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d14c      	bne.n	8000b8c <SPI_Communication+0x358>
            	{
            		    int number;
            		    sscanf(RxBuffer, "ROT#%d$", &number);
 8000af2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000af6:	461a      	mov	r2, r3
 8000af8:	4922      	ldr	r1, [pc, #136]	@ (8000b84 <SPI_Communication+0x350>)
 8000afa:	480d      	ldr	r0, [pc, #52]	@ (8000b30 <SPI_Communication+0x2fc>)
 8000afc:	f007 fa60 	bl	8007fc0 <siscanf>
            		    Motor_Steer(number);
 8000b00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000b02:	b25b      	sxtb	r3, r3
 8000b04:	4618      	mov	r0, r3
 8000b06:	f000 fd71 	bl	80015ec <Motor_Steer>
            		memset(TxBuffer, '\0', sizeof(TxBuffer));
 8000b0a:	2220      	movs	r2, #32
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	480c      	ldr	r0, [pc, #48]	@ (8000b40 <SPI_Communication+0x30c>)
 8000b10:	f007 fb5a 	bl	80081c8 <memset>
            		char *str = "ROT#OK$";
 8000b14:	4b1c      	ldr	r3, [pc, #112]	@ (8000b88 <SPI_Communication+0x354>)
 8000b16:	657b      	str	r3, [r7, #84]	@ 0x54
            		strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
 8000b18:	221f      	movs	r2, #31
 8000b1a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8000b1c:	4808      	ldr	r0, [pc, #32]	@ (8000b40 <SPI_Communication+0x30c>)
 8000b1e:	f007 fb5b 	bl	80081d8 <strncpy>
            		memset(RxBuffer, '\0', sizeof(RxBuffer));
 8000b22:	2220      	movs	r2, #32
 8000b24:	2100      	movs	r1, #0
 8000b26:	4802      	ldr	r0, [pc, #8]	@ (8000b30 <SPI_Communication+0x2fc>)
 8000b28:	f007 fb4e 	bl	80081c8 <memset>
 8000b2c:	e171      	b.n	8000e12 <SPI_Communication+0x5de>
 8000b2e:	bf00      	nop
 8000b30:	20000088 	.word	0x20000088
 8000b34:	200000f4 	.word	0x200000f4
 8000b38:	08009598 	.word	0x08009598
 8000b3c:	080095a0 	.word	0x080095a0
 8000b40:	200000a8 	.word	0x200000a8
 8000b44:	080095a8 	.word	0x080095a8
 8000b48:	2000023c 	.word	0x2000023c
 8000b4c:	200002d0 	.word	0x200002d0
 8000b50:	08009590 	.word	0x08009590
 8000b54:	080095b4 	.word	0x080095b4
 8000b58:	080095c8 	.word	0x080095c8
 8000b5c:	080095d4 	.word	0x080095d4
 8000b60:	080095e8 	.word	0x080095e8
 8000b64:	080095f4 	.word	0x080095f4
 8000b68:	08009600 	.word	0x08009600
 8000b6c:	0800960c 	.word	0x0800960c
 8000b70:	08009614 	.word	0x08009614
 8000b74:	08009624 	.word	0x08009624
 8000b78:	200000e9 	.word	0x200000e9
 8000b7c:	08009630 	.word	0x08009630
 8000b80:	08009644 	.word	0x08009644
 8000b84:	08009648 	.word	0x08009648
 8000b88:	08009650 	.word	0x08009650
            	}
/////////////////////////////////////////////////////////////////////////////////////////////////////////
            	//need a fix for 2 heads
            	else if(strcmp(command,"AROT")==0)
 8000b8c:	49b5      	ldr	r1, [pc, #724]	@ (8000e64 <SPI_Communication+0x630>)
 8000b8e:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8000b92:	f7ff fb45 	bl	8000220 <strcmp>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d147      	bne.n	8000c2c <SPI_Communication+0x3f8>
            	{
            	    uint32_t start_time=HAL_GetTick();
 8000b9c:	f001 fcc0 	bl	8002520 <HAL_GetTick>
 8000ba0:	66f8      	str	r0, [r7, #108]	@ 0x6c
            	    uint32_t timeout1=10000;
 8000ba2:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000ba6:	66bb      	str	r3, [r7, #104]	@ 0x68

            		 int number;
            		 sscanf(RxBuffer, "AROT#%d$", &number);
 8000ba8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000bac:	461a      	mov	r2, r3
 8000bae:	49ae      	ldr	r1, [pc, #696]	@ (8000e68 <SPI_Communication+0x634>)
 8000bb0:	48ae      	ldr	r0, [pc, #696]	@ (8000e6c <SPI_Communication+0x638>)
 8000bb2:	f007 fa05 	bl	8007fc0 <siscanf>


            		 ABSRotateHead(number);
 8000bb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000bb8:	b25b      	sxtb	r3, r3
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f000 fdb8 	bl	8001730 <ABSRotateHead>
            		 //char number1=number;
            		 memset(TxBuffer, '\0', sizeof(TxBuffer));
 8000bc0:	2220      	movs	r2, #32
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	48aa      	ldr	r0, [pc, #680]	@ (8000e70 <SPI_Communication+0x63c>)
 8000bc6:	f007 faff 	bl	80081c8 <memset>
            		 //if ()
            		 if (number== 1){
 8000bca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d107      	bne.n	8000be0 <SPI_Communication+0x3ac>
            		 	 char *str = "AROT#1#OK$";
 8000bd0:	4ba8      	ldr	r3, [pc, #672]	@ (8000e74 <SPI_Communication+0x640>)
 8000bd2:	65bb      	str	r3, [r7, #88]	@ 0x58
            		 	 strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
 8000bd4:	221f      	movs	r2, #31
 8000bd6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8000bd8:	48a5      	ldr	r0, [pc, #660]	@ (8000e70 <SPI_Communication+0x63c>)
 8000bda:	f007 fafd 	bl	80081d8 <strncpy>
 8000bde:	e01f      	b.n	8000c20 <SPI_Communication+0x3ec>
            		 }
            		 else if (number==0){
 8000be0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d107      	bne.n	8000bf6 <SPI_Communication+0x3c2>
            			 char *str = "AROT#0#OK$";
 8000be6:	4ba4      	ldr	r3, [pc, #656]	@ (8000e78 <SPI_Communication+0x644>)
 8000be8:	65fb      	str	r3, [r7, #92]	@ 0x5c
            			 strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
 8000bea:	221f      	movs	r2, #31
 8000bec:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8000bee:	48a0      	ldr	r0, [pc, #640]	@ (8000e70 <SPI_Communication+0x63c>)
 8000bf0:	f007 faf2 	bl	80081d8 <strncpy>
 8000bf4:	e014      	b.n	8000c20 <SPI_Communication+0x3ec>
            		 }
            		 else if (number==2){
 8000bf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000bf8:	2b02      	cmp	r3, #2
 8000bfa:	d107      	bne.n	8000c0c <SPI_Communication+0x3d8>
            		 	 char *str = "AROT#2#OK$";
 8000bfc:	4b9f      	ldr	r3, [pc, #636]	@ (8000e7c <SPI_Communication+0x648>)
 8000bfe:	663b      	str	r3, [r7, #96]	@ 0x60
            		 	 strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
 8000c00:	221f      	movs	r2, #31
 8000c02:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8000c04:	489a      	ldr	r0, [pc, #616]	@ (8000e70 <SPI_Communication+0x63c>)
 8000c06:	f007 fae7 	bl	80081d8 <strncpy>
 8000c0a:	e009      	b.n	8000c20 <SPI_Communication+0x3ec>
            		 }
            		 else if (number==3){
 8000c0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000c0e:	2b03      	cmp	r3, #3
 8000c10:	d106      	bne.n	8000c20 <SPI_Communication+0x3ec>
            		 	 char *str = "AROT#3#OK$";
 8000c12:	4b9b      	ldr	r3, [pc, #620]	@ (8000e80 <SPI_Communication+0x64c>)
 8000c14:	667b      	str	r3, [r7, #100]	@ 0x64
            		 	 strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
 8000c16:	221f      	movs	r2, #31
 8000c18:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8000c1a:	4895      	ldr	r0, [pc, #596]	@ (8000e70 <SPI_Communication+0x63c>)
 8000c1c:	f007 fadc 	bl	80081d8 <strncpy>
            		 }
            		// strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
            		 memset(RxBuffer, '\0', sizeof(RxBuffer));
 8000c20:	2220      	movs	r2, #32
 8000c22:	2100      	movs	r1, #0
 8000c24:	4891      	ldr	r0, [pc, #580]	@ (8000e6c <SPI_Communication+0x638>)
 8000c26:	f007 facf 	bl	80081c8 <memset>
 8000c2a:	e0f2      	b.n	8000e12 <SPI_Communication+0x5de>
            	}
/////////////////////////////////////////////////////////////////////////////////////////////////////////


            	else if(strcmp(command,"TILEBASE")==0) //bazowanie obortu kafelka
 8000c2c:	4995      	ldr	r1, [pc, #596]	@ (8000e84 <SPI_Communication+0x650>)
 8000c2e:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8000c32:	f7ff faf5 	bl	8000220 <strcmp>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d14c      	bne.n	8000cd6 <SPI_Communication+0x4a2>
            	{
            		char WhitchTile;
            		char response[32];

            		sscanf(RxBuffer, "TILEBASE#%c$", &WhitchTile);
 8000c3c:	f107 033f 	add.w	r3, r7, #63	@ 0x3f
 8000c40:	461a      	mov	r2, r3
 8000c42:	4991      	ldr	r1, [pc, #580]	@ (8000e88 <SPI_Communication+0x654>)
 8000c44:	4889      	ldr	r0, [pc, #548]	@ (8000e6c <SPI_Communication+0x638>)
 8000c46:	f007 f9bb 	bl	8007fc0 <siscanf>

            		if(WhitchTile == 'A')
 8000c4a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000c4e:	2b41      	cmp	r3, #65	@ 0x41
 8000c50:	d103      	bne.n	8000c5a <SPI_Communication+0x426>
            		{HeadBase(&huart4);}
 8000c52:	488e      	ldr	r0, [pc, #568]	@ (8000e8c <SPI_Communication+0x658>)
 8000c54:	f001 f806 	bl	8001c64 <HeadBase>
 8000c58:	e006      	b.n	8000c68 <SPI_Communication+0x434>
            		else if(WhitchTile == 'B')
 8000c5a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000c5e:	2b42      	cmp	r3, #66	@ 0x42
 8000c60:	d102      	bne.n	8000c68 <SPI_Communication+0x434>
            		{HeadBase(&huart5);}
 8000c62:	488b      	ldr	r0, [pc, #556]	@ (8000e90 <SPI_Communication+0x65c>)
 8000c64:	f000 fffe 	bl	8001c64 <HeadBase>

            		memset(TxBuffer, '\0', sizeof(TxBuffer));
 8000c68:	2220      	movs	r2, #32
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4880      	ldr	r0, [pc, #512]	@ (8000e70 <SPI_Communication+0x63c>)
 8000c6e:	f007 faab 	bl	80081c8 <memset>
            		GPIO_PinState current_state = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7); // Read pin state
 8000c72:	2180      	movs	r1, #128	@ 0x80
 8000c74:	4887      	ldr	r0, [pc, #540]	@ (8000e94 <SPI_Communication+0x660>)
 8000c76:	f001 ffd3 	bl	8002c20 <HAL_GPIO_ReadPin>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
            		if (current_state == GPIO_PIN_SET)
 8000c80:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d108      	bne.n	8000c9a <SPI_Communication+0x466>
            		{
            			sprintf(response, "TILEBASE#%c#OK$", WhitchTile);
 8000c88:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	463b      	mov	r3, r7
 8000c90:	4981      	ldr	r1, [pc, #516]	@ (8000e98 <SPI_Communication+0x664>)
 8000c92:	4618      	mov	r0, r3
 8000c94:	f007 f974 	bl	8007f80 <siprintf>
 8000c98:	e00b      	b.n	8000cb2 <SPI_Communication+0x47e>
            		}
            		else if (current_state == GPIO_PIN_RESET)
 8000c9a:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d107      	bne.n	8000cb2 <SPI_Communication+0x47e>
            		{
            			sprintf(response, "TILEBASE#%c#NOK$", WhitchTile);
 8000ca2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	463b      	mov	r3, r7
 8000caa:	497c      	ldr	r1, [pc, #496]	@ (8000e9c <SPI_Communication+0x668>)
 8000cac:	4618      	mov	r0, r3
 8000cae:	f007 f967 	bl	8007f80 <siprintf>
            		}

            		strncpy(TxBuffer, response, sizeof(response) - 1);
 8000cb2:	463b      	mov	r3, r7
 8000cb4:	221f      	movs	r2, #31
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	486d      	ldr	r0, [pc, #436]	@ (8000e70 <SPI_Communication+0x63c>)
 8000cba:	f007 fa8d 	bl	80081d8 <strncpy>

            		//strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
            		memset(RxBuffer, '\0', sizeof(RxBuffer));
 8000cbe:	2220      	movs	r2, #32
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	486a      	ldr	r0, [pc, #424]	@ (8000e6c <SPI_Communication+0x638>)
 8000cc4:	f007 fa80 	bl	80081c8 <memset>
            		memset(response , '\0' , sizeof(response));
 8000cc8:	463b      	mov	r3, r7
 8000cca:	2220      	movs	r2, #32
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f007 fa7a 	bl	80081c8 <memset>
 8000cd4:	e09d      	b.n	8000e12 <SPI_Communication+0x5de>
            	}


////////////////////////////////////////////////////////////////////////////////////////////////////////
            	else if(strcmp(command,"SWTCH")==0) //Wysyłka stanu obrotu czujnika 0-wcisniety, 1-pusty
 8000cd6:	4972      	ldr	r1, [pc, #456]	@ (8000ea0 <SPI_Communication+0x66c>)
 8000cd8:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8000cdc:	f7ff faa0 	bl	8000220 <strcmp>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d151      	bne.n	8000d8a <SPI_Communication+0x556>
            	{
            		HAL_UART_Transmit(&huart5, (uint8_t *)RxBuffer, strlen(RxBuffer), HAL_MAX_DELAY);
 8000ce6:	4861      	ldr	r0, [pc, #388]	@ (8000e6c <SPI_Communication+0x638>)
 8000ce8:	f7ff faa4 	bl	8000234 <strlen>
 8000cec:	4603      	mov	r3, r0
 8000cee:	b29a      	uxth	r2, r3
 8000cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf4:	495d      	ldr	r1, [pc, #372]	@ (8000e6c <SPI_Communication+0x638>)
 8000cf6:	4866      	ldr	r0, [pc, #408]	@ (8000e90 <SPI_Communication+0x65c>)
 8000cf8:	f005 fc4c 	bl	8006594 <HAL_UART_Transmit>
            		//HAL_Delay(1);
            		char* received_data = swtch_control();
 8000cfc:	f7ff fd2a 	bl	8000754 <swtch_control>
 8000d00:	6778      	str	r0, [r7, #116]	@ 0x74
            		char* str;
            		memset(TxBuffer, '\0', sizeof(TxBuffer));
 8000d02:	2220      	movs	r2, #32
 8000d04:	2100      	movs	r1, #0
 8000d06:	485a      	ldr	r0, [pc, #360]	@ (8000e70 <SPI_Communication+0x63c>)
 8000d08:	f007 fa5e 	bl	80081c8 <memset>
            		if((strcmp(received_data, "S#0000$")==0)){str = "SWTCH#0#0#0#0$";}
 8000d0c:	4965      	ldr	r1, [pc, #404]	@ (8000ea4 <SPI_Communication+0x670>)
 8000d0e:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8000d10:	f7ff fa86 	bl	8000220 <strcmp>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d102      	bne.n	8000d20 <SPI_Communication+0x4ec>
 8000d1a:	4b63      	ldr	r3, [pc, #396]	@ (8000ea8 <SPI_Communication+0x674>)
 8000d1c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000d1e:	e029      	b.n	8000d74 <SPI_Communication+0x540>
            		else if ((strcmp(received_data, "S#1000$")==0)){str = "SWTCH#1#0#0#0$";}
 8000d20:	4962      	ldr	r1, [pc, #392]	@ (8000eac <SPI_Communication+0x678>)
 8000d22:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8000d24:	f7ff fa7c 	bl	8000220 <strcmp>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d102      	bne.n	8000d34 <SPI_Communication+0x500>
 8000d2e:	4b60      	ldr	r3, [pc, #384]	@ (8000eb0 <SPI_Communication+0x67c>)
 8000d30:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000d32:	e01f      	b.n	8000d74 <SPI_Communication+0x540>
            		else if ((strcmp(received_data, "S#0100$")==0)){str = "SWTCH#0#1#0#0$";}
 8000d34:	495f      	ldr	r1, [pc, #380]	@ (8000eb4 <SPI_Communication+0x680>)
 8000d36:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8000d38:	f7ff fa72 	bl	8000220 <strcmp>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d102      	bne.n	8000d48 <SPI_Communication+0x514>
 8000d42:	4b5d      	ldr	r3, [pc, #372]	@ (8000eb8 <SPI_Communication+0x684>)
 8000d44:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000d46:	e015      	b.n	8000d74 <SPI_Communication+0x540>
            		else if ((strcmp(received_data, "S#0010$")==0)){str = "SWTCH#0#0#1#0$";}
 8000d48:	495c      	ldr	r1, [pc, #368]	@ (8000ebc <SPI_Communication+0x688>)
 8000d4a:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8000d4c:	f7ff fa68 	bl	8000220 <strcmp>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d102      	bne.n	8000d5c <SPI_Communication+0x528>
 8000d56:	4b5a      	ldr	r3, [pc, #360]	@ (8000ec0 <SPI_Communication+0x68c>)
 8000d58:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000d5a:	e00b      	b.n	8000d74 <SPI_Communication+0x540>
            		else if ((strcmp(received_data, "S#0001$")==0)){str = "SWTCH#0#0#0#1$";}
 8000d5c:	4959      	ldr	r1, [pc, #356]	@ (8000ec4 <SPI_Communication+0x690>)
 8000d5e:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8000d60:	f7ff fa5e 	bl	8000220 <strcmp>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d102      	bne.n	8000d70 <SPI_Communication+0x53c>
 8000d6a:	4b57      	ldr	r3, [pc, #348]	@ (8000ec8 <SPI_Communication+0x694>)
 8000d6c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000d6e:	e001      	b.n	8000d74 <SPI_Communication+0x540>
            		else{str="SWTCH#ERR$";}
 8000d70:	4b56      	ldr	r3, [pc, #344]	@ (8000ecc <SPI_Communication+0x698>)
 8000d72:	67fb      	str	r3, [r7, #124]	@ 0x7c

            		strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
 8000d74:	221f      	movs	r2, #31
 8000d76:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8000d78:	483d      	ldr	r0, [pc, #244]	@ (8000e70 <SPI_Communication+0x63c>)
 8000d7a:	f007 fa2d 	bl	80081d8 <strncpy>
            		memset(RxBuffer, '\0', sizeof(RxBuffer));
 8000d7e:	2220      	movs	r2, #32
 8000d80:	2100      	movs	r1, #0
 8000d82:	483a      	ldr	r0, [pc, #232]	@ (8000e6c <SPI_Communication+0x638>)
 8000d84:	f007 fa20 	bl	80081c8 <memset>
 8000d88:	e043      	b.n	8000e12 <SPI_Communication+0x5de>

            	}
            	////////////////////////////////////////////////////////////////////////////////////////////////////////
            	else if(strcmp(command,"GAPS")==0) //Wysyłka stanu obrotu czujnika 0-wcisniety, 1-pusty
 8000d8a:	4951      	ldr	r1, [pc, #324]	@ (8000ed0 <SPI_Communication+0x69c>)
 8000d8c:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8000d90:	f7ff fa46 	bl	8000220 <strcmp>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d13b      	bne.n	8000e12 <SPI_Communication+0x5de>
            	{
            		HAL_UART_Transmit(&huart5, (uint8_t *)RxBuffer, strlen(RxBuffer), HAL_MAX_DELAY);
 8000d9a:	4834      	ldr	r0, [pc, #208]	@ (8000e6c <SPI_Communication+0x638>)
 8000d9c:	f7ff fa4a 	bl	8000234 <strlen>
 8000da0:	4603      	mov	r3, r0
 8000da2:	b29a      	uxth	r2, r3
 8000da4:	f04f 33ff 	mov.w	r3, #4294967295
 8000da8:	4930      	ldr	r1, [pc, #192]	@ (8000e6c <SPI_Communication+0x638>)
 8000daa:	4839      	ldr	r0, [pc, #228]	@ (8000e90 <SPI_Communication+0x65c>)
 8000dac:	f005 fbf2 	bl	8006594 <HAL_UART_Transmit>
            		//HAL_Delay(1);
            		char* received_data = gaps_control();
 8000db0:	f7ff fd08 	bl	80007c4 <gaps_control>
 8000db4:	67b8      	str	r0, [r7, #120]	@ 0x78
            		char output[11];
            		sprintf(output,"G#%c#%c#%c#%c$",received_data[2],received_data[3],received_data[4],received_data[5] );
 8000db6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000db8:	3302      	adds	r3, #2
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000dc0:	3303      	adds	r3, #3
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	461c      	mov	r4, r3
 8000dc6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000dc8:	3304      	adds	r3, #4
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	461a      	mov	r2, r3
 8000dce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000dd0:	3305      	adds	r3, #5
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8000dd8:	9301      	str	r3, [sp, #4]
 8000dda:	9200      	str	r2, [sp, #0]
 8000ddc:	4623      	mov	r3, r4
 8000dde:	460a      	mov	r2, r1
 8000de0:	493c      	ldr	r1, [pc, #240]	@ (8000ed4 <SPI_Communication+0x6a0>)
 8000de2:	f007 f8cd 	bl	8007f80 <siprintf>
            		printf("%s\n", output);
 8000de6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000dea:	4618      	mov	r0, r3
 8000dec:	f007 f8c0 	bl	8007f70 <puts>
            		memset(TxBuffer, '\0', sizeof(TxBuffer));
 8000df0:	2220      	movs	r2, #32
 8000df2:	2100      	movs	r1, #0
 8000df4:	481e      	ldr	r0, [pc, #120]	@ (8000e70 <SPI_Communication+0x63c>)
 8000df6:	f007 f9e7 	bl	80081c8 <memset>

            		strncpy(TxBuffer, output, sizeof(TxBuffer) - 1);
 8000dfa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000dfe:	221f      	movs	r2, #31
 8000e00:	4619      	mov	r1, r3
 8000e02:	481b      	ldr	r0, [pc, #108]	@ (8000e70 <SPI_Communication+0x63c>)
 8000e04:	f007 f9e8 	bl	80081d8 <strncpy>
            		memset(RxBuffer, '\0', sizeof(RxBuffer));
 8000e08:	2220      	movs	r2, #32
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	4817      	ldr	r0, [pc, #92]	@ (8000e6c <SPI_Communication+0x638>)
 8000e0e:	f007 f9db 	bl	80081c8 <memset>

            	}

                HAL_SPI_Transmit(&hspi1, (uint8_t *)TxBuffer, strlen(TxBuffer), HAL_MAX_DELAY);
 8000e12:	4817      	ldr	r0, [pc, #92]	@ (8000e70 <SPI_Communication+0x63c>)
 8000e14:	f7ff fa0e 	bl	8000234 <strlen>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	b29a      	uxth	r2, r3
 8000e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e20:	4913      	ldr	r1, [pc, #76]	@ (8000e70 <SPI_Communication+0x63c>)
 8000e22:	482d      	ldr	r0, [pc, #180]	@ (8000ed8 <SPI_Communication+0x6a4>)
 8000e24:	f003 f821 	bl	8003e6a <HAL_SPI_Transmit>
            	//HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)TxBuffer, strlen(TxBuffer));
                index = 0; // Reset buffer index
 8000e28:	2300      	movs	r3, #0
 8000e2a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
                //memset(TxBuffer, '\0', sizeof(TxBuffer));
                free(command);
 8000e2e:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8000e32:	f006 fecf 	bl	8007bd4 <free>
                command = NULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        }

        // Update pin state
        pinstate = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 8000e3c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e44:	f001 feec 	bl	8002c20 <HAL_GPIO_ReadPin>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
    while (!pinstate) {
 8000e4e:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	f43f ad08 	beq.w	8000868 <SPI_Communication+0x34>

    }
    }
}
 8000e58:	bf00      	nop
 8000e5a:	bf00      	nop
 8000e5c:	3794      	adds	r7, #148	@ 0x94
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd90      	pop	{r4, r7, pc}
 8000e62:	bf00      	nop
 8000e64:	08009658 	.word	0x08009658
 8000e68:	08009660 	.word	0x08009660
 8000e6c:	20000088 	.word	0x20000088
 8000e70:	200000a8 	.word	0x200000a8
 8000e74:	0800966c 	.word	0x0800966c
 8000e78:	08009678 	.word	0x08009678
 8000e7c:	08009684 	.word	0x08009684
 8000e80:	08009690 	.word	0x08009690
 8000e84:	0800969c 	.word	0x0800969c
 8000e88:	080096a8 	.word	0x080096a8
 8000e8c:	2000023c 	.word	0x2000023c
 8000e90:	200002d0 	.word	0x200002d0
 8000e94:	48001000 	.word	0x48001000
 8000e98:	080096b8 	.word	0x080096b8
 8000e9c:	080096c8 	.word	0x080096c8
 8000ea0:	080096dc 	.word	0x080096dc
 8000ea4:	080096e4 	.word	0x080096e4
 8000ea8:	080096ec 	.word	0x080096ec
 8000eac:	080096fc 	.word	0x080096fc
 8000eb0:	08009704 	.word	0x08009704
 8000eb4:	08009714 	.word	0x08009714
 8000eb8:	0800971c 	.word	0x0800971c
 8000ebc:	0800972c 	.word	0x0800972c
 8000ec0:	08009734 	.word	0x08009734
 8000ec4:	08009744 	.word	0x08009744
 8000ec8:	0800974c 	.word	0x0800974c
 8000ecc:	0800975c 	.word	0x0800975c
 8000ed0:	08009768 	.word	0x08009768
 8000ed4:	08009770 	.word	0x08009770
 8000ed8:	200000f4 	.word	0x200000f4

08000edc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee0:	f001 fab9 	bl	8002456 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee4:	f000 f811 	bl	8000f0a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee8:	f000 faac 	bl	8001444 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000eec:	f000 f85a 	bl	8000fa4 <MX_SPI1_Init>
  MX_UART5_Init();
 8000ef0:	f000 fa5c 	bl	80013ac <MX_UART5_Init>
  MX_UART4_Init();
 8000ef4:	f000 fa0e 	bl	8001314 <MX_UART4_Init>
  MX_TIM1_Init();
 8000ef8:	f000 f88c 	bl	8001014 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000efc:	f000 f95e 	bl	80011bc <MX_TIM3_Init>
  MX_TIM4_Init();
 8000f00:	f000 f9b2 	bl	8001268 <MX_TIM4_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  SPI_Communication();
 8000f04:	f7ff fc96 	bl	8000834 <SPI_Communication>
 8000f08:	e7fc      	b.n	8000f04 <main+0x28>

08000f0a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b094      	sub	sp, #80	@ 0x50
 8000f0e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f10:	f107 0318 	add.w	r3, r7, #24
 8000f14:	2238      	movs	r2, #56	@ 0x38
 8000f16:	2100      	movs	r1, #0
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f007 f955 	bl	80081c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f2c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000f30:	f001 fec0 	bl	8002cb4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f34:	2302      	movs	r3, #2
 8000f36:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f3c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f3e:	2340      	movs	r3, #64	@ 0x40
 8000f40:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f42:	2302      	movs	r3, #2
 8000f44:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f46:	2302      	movs	r3, #2
 8000f48:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000f4e:	2308      	movs	r3, #8
 8000f50:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f52:	2302      	movs	r3, #2
 8000f54:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f56:	2302      	movs	r3, #2
 8000f58:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f5e:	f107 0318 	add.w	r3, r7, #24
 8000f62:	4618      	mov	r0, r3
 8000f64:	f001 ff5a 	bl	8002e1c <HAL_RCC_OscConfig>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000f6e:	f000 fb23 	bl	80015b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f72:	230f      	movs	r3, #15
 8000f74:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f76:	2303      	movs	r3, #3
 8000f78:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000f7a:	2380      	movs	r3, #128	@ 0x80
 8000f7c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f86:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f002 fa57 	bl	8003440 <HAL_RCC_ClockConfig>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000f98:	f000 fb0e 	bl	80015b8 <Error_Handler>
  }
}
 8000f9c:	bf00      	nop
 8000f9e:	3750      	adds	r7, #80	@ 0x50
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fa8:	4b18      	ldr	r3, [pc, #96]	@ (800100c <MX_SPI1_Init+0x68>)
 8000faa:	4a19      	ldr	r2, [pc, #100]	@ (8001010 <MX_SPI1_Init+0x6c>)
 8000fac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000fae:	4b17      	ldr	r3, [pc, #92]	@ (800100c <MX_SPI1_Init+0x68>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fb4:	4b15      	ldr	r3, [pc, #84]	@ (800100c <MX_SPI1_Init+0x68>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fba:	4b14      	ldr	r3, [pc, #80]	@ (800100c <MX_SPI1_Init+0x68>)
 8000fbc:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000fc0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fc2:	4b12      	ldr	r3, [pc, #72]	@ (800100c <MX_SPI1_Init+0x68>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fc8:	4b10      	ldr	r3, [pc, #64]	@ (800100c <MX_SPI1_Init+0x68>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000fce:	4b0f      	ldr	r3, [pc, #60]	@ (800100c <MX_SPI1_Init+0x68>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fd4:	4b0d      	ldr	r3, [pc, #52]	@ (800100c <MX_SPI1_Init+0x68>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fda:	4b0c      	ldr	r3, [pc, #48]	@ (800100c <MX_SPI1_Init+0x68>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fe0:	4b0a      	ldr	r3, [pc, #40]	@ (800100c <MX_SPI1_Init+0x68>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000fe6:	4b09      	ldr	r3, [pc, #36]	@ (800100c <MX_SPI1_Init+0x68>)
 8000fe8:	2207      	movs	r2, #7
 8000fea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000fec:	4b07      	ldr	r3, [pc, #28]	@ (800100c <MX_SPI1_Init+0x68>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000ff2:	4b06      	ldr	r3, [pc, #24]	@ (800100c <MX_SPI1_Init+0x68>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ff8:	4804      	ldr	r0, [pc, #16]	@ (800100c <MX_SPI1_Init+0x68>)
 8000ffa:	f002 fe8b 	bl	8003d14 <HAL_SPI_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8001004:	f000 fad8 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}
 800100c:	200000f4 	.word	0x200000f4
 8001010:	40013000 	.word	0x40013000

08001014 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b09c      	sub	sp, #112	@ 0x70
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800101a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001028:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001034:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
 8001044:	615a      	str	r2, [r3, #20]
 8001046:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001048:	1d3b      	adds	r3, r7, #4
 800104a:	2234      	movs	r2, #52	@ 0x34
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f007 f8ba 	bl	80081c8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001054:	4b57      	ldr	r3, [pc, #348]	@ (80011b4 <MX_TIM1_Init+0x1a0>)
 8001056:	4a58      	ldr	r2, [pc, #352]	@ (80011b8 <MX_TIM1_Init+0x1a4>)
 8001058:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800105a:	4b56      	ldr	r3, [pc, #344]	@ (80011b4 <MX_TIM1_Init+0x1a0>)
 800105c:	2200      	movs	r2, #0
 800105e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001060:	4b54      	ldr	r3, [pc, #336]	@ (80011b4 <MX_TIM1_Init+0x1a0>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 399;
 8001066:	4b53      	ldr	r3, [pc, #332]	@ (80011b4 <MX_TIM1_Init+0x1a0>)
 8001068:	f240 128f 	movw	r2, #399	@ 0x18f
 800106c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800106e:	4b51      	ldr	r3, [pc, #324]	@ (80011b4 <MX_TIM1_Init+0x1a0>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001074:	4b4f      	ldr	r3, [pc, #316]	@ (80011b4 <MX_TIM1_Init+0x1a0>)
 8001076:	2200      	movs	r2, #0
 8001078:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800107a:	4b4e      	ldr	r3, [pc, #312]	@ (80011b4 <MX_TIM1_Init+0x1a0>)
 800107c:	2200      	movs	r2, #0
 800107e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001080:	484c      	ldr	r0, [pc, #304]	@ (80011b4 <MX_TIM1_Init+0x1a0>)
 8001082:	f003 fd7d 	bl	8004b80 <HAL_TIM_Base_Init>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800108c:	f000 fa94 	bl	80015b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001090:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001094:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001096:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800109a:	4619      	mov	r1, r3
 800109c:	4845      	ldr	r0, [pc, #276]	@ (80011b4 <MX_TIM1_Init+0x1a0>)
 800109e:	f004 fad1 	bl	8005644 <HAL_TIM_ConfigClockSource>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80010a8:	f000 fa86 	bl	80015b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010ac:	4841      	ldr	r0, [pc, #260]	@ (80011b4 <MX_TIM1_Init+0x1a0>)
 80010ae:	f003 fdbe 	bl	8004c2e <HAL_TIM_PWM_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80010b8:	f000 fa7e 	bl	80015b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010bc:	2300      	movs	r3, #0
 80010be:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010c0:	2300      	movs	r3, #0
 80010c2:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c4:	2300      	movs	r3, #0
 80010c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010c8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010cc:	4619      	mov	r1, r3
 80010ce:	4839      	ldr	r0, [pc, #228]	@ (80011b4 <MX_TIM1_Init+0x1a0>)
 80010d0:	f005 f8a0 	bl	8006214 <HAL_TIMEx_MasterConfigSynchronization>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80010da:	f000 fa6d 	bl	80015b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010de:	2360      	movs	r3, #96	@ 0x60
 80010e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010e6:	2300      	movs	r3, #0
 80010e8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010ea:	2300      	movs	r3, #0
 80010ec:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010ee:	2300      	movs	r3, #0
 80010f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010f2:	2300      	movs	r3, #0
 80010f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010f6:	2300      	movs	r3, #0
 80010f8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010fa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80010fe:	2200      	movs	r2, #0
 8001100:	4619      	mov	r1, r3
 8001102:	482c      	ldr	r0, [pc, #176]	@ (80011b4 <MX_TIM1_Init+0x1a0>)
 8001104:	f004 f98a 	bl	800541c <HAL_TIM_PWM_ConfigChannel>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800110e:	f000 fa53 	bl	80015b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001112:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001116:	2204      	movs	r2, #4
 8001118:	4619      	mov	r1, r3
 800111a:	4826      	ldr	r0, [pc, #152]	@ (80011b4 <MX_TIM1_Init+0x1a0>)
 800111c:	f004 f97e 	bl	800541c <HAL_TIM_PWM_ConfigChannel>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001126:	f000 fa47 	bl	80015b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800112a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800112e:	2208      	movs	r2, #8
 8001130:	4619      	mov	r1, r3
 8001132:	4820      	ldr	r0, [pc, #128]	@ (80011b4 <MX_TIM1_Init+0x1a0>)
 8001134:	f004 f972 	bl	800541c <HAL_TIM_PWM_ConfigChannel>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800113e:	f000 fa3b 	bl	80015b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001142:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001146:	220c      	movs	r2, #12
 8001148:	4619      	mov	r1, r3
 800114a:	481a      	ldr	r0, [pc, #104]	@ (80011b4 <MX_TIM1_Init+0x1a0>)
 800114c:	f004 f966 	bl	800541c <HAL_TIM_PWM_ConfigChannel>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8001156:	f000 fa2f 	bl	80015b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800115a:	2300      	movs	r3, #0
 800115c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800115e:	2300      	movs	r3, #0
 8001160:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800116a:	2300      	movs	r3, #0
 800116c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800116e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001172:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001178:	2300      	movs	r3, #0
 800117a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800117c:	2300      	movs	r3, #0
 800117e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001180:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001184:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800118a:	2300      	movs	r3, #0
 800118c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800118e:	2300      	movs	r3, #0
 8001190:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	4619      	mov	r1, r3
 8001196:	4807      	ldr	r0, [pc, #28]	@ (80011b4 <MX_TIM1_Init+0x1a0>)
 8001198:	f005 f8d2 	bl	8006340 <HAL_TIMEx_ConfigBreakDeadTime>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM1_Init+0x192>
  {
    Error_Handler();
 80011a2:	f000 fa09 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80011a6:	4803      	ldr	r0, [pc, #12]	@ (80011b4 <MX_TIM1_Init+0x1a0>)
 80011a8:	f000 ff24 	bl	8001ff4 <HAL_TIM_MspPostInit>

}
 80011ac:	bf00      	nop
 80011ae:	3770      	adds	r7, #112	@ 0x70
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000158 	.word	0x20000158
 80011b8:	40012c00 	.word	0x40012c00

080011bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08c      	sub	sp, #48	@ 0x30
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80011c2:	f107 030c 	add.w	r3, r7, #12
 80011c6:	2224      	movs	r2, #36	@ 0x24
 80011c8:	2100      	movs	r1, #0
 80011ca:	4618      	mov	r0, r3
 80011cc:	f006 fffc 	bl	80081c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d0:	463b      	mov	r3, r7
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	605a      	str	r2, [r3, #4]
 80011d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011da:	4b21      	ldr	r3, [pc, #132]	@ (8001260 <MX_TIM3_Init+0xa4>)
 80011dc:	4a21      	ldr	r2, [pc, #132]	@ (8001264 <MX_TIM3_Init+0xa8>)
 80011de:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80011e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001260 <MX_TIM3_Init+0xa4>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001260 <MX_TIM3_Init+0xa4>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80011ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001260 <MX_TIM3_Init+0xa4>)
 80011ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001260 <MX_TIM3_Init+0xa4>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011fa:	4b19      	ldr	r3, [pc, #100]	@ (8001260 <MX_TIM3_Init+0xa4>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001200:	2303      	movs	r3, #3
 8001202:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001204:	2300      	movs	r3, #0
 8001206:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001208:	2301      	movs	r3, #1
 800120a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800120c:	2300      	movs	r3, #0
 800120e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001210:	2300      	movs	r3, #0
 8001212:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001214:	2300      	movs	r3, #0
 8001216:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001218:	2301      	movs	r3, #1
 800121a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800121c:	2300      	movs	r3, #0
 800121e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001224:	f107 030c 	add.w	r3, r7, #12
 8001228:	4619      	mov	r1, r3
 800122a:	480d      	ldr	r0, [pc, #52]	@ (8001260 <MX_TIM3_Init+0xa4>)
 800122c:	f003 fe72 	bl	8004f14 <HAL_TIM_Encoder_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001236:	f000 f9bf 	bl	80015b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800123a:	2300      	movs	r3, #0
 800123c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800123e:	2300      	movs	r3, #0
 8001240:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001242:	463b      	mov	r3, r7
 8001244:	4619      	mov	r1, r3
 8001246:	4806      	ldr	r0, [pc, #24]	@ (8001260 <MX_TIM3_Init+0xa4>)
 8001248:	f004 ffe4 	bl	8006214 <HAL_TIMEx_MasterConfigSynchronization>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001252:	f000 f9b1 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001256:	bf00      	nop
 8001258:	3730      	adds	r7, #48	@ 0x30
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	200001a4 	.word	0x200001a4
 8001264:	40000400 	.word	0x40000400

08001268 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08c      	sub	sp, #48	@ 0x30
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800126e:	f107 030c 	add.w	r3, r7, #12
 8001272:	2224      	movs	r2, #36	@ 0x24
 8001274:	2100      	movs	r1, #0
 8001276:	4618      	mov	r0, r3
 8001278:	f006 ffa6 	bl	80081c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800127c:	463b      	mov	r3, r7
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001286:	4b21      	ldr	r3, [pc, #132]	@ (800130c <MX_TIM4_Init+0xa4>)
 8001288:	4a21      	ldr	r2, [pc, #132]	@ (8001310 <MX_TIM4_Init+0xa8>)
 800128a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 800128c:	4b1f      	ldr	r3, [pc, #124]	@ (800130c <MX_TIM4_Init+0xa4>)
 800128e:	2201      	movs	r2, #1
 8001290:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001292:	4b1e      	ldr	r3, [pc, #120]	@ (800130c <MX_TIM4_Init+0xa4>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001298:	4b1c      	ldr	r3, [pc, #112]	@ (800130c <MX_TIM4_Init+0xa4>)
 800129a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800129e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a0:	4b1a      	ldr	r3, [pc, #104]	@ (800130c <MX_TIM4_Init+0xa4>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012a6:	4b19      	ldr	r3, [pc, #100]	@ (800130c <MX_TIM4_Init+0xa4>)
 80012a8:	2280      	movs	r2, #128	@ 0x80
 80012aa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012ac:	2303      	movs	r3, #3
 80012ae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012b0:	2300      	movs	r3, #0
 80012b2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012b4:	2301      	movs	r3, #1
 80012b6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 80012bc:	2301      	movs	r3, #1
 80012be:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012c0:	2300      	movs	r3, #0
 80012c2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012c4:	2301      	movs	r3, #1
 80012c6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012c8:	2300      	movs	r3, #0
 80012ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 1;
 80012cc:	2301      	movs	r3, #1
 80012ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80012d0:	f107 030c 	add.w	r3, r7, #12
 80012d4:	4619      	mov	r1, r3
 80012d6:	480d      	ldr	r0, [pc, #52]	@ (800130c <MX_TIM4_Init+0xa4>)
 80012d8:	f003 fe1c 	bl	8004f14 <HAL_TIM_Encoder_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80012e2:	f000 f969 	bl	80015b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e6:	2300      	movs	r3, #0
 80012e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ea:	2300      	movs	r3, #0
 80012ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012ee:	463b      	mov	r3, r7
 80012f0:	4619      	mov	r1, r3
 80012f2:	4806      	ldr	r0, [pc, #24]	@ (800130c <MX_TIM4_Init+0xa4>)
 80012f4:	f004 ff8e 	bl	8006214 <HAL_TIMEx_MasterConfigSynchronization>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80012fe:	f000 f95b 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001302:	bf00      	nop
 8001304:	3730      	adds	r7, #48	@ 0x30
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	200001f0 	.word	0x200001f0
 8001310:	40000800 	.word	0x40000800

08001314 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001318:	4b22      	ldr	r3, [pc, #136]	@ (80013a4 <MX_UART4_Init+0x90>)
 800131a:	4a23      	ldr	r2, [pc, #140]	@ (80013a8 <MX_UART4_Init+0x94>)
 800131c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800131e:	4b21      	ldr	r3, [pc, #132]	@ (80013a4 <MX_UART4_Init+0x90>)
 8001320:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001324:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001326:	4b1f      	ldr	r3, [pc, #124]	@ (80013a4 <MX_UART4_Init+0x90>)
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800132c:	4b1d      	ldr	r3, [pc, #116]	@ (80013a4 <MX_UART4_Init+0x90>)
 800132e:	2200      	movs	r2, #0
 8001330:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001332:	4b1c      	ldr	r3, [pc, #112]	@ (80013a4 <MX_UART4_Init+0x90>)
 8001334:	2200      	movs	r2, #0
 8001336:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001338:	4b1a      	ldr	r3, [pc, #104]	@ (80013a4 <MX_UART4_Init+0x90>)
 800133a:	220c      	movs	r2, #12
 800133c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800133e:	4b19      	ldr	r3, [pc, #100]	@ (80013a4 <MX_UART4_Init+0x90>)
 8001340:	2200      	movs	r2, #0
 8001342:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001344:	4b17      	ldr	r3, [pc, #92]	@ (80013a4 <MX_UART4_Init+0x90>)
 8001346:	2200      	movs	r2, #0
 8001348:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800134a:	4b16      	ldr	r3, [pc, #88]	@ (80013a4 <MX_UART4_Init+0x90>)
 800134c:	2200      	movs	r2, #0
 800134e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001350:	4b14      	ldr	r3, [pc, #80]	@ (80013a4 <MX_UART4_Init+0x90>)
 8001352:	2200      	movs	r2, #0
 8001354:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001356:	4b13      	ldr	r3, [pc, #76]	@ (80013a4 <MX_UART4_Init+0x90>)
 8001358:	2200      	movs	r2, #0
 800135a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800135c:	4811      	ldr	r0, [pc, #68]	@ (80013a4 <MX_UART4_Init+0x90>)
 800135e:	f005 f8c9 	bl	80064f4 <HAL_UART_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001368:	f000 f926 	bl	80015b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800136c:	2100      	movs	r1, #0
 800136e:	480d      	ldr	r0, [pc, #52]	@ (80013a4 <MX_UART4_Init+0x90>)
 8001370:	f006 fb5d 	bl	8007a2e <HAL_UARTEx_SetTxFifoThreshold>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800137a:	f000 f91d 	bl	80015b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800137e:	2100      	movs	r1, #0
 8001380:	4808      	ldr	r0, [pc, #32]	@ (80013a4 <MX_UART4_Init+0x90>)
 8001382:	f006 fb92 	bl	8007aaa <HAL_UARTEx_SetRxFifoThreshold>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 800138c:	f000 f914 	bl	80015b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001390:	4804      	ldr	r0, [pc, #16]	@ (80013a4 <MX_UART4_Init+0x90>)
 8001392:	f006 fb13 	bl	80079bc <HAL_UARTEx_DisableFifoMode>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 800139c:	f000 f90c 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	2000023c 	.word	0x2000023c
 80013a8:	40004c00 	.word	0x40004c00

080013ac <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80013b0:	4b22      	ldr	r3, [pc, #136]	@ (800143c <MX_UART5_Init+0x90>)
 80013b2:	4a23      	ldr	r2, [pc, #140]	@ (8001440 <MX_UART5_Init+0x94>)
 80013b4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80013b6:	4b21      	ldr	r3, [pc, #132]	@ (800143c <MX_UART5_Init+0x90>)
 80013b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013bc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80013be:	4b1f      	ldr	r3, [pc, #124]	@ (800143c <MX_UART5_Init+0x90>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80013c4:	4b1d      	ldr	r3, [pc, #116]	@ (800143c <MX_UART5_Init+0x90>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80013ca:	4b1c      	ldr	r3, [pc, #112]	@ (800143c <MX_UART5_Init+0x90>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80013d0:	4b1a      	ldr	r3, [pc, #104]	@ (800143c <MX_UART5_Init+0x90>)
 80013d2:	220c      	movs	r2, #12
 80013d4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013d6:	4b19      	ldr	r3, [pc, #100]	@ (800143c <MX_UART5_Init+0x90>)
 80013d8:	2200      	movs	r2, #0
 80013da:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80013dc:	4b17      	ldr	r3, [pc, #92]	@ (800143c <MX_UART5_Init+0x90>)
 80013de:	2200      	movs	r2, #0
 80013e0:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013e2:	4b16      	ldr	r3, [pc, #88]	@ (800143c <MX_UART5_Init+0x90>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013e8:	4b14      	ldr	r3, [pc, #80]	@ (800143c <MX_UART5_Init+0x90>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013ee:	4b13      	ldr	r3, [pc, #76]	@ (800143c <MX_UART5_Init+0x90>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80013f4:	4811      	ldr	r0, [pc, #68]	@ (800143c <MX_UART5_Init+0x90>)
 80013f6:	f005 f87d 	bl	80064f4 <HAL_UART_Init>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001400:	f000 f8da 	bl	80015b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001404:	2100      	movs	r1, #0
 8001406:	480d      	ldr	r0, [pc, #52]	@ (800143c <MX_UART5_Init+0x90>)
 8001408:	f006 fb11 	bl	8007a2e <HAL_UARTEx_SetTxFifoThreshold>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8001412:	f000 f8d1 	bl	80015b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001416:	2100      	movs	r1, #0
 8001418:	4808      	ldr	r0, [pc, #32]	@ (800143c <MX_UART5_Init+0x90>)
 800141a:	f006 fb46 	bl	8007aaa <HAL_UARTEx_SetRxFifoThreshold>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001424:	f000 f8c8 	bl	80015b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001428:	4804      	ldr	r0, [pc, #16]	@ (800143c <MX_UART5_Init+0x90>)
 800142a:	f006 fac7 	bl	80079bc <HAL_UARTEx_DisableFifoMode>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001434:	f000 f8c0 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}
 800143c:	200002d0 	.word	0x200002d0
 8001440:	40005000 	.word	0x40005000

08001444 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08c      	sub	sp, #48	@ 0x30
 8001448:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144a:	f107 031c 	add.w	r3, r7, #28
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	609a      	str	r2, [r3, #8]
 8001456:	60da      	str	r2, [r3, #12]
 8001458:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800145a:	4b54      	ldr	r3, [pc, #336]	@ (80015ac <MX_GPIO_Init+0x168>)
 800145c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800145e:	4a53      	ldr	r2, [pc, #332]	@ (80015ac <MX_GPIO_Init+0x168>)
 8001460:	f043 0310 	orr.w	r3, r3, #16
 8001464:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001466:	4b51      	ldr	r3, [pc, #324]	@ (80015ac <MX_GPIO_Init+0x168>)
 8001468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800146a:	f003 0310 	and.w	r3, r3, #16
 800146e:	61bb      	str	r3, [r7, #24]
 8001470:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001472:	4b4e      	ldr	r3, [pc, #312]	@ (80015ac <MX_GPIO_Init+0x168>)
 8001474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001476:	4a4d      	ldr	r2, [pc, #308]	@ (80015ac <MX_GPIO_Init+0x168>)
 8001478:	f043 0320 	orr.w	r3, r3, #32
 800147c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800147e:	4b4b      	ldr	r3, [pc, #300]	@ (80015ac <MX_GPIO_Init+0x168>)
 8001480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001482:	f003 0320 	and.w	r3, r3, #32
 8001486:	617b      	str	r3, [r7, #20]
 8001488:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800148a:	4b48      	ldr	r3, [pc, #288]	@ (80015ac <MX_GPIO_Init+0x168>)
 800148c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800148e:	4a47      	ldr	r2, [pc, #284]	@ (80015ac <MX_GPIO_Init+0x168>)
 8001490:	f043 0304 	orr.w	r3, r3, #4
 8001494:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001496:	4b45      	ldr	r3, [pc, #276]	@ (80015ac <MX_GPIO_Init+0x168>)
 8001498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800149a:	f003 0304 	and.w	r3, r3, #4
 800149e:	613b      	str	r3, [r7, #16]
 80014a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a2:	4b42      	ldr	r3, [pc, #264]	@ (80015ac <MX_GPIO_Init+0x168>)
 80014a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a6:	4a41      	ldr	r2, [pc, #260]	@ (80015ac <MX_GPIO_Init+0x168>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014ae:	4b3f      	ldr	r3, [pc, #252]	@ (80015ac <MX_GPIO_Init+0x168>)
 80014b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ba:	4b3c      	ldr	r3, [pc, #240]	@ (80015ac <MX_GPIO_Init+0x168>)
 80014bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014be:	4a3b      	ldr	r2, [pc, #236]	@ (80015ac <MX_GPIO_Init+0x168>)
 80014c0:	f043 0308 	orr.w	r3, r3, #8
 80014c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014c6:	4b39      	ldr	r3, [pc, #228]	@ (80015ac <MX_GPIO_Init+0x168>)
 80014c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ca:	f003 0308 	and.w	r3, r3, #8
 80014ce:	60bb      	str	r3, [r7, #8]
 80014d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d2:	4b36      	ldr	r3, [pc, #216]	@ (80015ac <MX_GPIO_Init+0x168>)
 80014d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d6:	4a35      	ldr	r2, [pc, #212]	@ (80015ac <MX_GPIO_Init+0x168>)
 80014d8:	f043 0302 	orr.w	r3, r3, #2
 80014dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014de:	4b33      	ldr	r3, [pc, #204]	@ (80015ac <MX_GPIO_Init+0x168>)
 80014e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	607b      	str	r3, [r7, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|Side_Board_Reset_Pin, GPIO_PIN_SET);
 80014ea:	2201      	movs	r2, #1
 80014ec:	2118      	movs	r1, #24
 80014ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014f2:	f001 fbad 	bl	8002c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 80014f6:	2201      	movs	r2, #1
 80014f8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80014fc:	482c      	ldr	r0, [pc, #176]	@ (80015b0 <MX_GPIO_Init+0x16c>)
 80014fe:	f001 fba7 	bl	8002c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001502:	237f      	movs	r3, #127	@ 0x7f
 8001504:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001506:	2300      	movs	r3, #0
 8001508:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800150e:	f107 031c 	add.w	r3, r7, #28
 8001512:	4619      	mov	r1, r3
 8001514:	4826      	ldr	r0, [pc, #152]	@ (80015b0 <MX_GPIO_Init+0x16c>)
 8001516:	f001 fa01 	bl	800291c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 Side_Board_Reset_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|Side_Board_Reset_Pin;
 800151a:	2318      	movs	r3, #24
 800151c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151e:	2301      	movs	r3, #1
 8001520:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001526:	2300      	movs	r3, #0
 8001528:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152a:	f107 031c 	add.w	r3, r7, #28
 800152e:	4619      	mov	r1, r3
 8001530:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001534:	f001 f9f2 	bl	800291c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001538:	2380      	movs	r3, #128	@ 0x80
 800153a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800153c:	2300      	movs	r3, #0
 800153e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001540:	2302      	movs	r3, #2
 8001542:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001544:	f107 031c 	add.w	r3, r7, #28
 8001548:	4619      	mov	r1, r3
 800154a:	4819      	ldr	r0, [pc, #100]	@ (80015b0 <MX_GPIO_Init+0x16c>)
 800154c:	f001 f9e6 	bl	800291c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001550:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001554:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001556:	2301      	movs	r3, #1
 8001558:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155e:	2300      	movs	r3, #0
 8001560:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001562:	f107 031c 	add.w	r3, r7, #28
 8001566:	4619      	mov	r1, r3
 8001568:	4811      	ldr	r0, [pc, #68]	@ (80015b0 <MX_GPIO_Init+0x16c>)
 800156a:	f001 f9d7 	bl	800291c <HAL_GPIO_Init>

  /*Configure GPIO pins : Limiter_switch_j19_Pin LS_DRV2_NO_Pin */
  GPIO_InitStruct.Pin = Limiter_switch_j19_Pin|LS_DRV2_NO_Pin;
 800156e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001572:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001574:	2300      	movs	r3, #0
 8001576:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001578:	2301      	movs	r3, #1
 800157a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800157c:	f107 031c 	add.w	r3, r7, #28
 8001580:	4619      	mov	r1, r3
 8001582:	480c      	ldr	r0, [pc, #48]	@ (80015b4 <MX_GPIO_Init+0x170>)
 8001584:	f001 f9ca 	bl	800291c <HAL_GPIO_Init>

  /*Configure GPIO pins : LS2_DRV1_NO_Pin LS1_DRV1_NO_Pin */
  GPIO_InitStruct.Pin = LS2_DRV1_NO_Pin|LS1_DRV1_NO_Pin;
 8001588:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 800158c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800158e:	2300      	movs	r3, #0
 8001590:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001596:	f107 031c 	add.w	r3, r7, #28
 800159a:	4619      	mov	r1, r3
 800159c:	4805      	ldr	r0, [pc, #20]	@ (80015b4 <MX_GPIO_Init+0x170>)
 800159e:	f001 f9bd 	bl	800291c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015a2:	bf00      	nop
 80015a4:	3730      	adds	r7, #48	@ 0x30
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40021000 	.word	0x40021000
 80015b0:	48001000 	.word	0x48001000
 80015b4:	48000c00 	.word	0x48000c00

080015b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015bc:	b672      	cpsid	i
}
 80015be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015c0:	bf00      	nop
 80015c2:	e7fd      	b.n	80015c0 <Error_Handler+0x8>

080015c4 <Motor_Init>:
uint8_t pinstate1=1;

#define MOTOR_SPEED_TILE_ON 250
#define MOTOR_SPEED_TILE_OFF 115

void Motor_Init(void) {
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80015c8:	2108      	movs	r1, #8
 80015ca:	4806      	ldr	r0, [pc, #24]	@ (80015e4 <Motor_Init+0x20>)
 80015cc:	f003 fb90 	bl	8004cf0 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80015d0:	210c      	movs	r1, #12
 80015d2:	4804      	ldr	r0, [pc, #16]	@ (80015e4 <Motor_Init+0x20>)
 80015d4:	f003 fb8c 	bl	8004cf0 <HAL_TIM_PWM_Start>
	  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80015d8:	213c      	movs	r1, #60	@ 0x3c
 80015da:	4803      	ldr	r0, [pc, #12]	@ (80015e8 <Motor_Init+0x24>)
 80015dc:	f003 fd40 	bl	8005060 <HAL_TIM_Encoder_Start>
    // Initialize motor control here (if any initialization is needed)
}
 80015e0:	bf00      	nop
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20000158 	.word	0x20000158
 80015e8:	200001f0 	.word	0x200001f0

080015ec <Motor_Steer>:

void Motor_Steer(int8_t target)
{	SlotSensor_Init();
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	71fb      	strb	r3, [r7, #7]
 80015f6:	f000 fb8d 	bl	8001d14 <SlotSensor_Init>
	Motor_Init();
 80015fa:	f7ff ffe3 	bl	80015c4 <Motor_Init>
	int8_t count = 0 ;
 80015fe:	2300      	movs	r3, #0
 8001600:	73fb      	strb	r3, [r7, #15]
	int16_t Motorspeed;




	if(TileON)
 8001602:	4b49      	ldr	r3, [pc, #292]	@ (8001728 <Motor_Steer+0x13c>)
 8001604:	f993 3000 	ldrsb.w	r3, [r3]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d044      	beq.n	8001696 <Motor_Steer+0xaa>
	{

		Motorspeed = MOTOR_SPEED_TILE_ON - 1 ;
 800160c:	23f9      	movs	r3, #249	@ 0xf9
 800160e:	81bb      	strh	r3, [r7, #12]
		if(target > 0)
 8001610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001614:	2b00      	cmp	r3, #0
 8001616:	dd1c      	ble.n	8001652 <Motor_Steer+0x66>
		{

			while(count < target)
 8001618:	e00c      	b.n	8001634 <Motor_Steer+0x48>
			{	  count = SlotSensor_Update();
 800161a:	f000 fb91 	bl	8001d40 <SlotSensor_Update>
 800161e:	4603      	mov	r3, r0
 8001620:	73fb      	strb	r3, [r7, #15]
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, Motorspeed);
 8001622:	4b42      	ldr	r3, [pc, #264]	@ (800172c <Motor_Steer+0x140>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800162a:	63da      	str	r2, [r3, #60]	@ 0x3c
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 800162c:	4b3f      	ldr	r3, [pc, #252]	@ (800172c <Motor_Steer+0x140>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2200      	movs	r2, #0
 8001632:	641a      	str	r2, [r3, #64]	@ 0x40
			while(count < target)
 8001634:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163c:	429a      	cmp	r2, r3
 800163e:	dbec      	blt.n	800161a <Motor_Steer+0x2e>
			}
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001640:	4b3a      	ldr	r3, [pc, #232]	@ (800172c <Motor_Steer+0x140>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2200      	movs	r2, #0
 8001646:	63da      	str	r2, [r3, #60]	@ 0x3c
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001648:	4b38      	ldr	r3, [pc, #224]	@ (800172c <Motor_Steer+0x140>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2200      	movs	r2, #0
 800164e:	641a      	str	r2, [r3, #64]	@ 0x40
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
		}

	}

}
 8001650:	e065      	b.n	800171e <Motor_Steer+0x132>
		else if(target< 0)
 8001652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001656:	2b00      	cmp	r3, #0
 8001658:	da61      	bge.n	800171e <Motor_Steer+0x132>
			while(count < -target)
 800165a:	e00c      	b.n	8001676 <Motor_Steer+0x8a>
					{	  count = SlotSensor_Update();
 800165c:	f000 fb70 	bl	8001d40 <SlotSensor_Update>
 8001660:	4603      	mov	r3, r0
 8001662:	73fb      	strb	r3, [r7, #15]
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001664:	4b31      	ldr	r3, [pc, #196]	@ (800172c <Motor_Steer+0x140>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2200      	movs	r2, #0
 800166a:	63da      	str	r2, [r3, #60]	@ 0x3c
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, Motorspeed);
 800166c:	4b2f      	ldr	r3, [pc, #188]	@ (800172c <Motor_Steer+0x140>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001674:	641a      	str	r2, [r3, #64]	@ 0x40
			while(count < -target)
 8001676:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800167a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167e:	425b      	negs	r3, r3
 8001680:	429a      	cmp	r2, r3
 8001682:	dbeb      	blt.n	800165c <Motor_Steer+0x70>
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001684:	4b29      	ldr	r3, [pc, #164]	@ (800172c <Motor_Steer+0x140>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2200      	movs	r2, #0
 800168a:	63da      	str	r2, [r3, #60]	@ 0x3c
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 800168c:	4b27      	ldr	r3, [pc, #156]	@ (800172c <Motor_Steer+0x140>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2200      	movs	r2, #0
 8001692:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001694:	e043      	b.n	800171e <Motor_Steer+0x132>
		Motorspeed = MOTOR_SPEED_TILE_OFF -1 ;
 8001696:	2372      	movs	r3, #114	@ 0x72
 8001698:	81bb      	strh	r3, [r7, #12]
		if(target > 0){
 800169a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	dd1c      	ble.n	80016dc <Motor_Steer+0xf0>
					while(count < target)
 80016a2:	e00c      	b.n	80016be <Motor_Steer+0xd2>
						count = SlotSensor_Update();
 80016a4:	f000 fb4c 	bl	8001d40 <SlotSensor_Update>
 80016a8:	4603      	mov	r3, r0
 80016aa:	73fb      	strb	r3, [r7, #15]
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, Motorspeed);
 80016ac:	4b1f      	ldr	r3, [pc, #124]	@ (800172c <Motor_Steer+0x140>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80016b4:	63da      	str	r2, [r3, #60]	@ 0x3c
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 80016b6:	4b1d      	ldr	r3, [pc, #116]	@ (800172c <Motor_Steer+0x140>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2200      	movs	r2, #0
 80016bc:	641a      	str	r2, [r3, #64]	@ 0x40
					while(count < target)
 80016be:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80016c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	dbec      	blt.n	80016a4 <Motor_Steer+0xb8>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80016ca:	4b18      	ldr	r3, [pc, #96]	@ (800172c <Motor_Steer+0x140>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2200      	movs	r2, #0
 80016d0:	63da      	str	r2, [r3, #60]	@ 0x3c
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 80016d2:	4b16      	ldr	r3, [pc, #88]	@ (800172c <Motor_Steer+0x140>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2200      	movs	r2, #0
 80016d8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80016da:	e020      	b.n	800171e <Motor_Steer+0x132>
		else if(target< 0)
 80016dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	da1c      	bge.n	800171e <Motor_Steer+0x132>
			while(count < -target)
 80016e4:	e00c      	b.n	8001700 <Motor_Steer+0x114>
				count = SlotSensor_Update();
 80016e6:	f000 fb2b 	bl	8001d40 <SlotSensor_Update>
 80016ea:	4603      	mov	r3, r0
 80016ec:	73fb      	strb	r3, [r7, #15]
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80016ee:	4b0f      	ldr	r3, [pc, #60]	@ (800172c <Motor_Steer+0x140>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2200      	movs	r2, #0
 80016f4:	63da      	str	r2, [r3, #60]	@ 0x3c
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, Motorspeed);
 80016f6:	4b0d      	ldr	r3, [pc, #52]	@ (800172c <Motor_Steer+0x140>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80016fe:	641a      	str	r2, [r3, #64]	@ 0x40
			while(count < -target)
 8001700:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001708:	425b      	negs	r3, r3
 800170a:	429a      	cmp	r2, r3
 800170c:	dbeb      	blt.n	80016e6 <Motor_Steer+0xfa>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 800170e:	4b07      	ldr	r3, [pc, #28]	@ (800172c <Motor_Steer+0x140>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2200      	movs	r2, #0
 8001714:	63da      	str	r2, [r3, #60]	@ 0x3c
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001716:	4b05      	ldr	r3, [pc, #20]	@ (800172c <Motor_Steer+0x140>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2200      	movs	r2, #0
 800171c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800171e:	bf00      	nop
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	200000e9 	.word	0x200000e9
 800172c:	20000158 	.word	0x20000158

08001730 <ABSRotateHead>:
	Motor_Steer(target_position);


}
int8_t ABSRotateHead(int8_t target_position)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	71fb      	strb	r3, [r7, #7]
	Motor_Init();
 800173a:	f7ff ff43 	bl	80015c4 <Motor_Init>

	GPIO_PinState current_state1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7); // Read pin state
 800173e:	2180      	movs	r1, #128	@ 0x80
 8001740:	48a9      	ldr	r0, [pc, #676]	@ (80019e8 <ABSRotateHead+0x2b8>)
 8001742:	f001 fa6d 	bl	8002c20 <HAL_GPIO_ReadPin>
 8001746:	4603      	mov	r3, r0
 8001748:	75fb      	strb	r3, [r7, #23]
	GPIO_PinState last_state1=current_state1;
 800174a:	7dfb      	ldrb	r3, [r7, #23]
 800174c:	73fb      	strb	r3, [r7, #15]
	if(current_state1==GPIO_PIN_RESET){
 800174e:	7dfb      	ldrb	r3, [r7, #23]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d11a      	bne.n	800178a <ABSRotateHead+0x5a>
		while (current_state1 == last_state1){
 8001754:	e00d      	b.n	8001772 <ABSRotateHead+0x42>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 8001756:	4ba5      	ldr	r3, [pc, #660]	@ (80019ec <ABSRotateHead+0x2bc>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2200      	movs	r2, #0
 800175c:	63da      	str	r2, [r3, #60]	@ 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 100);
 800175e:	4ba3      	ldr	r3, [pc, #652]	@ (80019ec <ABSRotateHead+0x2bc>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2264      	movs	r2, #100	@ 0x64
 8001764:	641a      	str	r2, [r3, #64]	@ 0x40
			current_state1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7);
 8001766:	2180      	movs	r1, #128	@ 0x80
 8001768:	489f      	ldr	r0, [pc, #636]	@ (80019e8 <ABSRotateHead+0x2b8>)
 800176a:	f001 fa59 	bl	8002c20 <HAL_GPIO_ReadPin>
 800176e:	4603      	mov	r3, r0
 8001770:	75fb      	strb	r3, [r7, #23]
		while (current_state1 == last_state1){
 8001772:	7dfa      	ldrb	r2, [r7, #23]
 8001774:	7bfb      	ldrb	r3, [r7, #15]
 8001776:	429a      	cmp	r2, r3
 8001778:	d0ed      	beq.n	8001756 <ABSRotateHead+0x26>
		}

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 800177a:	4b9c      	ldr	r3, [pc, #624]	@ (80019ec <ABSRotateHead+0x2bc>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2200      	movs	r2, #0
 8001780:	63da      	str	r2, [r3, #60]	@ 0x3c
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001782:	4b9a      	ldr	r3, [pc, #616]	@ (80019ec <ABSRotateHead+0x2bc>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2200      	movs	r2, #0
 8001788:	641a      	str	r2, [r3, #64]	@ 0x40

	}
	HAL_Delay(200);
 800178a:	20c8      	movs	r0, #200	@ 0xc8
 800178c:	f000 fed4 	bl	8002538 <HAL_Delay>
	int8_t absolute_target_position = target_position*5 - posABS;
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	461a      	mov	r2, r3
 8001794:	0092      	lsls	r2, r2, #2
 8001796:	4413      	add	r3, r2
 8001798:	b2da      	uxtb	r2, r3
 800179a:	4b95      	ldr	r3, [pc, #596]	@ (80019f0 <ABSRotateHead+0x2c0>)
 800179c:	f993 3000 	ldrsb.w	r3, [r3]
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	73bb      	strb	r3, [r7, #14]
	SlotSensor_Init();
 80017a8:	f000 fab4 	bl	8001d14 <SlotSensor_Init>
	Motor_Init();
 80017ac:	f7ff ff0a 	bl	80015c4 <Motor_Init>
	int8_t count = 0 ;
 80017b0:	2300      	movs	r3, #0
 80017b2:	75bb      	strb	r3, [r7, #22]
	int16_t Motorspeed;



		if(TileON)
 80017b4:	4b8f      	ldr	r3, [pc, #572]	@ (80019f4 <ABSRotateHead+0x2c4>)
 80017b6:	f993 3000 	ldrsb.w	r3, [r3]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f000 811c 	beq.w	80019f8 <ABSRotateHead+0x2c8>
		{
			Motorspeed = MOTOR_SPEED_TILE_ON - 1 ;
 80017c0:	23f9      	movs	r3, #249	@ 0xf9
 80017c2:	82bb      	strh	r3, [r7, #20]
			if(absolute_target_position > 0)
 80017c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f340 8082 	ble.w	80018d2 <ABSRotateHead+0x1a2>
			{
				if (absolute_target_position-count==5){
 80017ce:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80017d2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b05      	cmp	r3, #5
 80017da:	d114      	bne.n	8001806 <ABSRotateHead+0xd6>
										if(target_position==1){
 80017dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d102      	bne.n	80017ea <ABSRotateHead+0xba>
										Motorspeed = 220;}
 80017e4:	23dc      	movs	r3, #220	@ 0xdc
 80017e6:	82bb      	strh	r3, [r7, #20]
 80017e8:	e03a      	b.n	8001860 <ABSRotateHead+0x130>
										else if(target_position==2){
 80017ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d102      	bne.n	80017f8 <ABSRotateHead+0xc8>
											Motorspeed=215;
 80017f2:	23d7      	movs	r3, #215	@ 0xd7
 80017f4:	82bb      	strh	r3, [r7, #20]
 80017f6:	e033      	b.n	8001860 <ABSRotateHead+0x130>
										}
										else if (target_position==3){
 80017f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fc:	2b03      	cmp	r3, #3
 80017fe:	d12f      	bne.n	8001860 <ABSRotateHead+0x130>
											Motorspeed=215;
 8001800:	23d7      	movs	r3, #215	@ 0xd7
 8001802:	82bb      	strh	r3, [r7, #20]
 8001804:	e02c      	b.n	8001860 <ABSRotateHead+0x130>
										}
									}
									else if (absolute_target_position-count==10){
 8001806:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800180a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b0a      	cmp	r3, #10
 8001812:	d10d      	bne.n	8001830 <ABSRotateHead+0x100>
										if (target_position==2){
 8001814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001818:	2b02      	cmp	r3, #2
 800181a:	d102      	bne.n	8001822 <ABSRotateHead+0xf2>
										Motorspeed=250;}
 800181c:	23fa      	movs	r3, #250	@ 0xfa
 800181e:	82bb      	strh	r3, [r7, #20]
 8001820:	e01e      	b.n	8001860 <ABSRotateHead+0x130>
										else if(target_position==3){
 8001822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001826:	2b03      	cmp	r3, #3
 8001828:	d11a      	bne.n	8001860 <ABSRotateHead+0x130>
											Motorspeed=250;
 800182a:	23fa      	movs	r3, #250	@ 0xfa
 800182c:	82bb      	strh	r3, [r7, #20]
 800182e:	e017      	b.n	8001860 <ABSRotateHead+0x130>
										}
									}
									else if (absolute_target_position-count==15){
 8001830:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001834:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b0f      	cmp	r3, #15
 800183c:	d110      	bne.n	8001860 <ABSRotateHead+0x130>
										Motorspeed=258;
 800183e:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001842:	82bb      	strh	r3, [r7, #20]
									}

				while(count < absolute_target_position)
 8001844:	e00c      	b.n	8001860 <ABSRotateHead+0x130>
				{	  count = SlotSensor_Update();
 8001846:	f000 fa7b 	bl	8001d40 <SlotSensor_Update>
 800184a:	4603      	mov	r3, r0
 800184c:	75bb      	strb	r3, [r7, #22]
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, Motorspeed);
 800184e:	4b67      	ldr	r3, [pc, #412]	@ (80019ec <ABSRotateHead+0x2bc>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001856:	63da      	str	r2, [r3, #60]	@ 0x3c
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001858:	4b64      	ldr	r3, [pc, #400]	@ (80019ec <ABSRotateHead+0x2bc>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2200      	movs	r2, #0
 800185e:	641a      	str	r2, [r3, #64]	@ 0x40
				while(count < absolute_target_position)
 8001860:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8001864:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001868:	429a      	cmp	r2, r3
 800186a:	dbec      	blt.n	8001846 <ABSRotateHead+0x116>
				}

				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 800186c:	4b5f      	ldr	r3, [pc, #380]	@ (80019ec <ABSRotateHead+0x2bc>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2200      	movs	r2, #0
 8001872:	63da      	str	r2, [r3, #60]	@ 0x3c
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001874:	4b5d      	ldr	r3, [pc, #372]	@ (80019ec <ABSRotateHead+0x2bc>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2200      	movs	r2, #0
 800187a:	641a      	str	r2, [r3, #64]	@ 0x40
				HAL_Delay(200);
 800187c:	20c8      	movs	r0, #200	@ 0xc8
 800187e:	f000 fe5b 	bl	8002538 <HAL_Delay>
				GPIO_PinState current_state1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7); // Read pin state
 8001882:	2180      	movs	r1, #128	@ 0x80
 8001884:	4858      	ldr	r0, [pc, #352]	@ (80019e8 <ABSRotateHead+0x2b8>)
 8001886:	f001 f9cb 	bl	8002c20 <HAL_GPIO_ReadPin>
 800188a:	4603      	mov	r3, r0
 800188c:	74fb      	strb	r3, [r7, #19]
				GPIO_PinState last_state1=current_state1;
 800188e:	7cfb      	ldrb	r3, [r7, #19]
 8001890:	72bb      	strb	r3, [r7, #10]
				if(current_state1==GPIO_PIN_RESET){
 8001892:	7cfb      	ldrb	r3, [r7, #19]
 8001894:	2b00      	cmp	r3, #0
 8001896:	f040 81bf 	bne.w	8001c18 <ABSRotateHead+0x4e8>
						while (current_state1 == last_state1){
 800189a:	e00d      	b.n	80018b8 <ABSRotateHead+0x188>
								__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0 );
 800189c:	4b53      	ldr	r3, [pc, #332]	@ (80019ec <ABSRotateHead+0x2bc>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2200      	movs	r2, #0
 80018a2:	63da      	str	r2, [r3, #60]	@ 0x3c
								__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 100);
 80018a4:	4b51      	ldr	r3, [pc, #324]	@ (80019ec <ABSRotateHead+0x2bc>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2264      	movs	r2, #100	@ 0x64
 80018aa:	641a      	str	r2, [r3, #64]	@ 0x40
								current_state1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7);
 80018ac:	2180      	movs	r1, #128	@ 0x80
 80018ae:	484e      	ldr	r0, [pc, #312]	@ (80019e8 <ABSRotateHead+0x2b8>)
 80018b0:	f001 f9b6 	bl	8002c20 <HAL_GPIO_ReadPin>
 80018b4:	4603      	mov	r3, r0
 80018b6:	74fb      	strb	r3, [r7, #19]
						while (current_state1 == last_state1){
 80018b8:	7cfa      	ldrb	r2, [r7, #19]
 80018ba:	7abb      	ldrb	r3, [r7, #10]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d0ed      	beq.n	800189c <ABSRotateHead+0x16c>
								}

					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80018c0:	4b4a      	ldr	r3, [pc, #296]	@ (80019ec <ABSRotateHead+0x2bc>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2200      	movs	r2, #0
 80018c6:	63da      	str	r2, [r3, #60]	@ 0x3c
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 80018c8:	4b48      	ldr	r3, [pc, #288]	@ (80019ec <ABSRotateHead+0x2bc>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2200      	movs	r2, #0
 80018ce:	641a      	str	r2, [r3, #64]	@ 0x40
 80018d0:	e1a2      	b.n	8001c18 <ABSRotateHead+0x4e8>

			}
			}
			else if(absolute_target_position< 0)
 80018d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	f280 819e 	bge.w	8001c18 <ABSRotateHead+0x4e8>
			{
				if (absolute_target_position-count==-5){
 80018dc:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80018e0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	f113 0f05 	cmn.w	r3, #5
 80018ea:	d114      	bne.n	8001916 <ABSRotateHead+0x1e6>
						if(target_position==0){
 80018ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d102      	bne.n	80018fa <ABSRotateHead+0x1ca>
							Motorspeed = 220;}
 80018f4:	23dc      	movs	r3, #220	@ 0xdc
 80018f6:	82bb      	strh	r3, [r7, #20]
 80018f8:	e03c      	b.n	8001974 <ABSRotateHead+0x244>
						else if(target_position==1){
 80018fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d102      	bne.n	8001908 <ABSRotateHead+0x1d8>
								Motorspeed=210;
 8001902:	23d2      	movs	r3, #210	@ 0xd2
 8001904:	82bb      	strh	r3, [r7, #20]
 8001906:	e035      	b.n	8001974 <ABSRotateHead+0x244>
								}
						else if (target_position==2){
 8001908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190c:	2b02      	cmp	r3, #2
 800190e:	d131      	bne.n	8001974 <ABSRotateHead+0x244>
								Motorspeed=210;
 8001910:	23d2      	movs	r3, #210	@ 0xd2
 8001912:	82bb      	strh	r3, [r7, #20]
 8001914:	e02e      	b.n	8001974 <ABSRotateHead+0x244>
								}
								}
				else if (absolute_target_position-count==-10){
 8001916:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800191a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	f113 0f0a 	cmn.w	r3, #10
 8001924:	d10e      	bne.n	8001944 <ABSRotateHead+0x214>
						if (target_position==0){
 8001926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d102      	bne.n	8001934 <ABSRotateHead+0x204>
							Motorspeed=255;}
 800192e:	23ff      	movs	r3, #255	@ 0xff
 8001930:	82bb      	strh	r3, [r7, #20]
 8001932:	e01f      	b.n	8001974 <ABSRotateHead+0x244>
						else if(target_position==1){
 8001934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d11b      	bne.n	8001974 <ABSRotateHead+0x244>
									Motorspeed=258;
 800193c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001940:	82bb      	strh	r3, [r7, #20]
 8001942:	e017      	b.n	8001974 <ABSRotateHead+0x244>
														}
													}
						else if (absolute_target_position-count==-15){
 8001944:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001948:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	f113 0f0f 	cmn.w	r3, #15
 8001952:	d10f      	bne.n	8001974 <ABSRotateHead+0x244>
								Motorspeed=255;
 8001954:	23ff      	movs	r3, #255	@ 0xff
 8001956:	82bb      	strh	r3, [r7, #20]
						}

				while(count < -absolute_target_position)
 8001958:	e00c      	b.n	8001974 <ABSRotateHead+0x244>
						{	  count = SlotSensor_Update();
 800195a:	f000 f9f1 	bl	8001d40 <SlotSensor_Update>
 800195e:	4603      	mov	r3, r0
 8001960:	75bb      	strb	r3, [r7, #22]
							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001962:	4b22      	ldr	r3, [pc, #136]	@ (80019ec <ABSRotateHead+0x2bc>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2200      	movs	r2, #0
 8001968:	63da      	str	r2, [r3, #60]	@ 0x3c
							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, Motorspeed);
 800196a:	4b20      	ldr	r3, [pc, #128]	@ (80019ec <ABSRotateHead+0x2bc>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001972:	641a      	str	r2, [r3, #64]	@ 0x40
				while(count < -absolute_target_position)
 8001974:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8001978:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800197c:	425b      	negs	r3, r3
 800197e:	429a      	cmp	r2, r3
 8001980:	dbeb      	blt.n	800195a <ABSRotateHead+0x22a>
						}

				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001982:	4b1a      	ldr	r3, [pc, #104]	@ (80019ec <ABSRotateHead+0x2bc>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2200      	movs	r2, #0
 8001988:	63da      	str	r2, [r3, #60]	@ 0x3c
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 800198a:	4b18      	ldr	r3, [pc, #96]	@ (80019ec <ABSRotateHead+0x2bc>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2200      	movs	r2, #0
 8001990:	641a      	str	r2, [r3, #64]	@ 0x40
				HAL_Delay(200);
 8001992:	20c8      	movs	r0, #200	@ 0xc8
 8001994:	f000 fdd0 	bl	8002538 <HAL_Delay>
				GPIO_PinState current_state1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7); // Read pin state
 8001998:	2180      	movs	r1, #128	@ 0x80
 800199a:	4813      	ldr	r0, [pc, #76]	@ (80019e8 <ABSRotateHead+0x2b8>)
 800199c:	f001 f940 	bl	8002c20 <HAL_GPIO_ReadPin>
 80019a0:	4603      	mov	r3, r0
 80019a2:	74bb      	strb	r3, [r7, #18]
				GPIO_PinState last_state1=current_state1;
 80019a4:	7cbb      	ldrb	r3, [r7, #18]
 80019a6:	72fb      	strb	r3, [r7, #11]
				if(current_state1==GPIO_PIN_RESET){
 80019a8:	7cbb      	ldrb	r3, [r7, #18]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f040 8134 	bne.w	8001c18 <ABSRotateHead+0x4e8>
						while (current_state1 == last_state1){
 80019b0:	e00d      	b.n	80019ce <ABSRotateHead+0x29e>
								__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,100 );
 80019b2:	4b0e      	ldr	r3, [pc, #56]	@ (80019ec <ABSRotateHead+0x2bc>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2264      	movs	r2, #100	@ 0x64
 80019b8:	63da      	str	r2, [r3, #60]	@ 0x3c
								__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 80019ba:	4b0c      	ldr	r3, [pc, #48]	@ (80019ec <ABSRotateHead+0x2bc>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2200      	movs	r2, #0
 80019c0:	641a      	str	r2, [r3, #64]	@ 0x40
								current_state1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7);
 80019c2:	2180      	movs	r1, #128	@ 0x80
 80019c4:	4808      	ldr	r0, [pc, #32]	@ (80019e8 <ABSRotateHead+0x2b8>)
 80019c6:	f001 f92b 	bl	8002c20 <HAL_GPIO_ReadPin>
 80019ca:	4603      	mov	r3, r0
 80019cc:	74bb      	strb	r3, [r7, #18]
						while (current_state1 == last_state1){
 80019ce:	7cba      	ldrb	r2, [r7, #18]
 80019d0:	7afb      	ldrb	r3, [r7, #11]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d0ed      	beq.n	80019b2 <ABSRotateHead+0x282>
								}


							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80019d6:	4b05      	ldr	r3, [pc, #20]	@ (80019ec <ABSRotateHead+0x2bc>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2200      	movs	r2, #0
 80019dc:	63da      	str	r2, [r3, #60]	@ 0x3c
							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 80019de:	4b03      	ldr	r3, [pc, #12]	@ (80019ec <ABSRotateHead+0x2bc>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2200      	movs	r2, #0
 80019e4:	641a      	str	r2, [r3, #64]	@ 0x40
 80019e6:	e117      	b.n	8001c18 <ABSRotateHead+0x4e8>
 80019e8:	48001000 	.word	0x48001000
 80019ec:	20000158 	.word	0x20000158
 80019f0:	200000e8 	.word	0x200000e8
 80019f4:	200000e9 	.word	0x200000e9

		}
		else
		{

			Motorspeed = MOTOR_SPEED_TILE_OFF -1 ;
 80019f8:	2372      	movs	r3, #114	@ 0x72
 80019fa:	82bb      	strh	r3, [r7, #20]
			if(absolute_target_position > 0){
 80019fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	f340 8081 	ble.w	8001b08 <ABSRotateHead+0x3d8>
					if (absolute_target_position-count==5){
 8001a06:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001a0a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b05      	cmp	r3, #5
 8001a12:	d114      	bne.n	8001a3e <ABSRotateHead+0x30e>
						if(target_position==1){
 8001a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d102      	bne.n	8001a22 <ABSRotateHead+0x2f2>
						Motorspeed = 120;}
 8001a1c:	2378      	movs	r3, #120	@ 0x78
 8001a1e:	82bb      	strh	r3, [r7, #20]
 8001a20:	e039      	b.n	8001a96 <ABSRotateHead+0x366>
						else if(target_position==2){
 8001a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d102      	bne.n	8001a30 <ABSRotateHead+0x300>
							Motorspeed=145;
 8001a2a:	2391      	movs	r3, #145	@ 0x91
 8001a2c:	82bb      	strh	r3, [r7, #20]
 8001a2e:	e032      	b.n	8001a96 <ABSRotateHead+0x366>
						}
						else if (target_position==3){
 8001a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a34:	2b03      	cmp	r3, #3
 8001a36:	d12e      	bne.n	8001a96 <ABSRotateHead+0x366>
							Motorspeed=145;
 8001a38:	2391      	movs	r3, #145	@ 0x91
 8001a3a:	82bb      	strh	r3, [r7, #20]
 8001a3c:	e02b      	b.n	8001a96 <ABSRotateHead+0x366>
						}
					}
					else if (absolute_target_position-count==10){
 8001a3e:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001a42:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b0a      	cmp	r3, #10
 8001a4a:	d10d      	bne.n	8001a68 <ABSRotateHead+0x338>
						if (target_position==2){
 8001a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d102      	bne.n	8001a5a <ABSRotateHead+0x32a>
						Motorspeed=115;}
 8001a54:	2373      	movs	r3, #115	@ 0x73
 8001a56:	82bb      	strh	r3, [r7, #20]
 8001a58:	e01d      	b.n	8001a96 <ABSRotateHead+0x366>
						else if(target_position==3){
 8001a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5e:	2b03      	cmp	r3, #3
 8001a60:	d119      	bne.n	8001a96 <ABSRotateHead+0x366>
							Motorspeed=170;
 8001a62:	23aa      	movs	r3, #170	@ 0xaa
 8001a64:	82bb      	strh	r3, [r7, #20]
 8001a66:	e016      	b.n	8001a96 <ABSRotateHead+0x366>
						}
					}
					else if (absolute_target_position-count==15){
 8001a68:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001a6c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b0f      	cmp	r3, #15
 8001a74:	d10f      	bne.n	8001a96 <ABSRotateHead+0x366>
						Motorspeed=180;
 8001a76:	23b4      	movs	r3, #180	@ 0xb4
 8001a78:	82bb      	strh	r3, [r7, #20]
					}
						while(count < absolute_target_position)
 8001a7a:	e00c      	b.n	8001a96 <ABSRotateHead+0x366>
						{
							count = SlotSensor_Update();
 8001a7c:	f000 f960 	bl	8001d40 <SlotSensor_Update>
 8001a80:	4603      	mov	r3, r0
 8001a82:	75bb      	strb	r3, [r7, #22]
							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, Motorspeed);
 8001a84:	4b73      	ldr	r3, [pc, #460]	@ (8001c54 <ABSRotateHead+0x524>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001a8c:	63da      	str	r2, [r3, #60]	@ 0x3c
							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001a8e:	4b71      	ldr	r3, [pc, #452]	@ (8001c54 <ABSRotateHead+0x524>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2200      	movs	r2, #0
 8001a94:	641a      	str	r2, [r3, #64]	@ 0x40
						while(count < absolute_target_position)
 8001a96:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8001a9a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	dbec      	blt.n	8001a7c <ABSRotateHead+0x34c>
						}

					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001aa2:	4b6c      	ldr	r3, [pc, #432]	@ (8001c54 <ABSRotateHead+0x524>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	63da      	str	r2, [r3, #60]	@ 0x3c
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001aaa:	4b6a      	ldr	r3, [pc, #424]	@ (8001c54 <ABSRotateHead+0x524>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	641a      	str	r2, [r3, #64]	@ 0x40
					HAL_Delay(200);
 8001ab2:	20c8      	movs	r0, #200	@ 0xc8
 8001ab4:	f000 fd40 	bl	8002538 <HAL_Delay>

					GPIO_PinState current_state1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7); // Read pin state
 8001ab8:	2180      	movs	r1, #128	@ 0x80
 8001aba:	4867      	ldr	r0, [pc, #412]	@ (8001c58 <ABSRotateHead+0x528>)
 8001abc:	f001 f8b0 	bl	8002c20 <HAL_GPIO_ReadPin>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	747b      	strb	r3, [r7, #17]
					GPIO_PinState last_state1=current_state1;
 8001ac4:	7c7b      	ldrb	r3, [r7, #17]
 8001ac6:	733b      	strb	r3, [r7, #12]
					if(current_state1==GPIO_PIN_RESET){
 8001ac8:	7c7b      	ldrb	r3, [r7, #17]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	f040 80a4 	bne.w	8001c18 <ABSRotateHead+0x4e8>
						while (current_state1 == last_state1){
 8001ad0:	e00d      	b.n	8001aee <ABSRotateHead+0x3be>
							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0 );
 8001ad2:	4b60      	ldr	r3, [pc, #384]	@ (8001c54 <ABSRotateHead+0x524>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	63da      	str	r2, [r3, #60]	@ 0x3c
							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 100);
 8001ada:	4b5e      	ldr	r3, [pc, #376]	@ (8001c54 <ABSRotateHead+0x524>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2264      	movs	r2, #100	@ 0x64
 8001ae0:	641a      	str	r2, [r3, #64]	@ 0x40
							current_state1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7);
 8001ae2:	2180      	movs	r1, #128	@ 0x80
 8001ae4:	485c      	ldr	r0, [pc, #368]	@ (8001c58 <ABSRotateHead+0x528>)
 8001ae6:	f001 f89b 	bl	8002c20 <HAL_GPIO_ReadPin>
 8001aea:	4603      	mov	r3, r0
 8001aec:	747b      	strb	r3, [r7, #17]
						while (current_state1 == last_state1){
 8001aee:	7c7a      	ldrb	r2, [r7, #17]
 8001af0:	7b3b      	ldrb	r3, [r7, #12]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d0ed      	beq.n	8001ad2 <ABSRotateHead+0x3a2>

					}
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001af6:	4b57      	ldr	r3, [pc, #348]	@ (8001c54 <ABSRotateHead+0x524>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2200      	movs	r2, #0
 8001afc:	63da      	str	r2, [r3, #60]	@ 0x3c
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001afe:	4b55      	ldr	r3, [pc, #340]	@ (8001c54 <ABSRotateHead+0x524>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2200      	movs	r2, #0
 8001b04:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b06:	e087      	b.n	8001c18 <ABSRotateHead+0x4e8>

					}
					}
			else if(absolute_target_position< 0)
 8001b08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	f280 8083 	bge.w	8001c18 <ABSRotateHead+0x4e8>
			{
				if (absolute_target_position-count==-5){
 8001b12:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001b16:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	f113 0f05 	cmn.w	r3, #5
 8001b20:	d114      	bne.n	8001b4c <ABSRotateHead+0x41c>
										if(target_position==0){
 8001b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d102      	bne.n	8001b30 <ABSRotateHead+0x400>
										Motorspeed = 131;}
 8001b2a:	2383      	movs	r3, #131	@ 0x83
 8001b2c:	82bb      	strh	r3, [r7, #20]
 8001b2e:	e03b      	b.n	8001ba8 <ABSRotateHead+0x478>
										else if(target_position==1){
 8001b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d102      	bne.n	8001b3e <ABSRotateHead+0x40e>
											Motorspeed=131;
 8001b38:	2383      	movs	r3, #131	@ 0x83
 8001b3a:	82bb      	strh	r3, [r7, #20]
 8001b3c:	e034      	b.n	8001ba8 <ABSRotateHead+0x478>
										}
										else if (target_position==2){
 8001b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d130      	bne.n	8001ba8 <ABSRotateHead+0x478>
											Motorspeed=129;
 8001b46:	2381      	movs	r3, #129	@ 0x81
 8001b48:	82bb      	strh	r3, [r7, #20]
 8001b4a:	e02d      	b.n	8001ba8 <ABSRotateHead+0x478>
										}
									}
									else if (absolute_target_position-count==-10){
 8001b4c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001b50:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	f113 0f0a 	cmn.w	r3, #10
 8001b5a:	d10d      	bne.n	8001b78 <ABSRotateHead+0x448>
										if (target_position==0){
 8001b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d102      	bne.n	8001b6a <ABSRotateHead+0x43a>
										Motorspeed=195;}
 8001b64:	23c3      	movs	r3, #195	@ 0xc3
 8001b66:	82bb      	strh	r3, [r7, #20]
 8001b68:	e01e      	b.n	8001ba8 <ABSRotateHead+0x478>
										else if(target_position==1){
 8001b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d11a      	bne.n	8001ba8 <ABSRotateHead+0x478>
											Motorspeed=180;
 8001b72:	23b4      	movs	r3, #180	@ 0xb4
 8001b74:	82bb      	strh	r3, [r7, #20]
 8001b76:	e017      	b.n	8001ba8 <ABSRotateHead+0x478>
										}
									}
									else if (absolute_target_position-count==-15){
 8001b78:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001b7c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	f113 0f0f 	cmn.w	r3, #15
 8001b86:	d10f      	bne.n	8001ba8 <ABSRotateHead+0x478>
										Motorspeed=210;
 8001b88:	23d2      	movs	r3, #210	@ 0xd2
 8001b8a:	82bb      	strh	r3, [r7, #20]
									}

				while(count < -absolute_target_position)
 8001b8c:	e00c      	b.n	8001ba8 <ABSRotateHead+0x478>
				{
					count = SlotSensor_Update();
 8001b8e:	f000 f8d7 	bl	8001d40 <SlotSensor_Update>
 8001b92:	4603      	mov	r3, r0
 8001b94:	75bb      	strb	r3, [r7, #22]
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001b96:	4b2f      	ldr	r3, [pc, #188]	@ (8001c54 <ABSRotateHead+0x524>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	63da      	str	r2, [r3, #60]	@ 0x3c
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, Motorspeed);
 8001b9e:	4b2d      	ldr	r3, [pc, #180]	@ (8001c54 <ABSRotateHead+0x524>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001ba6:	641a      	str	r2, [r3, #64]	@ 0x40
				while(count < -absolute_target_position)
 8001ba8:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8001bac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001bb0:	425b      	negs	r3, r3
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	dbeb      	blt.n	8001b8e <ABSRotateHead+0x45e>
				}

					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001bb6:	4b27      	ldr	r3, [pc, #156]	@ (8001c54 <ABSRotateHead+0x524>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	63da      	str	r2, [r3, #60]	@ 0x3c
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001bbe:	4b25      	ldr	r3, [pc, #148]	@ (8001c54 <ABSRotateHead+0x524>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	641a      	str	r2, [r3, #64]	@ 0x40
					HAL_Delay(200);
 8001bc6:	20c8      	movs	r0, #200	@ 0xc8
 8001bc8:	f000 fcb6 	bl	8002538 <HAL_Delay>
					GPIO_PinState current_state1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7); // Read pin state
 8001bcc:	2180      	movs	r1, #128	@ 0x80
 8001bce:	4822      	ldr	r0, [pc, #136]	@ (8001c58 <ABSRotateHead+0x528>)
 8001bd0:	f001 f826 	bl	8002c20 <HAL_GPIO_ReadPin>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	743b      	strb	r3, [r7, #16]
					GPIO_PinState last_state1=current_state1;
 8001bd8:	7c3b      	ldrb	r3, [r7, #16]
 8001bda:	737b      	strb	r3, [r7, #13]
					if(current_state1==GPIO_PIN_RESET){
 8001bdc:	7c3b      	ldrb	r3, [r7, #16]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d11a      	bne.n	8001c18 <ABSRotateHead+0x4e8>
							while (current_state1 == last_state1){
 8001be2:	e00d      	b.n	8001c00 <ABSRotateHead+0x4d0>
									__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,100 );
 8001be4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c54 <ABSRotateHead+0x524>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2264      	movs	r2, #100	@ 0x64
 8001bea:	63da      	str	r2, [r3, #60]	@ 0x3c
									__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001bec:	4b19      	ldr	r3, [pc, #100]	@ (8001c54 <ABSRotateHead+0x524>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	641a      	str	r2, [r3, #64]	@ 0x40
									current_state1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7);
 8001bf4:	2180      	movs	r1, #128	@ 0x80
 8001bf6:	4818      	ldr	r0, [pc, #96]	@ (8001c58 <ABSRotateHead+0x528>)
 8001bf8:	f001 f812 	bl	8002c20 <HAL_GPIO_ReadPin>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	743b      	strb	r3, [r7, #16]
							while (current_state1 == last_state1){
 8001c00:	7c3a      	ldrb	r2, [r7, #16]
 8001c02:	7b7b      	ldrb	r3, [r7, #13]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d0ed      	beq.n	8001be4 <ABSRotateHead+0x4b4>
									}
							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001c08:	4b12      	ldr	r3, [pc, #72]	@ (8001c54 <ABSRotateHead+0x524>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	63da      	str	r2, [r3, #60]	@ 0x3c
							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001c10:	4b10      	ldr	r3, [pc, #64]	@ (8001c54 <ABSRotateHead+0x524>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2200      	movs	r2, #0
 8001c16:	641a      	str	r2, [r3, #64]	@ 0x40
			}

		}

	//Motor_Steer(absolute_target_position);
	if(target_position*5 != posABS){posABS = target_position*5;}
 8001c18:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	4413      	add	r3, r2
 8001c22:	4a0e      	ldr	r2, [pc, #56]	@ (8001c5c <ABSRotateHead+0x52c>)
 8001c24:	f992 2000 	ldrsb.w	r2, [r2]
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d008      	beq.n	8001c3e <ABSRotateHead+0x50e>
 8001c2c:	79fb      	ldrb	r3, [r7, #7]
 8001c2e:	461a      	mov	r2, r3
 8001c30:	0092      	lsls	r2, r2, #2
 8001c32:	4413      	add	r3, r2
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	b25a      	sxtb	r2, r3
 8001c38:	4b08      	ldr	r3, [pc, #32]	@ (8001c5c <ABSRotateHead+0x52c>)
 8001c3a:	701a      	strb	r2, [r3, #0]
 8001c3c:	e004      	b.n	8001c48 <ABSRotateHead+0x518>
	else{HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);}
 8001c3e:	2200      	movs	r2, #0
 8001c40:	2110      	movs	r1, #16
 8001c42:	4807      	ldr	r0, [pc, #28]	@ (8001c60 <ABSRotateHead+0x530>)
 8001c44:	f001 f804 	bl	8002c50 <HAL_GPIO_WritePin>
return 1;
 8001c48:	2301      	movs	r3, #1


}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20000158 	.word	0x20000158
 8001c58:	48001000 	.word	0x48001000
 8001c5c:	200000e8 	.word	0x200000e8
 8001c60:	48000400 	.word	0x48000400

08001c64 <HeadBase>:
void HeadBase(UART_HandleTypeDef *huart)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]

	int16_t BaseSpeed = 250;
 8001c6c:	23fa      	movs	r3, #250	@ 0xfa
 8001c6e:	81fb      	strh	r3, [r7, #14]
	Motor_Init();
 8001c70:	f7ff fca8 	bl	80015c4 <Motor_Init>
	//uint8_t pinstate1;
	pinstate1 = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8);
 8001c74:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c78:	4822      	ldr	r0, [pc, #136]	@ (8001d04 <HeadBase+0xa0>)
 8001c7a:	f000 ffd1 	bl	8002c20 <HAL_GPIO_ReadPin>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	461a      	mov	r2, r3
 8001c82:	4b21      	ldr	r3, [pc, #132]	@ (8001d08 <HeadBase+0xa4>)
 8001c84:	701a      	strb	r2, [r3, #0]

	while(pinstate1)
 8001c86:	e022      	b.n	8001cce <HeadBase+0x6a>
	{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001c88:	4b20      	ldr	r3, [pc, #128]	@ (8001d0c <HeadBase+0xa8>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	63da      	str	r2, [r3, #60]	@ 0x3c
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, BaseSpeed-1);
 8001c90:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c94:	1e5a      	subs	r2, r3, #1
 8001c96:	4b1d      	ldr	r3, [pc, #116]	@ (8001d0c <HeadBase+0xa8>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	641a      	str	r2, [r3, #64]	@ 0x40

		pinstate1 = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8);
 8001c9c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ca0:	4818      	ldr	r0, [pc, #96]	@ (8001d04 <HeadBase+0xa0>)
 8001ca2:	f000 ffbd 	bl	8002c20 <HAL_GPIO_ReadPin>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4b17      	ldr	r3, [pc, #92]	@ (8001d08 <HeadBase+0xa4>)
 8001cac:	701a      	strb	r2, [r3, #0]
		 if (pinstate1==0){
 8001cae:	4b16      	ldr	r3, [pc, #88]	@ (8001d08 <HeadBase+0xa4>)
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d10b      	bne.n	8001cce <HeadBase+0x6a>
			 HAL_Delay(200);
 8001cb6:	20c8      	movs	r0, #200	@ 0xc8
 8001cb8:	f000 fc3e 	bl	8002538 <HAL_Delay>
			 pinstate1 = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8);
 8001cbc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001cc0:	4810      	ldr	r0, [pc, #64]	@ (8001d04 <HeadBase+0xa0>)
 8001cc2:	f000 ffad 	bl	8002c20 <HAL_GPIO_ReadPin>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	461a      	mov	r2, r3
 8001cca:	4b0f      	ldr	r3, [pc, #60]	@ (8001d08 <HeadBase+0xa4>)
 8001ccc:	701a      	strb	r2, [r3, #0]
	while(pinstate1)
 8001cce:	4b0e      	ldr	r3, [pc, #56]	@ (8001d08 <HeadBase+0xa4>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1d8      	bne.n	8001c88 <HeadBase+0x24>
		 }

	}

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8001d0c <HeadBase+0xa8>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001cde:	4b0b      	ldr	r3, [pc, #44]	@ (8001d0c <HeadBase+0xa8>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	641a      	str	r2, [r3, #64]	@ 0x40
	HAL_Delay(2000);
 8001ce6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001cea:	f000 fc25 	bl	8002538 <HAL_Delay>
	Motor_Steer(3);
 8001cee:	2003      	movs	r0, #3
 8001cf0:	f7ff fc7c 	bl	80015ec <Motor_Steer>
	posABS=0;
 8001cf4:	4b06      	ldr	r3, [pc, #24]	@ (8001d10 <HeadBase+0xac>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	701a      	strb	r2, [r3, #0]

}
 8001cfa:	bf00      	nop
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	48000c00 	.word	0x48000c00
 8001d08:	20000000 	.word	0x20000000
 8001d0c:	20000158 	.word	0x20000158
 8001d10:	200000e8 	.word	0x200000e8

08001d14 <SlotSensor_Init>:

// Counter for slot sensor
static GPIO_PinState last_state = GPIO_PIN_RESET; // Last state of the sensor
int8_t counter = 0;

void SlotSensor_Init(void) {
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
	counter = 0;
 8001d18:	4b06      	ldr	r3, [pc, #24]	@ (8001d34 <SlotSensor_Init+0x20>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	701a      	strb	r2, [r3, #0]
    // Initialize the last state
    last_state = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7);
 8001d1e:	2180      	movs	r1, #128	@ 0x80
 8001d20:	4805      	ldr	r0, [pc, #20]	@ (8001d38 <SlotSensor_Init+0x24>)
 8001d22:	f000 ff7d 	bl	8002c20 <HAL_GPIO_ReadPin>
 8001d26:	4603      	mov	r3, r0
 8001d28:	461a      	mov	r2, r3
 8001d2a:	4b04      	ldr	r3, [pc, #16]	@ (8001d3c <SlotSensor_Init+0x28>)
 8001d2c:	701a      	strb	r2, [r3, #0]
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20000365 	.word	0x20000365
 8001d38:	48001000 	.word	0x48001000
 8001d3c:	20000364 	.word	0x20000364

08001d40 <SlotSensor_Update>:

int SlotSensor_Update(void) {
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
    GPIO_PinState current_state = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7); // Read pin state
 8001d46:	2180      	movs	r1, #128	@ 0x80
 8001d48:	4815      	ldr	r0, [pc, #84]	@ (8001da0 <SlotSensor_Update+0x60>)
 8001d4a:	f000 ff69 	bl	8002c20 <HAL_GPIO_ReadPin>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	71fb      	strb	r3, [r7, #7]

    // Check for a change in state
    if (current_state == GPIO_PIN_SET && last_state == GPIO_PIN_RESET) {
 8001d52:	79fb      	ldrb	r3, [r7, #7]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d118      	bne.n	8001d8a <SlotSensor_Update+0x4a>
 8001d58:	4b12      	ldr	r3, [pc, #72]	@ (8001da4 <SlotSensor_Update+0x64>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d114      	bne.n	8001d8a <SlotSensor_Update+0x4a>
    	HAL_Delay(1);
 8001d60:	2001      	movs	r0, #1
 8001d62:	f000 fbe9 	bl	8002538 <HAL_Delay>
    	current_state = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7);
 8001d66:	2180      	movs	r1, #128	@ 0x80
 8001d68:	480d      	ldr	r0, [pc, #52]	@ (8001da0 <SlotSensor_Update+0x60>)
 8001d6a:	f000 ff59 	bl	8002c20 <HAL_GPIO_ReadPin>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	71fb      	strb	r3, [r7, #7]
    	if(current_state == GPIO_PIN_SET){
 8001d72:	79fb      	ldrb	r3, [r7, #7]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d108      	bne.n	8001d8a <SlotSensor_Update+0x4a>
        counter++;} // Increment counter on state change
 8001d78:	4b0b      	ldr	r3, [pc, #44]	@ (8001da8 <SlotSensor_Update+0x68>)
 8001d7a:	f993 3000 	ldrsb.w	r3, [r3]
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	3301      	adds	r3, #1
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	b25a      	sxtb	r2, r3
 8001d86:	4b08      	ldr	r3, [pc, #32]	@ (8001da8 <SlotSensor_Update+0x68>)
 8001d88:	701a      	strb	r2, [r3, #0]
         // Update last state
    }
    last_state = current_state;
 8001d8a:	4a06      	ldr	r2, [pc, #24]	@ (8001da4 <SlotSensor_Update+0x64>)
 8001d8c:	79fb      	ldrb	r3, [r7, #7]
 8001d8e:	7013      	strb	r3, [r2, #0]
    return counter ;
 8001d90:	4b05      	ldr	r3, [pc, #20]	@ (8001da8 <SlotSensor_Update+0x68>)
 8001d92:	f993 3000 	ldrsb.w	r3, [r3]
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	48001000 	.word	0x48001000
 8001da4:	20000364 	.word	0x20000364
 8001da8:	20000365 	.word	0x20000365

08001dac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001db2:	4b0f      	ldr	r3, [pc, #60]	@ (8001df0 <HAL_MspInit+0x44>)
 8001db4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001db6:	4a0e      	ldr	r2, [pc, #56]	@ (8001df0 <HAL_MspInit+0x44>)
 8001db8:	f043 0301 	orr.w	r3, r3, #1
 8001dbc:	6613      	str	r3, [r2, #96]	@ 0x60
 8001dbe:	4b0c      	ldr	r3, [pc, #48]	@ (8001df0 <HAL_MspInit+0x44>)
 8001dc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	607b      	str	r3, [r7, #4]
 8001dc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dca:	4b09      	ldr	r3, [pc, #36]	@ (8001df0 <HAL_MspInit+0x44>)
 8001dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dce:	4a08      	ldr	r2, [pc, #32]	@ (8001df0 <HAL_MspInit+0x44>)
 8001dd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dd4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dd6:	4b06      	ldr	r3, [pc, #24]	@ (8001df0 <HAL_MspInit+0x44>)
 8001dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dde:	603b      	str	r3, [r7, #0]
 8001de0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001de2:	f001 f80b 	bl	8002dfc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001de6:	bf00      	nop
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	40021000 	.word	0x40021000

08001df4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b08a      	sub	sp, #40	@ 0x28
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dfc:	f107 0314 	add.w	r3, r7, #20
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	60da      	str	r2, [r3, #12]
 8001e0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a26      	ldr	r2, [pc, #152]	@ (8001eac <HAL_SPI_MspInit+0xb8>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d145      	bne.n	8001ea2 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e16:	4b26      	ldr	r3, [pc, #152]	@ (8001eb0 <HAL_SPI_MspInit+0xbc>)
 8001e18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e1a:	4a25      	ldr	r2, [pc, #148]	@ (8001eb0 <HAL_SPI_MspInit+0xbc>)
 8001e1c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e20:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e22:	4b23      	ldr	r3, [pc, #140]	@ (8001eb0 <HAL_SPI_MspInit+0xbc>)
 8001e24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e26:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e2a:	613b      	str	r3, [r7, #16]
 8001e2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2e:	4b20      	ldr	r3, [pc, #128]	@ (8001eb0 <HAL_SPI_MspInit+0xbc>)
 8001e30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e32:	4a1f      	ldr	r2, [pc, #124]	@ (8001eb0 <HAL_SPI_MspInit+0xbc>)
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e3a:	4b1d      	ldr	r3, [pc, #116]	@ (8001eb0 <HAL_SPI_MspInit+0xbc>)
 8001e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e46:	4b1a      	ldr	r3, [pc, #104]	@ (8001eb0 <HAL_SPI_MspInit+0xbc>)
 8001e48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e4a:	4a19      	ldr	r2, [pc, #100]	@ (8001eb0 <HAL_SPI_MspInit+0xbc>)
 8001e4c:	f043 0302 	orr.w	r3, r3, #2
 8001e50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e52:	4b17      	ldr	r3, [pc, #92]	@ (8001eb0 <HAL_SPI_MspInit+0xbc>)
 8001e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	60bb      	str	r3, [r7, #8]
 8001e5c:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001e5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001e62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e64:	2302      	movs	r3, #2
 8001e66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e70:	2305      	movs	r3, #5
 8001e72:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e74:	f107 0314 	add.w	r3, r7, #20
 8001e78:	4619      	mov	r1, r3
 8001e7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e7e:	f000 fd4d 	bl	800291c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001e82:	2338      	movs	r3, #56	@ 0x38
 8001e84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e86:	2302      	movs	r3, #2
 8001e88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e92:	2305      	movs	r3, #5
 8001e94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e96:	f107 0314 	add.w	r3, r7, #20
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4805      	ldr	r0, [pc, #20]	@ (8001eb4 <HAL_SPI_MspInit+0xc0>)
 8001e9e:	f000 fd3d 	bl	800291c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ea2:	bf00      	nop
 8001ea4:	3728      	adds	r7, #40	@ 0x28
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	40013000 	.word	0x40013000
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	48000400 	.word	0x48000400

08001eb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a0a      	ldr	r2, [pc, #40]	@ (8001ef0 <HAL_TIM_Base_MspInit+0x38>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d10b      	bne.n	8001ee2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001eca:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef4 <HAL_TIM_Base_MspInit+0x3c>)
 8001ecc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ece:	4a09      	ldr	r2, [pc, #36]	@ (8001ef4 <HAL_TIM_Base_MspInit+0x3c>)
 8001ed0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ed4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ed6:	4b07      	ldr	r3, [pc, #28]	@ (8001ef4 <HAL_TIM_Base_MspInit+0x3c>)
 8001ed8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001ee2:	bf00      	nop
 8001ee4:	3714      	adds	r7, #20
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	40012c00 	.word	0x40012c00
 8001ef4:	40021000 	.word	0x40021000

08001ef8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b08c      	sub	sp, #48	@ 0x30
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f00:	f107 031c 	add.w	r3, r7, #28
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	605a      	str	r2, [r3, #4]
 8001f0a:	609a      	str	r2, [r3, #8]
 8001f0c:	60da      	str	r2, [r3, #12]
 8001f0e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a33      	ldr	r2, [pc, #204]	@ (8001fe4 <HAL_TIM_Encoder_MspInit+0xec>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d128      	bne.n	8001f6c <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f1a:	4b33      	ldr	r3, [pc, #204]	@ (8001fe8 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f1e:	4a32      	ldr	r2, [pc, #200]	@ (8001fe8 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001f20:	f043 0302 	orr.w	r3, r3, #2
 8001f24:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f26:	4b30      	ldr	r3, [pc, #192]	@ (8001fe8 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	61bb      	str	r3, [r7, #24]
 8001f30:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f32:	4b2d      	ldr	r3, [pc, #180]	@ (8001fe8 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f36:	4a2c      	ldr	r2, [pc, #176]	@ (8001fe8 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001f38:	f043 0304 	orr.w	r3, r3, #4
 8001f3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f3e:	4b2a      	ldr	r3, [pc, #168]	@ (8001fe8 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f42:	f003 0304 	and.w	r3, r3, #4
 8001f46:	617b      	str	r3, [r7, #20]
 8001f48:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Motor_B_EN_CH1_Pin|Motor_B_EN_CH2_Pin;
 8001f4a:	23c0      	movs	r3, #192	@ 0xc0
 8001f4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f52:	2300      	movs	r3, #0
 8001f54:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f56:	2300      	movs	r3, #0
 8001f58:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f5e:	f107 031c 	add.w	r3, r7, #28
 8001f62:	4619      	mov	r1, r3
 8001f64:	4821      	ldr	r0, [pc, #132]	@ (8001fec <HAL_TIM_Encoder_MspInit+0xf4>)
 8001f66:	f000 fcd9 	bl	800291c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001f6a:	e036      	b.n	8001fda <HAL_TIM_Encoder_MspInit+0xe2>
  else if(htim_encoder->Instance==TIM4)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a1f      	ldr	r2, [pc, #124]	@ (8001ff0 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d131      	bne.n	8001fda <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f76:	4b1c      	ldr	r3, [pc, #112]	@ (8001fe8 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f7a:	4a1b      	ldr	r2, [pc, #108]	@ (8001fe8 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001f7c:	f043 0304 	orr.w	r3, r3, #4
 8001f80:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f82:	4b19      	ldr	r3, [pc, #100]	@ (8001fe8 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f86:	f003 0304 	and.w	r3, r3, #4
 8001f8a:	613b      	str	r3, [r7, #16]
 8001f8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f8e:	4b16      	ldr	r3, [pc, #88]	@ (8001fe8 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001f90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f92:	4a15      	ldr	r2, [pc, #84]	@ (8001fe8 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001f94:	f043 0301 	orr.w	r3, r3, #1
 8001f98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f9a:	4b13      	ldr	r3, [pc, #76]	@ (8001fe8 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001f9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Motor_A_EN_CH2_Pin|Motor_A_EN_CH1_Pin;
 8001fa6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001faa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fac:	2302      	movs	r3, #2
 8001fae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001fb8:	230a      	movs	r3, #10
 8001fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fbc:	f107 031c 	add.w	r3, r7, #28
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fc6:	f000 fca9 	bl	800291c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001fca:	2200      	movs	r2, #0
 8001fcc:	2100      	movs	r1, #0
 8001fce:	201e      	movs	r0, #30
 8001fd0:	f000 fbaf 	bl	8002732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001fd4:	201e      	movs	r0, #30
 8001fd6:	f000 fbc6 	bl	8002766 <HAL_NVIC_EnableIRQ>
}
 8001fda:	bf00      	nop
 8001fdc:	3730      	adds	r7, #48	@ 0x30
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40000400 	.word	0x40000400
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	48000800 	.word	0x48000800
 8001ff0:	40000800 	.word	0x40000800

08001ff4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b088      	sub	sp, #32
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ffc:	f107 030c 	add.w	r3, r7, #12
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	605a      	str	r2, [r3, #4]
 8002006:	609a      	str	r2, [r3, #8]
 8002008:	60da      	str	r2, [r3, #12]
 800200a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a11      	ldr	r2, [pc, #68]	@ (8002058 <HAL_TIM_MspPostInit+0x64>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d11b      	bne.n	800204e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002016:	4b11      	ldr	r3, [pc, #68]	@ (800205c <HAL_TIM_MspPostInit+0x68>)
 8002018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800201a:	4a10      	ldr	r2, [pc, #64]	@ (800205c <HAL_TIM_MspPostInit+0x68>)
 800201c:	f043 0304 	orr.w	r3, r3, #4
 8002020:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002022:	4b0e      	ldr	r3, [pc, #56]	@ (800205c <HAL_TIM_MspPostInit+0x68>)
 8002024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002026:	f003 0304 	and.w	r3, r3, #4
 800202a:	60bb      	str	r3, [r7, #8]
 800202c:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Motor_A_CH1_Pin|Motor_A_CH2_Pin|Motor_B_CH3_Pin|Motor_A_CH4_Pin;
 800202e:	230f      	movs	r3, #15
 8002030:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002032:	2302      	movs	r3, #2
 8002034:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002036:	2300      	movs	r3, #0
 8002038:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203a:	2300      	movs	r3, #0
 800203c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800203e:	2302      	movs	r3, #2
 8002040:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002042:	f107 030c 	add.w	r3, r7, #12
 8002046:	4619      	mov	r1, r3
 8002048:	4805      	ldr	r0, [pc, #20]	@ (8002060 <HAL_TIM_MspPostInit+0x6c>)
 800204a:	f000 fc67 	bl	800291c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800204e:	bf00      	nop
 8002050:	3720      	adds	r7, #32
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40012c00 	.word	0x40012c00
 800205c:	40021000 	.word	0x40021000
 8002060:	48000800 	.word	0x48000800

08002064 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b0a2      	sub	sp, #136	@ 0x88
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800206c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	60da      	str	r2, [r3, #12]
 800207a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800207c:	f107 0320 	add.w	r3, r7, #32
 8002080:	2254      	movs	r2, #84	@ 0x54
 8002082:	2100      	movs	r1, #0
 8002084:	4618      	mov	r0, r3
 8002086:	f006 f89f 	bl	80081c8 <memset>
  if(huart->Instance==UART4)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a56      	ldr	r2, [pc, #344]	@ (80021e8 <HAL_UART_MspInit+0x184>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d141      	bne.n	8002118 <HAL_UART_MspInit+0xb4>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002094:	2308      	movs	r3, #8
 8002096:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002098:	2300      	movs	r3, #0
 800209a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800209c:	f107 0320 	add.w	r3, r7, #32
 80020a0:	4618      	mov	r0, r3
 80020a2:	f001 fbe9 	bl	8003878 <HAL_RCCEx_PeriphCLKConfig>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80020ac:	f7ff fa84 	bl	80015b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80020b0:	4b4e      	ldr	r3, [pc, #312]	@ (80021ec <HAL_UART_MspInit+0x188>)
 80020b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020b4:	4a4d      	ldr	r2, [pc, #308]	@ (80021ec <HAL_UART_MspInit+0x188>)
 80020b6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80020ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80020bc:	4b4b      	ldr	r3, [pc, #300]	@ (80021ec <HAL_UART_MspInit+0x188>)
 80020be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020c4:	61fb      	str	r3, [r7, #28]
 80020c6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020c8:	4b48      	ldr	r3, [pc, #288]	@ (80021ec <HAL_UART_MspInit+0x188>)
 80020ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020cc:	4a47      	ldr	r2, [pc, #284]	@ (80021ec <HAL_UART_MspInit+0x188>)
 80020ce:	f043 0304 	orr.w	r3, r3, #4
 80020d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020d4:	4b45      	ldr	r3, [pc, #276]	@ (80021ec <HAL_UART_MspInit+0x188>)
 80020d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020d8:	f003 0304 	and.w	r3, r3, #4
 80020dc:	61bb      	str	r3, [r7, #24]
 80020de:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80020e0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80020e4:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e6:	2302      	movs	r3, #2
 80020e8:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ea:	2300      	movs	r3, #0
 80020ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ee:	2300      	movs	r3, #0
 80020f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 80020f4:	2305      	movs	r3, #5
 80020f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020fa:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80020fe:	4619      	mov	r1, r3
 8002100:	483b      	ldr	r0, [pc, #236]	@ (80021f0 <HAL_UART_MspInit+0x18c>)
 8002102:	f000 fc0b 	bl	800291c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002106:	2200      	movs	r2, #0
 8002108:	2100      	movs	r1, #0
 800210a:	2034      	movs	r0, #52	@ 0x34
 800210c:	f000 fb11 	bl	8002732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002110:	2034      	movs	r0, #52	@ 0x34
 8002112:	f000 fb28 	bl	8002766 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8002116:	e063      	b.n	80021e0 <HAL_UART_MspInit+0x17c>
  else if(huart->Instance==UART5)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a35      	ldr	r2, [pc, #212]	@ (80021f4 <HAL_UART_MspInit+0x190>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d15e      	bne.n	80021e0 <HAL_UART_MspInit+0x17c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002122:	2310      	movs	r3, #16
 8002124:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002126:	2300      	movs	r3, #0
 8002128:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800212a:	f107 0320 	add.w	r3, r7, #32
 800212e:	4618      	mov	r0, r3
 8002130:	f001 fba2 	bl	8003878 <HAL_RCCEx_PeriphCLKConfig>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <HAL_UART_MspInit+0xda>
      Error_Handler();
 800213a:	f7ff fa3d 	bl	80015b8 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 800213e:	4b2b      	ldr	r3, [pc, #172]	@ (80021ec <HAL_UART_MspInit+0x188>)
 8002140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002142:	4a2a      	ldr	r2, [pc, #168]	@ (80021ec <HAL_UART_MspInit+0x188>)
 8002144:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002148:	6593      	str	r3, [r2, #88]	@ 0x58
 800214a:	4b28      	ldr	r3, [pc, #160]	@ (80021ec <HAL_UART_MspInit+0x188>)
 800214c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800214e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002152:	617b      	str	r3, [r7, #20]
 8002154:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002156:	4b25      	ldr	r3, [pc, #148]	@ (80021ec <HAL_UART_MspInit+0x188>)
 8002158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800215a:	4a24      	ldr	r2, [pc, #144]	@ (80021ec <HAL_UART_MspInit+0x188>)
 800215c:	f043 0304 	orr.w	r3, r3, #4
 8002160:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002162:	4b22      	ldr	r3, [pc, #136]	@ (80021ec <HAL_UART_MspInit+0x188>)
 8002164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002166:	f003 0304 	and.w	r3, r3, #4
 800216a:	613b      	str	r3, [r7, #16]
 800216c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800216e:	4b1f      	ldr	r3, [pc, #124]	@ (80021ec <HAL_UART_MspInit+0x188>)
 8002170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002172:	4a1e      	ldr	r2, [pc, #120]	@ (80021ec <HAL_UART_MspInit+0x188>)
 8002174:	f043 0308 	orr.w	r3, r3, #8
 8002178:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800217a:	4b1c      	ldr	r3, [pc, #112]	@ (80021ec <HAL_UART_MspInit+0x188>)
 800217c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800217e:	f003 0308 	and.w	r3, r3, #8
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002186:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800218a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218c:	2302      	movs	r3, #2
 800218e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002190:	2300      	movs	r3, #0
 8002192:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002194:	2300      	movs	r3, #0
 8002196:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 800219a:	2305      	movs	r3, #5
 800219c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021a0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80021a4:	4619      	mov	r1, r3
 80021a6:	4812      	ldr	r0, [pc, #72]	@ (80021f0 <HAL_UART_MspInit+0x18c>)
 80021a8:	f000 fbb8 	bl	800291c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021ac:	2304      	movs	r3, #4
 80021ae:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b0:	2302      	movs	r3, #2
 80021b2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b4:	2300      	movs	r3, #0
 80021b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b8:	2300      	movs	r3, #0
 80021ba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80021be:	2305      	movs	r3, #5
 80021c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021c4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80021c8:	4619      	mov	r1, r3
 80021ca:	480b      	ldr	r0, [pc, #44]	@ (80021f8 <HAL_UART_MspInit+0x194>)
 80021cc:	f000 fba6 	bl	800291c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80021d0:	2200      	movs	r2, #0
 80021d2:	2100      	movs	r1, #0
 80021d4:	2035      	movs	r0, #53	@ 0x35
 80021d6:	f000 faac 	bl	8002732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80021da:	2035      	movs	r0, #53	@ 0x35
 80021dc:	f000 fac3 	bl	8002766 <HAL_NVIC_EnableIRQ>
}
 80021e0:	bf00      	nop
 80021e2:	3788      	adds	r7, #136	@ 0x88
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40004c00 	.word	0x40004c00
 80021ec:	40021000 	.word	0x40021000
 80021f0:	48000800 	.word	0x48000800
 80021f4:	40005000 	.word	0x40005000
 80021f8:	48000c00 	.word	0x48000c00

080021fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002200:	bf00      	nop
 8002202:	e7fd      	b.n	8002200 <NMI_Handler+0x4>

08002204 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002208:	bf00      	nop
 800220a:	e7fd      	b.n	8002208 <HardFault_Handler+0x4>

0800220c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002210:	bf00      	nop
 8002212:	e7fd      	b.n	8002210 <MemManage_Handler+0x4>

08002214 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002218:	bf00      	nop
 800221a:	e7fd      	b.n	8002218 <BusFault_Handler+0x4>

0800221c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002220:	bf00      	nop
 8002222:	e7fd      	b.n	8002220 <UsageFault_Handler+0x4>

08002224 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002228:	bf00      	nop
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002232:	b480      	push	{r7}
 8002234:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002236:	bf00      	nop
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002244:	bf00      	nop
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002252:	f000 f953 	bl	80024fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002256:	bf00      	nop
 8002258:	bd80      	pop	{r7, pc}
	...

0800225c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002260:	4802      	ldr	r0, [pc, #8]	@ (800226c <TIM4_IRQHandler+0x10>)
 8002262:	f002 ff8b 	bl	800517c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002266:	bf00      	nop
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	200001f0 	.word	0x200001f0

08002270 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002274:	4802      	ldr	r0, [pc, #8]	@ (8002280 <UART4_IRQHandler+0x10>)
 8002276:	f004 fae3 	bl	8006840 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	2000023c 	.word	0x2000023c

08002284 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt / UART5 wake-up interrupt through EXTI line 35.
  */
void UART5_IRQHandler(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002288:	4802      	ldr	r0, [pc, #8]	@ (8002294 <UART5_IRQHandler+0x10>)
 800228a:	f004 fad9 	bl	8006840 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	200002d0 	.word	0x200002d0

08002298 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022a4:	2300      	movs	r3, #0
 80022a6:	617b      	str	r3, [r7, #20]
 80022a8:	e00a      	b.n	80022c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022aa:	f3af 8000 	nop.w
 80022ae:	4601      	mov	r1, r0
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	1c5a      	adds	r2, r3, #1
 80022b4:	60ba      	str	r2, [r7, #8]
 80022b6:	b2ca      	uxtb	r2, r1
 80022b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	3301      	adds	r3, #1
 80022be:	617b      	str	r3, [r7, #20]
 80022c0:	697a      	ldr	r2, [r7, #20]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	dbf0      	blt.n	80022aa <_read+0x12>
  }

  return len;
 80022c8:	687b      	ldr	r3, [r7, #4]
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3718      	adds	r7, #24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b086      	sub	sp, #24
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	60f8      	str	r0, [r7, #12]
 80022da:	60b9      	str	r1, [r7, #8]
 80022dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022de:	2300      	movs	r3, #0
 80022e0:	617b      	str	r3, [r7, #20]
 80022e2:	e009      	b.n	80022f8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	1c5a      	adds	r2, r3, #1
 80022e8:	60ba      	str	r2, [r7, #8]
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	3301      	adds	r3, #1
 80022f6:	617b      	str	r3, [r7, #20]
 80022f8:	697a      	ldr	r2, [r7, #20]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	dbf1      	blt.n	80022e4 <_write+0x12>
  }
  return len;
 8002300:	687b      	ldr	r3, [r7, #4]
}
 8002302:	4618      	mov	r0, r3
 8002304:	3718      	adds	r7, #24
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <_close>:

int _close(int file)
{
 800230a:	b480      	push	{r7}
 800230c:	b083      	sub	sp, #12
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002312:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002316:	4618      	mov	r0, r3
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002322:	b480      	push	{r7}
 8002324:	b083      	sub	sp, #12
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
 800232a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002332:	605a      	str	r2, [r3, #4]
  return 0;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr

08002342 <_isatty>:

int _isatty(int file)
{
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800234a:	2301      	movs	r3, #1
}
 800234c:	4618      	mov	r0, r3
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3714      	adds	r7, #20
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
	...

08002374 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800237c:	4a14      	ldr	r2, [pc, #80]	@ (80023d0 <_sbrk+0x5c>)
 800237e:	4b15      	ldr	r3, [pc, #84]	@ (80023d4 <_sbrk+0x60>)
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002388:	4b13      	ldr	r3, [pc, #76]	@ (80023d8 <_sbrk+0x64>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d102      	bne.n	8002396 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002390:	4b11      	ldr	r3, [pc, #68]	@ (80023d8 <_sbrk+0x64>)
 8002392:	4a12      	ldr	r2, [pc, #72]	@ (80023dc <_sbrk+0x68>)
 8002394:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002396:	4b10      	ldr	r3, [pc, #64]	@ (80023d8 <_sbrk+0x64>)
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4413      	add	r3, r2
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d207      	bcs.n	80023b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023a4:	f005 ff82 	bl	80082ac <__errno>
 80023a8:	4603      	mov	r3, r0
 80023aa:	220c      	movs	r2, #12
 80023ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023ae:	f04f 33ff 	mov.w	r3, #4294967295
 80023b2:	e009      	b.n	80023c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023b4:	4b08      	ldr	r3, [pc, #32]	@ (80023d8 <_sbrk+0x64>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ba:	4b07      	ldr	r3, [pc, #28]	@ (80023d8 <_sbrk+0x64>)
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4413      	add	r3, r2
 80023c2:	4a05      	ldr	r2, [pc, #20]	@ (80023d8 <_sbrk+0x64>)
 80023c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023c6:	68fb      	ldr	r3, [r7, #12]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3718      	adds	r7, #24
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	20020000 	.word	0x20020000
 80023d4:	00000400 	.word	0x00000400
 80023d8:	20000368 	.word	0x20000368
 80023dc:	200004c0 	.word	0x200004c0

080023e0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80023e4:	4b06      	ldr	r3, [pc, #24]	@ (8002400 <SystemInit+0x20>)
 80023e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ea:	4a05      	ldr	r2, [pc, #20]	@ (8002400 <SystemInit+0x20>)
 80023ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80023f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023f4:	bf00      	nop
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	e000ed00 	.word	0xe000ed00

08002404 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002404:	480d      	ldr	r0, [pc, #52]	@ (800243c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002406:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002408:	f7ff ffea 	bl	80023e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800240c:	480c      	ldr	r0, [pc, #48]	@ (8002440 <LoopForever+0x6>)
  ldr r1, =_edata
 800240e:	490d      	ldr	r1, [pc, #52]	@ (8002444 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002410:	4a0d      	ldr	r2, [pc, #52]	@ (8002448 <LoopForever+0xe>)
  movs r3, #0
 8002412:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002414:	e002      	b.n	800241c <LoopCopyDataInit>

08002416 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002416:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002418:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800241a:	3304      	adds	r3, #4

0800241c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800241c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800241e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002420:	d3f9      	bcc.n	8002416 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002422:	4a0a      	ldr	r2, [pc, #40]	@ (800244c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002424:	4c0a      	ldr	r4, [pc, #40]	@ (8002450 <LoopForever+0x16>)
  movs r3, #0
 8002426:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002428:	e001      	b.n	800242e <LoopFillZerobss>

0800242a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800242a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800242c:	3204      	adds	r2, #4

0800242e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800242e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002430:	d3fb      	bcc.n	800242a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002432:	f005 ff41 	bl	80082b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002436:	f7fe fd51 	bl	8000edc <main>

0800243a <LoopForever>:

LoopForever:
    b LoopForever
 800243a:	e7fe      	b.n	800243a <LoopForever>
  ldr   r0, =_estack
 800243c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002440:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002444:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002448:	0800992c 	.word	0x0800992c
  ldr r2, =_sbss
 800244c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8002450:	200004bc 	.word	0x200004bc

08002454 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002454:	e7fe      	b.n	8002454 <ADC1_2_IRQHandler>

08002456 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b082      	sub	sp, #8
 800245a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800245c:	2300      	movs	r3, #0
 800245e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002460:	2003      	movs	r0, #3
 8002462:	f000 f95b 	bl	800271c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002466:	200f      	movs	r0, #15
 8002468:	f000 f80e 	bl	8002488 <HAL_InitTick>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d002      	beq.n	8002478 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	71fb      	strb	r3, [r7, #7]
 8002476:	e001      	b.n	800247c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002478:	f7ff fc98 	bl	8001dac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800247c:	79fb      	ldrb	r3, [r7, #7]

}
 800247e:	4618      	mov	r0, r3
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
	...

08002488 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002490:	2300      	movs	r3, #0
 8002492:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002494:	4b16      	ldr	r3, [pc, #88]	@ (80024f0 <HAL_InitTick+0x68>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d022      	beq.n	80024e2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800249c:	4b15      	ldr	r3, [pc, #84]	@ (80024f4 <HAL_InitTick+0x6c>)
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	4b13      	ldr	r3, [pc, #76]	@ (80024f0 <HAL_InitTick+0x68>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80024a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80024ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b0:	4618      	mov	r0, r3
 80024b2:	f000 f966 	bl	8002782 <HAL_SYSTICK_Config>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d10f      	bne.n	80024dc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b0f      	cmp	r3, #15
 80024c0:	d809      	bhi.n	80024d6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024c2:	2200      	movs	r2, #0
 80024c4:	6879      	ldr	r1, [r7, #4]
 80024c6:	f04f 30ff 	mov.w	r0, #4294967295
 80024ca:	f000 f932 	bl	8002732 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024ce:	4a0a      	ldr	r2, [pc, #40]	@ (80024f8 <HAL_InitTick+0x70>)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6013      	str	r3, [r2, #0]
 80024d4:	e007      	b.n	80024e6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	73fb      	strb	r3, [r7, #15]
 80024da:	e004      	b.n	80024e6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	73fb      	strb	r3, [r7, #15]
 80024e0:	e001      	b.n	80024e6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80024e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3710      	adds	r7, #16
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	2000000c 	.word	0x2000000c
 80024f4:	20000004 	.word	0x20000004
 80024f8:	20000008 	.word	0x20000008

080024fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002500:	4b05      	ldr	r3, [pc, #20]	@ (8002518 <HAL_IncTick+0x1c>)
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	4b05      	ldr	r3, [pc, #20]	@ (800251c <HAL_IncTick+0x20>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4413      	add	r3, r2
 800250a:	4a03      	ldr	r2, [pc, #12]	@ (8002518 <HAL_IncTick+0x1c>)
 800250c:	6013      	str	r3, [r2, #0]
}
 800250e:	bf00      	nop
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	2000036c 	.word	0x2000036c
 800251c:	2000000c 	.word	0x2000000c

08002520 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  return uwTick;
 8002524:	4b03      	ldr	r3, [pc, #12]	@ (8002534 <HAL_GetTick+0x14>)
 8002526:	681b      	ldr	r3, [r3, #0]
}
 8002528:	4618      	mov	r0, r3
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	2000036c 	.word	0x2000036c

08002538 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002540:	f7ff ffee 	bl	8002520 <HAL_GetTick>
 8002544:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002550:	d004      	beq.n	800255c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002552:	4b09      	ldr	r3, [pc, #36]	@ (8002578 <HAL_Delay+0x40>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	4413      	add	r3, r2
 800255a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800255c:	bf00      	nop
 800255e:	f7ff ffdf 	bl	8002520 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	429a      	cmp	r2, r3
 800256c:	d8f7      	bhi.n	800255e <HAL_Delay+0x26>
  {
  }
}
 800256e:	bf00      	nop
 8002570:	bf00      	nop
 8002572:	3710      	adds	r7, #16
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	2000000c 	.word	0x2000000c

0800257c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f003 0307 	and.w	r3, r3, #7
 800258a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800258c:	4b0c      	ldr	r3, [pc, #48]	@ (80025c0 <__NVIC_SetPriorityGrouping+0x44>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002592:	68ba      	ldr	r2, [r7, #8]
 8002594:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002598:	4013      	ands	r3, r2
 800259a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025ae:	4a04      	ldr	r2, [pc, #16]	@ (80025c0 <__NVIC_SetPriorityGrouping+0x44>)
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	60d3      	str	r3, [r2, #12]
}
 80025b4:	bf00      	nop
 80025b6:	3714      	adds	r7, #20
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	e000ed00 	.word	0xe000ed00

080025c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025c8:	4b04      	ldr	r3, [pc, #16]	@ (80025dc <__NVIC_GetPriorityGrouping+0x18>)
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	0a1b      	lsrs	r3, r3, #8
 80025ce:	f003 0307 	and.w	r3, r3, #7
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	e000ed00 	.word	0xe000ed00

080025e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4603      	mov	r3, r0
 80025e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	db0b      	blt.n	800260a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025f2:	79fb      	ldrb	r3, [r7, #7]
 80025f4:	f003 021f 	and.w	r2, r3, #31
 80025f8:	4907      	ldr	r1, [pc, #28]	@ (8002618 <__NVIC_EnableIRQ+0x38>)
 80025fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fe:	095b      	lsrs	r3, r3, #5
 8002600:	2001      	movs	r0, #1
 8002602:	fa00 f202 	lsl.w	r2, r0, r2
 8002606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800260a:	bf00      	nop
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	e000e100 	.word	0xe000e100

0800261c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	4603      	mov	r3, r0
 8002624:	6039      	str	r1, [r7, #0]
 8002626:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262c:	2b00      	cmp	r3, #0
 800262e:	db0a      	blt.n	8002646 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	b2da      	uxtb	r2, r3
 8002634:	490c      	ldr	r1, [pc, #48]	@ (8002668 <__NVIC_SetPriority+0x4c>)
 8002636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263a:	0112      	lsls	r2, r2, #4
 800263c:	b2d2      	uxtb	r2, r2
 800263e:	440b      	add	r3, r1
 8002640:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002644:	e00a      	b.n	800265c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	b2da      	uxtb	r2, r3
 800264a:	4908      	ldr	r1, [pc, #32]	@ (800266c <__NVIC_SetPriority+0x50>)
 800264c:	79fb      	ldrb	r3, [r7, #7]
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	3b04      	subs	r3, #4
 8002654:	0112      	lsls	r2, r2, #4
 8002656:	b2d2      	uxtb	r2, r2
 8002658:	440b      	add	r3, r1
 800265a:	761a      	strb	r2, [r3, #24]
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	e000e100 	.word	0xe000e100
 800266c:	e000ed00 	.word	0xe000ed00

08002670 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002670:	b480      	push	{r7}
 8002672:	b089      	sub	sp, #36	@ 0x24
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f003 0307 	and.w	r3, r3, #7
 8002682:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	f1c3 0307 	rsb	r3, r3, #7
 800268a:	2b04      	cmp	r3, #4
 800268c:	bf28      	it	cs
 800268e:	2304      	movcs	r3, #4
 8002690:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	3304      	adds	r3, #4
 8002696:	2b06      	cmp	r3, #6
 8002698:	d902      	bls.n	80026a0 <NVIC_EncodePriority+0x30>
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	3b03      	subs	r3, #3
 800269e:	e000      	b.n	80026a2 <NVIC_EncodePriority+0x32>
 80026a0:	2300      	movs	r3, #0
 80026a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a4:	f04f 32ff 	mov.w	r2, #4294967295
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	43da      	mvns	r2, r3
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	401a      	ands	r2, r3
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026b8:	f04f 31ff 	mov.w	r1, #4294967295
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	fa01 f303 	lsl.w	r3, r1, r3
 80026c2:	43d9      	mvns	r1, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c8:	4313      	orrs	r3, r2
         );
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3724      	adds	r7, #36	@ 0x24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
	...

080026d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3b01      	subs	r3, #1
 80026e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026e8:	d301      	bcc.n	80026ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026ea:	2301      	movs	r3, #1
 80026ec:	e00f      	b.n	800270e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002718 <SysTick_Config+0x40>)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	3b01      	subs	r3, #1
 80026f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026f6:	210f      	movs	r1, #15
 80026f8:	f04f 30ff 	mov.w	r0, #4294967295
 80026fc:	f7ff ff8e 	bl	800261c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002700:	4b05      	ldr	r3, [pc, #20]	@ (8002718 <SysTick_Config+0x40>)
 8002702:	2200      	movs	r2, #0
 8002704:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002706:	4b04      	ldr	r3, [pc, #16]	@ (8002718 <SysTick_Config+0x40>)
 8002708:	2207      	movs	r2, #7
 800270a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	e000e010 	.word	0xe000e010

0800271c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f7ff ff29 	bl	800257c <__NVIC_SetPriorityGrouping>
}
 800272a:	bf00      	nop
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b086      	sub	sp, #24
 8002736:	af00      	add	r7, sp, #0
 8002738:	4603      	mov	r3, r0
 800273a:	60b9      	str	r1, [r7, #8]
 800273c:	607a      	str	r2, [r7, #4]
 800273e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002740:	f7ff ff40 	bl	80025c4 <__NVIC_GetPriorityGrouping>
 8002744:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	68b9      	ldr	r1, [r7, #8]
 800274a:	6978      	ldr	r0, [r7, #20]
 800274c:	f7ff ff90 	bl	8002670 <NVIC_EncodePriority>
 8002750:	4602      	mov	r2, r0
 8002752:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002756:	4611      	mov	r1, r2
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff ff5f 	bl	800261c <__NVIC_SetPriority>
}
 800275e:	bf00      	nop
 8002760:	3718      	adds	r7, #24
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b082      	sub	sp, #8
 800276a:	af00      	add	r7, sp, #0
 800276c:	4603      	mov	r3, r0
 800276e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff ff33 	bl	80025e0 <__NVIC_EnableIRQ>
}
 800277a:	bf00      	nop
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b082      	sub	sp, #8
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f7ff ffa4 	bl	80026d8 <SysTick_Config>
 8002790:	4603      	mov	r3, r0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800279a:	b480      	push	{r7}
 800279c:	b085      	sub	sp, #20
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027a2:	2300      	movs	r3, #0
 80027a4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d005      	beq.n	80027be <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2204      	movs	r2, #4
 80027b6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	73fb      	strb	r3, [r7, #15]
 80027bc:	e037      	b.n	800282e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 020e 	bic.w	r2, r2, #14
 80027cc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027dc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 0201 	bic.w	r2, r2, #1
 80027ec:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027f2:	f003 021f 	and.w	r2, r3, #31
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fa:	2101      	movs	r1, #1
 80027fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002800:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800280a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00c      	beq.n	800282e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800281e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002822:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800282c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2201      	movs	r2, #1
 8002832:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800283e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3714      	adds	r7, #20
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002854:	2300      	movs	r3, #0
 8002856:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d00d      	beq.n	8002880 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2204      	movs	r2, #4
 8002868:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	73fb      	strb	r3, [r7, #15]
 800287e:	e047      	b.n	8002910 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f022 020e 	bic.w	r2, r2, #14
 800288e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f022 0201 	bic.w	r2, r2, #1
 800289e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028aa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028b4:	f003 021f 	and.w	r2, r3, #31
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028bc:	2101      	movs	r1, #1
 80028be:	fa01 f202 	lsl.w	r2, r1, r2
 80028c2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80028cc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00c      	beq.n	80028f0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028e4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80028ee:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002904:	2b00      	cmp	r3, #0
 8002906:	d003      	beq.n	8002910 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	4798      	blx	r3
    }
  }
  return status;
 8002910:	7bfb      	ldrb	r3, [r7, #15]
}
 8002912:	4618      	mov	r0, r3
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
	...

0800291c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800291c:	b480      	push	{r7}
 800291e:	b087      	sub	sp, #28
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002926:	2300      	movs	r3, #0
 8002928:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800292a:	e15a      	b.n	8002be2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	2101      	movs	r1, #1
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	fa01 f303 	lsl.w	r3, r1, r3
 8002938:	4013      	ands	r3, r2
 800293a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 814c 	beq.w	8002bdc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f003 0303 	and.w	r3, r3, #3
 800294c:	2b01      	cmp	r3, #1
 800294e:	d005      	beq.n	800295c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002958:	2b02      	cmp	r3, #2
 800295a:	d130      	bne.n	80029be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	2203      	movs	r2, #3
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	43db      	mvns	r3, r3
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	4013      	ands	r3, r2
 8002972:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	68da      	ldr	r2, [r3, #12]
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	693a      	ldr	r2, [r7, #16]
 8002982:	4313      	orrs	r3, r2
 8002984:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002992:	2201      	movs	r2, #1
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	fa02 f303 	lsl.w	r3, r2, r3
 800299a:	43db      	mvns	r3, r3
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	4013      	ands	r3, r2
 80029a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	091b      	lsrs	r3, r3, #4
 80029a8:	f003 0201 	and.w	r2, r3, #1
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	2b03      	cmp	r3, #3
 80029c8:	d017      	beq.n	80029fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	2203      	movs	r2, #3
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	43db      	mvns	r3, r3
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	4013      	ands	r3, r2
 80029e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	689a      	ldr	r2, [r3, #8]
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	fa02 f303 	lsl.w	r3, r2, r3
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f003 0303 	and.w	r3, r3, #3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d123      	bne.n	8002a4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	08da      	lsrs	r2, r3, #3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	3208      	adds	r2, #8
 8002a0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	f003 0307 	and.w	r3, r3, #7
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	220f      	movs	r2, #15
 8002a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a22:	43db      	mvns	r3, r3
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	4013      	ands	r3, r2
 8002a28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	691a      	ldr	r2, [r3, #16]
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	f003 0307 	and.w	r3, r3, #7
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	08da      	lsrs	r2, r3, #3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	3208      	adds	r2, #8
 8002a48:	6939      	ldr	r1, [r7, #16]
 8002a4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	2203      	movs	r2, #3
 8002a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	4013      	ands	r3, r2
 8002a64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f003 0203 	and.w	r2, r3, #3
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	fa02 f303 	lsl.w	r3, r2, r3
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f000 80a6 	beq.w	8002bdc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a90:	4b5b      	ldr	r3, [pc, #364]	@ (8002c00 <HAL_GPIO_Init+0x2e4>)
 8002a92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a94:	4a5a      	ldr	r2, [pc, #360]	@ (8002c00 <HAL_GPIO_Init+0x2e4>)
 8002a96:	f043 0301 	orr.w	r3, r3, #1
 8002a9a:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a9c:	4b58      	ldr	r3, [pc, #352]	@ (8002c00 <HAL_GPIO_Init+0x2e4>)
 8002a9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	60bb      	str	r3, [r7, #8]
 8002aa6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002aa8:	4a56      	ldr	r2, [pc, #344]	@ (8002c04 <HAL_GPIO_Init+0x2e8>)
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	089b      	lsrs	r3, r3, #2
 8002aae:	3302      	adds	r3, #2
 8002ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	f003 0303 	and.w	r3, r3, #3
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	220f      	movs	r2, #15
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002ad2:	d01f      	beq.n	8002b14 <HAL_GPIO_Init+0x1f8>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a4c      	ldr	r2, [pc, #304]	@ (8002c08 <HAL_GPIO_Init+0x2ec>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d019      	beq.n	8002b10 <HAL_GPIO_Init+0x1f4>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a4b      	ldr	r2, [pc, #300]	@ (8002c0c <HAL_GPIO_Init+0x2f0>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d013      	beq.n	8002b0c <HAL_GPIO_Init+0x1f0>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a4a      	ldr	r2, [pc, #296]	@ (8002c10 <HAL_GPIO_Init+0x2f4>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d00d      	beq.n	8002b08 <HAL_GPIO_Init+0x1ec>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a49      	ldr	r2, [pc, #292]	@ (8002c14 <HAL_GPIO_Init+0x2f8>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d007      	beq.n	8002b04 <HAL_GPIO_Init+0x1e8>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a48      	ldr	r2, [pc, #288]	@ (8002c18 <HAL_GPIO_Init+0x2fc>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d101      	bne.n	8002b00 <HAL_GPIO_Init+0x1e4>
 8002afc:	2305      	movs	r3, #5
 8002afe:	e00a      	b.n	8002b16 <HAL_GPIO_Init+0x1fa>
 8002b00:	2306      	movs	r3, #6
 8002b02:	e008      	b.n	8002b16 <HAL_GPIO_Init+0x1fa>
 8002b04:	2304      	movs	r3, #4
 8002b06:	e006      	b.n	8002b16 <HAL_GPIO_Init+0x1fa>
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e004      	b.n	8002b16 <HAL_GPIO_Init+0x1fa>
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	e002      	b.n	8002b16 <HAL_GPIO_Init+0x1fa>
 8002b10:	2301      	movs	r3, #1
 8002b12:	e000      	b.n	8002b16 <HAL_GPIO_Init+0x1fa>
 8002b14:	2300      	movs	r3, #0
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	f002 0203 	and.w	r2, r2, #3
 8002b1c:	0092      	lsls	r2, r2, #2
 8002b1e:	4093      	lsls	r3, r2
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b26:	4937      	ldr	r1, [pc, #220]	@ (8002c04 <HAL_GPIO_Init+0x2e8>)
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	089b      	lsrs	r3, r3, #2
 8002b2c:	3302      	adds	r3, #2
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b34:	4b39      	ldr	r3, [pc, #228]	@ (8002c1c <HAL_GPIO_Init+0x300>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	4013      	ands	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d003      	beq.n	8002b58 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b58:	4a30      	ldr	r2, [pc, #192]	@ (8002c1c <HAL_GPIO_Init+0x300>)
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b5e:	4b2f      	ldr	r3, [pc, #188]	@ (8002c1c <HAL_GPIO_Init+0x300>)
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	43db      	mvns	r3, r3
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b82:	4a26      	ldr	r2, [pc, #152]	@ (8002c1c <HAL_GPIO_Init+0x300>)
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002b88:	4b24      	ldr	r3, [pc, #144]	@ (8002c1c <HAL_GPIO_Init+0x300>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	43db      	mvns	r3, r3
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	4013      	ands	r3, r2
 8002b96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d003      	beq.n	8002bac <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002bac:	4a1b      	ldr	r2, [pc, #108]	@ (8002c1c <HAL_GPIO_Init+0x300>)
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002bb2:	4b1a      	ldr	r3, [pc, #104]	@ (8002c1c <HAL_GPIO_Init+0x300>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	43db      	mvns	r3, r3
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002bd6:	4a11      	ldr	r2, [pc, #68]	@ (8002c1c <HAL_GPIO_Init+0x300>)
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	3301      	adds	r3, #1
 8002be0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	fa22 f303 	lsr.w	r3, r2, r3
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f47f ae9d 	bne.w	800292c <HAL_GPIO_Init+0x10>
  }
}
 8002bf2:	bf00      	nop
 8002bf4:	bf00      	nop
 8002bf6:	371c      	adds	r7, #28
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr
 8002c00:	40021000 	.word	0x40021000
 8002c04:	40010000 	.word	0x40010000
 8002c08:	48000400 	.word	0x48000400
 8002c0c:	48000800 	.word	0x48000800
 8002c10:	48000c00 	.word	0x48000c00
 8002c14:	48001000 	.word	0x48001000
 8002c18:	48001400 	.word	0x48001400
 8002c1c:	40010400 	.word	0x40010400

08002c20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	460b      	mov	r3, r1
 8002c2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	691a      	ldr	r2, [r3, #16]
 8002c30:	887b      	ldrh	r3, [r7, #2]
 8002c32:	4013      	ands	r3, r2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d002      	beq.n	8002c3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	73fb      	strb	r3, [r7, #15]
 8002c3c:	e001      	b.n	8002c42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3714      	adds	r7, #20
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	460b      	mov	r3, r1
 8002c5a:	807b      	strh	r3, [r7, #2]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c60:	787b      	ldrb	r3, [r7, #1]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d003      	beq.n	8002c6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c66:	887a      	ldrh	r2, [r7, #2]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c6c:	e002      	b.n	8002c74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c6e:	887a      	ldrh	r2, [r7, #2]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	460b      	mov	r3, r1
 8002c8a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c92:	887a      	ldrh	r2, [r7, #2]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	4013      	ands	r3, r2
 8002c98:	041a      	lsls	r2, r3, #16
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	43d9      	mvns	r1, r3
 8002c9e:	887b      	ldrh	r3, [r7, #2]
 8002ca0:	400b      	ands	r3, r1
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	619a      	str	r2, [r3, #24]
}
 8002ca8:	bf00      	nop
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d141      	bne.n	8002d46 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002cc2:	4b4b      	ldr	r3, [pc, #300]	@ (8002df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002cca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cce:	d131      	bne.n	8002d34 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002cd0:	4b47      	ldr	r3, [pc, #284]	@ (8002df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002cd6:	4a46      	ldr	r2, [pc, #280]	@ (8002df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002cdc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ce0:	4b43      	ldr	r3, [pc, #268]	@ (8002df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ce8:	4a41      	ldr	r2, [pc, #260]	@ (8002df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002cee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002cf0:	4b40      	ldr	r3, [pc, #256]	@ (8002df4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2232      	movs	r2, #50	@ 0x32
 8002cf6:	fb02 f303 	mul.w	r3, r2, r3
 8002cfa:	4a3f      	ldr	r2, [pc, #252]	@ (8002df8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002d00:	0c9b      	lsrs	r3, r3, #18
 8002d02:	3301      	adds	r3, #1
 8002d04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d06:	e002      	b.n	8002d0e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d0e:	4b38      	ldr	r3, [pc, #224]	@ (8002df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d1a:	d102      	bne.n	8002d22 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1f2      	bne.n	8002d08 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d22:	4b33      	ldr	r3, [pc, #204]	@ (8002df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d2e:	d158      	bne.n	8002de2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e057      	b.n	8002de4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d34:	4b2e      	ldr	r3, [pc, #184]	@ (8002df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d3a:	4a2d      	ldr	r2, [pc, #180]	@ (8002df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d40:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002d44:	e04d      	b.n	8002de2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d4c:	d141      	bne.n	8002dd2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d4e:	4b28      	ldr	r3, [pc, #160]	@ (8002df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002d56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d5a:	d131      	bne.n	8002dc0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d5c:	4b24      	ldr	r3, [pc, #144]	@ (8002df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d62:	4a23      	ldr	r2, [pc, #140]	@ (8002df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d68:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d6c:	4b20      	ldr	r3, [pc, #128]	@ (8002df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d74:	4a1e      	ldr	r2, [pc, #120]	@ (8002df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d7a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d7c:	4b1d      	ldr	r3, [pc, #116]	@ (8002df4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2232      	movs	r2, #50	@ 0x32
 8002d82:	fb02 f303 	mul.w	r3, r2, r3
 8002d86:	4a1c      	ldr	r2, [pc, #112]	@ (8002df8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002d88:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8c:	0c9b      	lsrs	r3, r3, #18
 8002d8e:	3301      	adds	r3, #1
 8002d90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d92:	e002      	b.n	8002d9a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	3b01      	subs	r3, #1
 8002d98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d9a:	4b15      	ldr	r3, [pc, #84]	@ (8002df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002da2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002da6:	d102      	bne.n	8002dae <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1f2      	bne.n	8002d94 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002dae:	4b10      	ldr	r3, [pc, #64]	@ (8002df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002db6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dba:	d112      	bne.n	8002de2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e011      	b.n	8002de4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8002df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002dc6:	4a0a      	ldr	r2, [pc, #40]	@ (8002df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dcc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002dd0:	e007      	b.n	8002de2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002dd2:	4b07      	ldr	r3, [pc, #28]	@ (8002df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002dda:	4a05      	ldr	r2, [pc, #20]	@ (8002df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ddc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002de0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3714      	adds	r7, #20
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr
 8002df0:	40007000 	.word	0x40007000
 8002df4:	20000004 	.word	0x20000004
 8002df8:	431bde83 	.word	0x431bde83

08002dfc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002e00:	4b05      	ldr	r3, [pc, #20]	@ (8002e18 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	4a04      	ldr	r2, [pc, #16]	@ (8002e18 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002e06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e0a:	6093      	str	r3, [r2, #8]
}
 8002e0c:	bf00      	nop
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	40007000 	.word	0x40007000

08002e1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b088      	sub	sp, #32
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e2fe      	b.n	800342c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d075      	beq.n	8002f26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e3a:	4b97      	ldr	r3, [pc, #604]	@ (8003098 <HAL_RCC_OscConfig+0x27c>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 030c 	and.w	r3, r3, #12
 8002e42:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e44:	4b94      	ldr	r3, [pc, #592]	@ (8003098 <HAL_RCC_OscConfig+0x27c>)
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	f003 0303 	and.w	r3, r3, #3
 8002e4c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	2b0c      	cmp	r3, #12
 8002e52:	d102      	bne.n	8002e5a <HAL_RCC_OscConfig+0x3e>
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	2b03      	cmp	r3, #3
 8002e58:	d002      	beq.n	8002e60 <HAL_RCC_OscConfig+0x44>
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	2b08      	cmp	r3, #8
 8002e5e:	d10b      	bne.n	8002e78 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e60:	4b8d      	ldr	r3, [pc, #564]	@ (8003098 <HAL_RCC_OscConfig+0x27c>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d05b      	beq.n	8002f24 <HAL_RCC_OscConfig+0x108>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d157      	bne.n	8002f24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e2d9      	b.n	800342c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e80:	d106      	bne.n	8002e90 <HAL_RCC_OscConfig+0x74>
 8002e82:	4b85      	ldr	r3, [pc, #532]	@ (8003098 <HAL_RCC_OscConfig+0x27c>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a84      	ldr	r2, [pc, #528]	@ (8003098 <HAL_RCC_OscConfig+0x27c>)
 8002e88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e8c:	6013      	str	r3, [r2, #0]
 8002e8e:	e01d      	b.n	8002ecc <HAL_RCC_OscConfig+0xb0>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e98:	d10c      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x98>
 8002e9a:	4b7f      	ldr	r3, [pc, #508]	@ (8003098 <HAL_RCC_OscConfig+0x27c>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a7e      	ldr	r2, [pc, #504]	@ (8003098 <HAL_RCC_OscConfig+0x27c>)
 8002ea0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ea4:	6013      	str	r3, [r2, #0]
 8002ea6:	4b7c      	ldr	r3, [pc, #496]	@ (8003098 <HAL_RCC_OscConfig+0x27c>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a7b      	ldr	r2, [pc, #492]	@ (8003098 <HAL_RCC_OscConfig+0x27c>)
 8002eac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eb0:	6013      	str	r3, [r2, #0]
 8002eb2:	e00b      	b.n	8002ecc <HAL_RCC_OscConfig+0xb0>
 8002eb4:	4b78      	ldr	r3, [pc, #480]	@ (8003098 <HAL_RCC_OscConfig+0x27c>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a77      	ldr	r2, [pc, #476]	@ (8003098 <HAL_RCC_OscConfig+0x27c>)
 8002eba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ebe:	6013      	str	r3, [r2, #0]
 8002ec0:	4b75      	ldr	r3, [pc, #468]	@ (8003098 <HAL_RCC_OscConfig+0x27c>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a74      	ldr	r2, [pc, #464]	@ (8003098 <HAL_RCC_OscConfig+0x27c>)
 8002ec6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002eca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d013      	beq.n	8002efc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed4:	f7ff fb24 	bl	8002520 <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002edc:	f7ff fb20 	bl	8002520 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b64      	cmp	r3, #100	@ 0x64
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e29e      	b.n	800342c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002eee:	4b6a      	ldr	r3, [pc, #424]	@ (8003098 <HAL_RCC_OscConfig+0x27c>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d0f0      	beq.n	8002edc <HAL_RCC_OscConfig+0xc0>
 8002efa:	e014      	b.n	8002f26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002efc:	f7ff fb10 	bl	8002520 <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f04:	f7ff fb0c 	bl	8002520 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b64      	cmp	r3, #100	@ 0x64
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e28a      	b.n	800342c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f16:	4b60      	ldr	r3, [pc, #384]	@ (8003098 <HAL_RCC_OscConfig+0x27c>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1f0      	bne.n	8002f04 <HAL_RCC_OscConfig+0xe8>
 8002f22:	e000      	b.n	8002f26 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d075      	beq.n	800301e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f32:	4b59      	ldr	r3, [pc, #356]	@ (8003098 <HAL_RCC_OscConfig+0x27c>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f003 030c 	and.w	r3, r3, #12
 8002f3a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f3c:	4b56      	ldr	r3, [pc, #344]	@ (8003098 <HAL_RCC_OscConfig+0x27c>)
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	f003 0303 	and.w	r3, r3, #3
 8002f44:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	2b0c      	cmp	r3, #12
 8002f4a:	d102      	bne.n	8002f52 <HAL_RCC_OscConfig+0x136>
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d002      	beq.n	8002f58 <HAL_RCC_OscConfig+0x13c>
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	2b04      	cmp	r3, #4
 8002f56:	d11f      	bne.n	8002f98 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f58:	4b4f      	ldr	r3, [pc, #316]	@ (8003098 <HAL_RCC_OscConfig+0x27c>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d005      	beq.n	8002f70 <HAL_RCC_OscConfig+0x154>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d101      	bne.n	8002f70 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e25d      	b.n	800342c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f70:	4b49      	ldr	r3, [pc, #292]	@ (8003098 <HAL_RCC_OscConfig+0x27c>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	061b      	lsls	r3, r3, #24
 8002f7e:	4946      	ldr	r1, [pc, #280]	@ (8003098 <HAL_RCC_OscConfig+0x27c>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002f84:	4b45      	ldr	r3, [pc, #276]	@ (800309c <HAL_RCC_OscConfig+0x280>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff fa7d 	bl	8002488 <HAL_InitTick>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d043      	beq.n	800301c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e249      	b.n	800342c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d023      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fa0:	4b3d      	ldr	r3, [pc, #244]	@ (8003098 <HAL_RCC_OscConfig+0x27c>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a3c      	ldr	r2, [pc, #240]	@ (8003098 <HAL_RCC_OscConfig+0x27c>)
 8002fa6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002faa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fac:	f7ff fab8 	bl	8002520 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fb4:	f7ff fab4 	bl	8002520 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e232      	b.n	800342c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fc6:	4b34      	ldr	r3, [pc, #208]	@ (8003098 <HAL_RCC_OscConfig+0x27c>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d0f0      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd2:	4b31      	ldr	r3, [pc, #196]	@ (8003098 <HAL_RCC_OscConfig+0x27c>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	061b      	lsls	r3, r3, #24
 8002fe0:	492d      	ldr	r1, [pc, #180]	@ (8003098 <HAL_RCC_OscConfig+0x27c>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	604b      	str	r3, [r1, #4]
 8002fe6:	e01a      	b.n	800301e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fe8:	4b2b      	ldr	r3, [pc, #172]	@ (8003098 <HAL_RCC_OscConfig+0x27c>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a2a      	ldr	r2, [pc, #168]	@ (8003098 <HAL_RCC_OscConfig+0x27c>)
 8002fee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ff2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff4:	f7ff fa94 	bl	8002520 <HAL_GetTick>
 8002ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ffa:	e008      	b.n	800300e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ffc:	f7ff fa90 	bl	8002520 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b02      	cmp	r3, #2
 8003008:	d901      	bls.n	800300e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e20e      	b.n	800342c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800300e:	4b22      	ldr	r3, [pc, #136]	@ (8003098 <HAL_RCC_OscConfig+0x27c>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1f0      	bne.n	8002ffc <HAL_RCC_OscConfig+0x1e0>
 800301a:	e000      	b.n	800301e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800301c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0308 	and.w	r3, r3, #8
 8003026:	2b00      	cmp	r3, #0
 8003028:	d041      	beq.n	80030ae <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d01c      	beq.n	800306c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003032:	4b19      	ldr	r3, [pc, #100]	@ (8003098 <HAL_RCC_OscConfig+0x27c>)
 8003034:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003038:	4a17      	ldr	r2, [pc, #92]	@ (8003098 <HAL_RCC_OscConfig+0x27c>)
 800303a:	f043 0301 	orr.w	r3, r3, #1
 800303e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003042:	f7ff fa6d 	bl	8002520 <HAL_GetTick>
 8003046:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003048:	e008      	b.n	800305c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800304a:	f7ff fa69 	bl	8002520 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d901      	bls.n	800305c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e1e7      	b.n	800342c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800305c:	4b0e      	ldr	r3, [pc, #56]	@ (8003098 <HAL_RCC_OscConfig+0x27c>)
 800305e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0ef      	beq.n	800304a <HAL_RCC_OscConfig+0x22e>
 800306a:	e020      	b.n	80030ae <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800306c:	4b0a      	ldr	r3, [pc, #40]	@ (8003098 <HAL_RCC_OscConfig+0x27c>)
 800306e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003072:	4a09      	ldr	r2, [pc, #36]	@ (8003098 <HAL_RCC_OscConfig+0x27c>)
 8003074:	f023 0301 	bic.w	r3, r3, #1
 8003078:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800307c:	f7ff fa50 	bl	8002520 <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003082:	e00d      	b.n	80030a0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003084:	f7ff fa4c 	bl	8002520 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d906      	bls.n	80030a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e1ca      	b.n	800342c <HAL_RCC_OscConfig+0x610>
 8003096:	bf00      	nop
 8003098:	40021000 	.word	0x40021000
 800309c:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030a0:	4b8c      	ldr	r3, [pc, #560]	@ (80032d4 <HAL_RCC_OscConfig+0x4b8>)
 80030a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1ea      	bne.n	8003084 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0304 	and.w	r3, r3, #4
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f000 80a6 	beq.w	8003208 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030bc:	2300      	movs	r3, #0
 80030be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80030c0:	4b84      	ldr	r3, [pc, #528]	@ (80032d4 <HAL_RCC_OscConfig+0x4b8>)
 80030c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d101      	bne.n	80030d0 <HAL_RCC_OscConfig+0x2b4>
 80030cc:	2301      	movs	r3, #1
 80030ce:	e000      	b.n	80030d2 <HAL_RCC_OscConfig+0x2b6>
 80030d0:	2300      	movs	r3, #0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00d      	beq.n	80030f2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030d6:	4b7f      	ldr	r3, [pc, #508]	@ (80032d4 <HAL_RCC_OscConfig+0x4b8>)
 80030d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030da:	4a7e      	ldr	r2, [pc, #504]	@ (80032d4 <HAL_RCC_OscConfig+0x4b8>)
 80030dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80030e2:	4b7c      	ldr	r3, [pc, #496]	@ (80032d4 <HAL_RCC_OscConfig+0x4b8>)
 80030e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ea:	60fb      	str	r3, [r7, #12]
 80030ec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80030ee:	2301      	movs	r3, #1
 80030f0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030f2:	4b79      	ldr	r3, [pc, #484]	@ (80032d8 <HAL_RCC_OscConfig+0x4bc>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d118      	bne.n	8003130 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030fe:	4b76      	ldr	r3, [pc, #472]	@ (80032d8 <HAL_RCC_OscConfig+0x4bc>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a75      	ldr	r2, [pc, #468]	@ (80032d8 <HAL_RCC_OscConfig+0x4bc>)
 8003104:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003108:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800310a:	f7ff fa09 	bl	8002520 <HAL_GetTick>
 800310e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003110:	e008      	b.n	8003124 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003112:	f7ff fa05 	bl	8002520 <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	2b02      	cmp	r3, #2
 800311e:	d901      	bls.n	8003124 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e183      	b.n	800342c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003124:	4b6c      	ldr	r3, [pc, #432]	@ (80032d8 <HAL_RCC_OscConfig+0x4bc>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800312c:	2b00      	cmp	r3, #0
 800312e:	d0f0      	beq.n	8003112 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d108      	bne.n	800314a <HAL_RCC_OscConfig+0x32e>
 8003138:	4b66      	ldr	r3, [pc, #408]	@ (80032d4 <HAL_RCC_OscConfig+0x4b8>)
 800313a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800313e:	4a65      	ldr	r2, [pc, #404]	@ (80032d4 <HAL_RCC_OscConfig+0x4b8>)
 8003140:	f043 0301 	orr.w	r3, r3, #1
 8003144:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003148:	e024      	b.n	8003194 <HAL_RCC_OscConfig+0x378>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	2b05      	cmp	r3, #5
 8003150:	d110      	bne.n	8003174 <HAL_RCC_OscConfig+0x358>
 8003152:	4b60      	ldr	r3, [pc, #384]	@ (80032d4 <HAL_RCC_OscConfig+0x4b8>)
 8003154:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003158:	4a5e      	ldr	r2, [pc, #376]	@ (80032d4 <HAL_RCC_OscConfig+0x4b8>)
 800315a:	f043 0304 	orr.w	r3, r3, #4
 800315e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003162:	4b5c      	ldr	r3, [pc, #368]	@ (80032d4 <HAL_RCC_OscConfig+0x4b8>)
 8003164:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003168:	4a5a      	ldr	r2, [pc, #360]	@ (80032d4 <HAL_RCC_OscConfig+0x4b8>)
 800316a:	f043 0301 	orr.w	r3, r3, #1
 800316e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003172:	e00f      	b.n	8003194 <HAL_RCC_OscConfig+0x378>
 8003174:	4b57      	ldr	r3, [pc, #348]	@ (80032d4 <HAL_RCC_OscConfig+0x4b8>)
 8003176:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800317a:	4a56      	ldr	r2, [pc, #344]	@ (80032d4 <HAL_RCC_OscConfig+0x4b8>)
 800317c:	f023 0301 	bic.w	r3, r3, #1
 8003180:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003184:	4b53      	ldr	r3, [pc, #332]	@ (80032d4 <HAL_RCC_OscConfig+0x4b8>)
 8003186:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800318a:	4a52      	ldr	r2, [pc, #328]	@ (80032d4 <HAL_RCC_OscConfig+0x4b8>)
 800318c:	f023 0304 	bic.w	r3, r3, #4
 8003190:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d016      	beq.n	80031ca <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800319c:	f7ff f9c0 	bl	8002520 <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031a2:	e00a      	b.n	80031ba <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031a4:	f7ff f9bc 	bl	8002520 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e138      	b.n	800342c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031ba:	4b46      	ldr	r3, [pc, #280]	@ (80032d4 <HAL_RCC_OscConfig+0x4b8>)
 80031bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d0ed      	beq.n	80031a4 <HAL_RCC_OscConfig+0x388>
 80031c8:	e015      	b.n	80031f6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ca:	f7ff f9a9 	bl	8002520 <HAL_GetTick>
 80031ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031d0:	e00a      	b.n	80031e8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031d2:	f7ff f9a5 	bl	8002520 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d901      	bls.n	80031e8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e121      	b.n	800342c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031e8:	4b3a      	ldr	r3, [pc, #232]	@ (80032d4 <HAL_RCC_OscConfig+0x4b8>)
 80031ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1ed      	bne.n	80031d2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031f6:	7ffb      	ldrb	r3, [r7, #31]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d105      	bne.n	8003208 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031fc:	4b35      	ldr	r3, [pc, #212]	@ (80032d4 <HAL_RCC_OscConfig+0x4b8>)
 80031fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003200:	4a34      	ldr	r2, [pc, #208]	@ (80032d4 <HAL_RCC_OscConfig+0x4b8>)
 8003202:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003206:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0320 	and.w	r3, r3, #32
 8003210:	2b00      	cmp	r3, #0
 8003212:	d03c      	beq.n	800328e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d01c      	beq.n	8003256 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800321c:	4b2d      	ldr	r3, [pc, #180]	@ (80032d4 <HAL_RCC_OscConfig+0x4b8>)
 800321e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003222:	4a2c      	ldr	r2, [pc, #176]	@ (80032d4 <HAL_RCC_OscConfig+0x4b8>)
 8003224:	f043 0301 	orr.w	r3, r3, #1
 8003228:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800322c:	f7ff f978 	bl	8002520 <HAL_GetTick>
 8003230:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003232:	e008      	b.n	8003246 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003234:	f7ff f974 	bl	8002520 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b02      	cmp	r3, #2
 8003240:	d901      	bls.n	8003246 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e0f2      	b.n	800342c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003246:	4b23      	ldr	r3, [pc, #140]	@ (80032d4 <HAL_RCC_OscConfig+0x4b8>)
 8003248:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d0ef      	beq.n	8003234 <HAL_RCC_OscConfig+0x418>
 8003254:	e01b      	b.n	800328e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003256:	4b1f      	ldr	r3, [pc, #124]	@ (80032d4 <HAL_RCC_OscConfig+0x4b8>)
 8003258:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800325c:	4a1d      	ldr	r2, [pc, #116]	@ (80032d4 <HAL_RCC_OscConfig+0x4b8>)
 800325e:	f023 0301 	bic.w	r3, r3, #1
 8003262:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003266:	f7ff f95b 	bl	8002520 <HAL_GetTick>
 800326a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800326c:	e008      	b.n	8003280 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800326e:	f7ff f957 	bl	8002520 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d901      	bls.n	8003280 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e0d5      	b.n	800342c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003280:	4b14      	ldr	r3, [pc, #80]	@ (80032d4 <HAL_RCC_OscConfig+0x4b8>)
 8003282:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1ef      	bne.n	800326e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	2b00      	cmp	r3, #0
 8003294:	f000 80c9 	beq.w	800342a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003298:	4b0e      	ldr	r3, [pc, #56]	@ (80032d4 <HAL_RCC_OscConfig+0x4b8>)
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f003 030c 	and.w	r3, r3, #12
 80032a0:	2b0c      	cmp	r3, #12
 80032a2:	f000 8083 	beq.w	80033ac <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	69db      	ldr	r3, [r3, #28]
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d15e      	bne.n	800336c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ae:	4b09      	ldr	r3, [pc, #36]	@ (80032d4 <HAL_RCC_OscConfig+0x4b8>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a08      	ldr	r2, [pc, #32]	@ (80032d4 <HAL_RCC_OscConfig+0x4b8>)
 80032b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80032b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ba:	f7ff f931 	bl	8002520 <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032c0:	e00c      	b.n	80032dc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032c2:	f7ff f92d 	bl	8002520 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d905      	bls.n	80032dc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e0ab      	b.n	800342c <HAL_RCC_OscConfig+0x610>
 80032d4:	40021000 	.word	0x40021000
 80032d8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032dc:	4b55      	ldr	r3, [pc, #340]	@ (8003434 <HAL_RCC_OscConfig+0x618>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1ec      	bne.n	80032c2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032e8:	4b52      	ldr	r3, [pc, #328]	@ (8003434 <HAL_RCC_OscConfig+0x618>)
 80032ea:	68da      	ldr	r2, [r3, #12]
 80032ec:	4b52      	ldr	r3, [pc, #328]	@ (8003438 <HAL_RCC_OscConfig+0x61c>)
 80032ee:	4013      	ands	r3, r2
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	6a11      	ldr	r1, [r2, #32]
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80032f8:	3a01      	subs	r2, #1
 80032fa:	0112      	lsls	r2, r2, #4
 80032fc:	4311      	orrs	r1, r2
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003302:	0212      	lsls	r2, r2, #8
 8003304:	4311      	orrs	r1, r2
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800330a:	0852      	lsrs	r2, r2, #1
 800330c:	3a01      	subs	r2, #1
 800330e:	0552      	lsls	r2, r2, #21
 8003310:	4311      	orrs	r1, r2
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003316:	0852      	lsrs	r2, r2, #1
 8003318:	3a01      	subs	r2, #1
 800331a:	0652      	lsls	r2, r2, #25
 800331c:	4311      	orrs	r1, r2
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003322:	06d2      	lsls	r2, r2, #27
 8003324:	430a      	orrs	r2, r1
 8003326:	4943      	ldr	r1, [pc, #268]	@ (8003434 <HAL_RCC_OscConfig+0x618>)
 8003328:	4313      	orrs	r3, r2
 800332a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800332c:	4b41      	ldr	r3, [pc, #260]	@ (8003434 <HAL_RCC_OscConfig+0x618>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a40      	ldr	r2, [pc, #256]	@ (8003434 <HAL_RCC_OscConfig+0x618>)
 8003332:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003336:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003338:	4b3e      	ldr	r3, [pc, #248]	@ (8003434 <HAL_RCC_OscConfig+0x618>)
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	4a3d      	ldr	r2, [pc, #244]	@ (8003434 <HAL_RCC_OscConfig+0x618>)
 800333e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003342:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003344:	f7ff f8ec 	bl	8002520 <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800334a:	e008      	b.n	800335e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800334c:	f7ff f8e8 	bl	8002520 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b02      	cmp	r3, #2
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e066      	b.n	800342c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800335e:	4b35      	ldr	r3, [pc, #212]	@ (8003434 <HAL_RCC_OscConfig+0x618>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d0f0      	beq.n	800334c <HAL_RCC_OscConfig+0x530>
 800336a:	e05e      	b.n	800342a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800336c:	4b31      	ldr	r3, [pc, #196]	@ (8003434 <HAL_RCC_OscConfig+0x618>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a30      	ldr	r2, [pc, #192]	@ (8003434 <HAL_RCC_OscConfig+0x618>)
 8003372:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003376:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003378:	f7ff f8d2 	bl	8002520 <HAL_GetTick>
 800337c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800337e:	e008      	b.n	8003392 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003380:	f7ff f8ce 	bl	8002520 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b02      	cmp	r3, #2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e04c      	b.n	800342c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003392:	4b28      	ldr	r3, [pc, #160]	@ (8003434 <HAL_RCC_OscConfig+0x618>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1f0      	bne.n	8003380 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800339e:	4b25      	ldr	r3, [pc, #148]	@ (8003434 <HAL_RCC_OscConfig+0x618>)
 80033a0:	68da      	ldr	r2, [r3, #12]
 80033a2:	4924      	ldr	r1, [pc, #144]	@ (8003434 <HAL_RCC_OscConfig+0x618>)
 80033a4:	4b25      	ldr	r3, [pc, #148]	@ (800343c <HAL_RCC_OscConfig+0x620>)
 80033a6:	4013      	ands	r3, r2
 80033a8:	60cb      	str	r3, [r1, #12]
 80033aa:	e03e      	b.n	800342a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	69db      	ldr	r3, [r3, #28]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d101      	bne.n	80033b8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e039      	b.n	800342c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80033b8:	4b1e      	ldr	r3, [pc, #120]	@ (8003434 <HAL_RCC_OscConfig+0x618>)
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	f003 0203 	and.w	r2, r3, #3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d12c      	bne.n	8003426 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d6:	3b01      	subs	r3, #1
 80033d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033da:	429a      	cmp	r2, r3
 80033dc:	d123      	bne.n	8003426 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d11b      	bne.n	8003426 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d113      	bne.n	8003426 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003408:	085b      	lsrs	r3, r3, #1
 800340a:	3b01      	subs	r3, #1
 800340c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800340e:	429a      	cmp	r2, r3
 8003410:	d109      	bne.n	8003426 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800341c:	085b      	lsrs	r3, r3, #1
 800341e:	3b01      	subs	r3, #1
 8003420:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003422:	429a      	cmp	r2, r3
 8003424:	d001      	beq.n	800342a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e000      	b.n	800342c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	3720      	adds	r7, #32
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40021000 	.word	0x40021000
 8003438:	019f800c 	.word	0x019f800c
 800343c:	feeefffc 	.word	0xfeeefffc

08003440 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b086      	sub	sp, #24
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800344a:	2300      	movs	r3, #0
 800344c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d101      	bne.n	8003458 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e11e      	b.n	8003696 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003458:	4b91      	ldr	r3, [pc, #580]	@ (80036a0 <HAL_RCC_ClockConfig+0x260>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 030f 	and.w	r3, r3, #15
 8003460:	683a      	ldr	r2, [r7, #0]
 8003462:	429a      	cmp	r2, r3
 8003464:	d910      	bls.n	8003488 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003466:	4b8e      	ldr	r3, [pc, #568]	@ (80036a0 <HAL_RCC_ClockConfig+0x260>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f023 020f 	bic.w	r2, r3, #15
 800346e:	498c      	ldr	r1, [pc, #560]	@ (80036a0 <HAL_RCC_ClockConfig+0x260>)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	4313      	orrs	r3, r2
 8003474:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003476:	4b8a      	ldr	r3, [pc, #552]	@ (80036a0 <HAL_RCC_ClockConfig+0x260>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 030f 	and.w	r3, r3, #15
 800347e:	683a      	ldr	r2, [r7, #0]
 8003480:	429a      	cmp	r2, r3
 8003482:	d001      	beq.n	8003488 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e106      	b.n	8003696 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	2b00      	cmp	r3, #0
 8003492:	d073      	beq.n	800357c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	2b03      	cmp	r3, #3
 800349a:	d129      	bne.n	80034f0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800349c:	4b81      	ldr	r3, [pc, #516]	@ (80036a4 <HAL_RCC_ClockConfig+0x264>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d101      	bne.n	80034ac <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e0f4      	b.n	8003696 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80034ac:	f000 f99e 	bl	80037ec <RCC_GetSysClockFreqFromPLLSource>
 80034b0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	4a7c      	ldr	r2, [pc, #496]	@ (80036a8 <HAL_RCC_ClockConfig+0x268>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d93f      	bls.n	800353a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80034ba:	4b7a      	ldr	r3, [pc, #488]	@ (80036a4 <HAL_RCC_ClockConfig+0x264>)
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d009      	beq.n	80034da <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d033      	beq.n	800353a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d12f      	bne.n	800353a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80034da:	4b72      	ldr	r3, [pc, #456]	@ (80036a4 <HAL_RCC_ClockConfig+0x264>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80034e2:	4a70      	ldr	r2, [pc, #448]	@ (80036a4 <HAL_RCC_ClockConfig+0x264>)
 80034e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034e8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80034ea:	2380      	movs	r3, #128	@ 0x80
 80034ec:	617b      	str	r3, [r7, #20]
 80034ee:	e024      	b.n	800353a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d107      	bne.n	8003508 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034f8:	4b6a      	ldr	r3, [pc, #424]	@ (80036a4 <HAL_RCC_ClockConfig+0x264>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d109      	bne.n	8003518 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e0c6      	b.n	8003696 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003508:	4b66      	ldr	r3, [pc, #408]	@ (80036a4 <HAL_RCC_ClockConfig+0x264>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003510:	2b00      	cmp	r3, #0
 8003512:	d101      	bne.n	8003518 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e0be      	b.n	8003696 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003518:	f000 f8ce 	bl	80036b8 <HAL_RCC_GetSysClockFreq>
 800351c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	4a61      	ldr	r2, [pc, #388]	@ (80036a8 <HAL_RCC_ClockConfig+0x268>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d909      	bls.n	800353a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003526:	4b5f      	ldr	r3, [pc, #380]	@ (80036a4 <HAL_RCC_ClockConfig+0x264>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800352e:	4a5d      	ldr	r2, [pc, #372]	@ (80036a4 <HAL_RCC_ClockConfig+0x264>)
 8003530:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003534:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003536:	2380      	movs	r3, #128	@ 0x80
 8003538:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800353a:	4b5a      	ldr	r3, [pc, #360]	@ (80036a4 <HAL_RCC_ClockConfig+0x264>)
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f023 0203 	bic.w	r2, r3, #3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	4957      	ldr	r1, [pc, #348]	@ (80036a4 <HAL_RCC_ClockConfig+0x264>)
 8003548:	4313      	orrs	r3, r2
 800354a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800354c:	f7fe ffe8 	bl	8002520 <HAL_GetTick>
 8003550:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003552:	e00a      	b.n	800356a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003554:	f7fe ffe4 	bl	8002520 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003562:	4293      	cmp	r3, r2
 8003564:	d901      	bls.n	800356a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e095      	b.n	8003696 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800356a:	4b4e      	ldr	r3, [pc, #312]	@ (80036a4 <HAL_RCC_ClockConfig+0x264>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 020c 	and.w	r2, r3, #12
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	429a      	cmp	r2, r3
 800357a:	d1eb      	bne.n	8003554 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d023      	beq.n	80035d0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0304 	and.w	r3, r3, #4
 8003590:	2b00      	cmp	r3, #0
 8003592:	d005      	beq.n	80035a0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003594:	4b43      	ldr	r3, [pc, #268]	@ (80036a4 <HAL_RCC_ClockConfig+0x264>)
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	4a42      	ldr	r2, [pc, #264]	@ (80036a4 <HAL_RCC_ClockConfig+0x264>)
 800359a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800359e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0308 	and.w	r3, r3, #8
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d007      	beq.n	80035bc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80035ac:	4b3d      	ldr	r3, [pc, #244]	@ (80036a4 <HAL_RCC_ClockConfig+0x264>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80035b4:	4a3b      	ldr	r2, [pc, #236]	@ (80036a4 <HAL_RCC_ClockConfig+0x264>)
 80035b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80035ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035bc:	4b39      	ldr	r3, [pc, #228]	@ (80036a4 <HAL_RCC_ClockConfig+0x264>)
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	4936      	ldr	r1, [pc, #216]	@ (80036a4 <HAL_RCC_ClockConfig+0x264>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	608b      	str	r3, [r1, #8]
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	2b80      	cmp	r3, #128	@ 0x80
 80035d4:	d105      	bne.n	80035e2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80035d6:	4b33      	ldr	r3, [pc, #204]	@ (80036a4 <HAL_RCC_ClockConfig+0x264>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	4a32      	ldr	r2, [pc, #200]	@ (80036a4 <HAL_RCC_ClockConfig+0x264>)
 80035dc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80035e0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035e2:	4b2f      	ldr	r3, [pc, #188]	@ (80036a0 <HAL_RCC_ClockConfig+0x260>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 030f 	and.w	r3, r3, #15
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d21d      	bcs.n	800362c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035f0:	4b2b      	ldr	r3, [pc, #172]	@ (80036a0 <HAL_RCC_ClockConfig+0x260>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f023 020f 	bic.w	r2, r3, #15
 80035f8:	4929      	ldr	r1, [pc, #164]	@ (80036a0 <HAL_RCC_ClockConfig+0x260>)
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003600:	f7fe ff8e 	bl	8002520 <HAL_GetTick>
 8003604:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003606:	e00a      	b.n	800361e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003608:	f7fe ff8a 	bl	8002520 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003616:	4293      	cmp	r3, r2
 8003618:	d901      	bls.n	800361e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e03b      	b.n	8003696 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800361e:	4b20      	ldr	r3, [pc, #128]	@ (80036a0 <HAL_RCC_ClockConfig+0x260>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 030f 	and.w	r3, r3, #15
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	429a      	cmp	r2, r3
 800362a:	d1ed      	bne.n	8003608 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0304 	and.w	r3, r3, #4
 8003634:	2b00      	cmp	r3, #0
 8003636:	d008      	beq.n	800364a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003638:	4b1a      	ldr	r3, [pc, #104]	@ (80036a4 <HAL_RCC_ClockConfig+0x264>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	4917      	ldr	r1, [pc, #92]	@ (80036a4 <HAL_RCC_ClockConfig+0x264>)
 8003646:	4313      	orrs	r3, r2
 8003648:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0308 	and.w	r3, r3, #8
 8003652:	2b00      	cmp	r3, #0
 8003654:	d009      	beq.n	800366a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003656:	4b13      	ldr	r3, [pc, #76]	@ (80036a4 <HAL_RCC_ClockConfig+0x264>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	490f      	ldr	r1, [pc, #60]	@ (80036a4 <HAL_RCC_ClockConfig+0x264>)
 8003666:	4313      	orrs	r3, r2
 8003668:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800366a:	f000 f825 	bl	80036b8 <HAL_RCC_GetSysClockFreq>
 800366e:	4602      	mov	r2, r0
 8003670:	4b0c      	ldr	r3, [pc, #48]	@ (80036a4 <HAL_RCC_ClockConfig+0x264>)
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	091b      	lsrs	r3, r3, #4
 8003676:	f003 030f 	and.w	r3, r3, #15
 800367a:	490c      	ldr	r1, [pc, #48]	@ (80036ac <HAL_RCC_ClockConfig+0x26c>)
 800367c:	5ccb      	ldrb	r3, [r1, r3]
 800367e:	f003 031f 	and.w	r3, r3, #31
 8003682:	fa22 f303 	lsr.w	r3, r2, r3
 8003686:	4a0a      	ldr	r2, [pc, #40]	@ (80036b0 <HAL_RCC_ClockConfig+0x270>)
 8003688:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800368a:	4b0a      	ldr	r3, [pc, #40]	@ (80036b4 <HAL_RCC_ClockConfig+0x274>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4618      	mov	r0, r3
 8003690:	f7fe fefa 	bl	8002488 <HAL_InitTick>
 8003694:	4603      	mov	r3, r0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3718      	adds	r7, #24
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	40022000 	.word	0x40022000
 80036a4:	40021000 	.word	0x40021000
 80036a8:	04c4b400 	.word	0x04c4b400
 80036ac:	0800978c 	.word	0x0800978c
 80036b0:	20000004 	.word	0x20000004
 80036b4:	20000008 	.word	0x20000008

080036b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b087      	sub	sp, #28
 80036bc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80036be:	4b2c      	ldr	r3, [pc, #176]	@ (8003770 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f003 030c 	and.w	r3, r3, #12
 80036c6:	2b04      	cmp	r3, #4
 80036c8:	d102      	bne.n	80036d0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80036ca:	4b2a      	ldr	r3, [pc, #168]	@ (8003774 <HAL_RCC_GetSysClockFreq+0xbc>)
 80036cc:	613b      	str	r3, [r7, #16]
 80036ce:	e047      	b.n	8003760 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80036d0:	4b27      	ldr	r3, [pc, #156]	@ (8003770 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f003 030c 	and.w	r3, r3, #12
 80036d8:	2b08      	cmp	r3, #8
 80036da:	d102      	bne.n	80036e2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80036dc:	4b26      	ldr	r3, [pc, #152]	@ (8003778 <HAL_RCC_GetSysClockFreq+0xc0>)
 80036de:	613b      	str	r3, [r7, #16]
 80036e0:	e03e      	b.n	8003760 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80036e2:	4b23      	ldr	r3, [pc, #140]	@ (8003770 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f003 030c 	and.w	r3, r3, #12
 80036ea:	2b0c      	cmp	r3, #12
 80036ec:	d136      	bne.n	800375c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036ee:	4b20      	ldr	r3, [pc, #128]	@ (8003770 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	f003 0303 	and.w	r3, r3, #3
 80036f6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036f8:	4b1d      	ldr	r3, [pc, #116]	@ (8003770 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	091b      	lsrs	r3, r3, #4
 80036fe:	f003 030f 	and.w	r3, r3, #15
 8003702:	3301      	adds	r3, #1
 8003704:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2b03      	cmp	r3, #3
 800370a:	d10c      	bne.n	8003726 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800370c:	4a1a      	ldr	r2, [pc, #104]	@ (8003778 <HAL_RCC_GetSysClockFreq+0xc0>)
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	fbb2 f3f3 	udiv	r3, r2, r3
 8003714:	4a16      	ldr	r2, [pc, #88]	@ (8003770 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003716:	68d2      	ldr	r2, [r2, #12]
 8003718:	0a12      	lsrs	r2, r2, #8
 800371a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800371e:	fb02 f303 	mul.w	r3, r2, r3
 8003722:	617b      	str	r3, [r7, #20]
      break;
 8003724:	e00c      	b.n	8003740 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003726:	4a13      	ldr	r2, [pc, #76]	@ (8003774 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	fbb2 f3f3 	udiv	r3, r2, r3
 800372e:	4a10      	ldr	r2, [pc, #64]	@ (8003770 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003730:	68d2      	ldr	r2, [r2, #12]
 8003732:	0a12      	lsrs	r2, r2, #8
 8003734:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003738:	fb02 f303 	mul.w	r3, r2, r3
 800373c:	617b      	str	r3, [r7, #20]
      break;
 800373e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003740:	4b0b      	ldr	r3, [pc, #44]	@ (8003770 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	0e5b      	lsrs	r3, r3, #25
 8003746:	f003 0303 	and.w	r3, r3, #3
 800374a:	3301      	adds	r3, #1
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003750:	697a      	ldr	r2, [r7, #20]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	fbb2 f3f3 	udiv	r3, r2, r3
 8003758:	613b      	str	r3, [r7, #16]
 800375a:	e001      	b.n	8003760 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800375c:	2300      	movs	r3, #0
 800375e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003760:	693b      	ldr	r3, [r7, #16]
}
 8003762:	4618      	mov	r0, r3
 8003764:	371c      	adds	r7, #28
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	40021000 	.word	0x40021000
 8003774:	00f42400 	.word	0x00f42400
 8003778:	016e3600 	.word	0x016e3600

0800377c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003780:	4b03      	ldr	r3, [pc, #12]	@ (8003790 <HAL_RCC_GetHCLKFreq+0x14>)
 8003782:	681b      	ldr	r3, [r3, #0]
}
 8003784:	4618      	mov	r0, r3
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	20000004 	.word	0x20000004

08003794 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003798:	f7ff fff0 	bl	800377c <HAL_RCC_GetHCLKFreq>
 800379c:	4602      	mov	r2, r0
 800379e:	4b06      	ldr	r3, [pc, #24]	@ (80037b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	0a1b      	lsrs	r3, r3, #8
 80037a4:	f003 0307 	and.w	r3, r3, #7
 80037a8:	4904      	ldr	r1, [pc, #16]	@ (80037bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80037aa:	5ccb      	ldrb	r3, [r1, r3]
 80037ac:	f003 031f 	and.w	r3, r3, #31
 80037b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	40021000 	.word	0x40021000
 80037bc:	0800979c 	.word	0x0800979c

080037c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80037c4:	f7ff ffda 	bl	800377c <HAL_RCC_GetHCLKFreq>
 80037c8:	4602      	mov	r2, r0
 80037ca:	4b06      	ldr	r3, [pc, #24]	@ (80037e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	0adb      	lsrs	r3, r3, #11
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	4904      	ldr	r1, [pc, #16]	@ (80037e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80037d6:	5ccb      	ldrb	r3, [r1, r3]
 80037d8:	f003 031f 	and.w	r3, r3, #31
 80037dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	40021000 	.word	0x40021000
 80037e8:	0800979c 	.word	0x0800979c

080037ec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b087      	sub	sp, #28
 80037f0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037f2:	4b1e      	ldr	r3, [pc, #120]	@ (800386c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	f003 0303 	and.w	r3, r3, #3
 80037fa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037fc:	4b1b      	ldr	r3, [pc, #108]	@ (800386c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	091b      	lsrs	r3, r3, #4
 8003802:	f003 030f 	and.w	r3, r3, #15
 8003806:	3301      	adds	r3, #1
 8003808:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	2b03      	cmp	r3, #3
 800380e:	d10c      	bne.n	800382a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003810:	4a17      	ldr	r2, [pc, #92]	@ (8003870 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	fbb2 f3f3 	udiv	r3, r2, r3
 8003818:	4a14      	ldr	r2, [pc, #80]	@ (800386c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800381a:	68d2      	ldr	r2, [r2, #12]
 800381c:	0a12      	lsrs	r2, r2, #8
 800381e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003822:	fb02 f303 	mul.w	r3, r2, r3
 8003826:	617b      	str	r3, [r7, #20]
    break;
 8003828:	e00c      	b.n	8003844 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800382a:	4a12      	ldr	r2, [pc, #72]	@ (8003874 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003832:	4a0e      	ldr	r2, [pc, #56]	@ (800386c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003834:	68d2      	ldr	r2, [r2, #12]
 8003836:	0a12      	lsrs	r2, r2, #8
 8003838:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800383c:	fb02 f303 	mul.w	r3, r2, r3
 8003840:	617b      	str	r3, [r7, #20]
    break;
 8003842:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003844:	4b09      	ldr	r3, [pc, #36]	@ (800386c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	0e5b      	lsrs	r3, r3, #25
 800384a:	f003 0303 	and.w	r3, r3, #3
 800384e:	3301      	adds	r3, #1
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003854:	697a      	ldr	r2, [r7, #20]
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	fbb2 f3f3 	udiv	r3, r2, r3
 800385c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800385e:	687b      	ldr	r3, [r7, #4]
}
 8003860:	4618      	mov	r0, r3
 8003862:	371c      	adds	r7, #28
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr
 800386c:	40021000 	.word	0x40021000
 8003870:	016e3600 	.word	0x016e3600
 8003874:	00f42400 	.word	0x00f42400

08003878 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003880:	2300      	movs	r3, #0
 8003882:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003884:	2300      	movs	r3, #0
 8003886:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003890:	2b00      	cmp	r3, #0
 8003892:	f000 8098 	beq.w	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003896:	2300      	movs	r3, #0
 8003898:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800389a:	4b43      	ldr	r3, [pc, #268]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800389c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800389e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d10d      	bne.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038a6:	4b40      	ldr	r3, [pc, #256]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038aa:	4a3f      	ldr	r2, [pc, #252]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80038b2:	4b3d      	ldr	r3, [pc, #244]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038ba:	60bb      	str	r3, [r7, #8]
 80038bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038be:	2301      	movs	r3, #1
 80038c0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038c2:	4b3a      	ldr	r3, [pc, #232]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a39      	ldr	r2, [pc, #228]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80038c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038ce:	f7fe fe27 	bl	8002520 <HAL_GetTick>
 80038d2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038d4:	e009      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038d6:	f7fe fe23 	bl	8002520 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d902      	bls.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	74fb      	strb	r3, [r7, #19]
        break;
 80038e8:	e005      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038ea:	4b30      	ldr	r3, [pc, #192]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d0ef      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80038f6:	7cfb      	ldrb	r3, [r7, #19]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d159      	bne.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80038fc:	4b2a      	ldr	r3, [pc, #168]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003902:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003906:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d01e      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	429a      	cmp	r2, r3
 8003916:	d019      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003918:	4b23      	ldr	r3, [pc, #140]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800391a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800391e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003922:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003924:	4b20      	ldr	r3, [pc, #128]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003926:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800392a:	4a1f      	ldr	r2, [pc, #124]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800392c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003930:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003934:	4b1c      	ldr	r3, [pc, #112]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003936:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800393a:	4a1b      	ldr	r2, [pc, #108]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800393c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003940:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003944:	4a18      	ldr	r2, [pc, #96]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b00      	cmp	r3, #0
 8003954:	d016      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003956:	f7fe fde3 	bl	8002520 <HAL_GetTick>
 800395a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800395c:	e00b      	b.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800395e:	f7fe fddf 	bl	8002520 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	f241 3288 	movw	r2, #5000	@ 0x1388
 800396c:	4293      	cmp	r3, r2
 800396e:	d902      	bls.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	74fb      	strb	r3, [r7, #19]
            break;
 8003974:	e006      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003976:	4b0c      	ldr	r3, [pc, #48]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003978:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d0ec      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003984:	7cfb      	ldrb	r3, [r7, #19]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10b      	bne.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800398a:	4b07      	ldr	r3, [pc, #28]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800398c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003990:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003998:	4903      	ldr	r1, [pc, #12]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800399a:	4313      	orrs	r3, r2
 800399c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80039a0:	e008      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039a2:	7cfb      	ldrb	r3, [r7, #19]
 80039a4:	74bb      	strb	r3, [r7, #18]
 80039a6:	e005      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80039a8:	40021000 	.word	0x40021000
 80039ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b0:	7cfb      	ldrb	r3, [r7, #19]
 80039b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039b4:	7c7b      	ldrb	r3, [r7, #17]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d105      	bne.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039ba:	4ba7      	ldr	r3, [pc, #668]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039be:	4aa6      	ldr	r2, [pc, #664]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039c4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00a      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039d2:	4ba1      	ldr	r3, [pc, #644]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039d8:	f023 0203 	bic.w	r2, r3, #3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	499d      	ldr	r1, [pc, #628]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d00a      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039f4:	4b98      	ldr	r3, [pc, #608]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039fa:	f023 020c 	bic.w	r2, r3, #12
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	4995      	ldr	r1, [pc, #596]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0304 	and.w	r3, r3, #4
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00a      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a16:	4b90      	ldr	r3, [pc, #576]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a1c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	498c      	ldr	r1, [pc, #560]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0308 	and.w	r3, r3, #8
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00a      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a38:	4b87      	ldr	r3, [pc, #540]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a3e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	4984      	ldr	r1, [pc, #528]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0310 	and.w	r3, r3, #16
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00a      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a5a:	4b7f      	ldr	r3, [pc, #508]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a60:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	497b      	ldr	r1, [pc, #492]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0320 	and.w	r3, r3, #32
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00a      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a7c:	4b76      	ldr	r3, [pc, #472]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a82:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	4973      	ldr	r1, [pc, #460]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00a      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a9e:	4b6e      	ldr	r3, [pc, #440]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aa4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	69db      	ldr	r3, [r3, #28]
 8003aac:	496a      	ldr	r1, [pc, #424]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00a      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ac0:	4b65      	ldr	r3, [pc, #404]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ac6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	4962      	ldr	r1, [pc, #392]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00a      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ae2:	4b5d      	ldr	r3, [pc, #372]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ae8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af0:	4959      	ldr	r1, [pc, #356]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00a      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b04:	4b54      	ldr	r3, [pc, #336]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b06:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003b0a:	f023 0203 	bic.w	r2, r3, #3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b12:	4951      	ldr	r1, [pc, #324]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00a      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b26:	4b4c      	ldr	r3, [pc, #304]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b2c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b34:	4948      	ldr	r1, [pc, #288]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d015      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b48:	4b43      	ldr	r3, [pc, #268]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b4e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b56:	4940      	ldr	r1, [pc, #256]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b66:	d105      	bne.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b68:	4b3b      	ldr	r3, [pc, #236]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	4a3a      	ldr	r2, [pc, #232]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b72:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d015      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b80:	4b35      	ldr	r3, [pc, #212]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b86:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b8e:	4932      	ldr	r1, [pc, #200]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b9e:	d105      	bne.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ba0:	4b2d      	ldr	r3, [pc, #180]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	4a2c      	ldr	r2, [pc, #176]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ba6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003baa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d015      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003bb8:	4b27      	ldr	r3, [pc, #156]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bbe:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bc6:	4924      	ldr	r1, [pc, #144]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bd2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003bd6:	d105      	bne.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bd8:	4b1f      	ldr	r3, [pc, #124]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	4a1e      	ldr	r2, [pc, #120]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003be2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d015      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bf0:	4b19      	ldr	r3, [pc, #100]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bf6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bfe:	4916      	ldr	r1, [pc, #88]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c0a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c0e:	d105      	bne.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c10:	4b11      	ldr	r3, [pc, #68]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	4a10      	ldr	r2, [pc, #64]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c1a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d019      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c28:	4b0b      	ldr	r3, [pc, #44]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c2e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c36:	4908      	ldr	r1, [pc, #32]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c46:	d109      	bne.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c48:	4b03      	ldr	r3, [pc, #12]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	4a02      	ldr	r2, [pc, #8]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c52:	60d3      	str	r3, [r2, #12]
 8003c54:	e002      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003c56:	bf00      	nop
 8003c58:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d015      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003c68:	4b29      	ldr	r3, [pc, #164]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c6e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c76:	4926      	ldr	r1, [pc, #152]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c86:	d105      	bne.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003c88:	4b21      	ldr	r3, [pc, #132]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	4a20      	ldr	r2, [pc, #128]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c92:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d015      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ca6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cae:	4918      	ldr	r1, [pc, #96]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cbe:	d105      	bne.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003cc0:	4b13      	ldr	r3, [pc, #76]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	4a12      	ldr	r2, [pc, #72]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003cc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cca:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d015      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003cd8:	4b0d      	ldr	r3, [pc, #52]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003cda:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003cde:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ce6:	490a      	ldr	r1, [pc, #40]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cf2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003cf6:	d105      	bne.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cf8:	4b05      	ldr	r3, [pc, #20]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	4a04      	ldr	r2, [pc, #16]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003cfe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d02:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003d04:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3718      	adds	r7, #24
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	40021000 	.word	0x40021000

08003d14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d101      	bne.n	8003d26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e09d      	b.n	8003e62 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d108      	bne.n	8003d40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d36:	d009      	beq.n	8003d4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	61da      	str	r2, [r3, #28]
 8003d3e:	e005      	b.n	8003d4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d106      	bne.n	8003d6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f7fe f844 	bl	8001df4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2202      	movs	r2, #2
 8003d70:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d82:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003d8c:	d902      	bls.n	8003d94 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	60fb      	str	r3, [r7, #12]
 8003d92:	e002      	b.n	8003d9a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003d94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d98:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003da2:	d007      	beq.n	8003db4 <HAL_SPI_Init+0xa0>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003dac:	d002      	beq.n	8003db4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003dc4:	431a      	orrs	r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	f003 0302 	and.w	r3, r3, #2
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003de2:	431a      	orrs	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	69db      	ldr	r3, [r3, #28]
 8003de8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003dec:	431a      	orrs	r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003df6:	ea42 0103 	orr.w	r1, r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dfe:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	430a      	orrs	r2, r1
 8003e08:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	0c1b      	lsrs	r3, r3, #16
 8003e10:	f003 0204 	and.w	r2, r3, #4
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e18:	f003 0310 	and.w	r3, r3, #16
 8003e1c:	431a      	orrs	r2, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e22:	f003 0308 	and.w	r3, r3, #8
 8003e26:	431a      	orrs	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003e30:	ea42 0103 	orr.w	r1, r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	69da      	ldr	r2, [r3, #28]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e50:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3710      	adds	r7, #16
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b088      	sub	sp, #32
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	60f8      	str	r0, [r7, #12]
 8003e72:	60b9      	str	r1, [r7, #8]
 8003e74:	603b      	str	r3, [r7, #0]
 8003e76:	4613      	mov	r3, r2
 8003e78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d101      	bne.n	8003e8c <HAL_SPI_Transmit+0x22>
 8003e88:	2302      	movs	r3, #2
 8003e8a:	e15f      	b.n	800414c <HAL_SPI_Transmit+0x2e2>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e94:	f7fe fb44 	bl	8002520 <HAL_GetTick>
 8003e98:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003e9a:	88fb      	ldrh	r3, [r7, #6]
 8003e9c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d002      	beq.n	8003eb0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003eaa:	2302      	movs	r3, #2
 8003eac:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003eae:	e148      	b.n	8004142 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d002      	beq.n	8003ebc <HAL_SPI_Transmit+0x52>
 8003eb6:	88fb      	ldrh	r3, [r7, #6]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d102      	bne.n	8003ec2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ec0:	e13f      	b.n	8004142 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2203      	movs	r2, #3
 8003ec6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	68ba      	ldr	r2, [r7, #8]
 8003ed4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	88fa      	ldrh	r2, [r7, #6]
 8003eda:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	88fa      	ldrh	r2, [r7, #6]
 8003ee0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f0c:	d10f      	bne.n	8003f2e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f2c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f38:	2b40      	cmp	r3, #64	@ 0x40
 8003f3a:	d007      	beq.n	8003f4c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003f54:	d94f      	bls.n	8003ff6 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d002      	beq.n	8003f64 <HAL_SPI_Transmit+0xfa>
 8003f5e:	8afb      	ldrh	r3, [r7, #22]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d142      	bne.n	8003fea <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f68:	881a      	ldrh	r2, [r3, #0]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f74:	1c9a      	adds	r2, r3, #2
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	3b01      	subs	r3, #1
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003f88:	e02f      	b.n	8003fea <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f003 0302 	and.w	r3, r3, #2
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d112      	bne.n	8003fbe <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f9c:	881a      	ldrh	r2, [r3, #0]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fa8:	1c9a      	adds	r2, r3, #2
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003fbc:	e015      	b.n	8003fea <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fbe:	f7fe faaf 	bl	8002520 <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d803      	bhi.n	8003fd6 <HAL_SPI_Transmit+0x16c>
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd4:	d102      	bne.n	8003fdc <HAL_SPI_Transmit+0x172>
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d106      	bne.n	8003fea <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003fe8:	e0ab      	b.n	8004142 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1ca      	bne.n	8003f8a <HAL_SPI_Transmit+0x120>
 8003ff4:	e080      	b.n	80040f8 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d002      	beq.n	8004004 <HAL_SPI_Transmit+0x19a>
 8003ffe:	8afb      	ldrh	r3, [r7, #22]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d174      	bne.n	80040ee <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004008:	b29b      	uxth	r3, r3
 800400a:	2b01      	cmp	r3, #1
 800400c:	d912      	bls.n	8004034 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004012:	881a      	ldrh	r2, [r3, #0]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800401e:	1c9a      	adds	r2, r3, #2
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004028:	b29b      	uxth	r3, r3
 800402a:	3b02      	subs	r3, #2
 800402c:	b29a      	uxth	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004032:	e05c      	b.n	80040ee <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	330c      	adds	r3, #12
 800403e:	7812      	ldrb	r2, [r2, #0]
 8004040:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004046:	1c5a      	adds	r2, r3, #1
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004050:	b29b      	uxth	r3, r3
 8004052:	3b01      	subs	r3, #1
 8004054:	b29a      	uxth	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800405a:	e048      	b.n	80040ee <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b02      	cmp	r3, #2
 8004068:	d12b      	bne.n	80040c2 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800406e:	b29b      	uxth	r3, r3
 8004070:	2b01      	cmp	r3, #1
 8004072:	d912      	bls.n	800409a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004078:	881a      	ldrh	r2, [r3, #0]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004084:	1c9a      	adds	r2, r3, #2
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800408e:	b29b      	uxth	r3, r3
 8004090:	3b02      	subs	r3, #2
 8004092:	b29a      	uxth	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004098:	e029      	b.n	80040ee <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	330c      	adds	r3, #12
 80040a4:	7812      	ldrb	r2, [r2, #0]
 80040a6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ac:	1c5a      	adds	r2, r3, #1
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	3b01      	subs	r3, #1
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80040c0:	e015      	b.n	80040ee <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040c2:	f7fe fa2d 	bl	8002520 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	683a      	ldr	r2, [r7, #0]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d803      	bhi.n	80040da <HAL_SPI_Transmit+0x270>
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d8:	d102      	bne.n	80040e0 <HAL_SPI_Transmit+0x276>
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d106      	bne.n	80040ee <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80040ec:	e029      	b.n	8004142 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1b1      	bne.n	800405c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040f8:	69ba      	ldr	r2, [r7, #24]
 80040fa:	6839      	ldr	r1, [r7, #0]
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f000 fcf9 	bl	8004af4 <SPI_EndRxTxTransaction>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d002      	beq.n	800410e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2220      	movs	r2, #32
 800410c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10a      	bne.n	800412c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004116:	2300      	movs	r3, #0
 8004118:	613b      	str	r3, [r7, #16]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	613b      	str	r3, [r7, #16]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	613b      	str	r3, [r7, #16]
 800412a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004130:	2b00      	cmp	r3, #0
 8004132:	d002      	beq.n	800413a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	77fb      	strb	r3, [r7, #31]
 8004138:	e003      	b.n	8004142 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2201      	movs	r2, #1
 800413e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800414a:	7ffb      	ldrb	r3, [r7, #31]
}
 800414c:	4618      	mov	r0, r3
 800414e:	3720      	adds	r7, #32
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b088      	sub	sp, #32
 8004158:	af02      	add	r7, sp, #8
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	603b      	str	r3, [r7, #0]
 8004160:	4613      	mov	r3, r2
 8004162:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004164:	2300      	movs	r3, #0
 8004166:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800416e:	b2db      	uxtb	r3, r3
 8004170:	2b01      	cmp	r3, #1
 8004172:	d002      	beq.n	800417a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004174:	2302      	movs	r3, #2
 8004176:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004178:	e11a      	b.n	80043b0 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004182:	d112      	bne.n	80041aa <HAL_SPI_Receive+0x56>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d10e      	bne.n	80041aa <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2204      	movs	r2, #4
 8004190:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004194:	88fa      	ldrh	r2, [r7, #6]
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	9300      	str	r3, [sp, #0]
 800419a:	4613      	mov	r3, r2
 800419c:	68ba      	ldr	r2, [r7, #8]
 800419e:	68b9      	ldr	r1, [r7, #8]
 80041a0:	68f8      	ldr	r0, [r7, #12]
 80041a2:	f000 f90e 	bl	80043c2 <HAL_SPI_TransmitReceive>
 80041a6:	4603      	mov	r3, r0
 80041a8:	e107      	b.n	80043ba <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d101      	bne.n	80041b8 <HAL_SPI_Receive+0x64>
 80041b4:	2302      	movs	r3, #2
 80041b6:	e100      	b.n	80043ba <HAL_SPI_Receive+0x266>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041c0:	f7fe f9ae 	bl	8002520 <HAL_GetTick>
 80041c4:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d002      	beq.n	80041d2 <HAL_SPI_Receive+0x7e>
 80041cc:	88fb      	ldrh	r3, [r7, #6]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d102      	bne.n	80041d8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80041d6:	e0eb      	b.n	80043b0 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2204      	movs	r2, #4
 80041dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2200      	movs	r2, #0
 80041e4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	68ba      	ldr	r2, [r7, #8]
 80041ea:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	88fa      	ldrh	r2, [r7, #6]
 80041f0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	88fa      	ldrh	r2, [r7, #6]
 80041f8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2200      	movs	r2, #0
 8004200:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2200      	movs	r2, #0
 800420c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004222:	d908      	bls.n	8004236 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685a      	ldr	r2, [r3, #4]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004232:	605a      	str	r2, [r3, #4]
 8004234:	e007      	b.n	8004246 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	685a      	ldr	r2, [r3, #4]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004244:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800424e:	d10f      	bne.n	8004270 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800425e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800426e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800427a:	2b40      	cmp	r3, #64	@ 0x40
 800427c:	d007      	beq.n	800428e <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800428c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004296:	d86f      	bhi.n	8004378 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004298:	e034      	b.n	8004304 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d117      	bne.n	80042d8 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f103 020c 	add.w	r2, r3, #12
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b4:	7812      	ldrb	r2, [r2, #0]
 80042b6:	b2d2      	uxtb	r2, r2
 80042b8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042be:	1c5a      	adds	r2, r3, #1
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	3b01      	subs	r3, #1
 80042ce:	b29a      	uxth	r2, r3
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80042d6:	e015      	b.n	8004304 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042d8:	f7fe f922 	bl	8002520 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	683a      	ldr	r2, [r7, #0]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d803      	bhi.n	80042f0 <HAL_SPI_Receive+0x19c>
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ee:	d102      	bne.n	80042f6 <HAL_SPI_Receive+0x1a2>
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d106      	bne.n	8004304 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2201      	movs	r2, #1
 80042fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004302:	e055      	b.n	80043b0 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800430a:	b29b      	uxth	r3, r3
 800430c:	2b00      	cmp	r3, #0
 800430e:	d1c4      	bne.n	800429a <HAL_SPI_Receive+0x146>
 8004310:	e038      	b.n	8004384 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	2b01      	cmp	r3, #1
 800431e:	d115      	bne.n	800434c <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68da      	ldr	r2, [r3, #12]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800432a:	b292      	uxth	r2, r2
 800432c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004332:	1c9a      	adds	r2, r3, #2
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800433e:	b29b      	uxth	r3, r3
 8004340:	3b01      	subs	r3, #1
 8004342:	b29a      	uxth	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800434a:	e015      	b.n	8004378 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800434c:	f7fe f8e8 	bl	8002520 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	683a      	ldr	r2, [r7, #0]
 8004358:	429a      	cmp	r2, r3
 800435a:	d803      	bhi.n	8004364 <HAL_SPI_Receive+0x210>
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004362:	d102      	bne.n	800436a <HAL_SPI_Receive+0x216>
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d106      	bne.n	8004378 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004376:	e01b      	b.n	80043b0 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800437e:	b29b      	uxth	r3, r3
 8004380:	2b00      	cmp	r3, #0
 8004382:	d1c6      	bne.n	8004312 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	6839      	ldr	r1, [r7, #0]
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f000 fb5b 	bl	8004a44 <SPI_EndRxTransaction>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d002      	beq.n	800439a <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2220      	movs	r2, #32
 8004398:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d002      	beq.n	80043a8 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	75fb      	strb	r3, [r7, #23]
 80043a6:	e003      	b.n	80043b0 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80043b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3718      	adds	r7, #24
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80043c2:	b580      	push	{r7, lr}
 80043c4:	b08a      	sub	sp, #40	@ 0x28
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	60f8      	str	r0, [r7, #12]
 80043ca:	60b9      	str	r1, [r7, #8]
 80043cc:	607a      	str	r2, [r7, #4]
 80043ce:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80043d0:	2301      	movs	r3, #1
 80043d2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80043d4:	2300      	movs	r3, #0
 80043d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d101      	bne.n	80043e8 <HAL_SPI_TransmitReceive+0x26>
 80043e4:	2302      	movs	r3, #2
 80043e6:	e20a      	b.n	80047fe <HAL_SPI_TransmitReceive+0x43c>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043f0:	f7fe f896 	bl	8002520 <HAL_GetTick>
 80043f4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80043fc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004404:	887b      	ldrh	r3, [r7, #2]
 8004406:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004408:	887b      	ldrh	r3, [r7, #2]
 800440a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800440c:	7efb      	ldrb	r3, [r7, #27]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d00e      	beq.n	8004430 <HAL_SPI_TransmitReceive+0x6e>
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004418:	d106      	bne.n	8004428 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d102      	bne.n	8004428 <HAL_SPI_TransmitReceive+0x66>
 8004422:	7efb      	ldrb	r3, [r7, #27]
 8004424:	2b04      	cmp	r3, #4
 8004426:	d003      	beq.n	8004430 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004428:	2302      	movs	r3, #2
 800442a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800442e:	e1e0      	b.n	80047f2 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d005      	beq.n	8004442 <HAL_SPI_TransmitReceive+0x80>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d002      	beq.n	8004442 <HAL_SPI_TransmitReceive+0x80>
 800443c:	887b      	ldrh	r3, [r7, #2]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d103      	bne.n	800444a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8004448:	e1d3      	b.n	80047f2 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b04      	cmp	r3, #4
 8004454:	d003      	beq.n	800445e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2205      	movs	r2, #5
 800445a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	887a      	ldrh	r2, [r7, #2]
 800446e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	887a      	ldrh	r2, [r7, #2]
 8004476:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	68ba      	ldr	r2, [r7, #8]
 800447e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	887a      	ldrh	r2, [r7, #2]
 8004484:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	887a      	ldrh	r2, [r7, #2]
 800448a:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80044a0:	d802      	bhi.n	80044a8 <HAL_SPI_TransmitReceive+0xe6>
 80044a2:	8a3b      	ldrh	r3, [r7, #16]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d908      	bls.n	80044ba <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	685a      	ldr	r2, [r3, #4]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80044b6:	605a      	str	r2, [r3, #4]
 80044b8:	e007      	b.n	80044ca <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	685a      	ldr	r2, [r3, #4]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80044c8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044d4:	2b40      	cmp	r3, #64	@ 0x40
 80044d6:	d007      	beq.n	80044e8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80044e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80044f0:	f240 8081 	bls.w	80045f6 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d002      	beq.n	8004502 <HAL_SPI_TransmitReceive+0x140>
 80044fc:	8a7b      	ldrh	r3, [r7, #18]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d16d      	bne.n	80045de <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004506:	881a      	ldrh	r2, [r3, #0]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004512:	1c9a      	adds	r2, r3, #2
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800451c:	b29b      	uxth	r3, r3
 800451e:	3b01      	subs	r3, #1
 8004520:	b29a      	uxth	r2, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004526:	e05a      	b.n	80045de <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b02      	cmp	r3, #2
 8004534:	d11b      	bne.n	800456e <HAL_SPI_TransmitReceive+0x1ac>
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800453a:	b29b      	uxth	r3, r3
 800453c:	2b00      	cmp	r3, #0
 800453e:	d016      	beq.n	800456e <HAL_SPI_TransmitReceive+0x1ac>
 8004540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004542:	2b01      	cmp	r3, #1
 8004544:	d113      	bne.n	800456e <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800454a:	881a      	ldrh	r2, [r3, #0]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004556:	1c9a      	adds	r2, r3, #2
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004560:	b29b      	uxth	r3, r3
 8004562:	3b01      	subs	r3, #1
 8004564:	b29a      	uxth	r2, r3
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800456a:	2300      	movs	r3, #0
 800456c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	f003 0301 	and.w	r3, r3, #1
 8004578:	2b01      	cmp	r3, #1
 800457a:	d11c      	bne.n	80045b6 <HAL_SPI_TransmitReceive+0x1f4>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004582:	b29b      	uxth	r3, r3
 8004584:	2b00      	cmp	r3, #0
 8004586:	d016      	beq.n	80045b6 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68da      	ldr	r2, [r3, #12]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004592:	b292      	uxth	r2, r2
 8004594:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459a:	1c9a      	adds	r2, r3, #2
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	3b01      	subs	r3, #1
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80045b2:	2301      	movs	r3, #1
 80045b4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80045b6:	f7fd ffb3 	bl	8002520 <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d80b      	bhi.n	80045de <HAL_SPI_TransmitReceive+0x21c>
 80045c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045cc:	d007      	beq.n	80045de <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80045dc:	e109      	b.n	80047f2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d19f      	bne.n	8004528 <HAL_SPI_TransmitReceive+0x166>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d199      	bne.n	8004528 <HAL_SPI_TransmitReceive+0x166>
 80045f4:	e0e3      	b.n	80047be <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d003      	beq.n	8004606 <HAL_SPI_TransmitReceive+0x244>
 80045fe:	8a7b      	ldrh	r3, [r7, #18]
 8004600:	2b01      	cmp	r3, #1
 8004602:	f040 80cf 	bne.w	80047a4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800460a:	b29b      	uxth	r3, r3
 800460c:	2b01      	cmp	r3, #1
 800460e:	d912      	bls.n	8004636 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004614:	881a      	ldrh	r2, [r3, #0]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004620:	1c9a      	adds	r2, r3, #2
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800462a:	b29b      	uxth	r3, r3
 800462c:	3b02      	subs	r3, #2
 800462e:	b29a      	uxth	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004634:	e0b6      	b.n	80047a4 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	330c      	adds	r3, #12
 8004640:	7812      	ldrb	r2, [r2, #0]
 8004642:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004648:	1c5a      	adds	r2, r3, #1
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004652:	b29b      	uxth	r3, r3
 8004654:	3b01      	subs	r3, #1
 8004656:	b29a      	uxth	r2, r3
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800465c:	e0a2      	b.n	80047a4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f003 0302 	and.w	r3, r3, #2
 8004668:	2b02      	cmp	r3, #2
 800466a:	d134      	bne.n	80046d6 <HAL_SPI_TransmitReceive+0x314>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004670:	b29b      	uxth	r3, r3
 8004672:	2b00      	cmp	r3, #0
 8004674:	d02f      	beq.n	80046d6 <HAL_SPI_TransmitReceive+0x314>
 8004676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004678:	2b01      	cmp	r3, #1
 800467a:	d12c      	bne.n	80046d6 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004680:	b29b      	uxth	r3, r3
 8004682:	2b01      	cmp	r3, #1
 8004684:	d912      	bls.n	80046ac <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800468a:	881a      	ldrh	r2, [r3, #0]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004696:	1c9a      	adds	r2, r3, #2
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	3b02      	subs	r3, #2
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80046aa:	e012      	b.n	80046d2 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	330c      	adds	r3, #12
 80046b6:	7812      	ldrb	r2, [r2, #0]
 80046b8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046be:	1c5a      	adds	r2, r3, #1
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	3b01      	subs	r3, #1
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80046d2:	2300      	movs	r3, #0
 80046d4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d148      	bne.n	8004776 <HAL_SPI_TransmitReceive+0x3b4>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d042      	beq.n	8004776 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d923      	bls.n	8004744 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68da      	ldr	r2, [r3, #12]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004706:	b292      	uxth	r2, r2
 8004708:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800470e:	1c9a      	adds	r2, r3, #2
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800471a:	b29b      	uxth	r3, r3
 800471c:	3b02      	subs	r3, #2
 800471e:	b29a      	uxth	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800472c:	b29b      	uxth	r3, r3
 800472e:	2b01      	cmp	r3, #1
 8004730:	d81f      	bhi.n	8004772 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004740:	605a      	str	r2, [r3, #4]
 8004742:	e016      	b.n	8004772 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f103 020c 	add.w	r2, r3, #12
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004750:	7812      	ldrb	r2, [r2, #0]
 8004752:	b2d2      	uxtb	r2, r2
 8004754:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800475a:	1c5a      	adds	r2, r3, #1
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004766:	b29b      	uxth	r3, r3
 8004768:	3b01      	subs	r3, #1
 800476a:	b29a      	uxth	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004772:	2301      	movs	r3, #1
 8004774:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004776:	f7fd fed3 	bl	8002520 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004782:	429a      	cmp	r2, r3
 8004784:	d803      	bhi.n	800478e <HAL_SPI_TransmitReceive+0x3cc>
 8004786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800478c:	d102      	bne.n	8004794 <HAL_SPI_TransmitReceive+0x3d2>
 800478e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004790:	2b00      	cmp	r3, #0
 8004792:	d107      	bne.n	80047a4 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80047a2:	e026      	b.n	80047f2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f47f af57 	bne.w	800465e <HAL_SPI_TransmitReceive+0x29c>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f47f af50 	bne.w	800465e <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047be:	69fa      	ldr	r2, [r7, #28]
 80047c0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f000 f996 	bl	8004af4 <SPI_EndRxTxTransaction>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d005      	beq.n	80047da <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2220      	movs	r2, #32
 80047d8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d003      	beq.n	80047ea <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047e8:	e003      	b.n	80047f2 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80047fa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3728      	adds	r7, #40	@ 0x28
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
	...

08004808 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b088      	sub	sp, #32
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	603b      	str	r3, [r7, #0]
 8004814:	4613      	mov	r3, r2
 8004816:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004818:	f7fd fe82 	bl	8002520 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004820:	1a9b      	subs	r3, r3, r2
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	4413      	add	r3, r2
 8004826:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004828:	f7fd fe7a 	bl	8002520 <HAL_GetTick>
 800482c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800482e:	4b39      	ldr	r3, [pc, #228]	@ (8004914 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	015b      	lsls	r3, r3, #5
 8004834:	0d1b      	lsrs	r3, r3, #20
 8004836:	69fa      	ldr	r2, [r7, #28]
 8004838:	fb02 f303 	mul.w	r3, r2, r3
 800483c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800483e:	e054      	b.n	80048ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004846:	d050      	beq.n	80048ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004848:	f7fd fe6a 	bl	8002520 <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	69fa      	ldr	r2, [r7, #28]
 8004854:	429a      	cmp	r2, r3
 8004856:	d902      	bls.n	800485e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d13d      	bne.n	80048da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800486c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004876:	d111      	bne.n	800489c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004880:	d004      	beq.n	800488c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800488a:	d107      	bne.n	800489c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800489a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048a4:	d10f      	bne.n	80048c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80048b4:	601a      	str	r2, [r3, #0]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80048c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e017      	b.n	800490a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d101      	bne.n	80048e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80048e0:	2300      	movs	r3, #0
 80048e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	3b01      	subs	r3, #1
 80048e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	689a      	ldr	r2, [r3, #8]
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	4013      	ands	r3, r2
 80048f4:	68ba      	ldr	r2, [r7, #8]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	bf0c      	ite	eq
 80048fa:	2301      	moveq	r3, #1
 80048fc:	2300      	movne	r3, #0
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	461a      	mov	r2, r3
 8004902:	79fb      	ldrb	r3, [r7, #7]
 8004904:	429a      	cmp	r2, r3
 8004906:	d19b      	bne.n	8004840 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3720      	adds	r7, #32
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	20000004 	.word	0x20000004

08004918 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b08a      	sub	sp, #40	@ 0x28
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	607a      	str	r2, [r7, #4]
 8004924:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004926:	2300      	movs	r3, #0
 8004928:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800492a:	f7fd fdf9 	bl	8002520 <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004932:	1a9b      	subs	r3, r3, r2
 8004934:	683a      	ldr	r2, [r7, #0]
 8004936:	4413      	add	r3, r2
 8004938:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800493a:	f7fd fdf1 	bl	8002520 <HAL_GetTick>
 800493e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	330c      	adds	r3, #12
 8004946:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004948:	4b3d      	ldr	r3, [pc, #244]	@ (8004a40 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	4613      	mov	r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	4413      	add	r3, r2
 8004952:	00da      	lsls	r2, r3, #3
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	0d1b      	lsrs	r3, r3, #20
 8004958:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800495a:	fb02 f303 	mul.w	r3, r2, r3
 800495e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004960:	e060      	b.n	8004a24 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004968:	d107      	bne.n	800497a <SPI_WaitFifoStateUntilTimeout+0x62>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d104      	bne.n	800497a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	b2db      	uxtb	r3, r3
 8004976:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004978:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004980:	d050      	beq.n	8004a24 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004982:	f7fd fdcd 	bl	8002520 <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	6a3b      	ldr	r3, [r7, #32]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800498e:	429a      	cmp	r2, r3
 8004990:	d902      	bls.n	8004998 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004994:	2b00      	cmp	r3, #0
 8004996:	d13d      	bne.n	8004a14 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	685a      	ldr	r2, [r3, #4]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80049a6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80049b0:	d111      	bne.n	80049d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049ba:	d004      	beq.n	80049c6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049c4:	d107      	bne.n	80049d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049d4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049de:	d10f      	bne.n	8004a00 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80049ee:	601a      	str	r2, [r3, #0]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80049fe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e010      	b.n	8004a36 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d101      	bne.n	8004a1e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	3b01      	subs	r3, #1
 8004a22:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	689a      	ldr	r2, [r3, #8]
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d196      	bne.n	8004962 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3728      	adds	r7, #40	@ 0x28
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	20000004 	.word	0x20000004

08004a44 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b086      	sub	sp, #24
 8004a48:	af02      	add	r7, sp, #8
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a58:	d111      	bne.n	8004a7e <SPI_EndRxTransaction+0x3a>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a62:	d004      	beq.n	8004a6e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a6c:	d107      	bne.n	8004a7e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a7c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	9300      	str	r3, [sp, #0]
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	2200      	movs	r2, #0
 8004a86:	2180      	movs	r1, #128	@ 0x80
 8004a88:	68f8      	ldr	r0, [r7, #12]
 8004a8a:	f7ff febd 	bl	8004808 <SPI_WaitFlagStateUntilTimeout>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d007      	beq.n	8004aa4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a98:	f043 0220 	orr.w	r2, r3, #32
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e023      	b.n	8004aec <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004aac:	d11d      	bne.n	8004aea <SPI_EndRxTransaction+0xa6>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ab6:	d004      	beq.n	8004ac2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ac0:	d113      	bne.n	8004aea <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	9300      	str	r3, [sp, #0]
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	f7ff ff22 	bl	8004918 <SPI_WaitFifoStateUntilTimeout>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d007      	beq.n	8004aea <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ade:	f043 0220 	orr.w	r2, r3, #32
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e000      	b.n	8004aec <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004aea:	2300      	movs	r3, #0
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3710      	adds	r7, #16
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b086      	sub	sp, #24
 8004af8:	af02      	add	r7, sp, #8
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	9300      	str	r3, [sp, #0]
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	f7ff ff03 	bl	8004918 <SPI_WaitFifoStateUntilTimeout>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d007      	beq.n	8004b28 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b1c:	f043 0220 	orr.w	r2, r3, #32
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e027      	b.n	8004b78 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	9300      	str	r3, [sp, #0]
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	2180      	movs	r1, #128	@ 0x80
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f7ff fe68 	bl	8004808 <SPI_WaitFlagStateUntilTimeout>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d007      	beq.n	8004b4e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b42:	f043 0220 	orr.w	r2, r3, #32
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e014      	b.n	8004b78 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	9300      	str	r3, [sp, #0]
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f7ff fedc 	bl	8004918 <SPI_WaitFifoStateUntilTimeout>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d007      	beq.n	8004b76 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b6a:	f043 0220 	orr.w	r2, r3, #32
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e000      	b.n	8004b78 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3710      	adds	r7, #16
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e049      	b.n	8004c26 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d106      	bne.n	8004bac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f7fd f986 	bl	8001eb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2202      	movs	r2, #2
 8004bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	3304      	adds	r3, #4
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	4610      	mov	r0, r2
 8004bc0:	f000 fe88 	bl	80058d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3708      	adds	r7, #8
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b082      	sub	sp, #8
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d101      	bne.n	8004c40 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e049      	b.n	8004cd4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d106      	bne.n	8004c5a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 f841 	bl	8004cdc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2202      	movs	r2, #2
 8004c5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	3304      	adds	r3, #4
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	4610      	mov	r0, r2
 8004c6e:	f000 fe31 	bl	80058d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2201      	movs	r2, #1
 8004c96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2201      	movs	r2, #1
 8004cae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3708      	adds	r7, #8
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004ce4:	bf00      	nop
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d109      	bne.n	8004d14 <HAL_TIM_PWM_Start+0x24>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	bf14      	ite	ne
 8004d0c:	2301      	movne	r3, #1
 8004d0e:	2300      	moveq	r3, #0
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	e03c      	b.n	8004d8e <HAL_TIM_PWM_Start+0x9e>
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	2b04      	cmp	r3, #4
 8004d18:	d109      	bne.n	8004d2e <HAL_TIM_PWM_Start+0x3e>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	bf14      	ite	ne
 8004d26:	2301      	movne	r3, #1
 8004d28:	2300      	moveq	r3, #0
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	e02f      	b.n	8004d8e <HAL_TIM_PWM_Start+0x9e>
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	2b08      	cmp	r3, #8
 8004d32:	d109      	bne.n	8004d48 <HAL_TIM_PWM_Start+0x58>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	bf14      	ite	ne
 8004d40:	2301      	movne	r3, #1
 8004d42:	2300      	moveq	r3, #0
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	e022      	b.n	8004d8e <HAL_TIM_PWM_Start+0x9e>
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	2b0c      	cmp	r3, #12
 8004d4c:	d109      	bne.n	8004d62 <HAL_TIM_PWM_Start+0x72>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	bf14      	ite	ne
 8004d5a:	2301      	movne	r3, #1
 8004d5c:	2300      	moveq	r3, #0
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	e015      	b.n	8004d8e <HAL_TIM_PWM_Start+0x9e>
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	2b10      	cmp	r3, #16
 8004d66:	d109      	bne.n	8004d7c <HAL_TIM_PWM_Start+0x8c>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	bf14      	ite	ne
 8004d74:	2301      	movne	r3, #1
 8004d76:	2300      	moveq	r3, #0
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	e008      	b.n	8004d8e <HAL_TIM_PWM_Start+0x9e>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	bf14      	ite	ne
 8004d88:	2301      	movne	r3, #1
 8004d8a:	2300      	moveq	r3, #0
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d001      	beq.n	8004d96 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e0a6      	b.n	8004ee4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d104      	bne.n	8004da6 <HAL_TIM_PWM_Start+0xb6>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2202      	movs	r2, #2
 8004da0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004da4:	e023      	b.n	8004dee <HAL_TIM_PWM_Start+0xfe>
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	2b04      	cmp	r3, #4
 8004daa:	d104      	bne.n	8004db6 <HAL_TIM_PWM_Start+0xc6>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2202      	movs	r2, #2
 8004db0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004db4:	e01b      	b.n	8004dee <HAL_TIM_PWM_Start+0xfe>
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	2b08      	cmp	r3, #8
 8004dba:	d104      	bne.n	8004dc6 <HAL_TIM_PWM_Start+0xd6>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004dc4:	e013      	b.n	8004dee <HAL_TIM_PWM_Start+0xfe>
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	2b0c      	cmp	r3, #12
 8004dca:	d104      	bne.n	8004dd6 <HAL_TIM_PWM_Start+0xe6>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2202      	movs	r2, #2
 8004dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004dd4:	e00b      	b.n	8004dee <HAL_TIM_PWM_Start+0xfe>
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	2b10      	cmp	r3, #16
 8004dda:	d104      	bne.n	8004de6 <HAL_TIM_PWM_Start+0xf6>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2202      	movs	r2, #2
 8004de0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004de4:	e003      	b.n	8004dee <HAL_TIM_PWM_Start+0xfe>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2202      	movs	r2, #2
 8004dea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2201      	movs	r2, #1
 8004df4:	6839      	ldr	r1, [r7, #0]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f001 f9e6 	bl	80061c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a3a      	ldr	r2, [pc, #232]	@ (8004eec <HAL_TIM_PWM_Start+0x1fc>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d018      	beq.n	8004e38 <HAL_TIM_PWM_Start+0x148>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a39      	ldr	r2, [pc, #228]	@ (8004ef0 <HAL_TIM_PWM_Start+0x200>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d013      	beq.n	8004e38 <HAL_TIM_PWM_Start+0x148>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a37      	ldr	r2, [pc, #220]	@ (8004ef4 <HAL_TIM_PWM_Start+0x204>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d00e      	beq.n	8004e38 <HAL_TIM_PWM_Start+0x148>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a36      	ldr	r2, [pc, #216]	@ (8004ef8 <HAL_TIM_PWM_Start+0x208>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d009      	beq.n	8004e38 <HAL_TIM_PWM_Start+0x148>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a34      	ldr	r2, [pc, #208]	@ (8004efc <HAL_TIM_PWM_Start+0x20c>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d004      	beq.n	8004e38 <HAL_TIM_PWM_Start+0x148>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a33      	ldr	r2, [pc, #204]	@ (8004f00 <HAL_TIM_PWM_Start+0x210>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d101      	bne.n	8004e3c <HAL_TIM_PWM_Start+0x14c>
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e000      	b.n	8004e3e <HAL_TIM_PWM_Start+0x14e>
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d007      	beq.n	8004e52 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004e50:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a25      	ldr	r2, [pc, #148]	@ (8004eec <HAL_TIM_PWM_Start+0x1fc>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d022      	beq.n	8004ea2 <HAL_TIM_PWM_Start+0x1b2>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e64:	d01d      	beq.n	8004ea2 <HAL_TIM_PWM_Start+0x1b2>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a26      	ldr	r2, [pc, #152]	@ (8004f04 <HAL_TIM_PWM_Start+0x214>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d018      	beq.n	8004ea2 <HAL_TIM_PWM_Start+0x1b2>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a24      	ldr	r2, [pc, #144]	@ (8004f08 <HAL_TIM_PWM_Start+0x218>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d013      	beq.n	8004ea2 <HAL_TIM_PWM_Start+0x1b2>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a23      	ldr	r2, [pc, #140]	@ (8004f0c <HAL_TIM_PWM_Start+0x21c>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d00e      	beq.n	8004ea2 <HAL_TIM_PWM_Start+0x1b2>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a19      	ldr	r2, [pc, #100]	@ (8004ef0 <HAL_TIM_PWM_Start+0x200>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d009      	beq.n	8004ea2 <HAL_TIM_PWM_Start+0x1b2>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a18      	ldr	r2, [pc, #96]	@ (8004ef4 <HAL_TIM_PWM_Start+0x204>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d004      	beq.n	8004ea2 <HAL_TIM_PWM_Start+0x1b2>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a18      	ldr	r2, [pc, #96]	@ (8004f00 <HAL_TIM_PWM_Start+0x210>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d115      	bne.n	8004ece <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	689a      	ldr	r2, [r3, #8]
 8004ea8:	4b19      	ldr	r3, [pc, #100]	@ (8004f10 <HAL_TIM_PWM_Start+0x220>)
 8004eaa:	4013      	ands	r3, r2
 8004eac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2b06      	cmp	r3, #6
 8004eb2:	d015      	beq.n	8004ee0 <HAL_TIM_PWM_Start+0x1f0>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004eba:	d011      	beq.n	8004ee0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f042 0201 	orr.w	r2, r2, #1
 8004eca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ecc:	e008      	b.n	8004ee0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f042 0201 	orr.w	r2, r2, #1
 8004edc:	601a      	str	r2, [r3, #0]
 8004ede:	e000      	b.n	8004ee2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ee0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3710      	adds	r7, #16
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	40012c00 	.word	0x40012c00
 8004ef0:	40013400 	.word	0x40013400
 8004ef4:	40014000 	.word	0x40014000
 8004ef8:	40014400 	.word	0x40014400
 8004efc:	40014800 	.word	0x40014800
 8004f00:	40015000 	.word	0x40015000
 8004f04:	40000400 	.word	0x40000400
 8004f08:	40000800 	.word	0x40000800
 8004f0c:	40000c00 	.word	0x40000c00
 8004f10:	00010007 	.word	0x00010007

08004f14 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b086      	sub	sp, #24
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d101      	bne.n	8004f28 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e097      	b.n	8005058 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d106      	bne.n	8004f42 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f7fc ffdb 	bl	8001ef8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2202      	movs	r2, #2
 8004f46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	6812      	ldr	r2, [r2, #0]
 8004f54:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8004f58:	f023 0307 	bic.w	r3, r3, #7
 8004f5c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	3304      	adds	r3, #4
 8004f66:	4619      	mov	r1, r3
 8004f68:	4610      	mov	r0, r2
 8004f6a:	f000 fcb3 	bl	80058d4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	699b      	ldr	r3, [r3, #24]
 8004f7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	6a1b      	ldr	r3, [r3, #32]
 8004f84:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f96:	f023 0303 	bic.w	r3, r3, #3
 8004f9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	689a      	ldr	r2, [r3, #8]
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	021b      	lsls	r3, r3, #8
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004fb4:	f023 030c 	bic.w	r3, r3, #12
 8004fb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004fc0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004fc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	68da      	ldr	r2, [r3, #12]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	69db      	ldr	r3, [r3, #28]
 8004fce:	021b      	lsls	r3, r3, #8
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	693a      	ldr	r2, [r7, #16]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	691b      	ldr	r3, [r3, #16]
 8004fdc:	011a      	lsls	r2, r3, #4
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	6a1b      	ldr	r3, [r3, #32]
 8004fe2:	031b      	lsls	r3, r3, #12
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	693a      	ldr	r2, [r7, #16]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004ff2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004ffa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	685a      	ldr	r2, [r3, #4]
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	695b      	ldr	r3, [r3, #20]
 8005004:	011b      	lsls	r3, r3, #4
 8005006:	4313      	orrs	r3, r2
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	4313      	orrs	r3, r2
 800500c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	697a      	ldr	r2, [r7, #20]
 8005014:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2201      	movs	r2, #1
 8005032:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2201      	movs	r2, #1
 800503a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2201      	movs	r2, #1
 800504a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	3718      	adds	r7, #24
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005070:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005078:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005080:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005088:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d110      	bne.n	80050b2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005090:	7bfb      	ldrb	r3, [r7, #15]
 8005092:	2b01      	cmp	r3, #1
 8005094:	d102      	bne.n	800509c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005096:	7b7b      	ldrb	r3, [r7, #13]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d001      	beq.n	80050a0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e069      	b.n	8005174 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2202      	movs	r2, #2
 80050a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2202      	movs	r2, #2
 80050ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050b0:	e031      	b.n	8005116 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	2b04      	cmp	r3, #4
 80050b6:	d110      	bne.n	80050da <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80050b8:	7bbb      	ldrb	r3, [r7, #14]
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d102      	bne.n	80050c4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80050be:	7b3b      	ldrb	r3, [r7, #12]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d001      	beq.n	80050c8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e055      	b.n	8005174 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2202      	movs	r2, #2
 80050cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2202      	movs	r2, #2
 80050d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80050d8:	e01d      	b.n	8005116 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80050da:	7bfb      	ldrb	r3, [r7, #15]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d108      	bne.n	80050f2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80050e0:	7bbb      	ldrb	r3, [r7, #14]
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d105      	bne.n	80050f2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80050e6:	7b7b      	ldrb	r3, [r7, #13]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d102      	bne.n	80050f2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80050ec:	7b3b      	ldrb	r3, [r7, #12]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d001      	beq.n	80050f6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e03e      	b.n	8005174 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2202      	movs	r2, #2
 80050fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2202      	movs	r2, #2
 8005102:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2202      	movs	r2, #2
 800510a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2202      	movs	r2, #2
 8005112:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d003      	beq.n	8005124 <HAL_TIM_Encoder_Start+0xc4>
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	2b04      	cmp	r3, #4
 8005120:	d008      	beq.n	8005134 <HAL_TIM_Encoder_Start+0xd4>
 8005122:	e00f      	b.n	8005144 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2201      	movs	r2, #1
 800512a:	2100      	movs	r1, #0
 800512c:	4618      	mov	r0, r3
 800512e:	f001 f84b 	bl	80061c8 <TIM_CCxChannelCmd>
      break;
 8005132:	e016      	b.n	8005162 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2201      	movs	r2, #1
 800513a:	2104      	movs	r1, #4
 800513c:	4618      	mov	r0, r3
 800513e:	f001 f843 	bl	80061c8 <TIM_CCxChannelCmd>
      break;
 8005142:	e00e      	b.n	8005162 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2201      	movs	r2, #1
 800514a:	2100      	movs	r1, #0
 800514c:	4618      	mov	r0, r3
 800514e:	f001 f83b 	bl	80061c8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2201      	movs	r2, #1
 8005158:	2104      	movs	r1, #4
 800515a:	4618      	mov	r0, r3
 800515c:	f001 f834 	bl	80061c8 <TIM_CCxChannelCmd>
      break;
 8005160:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f042 0201 	orr.w	r2, r2, #1
 8005170:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3710      	adds	r7, #16
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	f003 0302 	and.w	r3, r3, #2
 800519a:	2b00      	cmp	r3, #0
 800519c:	d020      	beq.n	80051e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f003 0302 	and.w	r3, r3, #2
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d01b      	beq.n	80051e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f06f 0202 	mvn.w	r2, #2
 80051b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2201      	movs	r2, #1
 80051b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	f003 0303 	and.w	r3, r3, #3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d003      	beq.n	80051ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 fb66 	bl	8005898 <HAL_TIM_IC_CaptureCallback>
 80051cc:	e005      	b.n	80051da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 fb58 	bl	8005884 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 fb69 	bl	80058ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	f003 0304 	and.w	r3, r3, #4
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d020      	beq.n	800522c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f003 0304 	and.w	r3, r3, #4
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d01b      	beq.n	800522c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f06f 0204 	mvn.w	r2, #4
 80051fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2202      	movs	r2, #2
 8005202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800520e:	2b00      	cmp	r3, #0
 8005210:	d003      	beq.n	800521a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 fb40 	bl	8005898 <HAL_TIM_IC_CaptureCallback>
 8005218:	e005      	b.n	8005226 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 fb32 	bl	8005884 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 fb43 	bl	80058ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	f003 0308 	and.w	r3, r3, #8
 8005232:	2b00      	cmp	r3, #0
 8005234:	d020      	beq.n	8005278 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f003 0308 	and.w	r3, r3, #8
 800523c:	2b00      	cmp	r3, #0
 800523e:	d01b      	beq.n	8005278 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f06f 0208 	mvn.w	r2, #8
 8005248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2204      	movs	r2, #4
 800524e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	69db      	ldr	r3, [r3, #28]
 8005256:	f003 0303 	and.w	r3, r3, #3
 800525a:	2b00      	cmp	r3, #0
 800525c:	d003      	beq.n	8005266 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 fb1a 	bl	8005898 <HAL_TIM_IC_CaptureCallback>
 8005264:	e005      	b.n	8005272 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 fb0c 	bl	8005884 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 fb1d 	bl	80058ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	f003 0310 	and.w	r3, r3, #16
 800527e:	2b00      	cmp	r3, #0
 8005280:	d020      	beq.n	80052c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f003 0310 	and.w	r3, r3, #16
 8005288:	2b00      	cmp	r3, #0
 800528a:	d01b      	beq.n	80052c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f06f 0210 	mvn.w	r2, #16
 8005294:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2208      	movs	r2, #8
 800529a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	69db      	ldr	r3, [r3, #28]
 80052a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d003      	beq.n	80052b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 faf4 	bl	8005898 <HAL_TIM_IC_CaptureCallback>
 80052b0:	e005      	b.n	80052be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 fae6 	bl	8005884 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 faf7 	bl	80058ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	f003 0301 	and.w	r3, r3, #1
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00c      	beq.n	80052e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f003 0301 	and.w	r3, r3, #1
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d007      	beq.n	80052e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f06f 0201 	mvn.w	r2, #1
 80052e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 fac4 	bl	8005870 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d104      	bne.n	80052fc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d00c      	beq.n	8005316 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005302:	2b00      	cmp	r3, #0
 8005304:	d007      	beq.n	8005316 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800530e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f001 f8b3 	bl	800647c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800531c:	2b00      	cmp	r3, #0
 800531e:	d00c      	beq.n	800533a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005326:	2b00      	cmp	r3, #0
 8005328:	d007      	beq.n	800533a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005332:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f001 f8ab 	bl	8006490 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00c      	beq.n	800535e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800534a:	2b00      	cmp	r3, #0
 800534c:	d007      	beq.n	800535e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005356:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 fab1 	bl	80058c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	f003 0320 	and.w	r3, r3, #32
 8005364:	2b00      	cmp	r3, #0
 8005366:	d00c      	beq.n	8005382 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f003 0320 	and.w	r3, r3, #32
 800536e:	2b00      	cmp	r3, #0
 8005370:	d007      	beq.n	8005382 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f06f 0220 	mvn.w	r2, #32
 800537a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f001 f873 	bl	8006468 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005388:	2b00      	cmp	r3, #0
 800538a:	d00c      	beq.n	80053a6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d007      	beq.n	80053a6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800539e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f001 f87f 	bl	80064a4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d00c      	beq.n	80053ca <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d007      	beq.n	80053ca <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80053c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f001 f877 	bl	80064b8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00c      	beq.n	80053ee <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d007      	beq.n	80053ee <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80053e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f001 f86f 	bl	80064cc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00c      	beq.n	8005412 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d007      	beq.n	8005412 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800540a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f001 f867 	bl	80064e0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005412:	bf00      	nop
 8005414:	3710      	adds	r7, #16
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
	...

0800541c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b086      	sub	sp, #24
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005428:	2300      	movs	r3, #0
 800542a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005432:	2b01      	cmp	r3, #1
 8005434:	d101      	bne.n	800543a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005436:	2302      	movs	r3, #2
 8005438:	e0ff      	b.n	800563a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2201      	movs	r2, #1
 800543e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2b14      	cmp	r3, #20
 8005446:	f200 80f0 	bhi.w	800562a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800544a:	a201      	add	r2, pc, #4	@ (adr r2, 8005450 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800544c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005450:	080054a5 	.word	0x080054a5
 8005454:	0800562b 	.word	0x0800562b
 8005458:	0800562b 	.word	0x0800562b
 800545c:	0800562b 	.word	0x0800562b
 8005460:	080054e5 	.word	0x080054e5
 8005464:	0800562b 	.word	0x0800562b
 8005468:	0800562b 	.word	0x0800562b
 800546c:	0800562b 	.word	0x0800562b
 8005470:	08005527 	.word	0x08005527
 8005474:	0800562b 	.word	0x0800562b
 8005478:	0800562b 	.word	0x0800562b
 800547c:	0800562b 	.word	0x0800562b
 8005480:	08005567 	.word	0x08005567
 8005484:	0800562b 	.word	0x0800562b
 8005488:	0800562b 	.word	0x0800562b
 800548c:	0800562b 	.word	0x0800562b
 8005490:	080055a9 	.word	0x080055a9
 8005494:	0800562b 	.word	0x0800562b
 8005498:	0800562b 	.word	0x0800562b
 800549c:	0800562b 	.word	0x0800562b
 80054a0:	080055e9 	.word	0x080055e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68b9      	ldr	r1, [r7, #8]
 80054aa:	4618      	mov	r0, r3
 80054ac:	f000 fac6 	bl	8005a3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	699a      	ldr	r2, [r3, #24]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f042 0208 	orr.w	r2, r2, #8
 80054be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	699a      	ldr	r2, [r3, #24]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f022 0204 	bic.w	r2, r2, #4
 80054ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	6999      	ldr	r1, [r3, #24]
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	691a      	ldr	r2, [r3, #16]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	430a      	orrs	r2, r1
 80054e0:	619a      	str	r2, [r3, #24]
      break;
 80054e2:	e0a5      	b.n	8005630 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68b9      	ldr	r1, [r7, #8]
 80054ea:	4618      	mov	r0, r3
 80054ec:	f000 fb40 	bl	8005b70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	699a      	ldr	r2, [r3, #24]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	699a      	ldr	r2, [r3, #24]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800550e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	6999      	ldr	r1, [r3, #24]
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	021a      	lsls	r2, r3, #8
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	430a      	orrs	r2, r1
 8005522:	619a      	str	r2, [r3, #24]
      break;
 8005524:	e084      	b.n	8005630 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68b9      	ldr	r1, [r7, #8]
 800552c:	4618      	mov	r0, r3
 800552e:	f000 fbb3 	bl	8005c98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	69da      	ldr	r2, [r3, #28]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f042 0208 	orr.w	r2, r2, #8
 8005540:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	69da      	ldr	r2, [r3, #28]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f022 0204 	bic.w	r2, r2, #4
 8005550:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	69d9      	ldr	r1, [r3, #28]
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	691a      	ldr	r2, [r3, #16]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	430a      	orrs	r2, r1
 8005562:	61da      	str	r2, [r3, #28]
      break;
 8005564:	e064      	b.n	8005630 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68b9      	ldr	r1, [r7, #8]
 800556c:	4618      	mov	r0, r3
 800556e:	f000 fc25 	bl	8005dbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	69da      	ldr	r2, [r3, #28]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005580:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	69da      	ldr	r2, [r3, #28]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005590:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	69d9      	ldr	r1, [r3, #28]
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	021a      	lsls	r2, r3, #8
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	430a      	orrs	r2, r1
 80055a4:	61da      	str	r2, [r3, #28]
      break;
 80055a6:	e043      	b.n	8005630 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68b9      	ldr	r1, [r7, #8]
 80055ae:	4618      	mov	r0, r3
 80055b0:	f000 fc98 	bl	8005ee4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f042 0208 	orr.w	r2, r2, #8
 80055c2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f022 0204 	bic.w	r2, r2, #4
 80055d2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	691a      	ldr	r2, [r3, #16]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	430a      	orrs	r2, r1
 80055e4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80055e6:	e023      	b.n	8005630 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68b9      	ldr	r1, [r7, #8]
 80055ee:	4618      	mov	r0, r3
 80055f0:	f000 fce2 	bl	8005fb8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005602:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005612:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	021a      	lsls	r2, r3, #8
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	430a      	orrs	r2, r1
 8005626:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005628:	e002      	b.n	8005630 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	75fb      	strb	r3, [r7, #23]
      break;
 800562e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005638:	7dfb      	ldrb	r3, [r7, #23]
}
 800563a:	4618      	mov	r0, r3
 800563c:	3718      	adds	r7, #24
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop

08005644 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800564e:	2300      	movs	r3, #0
 8005650:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005658:	2b01      	cmp	r3, #1
 800565a:	d101      	bne.n	8005660 <HAL_TIM_ConfigClockSource+0x1c>
 800565c:	2302      	movs	r3, #2
 800565e:	e0f6      	b.n	800584e <HAL_TIM_ConfigClockSource+0x20a>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2202      	movs	r2, #2
 800566c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800567e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005682:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800568a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68ba      	ldr	r2, [r7, #8]
 8005692:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a6f      	ldr	r2, [pc, #444]	@ (8005858 <HAL_TIM_ConfigClockSource+0x214>)
 800569a:	4293      	cmp	r3, r2
 800569c:	f000 80c1 	beq.w	8005822 <HAL_TIM_ConfigClockSource+0x1de>
 80056a0:	4a6d      	ldr	r2, [pc, #436]	@ (8005858 <HAL_TIM_ConfigClockSource+0x214>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	f200 80c6 	bhi.w	8005834 <HAL_TIM_ConfigClockSource+0x1f0>
 80056a8:	4a6c      	ldr	r2, [pc, #432]	@ (800585c <HAL_TIM_ConfigClockSource+0x218>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	f000 80b9 	beq.w	8005822 <HAL_TIM_ConfigClockSource+0x1de>
 80056b0:	4a6a      	ldr	r2, [pc, #424]	@ (800585c <HAL_TIM_ConfigClockSource+0x218>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	f200 80be 	bhi.w	8005834 <HAL_TIM_ConfigClockSource+0x1f0>
 80056b8:	4a69      	ldr	r2, [pc, #420]	@ (8005860 <HAL_TIM_ConfigClockSource+0x21c>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	f000 80b1 	beq.w	8005822 <HAL_TIM_ConfigClockSource+0x1de>
 80056c0:	4a67      	ldr	r2, [pc, #412]	@ (8005860 <HAL_TIM_ConfigClockSource+0x21c>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	f200 80b6 	bhi.w	8005834 <HAL_TIM_ConfigClockSource+0x1f0>
 80056c8:	4a66      	ldr	r2, [pc, #408]	@ (8005864 <HAL_TIM_ConfigClockSource+0x220>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	f000 80a9 	beq.w	8005822 <HAL_TIM_ConfigClockSource+0x1de>
 80056d0:	4a64      	ldr	r2, [pc, #400]	@ (8005864 <HAL_TIM_ConfigClockSource+0x220>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	f200 80ae 	bhi.w	8005834 <HAL_TIM_ConfigClockSource+0x1f0>
 80056d8:	4a63      	ldr	r2, [pc, #396]	@ (8005868 <HAL_TIM_ConfigClockSource+0x224>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	f000 80a1 	beq.w	8005822 <HAL_TIM_ConfigClockSource+0x1de>
 80056e0:	4a61      	ldr	r2, [pc, #388]	@ (8005868 <HAL_TIM_ConfigClockSource+0x224>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	f200 80a6 	bhi.w	8005834 <HAL_TIM_ConfigClockSource+0x1f0>
 80056e8:	4a60      	ldr	r2, [pc, #384]	@ (800586c <HAL_TIM_ConfigClockSource+0x228>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	f000 8099 	beq.w	8005822 <HAL_TIM_ConfigClockSource+0x1de>
 80056f0:	4a5e      	ldr	r2, [pc, #376]	@ (800586c <HAL_TIM_ConfigClockSource+0x228>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	f200 809e 	bhi.w	8005834 <HAL_TIM_ConfigClockSource+0x1f0>
 80056f8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80056fc:	f000 8091 	beq.w	8005822 <HAL_TIM_ConfigClockSource+0x1de>
 8005700:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005704:	f200 8096 	bhi.w	8005834 <HAL_TIM_ConfigClockSource+0x1f0>
 8005708:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800570c:	f000 8089 	beq.w	8005822 <HAL_TIM_ConfigClockSource+0x1de>
 8005710:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005714:	f200 808e 	bhi.w	8005834 <HAL_TIM_ConfigClockSource+0x1f0>
 8005718:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800571c:	d03e      	beq.n	800579c <HAL_TIM_ConfigClockSource+0x158>
 800571e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005722:	f200 8087 	bhi.w	8005834 <HAL_TIM_ConfigClockSource+0x1f0>
 8005726:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800572a:	f000 8086 	beq.w	800583a <HAL_TIM_ConfigClockSource+0x1f6>
 800572e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005732:	d87f      	bhi.n	8005834 <HAL_TIM_ConfigClockSource+0x1f0>
 8005734:	2b70      	cmp	r3, #112	@ 0x70
 8005736:	d01a      	beq.n	800576e <HAL_TIM_ConfigClockSource+0x12a>
 8005738:	2b70      	cmp	r3, #112	@ 0x70
 800573a:	d87b      	bhi.n	8005834 <HAL_TIM_ConfigClockSource+0x1f0>
 800573c:	2b60      	cmp	r3, #96	@ 0x60
 800573e:	d050      	beq.n	80057e2 <HAL_TIM_ConfigClockSource+0x19e>
 8005740:	2b60      	cmp	r3, #96	@ 0x60
 8005742:	d877      	bhi.n	8005834 <HAL_TIM_ConfigClockSource+0x1f0>
 8005744:	2b50      	cmp	r3, #80	@ 0x50
 8005746:	d03c      	beq.n	80057c2 <HAL_TIM_ConfigClockSource+0x17e>
 8005748:	2b50      	cmp	r3, #80	@ 0x50
 800574a:	d873      	bhi.n	8005834 <HAL_TIM_ConfigClockSource+0x1f0>
 800574c:	2b40      	cmp	r3, #64	@ 0x40
 800574e:	d058      	beq.n	8005802 <HAL_TIM_ConfigClockSource+0x1be>
 8005750:	2b40      	cmp	r3, #64	@ 0x40
 8005752:	d86f      	bhi.n	8005834 <HAL_TIM_ConfigClockSource+0x1f0>
 8005754:	2b30      	cmp	r3, #48	@ 0x30
 8005756:	d064      	beq.n	8005822 <HAL_TIM_ConfigClockSource+0x1de>
 8005758:	2b30      	cmp	r3, #48	@ 0x30
 800575a:	d86b      	bhi.n	8005834 <HAL_TIM_ConfigClockSource+0x1f0>
 800575c:	2b20      	cmp	r3, #32
 800575e:	d060      	beq.n	8005822 <HAL_TIM_ConfigClockSource+0x1de>
 8005760:	2b20      	cmp	r3, #32
 8005762:	d867      	bhi.n	8005834 <HAL_TIM_ConfigClockSource+0x1f0>
 8005764:	2b00      	cmp	r3, #0
 8005766:	d05c      	beq.n	8005822 <HAL_TIM_ConfigClockSource+0x1de>
 8005768:	2b10      	cmp	r3, #16
 800576a:	d05a      	beq.n	8005822 <HAL_TIM_ConfigClockSource+0x1de>
 800576c:	e062      	b.n	8005834 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800577e:	f000 fd03 	bl	8006188 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005790:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68ba      	ldr	r2, [r7, #8]
 8005798:	609a      	str	r2, [r3, #8]
      break;
 800579a:	e04f      	b.n	800583c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80057ac:	f000 fcec 	bl	8006188 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	689a      	ldr	r2, [r3, #8]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80057be:	609a      	str	r2, [r3, #8]
      break;
 80057c0:	e03c      	b.n	800583c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057ce:	461a      	mov	r2, r3
 80057d0:	f000 fc5e 	bl	8006090 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2150      	movs	r1, #80	@ 0x50
 80057da:	4618      	mov	r0, r3
 80057dc:	f000 fcb7 	bl	800614e <TIM_ITRx_SetConfig>
      break;
 80057e0:	e02c      	b.n	800583c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80057ee:	461a      	mov	r2, r3
 80057f0:	f000 fc7d 	bl	80060ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2160      	movs	r1, #96	@ 0x60
 80057fa:	4618      	mov	r0, r3
 80057fc:	f000 fca7 	bl	800614e <TIM_ITRx_SetConfig>
      break;
 8005800:	e01c      	b.n	800583c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800580e:	461a      	mov	r2, r3
 8005810:	f000 fc3e 	bl	8006090 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2140      	movs	r1, #64	@ 0x40
 800581a:	4618      	mov	r0, r3
 800581c:	f000 fc97 	bl	800614e <TIM_ITRx_SetConfig>
      break;
 8005820:	e00c      	b.n	800583c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4619      	mov	r1, r3
 800582c:	4610      	mov	r0, r2
 800582e:	f000 fc8e 	bl	800614e <TIM_ITRx_SetConfig>
      break;
 8005832:	e003      	b.n	800583c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	73fb      	strb	r3, [r7, #15]
      break;
 8005838:	e000      	b.n	800583c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800583a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800584c:	7bfb      	ldrb	r3, [r7, #15]
}
 800584e:	4618      	mov	r0, r3
 8005850:	3710      	adds	r7, #16
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	00100070 	.word	0x00100070
 800585c:	00100060 	.word	0x00100060
 8005860:	00100050 	.word	0x00100050
 8005864:	00100040 	.word	0x00100040
 8005868:	00100030 	.word	0x00100030
 800586c:	00100020 	.word	0x00100020

08005870 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005878:	bf00      	nop
 800587a:	370c      	adds	r7, #12
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800588c:	bf00      	nop
 800588e:	370c      	adds	r7, #12
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058a0:	bf00      	nop
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058b4:	bf00      	nop
 80058b6:	370c      	adds	r7, #12
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058c8:	bf00      	nop
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a4c      	ldr	r2, [pc, #304]	@ (8005a18 <TIM_Base_SetConfig+0x144>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d017      	beq.n	800591c <TIM_Base_SetConfig+0x48>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058f2:	d013      	beq.n	800591c <TIM_Base_SetConfig+0x48>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4a49      	ldr	r2, [pc, #292]	@ (8005a1c <TIM_Base_SetConfig+0x148>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d00f      	beq.n	800591c <TIM_Base_SetConfig+0x48>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4a48      	ldr	r2, [pc, #288]	@ (8005a20 <TIM_Base_SetConfig+0x14c>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d00b      	beq.n	800591c <TIM_Base_SetConfig+0x48>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	4a47      	ldr	r2, [pc, #284]	@ (8005a24 <TIM_Base_SetConfig+0x150>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d007      	beq.n	800591c <TIM_Base_SetConfig+0x48>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4a46      	ldr	r2, [pc, #280]	@ (8005a28 <TIM_Base_SetConfig+0x154>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d003      	beq.n	800591c <TIM_Base_SetConfig+0x48>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4a45      	ldr	r2, [pc, #276]	@ (8005a2c <TIM_Base_SetConfig+0x158>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d108      	bne.n	800592e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005922:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	4313      	orrs	r3, r2
 800592c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a39      	ldr	r2, [pc, #228]	@ (8005a18 <TIM_Base_SetConfig+0x144>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d023      	beq.n	800597e <TIM_Base_SetConfig+0xaa>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800593c:	d01f      	beq.n	800597e <TIM_Base_SetConfig+0xaa>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a36      	ldr	r2, [pc, #216]	@ (8005a1c <TIM_Base_SetConfig+0x148>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d01b      	beq.n	800597e <TIM_Base_SetConfig+0xaa>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a35      	ldr	r2, [pc, #212]	@ (8005a20 <TIM_Base_SetConfig+0x14c>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d017      	beq.n	800597e <TIM_Base_SetConfig+0xaa>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a34      	ldr	r2, [pc, #208]	@ (8005a24 <TIM_Base_SetConfig+0x150>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d013      	beq.n	800597e <TIM_Base_SetConfig+0xaa>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a33      	ldr	r2, [pc, #204]	@ (8005a28 <TIM_Base_SetConfig+0x154>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d00f      	beq.n	800597e <TIM_Base_SetConfig+0xaa>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a33      	ldr	r2, [pc, #204]	@ (8005a30 <TIM_Base_SetConfig+0x15c>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d00b      	beq.n	800597e <TIM_Base_SetConfig+0xaa>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a32      	ldr	r2, [pc, #200]	@ (8005a34 <TIM_Base_SetConfig+0x160>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d007      	beq.n	800597e <TIM_Base_SetConfig+0xaa>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a31      	ldr	r2, [pc, #196]	@ (8005a38 <TIM_Base_SetConfig+0x164>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d003      	beq.n	800597e <TIM_Base_SetConfig+0xaa>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a2c      	ldr	r2, [pc, #176]	@ (8005a2c <TIM_Base_SetConfig+0x158>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d108      	bne.n	8005990 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005984:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	68fa      	ldr	r2, [r7, #12]
 800598c:	4313      	orrs	r3, r2
 800598e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	695b      	ldr	r3, [r3, #20]
 800599a:	4313      	orrs	r3, r2
 800599c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	689a      	ldr	r2, [r3, #8]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a18      	ldr	r2, [pc, #96]	@ (8005a18 <TIM_Base_SetConfig+0x144>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d013      	beq.n	80059e4 <TIM_Base_SetConfig+0x110>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a1a      	ldr	r2, [pc, #104]	@ (8005a28 <TIM_Base_SetConfig+0x154>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d00f      	beq.n	80059e4 <TIM_Base_SetConfig+0x110>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a1a      	ldr	r2, [pc, #104]	@ (8005a30 <TIM_Base_SetConfig+0x15c>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d00b      	beq.n	80059e4 <TIM_Base_SetConfig+0x110>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4a19      	ldr	r2, [pc, #100]	@ (8005a34 <TIM_Base_SetConfig+0x160>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d007      	beq.n	80059e4 <TIM_Base_SetConfig+0x110>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4a18      	ldr	r2, [pc, #96]	@ (8005a38 <TIM_Base_SetConfig+0x164>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d003      	beq.n	80059e4 <TIM_Base_SetConfig+0x110>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a13      	ldr	r2, [pc, #76]	@ (8005a2c <TIM_Base_SetConfig+0x158>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d103      	bne.n	80059ec <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	691a      	ldr	r2, [r3, #16]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d105      	bne.n	8005a0a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	f023 0201 	bic.w	r2, r3, #1
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	611a      	str	r2, [r3, #16]
  }
}
 8005a0a:	bf00      	nop
 8005a0c:	3714      	adds	r7, #20
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr
 8005a16:	bf00      	nop
 8005a18:	40012c00 	.word	0x40012c00
 8005a1c:	40000400 	.word	0x40000400
 8005a20:	40000800 	.word	0x40000800
 8005a24:	40000c00 	.word	0x40000c00
 8005a28:	40013400 	.word	0x40013400
 8005a2c:	40015000 	.word	0x40015000
 8005a30:	40014000 	.word	0x40014000
 8005a34:	40014400 	.word	0x40014400
 8005a38:	40014800 	.word	0x40014800

08005a3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b087      	sub	sp, #28
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a1b      	ldr	r3, [r3, #32]
 8005a4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a1b      	ldr	r3, [r3, #32]
 8005a50:	f023 0201 	bic.w	r2, r3, #1
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f023 0303 	bic.w	r3, r3, #3
 8005a76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	f023 0302 	bic.w	r3, r3, #2
 8005a88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	697a      	ldr	r2, [r7, #20]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a30      	ldr	r2, [pc, #192]	@ (8005b58 <TIM_OC1_SetConfig+0x11c>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d013      	beq.n	8005ac4 <TIM_OC1_SetConfig+0x88>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a2f      	ldr	r2, [pc, #188]	@ (8005b5c <TIM_OC1_SetConfig+0x120>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d00f      	beq.n	8005ac4 <TIM_OC1_SetConfig+0x88>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a2e      	ldr	r2, [pc, #184]	@ (8005b60 <TIM_OC1_SetConfig+0x124>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d00b      	beq.n	8005ac4 <TIM_OC1_SetConfig+0x88>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a2d      	ldr	r2, [pc, #180]	@ (8005b64 <TIM_OC1_SetConfig+0x128>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d007      	beq.n	8005ac4 <TIM_OC1_SetConfig+0x88>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a2c      	ldr	r2, [pc, #176]	@ (8005b68 <TIM_OC1_SetConfig+0x12c>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d003      	beq.n	8005ac4 <TIM_OC1_SetConfig+0x88>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a2b      	ldr	r2, [pc, #172]	@ (8005b6c <TIM_OC1_SetConfig+0x130>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d10c      	bne.n	8005ade <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	f023 0308 	bic.w	r3, r3, #8
 8005aca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	697a      	ldr	r2, [r7, #20]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	f023 0304 	bic.w	r3, r3, #4
 8005adc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a1d      	ldr	r2, [pc, #116]	@ (8005b58 <TIM_OC1_SetConfig+0x11c>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d013      	beq.n	8005b0e <TIM_OC1_SetConfig+0xd2>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a1c      	ldr	r2, [pc, #112]	@ (8005b5c <TIM_OC1_SetConfig+0x120>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d00f      	beq.n	8005b0e <TIM_OC1_SetConfig+0xd2>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a1b      	ldr	r2, [pc, #108]	@ (8005b60 <TIM_OC1_SetConfig+0x124>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d00b      	beq.n	8005b0e <TIM_OC1_SetConfig+0xd2>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a1a      	ldr	r2, [pc, #104]	@ (8005b64 <TIM_OC1_SetConfig+0x128>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d007      	beq.n	8005b0e <TIM_OC1_SetConfig+0xd2>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a19      	ldr	r2, [pc, #100]	@ (8005b68 <TIM_OC1_SetConfig+0x12c>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d003      	beq.n	8005b0e <TIM_OC1_SetConfig+0xd2>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a18      	ldr	r2, [pc, #96]	@ (8005b6c <TIM_OC1_SetConfig+0x130>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d111      	bne.n	8005b32 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	695b      	ldr	r3, [r3, #20]
 8005b22:	693a      	ldr	r2, [r7, #16]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	699b      	ldr	r3, [r3, #24]
 8005b2c:	693a      	ldr	r2, [r7, #16]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	693a      	ldr	r2, [r7, #16]
 8005b36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	685a      	ldr	r2, [r3, #4]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	697a      	ldr	r2, [r7, #20]
 8005b4a:	621a      	str	r2, [r3, #32]
}
 8005b4c:	bf00      	nop
 8005b4e:	371c      	adds	r7, #28
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr
 8005b58:	40012c00 	.word	0x40012c00
 8005b5c:	40013400 	.word	0x40013400
 8005b60:	40014000 	.word	0x40014000
 8005b64:	40014400 	.word	0x40014400
 8005b68:	40014800 	.word	0x40014800
 8005b6c:	40015000 	.word	0x40015000

08005b70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b087      	sub	sp, #28
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a1b      	ldr	r3, [r3, #32]
 8005b7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a1b      	ldr	r3, [r3, #32]
 8005b84:	f023 0210 	bic.w	r2, r3, #16
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005baa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	021b      	lsls	r3, r3, #8
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	f023 0320 	bic.w	r3, r3, #32
 8005bbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	011b      	lsls	r3, r3, #4
 8005bc6:	697a      	ldr	r2, [r7, #20]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a2c      	ldr	r2, [pc, #176]	@ (8005c80 <TIM_OC2_SetConfig+0x110>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d007      	beq.n	8005be4 <TIM_OC2_SetConfig+0x74>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a2b      	ldr	r2, [pc, #172]	@ (8005c84 <TIM_OC2_SetConfig+0x114>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d003      	beq.n	8005be4 <TIM_OC2_SetConfig+0x74>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4a2a      	ldr	r2, [pc, #168]	@ (8005c88 <TIM_OC2_SetConfig+0x118>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d10d      	bne.n	8005c00 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	011b      	lsls	r3, r3, #4
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bfe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a1f      	ldr	r2, [pc, #124]	@ (8005c80 <TIM_OC2_SetConfig+0x110>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d013      	beq.n	8005c30 <TIM_OC2_SetConfig+0xc0>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4a1e      	ldr	r2, [pc, #120]	@ (8005c84 <TIM_OC2_SetConfig+0x114>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d00f      	beq.n	8005c30 <TIM_OC2_SetConfig+0xc0>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a1e      	ldr	r2, [pc, #120]	@ (8005c8c <TIM_OC2_SetConfig+0x11c>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d00b      	beq.n	8005c30 <TIM_OC2_SetConfig+0xc0>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a1d      	ldr	r2, [pc, #116]	@ (8005c90 <TIM_OC2_SetConfig+0x120>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d007      	beq.n	8005c30 <TIM_OC2_SetConfig+0xc0>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a1c      	ldr	r2, [pc, #112]	@ (8005c94 <TIM_OC2_SetConfig+0x124>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d003      	beq.n	8005c30 <TIM_OC2_SetConfig+0xc0>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a17      	ldr	r2, [pc, #92]	@ (8005c88 <TIM_OC2_SetConfig+0x118>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d113      	bne.n	8005c58 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	695b      	ldr	r3, [r3, #20]
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	693a      	ldr	r2, [r7, #16]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	699b      	ldr	r3, [r3, #24]
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	693a      	ldr	r2, [r7, #16]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	693a      	ldr	r2, [r7, #16]
 8005c5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	685a      	ldr	r2, [r3, #4]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	697a      	ldr	r2, [r7, #20]
 8005c70:	621a      	str	r2, [r3, #32]
}
 8005c72:	bf00      	nop
 8005c74:	371c      	adds	r7, #28
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	40012c00 	.word	0x40012c00
 8005c84:	40013400 	.word	0x40013400
 8005c88:	40015000 	.word	0x40015000
 8005c8c:	40014000 	.word	0x40014000
 8005c90:	40014400 	.word	0x40014400
 8005c94:	40014800 	.word	0x40014800

08005c98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b087      	sub	sp, #28
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a1b      	ldr	r3, [r3, #32]
 8005ca6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6a1b      	ldr	r3, [r3, #32]
 8005cac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	69db      	ldr	r3, [r3, #28]
 8005cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f023 0303 	bic.w	r3, r3, #3
 8005cd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ce4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	021b      	lsls	r3, r3, #8
 8005cec:	697a      	ldr	r2, [r7, #20]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a2b      	ldr	r2, [pc, #172]	@ (8005da4 <TIM_OC3_SetConfig+0x10c>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d007      	beq.n	8005d0a <TIM_OC3_SetConfig+0x72>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a2a      	ldr	r2, [pc, #168]	@ (8005da8 <TIM_OC3_SetConfig+0x110>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d003      	beq.n	8005d0a <TIM_OC3_SetConfig+0x72>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a29      	ldr	r2, [pc, #164]	@ (8005dac <TIM_OC3_SetConfig+0x114>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d10d      	bne.n	8005d26 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005d10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	021b      	lsls	r3, r3, #8
 8005d18:	697a      	ldr	r2, [r7, #20]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005d24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a1e      	ldr	r2, [pc, #120]	@ (8005da4 <TIM_OC3_SetConfig+0x10c>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d013      	beq.n	8005d56 <TIM_OC3_SetConfig+0xbe>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a1d      	ldr	r2, [pc, #116]	@ (8005da8 <TIM_OC3_SetConfig+0x110>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d00f      	beq.n	8005d56 <TIM_OC3_SetConfig+0xbe>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a1d      	ldr	r2, [pc, #116]	@ (8005db0 <TIM_OC3_SetConfig+0x118>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d00b      	beq.n	8005d56 <TIM_OC3_SetConfig+0xbe>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a1c      	ldr	r2, [pc, #112]	@ (8005db4 <TIM_OC3_SetConfig+0x11c>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d007      	beq.n	8005d56 <TIM_OC3_SetConfig+0xbe>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a1b      	ldr	r2, [pc, #108]	@ (8005db8 <TIM_OC3_SetConfig+0x120>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d003      	beq.n	8005d56 <TIM_OC3_SetConfig+0xbe>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a16      	ldr	r2, [pc, #88]	@ (8005dac <TIM_OC3_SetConfig+0x114>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d113      	bne.n	8005d7e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	695b      	ldr	r3, [r3, #20]
 8005d6a:	011b      	lsls	r3, r3, #4
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	699b      	ldr	r3, [r3, #24]
 8005d76:	011b      	lsls	r3, r3, #4
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	693a      	ldr	r2, [r7, #16]
 8005d82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	685a      	ldr	r2, [r3, #4]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	697a      	ldr	r2, [r7, #20]
 8005d96:	621a      	str	r2, [r3, #32]
}
 8005d98:	bf00      	nop
 8005d9a:	371c      	adds	r7, #28
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr
 8005da4:	40012c00 	.word	0x40012c00
 8005da8:	40013400 	.word	0x40013400
 8005dac:	40015000 	.word	0x40015000
 8005db0:	40014000 	.word	0x40014000
 8005db4:	40014400 	.word	0x40014400
 8005db8:	40014800 	.word	0x40014800

08005dbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b087      	sub	sp, #28
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a1b      	ldr	r3, [r3, #32]
 8005dca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a1b      	ldr	r3, [r3, #32]
 8005dd0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	69db      	ldr	r3, [r3, #28]
 8005de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005dea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005dee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005df6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	021b      	lsls	r3, r3, #8
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005e0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	031b      	lsls	r3, r3, #12
 8005e12:	697a      	ldr	r2, [r7, #20]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a2c      	ldr	r2, [pc, #176]	@ (8005ecc <TIM_OC4_SetConfig+0x110>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d007      	beq.n	8005e30 <TIM_OC4_SetConfig+0x74>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a2b      	ldr	r2, [pc, #172]	@ (8005ed0 <TIM_OC4_SetConfig+0x114>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d003      	beq.n	8005e30 <TIM_OC4_SetConfig+0x74>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a2a      	ldr	r2, [pc, #168]	@ (8005ed4 <TIM_OC4_SetConfig+0x118>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d10d      	bne.n	8005e4c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005e36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	031b      	lsls	r3, r3, #12
 8005e3e:	697a      	ldr	r2, [r7, #20]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e4a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4a1f      	ldr	r2, [pc, #124]	@ (8005ecc <TIM_OC4_SetConfig+0x110>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d013      	beq.n	8005e7c <TIM_OC4_SetConfig+0xc0>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4a1e      	ldr	r2, [pc, #120]	@ (8005ed0 <TIM_OC4_SetConfig+0x114>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d00f      	beq.n	8005e7c <TIM_OC4_SetConfig+0xc0>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a1e      	ldr	r2, [pc, #120]	@ (8005ed8 <TIM_OC4_SetConfig+0x11c>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d00b      	beq.n	8005e7c <TIM_OC4_SetConfig+0xc0>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4a1d      	ldr	r2, [pc, #116]	@ (8005edc <TIM_OC4_SetConfig+0x120>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d007      	beq.n	8005e7c <TIM_OC4_SetConfig+0xc0>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a1c      	ldr	r2, [pc, #112]	@ (8005ee0 <TIM_OC4_SetConfig+0x124>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d003      	beq.n	8005e7c <TIM_OC4_SetConfig+0xc0>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a17      	ldr	r2, [pc, #92]	@ (8005ed4 <TIM_OC4_SetConfig+0x118>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d113      	bne.n	8005ea4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e82:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005e8a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	695b      	ldr	r3, [r3, #20]
 8005e90:	019b      	lsls	r3, r3, #6
 8005e92:	693a      	ldr	r2, [r7, #16]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	699b      	ldr	r3, [r3, #24]
 8005e9c:	019b      	lsls	r3, r3, #6
 8005e9e:	693a      	ldr	r2, [r7, #16]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	685a      	ldr	r2, [r3, #4]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	697a      	ldr	r2, [r7, #20]
 8005ebc:	621a      	str	r2, [r3, #32]
}
 8005ebe:	bf00      	nop
 8005ec0:	371c      	adds	r7, #28
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop
 8005ecc:	40012c00 	.word	0x40012c00
 8005ed0:	40013400 	.word	0x40013400
 8005ed4:	40015000 	.word	0x40015000
 8005ed8:	40014000 	.word	0x40014000
 8005edc:	40014400 	.word	0x40014400
 8005ee0:	40014800 	.word	0x40014800

08005ee4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b087      	sub	sp, #28
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a1b      	ldr	r3, [r3, #32]
 8005ef2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6a1b      	ldr	r3, [r3, #32]
 8005ef8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	68fa      	ldr	r2, [r7, #12]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005f28:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	041b      	lsls	r3, r3, #16
 8005f30:	693a      	ldr	r2, [r7, #16]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a19      	ldr	r2, [pc, #100]	@ (8005fa0 <TIM_OC5_SetConfig+0xbc>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d013      	beq.n	8005f66 <TIM_OC5_SetConfig+0x82>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a18      	ldr	r2, [pc, #96]	@ (8005fa4 <TIM_OC5_SetConfig+0xc0>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d00f      	beq.n	8005f66 <TIM_OC5_SetConfig+0x82>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a17      	ldr	r2, [pc, #92]	@ (8005fa8 <TIM_OC5_SetConfig+0xc4>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d00b      	beq.n	8005f66 <TIM_OC5_SetConfig+0x82>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a16      	ldr	r2, [pc, #88]	@ (8005fac <TIM_OC5_SetConfig+0xc8>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d007      	beq.n	8005f66 <TIM_OC5_SetConfig+0x82>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a15      	ldr	r2, [pc, #84]	@ (8005fb0 <TIM_OC5_SetConfig+0xcc>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d003      	beq.n	8005f66 <TIM_OC5_SetConfig+0x82>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a14      	ldr	r2, [pc, #80]	@ (8005fb4 <TIM_OC5_SetConfig+0xd0>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d109      	bne.n	8005f7a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f6c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	695b      	ldr	r3, [r3, #20]
 8005f72:	021b      	lsls	r3, r3, #8
 8005f74:	697a      	ldr	r2, [r7, #20]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	697a      	ldr	r2, [r7, #20]
 8005f7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	68fa      	ldr	r2, [r7, #12]
 8005f84:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	685a      	ldr	r2, [r3, #4]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	693a      	ldr	r2, [r7, #16]
 8005f92:	621a      	str	r2, [r3, #32]
}
 8005f94:	bf00      	nop
 8005f96:	371c      	adds	r7, #28
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr
 8005fa0:	40012c00 	.word	0x40012c00
 8005fa4:	40013400 	.word	0x40013400
 8005fa8:	40014000 	.word	0x40014000
 8005fac:	40014400 	.word	0x40014400
 8005fb0:	40014800 	.word	0x40014800
 8005fb4:	40015000 	.word	0x40015000

08005fb8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b087      	sub	sp, #28
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a1b      	ldr	r3, [r3, #32]
 8005fc6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6a1b      	ldr	r3, [r3, #32]
 8005fcc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005fe6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	021b      	lsls	r3, r3, #8
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005ffe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	051b      	lsls	r3, r3, #20
 8006006:	693a      	ldr	r2, [r7, #16]
 8006008:	4313      	orrs	r3, r2
 800600a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4a1a      	ldr	r2, [pc, #104]	@ (8006078 <TIM_OC6_SetConfig+0xc0>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d013      	beq.n	800603c <TIM_OC6_SetConfig+0x84>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a19      	ldr	r2, [pc, #100]	@ (800607c <TIM_OC6_SetConfig+0xc4>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d00f      	beq.n	800603c <TIM_OC6_SetConfig+0x84>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a18      	ldr	r2, [pc, #96]	@ (8006080 <TIM_OC6_SetConfig+0xc8>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d00b      	beq.n	800603c <TIM_OC6_SetConfig+0x84>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a17      	ldr	r2, [pc, #92]	@ (8006084 <TIM_OC6_SetConfig+0xcc>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d007      	beq.n	800603c <TIM_OC6_SetConfig+0x84>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4a16      	ldr	r2, [pc, #88]	@ (8006088 <TIM_OC6_SetConfig+0xd0>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d003      	beq.n	800603c <TIM_OC6_SetConfig+0x84>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	4a15      	ldr	r2, [pc, #84]	@ (800608c <TIM_OC6_SetConfig+0xd4>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d109      	bne.n	8006050 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006042:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	695b      	ldr	r3, [r3, #20]
 8006048:	029b      	lsls	r3, r3, #10
 800604a:	697a      	ldr	r2, [r7, #20]
 800604c:	4313      	orrs	r3, r2
 800604e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	697a      	ldr	r2, [r7, #20]
 8006054:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	685a      	ldr	r2, [r3, #4]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	693a      	ldr	r2, [r7, #16]
 8006068:	621a      	str	r2, [r3, #32]
}
 800606a:	bf00      	nop
 800606c:	371c      	adds	r7, #28
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr
 8006076:	bf00      	nop
 8006078:	40012c00 	.word	0x40012c00
 800607c:	40013400 	.word	0x40013400
 8006080:	40014000 	.word	0x40014000
 8006084:	40014400 	.word	0x40014400
 8006088:	40014800 	.word	0x40014800
 800608c:	40015000 	.word	0x40015000

08006090 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006090:	b480      	push	{r7}
 8006092:	b087      	sub	sp, #28
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6a1b      	ldr	r3, [r3, #32]
 80060a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6a1b      	ldr	r3, [r3, #32]
 80060a6:	f023 0201 	bic.w	r2, r3, #1
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	699b      	ldr	r3, [r3, #24]
 80060b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80060ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	011b      	lsls	r3, r3, #4
 80060c0:	693a      	ldr	r2, [r7, #16]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	f023 030a 	bic.w	r3, r3, #10
 80060cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80060ce:	697a      	ldr	r2, [r7, #20]
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	693a      	ldr	r2, [r7, #16]
 80060da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	697a      	ldr	r2, [r7, #20]
 80060e0:	621a      	str	r2, [r3, #32]
}
 80060e2:	bf00      	nop
 80060e4:	371c      	adds	r7, #28
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr

080060ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060ee:	b480      	push	{r7}
 80060f0:	b087      	sub	sp, #28
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	60f8      	str	r0, [r7, #12]
 80060f6:	60b9      	str	r1, [r7, #8]
 80060f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6a1b      	ldr	r3, [r3, #32]
 80060fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6a1b      	ldr	r3, [r3, #32]
 8006104:	f023 0210 	bic.w	r2, r3, #16
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	699b      	ldr	r3, [r3, #24]
 8006110:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006118:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	031b      	lsls	r3, r3, #12
 800611e:	693a      	ldr	r2, [r7, #16]
 8006120:	4313      	orrs	r3, r2
 8006122:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800612a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	011b      	lsls	r3, r3, #4
 8006130:	697a      	ldr	r2, [r7, #20]
 8006132:	4313      	orrs	r3, r2
 8006134:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	693a      	ldr	r2, [r7, #16]
 800613a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	697a      	ldr	r2, [r7, #20]
 8006140:	621a      	str	r2, [r3, #32]
}
 8006142:	bf00      	nop
 8006144:	371c      	adds	r7, #28
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr

0800614e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800614e:	b480      	push	{r7}
 8006150:	b085      	sub	sp, #20
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
 8006156:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006164:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006168:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800616a:	683a      	ldr	r2, [r7, #0]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	4313      	orrs	r3, r2
 8006170:	f043 0307 	orr.w	r3, r3, #7
 8006174:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	609a      	str	r2, [r3, #8]
}
 800617c:	bf00      	nop
 800617e:	3714      	adds	r7, #20
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006188:	b480      	push	{r7}
 800618a:	b087      	sub	sp, #28
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	607a      	str	r2, [r7, #4]
 8006194:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80061a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	021a      	lsls	r2, r3, #8
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	431a      	orrs	r2, r3
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	697a      	ldr	r2, [r7, #20]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	697a      	ldr	r2, [r7, #20]
 80061ba:	609a      	str	r2, [r3, #8]
}
 80061bc:	bf00      	nop
 80061be:	371c      	adds	r7, #28
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b087      	sub	sp, #28
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	f003 031f 	and.w	r3, r3, #31
 80061da:	2201      	movs	r2, #1
 80061dc:	fa02 f303 	lsl.w	r3, r2, r3
 80061e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	6a1a      	ldr	r2, [r3, #32]
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	43db      	mvns	r3, r3
 80061ea:	401a      	ands	r2, r3
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6a1a      	ldr	r2, [r3, #32]
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	f003 031f 	and.w	r3, r3, #31
 80061fa:	6879      	ldr	r1, [r7, #4]
 80061fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006200:	431a      	orrs	r2, r3
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	621a      	str	r2, [r3, #32]
}
 8006206:	bf00      	nop
 8006208:	371c      	adds	r7, #28
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr
	...

08006214 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006214:	b480      	push	{r7}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006224:	2b01      	cmp	r3, #1
 8006226:	d101      	bne.n	800622c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006228:	2302      	movs	r3, #2
 800622a:	e074      	b.n	8006316 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2202      	movs	r2, #2
 8006238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a34      	ldr	r2, [pc, #208]	@ (8006324 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d009      	beq.n	800626a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a33      	ldr	r2, [pc, #204]	@ (8006328 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d004      	beq.n	800626a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a31      	ldr	r2, [pc, #196]	@ (800632c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d108      	bne.n	800627c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006270:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	4313      	orrs	r3, r2
 800627a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006282:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006286:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	4313      	orrs	r3, r2
 8006290:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a21      	ldr	r2, [pc, #132]	@ (8006324 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d022      	beq.n	80062ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062ac:	d01d      	beq.n	80062ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a1f      	ldr	r2, [pc, #124]	@ (8006330 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d018      	beq.n	80062ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a1d      	ldr	r2, [pc, #116]	@ (8006334 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d013      	beq.n	80062ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a1c      	ldr	r2, [pc, #112]	@ (8006338 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d00e      	beq.n	80062ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a15      	ldr	r2, [pc, #84]	@ (8006328 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d009      	beq.n	80062ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a18      	ldr	r2, [pc, #96]	@ (800633c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d004      	beq.n	80062ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a11      	ldr	r2, [pc, #68]	@ (800632c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d10c      	bne.n	8006304 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	68ba      	ldr	r2, [r7, #8]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68ba      	ldr	r2, [r7, #8]
 8006302:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3714      	adds	r7, #20
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	40012c00 	.word	0x40012c00
 8006328:	40013400 	.word	0x40013400
 800632c:	40015000 	.word	0x40015000
 8006330:	40000400 	.word	0x40000400
 8006334:	40000800 	.word	0x40000800
 8006338:	40000c00 	.word	0x40000c00
 800633c:	40014000 	.word	0x40014000

08006340 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006340:	b480      	push	{r7}
 8006342:	b085      	sub	sp, #20
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800634a:	2300      	movs	r3, #0
 800634c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006354:	2b01      	cmp	r3, #1
 8006356:	d101      	bne.n	800635c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006358:	2302      	movs	r3, #2
 800635a:	e078      	b.n	800644e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	4313      	orrs	r3, r2
 8006370:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	4313      	orrs	r3, r2
 800637e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	4313      	orrs	r3, r2
 800638c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4313      	orrs	r3, r2
 800639a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	695b      	ldr	r3, [r3, #20]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063c2:	4313      	orrs	r3, r2
 80063c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	699b      	ldr	r3, [r3, #24]
 80063d0:	041b      	lsls	r3, r3, #16
 80063d2:	4313      	orrs	r3, r2
 80063d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	69db      	ldr	r3, [r3, #28]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a1c      	ldr	r2, [pc, #112]	@ (800645c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d009      	beq.n	8006402 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a1b      	ldr	r2, [pc, #108]	@ (8006460 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d004      	beq.n	8006402 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a19      	ldr	r2, [pc, #100]	@ (8006464 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d11c      	bne.n	800643c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800640c:	051b      	lsls	r3, r3, #20
 800640e:	4313      	orrs	r3, r2
 8006410:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	6a1b      	ldr	r3, [r3, #32]
 800641c:	4313      	orrs	r3, r2
 800641e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800642a:	4313      	orrs	r3, r2
 800642c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006438:	4313      	orrs	r3, r2
 800643a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	68fa      	ldr	r2, [r7, #12]
 8006442:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	3714      	adds	r7, #20
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop
 800645c:	40012c00 	.word	0x40012c00
 8006460:	40013400 	.word	0x40013400
 8006464:	40015000 	.word	0x40015000

08006468 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006470:	bf00      	nop
 8006472:	370c      	adds	r7, #12
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006484:	bf00      	nop
 8006486:	370c      	adds	r7, #12
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr

08006490 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006498:	bf00      	nop
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80064ac:	bf00      	nop
 80064ae:	370c      	adds	r7, #12
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80064c0:	bf00      	nop
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80064d4:	bf00      	nop
 80064d6:	370c      	adds	r7, #12
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80064e8:	bf00      	nop
 80064ea:	370c      	adds	r7, #12
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d101      	bne.n	8006506 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e042      	b.n	800658c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800650c:	2b00      	cmp	r3, #0
 800650e:	d106      	bne.n	800651e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f7fb fda3 	bl	8002064 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2224      	movs	r2, #36	@ 0x24
 8006522:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f022 0201 	bic.w	r2, r2, #1
 8006534:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800653a:	2b00      	cmp	r3, #0
 800653c:	d002      	beq.n	8006544 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 ffbe 	bl	80074c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 fcbf 	bl	8006ec8 <UART_SetConfig>
 800654a:	4603      	mov	r3, r0
 800654c:	2b01      	cmp	r3, #1
 800654e:	d101      	bne.n	8006554 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e01b      	b.n	800658c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	685a      	ldr	r2, [r3, #4]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006562:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	689a      	ldr	r2, [r3, #8]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006572:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f042 0201 	orr.w	r2, r2, #1
 8006582:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f001 f83d 	bl	8007604 <UART_CheckIdleState>
 800658a:	4603      	mov	r3, r0
}
 800658c:	4618      	mov	r0, r3
 800658e:	3708      	adds	r7, #8
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b08a      	sub	sp, #40	@ 0x28
 8006598:	af02      	add	r7, sp, #8
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	60b9      	str	r1, [r7, #8]
 800659e:	603b      	str	r3, [r7, #0]
 80065a0:	4613      	mov	r3, r2
 80065a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065aa:	2b20      	cmp	r3, #32
 80065ac:	d17b      	bne.n	80066a6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d002      	beq.n	80065ba <HAL_UART_Transmit+0x26>
 80065b4:	88fb      	ldrh	r3, [r7, #6]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d101      	bne.n	80065be <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e074      	b.n	80066a8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2200      	movs	r2, #0
 80065c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2221      	movs	r2, #33	@ 0x21
 80065ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065ce:	f7fb ffa7 	bl	8002520 <HAL_GetTick>
 80065d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	88fa      	ldrh	r2, [r7, #6]
 80065d8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	88fa      	ldrh	r2, [r7, #6]
 80065e0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065ec:	d108      	bne.n	8006600 <HAL_UART_Transmit+0x6c>
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d104      	bne.n	8006600 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80065f6:	2300      	movs	r3, #0
 80065f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	61bb      	str	r3, [r7, #24]
 80065fe:	e003      	b.n	8006608 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006604:	2300      	movs	r3, #0
 8006606:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006608:	e030      	b.n	800666c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	9300      	str	r3, [sp, #0]
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	2200      	movs	r2, #0
 8006612:	2180      	movs	r1, #128	@ 0x80
 8006614:	68f8      	ldr	r0, [r7, #12]
 8006616:	f001 f89f 	bl	8007758 <UART_WaitOnFlagUntilTimeout>
 800661a:	4603      	mov	r3, r0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d005      	beq.n	800662c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2220      	movs	r2, #32
 8006624:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006628:	2303      	movs	r3, #3
 800662a:	e03d      	b.n	80066a8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d10b      	bne.n	800664a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	881b      	ldrh	r3, [r3, #0]
 8006636:	461a      	mov	r2, r3
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006640:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	3302      	adds	r3, #2
 8006646:	61bb      	str	r3, [r7, #24]
 8006648:	e007      	b.n	800665a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	781a      	ldrb	r2, [r3, #0]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	3301      	adds	r3, #1
 8006658:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006660:	b29b      	uxth	r3, r3
 8006662:	3b01      	subs	r3, #1
 8006664:	b29a      	uxth	r2, r3
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006672:	b29b      	uxth	r3, r3
 8006674:	2b00      	cmp	r3, #0
 8006676:	d1c8      	bne.n	800660a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	9300      	str	r3, [sp, #0]
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	2200      	movs	r2, #0
 8006680:	2140      	movs	r1, #64	@ 0x40
 8006682:	68f8      	ldr	r0, [r7, #12]
 8006684:	f001 f868 	bl	8007758 <UART_WaitOnFlagUntilTimeout>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d005      	beq.n	800669a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2220      	movs	r2, #32
 8006692:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006696:	2303      	movs	r3, #3
 8006698:	e006      	b.n	80066a8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2220      	movs	r2, #32
 800669e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80066a2:	2300      	movs	r3, #0
 80066a4:	e000      	b.n	80066a8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80066a6:	2302      	movs	r3, #2
  }
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3720      	adds	r7, #32
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b08a      	sub	sp, #40	@ 0x28
 80066b4:	af02      	add	r7, sp, #8
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	603b      	str	r3, [r7, #0]
 80066bc:	4613      	mov	r3, r2
 80066be:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80066c6:	2b20      	cmp	r3, #32
 80066c8:	f040 80b5 	bne.w	8006836 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d002      	beq.n	80066d8 <HAL_UART_Receive+0x28>
 80066d2:	88fb      	ldrh	r3, [r7, #6]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d101      	bne.n	80066dc <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	e0ad      	b.n	8006838 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2200      	movs	r2, #0
 80066e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2222      	movs	r2, #34	@ 0x22
 80066e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2200      	movs	r2, #0
 80066f0:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80066f2:	f7fb ff15 	bl	8002520 <HAL_GetTick>
 80066f6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	88fa      	ldrh	r2, [r7, #6]
 80066fc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	88fa      	ldrh	r2, [r7, #6]
 8006704:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006710:	d10e      	bne.n	8006730 <HAL_UART_Receive+0x80>
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d105      	bne.n	8006726 <HAL_UART_Receive+0x76>
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006720:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006724:	e02d      	b.n	8006782 <HAL_UART_Receive+0xd2>
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	22ff      	movs	r2, #255	@ 0xff
 800672a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800672e:	e028      	b.n	8006782 <HAL_UART_Receive+0xd2>
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d10d      	bne.n	8006754 <HAL_UART_Receive+0xa4>
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	691b      	ldr	r3, [r3, #16]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d104      	bne.n	800674a <HAL_UART_Receive+0x9a>
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	22ff      	movs	r2, #255	@ 0xff
 8006744:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006748:	e01b      	b.n	8006782 <HAL_UART_Receive+0xd2>
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	227f      	movs	r2, #127	@ 0x7f
 800674e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006752:	e016      	b.n	8006782 <HAL_UART_Receive+0xd2>
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800675c:	d10d      	bne.n	800677a <HAL_UART_Receive+0xca>
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d104      	bne.n	8006770 <HAL_UART_Receive+0xc0>
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	227f      	movs	r2, #127	@ 0x7f
 800676a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800676e:	e008      	b.n	8006782 <HAL_UART_Receive+0xd2>
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	223f      	movs	r2, #63	@ 0x3f
 8006774:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006778:	e003      	b.n	8006782 <HAL_UART_Receive+0xd2>
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2200      	movs	r2, #0
 800677e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006788:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006792:	d108      	bne.n	80067a6 <HAL_UART_Receive+0xf6>
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	691b      	ldr	r3, [r3, #16]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d104      	bne.n	80067a6 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800679c:	2300      	movs	r3, #0
 800679e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	61bb      	str	r3, [r7, #24]
 80067a4:	e003      	b.n	80067ae <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067aa:	2300      	movs	r3, #0
 80067ac:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80067ae:	e036      	b.n	800681e <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	9300      	str	r3, [sp, #0]
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	2200      	movs	r2, #0
 80067b8:	2120      	movs	r1, #32
 80067ba:	68f8      	ldr	r0, [r7, #12]
 80067bc:	f000 ffcc 	bl	8007758 <UART_WaitOnFlagUntilTimeout>
 80067c0:	4603      	mov	r3, r0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d005      	beq.n	80067d2 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2220      	movs	r2, #32
 80067ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 80067ce:	2303      	movs	r3, #3
 80067d0:	e032      	b.n	8006838 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d10c      	bne.n	80067f2 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067de:	b29a      	uxth	r2, r3
 80067e0:	8a7b      	ldrh	r3, [r7, #18]
 80067e2:	4013      	ands	r3, r2
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	3302      	adds	r3, #2
 80067ee:	61bb      	str	r3, [r7, #24]
 80067f0:	e00c      	b.n	800680c <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067f8:	b2da      	uxtb	r2, r3
 80067fa:	8a7b      	ldrh	r3, [r7, #18]
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	4013      	ands	r3, r2
 8006800:	b2da      	uxtb	r2, r3
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	3301      	adds	r3, #1
 800680a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006812:	b29b      	uxth	r3, r3
 8006814:	3b01      	subs	r3, #1
 8006816:	b29a      	uxth	r2, r3
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006824:	b29b      	uxth	r3, r3
 8006826:	2b00      	cmp	r3, #0
 8006828:	d1c2      	bne.n	80067b0 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2220      	movs	r2, #32
 800682e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8006832:	2300      	movs	r3, #0
 8006834:	e000      	b.n	8006838 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8006836:	2302      	movs	r3, #2
  }
}
 8006838:	4618      	mov	r0, r3
 800683a:	3720      	adds	r7, #32
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b0ba      	sub	sp, #232	@ 0xe8
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	69db      	ldr	r3, [r3, #28]
 800684e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006866:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800686a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800686e:	4013      	ands	r3, r2
 8006870:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006874:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006878:	2b00      	cmp	r3, #0
 800687a:	d11b      	bne.n	80068b4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800687c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006880:	f003 0320 	and.w	r3, r3, #32
 8006884:	2b00      	cmp	r3, #0
 8006886:	d015      	beq.n	80068b4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800688c:	f003 0320 	and.w	r3, r3, #32
 8006890:	2b00      	cmp	r3, #0
 8006892:	d105      	bne.n	80068a0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006894:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006898:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800689c:	2b00      	cmp	r3, #0
 800689e:	d009      	beq.n	80068b4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	f000 82e3 	beq.w	8006e70 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	4798      	blx	r3
      }
      return;
 80068b2:	e2dd      	b.n	8006e70 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80068b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	f000 8123 	beq.w	8006b04 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80068be:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80068c2:	4b8d      	ldr	r3, [pc, #564]	@ (8006af8 <HAL_UART_IRQHandler+0x2b8>)
 80068c4:	4013      	ands	r3, r2
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d106      	bne.n	80068d8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80068ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80068ce:	4b8b      	ldr	r3, [pc, #556]	@ (8006afc <HAL_UART_IRQHandler+0x2bc>)
 80068d0:	4013      	ands	r3, r2
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	f000 8116 	beq.w	8006b04 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80068d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068dc:	f003 0301 	and.w	r3, r3, #1
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d011      	beq.n	8006908 <HAL_UART_IRQHandler+0xc8>
 80068e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d00b      	beq.n	8006908 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2201      	movs	r2, #1
 80068f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068fe:	f043 0201 	orr.w	r2, r3, #1
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800690c:	f003 0302 	and.w	r3, r3, #2
 8006910:	2b00      	cmp	r3, #0
 8006912:	d011      	beq.n	8006938 <HAL_UART_IRQHandler+0xf8>
 8006914:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006918:	f003 0301 	and.w	r3, r3, #1
 800691c:	2b00      	cmp	r3, #0
 800691e:	d00b      	beq.n	8006938 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2202      	movs	r2, #2
 8006926:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800692e:	f043 0204 	orr.w	r2, r3, #4
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800693c:	f003 0304 	and.w	r3, r3, #4
 8006940:	2b00      	cmp	r3, #0
 8006942:	d011      	beq.n	8006968 <HAL_UART_IRQHandler+0x128>
 8006944:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006948:	f003 0301 	and.w	r3, r3, #1
 800694c:	2b00      	cmp	r3, #0
 800694e:	d00b      	beq.n	8006968 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	2204      	movs	r2, #4
 8006956:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800695e:	f043 0202 	orr.w	r2, r3, #2
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800696c:	f003 0308 	and.w	r3, r3, #8
 8006970:	2b00      	cmp	r3, #0
 8006972:	d017      	beq.n	80069a4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006978:	f003 0320 	and.w	r3, r3, #32
 800697c:	2b00      	cmp	r3, #0
 800697e:	d105      	bne.n	800698c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006980:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006984:	4b5c      	ldr	r3, [pc, #368]	@ (8006af8 <HAL_UART_IRQHandler+0x2b8>)
 8006986:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00b      	beq.n	80069a4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	2208      	movs	r2, #8
 8006992:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800699a:	f043 0208 	orr.w	r2, r3, #8
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80069a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d012      	beq.n	80069d6 <HAL_UART_IRQHandler+0x196>
 80069b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069b4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d00c      	beq.n	80069d6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80069c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069cc:	f043 0220 	orr.w	r2, r3, #32
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069dc:	2b00      	cmp	r3, #0
 80069de:	f000 8249 	beq.w	8006e74 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80069e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069e6:	f003 0320 	and.w	r3, r3, #32
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d013      	beq.n	8006a16 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80069ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069f2:	f003 0320 	and.w	r3, r3, #32
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d105      	bne.n	8006a06 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80069fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d007      	beq.n	8006a16 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d003      	beq.n	8006a16 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a1c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a2a:	2b40      	cmp	r3, #64	@ 0x40
 8006a2c:	d005      	beq.n	8006a3a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006a2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a32:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d054      	beq.n	8006ae4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 fef9 	bl	8007832 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a4a:	2b40      	cmp	r3, #64	@ 0x40
 8006a4c:	d146      	bne.n	8006adc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	3308      	adds	r3, #8
 8006a54:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a58:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006a5c:	e853 3f00 	ldrex	r3, [r3]
 8006a60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006a64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006a68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	3308      	adds	r3, #8
 8006a76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006a7a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006a7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006a86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006a8a:	e841 2300 	strex	r3, r2, [r1]
 8006a8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006a92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d1d9      	bne.n	8006a4e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d017      	beq.n	8006ad4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006aaa:	4a15      	ldr	r2, [pc, #84]	@ (8006b00 <HAL_UART_IRQHandler+0x2c0>)
 8006aac:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f7fb fec9 	bl	800284c <HAL_DMA_Abort_IT>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d019      	beq.n	8006af4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006ace:	4610      	mov	r0, r2
 8006ad0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ad2:	e00f      	b.n	8006af4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 f9e1 	bl	8006e9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ada:	e00b      	b.n	8006af4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f000 f9dd 	bl	8006e9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ae2:	e007      	b.n	8006af4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 f9d9 	bl	8006e9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006af2:	e1bf      	b.n	8006e74 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006af4:	bf00      	nop
    return;
 8006af6:	e1bd      	b.n	8006e74 <HAL_UART_IRQHandler+0x634>
 8006af8:	10000001 	.word	0x10000001
 8006afc:	04000120 	.word	0x04000120
 8006b00:	080078ff 	.word	0x080078ff

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	f040 8153 	bne.w	8006db4 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b12:	f003 0310 	and.w	r3, r3, #16
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	f000 814c 	beq.w	8006db4 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006b1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b20:	f003 0310 	and.w	r3, r3, #16
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	f000 8145 	beq.w	8006db4 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	2210      	movs	r2, #16
 8006b30:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b3c:	2b40      	cmp	r3, #64	@ 0x40
 8006b3e:	f040 80bb 	bne.w	8006cb8 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006b50:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	f000 818f 	beq.w	8006e78 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006b60:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006b64:	429a      	cmp	r2, r3
 8006b66:	f080 8187 	bcs.w	8006e78 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006b70:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f003 0320 	and.w	r3, r3, #32
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	f040 8087 	bne.w	8006c96 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b90:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006b94:	e853 3f00 	ldrex	r3, [r3]
 8006b98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006b9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006ba0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ba4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	461a      	mov	r2, r3
 8006bae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006bb2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006bb6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006bbe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006bc2:	e841 2300 	strex	r3, r2, [r1]
 8006bc6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006bca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d1da      	bne.n	8006b88 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	3308      	adds	r3, #8
 8006bd8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bda:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006bdc:	e853 3f00 	ldrex	r3, [r3]
 8006be0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006be2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006be4:	f023 0301 	bic.w	r3, r3, #1
 8006be8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	3308      	adds	r3, #8
 8006bf2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006bf6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006bfa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bfc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006bfe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006c02:	e841 2300 	strex	r3, r2, [r1]
 8006c06:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006c08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d1e1      	bne.n	8006bd2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	3308      	adds	r3, #8
 8006c14:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006c18:	e853 3f00 	ldrex	r3, [r3]
 8006c1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006c1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c24:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	3308      	adds	r3, #8
 8006c2e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006c32:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006c34:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c36:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006c38:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006c3a:	e841 2300 	strex	r3, r2, [r1]
 8006c3e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006c40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d1e3      	bne.n	8006c0e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2220      	movs	r2, #32
 8006c4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c5c:	e853 3f00 	ldrex	r3, [r3]
 8006c60:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006c62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c64:	f023 0310 	bic.w	r3, r3, #16
 8006c68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	461a      	mov	r2, r3
 8006c72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006c76:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006c78:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c7a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006c7c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006c7e:	e841 2300 	strex	r3, r2, [r1]
 8006c82:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006c84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d1e4      	bne.n	8006c54 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c90:	4618      	mov	r0, r3
 8006c92:	f7fb fd82 	bl	800279a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2202      	movs	r2, #2
 8006c9a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	1ad3      	subs	r3, r2, r3
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	4619      	mov	r1, r3
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 f8fd 	bl	8006eb0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006cb6:	e0df      	b.n	8006e78 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	1ad3      	subs	r3, r2, r3
 8006cc8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	f000 80d1 	beq.w	8006e7c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8006cda:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	f000 80cc 	beq.w	8006e7c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cec:	e853 3f00 	ldrex	r3, [r3]
 8006cf0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006cf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cf4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006cf8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	461a      	mov	r2, r3
 8006d02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006d06:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d08:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d0a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d0c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d0e:	e841 2300 	strex	r3, r2, [r1]
 8006d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d1e4      	bne.n	8006ce4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	3308      	adds	r3, #8
 8006d20:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d24:	e853 3f00 	ldrex	r3, [r3]
 8006d28:	623b      	str	r3, [r7, #32]
   return(result);
 8006d2a:	6a3b      	ldr	r3, [r7, #32]
 8006d2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d30:	f023 0301 	bic.w	r3, r3, #1
 8006d34:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	3308      	adds	r3, #8
 8006d3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006d42:	633a      	str	r2, [r7, #48]	@ 0x30
 8006d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d4a:	e841 2300 	strex	r3, r2, [r1]
 8006d4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1e1      	bne.n	8006d1a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2220      	movs	r2, #32
 8006d5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	e853 3f00 	ldrex	r3, [r3]
 8006d76:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f023 0310 	bic.w	r3, r3, #16
 8006d7e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	461a      	mov	r2, r3
 8006d88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006d8c:	61fb      	str	r3, [r7, #28]
 8006d8e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d90:	69b9      	ldr	r1, [r7, #24]
 8006d92:	69fa      	ldr	r2, [r7, #28]
 8006d94:	e841 2300 	strex	r3, r2, [r1]
 8006d98:	617b      	str	r3, [r7, #20]
   return(result);
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d1e4      	bne.n	8006d6a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2202      	movs	r2, #2
 8006da4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006da6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006daa:	4619      	mov	r1, r3
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 f87f 	bl	8006eb0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006db2:	e063      	b.n	8006e7c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006db8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d00e      	beq.n	8006dde <HAL_UART_IRQHandler+0x59e>
 8006dc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006dc4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d008      	beq.n	8006dde <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006dd4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 fdd2 	bl	8007980 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ddc:	e051      	b.n	8006e82 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006de2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d014      	beq.n	8006e14 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006dea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006dee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d105      	bne.n	8006e02 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006df6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006dfa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d008      	beq.n	8006e14 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d03a      	beq.n	8006e80 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	4798      	blx	r3
    }
    return;
 8006e12:	e035      	b.n	8006e80 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006e14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d009      	beq.n	8006e34 <HAL_UART_IRQHandler+0x5f4>
 8006e20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d003      	beq.n	8006e34 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 fd7c 	bl	800792a <UART_EndTransmit_IT>
    return;
 8006e32:	e026      	b.n	8006e82 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006e34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e38:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d009      	beq.n	8006e54 <HAL_UART_IRQHandler+0x614>
 8006e40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e44:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d003      	beq.n	8006e54 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 fdab 	bl	80079a8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e52:	e016      	b.n	8006e82 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006e54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e58:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d010      	beq.n	8006e82 <HAL_UART_IRQHandler+0x642>
 8006e60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	da0c      	bge.n	8006e82 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f000 fd93 	bl	8007994 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e6e:	e008      	b.n	8006e82 <HAL_UART_IRQHandler+0x642>
      return;
 8006e70:	bf00      	nop
 8006e72:	e006      	b.n	8006e82 <HAL_UART_IRQHandler+0x642>
    return;
 8006e74:	bf00      	nop
 8006e76:	e004      	b.n	8006e82 <HAL_UART_IRQHandler+0x642>
      return;
 8006e78:	bf00      	nop
 8006e7a:	e002      	b.n	8006e82 <HAL_UART_IRQHandler+0x642>
      return;
 8006e7c:	bf00      	nop
 8006e7e:	e000      	b.n	8006e82 <HAL_UART_IRQHandler+0x642>
    return;
 8006e80:	bf00      	nop
  }
}
 8006e82:	37e8      	adds	r7, #232	@ 0xe8
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006e90:	bf00      	nop
 8006e92:	370c      	adds	r7, #12
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006ea4:	bf00      	nop
 8006ea6:	370c      	adds	r7, #12
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	460b      	mov	r3, r1
 8006eba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ebc:	bf00      	nop
 8006ebe:	370c      	adds	r7, #12
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr

08006ec8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ec8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ecc:	b08c      	sub	sp, #48	@ 0x30
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	689a      	ldr	r2, [r3, #8]
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	691b      	ldr	r3, [r3, #16]
 8006ee0:	431a      	orrs	r2, r3
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	695b      	ldr	r3, [r3, #20]
 8006ee6:	431a      	orrs	r2, r3
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	69db      	ldr	r3, [r3, #28]
 8006eec:	4313      	orrs	r3, r2
 8006eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	4baa      	ldr	r3, [pc, #680]	@ (80071a0 <UART_SetConfig+0x2d8>)
 8006ef8:	4013      	ands	r3, r2
 8006efa:	697a      	ldr	r2, [r7, #20]
 8006efc:	6812      	ldr	r2, [r2, #0]
 8006efe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f00:	430b      	orrs	r3, r1
 8006f02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	68da      	ldr	r2, [r3, #12]
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	430a      	orrs	r2, r1
 8006f18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	699b      	ldr	r3, [r3, #24]
 8006f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a9f      	ldr	r2, [pc, #636]	@ (80071a4 <UART_SetConfig+0x2dc>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d004      	beq.n	8006f34 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	6a1b      	ldr	r3, [r3, #32]
 8006f2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f30:	4313      	orrs	r3, r2
 8006f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006f3e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006f42:	697a      	ldr	r2, [r7, #20]
 8006f44:	6812      	ldr	r2, [r2, #0]
 8006f46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f48:	430b      	orrs	r3, r1
 8006f4a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f52:	f023 010f 	bic.w	r1, r3, #15
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	430a      	orrs	r2, r1
 8006f60:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a90      	ldr	r2, [pc, #576]	@ (80071a8 <UART_SetConfig+0x2e0>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d125      	bne.n	8006fb8 <UART_SetConfig+0xf0>
 8006f6c:	4b8f      	ldr	r3, [pc, #572]	@ (80071ac <UART_SetConfig+0x2e4>)
 8006f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f72:	f003 0303 	and.w	r3, r3, #3
 8006f76:	2b03      	cmp	r3, #3
 8006f78:	d81a      	bhi.n	8006fb0 <UART_SetConfig+0xe8>
 8006f7a:	a201      	add	r2, pc, #4	@ (adr r2, 8006f80 <UART_SetConfig+0xb8>)
 8006f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f80:	08006f91 	.word	0x08006f91
 8006f84:	08006fa1 	.word	0x08006fa1
 8006f88:	08006f99 	.word	0x08006f99
 8006f8c:	08006fa9 	.word	0x08006fa9
 8006f90:	2301      	movs	r3, #1
 8006f92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f96:	e116      	b.n	80071c6 <UART_SetConfig+0x2fe>
 8006f98:	2302      	movs	r3, #2
 8006f9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f9e:	e112      	b.n	80071c6 <UART_SetConfig+0x2fe>
 8006fa0:	2304      	movs	r3, #4
 8006fa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fa6:	e10e      	b.n	80071c6 <UART_SetConfig+0x2fe>
 8006fa8:	2308      	movs	r3, #8
 8006faa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fae:	e10a      	b.n	80071c6 <UART_SetConfig+0x2fe>
 8006fb0:	2310      	movs	r3, #16
 8006fb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fb6:	e106      	b.n	80071c6 <UART_SetConfig+0x2fe>
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a7c      	ldr	r2, [pc, #496]	@ (80071b0 <UART_SetConfig+0x2e8>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d138      	bne.n	8007034 <UART_SetConfig+0x16c>
 8006fc2:	4b7a      	ldr	r3, [pc, #488]	@ (80071ac <UART_SetConfig+0x2e4>)
 8006fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fc8:	f003 030c 	and.w	r3, r3, #12
 8006fcc:	2b0c      	cmp	r3, #12
 8006fce:	d82d      	bhi.n	800702c <UART_SetConfig+0x164>
 8006fd0:	a201      	add	r2, pc, #4	@ (adr r2, 8006fd8 <UART_SetConfig+0x110>)
 8006fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd6:	bf00      	nop
 8006fd8:	0800700d 	.word	0x0800700d
 8006fdc:	0800702d 	.word	0x0800702d
 8006fe0:	0800702d 	.word	0x0800702d
 8006fe4:	0800702d 	.word	0x0800702d
 8006fe8:	0800701d 	.word	0x0800701d
 8006fec:	0800702d 	.word	0x0800702d
 8006ff0:	0800702d 	.word	0x0800702d
 8006ff4:	0800702d 	.word	0x0800702d
 8006ff8:	08007015 	.word	0x08007015
 8006ffc:	0800702d 	.word	0x0800702d
 8007000:	0800702d 	.word	0x0800702d
 8007004:	0800702d 	.word	0x0800702d
 8007008:	08007025 	.word	0x08007025
 800700c:	2300      	movs	r3, #0
 800700e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007012:	e0d8      	b.n	80071c6 <UART_SetConfig+0x2fe>
 8007014:	2302      	movs	r3, #2
 8007016:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800701a:	e0d4      	b.n	80071c6 <UART_SetConfig+0x2fe>
 800701c:	2304      	movs	r3, #4
 800701e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007022:	e0d0      	b.n	80071c6 <UART_SetConfig+0x2fe>
 8007024:	2308      	movs	r3, #8
 8007026:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800702a:	e0cc      	b.n	80071c6 <UART_SetConfig+0x2fe>
 800702c:	2310      	movs	r3, #16
 800702e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007032:	e0c8      	b.n	80071c6 <UART_SetConfig+0x2fe>
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a5e      	ldr	r2, [pc, #376]	@ (80071b4 <UART_SetConfig+0x2ec>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d125      	bne.n	800708a <UART_SetConfig+0x1c2>
 800703e:	4b5b      	ldr	r3, [pc, #364]	@ (80071ac <UART_SetConfig+0x2e4>)
 8007040:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007044:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007048:	2b30      	cmp	r3, #48	@ 0x30
 800704a:	d016      	beq.n	800707a <UART_SetConfig+0x1b2>
 800704c:	2b30      	cmp	r3, #48	@ 0x30
 800704e:	d818      	bhi.n	8007082 <UART_SetConfig+0x1ba>
 8007050:	2b20      	cmp	r3, #32
 8007052:	d00a      	beq.n	800706a <UART_SetConfig+0x1a2>
 8007054:	2b20      	cmp	r3, #32
 8007056:	d814      	bhi.n	8007082 <UART_SetConfig+0x1ba>
 8007058:	2b00      	cmp	r3, #0
 800705a:	d002      	beq.n	8007062 <UART_SetConfig+0x19a>
 800705c:	2b10      	cmp	r3, #16
 800705e:	d008      	beq.n	8007072 <UART_SetConfig+0x1aa>
 8007060:	e00f      	b.n	8007082 <UART_SetConfig+0x1ba>
 8007062:	2300      	movs	r3, #0
 8007064:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007068:	e0ad      	b.n	80071c6 <UART_SetConfig+0x2fe>
 800706a:	2302      	movs	r3, #2
 800706c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007070:	e0a9      	b.n	80071c6 <UART_SetConfig+0x2fe>
 8007072:	2304      	movs	r3, #4
 8007074:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007078:	e0a5      	b.n	80071c6 <UART_SetConfig+0x2fe>
 800707a:	2308      	movs	r3, #8
 800707c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007080:	e0a1      	b.n	80071c6 <UART_SetConfig+0x2fe>
 8007082:	2310      	movs	r3, #16
 8007084:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007088:	e09d      	b.n	80071c6 <UART_SetConfig+0x2fe>
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a4a      	ldr	r2, [pc, #296]	@ (80071b8 <UART_SetConfig+0x2f0>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d125      	bne.n	80070e0 <UART_SetConfig+0x218>
 8007094:	4b45      	ldr	r3, [pc, #276]	@ (80071ac <UART_SetConfig+0x2e4>)
 8007096:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800709a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800709e:	2bc0      	cmp	r3, #192	@ 0xc0
 80070a0:	d016      	beq.n	80070d0 <UART_SetConfig+0x208>
 80070a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80070a4:	d818      	bhi.n	80070d8 <UART_SetConfig+0x210>
 80070a6:	2b80      	cmp	r3, #128	@ 0x80
 80070a8:	d00a      	beq.n	80070c0 <UART_SetConfig+0x1f8>
 80070aa:	2b80      	cmp	r3, #128	@ 0x80
 80070ac:	d814      	bhi.n	80070d8 <UART_SetConfig+0x210>
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d002      	beq.n	80070b8 <UART_SetConfig+0x1f0>
 80070b2:	2b40      	cmp	r3, #64	@ 0x40
 80070b4:	d008      	beq.n	80070c8 <UART_SetConfig+0x200>
 80070b6:	e00f      	b.n	80070d8 <UART_SetConfig+0x210>
 80070b8:	2300      	movs	r3, #0
 80070ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070be:	e082      	b.n	80071c6 <UART_SetConfig+0x2fe>
 80070c0:	2302      	movs	r3, #2
 80070c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070c6:	e07e      	b.n	80071c6 <UART_SetConfig+0x2fe>
 80070c8:	2304      	movs	r3, #4
 80070ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070ce:	e07a      	b.n	80071c6 <UART_SetConfig+0x2fe>
 80070d0:	2308      	movs	r3, #8
 80070d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070d6:	e076      	b.n	80071c6 <UART_SetConfig+0x2fe>
 80070d8:	2310      	movs	r3, #16
 80070da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070de:	e072      	b.n	80071c6 <UART_SetConfig+0x2fe>
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a35      	ldr	r2, [pc, #212]	@ (80071bc <UART_SetConfig+0x2f4>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d12a      	bne.n	8007140 <UART_SetConfig+0x278>
 80070ea:	4b30      	ldr	r3, [pc, #192]	@ (80071ac <UART_SetConfig+0x2e4>)
 80070ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80070f8:	d01a      	beq.n	8007130 <UART_SetConfig+0x268>
 80070fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80070fe:	d81b      	bhi.n	8007138 <UART_SetConfig+0x270>
 8007100:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007104:	d00c      	beq.n	8007120 <UART_SetConfig+0x258>
 8007106:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800710a:	d815      	bhi.n	8007138 <UART_SetConfig+0x270>
 800710c:	2b00      	cmp	r3, #0
 800710e:	d003      	beq.n	8007118 <UART_SetConfig+0x250>
 8007110:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007114:	d008      	beq.n	8007128 <UART_SetConfig+0x260>
 8007116:	e00f      	b.n	8007138 <UART_SetConfig+0x270>
 8007118:	2300      	movs	r3, #0
 800711a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800711e:	e052      	b.n	80071c6 <UART_SetConfig+0x2fe>
 8007120:	2302      	movs	r3, #2
 8007122:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007126:	e04e      	b.n	80071c6 <UART_SetConfig+0x2fe>
 8007128:	2304      	movs	r3, #4
 800712a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800712e:	e04a      	b.n	80071c6 <UART_SetConfig+0x2fe>
 8007130:	2308      	movs	r3, #8
 8007132:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007136:	e046      	b.n	80071c6 <UART_SetConfig+0x2fe>
 8007138:	2310      	movs	r3, #16
 800713a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800713e:	e042      	b.n	80071c6 <UART_SetConfig+0x2fe>
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a17      	ldr	r2, [pc, #92]	@ (80071a4 <UART_SetConfig+0x2dc>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d13a      	bne.n	80071c0 <UART_SetConfig+0x2f8>
 800714a:	4b18      	ldr	r3, [pc, #96]	@ (80071ac <UART_SetConfig+0x2e4>)
 800714c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007150:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007154:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007158:	d01a      	beq.n	8007190 <UART_SetConfig+0x2c8>
 800715a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800715e:	d81b      	bhi.n	8007198 <UART_SetConfig+0x2d0>
 8007160:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007164:	d00c      	beq.n	8007180 <UART_SetConfig+0x2b8>
 8007166:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800716a:	d815      	bhi.n	8007198 <UART_SetConfig+0x2d0>
 800716c:	2b00      	cmp	r3, #0
 800716e:	d003      	beq.n	8007178 <UART_SetConfig+0x2b0>
 8007170:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007174:	d008      	beq.n	8007188 <UART_SetConfig+0x2c0>
 8007176:	e00f      	b.n	8007198 <UART_SetConfig+0x2d0>
 8007178:	2300      	movs	r3, #0
 800717a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800717e:	e022      	b.n	80071c6 <UART_SetConfig+0x2fe>
 8007180:	2302      	movs	r3, #2
 8007182:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007186:	e01e      	b.n	80071c6 <UART_SetConfig+0x2fe>
 8007188:	2304      	movs	r3, #4
 800718a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800718e:	e01a      	b.n	80071c6 <UART_SetConfig+0x2fe>
 8007190:	2308      	movs	r3, #8
 8007192:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007196:	e016      	b.n	80071c6 <UART_SetConfig+0x2fe>
 8007198:	2310      	movs	r3, #16
 800719a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800719e:	e012      	b.n	80071c6 <UART_SetConfig+0x2fe>
 80071a0:	cfff69f3 	.word	0xcfff69f3
 80071a4:	40008000 	.word	0x40008000
 80071a8:	40013800 	.word	0x40013800
 80071ac:	40021000 	.word	0x40021000
 80071b0:	40004400 	.word	0x40004400
 80071b4:	40004800 	.word	0x40004800
 80071b8:	40004c00 	.word	0x40004c00
 80071bc:	40005000 	.word	0x40005000
 80071c0:	2310      	movs	r3, #16
 80071c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4aae      	ldr	r2, [pc, #696]	@ (8007484 <UART_SetConfig+0x5bc>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	f040 8097 	bne.w	8007300 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80071d2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80071d6:	2b08      	cmp	r3, #8
 80071d8:	d823      	bhi.n	8007222 <UART_SetConfig+0x35a>
 80071da:	a201      	add	r2, pc, #4	@ (adr r2, 80071e0 <UART_SetConfig+0x318>)
 80071dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e0:	08007205 	.word	0x08007205
 80071e4:	08007223 	.word	0x08007223
 80071e8:	0800720d 	.word	0x0800720d
 80071ec:	08007223 	.word	0x08007223
 80071f0:	08007213 	.word	0x08007213
 80071f4:	08007223 	.word	0x08007223
 80071f8:	08007223 	.word	0x08007223
 80071fc:	08007223 	.word	0x08007223
 8007200:	0800721b 	.word	0x0800721b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007204:	f7fc fac6 	bl	8003794 <HAL_RCC_GetPCLK1Freq>
 8007208:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800720a:	e010      	b.n	800722e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800720c:	4b9e      	ldr	r3, [pc, #632]	@ (8007488 <UART_SetConfig+0x5c0>)
 800720e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007210:	e00d      	b.n	800722e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007212:	f7fc fa51 	bl	80036b8 <HAL_RCC_GetSysClockFreq>
 8007216:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007218:	e009      	b.n	800722e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800721a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800721e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007220:	e005      	b.n	800722e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007222:	2300      	movs	r3, #0
 8007224:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800722c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800722e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007230:	2b00      	cmp	r3, #0
 8007232:	f000 8130 	beq.w	8007496 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800723a:	4a94      	ldr	r2, [pc, #592]	@ (800748c <UART_SetConfig+0x5c4>)
 800723c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007240:	461a      	mov	r2, r3
 8007242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007244:	fbb3 f3f2 	udiv	r3, r3, r2
 8007248:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	685a      	ldr	r2, [r3, #4]
 800724e:	4613      	mov	r3, r2
 8007250:	005b      	lsls	r3, r3, #1
 8007252:	4413      	add	r3, r2
 8007254:	69ba      	ldr	r2, [r7, #24]
 8007256:	429a      	cmp	r2, r3
 8007258:	d305      	bcc.n	8007266 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007260:	69ba      	ldr	r2, [r7, #24]
 8007262:	429a      	cmp	r2, r3
 8007264:	d903      	bls.n	800726e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800726c:	e113      	b.n	8007496 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800726e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007270:	2200      	movs	r2, #0
 8007272:	60bb      	str	r3, [r7, #8]
 8007274:	60fa      	str	r2, [r7, #12]
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800727a:	4a84      	ldr	r2, [pc, #528]	@ (800748c <UART_SetConfig+0x5c4>)
 800727c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007280:	b29b      	uxth	r3, r3
 8007282:	2200      	movs	r2, #0
 8007284:	603b      	str	r3, [r7, #0]
 8007286:	607a      	str	r2, [r7, #4]
 8007288:	e9d7 2300 	ldrd	r2, r3, [r7]
 800728c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007290:	f7f9 f82e 	bl	80002f0 <__aeabi_uldivmod>
 8007294:	4602      	mov	r2, r0
 8007296:	460b      	mov	r3, r1
 8007298:	4610      	mov	r0, r2
 800729a:	4619      	mov	r1, r3
 800729c:	f04f 0200 	mov.w	r2, #0
 80072a0:	f04f 0300 	mov.w	r3, #0
 80072a4:	020b      	lsls	r3, r1, #8
 80072a6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80072aa:	0202      	lsls	r2, r0, #8
 80072ac:	6979      	ldr	r1, [r7, #20]
 80072ae:	6849      	ldr	r1, [r1, #4]
 80072b0:	0849      	lsrs	r1, r1, #1
 80072b2:	2000      	movs	r0, #0
 80072b4:	460c      	mov	r4, r1
 80072b6:	4605      	mov	r5, r0
 80072b8:	eb12 0804 	adds.w	r8, r2, r4
 80072bc:	eb43 0905 	adc.w	r9, r3, r5
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	2200      	movs	r2, #0
 80072c6:	469a      	mov	sl, r3
 80072c8:	4693      	mov	fp, r2
 80072ca:	4652      	mov	r2, sl
 80072cc:	465b      	mov	r3, fp
 80072ce:	4640      	mov	r0, r8
 80072d0:	4649      	mov	r1, r9
 80072d2:	f7f9 f80d 	bl	80002f0 <__aeabi_uldivmod>
 80072d6:	4602      	mov	r2, r0
 80072d8:	460b      	mov	r3, r1
 80072da:	4613      	mov	r3, r2
 80072dc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80072de:	6a3b      	ldr	r3, [r7, #32]
 80072e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80072e4:	d308      	bcc.n	80072f8 <UART_SetConfig+0x430>
 80072e6:	6a3b      	ldr	r3, [r7, #32]
 80072e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80072ec:	d204      	bcs.n	80072f8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	6a3a      	ldr	r2, [r7, #32]
 80072f4:	60da      	str	r2, [r3, #12]
 80072f6:	e0ce      	b.n	8007496 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80072f8:	2301      	movs	r3, #1
 80072fa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80072fe:	e0ca      	b.n	8007496 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	69db      	ldr	r3, [r3, #28]
 8007304:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007308:	d166      	bne.n	80073d8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800730a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800730e:	2b08      	cmp	r3, #8
 8007310:	d827      	bhi.n	8007362 <UART_SetConfig+0x49a>
 8007312:	a201      	add	r2, pc, #4	@ (adr r2, 8007318 <UART_SetConfig+0x450>)
 8007314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007318:	0800733d 	.word	0x0800733d
 800731c:	08007345 	.word	0x08007345
 8007320:	0800734d 	.word	0x0800734d
 8007324:	08007363 	.word	0x08007363
 8007328:	08007353 	.word	0x08007353
 800732c:	08007363 	.word	0x08007363
 8007330:	08007363 	.word	0x08007363
 8007334:	08007363 	.word	0x08007363
 8007338:	0800735b 	.word	0x0800735b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800733c:	f7fc fa2a 	bl	8003794 <HAL_RCC_GetPCLK1Freq>
 8007340:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007342:	e014      	b.n	800736e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007344:	f7fc fa3c 	bl	80037c0 <HAL_RCC_GetPCLK2Freq>
 8007348:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800734a:	e010      	b.n	800736e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800734c:	4b4e      	ldr	r3, [pc, #312]	@ (8007488 <UART_SetConfig+0x5c0>)
 800734e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007350:	e00d      	b.n	800736e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007352:	f7fc f9b1 	bl	80036b8 <HAL_RCC_GetSysClockFreq>
 8007356:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007358:	e009      	b.n	800736e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800735a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800735e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007360:	e005      	b.n	800736e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007362:	2300      	movs	r3, #0
 8007364:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800736c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800736e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007370:	2b00      	cmp	r3, #0
 8007372:	f000 8090 	beq.w	8007496 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800737a:	4a44      	ldr	r2, [pc, #272]	@ (800748c <UART_SetConfig+0x5c4>)
 800737c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007380:	461a      	mov	r2, r3
 8007382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007384:	fbb3 f3f2 	udiv	r3, r3, r2
 8007388:	005a      	lsls	r2, r3, #1
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	085b      	lsrs	r3, r3, #1
 8007390:	441a      	add	r2, r3
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	fbb2 f3f3 	udiv	r3, r2, r3
 800739a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800739c:	6a3b      	ldr	r3, [r7, #32]
 800739e:	2b0f      	cmp	r3, #15
 80073a0:	d916      	bls.n	80073d0 <UART_SetConfig+0x508>
 80073a2:	6a3b      	ldr	r3, [r7, #32]
 80073a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073a8:	d212      	bcs.n	80073d0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80073aa:	6a3b      	ldr	r3, [r7, #32]
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	f023 030f 	bic.w	r3, r3, #15
 80073b2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80073b4:	6a3b      	ldr	r3, [r7, #32]
 80073b6:	085b      	lsrs	r3, r3, #1
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	f003 0307 	and.w	r3, r3, #7
 80073be:	b29a      	uxth	r2, r3
 80073c0:	8bfb      	ldrh	r3, [r7, #30]
 80073c2:	4313      	orrs	r3, r2
 80073c4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	8bfa      	ldrh	r2, [r7, #30]
 80073cc:	60da      	str	r2, [r3, #12]
 80073ce:	e062      	b.n	8007496 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80073d6:	e05e      	b.n	8007496 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80073d8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80073dc:	2b08      	cmp	r3, #8
 80073de:	d828      	bhi.n	8007432 <UART_SetConfig+0x56a>
 80073e0:	a201      	add	r2, pc, #4	@ (adr r2, 80073e8 <UART_SetConfig+0x520>)
 80073e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e6:	bf00      	nop
 80073e8:	0800740d 	.word	0x0800740d
 80073ec:	08007415 	.word	0x08007415
 80073f0:	0800741d 	.word	0x0800741d
 80073f4:	08007433 	.word	0x08007433
 80073f8:	08007423 	.word	0x08007423
 80073fc:	08007433 	.word	0x08007433
 8007400:	08007433 	.word	0x08007433
 8007404:	08007433 	.word	0x08007433
 8007408:	0800742b 	.word	0x0800742b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800740c:	f7fc f9c2 	bl	8003794 <HAL_RCC_GetPCLK1Freq>
 8007410:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007412:	e014      	b.n	800743e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007414:	f7fc f9d4 	bl	80037c0 <HAL_RCC_GetPCLK2Freq>
 8007418:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800741a:	e010      	b.n	800743e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800741c:	4b1a      	ldr	r3, [pc, #104]	@ (8007488 <UART_SetConfig+0x5c0>)
 800741e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007420:	e00d      	b.n	800743e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007422:	f7fc f949 	bl	80036b8 <HAL_RCC_GetSysClockFreq>
 8007426:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007428:	e009      	b.n	800743e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800742a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800742e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007430:	e005      	b.n	800743e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007432:	2300      	movs	r3, #0
 8007434:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007436:	2301      	movs	r3, #1
 8007438:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800743c:	bf00      	nop
    }

    if (pclk != 0U)
 800743e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007440:	2b00      	cmp	r3, #0
 8007442:	d028      	beq.n	8007496 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007448:	4a10      	ldr	r2, [pc, #64]	@ (800748c <UART_SetConfig+0x5c4>)
 800744a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800744e:	461a      	mov	r2, r3
 8007450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007452:	fbb3 f2f2 	udiv	r2, r3, r2
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	085b      	lsrs	r3, r3, #1
 800745c:	441a      	add	r2, r3
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	fbb2 f3f3 	udiv	r3, r2, r3
 8007466:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007468:	6a3b      	ldr	r3, [r7, #32]
 800746a:	2b0f      	cmp	r3, #15
 800746c:	d910      	bls.n	8007490 <UART_SetConfig+0x5c8>
 800746e:	6a3b      	ldr	r3, [r7, #32]
 8007470:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007474:	d20c      	bcs.n	8007490 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007476:	6a3b      	ldr	r3, [r7, #32]
 8007478:	b29a      	uxth	r2, r3
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	60da      	str	r2, [r3, #12]
 8007480:	e009      	b.n	8007496 <UART_SetConfig+0x5ce>
 8007482:	bf00      	nop
 8007484:	40008000 	.word	0x40008000
 8007488:	00f42400 	.word	0x00f42400
 800748c:	080097a4 	.word	0x080097a4
      }
      else
      {
        ret = HAL_ERROR;
 8007490:	2301      	movs	r3, #1
 8007492:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	2201      	movs	r2, #1
 800749a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	2201      	movs	r2, #1
 80074a2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	2200      	movs	r2, #0
 80074aa:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	2200      	movs	r2, #0
 80074b0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80074b2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3730      	adds	r7, #48	@ 0x30
 80074ba:	46bd      	mov	sp, r7
 80074bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080074c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074cc:	f003 0308 	and.w	r3, r3, #8
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d00a      	beq.n	80074ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	430a      	orrs	r2, r1
 80074e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074ee:	f003 0301 	and.w	r3, r3, #1
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00a      	beq.n	800750c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	430a      	orrs	r2, r1
 800750a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007510:	f003 0302 	and.w	r3, r3, #2
 8007514:	2b00      	cmp	r3, #0
 8007516:	d00a      	beq.n	800752e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	430a      	orrs	r2, r1
 800752c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007532:	f003 0304 	and.w	r3, r3, #4
 8007536:	2b00      	cmp	r3, #0
 8007538:	d00a      	beq.n	8007550 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	430a      	orrs	r2, r1
 800754e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007554:	f003 0310 	and.w	r3, r3, #16
 8007558:	2b00      	cmp	r3, #0
 800755a:	d00a      	beq.n	8007572 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	430a      	orrs	r2, r1
 8007570:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007576:	f003 0320 	and.w	r3, r3, #32
 800757a:	2b00      	cmp	r3, #0
 800757c:	d00a      	beq.n	8007594 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	430a      	orrs	r2, r1
 8007592:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007598:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800759c:	2b00      	cmp	r3, #0
 800759e:	d01a      	beq.n	80075d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	430a      	orrs	r2, r1
 80075b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80075be:	d10a      	bne.n	80075d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	430a      	orrs	r2, r1
 80075d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d00a      	beq.n	80075f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	430a      	orrs	r2, r1
 80075f6:	605a      	str	r2, [r3, #4]
  }
}
 80075f8:	bf00      	nop
 80075fa:	370c      	adds	r7, #12
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr

08007604 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b098      	sub	sp, #96	@ 0x60
 8007608:	af02      	add	r7, sp, #8
 800760a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007614:	f7fa ff84 	bl	8002520 <HAL_GetTick>
 8007618:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f003 0308 	and.w	r3, r3, #8
 8007624:	2b08      	cmp	r3, #8
 8007626:	d12f      	bne.n	8007688 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007628:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800762c:	9300      	str	r3, [sp, #0]
 800762e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007630:	2200      	movs	r2, #0
 8007632:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 f88e 	bl	8007758 <UART_WaitOnFlagUntilTimeout>
 800763c:	4603      	mov	r3, r0
 800763e:	2b00      	cmp	r3, #0
 8007640:	d022      	beq.n	8007688 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800764a:	e853 3f00 	ldrex	r3, [r3]
 800764e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007650:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007652:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007656:	653b      	str	r3, [r7, #80]	@ 0x50
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	461a      	mov	r2, r3
 800765e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007660:	647b      	str	r3, [r7, #68]	@ 0x44
 8007662:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007664:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007666:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007668:	e841 2300 	strex	r3, r2, [r1]
 800766c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800766e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007670:	2b00      	cmp	r3, #0
 8007672:	d1e6      	bne.n	8007642 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2220      	movs	r2, #32
 8007678:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007684:	2303      	movs	r3, #3
 8007686:	e063      	b.n	8007750 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f003 0304 	and.w	r3, r3, #4
 8007692:	2b04      	cmp	r3, #4
 8007694:	d149      	bne.n	800772a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007696:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800769a:	9300      	str	r3, [sp, #0]
 800769c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800769e:	2200      	movs	r2, #0
 80076a0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 f857 	bl	8007758 <UART_WaitOnFlagUntilTimeout>
 80076aa:	4603      	mov	r3, r0
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d03c      	beq.n	800772a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b8:	e853 3f00 	ldrex	r3, [r3]
 80076bc:	623b      	str	r3, [r7, #32]
   return(result);
 80076be:	6a3b      	ldr	r3, [r7, #32]
 80076c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80076c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	461a      	mov	r2, r3
 80076cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80076d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80076d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076d6:	e841 2300 	strex	r3, r2, [r1]
 80076da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80076dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d1e6      	bne.n	80076b0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	3308      	adds	r3, #8
 80076e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	e853 3f00 	ldrex	r3, [r3]
 80076f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f023 0301 	bic.w	r3, r3, #1
 80076f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	3308      	adds	r3, #8
 8007700:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007702:	61fa      	str	r2, [r7, #28]
 8007704:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007706:	69b9      	ldr	r1, [r7, #24]
 8007708:	69fa      	ldr	r2, [r7, #28]
 800770a:	e841 2300 	strex	r3, r2, [r1]
 800770e:	617b      	str	r3, [r7, #20]
   return(result);
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d1e5      	bne.n	80076e2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2220      	movs	r2, #32
 800771a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007726:	2303      	movs	r3, #3
 8007728:	e012      	b.n	8007750 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2220      	movs	r2, #32
 800772e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2220      	movs	r2, #32
 8007736:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800774e:	2300      	movs	r3, #0
}
 8007750:	4618      	mov	r0, r3
 8007752:	3758      	adds	r7, #88	@ 0x58
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	603b      	str	r3, [r7, #0]
 8007764:	4613      	mov	r3, r2
 8007766:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007768:	e04f      	b.n	800780a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800776a:	69bb      	ldr	r3, [r7, #24]
 800776c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007770:	d04b      	beq.n	800780a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007772:	f7fa fed5 	bl	8002520 <HAL_GetTick>
 8007776:	4602      	mov	r2, r0
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	1ad3      	subs	r3, r2, r3
 800777c:	69ba      	ldr	r2, [r7, #24]
 800777e:	429a      	cmp	r2, r3
 8007780:	d302      	bcc.n	8007788 <UART_WaitOnFlagUntilTimeout+0x30>
 8007782:	69bb      	ldr	r3, [r7, #24]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d101      	bne.n	800778c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007788:	2303      	movs	r3, #3
 800778a:	e04e      	b.n	800782a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f003 0304 	and.w	r3, r3, #4
 8007796:	2b00      	cmp	r3, #0
 8007798:	d037      	beq.n	800780a <UART_WaitOnFlagUntilTimeout+0xb2>
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	2b80      	cmp	r3, #128	@ 0x80
 800779e:	d034      	beq.n	800780a <UART_WaitOnFlagUntilTimeout+0xb2>
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	2b40      	cmp	r3, #64	@ 0x40
 80077a4:	d031      	beq.n	800780a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	69db      	ldr	r3, [r3, #28]
 80077ac:	f003 0308 	and.w	r3, r3, #8
 80077b0:	2b08      	cmp	r3, #8
 80077b2:	d110      	bne.n	80077d6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2208      	movs	r2, #8
 80077ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80077bc:	68f8      	ldr	r0, [r7, #12]
 80077be:	f000 f838 	bl	8007832 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2208      	movs	r2, #8
 80077c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2200      	movs	r2, #0
 80077ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	e029      	b.n	800782a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	69db      	ldr	r3, [r3, #28]
 80077dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80077e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077e4:	d111      	bne.n	800780a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80077ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80077f0:	68f8      	ldr	r0, [r7, #12]
 80077f2:	f000 f81e 	bl	8007832 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2220      	movs	r2, #32
 80077fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2200      	movs	r2, #0
 8007802:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007806:	2303      	movs	r3, #3
 8007808:	e00f      	b.n	800782a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	69da      	ldr	r2, [r3, #28]
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	4013      	ands	r3, r2
 8007814:	68ba      	ldr	r2, [r7, #8]
 8007816:	429a      	cmp	r2, r3
 8007818:	bf0c      	ite	eq
 800781a:	2301      	moveq	r3, #1
 800781c:	2300      	movne	r3, #0
 800781e:	b2db      	uxtb	r3, r3
 8007820:	461a      	mov	r2, r3
 8007822:	79fb      	ldrb	r3, [r7, #7]
 8007824:	429a      	cmp	r2, r3
 8007826:	d0a0      	beq.n	800776a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007828:	2300      	movs	r3, #0
}
 800782a:	4618      	mov	r0, r3
 800782c:	3710      	adds	r7, #16
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007832:	b480      	push	{r7}
 8007834:	b095      	sub	sp, #84	@ 0x54
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007842:	e853 3f00 	ldrex	r3, [r3]
 8007846:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800784a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800784e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	461a      	mov	r2, r3
 8007856:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007858:	643b      	str	r3, [r7, #64]	@ 0x40
 800785a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800785e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007860:	e841 2300 	strex	r3, r2, [r1]
 8007864:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007868:	2b00      	cmp	r3, #0
 800786a:	d1e6      	bne.n	800783a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	3308      	adds	r3, #8
 8007872:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007874:	6a3b      	ldr	r3, [r7, #32]
 8007876:	e853 3f00 	ldrex	r3, [r3]
 800787a:	61fb      	str	r3, [r7, #28]
   return(result);
 800787c:	69fb      	ldr	r3, [r7, #28]
 800787e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007882:	f023 0301 	bic.w	r3, r3, #1
 8007886:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	3308      	adds	r3, #8
 800788e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007890:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007892:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007894:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007896:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007898:	e841 2300 	strex	r3, r2, [r1]
 800789c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800789e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d1e3      	bne.n	800786c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d118      	bne.n	80078de <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	e853 3f00 	ldrex	r3, [r3]
 80078b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	f023 0310 	bic.w	r3, r3, #16
 80078c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	461a      	mov	r2, r3
 80078c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078ca:	61bb      	str	r3, [r7, #24]
 80078cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ce:	6979      	ldr	r1, [r7, #20]
 80078d0:	69ba      	ldr	r2, [r7, #24]
 80078d2:	e841 2300 	strex	r3, r2, [r1]
 80078d6:	613b      	str	r3, [r7, #16]
   return(result);
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d1e6      	bne.n	80078ac <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2220      	movs	r2, #32
 80078e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80078f2:	bf00      	nop
 80078f4:	3754      	adds	r7, #84	@ 0x54
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr

080078fe <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80078fe:	b580      	push	{r7, lr}
 8007900:	b084      	sub	sp, #16
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800790a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2200      	movs	r2, #0
 8007910:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2200      	movs	r2, #0
 8007918:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800791c:	68f8      	ldr	r0, [r7, #12]
 800791e:	f7ff fabd 	bl	8006e9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007922:	bf00      	nop
 8007924:	3710      	adds	r7, #16
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}

0800792a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800792a:	b580      	push	{r7, lr}
 800792c:	b088      	sub	sp, #32
 800792e:	af00      	add	r7, sp, #0
 8007930:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	e853 3f00 	ldrex	r3, [r3]
 800793e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007946:	61fb      	str	r3, [r7, #28]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	461a      	mov	r2, r3
 800794e:	69fb      	ldr	r3, [r7, #28]
 8007950:	61bb      	str	r3, [r7, #24]
 8007952:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007954:	6979      	ldr	r1, [r7, #20]
 8007956:	69ba      	ldr	r2, [r7, #24]
 8007958:	e841 2300 	strex	r3, r2, [r1]
 800795c:	613b      	str	r3, [r7, #16]
   return(result);
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d1e6      	bne.n	8007932 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2220      	movs	r2, #32
 8007968:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2200      	movs	r2, #0
 8007970:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f7ff fa88 	bl	8006e88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007978:	bf00      	nop
 800797a:	3720      	adds	r7, #32
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007980:	b480      	push	{r7}
 8007982:	b083      	sub	sp, #12
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007988:	bf00      	nop
 800798a:	370c      	adds	r7, #12
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr

08007994 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007994:	b480      	push	{r7}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800799c:	bf00      	nop
 800799e:	370c      	adds	r7, #12
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80079b0:	bf00      	nop
 80079b2:	370c      	adds	r7, #12
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80079bc:	b480      	push	{r7}
 80079be:	b085      	sub	sp, #20
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d101      	bne.n	80079d2 <HAL_UARTEx_DisableFifoMode+0x16>
 80079ce:	2302      	movs	r3, #2
 80079d0:	e027      	b.n	8007a22 <HAL_UARTEx_DisableFifoMode+0x66>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2201      	movs	r2, #1
 80079d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2224      	movs	r2, #36	@ 0x24
 80079de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	681a      	ldr	r2, [r3, #0]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f022 0201 	bic.w	r2, r2, #1
 80079f8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007a00:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	68fa      	ldr	r2, [r7, #12]
 8007a0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2220      	movs	r2, #32
 8007a14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a20:	2300      	movs	r3, #0
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3714      	adds	r7, #20
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr

08007a2e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a2e:	b580      	push	{r7, lr}
 8007a30:	b084      	sub	sp, #16
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	6078      	str	r0, [r7, #4]
 8007a36:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	d101      	bne.n	8007a46 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007a42:	2302      	movs	r3, #2
 8007a44:	e02d      	b.n	8007aa2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2224      	movs	r2, #36	@ 0x24
 8007a52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f022 0201 	bic.w	r2, r2, #1
 8007a6c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	683a      	ldr	r2, [r7, #0]
 8007a7e:	430a      	orrs	r2, r1
 8007a80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 f850 	bl	8007b28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2220      	movs	r2, #32
 8007a94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007aa0:	2300      	movs	r3, #0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3710      	adds	r7, #16
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}

08007aaa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b084      	sub	sp, #16
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
 8007ab2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007aba:	2b01      	cmp	r3, #1
 8007abc:	d101      	bne.n	8007ac2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007abe:	2302      	movs	r3, #2
 8007ac0:	e02d      	b.n	8007b1e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2224      	movs	r2, #36	@ 0x24
 8007ace:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f022 0201 	bic.w	r2, r2, #1
 8007ae8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	683a      	ldr	r2, [r7, #0]
 8007afa:	430a      	orrs	r2, r1
 8007afc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 f812 	bl	8007b28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	68fa      	ldr	r2, [r7, #12]
 8007b0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2220      	movs	r2, #32
 8007b10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007b1c:	2300      	movs	r3, #0
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3710      	adds	r7, #16
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
	...

08007b28 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b085      	sub	sp, #20
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d108      	bne.n	8007b4a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2201      	movs	r2, #1
 8007b44:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007b48:	e031      	b.n	8007bae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007b4a:	2308      	movs	r3, #8
 8007b4c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007b4e:	2308      	movs	r3, #8
 8007b50:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	0e5b      	lsrs	r3, r3, #25
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	f003 0307 	and.w	r3, r3, #7
 8007b60:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	0f5b      	lsrs	r3, r3, #29
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	f003 0307 	and.w	r3, r3, #7
 8007b70:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b72:	7bbb      	ldrb	r3, [r7, #14]
 8007b74:	7b3a      	ldrb	r2, [r7, #12]
 8007b76:	4911      	ldr	r1, [pc, #68]	@ (8007bbc <UARTEx_SetNbDataToProcess+0x94>)
 8007b78:	5c8a      	ldrb	r2, [r1, r2]
 8007b7a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007b7e:	7b3a      	ldrb	r2, [r7, #12]
 8007b80:	490f      	ldr	r1, [pc, #60]	@ (8007bc0 <UARTEx_SetNbDataToProcess+0x98>)
 8007b82:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b84:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b88:	b29a      	uxth	r2, r3
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b90:	7bfb      	ldrb	r3, [r7, #15]
 8007b92:	7b7a      	ldrb	r2, [r7, #13]
 8007b94:	4909      	ldr	r1, [pc, #36]	@ (8007bbc <UARTEx_SetNbDataToProcess+0x94>)
 8007b96:	5c8a      	ldrb	r2, [r1, r2]
 8007b98:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007b9c:	7b7a      	ldrb	r2, [r7, #13]
 8007b9e:	4908      	ldr	r1, [pc, #32]	@ (8007bc0 <UARTEx_SetNbDataToProcess+0x98>)
 8007ba0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ba2:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ba6:	b29a      	uxth	r2, r3
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007bae:	bf00      	nop
 8007bb0:	3714      	adds	r7, #20
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb8:	4770      	bx	lr
 8007bba:	bf00      	nop
 8007bbc:	080097bc 	.word	0x080097bc
 8007bc0:	080097c4 	.word	0x080097c4

08007bc4 <malloc>:
 8007bc4:	4b02      	ldr	r3, [pc, #8]	@ (8007bd0 <malloc+0xc>)
 8007bc6:	4601      	mov	r1, r0
 8007bc8:	6818      	ldr	r0, [r3, #0]
 8007bca:	f000 b82d 	b.w	8007c28 <_malloc_r>
 8007bce:	bf00      	nop
 8007bd0:	2000001c 	.word	0x2000001c

08007bd4 <free>:
 8007bd4:	4b02      	ldr	r3, [pc, #8]	@ (8007be0 <free+0xc>)
 8007bd6:	4601      	mov	r1, r0
 8007bd8:	6818      	ldr	r0, [r3, #0]
 8007bda:	f000 bb95 	b.w	8008308 <_free_r>
 8007bde:	bf00      	nop
 8007be0:	2000001c 	.word	0x2000001c

08007be4 <sbrk_aligned>:
 8007be4:	b570      	push	{r4, r5, r6, lr}
 8007be6:	4e0f      	ldr	r6, [pc, #60]	@ (8007c24 <sbrk_aligned+0x40>)
 8007be8:	460c      	mov	r4, r1
 8007bea:	6831      	ldr	r1, [r6, #0]
 8007bec:	4605      	mov	r5, r0
 8007bee:	b911      	cbnz	r1, 8007bf6 <sbrk_aligned+0x12>
 8007bf0:	f000 fb3a 	bl	8008268 <_sbrk_r>
 8007bf4:	6030      	str	r0, [r6, #0]
 8007bf6:	4621      	mov	r1, r4
 8007bf8:	4628      	mov	r0, r5
 8007bfa:	f000 fb35 	bl	8008268 <_sbrk_r>
 8007bfe:	1c43      	adds	r3, r0, #1
 8007c00:	d103      	bne.n	8007c0a <sbrk_aligned+0x26>
 8007c02:	f04f 34ff 	mov.w	r4, #4294967295
 8007c06:	4620      	mov	r0, r4
 8007c08:	bd70      	pop	{r4, r5, r6, pc}
 8007c0a:	1cc4      	adds	r4, r0, #3
 8007c0c:	f024 0403 	bic.w	r4, r4, #3
 8007c10:	42a0      	cmp	r0, r4
 8007c12:	d0f8      	beq.n	8007c06 <sbrk_aligned+0x22>
 8007c14:	1a21      	subs	r1, r4, r0
 8007c16:	4628      	mov	r0, r5
 8007c18:	f000 fb26 	bl	8008268 <_sbrk_r>
 8007c1c:	3001      	adds	r0, #1
 8007c1e:	d1f2      	bne.n	8007c06 <sbrk_aligned+0x22>
 8007c20:	e7ef      	b.n	8007c02 <sbrk_aligned+0x1e>
 8007c22:	bf00      	nop
 8007c24:	20000370 	.word	0x20000370

08007c28 <_malloc_r>:
 8007c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c2c:	1ccd      	adds	r5, r1, #3
 8007c2e:	f025 0503 	bic.w	r5, r5, #3
 8007c32:	3508      	adds	r5, #8
 8007c34:	2d0c      	cmp	r5, #12
 8007c36:	bf38      	it	cc
 8007c38:	250c      	movcc	r5, #12
 8007c3a:	2d00      	cmp	r5, #0
 8007c3c:	4606      	mov	r6, r0
 8007c3e:	db01      	blt.n	8007c44 <_malloc_r+0x1c>
 8007c40:	42a9      	cmp	r1, r5
 8007c42:	d904      	bls.n	8007c4e <_malloc_r+0x26>
 8007c44:	230c      	movs	r3, #12
 8007c46:	6033      	str	r3, [r6, #0]
 8007c48:	2000      	movs	r0, #0
 8007c4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007d24 <_malloc_r+0xfc>
 8007c52:	f000 f869 	bl	8007d28 <__malloc_lock>
 8007c56:	f8d8 3000 	ldr.w	r3, [r8]
 8007c5a:	461c      	mov	r4, r3
 8007c5c:	bb44      	cbnz	r4, 8007cb0 <_malloc_r+0x88>
 8007c5e:	4629      	mov	r1, r5
 8007c60:	4630      	mov	r0, r6
 8007c62:	f7ff ffbf 	bl	8007be4 <sbrk_aligned>
 8007c66:	1c43      	adds	r3, r0, #1
 8007c68:	4604      	mov	r4, r0
 8007c6a:	d158      	bne.n	8007d1e <_malloc_r+0xf6>
 8007c6c:	f8d8 4000 	ldr.w	r4, [r8]
 8007c70:	4627      	mov	r7, r4
 8007c72:	2f00      	cmp	r7, #0
 8007c74:	d143      	bne.n	8007cfe <_malloc_r+0xd6>
 8007c76:	2c00      	cmp	r4, #0
 8007c78:	d04b      	beq.n	8007d12 <_malloc_r+0xea>
 8007c7a:	6823      	ldr	r3, [r4, #0]
 8007c7c:	4639      	mov	r1, r7
 8007c7e:	4630      	mov	r0, r6
 8007c80:	eb04 0903 	add.w	r9, r4, r3
 8007c84:	f000 faf0 	bl	8008268 <_sbrk_r>
 8007c88:	4581      	cmp	r9, r0
 8007c8a:	d142      	bne.n	8007d12 <_malloc_r+0xea>
 8007c8c:	6821      	ldr	r1, [r4, #0]
 8007c8e:	1a6d      	subs	r5, r5, r1
 8007c90:	4629      	mov	r1, r5
 8007c92:	4630      	mov	r0, r6
 8007c94:	f7ff ffa6 	bl	8007be4 <sbrk_aligned>
 8007c98:	3001      	adds	r0, #1
 8007c9a:	d03a      	beq.n	8007d12 <_malloc_r+0xea>
 8007c9c:	6823      	ldr	r3, [r4, #0]
 8007c9e:	442b      	add	r3, r5
 8007ca0:	6023      	str	r3, [r4, #0]
 8007ca2:	f8d8 3000 	ldr.w	r3, [r8]
 8007ca6:	685a      	ldr	r2, [r3, #4]
 8007ca8:	bb62      	cbnz	r2, 8007d04 <_malloc_r+0xdc>
 8007caa:	f8c8 7000 	str.w	r7, [r8]
 8007cae:	e00f      	b.n	8007cd0 <_malloc_r+0xa8>
 8007cb0:	6822      	ldr	r2, [r4, #0]
 8007cb2:	1b52      	subs	r2, r2, r5
 8007cb4:	d420      	bmi.n	8007cf8 <_malloc_r+0xd0>
 8007cb6:	2a0b      	cmp	r2, #11
 8007cb8:	d917      	bls.n	8007cea <_malloc_r+0xc2>
 8007cba:	1961      	adds	r1, r4, r5
 8007cbc:	42a3      	cmp	r3, r4
 8007cbe:	6025      	str	r5, [r4, #0]
 8007cc0:	bf18      	it	ne
 8007cc2:	6059      	strne	r1, [r3, #4]
 8007cc4:	6863      	ldr	r3, [r4, #4]
 8007cc6:	bf08      	it	eq
 8007cc8:	f8c8 1000 	streq.w	r1, [r8]
 8007ccc:	5162      	str	r2, [r4, r5]
 8007cce:	604b      	str	r3, [r1, #4]
 8007cd0:	4630      	mov	r0, r6
 8007cd2:	f000 f82f 	bl	8007d34 <__malloc_unlock>
 8007cd6:	f104 000b 	add.w	r0, r4, #11
 8007cda:	1d23      	adds	r3, r4, #4
 8007cdc:	f020 0007 	bic.w	r0, r0, #7
 8007ce0:	1ac2      	subs	r2, r0, r3
 8007ce2:	bf1c      	itt	ne
 8007ce4:	1a1b      	subne	r3, r3, r0
 8007ce6:	50a3      	strne	r3, [r4, r2]
 8007ce8:	e7af      	b.n	8007c4a <_malloc_r+0x22>
 8007cea:	6862      	ldr	r2, [r4, #4]
 8007cec:	42a3      	cmp	r3, r4
 8007cee:	bf0c      	ite	eq
 8007cf0:	f8c8 2000 	streq.w	r2, [r8]
 8007cf4:	605a      	strne	r2, [r3, #4]
 8007cf6:	e7eb      	b.n	8007cd0 <_malloc_r+0xa8>
 8007cf8:	4623      	mov	r3, r4
 8007cfa:	6864      	ldr	r4, [r4, #4]
 8007cfc:	e7ae      	b.n	8007c5c <_malloc_r+0x34>
 8007cfe:	463c      	mov	r4, r7
 8007d00:	687f      	ldr	r7, [r7, #4]
 8007d02:	e7b6      	b.n	8007c72 <_malloc_r+0x4a>
 8007d04:	461a      	mov	r2, r3
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	42a3      	cmp	r3, r4
 8007d0a:	d1fb      	bne.n	8007d04 <_malloc_r+0xdc>
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	6053      	str	r3, [r2, #4]
 8007d10:	e7de      	b.n	8007cd0 <_malloc_r+0xa8>
 8007d12:	230c      	movs	r3, #12
 8007d14:	6033      	str	r3, [r6, #0]
 8007d16:	4630      	mov	r0, r6
 8007d18:	f000 f80c 	bl	8007d34 <__malloc_unlock>
 8007d1c:	e794      	b.n	8007c48 <_malloc_r+0x20>
 8007d1e:	6005      	str	r5, [r0, #0]
 8007d20:	e7d6      	b.n	8007cd0 <_malloc_r+0xa8>
 8007d22:	bf00      	nop
 8007d24:	20000374 	.word	0x20000374

08007d28 <__malloc_lock>:
 8007d28:	4801      	ldr	r0, [pc, #4]	@ (8007d30 <__malloc_lock+0x8>)
 8007d2a:	f000 baea 	b.w	8008302 <__retarget_lock_acquire_recursive>
 8007d2e:	bf00      	nop
 8007d30:	200004b8 	.word	0x200004b8

08007d34 <__malloc_unlock>:
 8007d34:	4801      	ldr	r0, [pc, #4]	@ (8007d3c <__malloc_unlock+0x8>)
 8007d36:	f000 bae5 	b.w	8008304 <__retarget_lock_release_recursive>
 8007d3a:	bf00      	nop
 8007d3c:	200004b8 	.word	0x200004b8

08007d40 <std>:
 8007d40:	2300      	movs	r3, #0
 8007d42:	b510      	push	{r4, lr}
 8007d44:	4604      	mov	r4, r0
 8007d46:	e9c0 3300 	strd	r3, r3, [r0]
 8007d4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d4e:	6083      	str	r3, [r0, #8]
 8007d50:	8181      	strh	r1, [r0, #12]
 8007d52:	6643      	str	r3, [r0, #100]	@ 0x64
 8007d54:	81c2      	strh	r2, [r0, #14]
 8007d56:	6183      	str	r3, [r0, #24]
 8007d58:	4619      	mov	r1, r3
 8007d5a:	2208      	movs	r2, #8
 8007d5c:	305c      	adds	r0, #92	@ 0x5c
 8007d5e:	f000 fa33 	bl	80081c8 <memset>
 8007d62:	4b0d      	ldr	r3, [pc, #52]	@ (8007d98 <std+0x58>)
 8007d64:	6263      	str	r3, [r4, #36]	@ 0x24
 8007d66:	4b0d      	ldr	r3, [pc, #52]	@ (8007d9c <std+0x5c>)
 8007d68:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8007da0 <std+0x60>)
 8007d6c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8007da4 <std+0x64>)
 8007d70:	6323      	str	r3, [r4, #48]	@ 0x30
 8007d72:	4b0d      	ldr	r3, [pc, #52]	@ (8007da8 <std+0x68>)
 8007d74:	6224      	str	r4, [r4, #32]
 8007d76:	429c      	cmp	r4, r3
 8007d78:	d006      	beq.n	8007d88 <std+0x48>
 8007d7a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007d7e:	4294      	cmp	r4, r2
 8007d80:	d002      	beq.n	8007d88 <std+0x48>
 8007d82:	33d0      	adds	r3, #208	@ 0xd0
 8007d84:	429c      	cmp	r4, r3
 8007d86:	d105      	bne.n	8007d94 <std+0x54>
 8007d88:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007d8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d90:	f000 bab6 	b.w	8008300 <__retarget_lock_init_recursive>
 8007d94:	bd10      	pop	{r4, pc}
 8007d96:	bf00      	nop
 8007d98:	08008015 	.word	0x08008015
 8007d9c:	0800803b 	.word	0x0800803b
 8007da0:	08008073 	.word	0x08008073
 8007da4:	08008097 	.word	0x08008097
 8007da8:	20000378 	.word	0x20000378

08007dac <stdio_exit_handler>:
 8007dac:	4a02      	ldr	r2, [pc, #8]	@ (8007db8 <stdio_exit_handler+0xc>)
 8007dae:	4903      	ldr	r1, [pc, #12]	@ (8007dbc <stdio_exit_handler+0x10>)
 8007db0:	4803      	ldr	r0, [pc, #12]	@ (8007dc0 <stdio_exit_handler+0x14>)
 8007db2:	f000 b869 	b.w	8007e88 <_fwalk_sglue>
 8007db6:	bf00      	nop
 8007db8:	20000010 	.word	0x20000010
 8007dbc:	080090a5 	.word	0x080090a5
 8007dc0:	20000020 	.word	0x20000020

08007dc4 <cleanup_stdio>:
 8007dc4:	6841      	ldr	r1, [r0, #4]
 8007dc6:	4b0c      	ldr	r3, [pc, #48]	@ (8007df8 <cleanup_stdio+0x34>)
 8007dc8:	4299      	cmp	r1, r3
 8007dca:	b510      	push	{r4, lr}
 8007dcc:	4604      	mov	r4, r0
 8007dce:	d001      	beq.n	8007dd4 <cleanup_stdio+0x10>
 8007dd0:	f001 f968 	bl	80090a4 <_fflush_r>
 8007dd4:	68a1      	ldr	r1, [r4, #8]
 8007dd6:	4b09      	ldr	r3, [pc, #36]	@ (8007dfc <cleanup_stdio+0x38>)
 8007dd8:	4299      	cmp	r1, r3
 8007dda:	d002      	beq.n	8007de2 <cleanup_stdio+0x1e>
 8007ddc:	4620      	mov	r0, r4
 8007dde:	f001 f961 	bl	80090a4 <_fflush_r>
 8007de2:	68e1      	ldr	r1, [r4, #12]
 8007de4:	4b06      	ldr	r3, [pc, #24]	@ (8007e00 <cleanup_stdio+0x3c>)
 8007de6:	4299      	cmp	r1, r3
 8007de8:	d004      	beq.n	8007df4 <cleanup_stdio+0x30>
 8007dea:	4620      	mov	r0, r4
 8007dec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007df0:	f001 b958 	b.w	80090a4 <_fflush_r>
 8007df4:	bd10      	pop	{r4, pc}
 8007df6:	bf00      	nop
 8007df8:	20000378 	.word	0x20000378
 8007dfc:	200003e0 	.word	0x200003e0
 8007e00:	20000448 	.word	0x20000448

08007e04 <global_stdio_init.part.0>:
 8007e04:	b510      	push	{r4, lr}
 8007e06:	4b0b      	ldr	r3, [pc, #44]	@ (8007e34 <global_stdio_init.part.0+0x30>)
 8007e08:	4c0b      	ldr	r4, [pc, #44]	@ (8007e38 <global_stdio_init.part.0+0x34>)
 8007e0a:	4a0c      	ldr	r2, [pc, #48]	@ (8007e3c <global_stdio_init.part.0+0x38>)
 8007e0c:	601a      	str	r2, [r3, #0]
 8007e0e:	4620      	mov	r0, r4
 8007e10:	2200      	movs	r2, #0
 8007e12:	2104      	movs	r1, #4
 8007e14:	f7ff ff94 	bl	8007d40 <std>
 8007e18:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	2109      	movs	r1, #9
 8007e20:	f7ff ff8e 	bl	8007d40 <std>
 8007e24:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007e28:	2202      	movs	r2, #2
 8007e2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e2e:	2112      	movs	r1, #18
 8007e30:	f7ff bf86 	b.w	8007d40 <std>
 8007e34:	200004b0 	.word	0x200004b0
 8007e38:	20000378 	.word	0x20000378
 8007e3c:	08007dad 	.word	0x08007dad

08007e40 <__sfp_lock_acquire>:
 8007e40:	4801      	ldr	r0, [pc, #4]	@ (8007e48 <__sfp_lock_acquire+0x8>)
 8007e42:	f000 ba5e 	b.w	8008302 <__retarget_lock_acquire_recursive>
 8007e46:	bf00      	nop
 8007e48:	200004b9 	.word	0x200004b9

08007e4c <__sfp_lock_release>:
 8007e4c:	4801      	ldr	r0, [pc, #4]	@ (8007e54 <__sfp_lock_release+0x8>)
 8007e4e:	f000 ba59 	b.w	8008304 <__retarget_lock_release_recursive>
 8007e52:	bf00      	nop
 8007e54:	200004b9 	.word	0x200004b9

08007e58 <__sinit>:
 8007e58:	b510      	push	{r4, lr}
 8007e5a:	4604      	mov	r4, r0
 8007e5c:	f7ff fff0 	bl	8007e40 <__sfp_lock_acquire>
 8007e60:	6a23      	ldr	r3, [r4, #32]
 8007e62:	b11b      	cbz	r3, 8007e6c <__sinit+0x14>
 8007e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e68:	f7ff bff0 	b.w	8007e4c <__sfp_lock_release>
 8007e6c:	4b04      	ldr	r3, [pc, #16]	@ (8007e80 <__sinit+0x28>)
 8007e6e:	6223      	str	r3, [r4, #32]
 8007e70:	4b04      	ldr	r3, [pc, #16]	@ (8007e84 <__sinit+0x2c>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d1f5      	bne.n	8007e64 <__sinit+0xc>
 8007e78:	f7ff ffc4 	bl	8007e04 <global_stdio_init.part.0>
 8007e7c:	e7f2      	b.n	8007e64 <__sinit+0xc>
 8007e7e:	bf00      	nop
 8007e80:	08007dc5 	.word	0x08007dc5
 8007e84:	200004b0 	.word	0x200004b0

08007e88 <_fwalk_sglue>:
 8007e88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e8c:	4607      	mov	r7, r0
 8007e8e:	4688      	mov	r8, r1
 8007e90:	4614      	mov	r4, r2
 8007e92:	2600      	movs	r6, #0
 8007e94:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e98:	f1b9 0901 	subs.w	r9, r9, #1
 8007e9c:	d505      	bpl.n	8007eaa <_fwalk_sglue+0x22>
 8007e9e:	6824      	ldr	r4, [r4, #0]
 8007ea0:	2c00      	cmp	r4, #0
 8007ea2:	d1f7      	bne.n	8007e94 <_fwalk_sglue+0xc>
 8007ea4:	4630      	mov	r0, r6
 8007ea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007eaa:	89ab      	ldrh	r3, [r5, #12]
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d907      	bls.n	8007ec0 <_fwalk_sglue+0x38>
 8007eb0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007eb4:	3301      	adds	r3, #1
 8007eb6:	d003      	beq.n	8007ec0 <_fwalk_sglue+0x38>
 8007eb8:	4629      	mov	r1, r5
 8007eba:	4638      	mov	r0, r7
 8007ebc:	47c0      	blx	r8
 8007ebe:	4306      	orrs	r6, r0
 8007ec0:	3568      	adds	r5, #104	@ 0x68
 8007ec2:	e7e9      	b.n	8007e98 <_fwalk_sglue+0x10>

08007ec4 <_puts_r>:
 8007ec4:	6a03      	ldr	r3, [r0, #32]
 8007ec6:	b570      	push	{r4, r5, r6, lr}
 8007ec8:	6884      	ldr	r4, [r0, #8]
 8007eca:	4605      	mov	r5, r0
 8007ecc:	460e      	mov	r6, r1
 8007ece:	b90b      	cbnz	r3, 8007ed4 <_puts_r+0x10>
 8007ed0:	f7ff ffc2 	bl	8007e58 <__sinit>
 8007ed4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ed6:	07db      	lsls	r3, r3, #31
 8007ed8:	d405      	bmi.n	8007ee6 <_puts_r+0x22>
 8007eda:	89a3      	ldrh	r3, [r4, #12]
 8007edc:	0598      	lsls	r0, r3, #22
 8007ede:	d402      	bmi.n	8007ee6 <_puts_r+0x22>
 8007ee0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ee2:	f000 fa0e 	bl	8008302 <__retarget_lock_acquire_recursive>
 8007ee6:	89a3      	ldrh	r3, [r4, #12]
 8007ee8:	0719      	lsls	r1, r3, #28
 8007eea:	d502      	bpl.n	8007ef2 <_puts_r+0x2e>
 8007eec:	6923      	ldr	r3, [r4, #16]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d135      	bne.n	8007f5e <_puts_r+0x9a>
 8007ef2:	4621      	mov	r1, r4
 8007ef4:	4628      	mov	r0, r5
 8007ef6:	f000 f911 	bl	800811c <__swsetup_r>
 8007efa:	b380      	cbz	r0, 8007f5e <_puts_r+0x9a>
 8007efc:	f04f 35ff 	mov.w	r5, #4294967295
 8007f00:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007f02:	07da      	lsls	r2, r3, #31
 8007f04:	d405      	bmi.n	8007f12 <_puts_r+0x4e>
 8007f06:	89a3      	ldrh	r3, [r4, #12]
 8007f08:	059b      	lsls	r3, r3, #22
 8007f0a:	d402      	bmi.n	8007f12 <_puts_r+0x4e>
 8007f0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f0e:	f000 f9f9 	bl	8008304 <__retarget_lock_release_recursive>
 8007f12:	4628      	mov	r0, r5
 8007f14:	bd70      	pop	{r4, r5, r6, pc}
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	da04      	bge.n	8007f24 <_puts_r+0x60>
 8007f1a:	69a2      	ldr	r2, [r4, #24]
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	dc17      	bgt.n	8007f50 <_puts_r+0x8c>
 8007f20:	290a      	cmp	r1, #10
 8007f22:	d015      	beq.n	8007f50 <_puts_r+0x8c>
 8007f24:	6823      	ldr	r3, [r4, #0]
 8007f26:	1c5a      	adds	r2, r3, #1
 8007f28:	6022      	str	r2, [r4, #0]
 8007f2a:	7019      	strb	r1, [r3, #0]
 8007f2c:	68a3      	ldr	r3, [r4, #8]
 8007f2e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007f32:	3b01      	subs	r3, #1
 8007f34:	60a3      	str	r3, [r4, #8]
 8007f36:	2900      	cmp	r1, #0
 8007f38:	d1ed      	bne.n	8007f16 <_puts_r+0x52>
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	da11      	bge.n	8007f62 <_puts_r+0x9e>
 8007f3e:	4622      	mov	r2, r4
 8007f40:	210a      	movs	r1, #10
 8007f42:	4628      	mov	r0, r5
 8007f44:	f000 f8ab 	bl	800809e <__swbuf_r>
 8007f48:	3001      	adds	r0, #1
 8007f4a:	d0d7      	beq.n	8007efc <_puts_r+0x38>
 8007f4c:	250a      	movs	r5, #10
 8007f4e:	e7d7      	b.n	8007f00 <_puts_r+0x3c>
 8007f50:	4622      	mov	r2, r4
 8007f52:	4628      	mov	r0, r5
 8007f54:	f000 f8a3 	bl	800809e <__swbuf_r>
 8007f58:	3001      	adds	r0, #1
 8007f5a:	d1e7      	bne.n	8007f2c <_puts_r+0x68>
 8007f5c:	e7ce      	b.n	8007efc <_puts_r+0x38>
 8007f5e:	3e01      	subs	r6, #1
 8007f60:	e7e4      	b.n	8007f2c <_puts_r+0x68>
 8007f62:	6823      	ldr	r3, [r4, #0]
 8007f64:	1c5a      	adds	r2, r3, #1
 8007f66:	6022      	str	r2, [r4, #0]
 8007f68:	220a      	movs	r2, #10
 8007f6a:	701a      	strb	r2, [r3, #0]
 8007f6c:	e7ee      	b.n	8007f4c <_puts_r+0x88>
	...

08007f70 <puts>:
 8007f70:	4b02      	ldr	r3, [pc, #8]	@ (8007f7c <puts+0xc>)
 8007f72:	4601      	mov	r1, r0
 8007f74:	6818      	ldr	r0, [r3, #0]
 8007f76:	f7ff bfa5 	b.w	8007ec4 <_puts_r>
 8007f7a:	bf00      	nop
 8007f7c:	2000001c 	.word	0x2000001c

08007f80 <siprintf>:
 8007f80:	b40e      	push	{r1, r2, r3}
 8007f82:	b500      	push	{lr}
 8007f84:	b09c      	sub	sp, #112	@ 0x70
 8007f86:	ab1d      	add	r3, sp, #116	@ 0x74
 8007f88:	9002      	str	r0, [sp, #8]
 8007f8a:	9006      	str	r0, [sp, #24]
 8007f8c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007f90:	4809      	ldr	r0, [pc, #36]	@ (8007fb8 <siprintf+0x38>)
 8007f92:	9107      	str	r1, [sp, #28]
 8007f94:	9104      	str	r1, [sp, #16]
 8007f96:	4909      	ldr	r1, [pc, #36]	@ (8007fbc <siprintf+0x3c>)
 8007f98:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f9c:	9105      	str	r1, [sp, #20]
 8007f9e:	6800      	ldr	r0, [r0, #0]
 8007fa0:	9301      	str	r3, [sp, #4]
 8007fa2:	a902      	add	r1, sp, #8
 8007fa4:	f000 fa56 	bl	8008454 <_svfiprintf_r>
 8007fa8:	9b02      	ldr	r3, [sp, #8]
 8007faa:	2200      	movs	r2, #0
 8007fac:	701a      	strb	r2, [r3, #0]
 8007fae:	b01c      	add	sp, #112	@ 0x70
 8007fb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fb4:	b003      	add	sp, #12
 8007fb6:	4770      	bx	lr
 8007fb8:	2000001c 	.word	0x2000001c
 8007fbc:	ffff0208 	.word	0xffff0208

08007fc0 <siscanf>:
 8007fc0:	b40e      	push	{r1, r2, r3}
 8007fc2:	b530      	push	{r4, r5, lr}
 8007fc4:	b09c      	sub	sp, #112	@ 0x70
 8007fc6:	ac1f      	add	r4, sp, #124	@ 0x7c
 8007fc8:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8007fcc:	f854 5b04 	ldr.w	r5, [r4], #4
 8007fd0:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007fd4:	9002      	str	r0, [sp, #8]
 8007fd6:	9006      	str	r0, [sp, #24]
 8007fd8:	f7f8 f92c 	bl	8000234 <strlen>
 8007fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800800c <siscanf+0x4c>)
 8007fde:	9003      	str	r0, [sp, #12]
 8007fe0:	9007      	str	r0, [sp, #28]
 8007fe2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007fe4:	480a      	ldr	r0, [pc, #40]	@ (8008010 <siscanf+0x50>)
 8007fe6:	9401      	str	r4, [sp, #4]
 8007fe8:	2300      	movs	r3, #0
 8007fea:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007fec:	9314      	str	r3, [sp, #80]	@ 0x50
 8007fee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007ff2:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007ff6:	462a      	mov	r2, r5
 8007ff8:	4623      	mov	r3, r4
 8007ffa:	a902      	add	r1, sp, #8
 8007ffc:	6800      	ldr	r0, [r0, #0]
 8007ffe:	f000 fb7d 	bl	80086fc <__ssvfiscanf_r>
 8008002:	b01c      	add	sp, #112	@ 0x70
 8008004:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008008:	b003      	add	sp, #12
 800800a:	4770      	bx	lr
 800800c:	08008037 	.word	0x08008037
 8008010:	2000001c 	.word	0x2000001c

08008014 <__sread>:
 8008014:	b510      	push	{r4, lr}
 8008016:	460c      	mov	r4, r1
 8008018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800801c:	f000 f912 	bl	8008244 <_read_r>
 8008020:	2800      	cmp	r0, #0
 8008022:	bfab      	itete	ge
 8008024:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008026:	89a3      	ldrhlt	r3, [r4, #12]
 8008028:	181b      	addge	r3, r3, r0
 800802a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800802e:	bfac      	ite	ge
 8008030:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008032:	81a3      	strhlt	r3, [r4, #12]
 8008034:	bd10      	pop	{r4, pc}

08008036 <__seofread>:
 8008036:	2000      	movs	r0, #0
 8008038:	4770      	bx	lr

0800803a <__swrite>:
 800803a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800803e:	461f      	mov	r7, r3
 8008040:	898b      	ldrh	r3, [r1, #12]
 8008042:	05db      	lsls	r3, r3, #23
 8008044:	4605      	mov	r5, r0
 8008046:	460c      	mov	r4, r1
 8008048:	4616      	mov	r6, r2
 800804a:	d505      	bpl.n	8008058 <__swrite+0x1e>
 800804c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008050:	2302      	movs	r3, #2
 8008052:	2200      	movs	r2, #0
 8008054:	f000 f8e4 	bl	8008220 <_lseek_r>
 8008058:	89a3      	ldrh	r3, [r4, #12]
 800805a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800805e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008062:	81a3      	strh	r3, [r4, #12]
 8008064:	4632      	mov	r2, r6
 8008066:	463b      	mov	r3, r7
 8008068:	4628      	mov	r0, r5
 800806a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800806e:	f000 b90b 	b.w	8008288 <_write_r>

08008072 <__sseek>:
 8008072:	b510      	push	{r4, lr}
 8008074:	460c      	mov	r4, r1
 8008076:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800807a:	f000 f8d1 	bl	8008220 <_lseek_r>
 800807e:	1c43      	adds	r3, r0, #1
 8008080:	89a3      	ldrh	r3, [r4, #12]
 8008082:	bf15      	itete	ne
 8008084:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008086:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800808a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800808e:	81a3      	strheq	r3, [r4, #12]
 8008090:	bf18      	it	ne
 8008092:	81a3      	strhne	r3, [r4, #12]
 8008094:	bd10      	pop	{r4, pc}

08008096 <__sclose>:
 8008096:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800809a:	f000 b8b1 	b.w	8008200 <_close_r>

0800809e <__swbuf_r>:
 800809e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080a0:	460e      	mov	r6, r1
 80080a2:	4614      	mov	r4, r2
 80080a4:	4605      	mov	r5, r0
 80080a6:	b118      	cbz	r0, 80080b0 <__swbuf_r+0x12>
 80080a8:	6a03      	ldr	r3, [r0, #32]
 80080aa:	b90b      	cbnz	r3, 80080b0 <__swbuf_r+0x12>
 80080ac:	f7ff fed4 	bl	8007e58 <__sinit>
 80080b0:	69a3      	ldr	r3, [r4, #24]
 80080b2:	60a3      	str	r3, [r4, #8]
 80080b4:	89a3      	ldrh	r3, [r4, #12]
 80080b6:	071a      	lsls	r2, r3, #28
 80080b8:	d501      	bpl.n	80080be <__swbuf_r+0x20>
 80080ba:	6923      	ldr	r3, [r4, #16]
 80080bc:	b943      	cbnz	r3, 80080d0 <__swbuf_r+0x32>
 80080be:	4621      	mov	r1, r4
 80080c0:	4628      	mov	r0, r5
 80080c2:	f000 f82b 	bl	800811c <__swsetup_r>
 80080c6:	b118      	cbz	r0, 80080d0 <__swbuf_r+0x32>
 80080c8:	f04f 37ff 	mov.w	r7, #4294967295
 80080cc:	4638      	mov	r0, r7
 80080ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080d0:	6823      	ldr	r3, [r4, #0]
 80080d2:	6922      	ldr	r2, [r4, #16]
 80080d4:	1a98      	subs	r0, r3, r2
 80080d6:	6963      	ldr	r3, [r4, #20]
 80080d8:	b2f6      	uxtb	r6, r6
 80080da:	4283      	cmp	r3, r0
 80080dc:	4637      	mov	r7, r6
 80080de:	dc05      	bgt.n	80080ec <__swbuf_r+0x4e>
 80080e0:	4621      	mov	r1, r4
 80080e2:	4628      	mov	r0, r5
 80080e4:	f000 ffde 	bl	80090a4 <_fflush_r>
 80080e8:	2800      	cmp	r0, #0
 80080ea:	d1ed      	bne.n	80080c8 <__swbuf_r+0x2a>
 80080ec:	68a3      	ldr	r3, [r4, #8]
 80080ee:	3b01      	subs	r3, #1
 80080f0:	60a3      	str	r3, [r4, #8]
 80080f2:	6823      	ldr	r3, [r4, #0]
 80080f4:	1c5a      	adds	r2, r3, #1
 80080f6:	6022      	str	r2, [r4, #0]
 80080f8:	701e      	strb	r6, [r3, #0]
 80080fa:	6962      	ldr	r2, [r4, #20]
 80080fc:	1c43      	adds	r3, r0, #1
 80080fe:	429a      	cmp	r2, r3
 8008100:	d004      	beq.n	800810c <__swbuf_r+0x6e>
 8008102:	89a3      	ldrh	r3, [r4, #12]
 8008104:	07db      	lsls	r3, r3, #31
 8008106:	d5e1      	bpl.n	80080cc <__swbuf_r+0x2e>
 8008108:	2e0a      	cmp	r6, #10
 800810a:	d1df      	bne.n	80080cc <__swbuf_r+0x2e>
 800810c:	4621      	mov	r1, r4
 800810e:	4628      	mov	r0, r5
 8008110:	f000 ffc8 	bl	80090a4 <_fflush_r>
 8008114:	2800      	cmp	r0, #0
 8008116:	d0d9      	beq.n	80080cc <__swbuf_r+0x2e>
 8008118:	e7d6      	b.n	80080c8 <__swbuf_r+0x2a>
	...

0800811c <__swsetup_r>:
 800811c:	b538      	push	{r3, r4, r5, lr}
 800811e:	4b29      	ldr	r3, [pc, #164]	@ (80081c4 <__swsetup_r+0xa8>)
 8008120:	4605      	mov	r5, r0
 8008122:	6818      	ldr	r0, [r3, #0]
 8008124:	460c      	mov	r4, r1
 8008126:	b118      	cbz	r0, 8008130 <__swsetup_r+0x14>
 8008128:	6a03      	ldr	r3, [r0, #32]
 800812a:	b90b      	cbnz	r3, 8008130 <__swsetup_r+0x14>
 800812c:	f7ff fe94 	bl	8007e58 <__sinit>
 8008130:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008134:	0719      	lsls	r1, r3, #28
 8008136:	d422      	bmi.n	800817e <__swsetup_r+0x62>
 8008138:	06da      	lsls	r2, r3, #27
 800813a:	d407      	bmi.n	800814c <__swsetup_r+0x30>
 800813c:	2209      	movs	r2, #9
 800813e:	602a      	str	r2, [r5, #0]
 8008140:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008144:	81a3      	strh	r3, [r4, #12]
 8008146:	f04f 30ff 	mov.w	r0, #4294967295
 800814a:	e033      	b.n	80081b4 <__swsetup_r+0x98>
 800814c:	0758      	lsls	r0, r3, #29
 800814e:	d512      	bpl.n	8008176 <__swsetup_r+0x5a>
 8008150:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008152:	b141      	cbz	r1, 8008166 <__swsetup_r+0x4a>
 8008154:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008158:	4299      	cmp	r1, r3
 800815a:	d002      	beq.n	8008162 <__swsetup_r+0x46>
 800815c:	4628      	mov	r0, r5
 800815e:	f000 f8d3 	bl	8008308 <_free_r>
 8008162:	2300      	movs	r3, #0
 8008164:	6363      	str	r3, [r4, #52]	@ 0x34
 8008166:	89a3      	ldrh	r3, [r4, #12]
 8008168:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800816c:	81a3      	strh	r3, [r4, #12]
 800816e:	2300      	movs	r3, #0
 8008170:	6063      	str	r3, [r4, #4]
 8008172:	6923      	ldr	r3, [r4, #16]
 8008174:	6023      	str	r3, [r4, #0]
 8008176:	89a3      	ldrh	r3, [r4, #12]
 8008178:	f043 0308 	orr.w	r3, r3, #8
 800817c:	81a3      	strh	r3, [r4, #12]
 800817e:	6923      	ldr	r3, [r4, #16]
 8008180:	b94b      	cbnz	r3, 8008196 <__swsetup_r+0x7a>
 8008182:	89a3      	ldrh	r3, [r4, #12]
 8008184:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008188:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800818c:	d003      	beq.n	8008196 <__swsetup_r+0x7a>
 800818e:	4621      	mov	r1, r4
 8008190:	4628      	mov	r0, r5
 8008192:	f000 ffd5 	bl	8009140 <__smakebuf_r>
 8008196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800819a:	f013 0201 	ands.w	r2, r3, #1
 800819e:	d00a      	beq.n	80081b6 <__swsetup_r+0x9a>
 80081a0:	2200      	movs	r2, #0
 80081a2:	60a2      	str	r2, [r4, #8]
 80081a4:	6962      	ldr	r2, [r4, #20]
 80081a6:	4252      	negs	r2, r2
 80081a8:	61a2      	str	r2, [r4, #24]
 80081aa:	6922      	ldr	r2, [r4, #16]
 80081ac:	b942      	cbnz	r2, 80081c0 <__swsetup_r+0xa4>
 80081ae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80081b2:	d1c5      	bne.n	8008140 <__swsetup_r+0x24>
 80081b4:	bd38      	pop	{r3, r4, r5, pc}
 80081b6:	0799      	lsls	r1, r3, #30
 80081b8:	bf58      	it	pl
 80081ba:	6962      	ldrpl	r2, [r4, #20]
 80081bc:	60a2      	str	r2, [r4, #8]
 80081be:	e7f4      	b.n	80081aa <__swsetup_r+0x8e>
 80081c0:	2000      	movs	r0, #0
 80081c2:	e7f7      	b.n	80081b4 <__swsetup_r+0x98>
 80081c4:	2000001c 	.word	0x2000001c

080081c8 <memset>:
 80081c8:	4402      	add	r2, r0
 80081ca:	4603      	mov	r3, r0
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d100      	bne.n	80081d2 <memset+0xa>
 80081d0:	4770      	bx	lr
 80081d2:	f803 1b01 	strb.w	r1, [r3], #1
 80081d6:	e7f9      	b.n	80081cc <memset+0x4>

080081d8 <strncpy>:
 80081d8:	b510      	push	{r4, lr}
 80081da:	3901      	subs	r1, #1
 80081dc:	4603      	mov	r3, r0
 80081de:	b132      	cbz	r2, 80081ee <strncpy+0x16>
 80081e0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80081e4:	f803 4b01 	strb.w	r4, [r3], #1
 80081e8:	3a01      	subs	r2, #1
 80081ea:	2c00      	cmp	r4, #0
 80081ec:	d1f7      	bne.n	80081de <strncpy+0x6>
 80081ee:	441a      	add	r2, r3
 80081f0:	2100      	movs	r1, #0
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d100      	bne.n	80081f8 <strncpy+0x20>
 80081f6:	bd10      	pop	{r4, pc}
 80081f8:	f803 1b01 	strb.w	r1, [r3], #1
 80081fc:	e7f9      	b.n	80081f2 <strncpy+0x1a>
	...

08008200 <_close_r>:
 8008200:	b538      	push	{r3, r4, r5, lr}
 8008202:	4d06      	ldr	r5, [pc, #24]	@ (800821c <_close_r+0x1c>)
 8008204:	2300      	movs	r3, #0
 8008206:	4604      	mov	r4, r0
 8008208:	4608      	mov	r0, r1
 800820a:	602b      	str	r3, [r5, #0]
 800820c:	f7fa f87d 	bl	800230a <_close>
 8008210:	1c43      	adds	r3, r0, #1
 8008212:	d102      	bne.n	800821a <_close_r+0x1a>
 8008214:	682b      	ldr	r3, [r5, #0]
 8008216:	b103      	cbz	r3, 800821a <_close_r+0x1a>
 8008218:	6023      	str	r3, [r4, #0]
 800821a:	bd38      	pop	{r3, r4, r5, pc}
 800821c:	200004b4 	.word	0x200004b4

08008220 <_lseek_r>:
 8008220:	b538      	push	{r3, r4, r5, lr}
 8008222:	4d07      	ldr	r5, [pc, #28]	@ (8008240 <_lseek_r+0x20>)
 8008224:	4604      	mov	r4, r0
 8008226:	4608      	mov	r0, r1
 8008228:	4611      	mov	r1, r2
 800822a:	2200      	movs	r2, #0
 800822c:	602a      	str	r2, [r5, #0]
 800822e:	461a      	mov	r2, r3
 8008230:	f7fa f892 	bl	8002358 <_lseek>
 8008234:	1c43      	adds	r3, r0, #1
 8008236:	d102      	bne.n	800823e <_lseek_r+0x1e>
 8008238:	682b      	ldr	r3, [r5, #0]
 800823a:	b103      	cbz	r3, 800823e <_lseek_r+0x1e>
 800823c:	6023      	str	r3, [r4, #0]
 800823e:	bd38      	pop	{r3, r4, r5, pc}
 8008240:	200004b4 	.word	0x200004b4

08008244 <_read_r>:
 8008244:	b538      	push	{r3, r4, r5, lr}
 8008246:	4d07      	ldr	r5, [pc, #28]	@ (8008264 <_read_r+0x20>)
 8008248:	4604      	mov	r4, r0
 800824a:	4608      	mov	r0, r1
 800824c:	4611      	mov	r1, r2
 800824e:	2200      	movs	r2, #0
 8008250:	602a      	str	r2, [r5, #0]
 8008252:	461a      	mov	r2, r3
 8008254:	f7fa f820 	bl	8002298 <_read>
 8008258:	1c43      	adds	r3, r0, #1
 800825a:	d102      	bne.n	8008262 <_read_r+0x1e>
 800825c:	682b      	ldr	r3, [r5, #0]
 800825e:	b103      	cbz	r3, 8008262 <_read_r+0x1e>
 8008260:	6023      	str	r3, [r4, #0]
 8008262:	bd38      	pop	{r3, r4, r5, pc}
 8008264:	200004b4 	.word	0x200004b4

08008268 <_sbrk_r>:
 8008268:	b538      	push	{r3, r4, r5, lr}
 800826a:	4d06      	ldr	r5, [pc, #24]	@ (8008284 <_sbrk_r+0x1c>)
 800826c:	2300      	movs	r3, #0
 800826e:	4604      	mov	r4, r0
 8008270:	4608      	mov	r0, r1
 8008272:	602b      	str	r3, [r5, #0]
 8008274:	f7fa f87e 	bl	8002374 <_sbrk>
 8008278:	1c43      	adds	r3, r0, #1
 800827a:	d102      	bne.n	8008282 <_sbrk_r+0x1a>
 800827c:	682b      	ldr	r3, [r5, #0]
 800827e:	b103      	cbz	r3, 8008282 <_sbrk_r+0x1a>
 8008280:	6023      	str	r3, [r4, #0]
 8008282:	bd38      	pop	{r3, r4, r5, pc}
 8008284:	200004b4 	.word	0x200004b4

08008288 <_write_r>:
 8008288:	b538      	push	{r3, r4, r5, lr}
 800828a:	4d07      	ldr	r5, [pc, #28]	@ (80082a8 <_write_r+0x20>)
 800828c:	4604      	mov	r4, r0
 800828e:	4608      	mov	r0, r1
 8008290:	4611      	mov	r1, r2
 8008292:	2200      	movs	r2, #0
 8008294:	602a      	str	r2, [r5, #0]
 8008296:	461a      	mov	r2, r3
 8008298:	f7fa f81b 	bl	80022d2 <_write>
 800829c:	1c43      	adds	r3, r0, #1
 800829e:	d102      	bne.n	80082a6 <_write_r+0x1e>
 80082a0:	682b      	ldr	r3, [r5, #0]
 80082a2:	b103      	cbz	r3, 80082a6 <_write_r+0x1e>
 80082a4:	6023      	str	r3, [r4, #0]
 80082a6:	bd38      	pop	{r3, r4, r5, pc}
 80082a8:	200004b4 	.word	0x200004b4

080082ac <__errno>:
 80082ac:	4b01      	ldr	r3, [pc, #4]	@ (80082b4 <__errno+0x8>)
 80082ae:	6818      	ldr	r0, [r3, #0]
 80082b0:	4770      	bx	lr
 80082b2:	bf00      	nop
 80082b4:	2000001c 	.word	0x2000001c

080082b8 <__libc_init_array>:
 80082b8:	b570      	push	{r4, r5, r6, lr}
 80082ba:	4d0d      	ldr	r5, [pc, #52]	@ (80082f0 <__libc_init_array+0x38>)
 80082bc:	4c0d      	ldr	r4, [pc, #52]	@ (80082f4 <__libc_init_array+0x3c>)
 80082be:	1b64      	subs	r4, r4, r5
 80082c0:	10a4      	asrs	r4, r4, #2
 80082c2:	2600      	movs	r6, #0
 80082c4:	42a6      	cmp	r6, r4
 80082c6:	d109      	bne.n	80082dc <__libc_init_array+0x24>
 80082c8:	4d0b      	ldr	r5, [pc, #44]	@ (80082f8 <__libc_init_array+0x40>)
 80082ca:	4c0c      	ldr	r4, [pc, #48]	@ (80082fc <__libc_init_array+0x44>)
 80082cc:	f001 f954 	bl	8009578 <_init>
 80082d0:	1b64      	subs	r4, r4, r5
 80082d2:	10a4      	asrs	r4, r4, #2
 80082d4:	2600      	movs	r6, #0
 80082d6:	42a6      	cmp	r6, r4
 80082d8:	d105      	bne.n	80082e6 <__libc_init_array+0x2e>
 80082da:	bd70      	pop	{r4, r5, r6, pc}
 80082dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80082e0:	4798      	blx	r3
 80082e2:	3601      	adds	r6, #1
 80082e4:	e7ee      	b.n	80082c4 <__libc_init_array+0xc>
 80082e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80082ea:	4798      	blx	r3
 80082ec:	3601      	adds	r6, #1
 80082ee:	e7f2      	b.n	80082d6 <__libc_init_array+0x1e>
 80082f0:	08009924 	.word	0x08009924
 80082f4:	08009924 	.word	0x08009924
 80082f8:	08009924 	.word	0x08009924
 80082fc:	08009928 	.word	0x08009928

08008300 <__retarget_lock_init_recursive>:
 8008300:	4770      	bx	lr

08008302 <__retarget_lock_acquire_recursive>:
 8008302:	4770      	bx	lr

08008304 <__retarget_lock_release_recursive>:
 8008304:	4770      	bx	lr
	...

08008308 <_free_r>:
 8008308:	b538      	push	{r3, r4, r5, lr}
 800830a:	4605      	mov	r5, r0
 800830c:	2900      	cmp	r1, #0
 800830e:	d041      	beq.n	8008394 <_free_r+0x8c>
 8008310:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008314:	1f0c      	subs	r4, r1, #4
 8008316:	2b00      	cmp	r3, #0
 8008318:	bfb8      	it	lt
 800831a:	18e4      	addlt	r4, r4, r3
 800831c:	f7ff fd04 	bl	8007d28 <__malloc_lock>
 8008320:	4a1d      	ldr	r2, [pc, #116]	@ (8008398 <_free_r+0x90>)
 8008322:	6813      	ldr	r3, [r2, #0]
 8008324:	b933      	cbnz	r3, 8008334 <_free_r+0x2c>
 8008326:	6063      	str	r3, [r4, #4]
 8008328:	6014      	str	r4, [r2, #0]
 800832a:	4628      	mov	r0, r5
 800832c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008330:	f7ff bd00 	b.w	8007d34 <__malloc_unlock>
 8008334:	42a3      	cmp	r3, r4
 8008336:	d908      	bls.n	800834a <_free_r+0x42>
 8008338:	6820      	ldr	r0, [r4, #0]
 800833a:	1821      	adds	r1, r4, r0
 800833c:	428b      	cmp	r3, r1
 800833e:	bf01      	itttt	eq
 8008340:	6819      	ldreq	r1, [r3, #0]
 8008342:	685b      	ldreq	r3, [r3, #4]
 8008344:	1809      	addeq	r1, r1, r0
 8008346:	6021      	streq	r1, [r4, #0]
 8008348:	e7ed      	b.n	8008326 <_free_r+0x1e>
 800834a:	461a      	mov	r2, r3
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	b10b      	cbz	r3, 8008354 <_free_r+0x4c>
 8008350:	42a3      	cmp	r3, r4
 8008352:	d9fa      	bls.n	800834a <_free_r+0x42>
 8008354:	6811      	ldr	r1, [r2, #0]
 8008356:	1850      	adds	r0, r2, r1
 8008358:	42a0      	cmp	r0, r4
 800835a:	d10b      	bne.n	8008374 <_free_r+0x6c>
 800835c:	6820      	ldr	r0, [r4, #0]
 800835e:	4401      	add	r1, r0
 8008360:	1850      	adds	r0, r2, r1
 8008362:	4283      	cmp	r3, r0
 8008364:	6011      	str	r1, [r2, #0]
 8008366:	d1e0      	bne.n	800832a <_free_r+0x22>
 8008368:	6818      	ldr	r0, [r3, #0]
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	6053      	str	r3, [r2, #4]
 800836e:	4408      	add	r0, r1
 8008370:	6010      	str	r0, [r2, #0]
 8008372:	e7da      	b.n	800832a <_free_r+0x22>
 8008374:	d902      	bls.n	800837c <_free_r+0x74>
 8008376:	230c      	movs	r3, #12
 8008378:	602b      	str	r3, [r5, #0]
 800837a:	e7d6      	b.n	800832a <_free_r+0x22>
 800837c:	6820      	ldr	r0, [r4, #0]
 800837e:	1821      	adds	r1, r4, r0
 8008380:	428b      	cmp	r3, r1
 8008382:	bf04      	itt	eq
 8008384:	6819      	ldreq	r1, [r3, #0]
 8008386:	685b      	ldreq	r3, [r3, #4]
 8008388:	6063      	str	r3, [r4, #4]
 800838a:	bf04      	itt	eq
 800838c:	1809      	addeq	r1, r1, r0
 800838e:	6021      	streq	r1, [r4, #0]
 8008390:	6054      	str	r4, [r2, #4]
 8008392:	e7ca      	b.n	800832a <_free_r+0x22>
 8008394:	bd38      	pop	{r3, r4, r5, pc}
 8008396:	bf00      	nop
 8008398:	20000374 	.word	0x20000374

0800839c <__ssputs_r>:
 800839c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083a0:	688e      	ldr	r6, [r1, #8]
 80083a2:	461f      	mov	r7, r3
 80083a4:	42be      	cmp	r6, r7
 80083a6:	680b      	ldr	r3, [r1, #0]
 80083a8:	4682      	mov	sl, r0
 80083aa:	460c      	mov	r4, r1
 80083ac:	4690      	mov	r8, r2
 80083ae:	d82d      	bhi.n	800840c <__ssputs_r+0x70>
 80083b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80083b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80083b8:	d026      	beq.n	8008408 <__ssputs_r+0x6c>
 80083ba:	6965      	ldr	r5, [r4, #20]
 80083bc:	6909      	ldr	r1, [r1, #16]
 80083be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80083c2:	eba3 0901 	sub.w	r9, r3, r1
 80083c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80083ca:	1c7b      	adds	r3, r7, #1
 80083cc:	444b      	add	r3, r9
 80083ce:	106d      	asrs	r5, r5, #1
 80083d0:	429d      	cmp	r5, r3
 80083d2:	bf38      	it	cc
 80083d4:	461d      	movcc	r5, r3
 80083d6:	0553      	lsls	r3, r2, #21
 80083d8:	d527      	bpl.n	800842a <__ssputs_r+0x8e>
 80083da:	4629      	mov	r1, r5
 80083dc:	f7ff fc24 	bl	8007c28 <_malloc_r>
 80083e0:	4606      	mov	r6, r0
 80083e2:	b360      	cbz	r0, 800843e <__ssputs_r+0xa2>
 80083e4:	6921      	ldr	r1, [r4, #16]
 80083e6:	464a      	mov	r2, r9
 80083e8:	f000 ff96 	bl	8009318 <memcpy>
 80083ec:	89a3      	ldrh	r3, [r4, #12]
 80083ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80083f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083f6:	81a3      	strh	r3, [r4, #12]
 80083f8:	6126      	str	r6, [r4, #16]
 80083fa:	6165      	str	r5, [r4, #20]
 80083fc:	444e      	add	r6, r9
 80083fe:	eba5 0509 	sub.w	r5, r5, r9
 8008402:	6026      	str	r6, [r4, #0]
 8008404:	60a5      	str	r5, [r4, #8]
 8008406:	463e      	mov	r6, r7
 8008408:	42be      	cmp	r6, r7
 800840a:	d900      	bls.n	800840e <__ssputs_r+0x72>
 800840c:	463e      	mov	r6, r7
 800840e:	6820      	ldr	r0, [r4, #0]
 8008410:	4632      	mov	r2, r6
 8008412:	4641      	mov	r1, r8
 8008414:	f000 ff43 	bl	800929e <memmove>
 8008418:	68a3      	ldr	r3, [r4, #8]
 800841a:	1b9b      	subs	r3, r3, r6
 800841c:	60a3      	str	r3, [r4, #8]
 800841e:	6823      	ldr	r3, [r4, #0]
 8008420:	4433      	add	r3, r6
 8008422:	6023      	str	r3, [r4, #0]
 8008424:	2000      	movs	r0, #0
 8008426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800842a:	462a      	mov	r2, r5
 800842c:	f000 ff82 	bl	8009334 <_realloc_r>
 8008430:	4606      	mov	r6, r0
 8008432:	2800      	cmp	r0, #0
 8008434:	d1e0      	bne.n	80083f8 <__ssputs_r+0x5c>
 8008436:	6921      	ldr	r1, [r4, #16]
 8008438:	4650      	mov	r0, sl
 800843a:	f7ff ff65 	bl	8008308 <_free_r>
 800843e:	230c      	movs	r3, #12
 8008440:	f8ca 3000 	str.w	r3, [sl]
 8008444:	89a3      	ldrh	r3, [r4, #12]
 8008446:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800844a:	81a3      	strh	r3, [r4, #12]
 800844c:	f04f 30ff 	mov.w	r0, #4294967295
 8008450:	e7e9      	b.n	8008426 <__ssputs_r+0x8a>
	...

08008454 <_svfiprintf_r>:
 8008454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008458:	4698      	mov	r8, r3
 800845a:	898b      	ldrh	r3, [r1, #12]
 800845c:	061b      	lsls	r3, r3, #24
 800845e:	b09d      	sub	sp, #116	@ 0x74
 8008460:	4607      	mov	r7, r0
 8008462:	460d      	mov	r5, r1
 8008464:	4614      	mov	r4, r2
 8008466:	d510      	bpl.n	800848a <_svfiprintf_r+0x36>
 8008468:	690b      	ldr	r3, [r1, #16]
 800846a:	b973      	cbnz	r3, 800848a <_svfiprintf_r+0x36>
 800846c:	2140      	movs	r1, #64	@ 0x40
 800846e:	f7ff fbdb 	bl	8007c28 <_malloc_r>
 8008472:	6028      	str	r0, [r5, #0]
 8008474:	6128      	str	r0, [r5, #16]
 8008476:	b930      	cbnz	r0, 8008486 <_svfiprintf_r+0x32>
 8008478:	230c      	movs	r3, #12
 800847a:	603b      	str	r3, [r7, #0]
 800847c:	f04f 30ff 	mov.w	r0, #4294967295
 8008480:	b01d      	add	sp, #116	@ 0x74
 8008482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008486:	2340      	movs	r3, #64	@ 0x40
 8008488:	616b      	str	r3, [r5, #20]
 800848a:	2300      	movs	r3, #0
 800848c:	9309      	str	r3, [sp, #36]	@ 0x24
 800848e:	2320      	movs	r3, #32
 8008490:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008494:	f8cd 800c 	str.w	r8, [sp, #12]
 8008498:	2330      	movs	r3, #48	@ 0x30
 800849a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008638 <_svfiprintf_r+0x1e4>
 800849e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80084a2:	f04f 0901 	mov.w	r9, #1
 80084a6:	4623      	mov	r3, r4
 80084a8:	469a      	mov	sl, r3
 80084aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084ae:	b10a      	cbz	r2, 80084b4 <_svfiprintf_r+0x60>
 80084b0:	2a25      	cmp	r2, #37	@ 0x25
 80084b2:	d1f9      	bne.n	80084a8 <_svfiprintf_r+0x54>
 80084b4:	ebba 0b04 	subs.w	fp, sl, r4
 80084b8:	d00b      	beq.n	80084d2 <_svfiprintf_r+0x7e>
 80084ba:	465b      	mov	r3, fp
 80084bc:	4622      	mov	r2, r4
 80084be:	4629      	mov	r1, r5
 80084c0:	4638      	mov	r0, r7
 80084c2:	f7ff ff6b 	bl	800839c <__ssputs_r>
 80084c6:	3001      	adds	r0, #1
 80084c8:	f000 80a7 	beq.w	800861a <_svfiprintf_r+0x1c6>
 80084cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80084ce:	445a      	add	r2, fp
 80084d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80084d2:	f89a 3000 	ldrb.w	r3, [sl]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	f000 809f 	beq.w	800861a <_svfiprintf_r+0x1c6>
 80084dc:	2300      	movs	r3, #0
 80084de:	f04f 32ff 	mov.w	r2, #4294967295
 80084e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084e6:	f10a 0a01 	add.w	sl, sl, #1
 80084ea:	9304      	str	r3, [sp, #16]
 80084ec:	9307      	str	r3, [sp, #28]
 80084ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80084f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80084f4:	4654      	mov	r4, sl
 80084f6:	2205      	movs	r2, #5
 80084f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084fc:	484e      	ldr	r0, [pc, #312]	@ (8008638 <_svfiprintf_r+0x1e4>)
 80084fe:	f7f7 fea7 	bl	8000250 <memchr>
 8008502:	9a04      	ldr	r2, [sp, #16]
 8008504:	b9d8      	cbnz	r0, 800853e <_svfiprintf_r+0xea>
 8008506:	06d0      	lsls	r0, r2, #27
 8008508:	bf44      	itt	mi
 800850a:	2320      	movmi	r3, #32
 800850c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008510:	0711      	lsls	r1, r2, #28
 8008512:	bf44      	itt	mi
 8008514:	232b      	movmi	r3, #43	@ 0x2b
 8008516:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800851a:	f89a 3000 	ldrb.w	r3, [sl]
 800851e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008520:	d015      	beq.n	800854e <_svfiprintf_r+0xfa>
 8008522:	9a07      	ldr	r2, [sp, #28]
 8008524:	4654      	mov	r4, sl
 8008526:	2000      	movs	r0, #0
 8008528:	f04f 0c0a 	mov.w	ip, #10
 800852c:	4621      	mov	r1, r4
 800852e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008532:	3b30      	subs	r3, #48	@ 0x30
 8008534:	2b09      	cmp	r3, #9
 8008536:	d94b      	bls.n	80085d0 <_svfiprintf_r+0x17c>
 8008538:	b1b0      	cbz	r0, 8008568 <_svfiprintf_r+0x114>
 800853a:	9207      	str	r2, [sp, #28]
 800853c:	e014      	b.n	8008568 <_svfiprintf_r+0x114>
 800853e:	eba0 0308 	sub.w	r3, r0, r8
 8008542:	fa09 f303 	lsl.w	r3, r9, r3
 8008546:	4313      	orrs	r3, r2
 8008548:	9304      	str	r3, [sp, #16]
 800854a:	46a2      	mov	sl, r4
 800854c:	e7d2      	b.n	80084f4 <_svfiprintf_r+0xa0>
 800854e:	9b03      	ldr	r3, [sp, #12]
 8008550:	1d19      	adds	r1, r3, #4
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	9103      	str	r1, [sp, #12]
 8008556:	2b00      	cmp	r3, #0
 8008558:	bfbb      	ittet	lt
 800855a:	425b      	neglt	r3, r3
 800855c:	f042 0202 	orrlt.w	r2, r2, #2
 8008560:	9307      	strge	r3, [sp, #28]
 8008562:	9307      	strlt	r3, [sp, #28]
 8008564:	bfb8      	it	lt
 8008566:	9204      	strlt	r2, [sp, #16]
 8008568:	7823      	ldrb	r3, [r4, #0]
 800856a:	2b2e      	cmp	r3, #46	@ 0x2e
 800856c:	d10a      	bne.n	8008584 <_svfiprintf_r+0x130>
 800856e:	7863      	ldrb	r3, [r4, #1]
 8008570:	2b2a      	cmp	r3, #42	@ 0x2a
 8008572:	d132      	bne.n	80085da <_svfiprintf_r+0x186>
 8008574:	9b03      	ldr	r3, [sp, #12]
 8008576:	1d1a      	adds	r2, r3, #4
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	9203      	str	r2, [sp, #12]
 800857c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008580:	3402      	adds	r4, #2
 8008582:	9305      	str	r3, [sp, #20]
 8008584:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008648 <_svfiprintf_r+0x1f4>
 8008588:	7821      	ldrb	r1, [r4, #0]
 800858a:	2203      	movs	r2, #3
 800858c:	4650      	mov	r0, sl
 800858e:	f7f7 fe5f 	bl	8000250 <memchr>
 8008592:	b138      	cbz	r0, 80085a4 <_svfiprintf_r+0x150>
 8008594:	9b04      	ldr	r3, [sp, #16]
 8008596:	eba0 000a 	sub.w	r0, r0, sl
 800859a:	2240      	movs	r2, #64	@ 0x40
 800859c:	4082      	lsls	r2, r0
 800859e:	4313      	orrs	r3, r2
 80085a0:	3401      	adds	r4, #1
 80085a2:	9304      	str	r3, [sp, #16]
 80085a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085a8:	4824      	ldr	r0, [pc, #144]	@ (800863c <_svfiprintf_r+0x1e8>)
 80085aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80085ae:	2206      	movs	r2, #6
 80085b0:	f7f7 fe4e 	bl	8000250 <memchr>
 80085b4:	2800      	cmp	r0, #0
 80085b6:	d036      	beq.n	8008626 <_svfiprintf_r+0x1d2>
 80085b8:	4b21      	ldr	r3, [pc, #132]	@ (8008640 <_svfiprintf_r+0x1ec>)
 80085ba:	bb1b      	cbnz	r3, 8008604 <_svfiprintf_r+0x1b0>
 80085bc:	9b03      	ldr	r3, [sp, #12]
 80085be:	3307      	adds	r3, #7
 80085c0:	f023 0307 	bic.w	r3, r3, #7
 80085c4:	3308      	adds	r3, #8
 80085c6:	9303      	str	r3, [sp, #12]
 80085c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085ca:	4433      	add	r3, r6
 80085cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80085ce:	e76a      	b.n	80084a6 <_svfiprintf_r+0x52>
 80085d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80085d4:	460c      	mov	r4, r1
 80085d6:	2001      	movs	r0, #1
 80085d8:	e7a8      	b.n	800852c <_svfiprintf_r+0xd8>
 80085da:	2300      	movs	r3, #0
 80085dc:	3401      	adds	r4, #1
 80085de:	9305      	str	r3, [sp, #20]
 80085e0:	4619      	mov	r1, r3
 80085e2:	f04f 0c0a 	mov.w	ip, #10
 80085e6:	4620      	mov	r0, r4
 80085e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085ec:	3a30      	subs	r2, #48	@ 0x30
 80085ee:	2a09      	cmp	r2, #9
 80085f0:	d903      	bls.n	80085fa <_svfiprintf_r+0x1a6>
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d0c6      	beq.n	8008584 <_svfiprintf_r+0x130>
 80085f6:	9105      	str	r1, [sp, #20]
 80085f8:	e7c4      	b.n	8008584 <_svfiprintf_r+0x130>
 80085fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80085fe:	4604      	mov	r4, r0
 8008600:	2301      	movs	r3, #1
 8008602:	e7f0      	b.n	80085e6 <_svfiprintf_r+0x192>
 8008604:	ab03      	add	r3, sp, #12
 8008606:	9300      	str	r3, [sp, #0]
 8008608:	462a      	mov	r2, r5
 800860a:	4b0e      	ldr	r3, [pc, #56]	@ (8008644 <_svfiprintf_r+0x1f0>)
 800860c:	a904      	add	r1, sp, #16
 800860e:	4638      	mov	r0, r7
 8008610:	f3af 8000 	nop.w
 8008614:	1c42      	adds	r2, r0, #1
 8008616:	4606      	mov	r6, r0
 8008618:	d1d6      	bne.n	80085c8 <_svfiprintf_r+0x174>
 800861a:	89ab      	ldrh	r3, [r5, #12]
 800861c:	065b      	lsls	r3, r3, #25
 800861e:	f53f af2d 	bmi.w	800847c <_svfiprintf_r+0x28>
 8008622:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008624:	e72c      	b.n	8008480 <_svfiprintf_r+0x2c>
 8008626:	ab03      	add	r3, sp, #12
 8008628:	9300      	str	r3, [sp, #0]
 800862a:	462a      	mov	r2, r5
 800862c:	4b05      	ldr	r3, [pc, #20]	@ (8008644 <_svfiprintf_r+0x1f0>)
 800862e:	a904      	add	r1, sp, #16
 8008630:	4638      	mov	r0, r7
 8008632:	f000 fa45 	bl	8008ac0 <_printf_i>
 8008636:	e7ed      	b.n	8008614 <_svfiprintf_r+0x1c0>
 8008638:	080097cc 	.word	0x080097cc
 800863c:	080097d6 	.word	0x080097d6
 8008640:	00000000 	.word	0x00000000
 8008644:	0800839d 	.word	0x0800839d
 8008648:	080097d2 	.word	0x080097d2

0800864c <_sungetc_r>:
 800864c:	b538      	push	{r3, r4, r5, lr}
 800864e:	1c4b      	adds	r3, r1, #1
 8008650:	4614      	mov	r4, r2
 8008652:	d103      	bne.n	800865c <_sungetc_r+0x10>
 8008654:	f04f 35ff 	mov.w	r5, #4294967295
 8008658:	4628      	mov	r0, r5
 800865a:	bd38      	pop	{r3, r4, r5, pc}
 800865c:	8993      	ldrh	r3, [r2, #12]
 800865e:	f023 0320 	bic.w	r3, r3, #32
 8008662:	8193      	strh	r3, [r2, #12]
 8008664:	6853      	ldr	r3, [r2, #4]
 8008666:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008668:	b2cd      	uxtb	r5, r1
 800866a:	b18a      	cbz	r2, 8008690 <_sungetc_r+0x44>
 800866c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800866e:	429a      	cmp	r2, r3
 8008670:	dd08      	ble.n	8008684 <_sungetc_r+0x38>
 8008672:	6823      	ldr	r3, [r4, #0]
 8008674:	1e5a      	subs	r2, r3, #1
 8008676:	6022      	str	r2, [r4, #0]
 8008678:	f803 5c01 	strb.w	r5, [r3, #-1]
 800867c:	6863      	ldr	r3, [r4, #4]
 800867e:	3301      	adds	r3, #1
 8008680:	6063      	str	r3, [r4, #4]
 8008682:	e7e9      	b.n	8008658 <_sungetc_r+0xc>
 8008684:	4621      	mov	r1, r4
 8008686:	f000 fdd0 	bl	800922a <__submore>
 800868a:	2800      	cmp	r0, #0
 800868c:	d0f1      	beq.n	8008672 <_sungetc_r+0x26>
 800868e:	e7e1      	b.n	8008654 <_sungetc_r+0x8>
 8008690:	6921      	ldr	r1, [r4, #16]
 8008692:	6822      	ldr	r2, [r4, #0]
 8008694:	b141      	cbz	r1, 80086a8 <_sungetc_r+0x5c>
 8008696:	4291      	cmp	r1, r2
 8008698:	d206      	bcs.n	80086a8 <_sungetc_r+0x5c>
 800869a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800869e:	42a9      	cmp	r1, r5
 80086a0:	d102      	bne.n	80086a8 <_sungetc_r+0x5c>
 80086a2:	3a01      	subs	r2, #1
 80086a4:	6022      	str	r2, [r4, #0]
 80086a6:	e7ea      	b.n	800867e <_sungetc_r+0x32>
 80086a8:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 80086ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80086b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80086b2:	2303      	movs	r3, #3
 80086b4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80086b6:	4623      	mov	r3, r4
 80086b8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80086bc:	6023      	str	r3, [r4, #0]
 80086be:	2301      	movs	r3, #1
 80086c0:	e7de      	b.n	8008680 <_sungetc_r+0x34>

080086c2 <__ssrefill_r>:
 80086c2:	b510      	push	{r4, lr}
 80086c4:	460c      	mov	r4, r1
 80086c6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80086c8:	b169      	cbz	r1, 80086e6 <__ssrefill_r+0x24>
 80086ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80086ce:	4299      	cmp	r1, r3
 80086d0:	d001      	beq.n	80086d6 <__ssrefill_r+0x14>
 80086d2:	f7ff fe19 	bl	8008308 <_free_r>
 80086d6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80086d8:	6063      	str	r3, [r4, #4]
 80086da:	2000      	movs	r0, #0
 80086dc:	6360      	str	r0, [r4, #52]	@ 0x34
 80086de:	b113      	cbz	r3, 80086e6 <__ssrefill_r+0x24>
 80086e0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80086e2:	6023      	str	r3, [r4, #0]
 80086e4:	bd10      	pop	{r4, pc}
 80086e6:	6923      	ldr	r3, [r4, #16]
 80086e8:	6023      	str	r3, [r4, #0]
 80086ea:	2300      	movs	r3, #0
 80086ec:	6063      	str	r3, [r4, #4]
 80086ee:	89a3      	ldrh	r3, [r4, #12]
 80086f0:	f043 0320 	orr.w	r3, r3, #32
 80086f4:	81a3      	strh	r3, [r4, #12]
 80086f6:	f04f 30ff 	mov.w	r0, #4294967295
 80086fa:	e7f3      	b.n	80086e4 <__ssrefill_r+0x22>

080086fc <__ssvfiscanf_r>:
 80086fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008700:	460c      	mov	r4, r1
 8008702:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8008706:	2100      	movs	r1, #0
 8008708:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800870c:	49a5      	ldr	r1, [pc, #660]	@ (80089a4 <__ssvfiscanf_r+0x2a8>)
 800870e:	91a0      	str	r1, [sp, #640]	@ 0x280
 8008710:	f10d 0804 	add.w	r8, sp, #4
 8008714:	49a4      	ldr	r1, [pc, #656]	@ (80089a8 <__ssvfiscanf_r+0x2ac>)
 8008716:	4fa5      	ldr	r7, [pc, #660]	@ (80089ac <__ssvfiscanf_r+0x2b0>)
 8008718:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800871c:	4606      	mov	r6, r0
 800871e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8008720:	9300      	str	r3, [sp, #0]
 8008722:	7813      	ldrb	r3, [r2, #0]
 8008724:	2b00      	cmp	r3, #0
 8008726:	f000 8158 	beq.w	80089da <__ssvfiscanf_r+0x2de>
 800872a:	5cf9      	ldrb	r1, [r7, r3]
 800872c:	f011 0108 	ands.w	r1, r1, #8
 8008730:	f102 0501 	add.w	r5, r2, #1
 8008734:	d019      	beq.n	800876a <__ssvfiscanf_r+0x6e>
 8008736:	6863      	ldr	r3, [r4, #4]
 8008738:	2b00      	cmp	r3, #0
 800873a:	dd0f      	ble.n	800875c <__ssvfiscanf_r+0x60>
 800873c:	6823      	ldr	r3, [r4, #0]
 800873e:	781a      	ldrb	r2, [r3, #0]
 8008740:	5cba      	ldrb	r2, [r7, r2]
 8008742:	0712      	lsls	r2, r2, #28
 8008744:	d401      	bmi.n	800874a <__ssvfiscanf_r+0x4e>
 8008746:	462a      	mov	r2, r5
 8008748:	e7eb      	b.n	8008722 <__ssvfiscanf_r+0x26>
 800874a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800874c:	3201      	adds	r2, #1
 800874e:	9245      	str	r2, [sp, #276]	@ 0x114
 8008750:	6862      	ldr	r2, [r4, #4]
 8008752:	3301      	adds	r3, #1
 8008754:	3a01      	subs	r2, #1
 8008756:	6062      	str	r2, [r4, #4]
 8008758:	6023      	str	r3, [r4, #0]
 800875a:	e7ec      	b.n	8008736 <__ssvfiscanf_r+0x3a>
 800875c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800875e:	4621      	mov	r1, r4
 8008760:	4630      	mov	r0, r6
 8008762:	4798      	blx	r3
 8008764:	2800      	cmp	r0, #0
 8008766:	d0e9      	beq.n	800873c <__ssvfiscanf_r+0x40>
 8008768:	e7ed      	b.n	8008746 <__ssvfiscanf_r+0x4a>
 800876a:	2b25      	cmp	r3, #37	@ 0x25
 800876c:	d012      	beq.n	8008794 <__ssvfiscanf_r+0x98>
 800876e:	4699      	mov	r9, r3
 8008770:	6863      	ldr	r3, [r4, #4]
 8008772:	2b00      	cmp	r3, #0
 8008774:	f340 8093 	ble.w	800889e <__ssvfiscanf_r+0x1a2>
 8008778:	6822      	ldr	r2, [r4, #0]
 800877a:	7813      	ldrb	r3, [r2, #0]
 800877c:	454b      	cmp	r3, r9
 800877e:	f040 812c 	bne.w	80089da <__ssvfiscanf_r+0x2de>
 8008782:	6863      	ldr	r3, [r4, #4]
 8008784:	3b01      	subs	r3, #1
 8008786:	6063      	str	r3, [r4, #4]
 8008788:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800878a:	3201      	adds	r2, #1
 800878c:	3301      	adds	r3, #1
 800878e:	6022      	str	r2, [r4, #0]
 8008790:	9345      	str	r3, [sp, #276]	@ 0x114
 8008792:	e7d8      	b.n	8008746 <__ssvfiscanf_r+0x4a>
 8008794:	9141      	str	r1, [sp, #260]	@ 0x104
 8008796:	9143      	str	r1, [sp, #268]	@ 0x10c
 8008798:	7853      	ldrb	r3, [r2, #1]
 800879a:	2b2a      	cmp	r3, #42	@ 0x2a
 800879c:	bf02      	ittt	eq
 800879e:	2310      	moveq	r3, #16
 80087a0:	1c95      	addeq	r5, r2, #2
 80087a2:	9341      	streq	r3, [sp, #260]	@ 0x104
 80087a4:	220a      	movs	r2, #10
 80087a6:	46a9      	mov	r9, r5
 80087a8:	f819 1b01 	ldrb.w	r1, [r9], #1
 80087ac:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80087b0:	2b09      	cmp	r3, #9
 80087b2:	d91e      	bls.n	80087f2 <__ssvfiscanf_r+0xf6>
 80087b4:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 80089b0 <__ssvfiscanf_r+0x2b4>
 80087b8:	2203      	movs	r2, #3
 80087ba:	4650      	mov	r0, sl
 80087bc:	f7f7 fd48 	bl	8000250 <memchr>
 80087c0:	b138      	cbz	r0, 80087d2 <__ssvfiscanf_r+0xd6>
 80087c2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80087c4:	eba0 000a 	sub.w	r0, r0, sl
 80087c8:	2301      	movs	r3, #1
 80087ca:	4083      	lsls	r3, r0
 80087cc:	4313      	orrs	r3, r2
 80087ce:	9341      	str	r3, [sp, #260]	@ 0x104
 80087d0:	464d      	mov	r5, r9
 80087d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80087d6:	2b78      	cmp	r3, #120	@ 0x78
 80087d8:	d806      	bhi.n	80087e8 <__ssvfiscanf_r+0xec>
 80087da:	2b57      	cmp	r3, #87	@ 0x57
 80087dc:	d810      	bhi.n	8008800 <__ssvfiscanf_r+0x104>
 80087de:	2b25      	cmp	r3, #37	@ 0x25
 80087e0:	d0c5      	beq.n	800876e <__ssvfiscanf_r+0x72>
 80087e2:	d857      	bhi.n	8008894 <__ssvfiscanf_r+0x198>
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d065      	beq.n	80088b4 <__ssvfiscanf_r+0x1b8>
 80087e8:	2303      	movs	r3, #3
 80087ea:	9347      	str	r3, [sp, #284]	@ 0x11c
 80087ec:	230a      	movs	r3, #10
 80087ee:	9342      	str	r3, [sp, #264]	@ 0x108
 80087f0:	e078      	b.n	80088e4 <__ssvfiscanf_r+0x1e8>
 80087f2:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80087f4:	fb02 1103 	mla	r1, r2, r3, r1
 80087f8:	3930      	subs	r1, #48	@ 0x30
 80087fa:	9143      	str	r1, [sp, #268]	@ 0x10c
 80087fc:	464d      	mov	r5, r9
 80087fe:	e7d2      	b.n	80087a6 <__ssvfiscanf_r+0xaa>
 8008800:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8008804:	2a20      	cmp	r2, #32
 8008806:	d8ef      	bhi.n	80087e8 <__ssvfiscanf_r+0xec>
 8008808:	a101      	add	r1, pc, #4	@ (adr r1, 8008810 <__ssvfiscanf_r+0x114>)
 800880a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800880e:	bf00      	nop
 8008810:	080088c3 	.word	0x080088c3
 8008814:	080087e9 	.word	0x080087e9
 8008818:	080087e9 	.word	0x080087e9
 800881c:	0800891d 	.word	0x0800891d
 8008820:	080087e9 	.word	0x080087e9
 8008824:	080087e9 	.word	0x080087e9
 8008828:	080087e9 	.word	0x080087e9
 800882c:	080087e9 	.word	0x080087e9
 8008830:	080087e9 	.word	0x080087e9
 8008834:	080087e9 	.word	0x080087e9
 8008838:	080087e9 	.word	0x080087e9
 800883c:	08008933 	.word	0x08008933
 8008840:	08008919 	.word	0x08008919
 8008844:	0800889b 	.word	0x0800889b
 8008848:	0800889b 	.word	0x0800889b
 800884c:	0800889b 	.word	0x0800889b
 8008850:	080087e9 	.word	0x080087e9
 8008854:	080088d5 	.word	0x080088d5
 8008858:	080087e9 	.word	0x080087e9
 800885c:	080087e9 	.word	0x080087e9
 8008860:	080087e9 	.word	0x080087e9
 8008864:	080087e9 	.word	0x080087e9
 8008868:	08008943 	.word	0x08008943
 800886c:	080088dd 	.word	0x080088dd
 8008870:	080088bb 	.word	0x080088bb
 8008874:	080087e9 	.word	0x080087e9
 8008878:	080087e9 	.word	0x080087e9
 800887c:	0800893f 	.word	0x0800893f
 8008880:	080087e9 	.word	0x080087e9
 8008884:	08008919 	.word	0x08008919
 8008888:	080087e9 	.word	0x080087e9
 800888c:	080087e9 	.word	0x080087e9
 8008890:	080088c3 	.word	0x080088c3
 8008894:	3b45      	subs	r3, #69	@ 0x45
 8008896:	2b02      	cmp	r3, #2
 8008898:	d8a6      	bhi.n	80087e8 <__ssvfiscanf_r+0xec>
 800889a:	2305      	movs	r3, #5
 800889c:	e021      	b.n	80088e2 <__ssvfiscanf_r+0x1e6>
 800889e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80088a0:	4621      	mov	r1, r4
 80088a2:	4630      	mov	r0, r6
 80088a4:	4798      	blx	r3
 80088a6:	2800      	cmp	r0, #0
 80088a8:	f43f af66 	beq.w	8008778 <__ssvfiscanf_r+0x7c>
 80088ac:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80088ae:	2800      	cmp	r0, #0
 80088b0:	f040 808b 	bne.w	80089ca <__ssvfiscanf_r+0x2ce>
 80088b4:	f04f 30ff 	mov.w	r0, #4294967295
 80088b8:	e08b      	b.n	80089d2 <__ssvfiscanf_r+0x2d6>
 80088ba:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80088bc:	f042 0220 	orr.w	r2, r2, #32
 80088c0:	9241      	str	r2, [sp, #260]	@ 0x104
 80088c2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80088c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80088c8:	9241      	str	r2, [sp, #260]	@ 0x104
 80088ca:	2210      	movs	r2, #16
 80088cc:	2b6e      	cmp	r3, #110	@ 0x6e
 80088ce:	9242      	str	r2, [sp, #264]	@ 0x108
 80088d0:	d902      	bls.n	80088d8 <__ssvfiscanf_r+0x1dc>
 80088d2:	e005      	b.n	80088e0 <__ssvfiscanf_r+0x1e4>
 80088d4:	2300      	movs	r3, #0
 80088d6:	9342      	str	r3, [sp, #264]	@ 0x108
 80088d8:	2303      	movs	r3, #3
 80088da:	e002      	b.n	80088e2 <__ssvfiscanf_r+0x1e6>
 80088dc:	2308      	movs	r3, #8
 80088de:	9342      	str	r3, [sp, #264]	@ 0x108
 80088e0:	2304      	movs	r3, #4
 80088e2:	9347      	str	r3, [sp, #284]	@ 0x11c
 80088e4:	6863      	ldr	r3, [r4, #4]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	dd39      	ble.n	800895e <__ssvfiscanf_r+0x262>
 80088ea:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80088ec:	0659      	lsls	r1, r3, #25
 80088ee:	d404      	bmi.n	80088fa <__ssvfiscanf_r+0x1fe>
 80088f0:	6823      	ldr	r3, [r4, #0]
 80088f2:	781a      	ldrb	r2, [r3, #0]
 80088f4:	5cba      	ldrb	r2, [r7, r2]
 80088f6:	0712      	lsls	r2, r2, #28
 80088f8:	d438      	bmi.n	800896c <__ssvfiscanf_r+0x270>
 80088fa:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80088fc:	2b02      	cmp	r3, #2
 80088fe:	dc47      	bgt.n	8008990 <__ssvfiscanf_r+0x294>
 8008900:	466b      	mov	r3, sp
 8008902:	4622      	mov	r2, r4
 8008904:	a941      	add	r1, sp, #260	@ 0x104
 8008906:	4630      	mov	r0, r6
 8008908:	f000 f9fa 	bl	8008d00 <_scanf_chars>
 800890c:	2801      	cmp	r0, #1
 800890e:	d064      	beq.n	80089da <__ssvfiscanf_r+0x2de>
 8008910:	2802      	cmp	r0, #2
 8008912:	f47f af18 	bne.w	8008746 <__ssvfiscanf_r+0x4a>
 8008916:	e7c9      	b.n	80088ac <__ssvfiscanf_r+0x1b0>
 8008918:	220a      	movs	r2, #10
 800891a:	e7d7      	b.n	80088cc <__ssvfiscanf_r+0x1d0>
 800891c:	4629      	mov	r1, r5
 800891e:	4640      	mov	r0, r8
 8008920:	f000 fc4a 	bl	80091b8 <__sccl>
 8008924:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008926:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800892a:	9341      	str	r3, [sp, #260]	@ 0x104
 800892c:	4605      	mov	r5, r0
 800892e:	2301      	movs	r3, #1
 8008930:	e7d7      	b.n	80088e2 <__ssvfiscanf_r+0x1e6>
 8008932:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008934:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008938:	9341      	str	r3, [sp, #260]	@ 0x104
 800893a:	2300      	movs	r3, #0
 800893c:	e7d1      	b.n	80088e2 <__ssvfiscanf_r+0x1e6>
 800893e:	2302      	movs	r3, #2
 8008940:	e7cf      	b.n	80088e2 <__ssvfiscanf_r+0x1e6>
 8008942:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8008944:	06c3      	lsls	r3, r0, #27
 8008946:	f53f aefe 	bmi.w	8008746 <__ssvfiscanf_r+0x4a>
 800894a:	9b00      	ldr	r3, [sp, #0]
 800894c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800894e:	1d19      	adds	r1, r3, #4
 8008950:	9100      	str	r1, [sp, #0]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	07c0      	lsls	r0, r0, #31
 8008956:	bf4c      	ite	mi
 8008958:	801a      	strhmi	r2, [r3, #0]
 800895a:	601a      	strpl	r2, [r3, #0]
 800895c:	e6f3      	b.n	8008746 <__ssvfiscanf_r+0x4a>
 800895e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008960:	4621      	mov	r1, r4
 8008962:	4630      	mov	r0, r6
 8008964:	4798      	blx	r3
 8008966:	2800      	cmp	r0, #0
 8008968:	d0bf      	beq.n	80088ea <__ssvfiscanf_r+0x1ee>
 800896a:	e79f      	b.n	80088ac <__ssvfiscanf_r+0x1b0>
 800896c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800896e:	3201      	adds	r2, #1
 8008970:	9245      	str	r2, [sp, #276]	@ 0x114
 8008972:	6862      	ldr	r2, [r4, #4]
 8008974:	3a01      	subs	r2, #1
 8008976:	2a00      	cmp	r2, #0
 8008978:	6062      	str	r2, [r4, #4]
 800897a:	dd02      	ble.n	8008982 <__ssvfiscanf_r+0x286>
 800897c:	3301      	adds	r3, #1
 800897e:	6023      	str	r3, [r4, #0]
 8008980:	e7b6      	b.n	80088f0 <__ssvfiscanf_r+0x1f4>
 8008982:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008984:	4621      	mov	r1, r4
 8008986:	4630      	mov	r0, r6
 8008988:	4798      	blx	r3
 800898a:	2800      	cmp	r0, #0
 800898c:	d0b0      	beq.n	80088f0 <__ssvfiscanf_r+0x1f4>
 800898e:	e78d      	b.n	80088ac <__ssvfiscanf_r+0x1b0>
 8008990:	2b04      	cmp	r3, #4
 8008992:	dc0f      	bgt.n	80089b4 <__ssvfiscanf_r+0x2b8>
 8008994:	466b      	mov	r3, sp
 8008996:	4622      	mov	r2, r4
 8008998:	a941      	add	r1, sp, #260	@ 0x104
 800899a:	4630      	mov	r0, r6
 800899c:	f000 fa0a 	bl	8008db4 <_scanf_i>
 80089a0:	e7b4      	b.n	800890c <__ssvfiscanf_r+0x210>
 80089a2:	bf00      	nop
 80089a4:	0800864d 	.word	0x0800864d
 80089a8:	080086c3 	.word	0x080086c3
 80089ac:	0800981b 	.word	0x0800981b
 80089b0:	080097d2 	.word	0x080097d2
 80089b4:	4b0a      	ldr	r3, [pc, #40]	@ (80089e0 <__ssvfiscanf_r+0x2e4>)
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	f43f aec5 	beq.w	8008746 <__ssvfiscanf_r+0x4a>
 80089bc:	466b      	mov	r3, sp
 80089be:	4622      	mov	r2, r4
 80089c0:	a941      	add	r1, sp, #260	@ 0x104
 80089c2:	4630      	mov	r0, r6
 80089c4:	f3af 8000 	nop.w
 80089c8:	e7a0      	b.n	800890c <__ssvfiscanf_r+0x210>
 80089ca:	89a3      	ldrh	r3, [r4, #12]
 80089cc:	065b      	lsls	r3, r3, #25
 80089ce:	f53f af71 	bmi.w	80088b4 <__ssvfiscanf_r+0x1b8>
 80089d2:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80089d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089da:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80089dc:	e7f9      	b.n	80089d2 <__ssvfiscanf_r+0x2d6>
 80089de:	bf00      	nop
 80089e0:	00000000 	.word	0x00000000

080089e4 <_printf_common>:
 80089e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089e8:	4616      	mov	r6, r2
 80089ea:	4698      	mov	r8, r3
 80089ec:	688a      	ldr	r2, [r1, #8]
 80089ee:	690b      	ldr	r3, [r1, #16]
 80089f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80089f4:	4293      	cmp	r3, r2
 80089f6:	bfb8      	it	lt
 80089f8:	4613      	movlt	r3, r2
 80089fa:	6033      	str	r3, [r6, #0]
 80089fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008a00:	4607      	mov	r7, r0
 8008a02:	460c      	mov	r4, r1
 8008a04:	b10a      	cbz	r2, 8008a0a <_printf_common+0x26>
 8008a06:	3301      	adds	r3, #1
 8008a08:	6033      	str	r3, [r6, #0]
 8008a0a:	6823      	ldr	r3, [r4, #0]
 8008a0c:	0699      	lsls	r1, r3, #26
 8008a0e:	bf42      	ittt	mi
 8008a10:	6833      	ldrmi	r3, [r6, #0]
 8008a12:	3302      	addmi	r3, #2
 8008a14:	6033      	strmi	r3, [r6, #0]
 8008a16:	6825      	ldr	r5, [r4, #0]
 8008a18:	f015 0506 	ands.w	r5, r5, #6
 8008a1c:	d106      	bne.n	8008a2c <_printf_common+0x48>
 8008a1e:	f104 0a19 	add.w	sl, r4, #25
 8008a22:	68e3      	ldr	r3, [r4, #12]
 8008a24:	6832      	ldr	r2, [r6, #0]
 8008a26:	1a9b      	subs	r3, r3, r2
 8008a28:	42ab      	cmp	r3, r5
 8008a2a:	dc26      	bgt.n	8008a7a <_printf_common+0x96>
 8008a2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008a30:	6822      	ldr	r2, [r4, #0]
 8008a32:	3b00      	subs	r3, #0
 8008a34:	bf18      	it	ne
 8008a36:	2301      	movne	r3, #1
 8008a38:	0692      	lsls	r2, r2, #26
 8008a3a:	d42b      	bmi.n	8008a94 <_printf_common+0xb0>
 8008a3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008a40:	4641      	mov	r1, r8
 8008a42:	4638      	mov	r0, r7
 8008a44:	47c8      	blx	r9
 8008a46:	3001      	adds	r0, #1
 8008a48:	d01e      	beq.n	8008a88 <_printf_common+0xa4>
 8008a4a:	6823      	ldr	r3, [r4, #0]
 8008a4c:	6922      	ldr	r2, [r4, #16]
 8008a4e:	f003 0306 	and.w	r3, r3, #6
 8008a52:	2b04      	cmp	r3, #4
 8008a54:	bf02      	ittt	eq
 8008a56:	68e5      	ldreq	r5, [r4, #12]
 8008a58:	6833      	ldreq	r3, [r6, #0]
 8008a5a:	1aed      	subeq	r5, r5, r3
 8008a5c:	68a3      	ldr	r3, [r4, #8]
 8008a5e:	bf0c      	ite	eq
 8008a60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a64:	2500      	movne	r5, #0
 8008a66:	4293      	cmp	r3, r2
 8008a68:	bfc4      	itt	gt
 8008a6a:	1a9b      	subgt	r3, r3, r2
 8008a6c:	18ed      	addgt	r5, r5, r3
 8008a6e:	2600      	movs	r6, #0
 8008a70:	341a      	adds	r4, #26
 8008a72:	42b5      	cmp	r5, r6
 8008a74:	d11a      	bne.n	8008aac <_printf_common+0xc8>
 8008a76:	2000      	movs	r0, #0
 8008a78:	e008      	b.n	8008a8c <_printf_common+0xa8>
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	4652      	mov	r2, sl
 8008a7e:	4641      	mov	r1, r8
 8008a80:	4638      	mov	r0, r7
 8008a82:	47c8      	blx	r9
 8008a84:	3001      	adds	r0, #1
 8008a86:	d103      	bne.n	8008a90 <_printf_common+0xac>
 8008a88:	f04f 30ff 	mov.w	r0, #4294967295
 8008a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a90:	3501      	adds	r5, #1
 8008a92:	e7c6      	b.n	8008a22 <_printf_common+0x3e>
 8008a94:	18e1      	adds	r1, r4, r3
 8008a96:	1c5a      	adds	r2, r3, #1
 8008a98:	2030      	movs	r0, #48	@ 0x30
 8008a9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008a9e:	4422      	add	r2, r4
 8008aa0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008aa4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008aa8:	3302      	adds	r3, #2
 8008aaa:	e7c7      	b.n	8008a3c <_printf_common+0x58>
 8008aac:	2301      	movs	r3, #1
 8008aae:	4622      	mov	r2, r4
 8008ab0:	4641      	mov	r1, r8
 8008ab2:	4638      	mov	r0, r7
 8008ab4:	47c8      	blx	r9
 8008ab6:	3001      	adds	r0, #1
 8008ab8:	d0e6      	beq.n	8008a88 <_printf_common+0xa4>
 8008aba:	3601      	adds	r6, #1
 8008abc:	e7d9      	b.n	8008a72 <_printf_common+0x8e>
	...

08008ac0 <_printf_i>:
 8008ac0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ac4:	7e0f      	ldrb	r7, [r1, #24]
 8008ac6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008ac8:	2f78      	cmp	r7, #120	@ 0x78
 8008aca:	4691      	mov	r9, r2
 8008acc:	4680      	mov	r8, r0
 8008ace:	460c      	mov	r4, r1
 8008ad0:	469a      	mov	sl, r3
 8008ad2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008ad6:	d807      	bhi.n	8008ae8 <_printf_i+0x28>
 8008ad8:	2f62      	cmp	r7, #98	@ 0x62
 8008ada:	d80a      	bhi.n	8008af2 <_printf_i+0x32>
 8008adc:	2f00      	cmp	r7, #0
 8008ade:	f000 80d2 	beq.w	8008c86 <_printf_i+0x1c6>
 8008ae2:	2f58      	cmp	r7, #88	@ 0x58
 8008ae4:	f000 80b9 	beq.w	8008c5a <_printf_i+0x19a>
 8008ae8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008aec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008af0:	e03a      	b.n	8008b68 <_printf_i+0xa8>
 8008af2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008af6:	2b15      	cmp	r3, #21
 8008af8:	d8f6      	bhi.n	8008ae8 <_printf_i+0x28>
 8008afa:	a101      	add	r1, pc, #4	@ (adr r1, 8008b00 <_printf_i+0x40>)
 8008afc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b00:	08008b59 	.word	0x08008b59
 8008b04:	08008b6d 	.word	0x08008b6d
 8008b08:	08008ae9 	.word	0x08008ae9
 8008b0c:	08008ae9 	.word	0x08008ae9
 8008b10:	08008ae9 	.word	0x08008ae9
 8008b14:	08008ae9 	.word	0x08008ae9
 8008b18:	08008b6d 	.word	0x08008b6d
 8008b1c:	08008ae9 	.word	0x08008ae9
 8008b20:	08008ae9 	.word	0x08008ae9
 8008b24:	08008ae9 	.word	0x08008ae9
 8008b28:	08008ae9 	.word	0x08008ae9
 8008b2c:	08008c6d 	.word	0x08008c6d
 8008b30:	08008b97 	.word	0x08008b97
 8008b34:	08008c27 	.word	0x08008c27
 8008b38:	08008ae9 	.word	0x08008ae9
 8008b3c:	08008ae9 	.word	0x08008ae9
 8008b40:	08008c8f 	.word	0x08008c8f
 8008b44:	08008ae9 	.word	0x08008ae9
 8008b48:	08008b97 	.word	0x08008b97
 8008b4c:	08008ae9 	.word	0x08008ae9
 8008b50:	08008ae9 	.word	0x08008ae9
 8008b54:	08008c2f 	.word	0x08008c2f
 8008b58:	6833      	ldr	r3, [r6, #0]
 8008b5a:	1d1a      	adds	r2, r3, #4
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	6032      	str	r2, [r6, #0]
 8008b60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008b68:	2301      	movs	r3, #1
 8008b6a:	e09d      	b.n	8008ca8 <_printf_i+0x1e8>
 8008b6c:	6833      	ldr	r3, [r6, #0]
 8008b6e:	6820      	ldr	r0, [r4, #0]
 8008b70:	1d19      	adds	r1, r3, #4
 8008b72:	6031      	str	r1, [r6, #0]
 8008b74:	0606      	lsls	r6, r0, #24
 8008b76:	d501      	bpl.n	8008b7c <_printf_i+0xbc>
 8008b78:	681d      	ldr	r5, [r3, #0]
 8008b7a:	e003      	b.n	8008b84 <_printf_i+0xc4>
 8008b7c:	0645      	lsls	r5, r0, #25
 8008b7e:	d5fb      	bpl.n	8008b78 <_printf_i+0xb8>
 8008b80:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008b84:	2d00      	cmp	r5, #0
 8008b86:	da03      	bge.n	8008b90 <_printf_i+0xd0>
 8008b88:	232d      	movs	r3, #45	@ 0x2d
 8008b8a:	426d      	negs	r5, r5
 8008b8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b90:	4859      	ldr	r0, [pc, #356]	@ (8008cf8 <_printf_i+0x238>)
 8008b92:	230a      	movs	r3, #10
 8008b94:	e011      	b.n	8008bba <_printf_i+0xfa>
 8008b96:	6821      	ldr	r1, [r4, #0]
 8008b98:	6833      	ldr	r3, [r6, #0]
 8008b9a:	0608      	lsls	r0, r1, #24
 8008b9c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008ba0:	d402      	bmi.n	8008ba8 <_printf_i+0xe8>
 8008ba2:	0649      	lsls	r1, r1, #25
 8008ba4:	bf48      	it	mi
 8008ba6:	b2ad      	uxthmi	r5, r5
 8008ba8:	2f6f      	cmp	r7, #111	@ 0x6f
 8008baa:	4853      	ldr	r0, [pc, #332]	@ (8008cf8 <_printf_i+0x238>)
 8008bac:	6033      	str	r3, [r6, #0]
 8008bae:	bf14      	ite	ne
 8008bb0:	230a      	movne	r3, #10
 8008bb2:	2308      	moveq	r3, #8
 8008bb4:	2100      	movs	r1, #0
 8008bb6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008bba:	6866      	ldr	r6, [r4, #4]
 8008bbc:	60a6      	str	r6, [r4, #8]
 8008bbe:	2e00      	cmp	r6, #0
 8008bc0:	bfa2      	ittt	ge
 8008bc2:	6821      	ldrge	r1, [r4, #0]
 8008bc4:	f021 0104 	bicge.w	r1, r1, #4
 8008bc8:	6021      	strge	r1, [r4, #0]
 8008bca:	b90d      	cbnz	r5, 8008bd0 <_printf_i+0x110>
 8008bcc:	2e00      	cmp	r6, #0
 8008bce:	d04b      	beq.n	8008c68 <_printf_i+0x1a8>
 8008bd0:	4616      	mov	r6, r2
 8008bd2:	fbb5 f1f3 	udiv	r1, r5, r3
 8008bd6:	fb03 5711 	mls	r7, r3, r1, r5
 8008bda:	5dc7      	ldrb	r7, [r0, r7]
 8008bdc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008be0:	462f      	mov	r7, r5
 8008be2:	42bb      	cmp	r3, r7
 8008be4:	460d      	mov	r5, r1
 8008be6:	d9f4      	bls.n	8008bd2 <_printf_i+0x112>
 8008be8:	2b08      	cmp	r3, #8
 8008bea:	d10b      	bne.n	8008c04 <_printf_i+0x144>
 8008bec:	6823      	ldr	r3, [r4, #0]
 8008bee:	07df      	lsls	r7, r3, #31
 8008bf0:	d508      	bpl.n	8008c04 <_printf_i+0x144>
 8008bf2:	6923      	ldr	r3, [r4, #16]
 8008bf4:	6861      	ldr	r1, [r4, #4]
 8008bf6:	4299      	cmp	r1, r3
 8008bf8:	bfde      	ittt	le
 8008bfa:	2330      	movle	r3, #48	@ 0x30
 8008bfc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008c00:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008c04:	1b92      	subs	r2, r2, r6
 8008c06:	6122      	str	r2, [r4, #16]
 8008c08:	f8cd a000 	str.w	sl, [sp]
 8008c0c:	464b      	mov	r3, r9
 8008c0e:	aa03      	add	r2, sp, #12
 8008c10:	4621      	mov	r1, r4
 8008c12:	4640      	mov	r0, r8
 8008c14:	f7ff fee6 	bl	80089e4 <_printf_common>
 8008c18:	3001      	adds	r0, #1
 8008c1a:	d14a      	bne.n	8008cb2 <_printf_i+0x1f2>
 8008c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c20:	b004      	add	sp, #16
 8008c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c26:	6823      	ldr	r3, [r4, #0]
 8008c28:	f043 0320 	orr.w	r3, r3, #32
 8008c2c:	6023      	str	r3, [r4, #0]
 8008c2e:	4833      	ldr	r0, [pc, #204]	@ (8008cfc <_printf_i+0x23c>)
 8008c30:	2778      	movs	r7, #120	@ 0x78
 8008c32:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008c36:	6823      	ldr	r3, [r4, #0]
 8008c38:	6831      	ldr	r1, [r6, #0]
 8008c3a:	061f      	lsls	r7, r3, #24
 8008c3c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008c40:	d402      	bmi.n	8008c48 <_printf_i+0x188>
 8008c42:	065f      	lsls	r7, r3, #25
 8008c44:	bf48      	it	mi
 8008c46:	b2ad      	uxthmi	r5, r5
 8008c48:	6031      	str	r1, [r6, #0]
 8008c4a:	07d9      	lsls	r1, r3, #31
 8008c4c:	bf44      	itt	mi
 8008c4e:	f043 0320 	orrmi.w	r3, r3, #32
 8008c52:	6023      	strmi	r3, [r4, #0]
 8008c54:	b11d      	cbz	r5, 8008c5e <_printf_i+0x19e>
 8008c56:	2310      	movs	r3, #16
 8008c58:	e7ac      	b.n	8008bb4 <_printf_i+0xf4>
 8008c5a:	4827      	ldr	r0, [pc, #156]	@ (8008cf8 <_printf_i+0x238>)
 8008c5c:	e7e9      	b.n	8008c32 <_printf_i+0x172>
 8008c5e:	6823      	ldr	r3, [r4, #0]
 8008c60:	f023 0320 	bic.w	r3, r3, #32
 8008c64:	6023      	str	r3, [r4, #0]
 8008c66:	e7f6      	b.n	8008c56 <_printf_i+0x196>
 8008c68:	4616      	mov	r6, r2
 8008c6a:	e7bd      	b.n	8008be8 <_printf_i+0x128>
 8008c6c:	6833      	ldr	r3, [r6, #0]
 8008c6e:	6825      	ldr	r5, [r4, #0]
 8008c70:	6961      	ldr	r1, [r4, #20]
 8008c72:	1d18      	adds	r0, r3, #4
 8008c74:	6030      	str	r0, [r6, #0]
 8008c76:	062e      	lsls	r6, r5, #24
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	d501      	bpl.n	8008c80 <_printf_i+0x1c0>
 8008c7c:	6019      	str	r1, [r3, #0]
 8008c7e:	e002      	b.n	8008c86 <_printf_i+0x1c6>
 8008c80:	0668      	lsls	r0, r5, #25
 8008c82:	d5fb      	bpl.n	8008c7c <_printf_i+0x1bc>
 8008c84:	8019      	strh	r1, [r3, #0]
 8008c86:	2300      	movs	r3, #0
 8008c88:	6123      	str	r3, [r4, #16]
 8008c8a:	4616      	mov	r6, r2
 8008c8c:	e7bc      	b.n	8008c08 <_printf_i+0x148>
 8008c8e:	6833      	ldr	r3, [r6, #0]
 8008c90:	1d1a      	adds	r2, r3, #4
 8008c92:	6032      	str	r2, [r6, #0]
 8008c94:	681e      	ldr	r6, [r3, #0]
 8008c96:	6862      	ldr	r2, [r4, #4]
 8008c98:	2100      	movs	r1, #0
 8008c9a:	4630      	mov	r0, r6
 8008c9c:	f7f7 fad8 	bl	8000250 <memchr>
 8008ca0:	b108      	cbz	r0, 8008ca6 <_printf_i+0x1e6>
 8008ca2:	1b80      	subs	r0, r0, r6
 8008ca4:	6060      	str	r0, [r4, #4]
 8008ca6:	6863      	ldr	r3, [r4, #4]
 8008ca8:	6123      	str	r3, [r4, #16]
 8008caa:	2300      	movs	r3, #0
 8008cac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008cb0:	e7aa      	b.n	8008c08 <_printf_i+0x148>
 8008cb2:	6923      	ldr	r3, [r4, #16]
 8008cb4:	4632      	mov	r2, r6
 8008cb6:	4649      	mov	r1, r9
 8008cb8:	4640      	mov	r0, r8
 8008cba:	47d0      	blx	sl
 8008cbc:	3001      	adds	r0, #1
 8008cbe:	d0ad      	beq.n	8008c1c <_printf_i+0x15c>
 8008cc0:	6823      	ldr	r3, [r4, #0]
 8008cc2:	079b      	lsls	r3, r3, #30
 8008cc4:	d413      	bmi.n	8008cee <_printf_i+0x22e>
 8008cc6:	68e0      	ldr	r0, [r4, #12]
 8008cc8:	9b03      	ldr	r3, [sp, #12]
 8008cca:	4298      	cmp	r0, r3
 8008ccc:	bfb8      	it	lt
 8008cce:	4618      	movlt	r0, r3
 8008cd0:	e7a6      	b.n	8008c20 <_printf_i+0x160>
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	4632      	mov	r2, r6
 8008cd6:	4649      	mov	r1, r9
 8008cd8:	4640      	mov	r0, r8
 8008cda:	47d0      	blx	sl
 8008cdc:	3001      	adds	r0, #1
 8008cde:	d09d      	beq.n	8008c1c <_printf_i+0x15c>
 8008ce0:	3501      	adds	r5, #1
 8008ce2:	68e3      	ldr	r3, [r4, #12]
 8008ce4:	9903      	ldr	r1, [sp, #12]
 8008ce6:	1a5b      	subs	r3, r3, r1
 8008ce8:	42ab      	cmp	r3, r5
 8008cea:	dcf2      	bgt.n	8008cd2 <_printf_i+0x212>
 8008cec:	e7eb      	b.n	8008cc6 <_printf_i+0x206>
 8008cee:	2500      	movs	r5, #0
 8008cf0:	f104 0619 	add.w	r6, r4, #25
 8008cf4:	e7f5      	b.n	8008ce2 <_printf_i+0x222>
 8008cf6:	bf00      	nop
 8008cf8:	080097dd 	.word	0x080097dd
 8008cfc:	080097ee 	.word	0x080097ee

08008d00 <_scanf_chars>:
 8008d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d04:	4615      	mov	r5, r2
 8008d06:	688a      	ldr	r2, [r1, #8]
 8008d08:	4680      	mov	r8, r0
 8008d0a:	460c      	mov	r4, r1
 8008d0c:	b932      	cbnz	r2, 8008d1c <_scanf_chars+0x1c>
 8008d0e:	698a      	ldr	r2, [r1, #24]
 8008d10:	2a00      	cmp	r2, #0
 8008d12:	bf14      	ite	ne
 8008d14:	f04f 32ff 	movne.w	r2, #4294967295
 8008d18:	2201      	moveq	r2, #1
 8008d1a:	608a      	str	r2, [r1, #8]
 8008d1c:	6822      	ldr	r2, [r4, #0]
 8008d1e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8008db0 <_scanf_chars+0xb0>
 8008d22:	06d1      	lsls	r1, r2, #27
 8008d24:	bf5f      	itttt	pl
 8008d26:	681a      	ldrpl	r2, [r3, #0]
 8008d28:	1d11      	addpl	r1, r2, #4
 8008d2a:	6019      	strpl	r1, [r3, #0]
 8008d2c:	6816      	ldrpl	r6, [r2, #0]
 8008d2e:	2700      	movs	r7, #0
 8008d30:	69a0      	ldr	r0, [r4, #24]
 8008d32:	b188      	cbz	r0, 8008d58 <_scanf_chars+0x58>
 8008d34:	2801      	cmp	r0, #1
 8008d36:	d107      	bne.n	8008d48 <_scanf_chars+0x48>
 8008d38:	682b      	ldr	r3, [r5, #0]
 8008d3a:	781a      	ldrb	r2, [r3, #0]
 8008d3c:	6963      	ldr	r3, [r4, #20]
 8008d3e:	5c9b      	ldrb	r3, [r3, r2]
 8008d40:	b953      	cbnz	r3, 8008d58 <_scanf_chars+0x58>
 8008d42:	2f00      	cmp	r7, #0
 8008d44:	d031      	beq.n	8008daa <_scanf_chars+0xaa>
 8008d46:	e022      	b.n	8008d8e <_scanf_chars+0x8e>
 8008d48:	2802      	cmp	r0, #2
 8008d4a:	d120      	bne.n	8008d8e <_scanf_chars+0x8e>
 8008d4c:	682b      	ldr	r3, [r5, #0]
 8008d4e:	781b      	ldrb	r3, [r3, #0]
 8008d50:	f819 3003 	ldrb.w	r3, [r9, r3]
 8008d54:	071b      	lsls	r3, r3, #28
 8008d56:	d41a      	bmi.n	8008d8e <_scanf_chars+0x8e>
 8008d58:	6823      	ldr	r3, [r4, #0]
 8008d5a:	06da      	lsls	r2, r3, #27
 8008d5c:	bf5e      	ittt	pl
 8008d5e:	682b      	ldrpl	r3, [r5, #0]
 8008d60:	781b      	ldrbpl	r3, [r3, #0]
 8008d62:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008d66:	682a      	ldr	r2, [r5, #0]
 8008d68:	686b      	ldr	r3, [r5, #4]
 8008d6a:	3201      	adds	r2, #1
 8008d6c:	602a      	str	r2, [r5, #0]
 8008d6e:	68a2      	ldr	r2, [r4, #8]
 8008d70:	3b01      	subs	r3, #1
 8008d72:	3a01      	subs	r2, #1
 8008d74:	606b      	str	r3, [r5, #4]
 8008d76:	3701      	adds	r7, #1
 8008d78:	60a2      	str	r2, [r4, #8]
 8008d7a:	b142      	cbz	r2, 8008d8e <_scanf_chars+0x8e>
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	dcd7      	bgt.n	8008d30 <_scanf_chars+0x30>
 8008d80:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008d84:	4629      	mov	r1, r5
 8008d86:	4640      	mov	r0, r8
 8008d88:	4798      	blx	r3
 8008d8a:	2800      	cmp	r0, #0
 8008d8c:	d0d0      	beq.n	8008d30 <_scanf_chars+0x30>
 8008d8e:	6823      	ldr	r3, [r4, #0]
 8008d90:	f013 0310 	ands.w	r3, r3, #16
 8008d94:	d105      	bne.n	8008da2 <_scanf_chars+0xa2>
 8008d96:	68e2      	ldr	r2, [r4, #12]
 8008d98:	3201      	adds	r2, #1
 8008d9a:	60e2      	str	r2, [r4, #12]
 8008d9c:	69a2      	ldr	r2, [r4, #24]
 8008d9e:	b102      	cbz	r2, 8008da2 <_scanf_chars+0xa2>
 8008da0:	7033      	strb	r3, [r6, #0]
 8008da2:	6923      	ldr	r3, [r4, #16]
 8008da4:	443b      	add	r3, r7
 8008da6:	6123      	str	r3, [r4, #16]
 8008da8:	2000      	movs	r0, #0
 8008daa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dae:	bf00      	nop
 8008db0:	0800981b 	.word	0x0800981b

08008db4 <_scanf_i>:
 8008db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008db8:	4698      	mov	r8, r3
 8008dba:	4b74      	ldr	r3, [pc, #464]	@ (8008f8c <_scanf_i+0x1d8>)
 8008dbc:	460c      	mov	r4, r1
 8008dbe:	4682      	mov	sl, r0
 8008dc0:	4616      	mov	r6, r2
 8008dc2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008dc6:	b087      	sub	sp, #28
 8008dc8:	ab03      	add	r3, sp, #12
 8008dca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008dce:	4b70      	ldr	r3, [pc, #448]	@ (8008f90 <_scanf_i+0x1dc>)
 8008dd0:	69a1      	ldr	r1, [r4, #24]
 8008dd2:	4a70      	ldr	r2, [pc, #448]	@ (8008f94 <_scanf_i+0x1e0>)
 8008dd4:	2903      	cmp	r1, #3
 8008dd6:	bf08      	it	eq
 8008dd8:	461a      	moveq	r2, r3
 8008dda:	68a3      	ldr	r3, [r4, #8]
 8008ddc:	9201      	str	r2, [sp, #4]
 8008dde:	1e5a      	subs	r2, r3, #1
 8008de0:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008de4:	bf88      	it	hi
 8008de6:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008dea:	4627      	mov	r7, r4
 8008dec:	bf82      	ittt	hi
 8008dee:	eb03 0905 	addhi.w	r9, r3, r5
 8008df2:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008df6:	60a3      	strhi	r3, [r4, #8]
 8008df8:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008dfc:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8008e00:	bf98      	it	ls
 8008e02:	f04f 0900 	movls.w	r9, #0
 8008e06:	6023      	str	r3, [r4, #0]
 8008e08:	463d      	mov	r5, r7
 8008e0a:	f04f 0b00 	mov.w	fp, #0
 8008e0e:	6831      	ldr	r1, [r6, #0]
 8008e10:	ab03      	add	r3, sp, #12
 8008e12:	7809      	ldrb	r1, [r1, #0]
 8008e14:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008e18:	2202      	movs	r2, #2
 8008e1a:	f7f7 fa19 	bl	8000250 <memchr>
 8008e1e:	b328      	cbz	r0, 8008e6c <_scanf_i+0xb8>
 8008e20:	f1bb 0f01 	cmp.w	fp, #1
 8008e24:	d159      	bne.n	8008eda <_scanf_i+0x126>
 8008e26:	6862      	ldr	r2, [r4, #4]
 8008e28:	b92a      	cbnz	r2, 8008e36 <_scanf_i+0x82>
 8008e2a:	6822      	ldr	r2, [r4, #0]
 8008e2c:	2108      	movs	r1, #8
 8008e2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008e32:	6061      	str	r1, [r4, #4]
 8008e34:	6022      	str	r2, [r4, #0]
 8008e36:	6822      	ldr	r2, [r4, #0]
 8008e38:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8008e3c:	6022      	str	r2, [r4, #0]
 8008e3e:	68a2      	ldr	r2, [r4, #8]
 8008e40:	1e51      	subs	r1, r2, #1
 8008e42:	60a1      	str	r1, [r4, #8]
 8008e44:	b192      	cbz	r2, 8008e6c <_scanf_i+0xb8>
 8008e46:	6832      	ldr	r2, [r6, #0]
 8008e48:	1c51      	adds	r1, r2, #1
 8008e4a:	6031      	str	r1, [r6, #0]
 8008e4c:	7812      	ldrb	r2, [r2, #0]
 8008e4e:	f805 2b01 	strb.w	r2, [r5], #1
 8008e52:	6872      	ldr	r2, [r6, #4]
 8008e54:	3a01      	subs	r2, #1
 8008e56:	2a00      	cmp	r2, #0
 8008e58:	6072      	str	r2, [r6, #4]
 8008e5a:	dc07      	bgt.n	8008e6c <_scanf_i+0xb8>
 8008e5c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8008e60:	4631      	mov	r1, r6
 8008e62:	4650      	mov	r0, sl
 8008e64:	4790      	blx	r2
 8008e66:	2800      	cmp	r0, #0
 8008e68:	f040 8085 	bne.w	8008f76 <_scanf_i+0x1c2>
 8008e6c:	f10b 0b01 	add.w	fp, fp, #1
 8008e70:	f1bb 0f03 	cmp.w	fp, #3
 8008e74:	d1cb      	bne.n	8008e0e <_scanf_i+0x5a>
 8008e76:	6863      	ldr	r3, [r4, #4]
 8008e78:	b90b      	cbnz	r3, 8008e7e <_scanf_i+0xca>
 8008e7a:	230a      	movs	r3, #10
 8008e7c:	6063      	str	r3, [r4, #4]
 8008e7e:	6863      	ldr	r3, [r4, #4]
 8008e80:	4945      	ldr	r1, [pc, #276]	@ (8008f98 <_scanf_i+0x1e4>)
 8008e82:	6960      	ldr	r0, [r4, #20]
 8008e84:	1ac9      	subs	r1, r1, r3
 8008e86:	f000 f997 	bl	80091b8 <__sccl>
 8008e8a:	f04f 0b00 	mov.w	fp, #0
 8008e8e:	68a3      	ldr	r3, [r4, #8]
 8008e90:	6822      	ldr	r2, [r4, #0]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d03d      	beq.n	8008f12 <_scanf_i+0x15e>
 8008e96:	6831      	ldr	r1, [r6, #0]
 8008e98:	6960      	ldr	r0, [r4, #20]
 8008e9a:	f891 c000 	ldrb.w	ip, [r1]
 8008e9e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008ea2:	2800      	cmp	r0, #0
 8008ea4:	d035      	beq.n	8008f12 <_scanf_i+0x15e>
 8008ea6:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8008eaa:	d124      	bne.n	8008ef6 <_scanf_i+0x142>
 8008eac:	0510      	lsls	r0, r2, #20
 8008eae:	d522      	bpl.n	8008ef6 <_scanf_i+0x142>
 8008eb0:	f10b 0b01 	add.w	fp, fp, #1
 8008eb4:	f1b9 0f00 	cmp.w	r9, #0
 8008eb8:	d003      	beq.n	8008ec2 <_scanf_i+0x10e>
 8008eba:	3301      	adds	r3, #1
 8008ebc:	f109 39ff 	add.w	r9, r9, #4294967295
 8008ec0:	60a3      	str	r3, [r4, #8]
 8008ec2:	6873      	ldr	r3, [r6, #4]
 8008ec4:	3b01      	subs	r3, #1
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	6073      	str	r3, [r6, #4]
 8008eca:	dd1b      	ble.n	8008f04 <_scanf_i+0x150>
 8008ecc:	6833      	ldr	r3, [r6, #0]
 8008ece:	3301      	adds	r3, #1
 8008ed0:	6033      	str	r3, [r6, #0]
 8008ed2:	68a3      	ldr	r3, [r4, #8]
 8008ed4:	3b01      	subs	r3, #1
 8008ed6:	60a3      	str	r3, [r4, #8]
 8008ed8:	e7d9      	b.n	8008e8e <_scanf_i+0xda>
 8008eda:	f1bb 0f02 	cmp.w	fp, #2
 8008ede:	d1ae      	bne.n	8008e3e <_scanf_i+0x8a>
 8008ee0:	6822      	ldr	r2, [r4, #0]
 8008ee2:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8008ee6:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8008eea:	d1bf      	bne.n	8008e6c <_scanf_i+0xb8>
 8008eec:	2110      	movs	r1, #16
 8008eee:	6061      	str	r1, [r4, #4]
 8008ef0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008ef4:	e7a2      	b.n	8008e3c <_scanf_i+0x88>
 8008ef6:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8008efa:	6022      	str	r2, [r4, #0]
 8008efc:	780b      	ldrb	r3, [r1, #0]
 8008efe:	f805 3b01 	strb.w	r3, [r5], #1
 8008f02:	e7de      	b.n	8008ec2 <_scanf_i+0x10e>
 8008f04:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008f08:	4631      	mov	r1, r6
 8008f0a:	4650      	mov	r0, sl
 8008f0c:	4798      	blx	r3
 8008f0e:	2800      	cmp	r0, #0
 8008f10:	d0df      	beq.n	8008ed2 <_scanf_i+0x11e>
 8008f12:	6823      	ldr	r3, [r4, #0]
 8008f14:	05d9      	lsls	r1, r3, #23
 8008f16:	d50d      	bpl.n	8008f34 <_scanf_i+0x180>
 8008f18:	42bd      	cmp	r5, r7
 8008f1a:	d909      	bls.n	8008f30 <_scanf_i+0x17c>
 8008f1c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008f20:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008f24:	4632      	mov	r2, r6
 8008f26:	4650      	mov	r0, sl
 8008f28:	4798      	blx	r3
 8008f2a:	f105 39ff 	add.w	r9, r5, #4294967295
 8008f2e:	464d      	mov	r5, r9
 8008f30:	42bd      	cmp	r5, r7
 8008f32:	d028      	beq.n	8008f86 <_scanf_i+0x1d2>
 8008f34:	6822      	ldr	r2, [r4, #0]
 8008f36:	f012 0210 	ands.w	r2, r2, #16
 8008f3a:	d113      	bne.n	8008f64 <_scanf_i+0x1b0>
 8008f3c:	702a      	strb	r2, [r5, #0]
 8008f3e:	6863      	ldr	r3, [r4, #4]
 8008f40:	9e01      	ldr	r6, [sp, #4]
 8008f42:	4639      	mov	r1, r7
 8008f44:	4650      	mov	r0, sl
 8008f46:	47b0      	blx	r6
 8008f48:	f8d8 3000 	ldr.w	r3, [r8]
 8008f4c:	6821      	ldr	r1, [r4, #0]
 8008f4e:	1d1a      	adds	r2, r3, #4
 8008f50:	f8c8 2000 	str.w	r2, [r8]
 8008f54:	f011 0f20 	tst.w	r1, #32
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	d00f      	beq.n	8008f7c <_scanf_i+0x1c8>
 8008f5c:	6018      	str	r0, [r3, #0]
 8008f5e:	68e3      	ldr	r3, [r4, #12]
 8008f60:	3301      	adds	r3, #1
 8008f62:	60e3      	str	r3, [r4, #12]
 8008f64:	6923      	ldr	r3, [r4, #16]
 8008f66:	1bed      	subs	r5, r5, r7
 8008f68:	445d      	add	r5, fp
 8008f6a:	442b      	add	r3, r5
 8008f6c:	6123      	str	r3, [r4, #16]
 8008f6e:	2000      	movs	r0, #0
 8008f70:	b007      	add	sp, #28
 8008f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f76:	f04f 0b00 	mov.w	fp, #0
 8008f7a:	e7ca      	b.n	8008f12 <_scanf_i+0x15e>
 8008f7c:	07ca      	lsls	r2, r1, #31
 8008f7e:	bf4c      	ite	mi
 8008f80:	8018      	strhmi	r0, [r3, #0]
 8008f82:	6018      	strpl	r0, [r3, #0]
 8008f84:	e7eb      	b.n	8008f5e <_scanf_i+0x1aa>
 8008f86:	2001      	movs	r0, #1
 8008f88:	e7f2      	b.n	8008f70 <_scanf_i+0x1bc>
 8008f8a:	bf00      	nop
 8008f8c:	08009780 	.word	0x08009780
 8008f90:	08009485 	.word	0x08009485
 8008f94:	08009565 	.word	0x08009565
 8008f98:	0800980f 	.word	0x0800980f

08008f9c <__sflush_r>:
 8008f9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fa4:	0716      	lsls	r6, r2, #28
 8008fa6:	4605      	mov	r5, r0
 8008fa8:	460c      	mov	r4, r1
 8008faa:	d454      	bmi.n	8009056 <__sflush_r+0xba>
 8008fac:	684b      	ldr	r3, [r1, #4]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	dc02      	bgt.n	8008fb8 <__sflush_r+0x1c>
 8008fb2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	dd48      	ble.n	800904a <__sflush_r+0xae>
 8008fb8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008fba:	2e00      	cmp	r6, #0
 8008fbc:	d045      	beq.n	800904a <__sflush_r+0xae>
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008fc4:	682f      	ldr	r7, [r5, #0]
 8008fc6:	6a21      	ldr	r1, [r4, #32]
 8008fc8:	602b      	str	r3, [r5, #0]
 8008fca:	d030      	beq.n	800902e <__sflush_r+0x92>
 8008fcc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008fce:	89a3      	ldrh	r3, [r4, #12]
 8008fd0:	0759      	lsls	r1, r3, #29
 8008fd2:	d505      	bpl.n	8008fe0 <__sflush_r+0x44>
 8008fd4:	6863      	ldr	r3, [r4, #4]
 8008fd6:	1ad2      	subs	r2, r2, r3
 8008fd8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008fda:	b10b      	cbz	r3, 8008fe0 <__sflush_r+0x44>
 8008fdc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008fde:	1ad2      	subs	r2, r2, r3
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008fe4:	6a21      	ldr	r1, [r4, #32]
 8008fe6:	4628      	mov	r0, r5
 8008fe8:	47b0      	blx	r6
 8008fea:	1c43      	adds	r3, r0, #1
 8008fec:	89a3      	ldrh	r3, [r4, #12]
 8008fee:	d106      	bne.n	8008ffe <__sflush_r+0x62>
 8008ff0:	6829      	ldr	r1, [r5, #0]
 8008ff2:	291d      	cmp	r1, #29
 8008ff4:	d82b      	bhi.n	800904e <__sflush_r+0xb2>
 8008ff6:	4a2a      	ldr	r2, [pc, #168]	@ (80090a0 <__sflush_r+0x104>)
 8008ff8:	410a      	asrs	r2, r1
 8008ffa:	07d6      	lsls	r6, r2, #31
 8008ffc:	d427      	bmi.n	800904e <__sflush_r+0xb2>
 8008ffe:	2200      	movs	r2, #0
 8009000:	6062      	str	r2, [r4, #4]
 8009002:	04d9      	lsls	r1, r3, #19
 8009004:	6922      	ldr	r2, [r4, #16]
 8009006:	6022      	str	r2, [r4, #0]
 8009008:	d504      	bpl.n	8009014 <__sflush_r+0x78>
 800900a:	1c42      	adds	r2, r0, #1
 800900c:	d101      	bne.n	8009012 <__sflush_r+0x76>
 800900e:	682b      	ldr	r3, [r5, #0]
 8009010:	b903      	cbnz	r3, 8009014 <__sflush_r+0x78>
 8009012:	6560      	str	r0, [r4, #84]	@ 0x54
 8009014:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009016:	602f      	str	r7, [r5, #0]
 8009018:	b1b9      	cbz	r1, 800904a <__sflush_r+0xae>
 800901a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800901e:	4299      	cmp	r1, r3
 8009020:	d002      	beq.n	8009028 <__sflush_r+0x8c>
 8009022:	4628      	mov	r0, r5
 8009024:	f7ff f970 	bl	8008308 <_free_r>
 8009028:	2300      	movs	r3, #0
 800902a:	6363      	str	r3, [r4, #52]	@ 0x34
 800902c:	e00d      	b.n	800904a <__sflush_r+0xae>
 800902e:	2301      	movs	r3, #1
 8009030:	4628      	mov	r0, r5
 8009032:	47b0      	blx	r6
 8009034:	4602      	mov	r2, r0
 8009036:	1c50      	adds	r0, r2, #1
 8009038:	d1c9      	bne.n	8008fce <__sflush_r+0x32>
 800903a:	682b      	ldr	r3, [r5, #0]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d0c6      	beq.n	8008fce <__sflush_r+0x32>
 8009040:	2b1d      	cmp	r3, #29
 8009042:	d001      	beq.n	8009048 <__sflush_r+0xac>
 8009044:	2b16      	cmp	r3, #22
 8009046:	d11e      	bne.n	8009086 <__sflush_r+0xea>
 8009048:	602f      	str	r7, [r5, #0]
 800904a:	2000      	movs	r0, #0
 800904c:	e022      	b.n	8009094 <__sflush_r+0xf8>
 800904e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009052:	b21b      	sxth	r3, r3
 8009054:	e01b      	b.n	800908e <__sflush_r+0xf2>
 8009056:	690f      	ldr	r7, [r1, #16]
 8009058:	2f00      	cmp	r7, #0
 800905a:	d0f6      	beq.n	800904a <__sflush_r+0xae>
 800905c:	0793      	lsls	r3, r2, #30
 800905e:	680e      	ldr	r6, [r1, #0]
 8009060:	bf08      	it	eq
 8009062:	694b      	ldreq	r3, [r1, #20]
 8009064:	600f      	str	r7, [r1, #0]
 8009066:	bf18      	it	ne
 8009068:	2300      	movne	r3, #0
 800906a:	eba6 0807 	sub.w	r8, r6, r7
 800906e:	608b      	str	r3, [r1, #8]
 8009070:	f1b8 0f00 	cmp.w	r8, #0
 8009074:	dde9      	ble.n	800904a <__sflush_r+0xae>
 8009076:	6a21      	ldr	r1, [r4, #32]
 8009078:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800907a:	4643      	mov	r3, r8
 800907c:	463a      	mov	r2, r7
 800907e:	4628      	mov	r0, r5
 8009080:	47b0      	blx	r6
 8009082:	2800      	cmp	r0, #0
 8009084:	dc08      	bgt.n	8009098 <__sflush_r+0xfc>
 8009086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800908a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800908e:	81a3      	strh	r3, [r4, #12]
 8009090:	f04f 30ff 	mov.w	r0, #4294967295
 8009094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009098:	4407      	add	r7, r0
 800909a:	eba8 0800 	sub.w	r8, r8, r0
 800909e:	e7e7      	b.n	8009070 <__sflush_r+0xd4>
 80090a0:	dfbffffe 	.word	0xdfbffffe

080090a4 <_fflush_r>:
 80090a4:	b538      	push	{r3, r4, r5, lr}
 80090a6:	690b      	ldr	r3, [r1, #16]
 80090a8:	4605      	mov	r5, r0
 80090aa:	460c      	mov	r4, r1
 80090ac:	b913      	cbnz	r3, 80090b4 <_fflush_r+0x10>
 80090ae:	2500      	movs	r5, #0
 80090b0:	4628      	mov	r0, r5
 80090b2:	bd38      	pop	{r3, r4, r5, pc}
 80090b4:	b118      	cbz	r0, 80090be <_fflush_r+0x1a>
 80090b6:	6a03      	ldr	r3, [r0, #32]
 80090b8:	b90b      	cbnz	r3, 80090be <_fflush_r+0x1a>
 80090ba:	f7fe fecd 	bl	8007e58 <__sinit>
 80090be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d0f3      	beq.n	80090ae <_fflush_r+0xa>
 80090c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80090c8:	07d0      	lsls	r0, r2, #31
 80090ca:	d404      	bmi.n	80090d6 <_fflush_r+0x32>
 80090cc:	0599      	lsls	r1, r3, #22
 80090ce:	d402      	bmi.n	80090d6 <_fflush_r+0x32>
 80090d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80090d2:	f7ff f916 	bl	8008302 <__retarget_lock_acquire_recursive>
 80090d6:	4628      	mov	r0, r5
 80090d8:	4621      	mov	r1, r4
 80090da:	f7ff ff5f 	bl	8008f9c <__sflush_r>
 80090de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80090e0:	07da      	lsls	r2, r3, #31
 80090e2:	4605      	mov	r5, r0
 80090e4:	d4e4      	bmi.n	80090b0 <_fflush_r+0xc>
 80090e6:	89a3      	ldrh	r3, [r4, #12]
 80090e8:	059b      	lsls	r3, r3, #22
 80090ea:	d4e1      	bmi.n	80090b0 <_fflush_r+0xc>
 80090ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80090ee:	f7ff f909 	bl	8008304 <__retarget_lock_release_recursive>
 80090f2:	e7dd      	b.n	80090b0 <_fflush_r+0xc>

080090f4 <__swhatbuf_r>:
 80090f4:	b570      	push	{r4, r5, r6, lr}
 80090f6:	460c      	mov	r4, r1
 80090f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090fc:	2900      	cmp	r1, #0
 80090fe:	b096      	sub	sp, #88	@ 0x58
 8009100:	4615      	mov	r5, r2
 8009102:	461e      	mov	r6, r3
 8009104:	da0d      	bge.n	8009122 <__swhatbuf_r+0x2e>
 8009106:	89a3      	ldrh	r3, [r4, #12]
 8009108:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800910c:	f04f 0100 	mov.w	r1, #0
 8009110:	bf14      	ite	ne
 8009112:	2340      	movne	r3, #64	@ 0x40
 8009114:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009118:	2000      	movs	r0, #0
 800911a:	6031      	str	r1, [r6, #0]
 800911c:	602b      	str	r3, [r5, #0]
 800911e:	b016      	add	sp, #88	@ 0x58
 8009120:	bd70      	pop	{r4, r5, r6, pc}
 8009122:	466a      	mov	r2, sp
 8009124:	f000 f8d6 	bl	80092d4 <_fstat_r>
 8009128:	2800      	cmp	r0, #0
 800912a:	dbec      	blt.n	8009106 <__swhatbuf_r+0x12>
 800912c:	9901      	ldr	r1, [sp, #4]
 800912e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009132:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009136:	4259      	negs	r1, r3
 8009138:	4159      	adcs	r1, r3
 800913a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800913e:	e7eb      	b.n	8009118 <__swhatbuf_r+0x24>

08009140 <__smakebuf_r>:
 8009140:	898b      	ldrh	r3, [r1, #12]
 8009142:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009144:	079d      	lsls	r5, r3, #30
 8009146:	4606      	mov	r6, r0
 8009148:	460c      	mov	r4, r1
 800914a:	d507      	bpl.n	800915c <__smakebuf_r+0x1c>
 800914c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009150:	6023      	str	r3, [r4, #0]
 8009152:	6123      	str	r3, [r4, #16]
 8009154:	2301      	movs	r3, #1
 8009156:	6163      	str	r3, [r4, #20]
 8009158:	b003      	add	sp, #12
 800915a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800915c:	ab01      	add	r3, sp, #4
 800915e:	466a      	mov	r2, sp
 8009160:	f7ff ffc8 	bl	80090f4 <__swhatbuf_r>
 8009164:	9f00      	ldr	r7, [sp, #0]
 8009166:	4605      	mov	r5, r0
 8009168:	4639      	mov	r1, r7
 800916a:	4630      	mov	r0, r6
 800916c:	f7fe fd5c 	bl	8007c28 <_malloc_r>
 8009170:	b948      	cbnz	r0, 8009186 <__smakebuf_r+0x46>
 8009172:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009176:	059a      	lsls	r2, r3, #22
 8009178:	d4ee      	bmi.n	8009158 <__smakebuf_r+0x18>
 800917a:	f023 0303 	bic.w	r3, r3, #3
 800917e:	f043 0302 	orr.w	r3, r3, #2
 8009182:	81a3      	strh	r3, [r4, #12]
 8009184:	e7e2      	b.n	800914c <__smakebuf_r+0xc>
 8009186:	89a3      	ldrh	r3, [r4, #12]
 8009188:	6020      	str	r0, [r4, #0]
 800918a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800918e:	81a3      	strh	r3, [r4, #12]
 8009190:	9b01      	ldr	r3, [sp, #4]
 8009192:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009196:	b15b      	cbz	r3, 80091b0 <__smakebuf_r+0x70>
 8009198:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800919c:	4630      	mov	r0, r6
 800919e:	f000 f8ab 	bl	80092f8 <_isatty_r>
 80091a2:	b128      	cbz	r0, 80091b0 <__smakebuf_r+0x70>
 80091a4:	89a3      	ldrh	r3, [r4, #12]
 80091a6:	f023 0303 	bic.w	r3, r3, #3
 80091aa:	f043 0301 	orr.w	r3, r3, #1
 80091ae:	81a3      	strh	r3, [r4, #12]
 80091b0:	89a3      	ldrh	r3, [r4, #12]
 80091b2:	431d      	orrs	r5, r3
 80091b4:	81a5      	strh	r5, [r4, #12]
 80091b6:	e7cf      	b.n	8009158 <__smakebuf_r+0x18>

080091b8 <__sccl>:
 80091b8:	b570      	push	{r4, r5, r6, lr}
 80091ba:	780b      	ldrb	r3, [r1, #0]
 80091bc:	4604      	mov	r4, r0
 80091be:	2b5e      	cmp	r3, #94	@ 0x5e
 80091c0:	bf0b      	itete	eq
 80091c2:	784b      	ldrbeq	r3, [r1, #1]
 80091c4:	1c4a      	addne	r2, r1, #1
 80091c6:	1c8a      	addeq	r2, r1, #2
 80091c8:	2100      	movne	r1, #0
 80091ca:	bf08      	it	eq
 80091cc:	2101      	moveq	r1, #1
 80091ce:	3801      	subs	r0, #1
 80091d0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80091d4:	f800 1f01 	strb.w	r1, [r0, #1]!
 80091d8:	42a8      	cmp	r0, r5
 80091da:	d1fb      	bne.n	80091d4 <__sccl+0x1c>
 80091dc:	b90b      	cbnz	r3, 80091e2 <__sccl+0x2a>
 80091de:	1e50      	subs	r0, r2, #1
 80091e0:	bd70      	pop	{r4, r5, r6, pc}
 80091e2:	f081 0101 	eor.w	r1, r1, #1
 80091e6:	54e1      	strb	r1, [r4, r3]
 80091e8:	4610      	mov	r0, r2
 80091ea:	4602      	mov	r2, r0
 80091ec:	f812 5b01 	ldrb.w	r5, [r2], #1
 80091f0:	2d2d      	cmp	r5, #45	@ 0x2d
 80091f2:	d005      	beq.n	8009200 <__sccl+0x48>
 80091f4:	2d5d      	cmp	r5, #93	@ 0x5d
 80091f6:	d016      	beq.n	8009226 <__sccl+0x6e>
 80091f8:	2d00      	cmp	r5, #0
 80091fa:	d0f1      	beq.n	80091e0 <__sccl+0x28>
 80091fc:	462b      	mov	r3, r5
 80091fe:	e7f2      	b.n	80091e6 <__sccl+0x2e>
 8009200:	7846      	ldrb	r6, [r0, #1]
 8009202:	2e5d      	cmp	r6, #93	@ 0x5d
 8009204:	d0fa      	beq.n	80091fc <__sccl+0x44>
 8009206:	42b3      	cmp	r3, r6
 8009208:	dcf8      	bgt.n	80091fc <__sccl+0x44>
 800920a:	3002      	adds	r0, #2
 800920c:	461a      	mov	r2, r3
 800920e:	3201      	adds	r2, #1
 8009210:	4296      	cmp	r6, r2
 8009212:	54a1      	strb	r1, [r4, r2]
 8009214:	dcfb      	bgt.n	800920e <__sccl+0x56>
 8009216:	1af2      	subs	r2, r6, r3
 8009218:	3a01      	subs	r2, #1
 800921a:	1c5d      	adds	r5, r3, #1
 800921c:	42b3      	cmp	r3, r6
 800921e:	bfa8      	it	ge
 8009220:	2200      	movge	r2, #0
 8009222:	18ab      	adds	r3, r5, r2
 8009224:	e7e1      	b.n	80091ea <__sccl+0x32>
 8009226:	4610      	mov	r0, r2
 8009228:	e7da      	b.n	80091e0 <__sccl+0x28>

0800922a <__submore>:
 800922a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800922e:	460c      	mov	r4, r1
 8009230:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8009232:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009236:	4299      	cmp	r1, r3
 8009238:	d11d      	bne.n	8009276 <__submore+0x4c>
 800923a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800923e:	f7fe fcf3 	bl	8007c28 <_malloc_r>
 8009242:	b918      	cbnz	r0, 800924c <__submore+0x22>
 8009244:	f04f 30ff 	mov.w	r0, #4294967295
 8009248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800924c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009250:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009252:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8009256:	6360      	str	r0, [r4, #52]	@ 0x34
 8009258:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800925c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8009260:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8009264:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8009268:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800926c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8009270:	6020      	str	r0, [r4, #0]
 8009272:	2000      	movs	r0, #0
 8009274:	e7e8      	b.n	8009248 <__submore+0x1e>
 8009276:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8009278:	0077      	lsls	r7, r6, #1
 800927a:	463a      	mov	r2, r7
 800927c:	f000 f85a 	bl	8009334 <_realloc_r>
 8009280:	4605      	mov	r5, r0
 8009282:	2800      	cmp	r0, #0
 8009284:	d0de      	beq.n	8009244 <__submore+0x1a>
 8009286:	eb00 0806 	add.w	r8, r0, r6
 800928a:	4601      	mov	r1, r0
 800928c:	4632      	mov	r2, r6
 800928e:	4640      	mov	r0, r8
 8009290:	f000 f842 	bl	8009318 <memcpy>
 8009294:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8009298:	f8c4 8000 	str.w	r8, [r4]
 800929c:	e7e9      	b.n	8009272 <__submore+0x48>

0800929e <memmove>:
 800929e:	4288      	cmp	r0, r1
 80092a0:	b510      	push	{r4, lr}
 80092a2:	eb01 0402 	add.w	r4, r1, r2
 80092a6:	d902      	bls.n	80092ae <memmove+0x10>
 80092a8:	4284      	cmp	r4, r0
 80092aa:	4623      	mov	r3, r4
 80092ac:	d807      	bhi.n	80092be <memmove+0x20>
 80092ae:	1e43      	subs	r3, r0, #1
 80092b0:	42a1      	cmp	r1, r4
 80092b2:	d008      	beq.n	80092c6 <memmove+0x28>
 80092b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80092b8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80092bc:	e7f8      	b.n	80092b0 <memmove+0x12>
 80092be:	4402      	add	r2, r0
 80092c0:	4601      	mov	r1, r0
 80092c2:	428a      	cmp	r2, r1
 80092c4:	d100      	bne.n	80092c8 <memmove+0x2a>
 80092c6:	bd10      	pop	{r4, pc}
 80092c8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80092cc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80092d0:	e7f7      	b.n	80092c2 <memmove+0x24>
	...

080092d4 <_fstat_r>:
 80092d4:	b538      	push	{r3, r4, r5, lr}
 80092d6:	4d07      	ldr	r5, [pc, #28]	@ (80092f4 <_fstat_r+0x20>)
 80092d8:	2300      	movs	r3, #0
 80092da:	4604      	mov	r4, r0
 80092dc:	4608      	mov	r0, r1
 80092de:	4611      	mov	r1, r2
 80092e0:	602b      	str	r3, [r5, #0]
 80092e2:	f7f9 f81e 	bl	8002322 <_fstat>
 80092e6:	1c43      	adds	r3, r0, #1
 80092e8:	d102      	bne.n	80092f0 <_fstat_r+0x1c>
 80092ea:	682b      	ldr	r3, [r5, #0]
 80092ec:	b103      	cbz	r3, 80092f0 <_fstat_r+0x1c>
 80092ee:	6023      	str	r3, [r4, #0]
 80092f0:	bd38      	pop	{r3, r4, r5, pc}
 80092f2:	bf00      	nop
 80092f4:	200004b4 	.word	0x200004b4

080092f8 <_isatty_r>:
 80092f8:	b538      	push	{r3, r4, r5, lr}
 80092fa:	4d06      	ldr	r5, [pc, #24]	@ (8009314 <_isatty_r+0x1c>)
 80092fc:	2300      	movs	r3, #0
 80092fe:	4604      	mov	r4, r0
 8009300:	4608      	mov	r0, r1
 8009302:	602b      	str	r3, [r5, #0]
 8009304:	f7f9 f81d 	bl	8002342 <_isatty>
 8009308:	1c43      	adds	r3, r0, #1
 800930a:	d102      	bne.n	8009312 <_isatty_r+0x1a>
 800930c:	682b      	ldr	r3, [r5, #0]
 800930e:	b103      	cbz	r3, 8009312 <_isatty_r+0x1a>
 8009310:	6023      	str	r3, [r4, #0]
 8009312:	bd38      	pop	{r3, r4, r5, pc}
 8009314:	200004b4 	.word	0x200004b4

08009318 <memcpy>:
 8009318:	440a      	add	r2, r1
 800931a:	4291      	cmp	r1, r2
 800931c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009320:	d100      	bne.n	8009324 <memcpy+0xc>
 8009322:	4770      	bx	lr
 8009324:	b510      	push	{r4, lr}
 8009326:	f811 4b01 	ldrb.w	r4, [r1], #1
 800932a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800932e:	4291      	cmp	r1, r2
 8009330:	d1f9      	bne.n	8009326 <memcpy+0xe>
 8009332:	bd10      	pop	{r4, pc}

08009334 <_realloc_r>:
 8009334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009338:	4680      	mov	r8, r0
 800933a:	4615      	mov	r5, r2
 800933c:	460c      	mov	r4, r1
 800933e:	b921      	cbnz	r1, 800934a <_realloc_r+0x16>
 8009340:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009344:	4611      	mov	r1, r2
 8009346:	f7fe bc6f 	b.w	8007c28 <_malloc_r>
 800934a:	b92a      	cbnz	r2, 8009358 <_realloc_r+0x24>
 800934c:	f7fe ffdc 	bl	8008308 <_free_r>
 8009350:	2400      	movs	r4, #0
 8009352:	4620      	mov	r0, r4
 8009354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009358:	f000 f906 	bl	8009568 <_malloc_usable_size_r>
 800935c:	4285      	cmp	r5, r0
 800935e:	4606      	mov	r6, r0
 8009360:	d802      	bhi.n	8009368 <_realloc_r+0x34>
 8009362:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009366:	d8f4      	bhi.n	8009352 <_realloc_r+0x1e>
 8009368:	4629      	mov	r1, r5
 800936a:	4640      	mov	r0, r8
 800936c:	f7fe fc5c 	bl	8007c28 <_malloc_r>
 8009370:	4607      	mov	r7, r0
 8009372:	2800      	cmp	r0, #0
 8009374:	d0ec      	beq.n	8009350 <_realloc_r+0x1c>
 8009376:	42b5      	cmp	r5, r6
 8009378:	462a      	mov	r2, r5
 800937a:	4621      	mov	r1, r4
 800937c:	bf28      	it	cs
 800937e:	4632      	movcs	r2, r6
 8009380:	f7ff ffca 	bl	8009318 <memcpy>
 8009384:	4621      	mov	r1, r4
 8009386:	4640      	mov	r0, r8
 8009388:	f7fe ffbe 	bl	8008308 <_free_r>
 800938c:	463c      	mov	r4, r7
 800938e:	e7e0      	b.n	8009352 <_realloc_r+0x1e>

08009390 <_strtol_l.constprop.0>:
 8009390:	2b24      	cmp	r3, #36	@ 0x24
 8009392:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009396:	4686      	mov	lr, r0
 8009398:	4690      	mov	r8, r2
 800939a:	d801      	bhi.n	80093a0 <_strtol_l.constprop.0+0x10>
 800939c:	2b01      	cmp	r3, #1
 800939e:	d106      	bne.n	80093ae <_strtol_l.constprop.0+0x1e>
 80093a0:	f7fe ff84 	bl	80082ac <__errno>
 80093a4:	2316      	movs	r3, #22
 80093a6:	6003      	str	r3, [r0, #0]
 80093a8:	2000      	movs	r0, #0
 80093aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093ae:	4834      	ldr	r0, [pc, #208]	@ (8009480 <_strtol_l.constprop.0+0xf0>)
 80093b0:	460d      	mov	r5, r1
 80093b2:	462a      	mov	r2, r5
 80093b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80093b8:	5d06      	ldrb	r6, [r0, r4]
 80093ba:	f016 0608 	ands.w	r6, r6, #8
 80093be:	d1f8      	bne.n	80093b2 <_strtol_l.constprop.0+0x22>
 80093c0:	2c2d      	cmp	r4, #45	@ 0x2d
 80093c2:	d12d      	bne.n	8009420 <_strtol_l.constprop.0+0x90>
 80093c4:	782c      	ldrb	r4, [r5, #0]
 80093c6:	2601      	movs	r6, #1
 80093c8:	1c95      	adds	r5, r2, #2
 80093ca:	f033 0210 	bics.w	r2, r3, #16
 80093ce:	d109      	bne.n	80093e4 <_strtol_l.constprop.0+0x54>
 80093d0:	2c30      	cmp	r4, #48	@ 0x30
 80093d2:	d12a      	bne.n	800942a <_strtol_l.constprop.0+0x9a>
 80093d4:	782a      	ldrb	r2, [r5, #0]
 80093d6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80093da:	2a58      	cmp	r2, #88	@ 0x58
 80093dc:	d125      	bne.n	800942a <_strtol_l.constprop.0+0x9a>
 80093de:	786c      	ldrb	r4, [r5, #1]
 80093e0:	2310      	movs	r3, #16
 80093e2:	3502      	adds	r5, #2
 80093e4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80093e8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80093ec:	2200      	movs	r2, #0
 80093ee:	fbbc f9f3 	udiv	r9, ip, r3
 80093f2:	4610      	mov	r0, r2
 80093f4:	fb03 ca19 	mls	sl, r3, r9, ip
 80093f8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80093fc:	2f09      	cmp	r7, #9
 80093fe:	d81b      	bhi.n	8009438 <_strtol_l.constprop.0+0xa8>
 8009400:	463c      	mov	r4, r7
 8009402:	42a3      	cmp	r3, r4
 8009404:	dd27      	ble.n	8009456 <_strtol_l.constprop.0+0xc6>
 8009406:	1c57      	adds	r7, r2, #1
 8009408:	d007      	beq.n	800941a <_strtol_l.constprop.0+0x8a>
 800940a:	4581      	cmp	r9, r0
 800940c:	d320      	bcc.n	8009450 <_strtol_l.constprop.0+0xc0>
 800940e:	d101      	bne.n	8009414 <_strtol_l.constprop.0+0x84>
 8009410:	45a2      	cmp	sl, r4
 8009412:	db1d      	blt.n	8009450 <_strtol_l.constprop.0+0xc0>
 8009414:	fb00 4003 	mla	r0, r0, r3, r4
 8009418:	2201      	movs	r2, #1
 800941a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800941e:	e7eb      	b.n	80093f8 <_strtol_l.constprop.0+0x68>
 8009420:	2c2b      	cmp	r4, #43	@ 0x2b
 8009422:	bf04      	itt	eq
 8009424:	782c      	ldrbeq	r4, [r5, #0]
 8009426:	1c95      	addeq	r5, r2, #2
 8009428:	e7cf      	b.n	80093ca <_strtol_l.constprop.0+0x3a>
 800942a:	2b00      	cmp	r3, #0
 800942c:	d1da      	bne.n	80093e4 <_strtol_l.constprop.0+0x54>
 800942e:	2c30      	cmp	r4, #48	@ 0x30
 8009430:	bf0c      	ite	eq
 8009432:	2308      	moveq	r3, #8
 8009434:	230a      	movne	r3, #10
 8009436:	e7d5      	b.n	80093e4 <_strtol_l.constprop.0+0x54>
 8009438:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800943c:	2f19      	cmp	r7, #25
 800943e:	d801      	bhi.n	8009444 <_strtol_l.constprop.0+0xb4>
 8009440:	3c37      	subs	r4, #55	@ 0x37
 8009442:	e7de      	b.n	8009402 <_strtol_l.constprop.0+0x72>
 8009444:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009448:	2f19      	cmp	r7, #25
 800944a:	d804      	bhi.n	8009456 <_strtol_l.constprop.0+0xc6>
 800944c:	3c57      	subs	r4, #87	@ 0x57
 800944e:	e7d8      	b.n	8009402 <_strtol_l.constprop.0+0x72>
 8009450:	f04f 32ff 	mov.w	r2, #4294967295
 8009454:	e7e1      	b.n	800941a <_strtol_l.constprop.0+0x8a>
 8009456:	1c53      	adds	r3, r2, #1
 8009458:	d108      	bne.n	800946c <_strtol_l.constprop.0+0xdc>
 800945a:	2322      	movs	r3, #34	@ 0x22
 800945c:	f8ce 3000 	str.w	r3, [lr]
 8009460:	4660      	mov	r0, ip
 8009462:	f1b8 0f00 	cmp.w	r8, #0
 8009466:	d0a0      	beq.n	80093aa <_strtol_l.constprop.0+0x1a>
 8009468:	1e69      	subs	r1, r5, #1
 800946a:	e006      	b.n	800947a <_strtol_l.constprop.0+0xea>
 800946c:	b106      	cbz	r6, 8009470 <_strtol_l.constprop.0+0xe0>
 800946e:	4240      	negs	r0, r0
 8009470:	f1b8 0f00 	cmp.w	r8, #0
 8009474:	d099      	beq.n	80093aa <_strtol_l.constprop.0+0x1a>
 8009476:	2a00      	cmp	r2, #0
 8009478:	d1f6      	bne.n	8009468 <_strtol_l.constprop.0+0xd8>
 800947a:	f8c8 1000 	str.w	r1, [r8]
 800947e:	e794      	b.n	80093aa <_strtol_l.constprop.0+0x1a>
 8009480:	0800981b 	.word	0x0800981b

08009484 <_strtol_r>:
 8009484:	f7ff bf84 	b.w	8009390 <_strtol_l.constprop.0>

08009488 <_strtoul_l.constprop.0>:
 8009488:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800948c:	4e34      	ldr	r6, [pc, #208]	@ (8009560 <_strtoul_l.constprop.0+0xd8>)
 800948e:	4686      	mov	lr, r0
 8009490:	460d      	mov	r5, r1
 8009492:	4628      	mov	r0, r5
 8009494:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009498:	5d37      	ldrb	r7, [r6, r4]
 800949a:	f017 0708 	ands.w	r7, r7, #8
 800949e:	d1f8      	bne.n	8009492 <_strtoul_l.constprop.0+0xa>
 80094a0:	2c2d      	cmp	r4, #45	@ 0x2d
 80094a2:	d12f      	bne.n	8009504 <_strtoul_l.constprop.0+0x7c>
 80094a4:	782c      	ldrb	r4, [r5, #0]
 80094a6:	2701      	movs	r7, #1
 80094a8:	1c85      	adds	r5, r0, #2
 80094aa:	f033 0010 	bics.w	r0, r3, #16
 80094ae:	d109      	bne.n	80094c4 <_strtoul_l.constprop.0+0x3c>
 80094b0:	2c30      	cmp	r4, #48	@ 0x30
 80094b2:	d12c      	bne.n	800950e <_strtoul_l.constprop.0+0x86>
 80094b4:	7828      	ldrb	r0, [r5, #0]
 80094b6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80094ba:	2858      	cmp	r0, #88	@ 0x58
 80094bc:	d127      	bne.n	800950e <_strtoul_l.constprop.0+0x86>
 80094be:	786c      	ldrb	r4, [r5, #1]
 80094c0:	2310      	movs	r3, #16
 80094c2:	3502      	adds	r5, #2
 80094c4:	f04f 38ff 	mov.w	r8, #4294967295
 80094c8:	2600      	movs	r6, #0
 80094ca:	fbb8 f8f3 	udiv	r8, r8, r3
 80094ce:	fb03 f908 	mul.w	r9, r3, r8
 80094d2:	ea6f 0909 	mvn.w	r9, r9
 80094d6:	4630      	mov	r0, r6
 80094d8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80094dc:	f1bc 0f09 	cmp.w	ip, #9
 80094e0:	d81c      	bhi.n	800951c <_strtoul_l.constprop.0+0x94>
 80094e2:	4664      	mov	r4, ip
 80094e4:	42a3      	cmp	r3, r4
 80094e6:	dd2a      	ble.n	800953e <_strtoul_l.constprop.0+0xb6>
 80094e8:	f1b6 3fff 	cmp.w	r6, #4294967295
 80094ec:	d007      	beq.n	80094fe <_strtoul_l.constprop.0+0x76>
 80094ee:	4580      	cmp	r8, r0
 80094f0:	d322      	bcc.n	8009538 <_strtoul_l.constprop.0+0xb0>
 80094f2:	d101      	bne.n	80094f8 <_strtoul_l.constprop.0+0x70>
 80094f4:	45a1      	cmp	r9, r4
 80094f6:	db1f      	blt.n	8009538 <_strtoul_l.constprop.0+0xb0>
 80094f8:	fb00 4003 	mla	r0, r0, r3, r4
 80094fc:	2601      	movs	r6, #1
 80094fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009502:	e7e9      	b.n	80094d8 <_strtoul_l.constprop.0+0x50>
 8009504:	2c2b      	cmp	r4, #43	@ 0x2b
 8009506:	bf04      	itt	eq
 8009508:	782c      	ldrbeq	r4, [r5, #0]
 800950a:	1c85      	addeq	r5, r0, #2
 800950c:	e7cd      	b.n	80094aa <_strtoul_l.constprop.0+0x22>
 800950e:	2b00      	cmp	r3, #0
 8009510:	d1d8      	bne.n	80094c4 <_strtoul_l.constprop.0+0x3c>
 8009512:	2c30      	cmp	r4, #48	@ 0x30
 8009514:	bf0c      	ite	eq
 8009516:	2308      	moveq	r3, #8
 8009518:	230a      	movne	r3, #10
 800951a:	e7d3      	b.n	80094c4 <_strtoul_l.constprop.0+0x3c>
 800951c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8009520:	f1bc 0f19 	cmp.w	ip, #25
 8009524:	d801      	bhi.n	800952a <_strtoul_l.constprop.0+0xa2>
 8009526:	3c37      	subs	r4, #55	@ 0x37
 8009528:	e7dc      	b.n	80094e4 <_strtoul_l.constprop.0+0x5c>
 800952a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800952e:	f1bc 0f19 	cmp.w	ip, #25
 8009532:	d804      	bhi.n	800953e <_strtoul_l.constprop.0+0xb6>
 8009534:	3c57      	subs	r4, #87	@ 0x57
 8009536:	e7d5      	b.n	80094e4 <_strtoul_l.constprop.0+0x5c>
 8009538:	f04f 36ff 	mov.w	r6, #4294967295
 800953c:	e7df      	b.n	80094fe <_strtoul_l.constprop.0+0x76>
 800953e:	1c73      	adds	r3, r6, #1
 8009540:	d106      	bne.n	8009550 <_strtoul_l.constprop.0+0xc8>
 8009542:	2322      	movs	r3, #34	@ 0x22
 8009544:	f8ce 3000 	str.w	r3, [lr]
 8009548:	4630      	mov	r0, r6
 800954a:	b932      	cbnz	r2, 800955a <_strtoul_l.constprop.0+0xd2>
 800954c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009550:	b107      	cbz	r7, 8009554 <_strtoul_l.constprop.0+0xcc>
 8009552:	4240      	negs	r0, r0
 8009554:	2a00      	cmp	r2, #0
 8009556:	d0f9      	beq.n	800954c <_strtoul_l.constprop.0+0xc4>
 8009558:	b106      	cbz	r6, 800955c <_strtoul_l.constprop.0+0xd4>
 800955a:	1e69      	subs	r1, r5, #1
 800955c:	6011      	str	r1, [r2, #0]
 800955e:	e7f5      	b.n	800954c <_strtoul_l.constprop.0+0xc4>
 8009560:	0800981b 	.word	0x0800981b

08009564 <_strtoul_r>:
 8009564:	f7ff bf90 	b.w	8009488 <_strtoul_l.constprop.0>

08009568 <_malloc_usable_size_r>:
 8009568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800956c:	1f18      	subs	r0, r3, #4
 800956e:	2b00      	cmp	r3, #0
 8009570:	bfbc      	itt	lt
 8009572:	580b      	ldrlt	r3, [r1, r0]
 8009574:	18c0      	addlt	r0, r0, r3
 8009576:	4770      	bx	lr

08009578 <_init>:
 8009578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800957a:	bf00      	nop
 800957c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800957e:	bc08      	pop	{r3}
 8009580:	469e      	mov	lr, r3
 8009582:	4770      	bx	lr

08009584 <_fini>:
 8009584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009586:	bf00      	nop
 8009588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800958a:	bc08      	pop	{r3}
 800958c:	469e      	mov	lr, r3
 800958e:	4770      	bx	lr
