
communication_try01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093fc  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000360  080095dc  080095dc  0000a5dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800993c  0800993c  0000b06c  2**0
                  CONTENTS
  4 .ARM          00000008  0800993c  0800993c  0000a93c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009944  08009944  0000b06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009944  08009944  0000a944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009948  08009948  0000a948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800994c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000448  2000006c  080099b8  0000b06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004b4  080099b8  0000b4b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000172c5  00000000  00000000  0000b09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ff8  00000000  00000000  00022361  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c8  00000000  00000000  00025360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f6a  00000000  00000000  00026728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002802d  00000000  00000000  00027692  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000184d5  00000000  00000000  0004f6bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ffe93  00000000  00000000  00067b94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00167a27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ed0  00000000  00000000  00167a6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  0016d93c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080095c4 	.word	0x080095c4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	080095c4 	.word	0x080095c4

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <command_checker>:
int8_t posABS = 0;
int8_t TileON = 0;


char* command_checker(uint8_t* buffer)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
    int8_t ending_condition = 1;
 80005e8:	2301      	movs	r3, #1
 80005ea:	73fb      	strb	r3, [r7, #15]
    int8_t index = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	73bb      	strb	r3, [r7, #14]

    while (ending_condition)
 80005f0:	e00f      	b.n	8000612 <command_checker+0x32>
    {
        if (buffer[index] == '#')
 80005f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005f6:	687a      	ldr	r2, [r7, #4]
 80005f8:	4413      	add	r3, r2
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b23      	cmp	r3, #35	@ 0x23
 80005fe:	d102      	bne.n	8000606 <command_checker+0x26>
        {
            ending_condition = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	73fb      	strb	r3, [r7, #15]
 8000604:	e005      	b.n	8000612 <command_checker+0x32>
        }
        else
        {
            index++;
 8000606:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800060a:	b2db      	uxtb	r3, r3
 800060c:	3301      	adds	r3, #1
 800060e:	b2db      	uxtb	r3, r3
 8000610:	73bb      	strb	r3, [r7, #14]
    while (ending_condition)
 8000612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d1eb      	bne.n	80005f2 <command_checker+0x12>
        }

    }

    // Allocate memory for the command string with an extra byte for the null terminator
    char* command = (char*)malloc(index + 1);
 800061a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800061e:	3301      	adds	r3, #1
 8000620:	4618      	mov	r0, r3
 8000622:	f007 faf5 	bl	8007c10 <malloc>
 8000626:	4603      	mov	r3, r0
 8000628:	60bb      	str	r3, [r7, #8]
    if (command == NULL)
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d101      	bne.n	8000634 <command_checker+0x54>
    {
        return NULL;  // Allocation failed
 8000630:	2300      	movs	r3, #0
 8000632:	e00d      	b.n	8000650 <command_checker+0x70>
    }

    // Copy the command part from buffer to the newly allocated string
    strncpy(command, (char*)buffer, index);
 8000634:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000638:	461a      	mov	r2, r3
 800063a:	6879      	ldr	r1, [r7, #4]
 800063c:	68b8      	ldr	r0, [r7, #8]
 800063e:	f007 fdf1 	bl	8008224 <strncpy>
    command[index] = '\0';  // Null-terminate the string
 8000642:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000646:	68ba      	ldr	r2, [r7, #8]
 8000648:	4413      	add	r3, r2
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]

    return command;
 800064e:	68bb      	ldr	r3, [r7, #8]
}
 8000650:	4618      	mov	r0, r3
 8000652:	3710      	adds	r7, #16
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <head_control>:
char* head_control(void) {
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
    //char RxBuffer1[RX_BUFFER_SIZE];
    //memset(RxBuffer1, '\0', sizeof(RxBuffer1)); // Clear the buffer

    char received_char1;
    int8_t index = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	71fb      	strb	r3, [r7, #7]
    memset(RxBuffer1, '\0', sizeof(RxBuffer1));
 8000662:	2220      	movs	r2, #32
 8000664:	2100      	movs	r1, #0
 8000666:	4825      	ldr	r0, [pc, #148]	@ (80006fc <head_control+0xa4>)
 8000668:	f007 fdd4 	bl	8008214 <memset>
    // Continue to receive characters until the character '$' is found
    while (1) {
        // Receive one character at a time
    	if (HAL_UART_Receive(&huart5, (uint8_t*)&received_char1, 1, 1000) == HAL_OK) {
 800066c:	1db9      	adds	r1, r7, #6
 800066e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000672:	2201      	movs	r2, #1
 8000674:	4822      	ldr	r0, [pc, #136]	@ (8000700 <head_control+0xa8>)
 8000676:	f006 f841 	bl	80066fc <HAL_UART_Receive>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d1f5      	bne.n	800066c <head_control+0x14>
        //if (HAL_UART_Receive(&huart5, (uint8_t*)&received_char1, 1, HAL_MAX_DELAY) == HAL_OK) {
        //if (HAL_UART_Receive(&huart5, (uint8_t*)received_char1, 1, HAL_MAX_DELAY) == HAL_OK) {
            // Skip adding to buffer if the received character is '\0'
    		if (received_char1=='H'){
 8000680:	79bb      	ldrb	r3, [r7, #6]
 8000682:	2b48      	cmp	r3, #72	@ 0x48
 8000684:	d128      	bne.n	80006d8 <head_control+0x80>
    			RxBuffer1[index++] = received_char1;
 8000686:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800068a:	b2d3      	uxtb	r3, r2
 800068c:	3301      	adds	r3, #1
 800068e:	b2db      	uxtb	r3, r3
 8000690:	71fb      	strb	r3, [r7, #7]
 8000692:	79b9      	ldrb	r1, [r7, #6]
 8000694:	4b19      	ldr	r3, [pc, #100]	@ (80006fc <head_control+0xa4>)
 8000696:	5499      	strb	r1, [r3, r2]
    			while(1){
    				if (HAL_UART_Receive(&huart5, (uint8_t*)&received_char1, 1, 1000) == HAL_OK) {
 8000698:	1db9      	adds	r1, r7, #6
 800069a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800069e:	2201      	movs	r2, #1
 80006a0:	4817      	ldr	r0, [pc, #92]	@ (8000700 <head_control+0xa8>)
 80006a2:	f006 f82b 	bl	80066fc <HAL_UART_Receive>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d1f5      	bne.n	8000698 <head_control+0x40>


    						if (received_char1 == '\0') {
 80006ac:	79bb      	ldrb	r3, [r7, #6]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d010      	beq.n	80006d4 <head_control+0x7c>
    							continue;
    						}

    						RxBuffer1[index++] = received_char1;
 80006b2:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80006b6:	b2d3      	uxtb	r3, r2
 80006b8:	3301      	adds	r3, #1
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	71fb      	strb	r3, [r7, #7]
 80006be:	79b9      	ldrb	r1, [r7, #6]
 80006c0:	4b0e      	ldr	r3, [pc, #56]	@ (80006fc <head_control+0xa4>)
 80006c2:	5499      	strb	r1, [r3, r2]
            //HAL_Delay(1);
            // Break the loop if the end of the buffer is reached or if '$' is received
    						if (index >= RX_BUFFER_SIZE || received_char1 == '$') {
 80006c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c8:	2b1f      	cmp	r3, #31
 80006ca:	dc05      	bgt.n	80006d8 <head_control+0x80>
 80006cc:	79bb      	ldrb	r3, [r7, #6]
 80006ce:	2b24      	cmp	r3, #36	@ 0x24
 80006d0:	d002      	beq.n	80006d8 <head_control+0x80>
 80006d2:	e7e1      	b.n	8000698 <head_control+0x40>
    							continue;
 80006d4:	bf00      	nop
    				if (HAL_UART_Receive(&huart5, (uint8_t*)&received_char1, 1, 1000) == HAL_OK) {
 80006d6:	e7df      	b.n	8000698 <head_control+0x40>
    							break;
    						}
    					}
    				}
    			}
    		if (index >= RX_BUFFER_SIZE || received_char1 == '$') {
 80006d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006dc:	2b1f      	cmp	r3, #31
 80006de:	dc03      	bgt.n	80006e8 <head_control+0x90>
 80006e0:	79bb      	ldrb	r3, [r7, #6]
 80006e2:	2b24      	cmp	r3, #36	@ 0x24
 80006e4:	d000      	beq.n	80006e8 <head_control+0x90>
    	if (HAL_UART_Receive(&huart5, (uint8_t*)&received_char1, 1, 1000) == HAL_OK) {
 80006e6:	e7c1      	b.n	800066c <head_control+0x14>




    // Null-terminate the string
    RxBuffer1[index] = '\0';
 80006e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ec:	4a03      	ldr	r2, [pc, #12]	@ (80006fc <head_control+0xa4>)
 80006ee:	2100      	movs	r1, #0
 80006f0:	54d1      	strb	r1, [r2, r3]

    return RxBuffer1;
 80006f2:	4b02      	ldr	r3, [pc, #8]	@ (80006fc <head_control+0xa4>)
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	200000c8 	.word	0x200000c8
 8000700:	200002c8 	.word	0x200002c8

08000704 <swtch_control>:

char* swtch_control(void){ //odbiór stanów czujników obrotu kafelka
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0

		memset(RxBuffer1, '\0', sizeof(RxBuffer1)); // Clear the buffer
 800070a:	2220      	movs	r2, #32
 800070c:	2100      	movs	r1, #0
 800070e:	4817      	ldr	r0, [pc, #92]	@ (800076c <swtch_control+0x68>)
 8000710:	f007 fd80 	bl	8008214 <memset>

	    char received_char2;
	    int8_t index = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	71fb      	strb	r3, [r7, #7]

	    // Continue to receive characters until the character '$' is found
	    while (1) {
	            // Receive one character at a time
	        	if (HAL_UART_Receive(&huart5, (uint8_t*)&received_char2, 1, 1000) == HAL_OK) {
 8000718:	1db9      	adds	r1, r7, #6
 800071a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800071e:	2201      	movs	r2, #1
 8000720:	4813      	ldr	r0, [pc, #76]	@ (8000770 <swtch_control+0x6c>)
 8000722:	f005 ffeb 	bl	80066fc <HAL_UART_Receive>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d1f5      	bne.n	8000718 <swtch_control+0x14>

	        		// Skip adding to buffer if the received character is '\0'
	                if (received_char2 == '\0') {
 800072c:	79bb      	ldrb	r3, [r7, #6]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d010      	beq.n	8000754 <swtch_control+0x50>
	                    continue;
	                }

	                RxBuffer1[index++] = received_char2;
 8000732:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000736:	b2d3      	uxtb	r3, r2
 8000738:	3301      	adds	r3, #1
 800073a:	b2db      	uxtb	r3, r3
 800073c:	71fb      	strb	r3, [r7, #7]
 800073e:	79b9      	ldrb	r1, [r7, #6]
 8000740:	4b0a      	ldr	r3, [pc, #40]	@ (800076c <swtch_control+0x68>)
 8000742:	5499      	strb	r1, [r3, r2]
	                //HAL_Delay(1);
	                // Break the loop if the end of the buffer is reached or if '$' is received
	                if (index >= RX_BUFFER_SIZE || received_char2 == '$') {
 8000744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000748:	2b1f      	cmp	r3, #31
 800074a:	dc05      	bgt.n	8000758 <swtch_control+0x54>
 800074c:	79bb      	ldrb	r3, [r7, #6]
 800074e:	2b24      	cmp	r3, #36	@ 0x24
 8000750:	d002      	beq.n	8000758 <swtch_control+0x54>
 8000752:	e7e1      	b.n	8000718 <swtch_control+0x14>
	                    continue;
 8000754:	bf00      	nop
	        	if (HAL_UART_Receive(&huart5, (uint8_t*)&received_char2, 1, 1000) == HAL_OK) {
 8000756:	e7df      	b.n	8000718 <swtch_control+0x14>

	                }
	            }
	    }
	        // Null-terminate the string
	        RxBuffer1[index] = '\0';
 8000758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075c:	4a03      	ldr	r2, [pc, #12]	@ (800076c <swtch_control+0x68>)
 800075e:	2100      	movs	r1, #0
 8000760:	54d1      	strb	r1, [r2, r3]

	        return RxBuffer1;
 8000762:	4b02      	ldr	r3, [pc, #8]	@ (800076c <swtch_control+0x68>)
}
 8000764:	4618      	mov	r0, r3
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	200000c8 	.word	0x200000c8
 8000770:	200002c8 	.word	0x200002c8

08000774 <gaps_control>:
char* gaps_control(void){ //odbiór stanów czujników szczelinowych w odkręcaczach
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0

		memset(RxBuffer1, '\0', sizeof(RxBuffer1)); // Clear the buffer
 800077a:	2220      	movs	r2, #32
 800077c:	2100      	movs	r1, #0
 800077e:	4817      	ldr	r0, [pc, #92]	@ (80007dc <gaps_control+0x68>)
 8000780:	f007 fd48 	bl	8008214 <memset>

	    char received_char2;
	    int8_t index = 0;
 8000784:	2300      	movs	r3, #0
 8000786:	71fb      	strb	r3, [r7, #7]

	    // Continue to receive characters until the character '$' is found
	    while (1) {
	            // Receive one character at a time
	        	if (HAL_UART_Receive(&huart5, (uint8_t*)&received_char2, 1, 1000) == HAL_OK) {
 8000788:	1db9      	adds	r1, r7, #6
 800078a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800078e:	2201      	movs	r2, #1
 8000790:	4813      	ldr	r0, [pc, #76]	@ (80007e0 <gaps_control+0x6c>)
 8000792:	f005 ffb3 	bl	80066fc <HAL_UART_Receive>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d1f5      	bne.n	8000788 <gaps_control+0x14>

	        		// Skip adding to buffer if the received character is '\0'
	                if (received_char2 == '\0') {
 800079c:	79bb      	ldrb	r3, [r7, #6]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d010      	beq.n	80007c4 <gaps_control+0x50>
	                    continue;
	                }

	                RxBuffer1[index++] = received_char2;
 80007a2:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80007a6:	b2d3      	uxtb	r3, r2
 80007a8:	3301      	adds	r3, #1
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	71fb      	strb	r3, [r7, #7]
 80007ae:	79b9      	ldrb	r1, [r7, #6]
 80007b0:	4b0a      	ldr	r3, [pc, #40]	@ (80007dc <gaps_control+0x68>)
 80007b2:	5499      	strb	r1, [r3, r2]
	                //HAL_Delay(1);
	                // Break the loop if the end of the buffer is reached or if '$' is received
	                if (index >= RX_BUFFER_SIZE || received_char2 == '$') {
 80007b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b8:	2b1f      	cmp	r3, #31
 80007ba:	dc05      	bgt.n	80007c8 <gaps_control+0x54>
 80007bc:	79bb      	ldrb	r3, [r7, #6]
 80007be:	2b24      	cmp	r3, #36	@ 0x24
 80007c0:	d002      	beq.n	80007c8 <gaps_control+0x54>
 80007c2:	e7e1      	b.n	8000788 <gaps_control+0x14>
	                    continue;
 80007c4:	bf00      	nop
	        	if (HAL_UART_Receive(&huart5, (uint8_t*)&received_char2, 1, 1000) == HAL_OK) {
 80007c6:	e7df      	b.n	8000788 <gaps_control+0x14>

	                }
	            }
	    }
	        // Null-terminate the string
	        RxBuffer1[index] = '\0';
 80007c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007cc:	4a03      	ldr	r2, [pc, #12]	@ (80007dc <gaps_control+0x68>)
 80007ce:	2100      	movs	r1, #0
 80007d0:	54d1      	strb	r1, [r2, r3]

	        return RxBuffer1;
 80007d2:	4b02      	ldr	r3, [pc, #8]	@ (80007dc <gaps_control+0x68>)
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	200000c8 	.word	0x200000c8
 80007e0:	200002c8 	.word	0x200002c8

080007e4 <SPI_Communication>:
void SPI_Communication(void)
{
 80007e4:	b590      	push	{r4, r7, lr}
 80007e6:	b09b      	sub	sp, #108	@ 0x6c
 80007e8:	af02      	add	r7, sp, #8

    int8_t index = 0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    uint8_t receivedData;
    uint8_t pinstate = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 80007f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007f8:	f002 f93e 	bl	8002a78 <HAL_GPIO_ReadPin>
 80007fc:	4603      	mov	r3, r0
 80007fe:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e


    if (!pinstate) {memset(RxBuffer, 0, sizeof(RxBuffer));}
 8000802:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8000806:	2b00      	cmp	r3, #0
 8000808:	f040 8254 	bne.w	8000cb4 <SPI_Communication+0x4d0>
 800080c:	2220      	movs	r2, #32
 800080e:	2100      	movs	r1, #0
 8000810:	48a8      	ldr	r0, [pc, #672]	@ (8000ab4 <SPI_Communication+0x2d0>)
 8000812:	f007 fcff 	bl	8008214 <memset>

    while (!pinstate) {
 8000816:	e24d      	b.n	8000cb4 <SPI_Communication+0x4d0>
        // Receive data from SPI
        HAL_SPI_Receive(&hspi1, &receivedData, 1, HAL_MAX_DELAY);
 8000818:	f107 011b 	add.w	r1, r7, #27
 800081c:	f04f 33ff 	mov.w	r3, #4294967295
 8000820:	2201      	movs	r2, #1
 8000822:	48a5      	ldr	r0, [pc, #660]	@ (8000ab8 <SPI_Communication+0x2d4>)
 8000824:	f003 fba8 	bl	8003f78 <HAL_SPI_Receive>

        // Check for buffer overflow
        if (index < MAX_BUFFER_SIZE)
 8000828:	f997 305f 	ldrsb.w	r3, [r7, #95]	@ 0x5f
 800082c:	2b1f      	cmp	r3, #31
 800082e:	f300 8241 	bgt.w	8000cb4 <SPI_Communication+0x4d0>
        {
            // Store received data in buffer
            RxBuffer[index++] = (char)receivedData;
 8000832:	f997 205f 	ldrsb.w	r2, [r7, #95]	@ 0x5f
 8000836:	b2d3      	uxtb	r3, r2
 8000838:	3301      	adds	r3, #1
 800083a:	b2db      	uxtb	r3, r3
 800083c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8000840:	7ef9      	ldrb	r1, [r7, #27]
 8000842:	4b9c      	ldr	r3, [pc, #624]	@ (8000ab4 <SPI_Communication+0x2d0>)
 8000844:	5499      	strb	r1, [r3, r2]

            // Check if end of message
            if ((char)receivedData == END_OF_MESSAGE)
 8000846:	7efb      	ldrb	r3, [r7, #27]
 8000848:	2b24      	cmp	r3, #36	@ 0x24
 800084a:	f040 822a 	bne.w	8000ca2 <SPI_Communication+0x4be>
            {
            	char* command = command_checker(RxBuffer);
 800084e:	4899      	ldr	r0, [pc, #612]	@ (8000ab4 <SPI_Communication+0x2d0>)
 8000850:	f7ff fec6 	bl	80005e0 <command_checker>
 8000854:	65b8      	str	r0, [r7, #88]	@ 0x58
            	if(command == NULL){command = "MEM#ERR";}
 8000856:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000858:	2b00      	cmp	r3, #0
 800085a:	d102      	bne.n	8000862 <SPI_Communication+0x7e>
 800085c:	4b97      	ldr	r3, [pc, #604]	@ (8000abc <SPI_Communication+0x2d8>)
 800085e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000860:	e20c      	b.n	8000c7c <SPI_Communication+0x498>
////////////////////////////////////////////////////////////////////////////////////////////////////////////
            	else if(strcmp(command, "HEAD") == 0)
 8000862:	4997      	ldr	r1, [pc, #604]	@ (8000ac0 <SPI_Communication+0x2dc>)
 8000864:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8000866:	f7ff fcdb 	bl	8000220 <strcmp>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d146      	bne.n	80008fe <SPI_Communication+0x11a>
            	{

            		HAL_UART_Transmit(&huart5, (uint8_t *)RxBuffer, strlen(RxBuffer), HAL_MAX_DELAY);
 8000870:	4890      	ldr	r0, [pc, #576]	@ (8000ab4 <SPI_Communication+0x2d0>)
 8000872:	f7ff fcdf 	bl	8000234 <strlen>
 8000876:	4603      	mov	r3, r0
 8000878:	b29a      	uxth	r2, r3
 800087a:	f04f 33ff 	mov.w	r3, #4294967295
 800087e:	498d      	ldr	r1, [pc, #564]	@ (8000ab4 <SPI_Communication+0x2d0>)
 8000880:	4890      	ldr	r0, [pc, #576]	@ (8000ac4 <SPI_Communication+0x2e0>)
 8000882:	f005 fead 	bl	80065e0 <HAL_UART_Transmit>
            		HAL_Delay(1);
 8000886:	2001      	movs	r0, #1
 8000888:	f001 fd82 	bl	8002390 <HAL_Delay>
            		char* received_data = head_control();
 800088c:	f7ff fee4 	bl	8000658 <head_control>
 8000890:	61f8      	str	r0, [r7, #28]
            		char* str;
            		memset(TxBuffer, '\0', sizeof(TxBuffer));
 8000892:	2220      	movs	r2, #32
 8000894:	2100      	movs	r1, #0
 8000896:	488c      	ldr	r0, [pc, #560]	@ (8000ac8 <SPI_Communication+0x2e4>)
 8000898:	f007 fcbc 	bl	8008214 <memset>
            		if(strcmp(received_data, "HEAD#0#F0F0F0F0$") == 0 ){str = "HEAD#0#NOK$";}
 800089c:	498b      	ldr	r1, [pc, #556]	@ (8000acc <SPI_Communication+0x2e8>)
 800089e:	69f8      	ldr	r0, [r7, #28]
 80008a0:	f7ff fcbe 	bl	8000220 <strcmp>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d102      	bne.n	80008b0 <SPI_Communication+0xcc>
 80008aa:	4b89      	ldr	r3, [pc, #548]	@ (8000ad0 <SPI_Communication+0x2ec>)
 80008ac:	657b      	str	r3, [r7, #84]	@ 0x54
 80008ae:	e018      	b.n	80008e2 <SPI_Communication+0xfe>
            		else if(strcmp(received_data, "HEAD#1#F0F0F0F0$") == 0 ) {str = "HEAD#1#NOK$";}
 80008b0:	4988      	ldr	r1, [pc, #544]	@ (8000ad4 <SPI_Communication+0x2f0>)
 80008b2:	69f8      	ldr	r0, [r7, #28]
 80008b4:	f7ff fcb4 	bl	8000220 <strcmp>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d102      	bne.n	80008c4 <SPI_Communication+0xe0>
 80008be:	4b86      	ldr	r3, [pc, #536]	@ (8000ad8 <SPI_Communication+0x2f4>)
 80008c0:	657b      	str	r3, [r7, #84]	@ 0x54
 80008c2:	e00e      	b.n	80008e2 <SPI_Communication+0xfe>
            		else if (received_data[5]=='0'){str = "HEAD#0#OK$";}
 80008c4:	69fb      	ldr	r3, [r7, #28]
 80008c6:	3305      	adds	r3, #5
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	2b30      	cmp	r3, #48	@ 0x30
 80008cc:	d102      	bne.n	80008d4 <SPI_Communication+0xf0>
 80008ce:	4b83      	ldr	r3, [pc, #524]	@ (8000adc <SPI_Communication+0x2f8>)
 80008d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80008d2:	e006      	b.n	80008e2 <SPI_Communication+0xfe>
            		else if (received_data[5]=='1'){str="HEAD#1#OK$";}
 80008d4:	69fb      	ldr	r3, [r7, #28]
 80008d6:	3305      	adds	r3, #5
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	2b31      	cmp	r3, #49	@ 0x31
 80008dc:	d101      	bne.n	80008e2 <SPI_Communication+0xfe>
 80008de:	4b80      	ldr	r3, [pc, #512]	@ (8000ae0 <SPI_Communication+0x2fc>)
 80008e0:	657b      	str	r3, [r7, #84]	@ 0x54

            		printf("%s\n",str);
 80008e2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80008e4:	f007 fb6a 	bl	8007fbc <puts>
            		strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
 80008e8:	221f      	movs	r2, #31
 80008ea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80008ec:	4876      	ldr	r0, [pc, #472]	@ (8000ac8 <SPI_Communication+0x2e4>)
 80008ee:	f007 fc99 	bl	8008224 <strncpy>
            		memset(RxBuffer, '\0', sizeof(RxBuffer));
 80008f2:	2220      	movs	r2, #32
 80008f4:	2100      	movs	r1, #0
 80008f6:	486f      	ldr	r0, [pc, #444]	@ (8000ab4 <SPI_Communication+0x2d0>)
 80008f8:	f007 fc8c 	bl	8008214 <memset>
 80008fc:	e1be      	b.n	8000c7c <SPI_Communication+0x498>


            	 }
///////////////////////////////////////////////////////////////////////////////////////////////////////////
            	else if(strcmp(command, "MAGNET") == 0)
 80008fe:	4979      	ldr	r1, [pc, #484]	@ (8000ae4 <SPI_Communication+0x300>)
 8000900:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8000902:	f7ff fc8d 	bl	8000220 <strcmp>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d144      	bne.n	8000996 <SPI_Communication+0x1b2>
            	{


            		int8_t MagState;

            		HAL_UART_Transmit(&huart5, (uint8_t *)RxBuffer, strlen(RxBuffer), HAL_MAX_DELAY);
 800090c:	4869      	ldr	r0, [pc, #420]	@ (8000ab4 <SPI_Communication+0x2d0>)
 800090e:	f7ff fc91 	bl	8000234 <strlen>
 8000912:	4603      	mov	r3, r0
 8000914:	b29a      	uxth	r2, r3
 8000916:	f04f 33ff 	mov.w	r3, #4294967295
 800091a:	4966      	ldr	r1, [pc, #408]	@ (8000ab4 <SPI_Communication+0x2d0>)
 800091c:	4869      	ldr	r0, [pc, #420]	@ (8000ac4 <SPI_Communication+0x2e0>)
 800091e:	f005 fe5f 	bl	80065e0 <HAL_UART_Transmit>
            		memset(TxBuffer, '\0', sizeof(TxBuffer));
 8000922:	2220      	movs	r2, #32
 8000924:	2100      	movs	r1, #0
 8000926:	4868      	ldr	r0, [pc, #416]	@ (8000ac8 <SPI_Communication+0x2e4>)
 8000928:	f007 fc74 	bl	8008214 <memset>
					sscanf(RxBuffer, "MAGNET#%d$", &MagState);
 800092c:	f107 031a 	add.w	r3, r7, #26
 8000930:	461a      	mov	r2, r3
 8000932:	496d      	ldr	r1, [pc, #436]	@ (8000ae8 <SPI_Communication+0x304>)
 8000934:	485f      	ldr	r0, [pc, #380]	@ (8000ab4 <SPI_Communication+0x2d0>)
 8000936:	f007 fb69 	bl	800800c <siscanf>
					if(MagState != 0){TileON = 1 ;}
 800093a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d003      	beq.n	800094a <SPI_Communication+0x166>
 8000942:	4b6a      	ldr	r3, [pc, #424]	@ (8000aec <SPI_Communication+0x308>)
 8000944:	2201      	movs	r2, #1
 8000946:	701a      	strb	r2, [r3, #0]
 8000948:	e002      	b.n	8000950 <SPI_Communication+0x16c>
					else{TileON = 0 ;}
 800094a:	4b68      	ldr	r3, [pc, #416]	@ (8000aec <SPI_Communication+0x308>)
 800094c:	2200      	movs	r2, #0
 800094e:	701a      	strb	r2, [r3, #0]
					//power=char(MagState);
					if(MagState==0){
 8000950:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d10a      	bne.n	800096e <SPI_Communication+0x18a>
						char *str = "MAGNET#0#OK$";
 8000958:	4b65      	ldr	r3, [pc, #404]	@ (8000af0 <SPI_Communication+0x30c>)
 800095a:	623b      	str	r3, [r7, #32]
						HAL_Delay(200);
 800095c:	20c8      	movs	r0, #200	@ 0xc8
 800095e:	f001 fd17 	bl	8002390 <HAL_Delay>
						strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
 8000962:	221f      	movs	r2, #31
 8000964:	6a39      	ldr	r1, [r7, #32]
 8000966:	4858      	ldr	r0, [pc, #352]	@ (8000ac8 <SPI_Communication+0x2e4>)
 8000968:	f007 fc5c 	bl	8008224 <strncpy>
 800096c:	e00d      	b.n	800098a <SPI_Communication+0x1a6>
					}
					else if(MagState==4){
 800096e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8000972:	2b04      	cmp	r3, #4
 8000974:	d109      	bne.n	800098a <SPI_Communication+0x1a6>
						char *str = "MAGNET#4#OK$";
 8000976:	4b5f      	ldr	r3, [pc, #380]	@ (8000af4 <SPI_Communication+0x310>)
 8000978:	627b      	str	r3, [r7, #36]	@ 0x24
						HAL_Delay(200);
 800097a:	20c8      	movs	r0, #200	@ 0xc8
 800097c:	f001 fd08 	bl	8002390 <HAL_Delay>
	            		strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
 8000980:	221f      	movs	r2, #31
 8000982:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000984:	4850      	ldr	r0, [pc, #320]	@ (8000ac8 <SPI_Communication+0x2e4>)
 8000986:	f007 fc4d 	bl	8008224 <strncpy>
					//char *str = "MAGNET#4#OK$";
					//HAL_Delay(200);
					//strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
            		//HAL_Delay(200);

            		memset(RxBuffer, '\0', sizeof(RxBuffer));
 800098a:	2220      	movs	r2, #32
 800098c:	2100      	movs	r1, #0
 800098e:	4849      	ldr	r0, [pc, #292]	@ (8000ab4 <SPI_Communication+0x2d0>)
 8000990:	f007 fc40 	bl	8008214 <memset>
 8000994:	e172      	b.n	8000c7c <SPI_Communication+0x498>
            	}
///////////////////////////////////////////////////////////////////////////////////////////////////////////
            	else if(strcmp(command,"ROT")==0)
 8000996:	4958      	ldr	r1, [pc, #352]	@ (8000af8 <SPI_Communication+0x314>)
 8000998:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800099a:	f7ff fc41 	bl	8000220 <strcmp>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d11d      	bne.n	80009e0 <SPI_Communication+0x1fc>
            	{
            		    int number;
            		    sscanf(RxBuffer, "ROT#%d$", &number);
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	461a      	mov	r2, r3
 80009aa:	4954      	ldr	r1, [pc, #336]	@ (8000afc <SPI_Communication+0x318>)
 80009ac:	4841      	ldr	r0, [pc, #260]	@ (8000ab4 <SPI_Communication+0x2d0>)
 80009ae:	f007 fb2d 	bl	800800c <siscanf>
            		    Motor_Steer(number);
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	b25b      	sxtb	r3, r3
 80009b6:	4618      	mov	r0, r3
 80009b8:	f000 fd34 	bl	8001424 <Motor_Steer>
            		memset(TxBuffer, '\0', sizeof(TxBuffer));
 80009bc:	2220      	movs	r2, #32
 80009be:	2100      	movs	r1, #0
 80009c0:	4841      	ldr	r0, [pc, #260]	@ (8000ac8 <SPI_Communication+0x2e4>)
 80009c2:	f007 fc27 	bl	8008214 <memset>
            		char *str = "ROT#OK$";
 80009c6:	4b4e      	ldr	r3, [pc, #312]	@ (8000b00 <SPI_Communication+0x31c>)
 80009c8:	62bb      	str	r3, [r7, #40]	@ 0x28
            		strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
 80009ca:	221f      	movs	r2, #31
 80009cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80009ce:	483e      	ldr	r0, [pc, #248]	@ (8000ac8 <SPI_Communication+0x2e4>)
 80009d0:	f007 fc28 	bl	8008224 <strncpy>
            		memset(RxBuffer, '\0', sizeof(RxBuffer));
 80009d4:	2220      	movs	r2, #32
 80009d6:	2100      	movs	r1, #0
 80009d8:	4836      	ldr	r0, [pc, #216]	@ (8000ab4 <SPI_Communication+0x2d0>)
 80009da:	f007 fc1b 	bl	8008214 <memset>
 80009de:	e14d      	b.n	8000c7c <SPI_Communication+0x498>
            	}
/////////////////////////////////////////////////////////////////////////////////////////////////////////
            	else if(strcmp(command,"AROT")==0)
 80009e0:	4948      	ldr	r1, [pc, #288]	@ (8000b04 <SPI_Communication+0x320>)
 80009e2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80009e4:	f7ff fc1c 	bl	8000220 <strcmp>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d141      	bne.n	8000a72 <SPI_Communication+0x28e>
            	{

            		 int number;
            		 sscanf(RxBuffer, "AROT#%d$", &number);
 80009ee:	f107 0310 	add.w	r3, r7, #16
 80009f2:	461a      	mov	r2, r3
 80009f4:	4944      	ldr	r1, [pc, #272]	@ (8000b08 <SPI_Communication+0x324>)
 80009f6:	482f      	ldr	r0, [pc, #188]	@ (8000ab4 <SPI_Communication+0x2d0>)
 80009f8:	f007 fb08 	bl	800800c <siscanf>


            		 ABSRotateHead(number);
 80009fc:	693b      	ldr	r3, [r7, #16]
 80009fe:	b25b      	sxtb	r3, r3
 8000a00:	4618      	mov	r0, r3
 8000a02:	f000 fdb1 	bl	8001568 <ABSRotateHead>
            		 //char number1=number;
            		 memset(TxBuffer, '\0', sizeof(TxBuffer));
 8000a06:	2220      	movs	r2, #32
 8000a08:	2100      	movs	r1, #0
 8000a0a:	482f      	ldr	r0, [pc, #188]	@ (8000ac8 <SPI_Communication+0x2e4>)
 8000a0c:	f007 fc02 	bl	8008214 <memset>
            		 //if ()
            		 if (number== 1){
 8000a10:	693b      	ldr	r3, [r7, #16]
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d107      	bne.n	8000a26 <SPI_Communication+0x242>
            		 	 char *str = "AROT#1#OK$";
 8000a16:	4b3d      	ldr	r3, [pc, #244]	@ (8000b0c <SPI_Communication+0x328>)
 8000a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
            		 	 strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
 8000a1a:	221f      	movs	r2, #31
 8000a1c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000a1e:	482a      	ldr	r0, [pc, #168]	@ (8000ac8 <SPI_Communication+0x2e4>)
 8000a20:	f007 fc00 	bl	8008224 <strncpy>
 8000a24:	e01f      	b.n	8000a66 <SPI_Communication+0x282>
            		 }
            		 else if (number==0){
 8000a26:	693b      	ldr	r3, [r7, #16]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d107      	bne.n	8000a3c <SPI_Communication+0x258>
            			 char *str = "AROT#0#OK$";
 8000a2c:	4b38      	ldr	r3, [pc, #224]	@ (8000b10 <SPI_Communication+0x32c>)
 8000a2e:	633b      	str	r3, [r7, #48]	@ 0x30
            			 strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
 8000a30:	221f      	movs	r2, #31
 8000a32:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000a34:	4824      	ldr	r0, [pc, #144]	@ (8000ac8 <SPI_Communication+0x2e4>)
 8000a36:	f007 fbf5 	bl	8008224 <strncpy>
 8000a3a:	e014      	b.n	8000a66 <SPI_Communication+0x282>
            		 }
            		 else if (number==2){
 8000a3c:	693b      	ldr	r3, [r7, #16]
 8000a3e:	2b02      	cmp	r3, #2
 8000a40:	d107      	bne.n	8000a52 <SPI_Communication+0x26e>
            		 	 char *str = "AROT#2#OK$";
 8000a42:	4b34      	ldr	r3, [pc, #208]	@ (8000b14 <SPI_Communication+0x330>)
 8000a44:	637b      	str	r3, [r7, #52]	@ 0x34
            		 	 strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
 8000a46:	221f      	movs	r2, #31
 8000a48:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000a4a:	481f      	ldr	r0, [pc, #124]	@ (8000ac8 <SPI_Communication+0x2e4>)
 8000a4c:	f007 fbea 	bl	8008224 <strncpy>
 8000a50:	e009      	b.n	8000a66 <SPI_Communication+0x282>
            		 }
            		 else if (number==3){
 8000a52:	693b      	ldr	r3, [r7, #16]
 8000a54:	2b03      	cmp	r3, #3
 8000a56:	d106      	bne.n	8000a66 <SPI_Communication+0x282>
            		 	 char *str = "AROT#3#OK$";
 8000a58:	4b2f      	ldr	r3, [pc, #188]	@ (8000b18 <SPI_Communication+0x334>)
 8000a5a:	63bb      	str	r3, [r7, #56]	@ 0x38
            		 	 strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
 8000a5c:	221f      	movs	r2, #31
 8000a5e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8000a60:	4819      	ldr	r0, [pc, #100]	@ (8000ac8 <SPI_Communication+0x2e4>)
 8000a62:	f007 fbdf 	bl	8008224 <strncpy>
            		 }
            		// strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
            		 memset(RxBuffer, '\0', sizeof(RxBuffer));
 8000a66:	2220      	movs	r2, #32
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4812      	ldr	r0, [pc, #72]	@ (8000ab4 <SPI_Communication+0x2d0>)
 8000a6c:	f007 fbd2 	bl	8008214 <memset>
 8000a70:	e104      	b.n	8000c7c <SPI_Communication+0x498>
            	}
/////////////////////////////////////////////////////////////////////////////////////////////////////////
            	else if(strcmp(command,"TILEBASE")==0) //bazowanie obortu kafelka
 8000a72:	492a      	ldr	r1, [pc, #168]	@ (8000b1c <SPI_Communication+0x338>)
 8000a74:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8000a76:	f7ff fbd3 	bl	8000220 <strcmp>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d164      	bne.n	8000b4a <SPI_Communication+0x366>
            	{
            		HeadBase();
 8000a80:	f001 f80c 	bl	8001a9c <HeadBase>

            		memset(TxBuffer, '\0', sizeof(TxBuffer));
 8000a84:	2220      	movs	r2, #32
 8000a86:	2100      	movs	r1, #0
 8000a88:	480f      	ldr	r0, [pc, #60]	@ (8000ac8 <SPI_Communication+0x2e4>)
 8000a8a:	f007 fbc3 	bl	8008214 <memset>
            		GPIO_PinState current_state = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7); // Read pin state
 8000a8e:	2180      	movs	r1, #128	@ 0x80
 8000a90:	4823      	ldr	r0, [pc, #140]	@ (8000b20 <SPI_Communication+0x33c>)
 8000a92:	f001 fff1 	bl	8002a78 <HAL_GPIO_ReadPin>
 8000a96:	4603      	mov	r3, r0
 8000a98:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            		if (current_state == GPIO_PIN_SET){
 8000a9c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d141      	bne.n	8000b28 <SPI_Communication+0x344>
            			char* str = "TILEBASE#OK$";
 8000aa4:	4b1f      	ldr	r3, [pc, #124]	@ (8000b24 <SPI_Communication+0x340>)
 8000aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
            			strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
 8000aa8:	221f      	movs	r2, #31
 8000aaa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8000aac:	4806      	ldr	r0, [pc, #24]	@ (8000ac8 <SPI_Communication+0x2e4>)
 8000aae:	f007 fbb9 	bl	8008224 <strncpy>
 8000ab2:	e044      	b.n	8000b3e <SPI_Communication+0x35a>
 8000ab4:	20000088 	.word	0x20000088
 8000ab8:	200000ec 	.word	0x200000ec
 8000abc:	080095dc 	.word	0x080095dc
 8000ac0:	080095e4 	.word	0x080095e4
 8000ac4:	200002c8 	.word	0x200002c8
 8000ac8:	200000a8 	.word	0x200000a8
 8000acc:	080095ec 	.word	0x080095ec
 8000ad0:	08009600 	.word	0x08009600
 8000ad4:	0800960c 	.word	0x0800960c
 8000ad8:	08009620 	.word	0x08009620
 8000adc:	0800962c 	.word	0x0800962c
 8000ae0:	08009638 	.word	0x08009638
 8000ae4:	08009644 	.word	0x08009644
 8000ae8:	0800964c 	.word	0x0800964c
 8000aec:	200000e9 	.word	0x200000e9
 8000af0:	08009658 	.word	0x08009658
 8000af4:	08009668 	.word	0x08009668
 8000af8:	08009678 	.word	0x08009678
 8000afc:	0800967c 	.word	0x0800967c
 8000b00:	08009684 	.word	0x08009684
 8000b04:	0800968c 	.word	0x0800968c
 8000b08:	08009694 	.word	0x08009694
 8000b0c:	080096a0 	.word	0x080096a0
 8000b10:	080096ac 	.word	0x080096ac
 8000b14:	080096b8 	.word	0x080096b8
 8000b18:	080096c4 	.word	0x080096c4
 8000b1c:	080096d0 	.word	0x080096d0
 8000b20:	48001000 	.word	0x48001000
 8000b24:	080096dc 	.word	0x080096dc
            		}
            		else if (current_state == GPIO_PIN_RESET){
 8000b28:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d106      	bne.n	8000b3e <SPI_Communication+0x35a>
            			char* str = "TILEBASE#NOK$";
 8000b30:	4b65      	ldr	r3, [pc, #404]	@ (8000cc8 <SPI_Communication+0x4e4>)
 8000b32:	643b      	str	r3, [r7, #64]	@ 0x40
            			strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
 8000b34:	221f      	movs	r2, #31
 8000b36:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8000b38:	4864      	ldr	r0, [pc, #400]	@ (8000ccc <SPI_Communication+0x4e8>)
 8000b3a:	f007 fb73 	bl	8008224 <strncpy>
            		}
            		//strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
            		memset(RxBuffer, '\0', sizeof(RxBuffer));
 8000b3e:	2220      	movs	r2, #32
 8000b40:	2100      	movs	r1, #0
 8000b42:	4863      	ldr	r0, [pc, #396]	@ (8000cd0 <SPI_Communication+0x4ec>)
 8000b44:	f007 fb66 	bl	8008214 <memset>
 8000b48:	e098      	b.n	8000c7c <SPI_Communication+0x498>
            	}
////////////////////////////////////////////////////////////////////////////////////////////////////////
            	else if(strcmp(command,"SWTCH")==0) //Wysyłka stanu obrotu czujnika 0-wcisniety, 1-pusty
 8000b4a:	4962      	ldr	r1, [pc, #392]	@ (8000cd4 <SPI_Communication+0x4f0>)
 8000b4c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8000b4e:	f7ff fb67 	bl	8000220 <strcmp>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d151      	bne.n	8000bfc <SPI_Communication+0x418>
            	{
            		HAL_UART_Transmit(&huart5, (uint8_t *)RxBuffer, strlen(RxBuffer), HAL_MAX_DELAY);
 8000b58:	485d      	ldr	r0, [pc, #372]	@ (8000cd0 <SPI_Communication+0x4ec>)
 8000b5a:	f7ff fb6b 	bl	8000234 <strlen>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	b29a      	uxth	r2, r3
 8000b62:	f04f 33ff 	mov.w	r3, #4294967295
 8000b66:	495a      	ldr	r1, [pc, #360]	@ (8000cd0 <SPI_Communication+0x4ec>)
 8000b68:	485b      	ldr	r0, [pc, #364]	@ (8000cd8 <SPI_Communication+0x4f4>)
 8000b6a:	f005 fd39 	bl	80065e0 <HAL_UART_Transmit>
            		//HAL_Delay(1);
            		char* received_data = swtch_control();
 8000b6e:	f7ff fdc9 	bl	8000704 <swtch_control>
 8000b72:	64b8      	str	r0, [r7, #72]	@ 0x48
            		char* str;
            		memset(TxBuffer, '\0', sizeof(TxBuffer));
 8000b74:	2220      	movs	r2, #32
 8000b76:	2100      	movs	r1, #0
 8000b78:	4854      	ldr	r0, [pc, #336]	@ (8000ccc <SPI_Communication+0x4e8>)
 8000b7a:	f007 fb4b 	bl	8008214 <memset>
            		if((strcmp(received_data, "S#0000$")==0)){str = "SWTCH#0#0#0#0$";}
 8000b7e:	4957      	ldr	r1, [pc, #348]	@ (8000cdc <SPI_Communication+0x4f8>)
 8000b80:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000b82:	f7ff fb4d 	bl	8000220 <strcmp>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d102      	bne.n	8000b92 <SPI_Communication+0x3ae>
 8000b8c:	4b54      	ldr	r3, [pc, #336]	@ (8000ce0 <SPI_Communication+0x4fc>)
 8000b8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8000b90:	e029      	b.n	8000be6 <SPI_Communication+0x402>
            		else if ((strcmp(received_data, "S#1000$")==0)){str = "SWTCH#1#0#0#0$";}
 8000b92:	4954      	ldr	r1, [pc, #336]	@ (8000ce4 <SPI_Communication+0x500>)
 8000b94:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000b96:	f7ff fb43 	bl	8000220 <strcmp>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d102      	bne.n	8000ba6 <SPI_Communication+0x3c2>
 8000ba0:	4b51      	ldr	r3, [pc, #324]	@ (8000ce8 <SPI_Communication+0x504>)
 8000ba2:	653b      	str	r3, [r7, #80]	@ 0x50
 8000ba4:	e01f      	b.n	8000be6 <SPI_Communication+0x402>
            		else if ((strcmp(received_data, "S#0100$")==0)){str = "SWTCH#0#1#0#0$";}
 8000ba6:	4951      	ldr	r1, [pc, #324]	@ (8000cec <SPI_Communication+0x508>)
 8000ba8:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000baa:	f7ff fb39 	bl	8000220 <strcmp>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d102      	bne.n	8000bba <SPI_Communication+0x3d6>
 8000bb4:	4b4e      	ldr	r3, [pc, #312]	@ (8000cf0 <SPI_Communication+0x50c>)
 8000bb6:	653b      	str	r3, [r7, #80]	@ 0x50
 8000bb8:	e015      	b.n	8000be6 <SPI_Communication+0x402>
            		else if ((strcmp(received_data, "S#0010$")==0)){str = "SWTCH#0#0#1#0$";}
 8000bba:	494e      	ldr	r1, [pc, #312]	@ (8000cf4 <SPI_Communication+0x510>)
 8000bbc:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000bbe:	f7ff fb2f 	bl	8000220 <strcmp>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d102      	bne.n	8000bce <SPI_Communication+0x3ea>
 8000bc8:	4b4b      	ldr	r3, [pc, #300]	@ (8000cf8 <SPI_Communication+0x514>)
 8000bca:	653b      	str	r3, [r7, #80]	@ 0x50
 8000bcc:	e00b      	b.n	8000be6 <SPI_Communication+0x402>
            		else if ((strcmp(received_data, "S#0001$")==0)){str = "SWTCH#0#0#0#1$";}
 8000bce:	494b      	ldr	r1, [pc, #300]	@ (8000cfc <SPI_Communication+0x518>)
 8000bd0:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000bd2:	f7ff fb25 	bl	8000220 <strcmp>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d102      	bne.n	8000be2 <SPI_Communication+0x3fe>
 8000bdc:	4b48      	ldr	r3, [pc, #288]	@ (8000d00 <SPI_Communication+0x51c>)
 8000bde:	653b      	str	r3, [r7, #80]	@ 0x50
 8000be0:	e001      	b.n	8000be6 <SPI_Communication+0x402>
            		else{str="SWTCH#ERR$";}
 8000be2:	4b48      	ldr	r3, [pc, #288]	@ (8000d04 <SPI_Communication+0x520>)
 8000be4:	653b      	str	r3, [r7, #80]	@ 0x50

            		strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
 8000be6:	221f      	movs	r2, #31
 8000be8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8000bea:	4838      	ldr	r0, [pc, #224]	@ (8000ccc <SPI_Communication+0x4e8>)
 8000bec:	f007 fb1a 	bl	8008224 <strncpy>
            		memset(RxBuffer, '\0', sizeof(RxBuffer));
 8000bf0:	2220      	movs	r2, #32
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4836      	ldr	r0, [pc, #216]	@ (8000cd0 <SPI_Communication+0x4ec>)
 8000bf6:	f007 fb0d 	bl	8008214 <memset>
 8000bfa:	e03f      	b.n	8000c7c <SPI_Communication+0x498>

            	}
            	////////////////////////////////////////////////////////////////////////////////////////////////////////
            	else if(strcmp(command,"GAPS")==0) //Wysyłka stanu obrotu czujnika 0-wcisniety, 1-pusty
 8000bfc:	4942      	ldr	r1, [pc, #264]	@ (8000d08 <SPI_Communication+0x524>)
 8000bfe:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8000c00:	f7ff fb0e 	bl	8000220 <strcmp>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d138      	bne.n	8000c7c <SPI_Communication+0x498>
            	{
            		HAL_UART_Transmit(&huart5, (uint8_t *)RxBuffer, strlen(RxBuffer), HAL_MAX_DELAY);
 8000c0a:	4831      	ldr	r0, [pc, #196]	@ (8000cd0 <SPI_Communication+0x4ec>)
 8000c0c:	f7ff fb12 	bl	8000234 <strlen>
 8000c10:	4603      	mov	r3, r0
 8000c12:	b29a      	uxth	r2, r3
 8000c14:	f04f 33ff 	mov.w	r3, #4294967295
 8000c18:	492d      	ldr	r1, [pc, #180]	@ (8000cd0 <SPI_Communication+0x4ec>)
 8000c1a:	482f      	ldr	r0, [pc, #188]	@ (8000cd8 <SPI_Communication+0x4f4>)
 8000c1c:	f005 fce0 	bl	80065e0 <HAL_UART_Transmit>
            		//HAL_Delay(1);
            		char* received_data = gaps_control();
 8000c20:	f7ff fda8 	bl	8000774 <gaps_control>
 8000c24:	64f8      	str	r0, [r7, #76]	@ 0x4c
            		char output[11];
            		sprintf(output,"G#%c#%c#%c#%c$",received_data[2],received_data[3],received_data[4],received_data[5] );
 8000c26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000c28:	3302      	adds	r3, #2
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000c30:	3303      	adds	r3, #3
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	461c      	mov	r4, r3
 8000c36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000c38:	3304      	adds	r3, #4
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000c40:	3305      	adds	r3, #5
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	1d38      	adds	r0, r7, #4
 8000c46:	9301      	str	r3, [sp, #4]
 8000c48:	9200      	str	r2, [sp, #0]
 8000c4a:	4623      	mov	r3, r4
 8000c4c:	460a      	mov	r2, r1
 8000c4e:	492f      	ldr	r1, [pc, #188]	@ (8000d0c <SPI_Communication+0x528>)
 8000c50:	f007 f9bc 	bl	8007fcc <siprintf>
            		printf("%s\n", output);
 8000c54:	1d3b      	adds	r3, r7, #4
 8000c56:	4618      	mov	r0, r3
 8000c58:	f007 f9b0 	bl	8007fbc <puts>
            		memset(TxBuffer, '\0', sizeof(TxBuffer));
 8000c5c:	2220      	movs	r2, #32
 8000c5e:	2100      	movs	r1, #0
 8000c60:	481a      	ldr	r0, [pc, #104]	@ (8000ccc <SPI_Communication+0x4e8>)
 8000c62:	f007 fad7 	bl	8008214 <memset>

            		strncpy(TxBuffer, output, sizeof(TxBuffer) - 1);
 8000c66:	1d3b      	adds	r3, r7, #4
 8000c68:	221f      	movs	r2, #31
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4817      	ldr	r0, [pc, #92]	@ (8000ccc <SPI_Communication+0x4e8>)
 8000c6e:	f007 fad9 	bl	8008224 <strncpy>
            		memset(RxBuffer, '\0', sizeof(RxBuffer));
 8000c72:	2220      	movs	r2, #32
 8000c74:	2100      	movs	r1, #0
 8000c76:	4816      	ldr	r0, [pc, #88]	@ (8000cd0 <SPI_Communication+0x4ec>)
 8000c78:	f007 facc 	bl	8008214 <memset>

            	}

                HAL_SPI_Transmit(&hspi1, (uint8_t *)TxBuffer, strlen(TxBuffer), HAL_MAX_DELAY);
 8000c7c:	4813      	ldr	r0, [pc, #76]	@ (8000ccc <SPI_Communication+0x4e8>)
 8000c7e:	f7ff fad9 	bl	8000234 <strlen>
 8000c82:	4603      	mov	r3, r0
 8000c84:	b29a      	uxth	r2, r3
 8000c86:	f04f 33ff 	mov.w	r3, #4294967295
 8000c8a:	4910      	ldr	r1, [pc, #64]	@ (8000ccc <SPI_Communication+0x4e8>)
 8000c8c:	4820      	ldr	r0, [pc, #128]	@ (8000d10 <SPI_Communication+0x52c>)
 8000c8e:	f002 fffe 	bl	8003c8e <HAL_SPI_Transmit>
            	//HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)TxBuffer, strlen(TxBuffer));
                index = 0; // Reset buffer index
 8000c92:	2300      	movs	r3, #0
 8000c94:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                //memset(TxBuffer, '\0', sizeof(TxBuffer));
                free(command);
 8000c98:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8000c9a:	f006 ffc1 	bl	8007c20 <free>
                command = NULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	65bb      	str	r3, [r7, #88]	@ 0x58
        }

        // Update pin state
        pinstate = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 8000ca2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ca6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000caa:	f001 fee5 	bl	8002a78 <HAL_GPIO_ReadPin>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    while (!pinstate) {
 8000cb4:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	f43f adad 	beq.w	8000818 <SPI_Communication+0x34>

    }
    }
}
 8000cbe:	bf00      	nop
 8000cc0:	bf00      	nop
 8000cc2:	3764      	adds	r7, #100	@ 0x64
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd90      	pop	{r4, r7, pc}
 8000cc8:	080096ec 	.word	0x080096ec
 8000ccc:	200000a8 	.word	0x200000a8
 8000cd0:	20000088 	.word	0x20000088
 8000cd4:	080096fc 	.word	0x080096fc
 8000cd8:	200002c8 	.word	0x200002c8
 8000cdc:	08009704 	.word	0x08009704
 8000ce0:	0800970c 	.word	0x0800970c
 8000ce4:	0800971c 	.word	0x0800971c
 8000ce8:	08009724 	.word	0x08009724
 8000cec:	08009734 	.word	0x08009734
 8000cf0:	0800973c 	.word	0x0800973c
 8000cf4:	0800974c 	.word	0x0800974c
 8000cf8:	08009754 	.word	0x08009754
 8000cfc:	08009764 	.word	0x08009764
 8000d00:	0800976c 	.word	0x0800976c
 8000d04:	0800977c 	.word	0x0800977c
 8000d08:	08009788 	.word	0x08009788
 8000d0c:	08009790 	.word	0x08009790
 8000d10:	200000ec 	.word	0x200000ec

08000d14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d18:	f001 fac9 	bl	80022ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d1c:	f000 f811 	bl	8000d42 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d20:	f000 faac 	bl	800127c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000d24:	f000 f85a 	bl	8000ddc <MX_SPI1_Init>
  MX_UART5_Init();
 8000d28:	f000 fa5c 	bl	80011e4 <MX_UART5_Init>
  MX_UART4_Init();
 8000d2c:	f000 fa0e 	bl	800114c <MX_UART4_Init>
  MX_TIM1_Init();
 8000d30:	f000 f88c 	bl	8000e4c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000d34:	f000 f95e 	bl	8000ff4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000d38:	f000 f9b2 	bl	80010a0 <MX_TIM4_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  SPI_Communication();
 8000d3c:	f7ff fd52 	bl	80007e4 <SPI_Communication>
 8000d40:	e7fc      	b.n	8000d3c <main+0x28>

08000d42 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b094      	sub	sp, #80	@ 0x50
 8000d46:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d48:	f107 0318 	add.w	r3, r7, #24
 8000d4c:	2238      	movs	r2, #56	@ 0x38
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4618      	mov	r0, r3
 8000d52:	f007 fa5f 	bl	8008214 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d56:	1d3b      	adds	r3, r7, #4
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d64:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000d68:	f001 feb6 	bl	8002ad8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d70:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d74:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d76:	2340      	movs	r3, #64	@ 0x40
 8000d78:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000d82:	2301      	movs	r3, #1
 8000d84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000d86:	2308      	movs	r3, #8
 8000d88:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d92:	2302      	movs	r3, #2
 8000d94:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d96:	f107 0318 	add.w	r3, r7, #24
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f001 ff50 	bl	8002c40 <HAL_RCC_OscConfig>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000da6:	f000 fb23 	bl	80013f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000daa:	230f      	movs	r3, #15
 8000dac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dae:	2303      	movs	r3, #3
 8000db0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000db2:	2380      	movs	r3, #128	@ 0x80
 8000db4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000db6:	2300      	movs	r3, #0
 8000db8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000dbe:	1d3b      	adds	r3, r7, #4
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f002 fa4e 	bl	8003264 <HAL_RCC_ClockConfig>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000dce:	f000 fb0f 	bl	80013f0 <Error_Handler>
  }
}
 8000dd2:	bf00      	nop
 8000dd4:	3750      	adds	r7, #80	@ 0x50
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000de0:	4b18      	ldr	r3, [pc, #96]	@ (8000e44 <MX_SPI1_Init+0x68>)
 8000de2:	4a19      	ldr	r2, [pc, #100]	@ (8000e48 <MX_SPI1_Init+0x6c>)
 8000de4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000de6:	4b17      	ldr	r3, [pc, #92]	@ (8000e44 <MX_SPI1_Init+0x68>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000dec:	4b15      	ldr	r3, [pc, #84]	@ (8000e44 <MX_SPI1_Init+0x68>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000df2:	4b14      	ldr	r3, [pc, #80]	@ (8000e44 <MX_SPI1_Init+0x68>)
 8000df4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000df8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dfa:	4b12      	ldr	r3, [pc, #72]	@ (8000e44 <MX_SPI1_Init+0x68>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e00:	4b10      	ldr	r3, [pc, #64]	@ (8000e44 <MX_SPI1_Init+0x68>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000e06:	4b0f      	ldr	r3, [pc, #60]	@ (8000e44 <MX_SPI1_Init+0x68>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e0c:	4b0d      	ldr	r3, [pc, #52]	@ (8000e44 <MX_SPI1_Init+0x68>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e12:	4b0c      	ldr	r3, [pc, #48]	@ (8000e44 <MX_SPI1_Init+0x68>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e18:	4b0a      	ldr	r3, [pc, #40]	@ (8000e44 <MX_SPI1_Init+0x68>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000e1e:	4b09      	ldr	r3, [pc, #36]	@ (8000e44 <MX_SPI1_Init+0x68>)
 8000e20:	2207      	movs	r2, #7
 8000e22:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e24:	4b07      	ldr	r3, [pc, #28]	@ (8000e44 <MX_SPI1_Init+0x68>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000e2a:	4b06      	ldr	r3, [pc, #24]	@ (8000e44 <MX_SPI1_Init+0x68>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e30:	4804      	ldr	r0, [pc, #16]	@ (8000e44 <MX_SPI1_Init+0x68>)
 8000e32:	f002 fe81 	bl	8003b38 <HAL_SPI_Init>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8000e3c:	f000 fad8 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	200000ec 	.word	0x200000ec
 8000e48:	40013000 	.word	0x40013000

08000e4c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b09c      	sub	sp, #112	@ 0x70
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e52:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
 8000e5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e60:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e6c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
 8000e7c:	615a      	str	r2, [r3, #20]
 8000e7e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e80:	1d3b      	adds	r3, r7, #4
 8000e82:	2234      	movs	r2, #52	@ 0x34
 8000e84:	2100      	movs	r1, #0
 8000e86:	4618      	mov	r0, r3
 8000e88:	f007 f9c4 	bl	8008214 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e8c:	4b57      	ldr	r3, [pc, #348]	@ (8000fec <MX_TIM1_Init+0x1a0>)
 8000e8e:	4a58      	ldr	r2, [pc, #352]	@ (8000ff0 <MX_TIM1_Init+0x1a4>)
 8000e90:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000e92:	4b56      	ldr	r3, [pc, #344]	@ (8000fec <MX_TIM1_Init+0x1a0>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e98:	4b54      	ldr	r3, [pc, #336]	@ (8000fec <MX_TIM1_Init+0x1a0>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 399;
 8000e9e:	4b53      	ldr	r3, [pc, #332]	@ (8000fec <MX_TIM1_Init+0x1a0>)
 8000ea0:	f240 128f 	movw	r2, #399	@ 0x18f
 8000ea4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea6:	4b51      	ldr	r3, [pc, #324]	@ (8000fec <MX_TIM1_Init+0x1a0>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000eac:	4b4f      	ldr	r3, [pc, #316]	@ (8000fec <MX_TIM1_Init+0x1a0>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eb2:	4b4e      	ldr	r3, [pc, #312]	@ (8000fec <MX_TIM1_Init+0x1a0>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000eb8:	484c      	ldr	r0, [pc, #304]	@ (8000fec <MX_TIM1_Init+0x1a0>)
 8000eba:	f003 fe87 	bl	8004bcc <HAL_TIM_Base_Init>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000ec4:	f000 fa94 	bl	80013f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ec8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ecc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ece:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4845      	ldr	r0, [pc, #276]	@ (8000fec <MX_TIM1_Init+0x1a0>)
 8000ed6:	f004 fbdb 	bl	8005690 <HAL_TIM_ConfigClockSource>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000ee0:	f000 fa86 	bl	80013f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ee4:	4841      	ldr	r0, [pc, #260]	@ (8000fec <MX_TIM1_Init+0x1a0>)
 8000ee6:	f003 fec8 	bl	8004c7a <HAL_TIM_PWM_Init>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000ef0:	f000 fa7e 	bl	80013f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000efc:	2300      	movs	r3, #0
 8000efe:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f00:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f04:	4619      	mov	r1, r3
 8000f06:	4839      	ldr	r0, [pc, #228]	@ (8000fec <MX_TIM1_Init+0x1a0>)
 8000f08:	f005 f9aa 	bl	8006260 <HAL_TIMEx_MasterConfigSynchronization>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000f12:	f000 fa6d 	bl	80013f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f16:	2360      	movs	r3, #96	@ 0x60
 8000f18:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f22:	2300      	movs	r3, #0
 8000f24:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f26:	2300      	movs	r3, #0
 8000f28:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f32:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f36:	2200      	movs	r2, #0
 8000f38:	4619      	mov	r1, r3
 8000f3a:	482c      	ldr	r0, [pc, #176]	@ (8000fec <MX_TIM1_Init+0x1a0>)
 8000f3c:	f004 fa94 	bl	8005468 <HAL_TIM_PWM_ConfigChannel>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000f46:	f000 fa53 	bl	80013f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f4a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f4e:	2204      	movs	r2, #4
 8000f50:	4619      	mov	r1, r3
 8000f52:	4826      	ldr	r0, [pc, #152]	@ (8000fec <MX_TIM1_Init+0x1a0>)
 8000f54:	f004 fa88 	bl	8005468 <HAL_TIM_PWM_ConfigChannel>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000f5e:	f000 fa47 	bl	80013f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f62:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f66:	2208      	movs	r2, #8
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4820      	ldr	r0, [pc, #128]	@ (8000fec <MX_TIM1_Init+0x1a0>)
 8000f6c:	f004 fa7c 	bl	8005468 <HAL_TIM_PWM_ConfigChannel>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000f76:	f000 fa3b 	bl	80013f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f7a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f7e:	220c      	movs	r2, #12
 8000f80:	4619      	mov	r1, r3
 8000f82:	481a      	ldr	r0, [pc, #104]	@ (8000fec <MX_TIM1_Init+0x1a0>)
 8000f84:	f004 fa70 	bl	8005468 <HAL_TIM_PWM_ConfigChannel>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8000f8e:	f000 fa2f 	bl	80013f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f92:	2300      	movs	r3, #0
 8000f94:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f96:	2300      	movs	r3, #0
 8000f98:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fa6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000faa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000fb8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000fca:	1d3b      	adds	r3, r7, #4
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4807      	ldr	r0, [pc, #28]	@ (8000fec <MX_TIM1_Init+0x1a0>)
 8000fd0:	f005 f9dc 	bl	800638c <HAL_TIMEx_ConfigBreakDeadTime>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_TIM1_Init+0x192>
  {
    Error_Handler();
 8000fda:	f000 fa09 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000fde:	4803      	ldr	r0, [pc, #12]	@ (8000fec <MX_TIM1_Init+0x1a0>)
 8000fe0:	f000 ff2a 	bl	8001e38 <HAL_TIM_MspPostInit>

}
 8000fe4:	bf00      	nop
 8000fe6:	3770      	adds	r7, #112	@ 0x70
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000150 	.word	0x20000150
 8000ff0:	40012c00 	.word	0x40012c00

08000ff4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08c      	sub	sp, #48	@ 0x30
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ffa:	f107 030c 	add.w	r3, r7, #12
 8000ffe:	2224      	movs	r2, #36	@ 0x24
 8001000:	2100      	movs	r1, #0
 8001002:	4618      	mov	r0, r3
 8001004:	f007 f906 	bl	8008214 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001008:	463b      	mov	r3, r7
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001012:	4b21      	ldr	r3, [pc, #132]	@ (8001098 <MX_TIM3_Init+0xa4>)
 8001014:	4a21      	ldr	r2, [pc, #132]	@ (800109c <MX_TIM3_Init+0xa8>)
 8001016:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001018:	4b1f      	ldr	r3, [pc, #124]	@ (8001098 <MX_TIM3_Init+0xa4>)
 800101a:	2200      	movs	r2, #0
 800101c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800101e:	4b1e      	ldr	r3, [pc, #120]	@ (8001098 <MX_TIM3_Init+0xa4>)
 8001020:	2200      	movs	r2, #0
 8001022:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001024:	4b1c      	ldr	r3, [pc, #112]	@ (8001098 <MX_TIM3_Init+0xa4>)
 8001026:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800102a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800102c:	4b1a      	ldr	r3, [pc, #104]	@ (8001098 <MX_TIM3_Init+0xa4>)
 800102e:	2200      	movs	r2, #0
 8001030:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001032:	4b19      	ldr	r3, [pc, #100]	@ (8001098 <MX_TIM3_Init+0xa4>)
 8001034:	2200      	movs	r2, #0
 8001036:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001038:	2303      	movs	r3, #3
 800103a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800103c:	2300      	movs	r3, #0
 800103e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001040:	2301      	movs	r3, #1
 8001042:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001044:	2300      	movs	r3, #0
 8001046:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800104c:	2300      	movs	r3, #0
 800104e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001050:	2301      	movs	r3, #1
 8001052:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001054:	2300      	movs	r3, #0
 8001056:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001058:	2300      	movs	r3, #0
 800105a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	4619      	mov	r1, r3
 8001062:	480d      	ldr	r0, [pc, #52]	@ (8001098 <MX_TIM3_Init+0xa4>)
 8001064:	f003 ff7c 	bl	8004f60 <HAL_TIM_Encoder_Init>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800106e:	f000 f9bf 	bl	80013f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001072:	2300      	movs	r3, #0
 8001074:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001076:	2300      	movs	r3, #0
 8001078:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800107a:	463b      	mov	r3, r7
 800107c:	4619      	mov	r1, r3
 800107e:	4806      	ldr	r0, [pc, #24]	@ (8001098 <MX_TIM3_Init+0xa4>)
 8001080:	f005 f8ee 	bl	8006260 <HAL_TIMEx_MasterConfigSynchronization>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800108a:	f000 f9b1 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800108e:	bf00      	nop
 8001090:	3730      	adds	r7, #48	@ 0x30
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	2000019c 	.word	0x2000019c
 800109c:	40000400 	.word	0x40000400

080010a0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08c      	sub	sp, #48	@ 0x30
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80010a6:	f107 030c 	add.w	r3, r7, #12
 80010aa:	2224      	movs	r2, #36	@ 0x24
 80010ac:	2100      	movs	r1, #0
 80010ae:	4618      	mov	r0, r3
 80010b0:	f007 f8b0 	bl	8008214 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010b4:	463b      	mov	r3, r7
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80010be:	4b21      	ldr	r3, [pc, #132]	@ (8001144 <MX_TIM4_Init+0xa4>)
 80010c0:	4a21      	ldr	r2, [pc, #132]	@ (8001148 <MX_TIM4_Init+0xa8>)
 80010c2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 80010c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001144 <MX_TIM4_Init+0xa4>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001144 <MX_TIM4_Init+0xa4>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80010d0:	4b1c      	ldr	r3, [pc, #112]	@ (8001144 <MX_TIM4_Init+0xa4>)
 80010d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010d6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001144 <MX_TIM4_Init+0xa4>)
 80010da:	2200      	movs	r2, #0
 80010dc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010de:	4b19      	ldr	r3, [pc, #100]	@ (8001144 <MX_TIM4_Init+0xa4>)
 80010e0:	2280      	movs	r2, #128	@ 0x80
 80010e2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80010e4:	2303      	movs	r3, #3
 80010e6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010e8:	2300      	movs	r3, #0
 80010ea:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010ec:	2301      	movs	r3, #1
 80010ee:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 80010f4:	2301      	movs	r3, #1
 80010f6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010f8:	2300      	movs	r3, #0
 80010fa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010fc:	2301      	movs	r3, #1
 80010fe:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001100:	2300      	movs	r3, #0
 8001102:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 1;
 8001104:	2301      	movs	r3, #1
 8001106:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	4619      	mov	r1, r3
 800110e:	480d      	ldr	r0, [pc, #52]	@ (8001144 <MX_TIM4_Init+0xa4>)
 8001110:	f003 ff26 	bl	8004f60 <HAL_TIM_Encoder_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800111a:	f000 f969 	bl	80013f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800111e:	2300      	movs	r3, #0
 8001120:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001122:	2300      	movs	r3, #0
 8001124:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001126:	463b      	mov	r3, r7
 8001128:	4619      	mov	r1, r3
 800112a:	4806      	ldr	r0, [pc, #24]	@ (8001144 <MX_TIM4_Init+0xa4>)
 800112c:	f005 f898 	bl	8006260 <HAL_TIMEx_MasterConfigSynchronization>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001136:	f000 f95b 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800113a:	bf00      	nop
 800113c:	3730      	adds	r7, #48	@ 0x30
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	200001e8 	.word	0x200001e8
 8001148:	40000800 	.word	0x40000800

0800114c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001150:	4b22      	ldr	r3, [pc, #136]	@ (80011dc <MX_UART4_Init+0x90>)
 8001152:	4a23      	ldr	r2, [pc, #140]	@ (80011e0 <MX_UART4_Init+0x94>)
 8001154:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001156:	4b21      	ldr	r3, [pc, #132]	@ (80011dc <MX_UART4_Init+0x90>)
 8001158:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800115c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800115e:	4b1f      	ldr	r3, [pc, #124]	@ (80011dc <MX_UART4_Init+0x90>)
 8001160:	2200      	movs	r2, #0
 8001162:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001164:	4b1d      	ldr	r3, [pc, #116]	@ (80011dc <MX_UART4_Init+0x90>)
 8001166:	2200      	movs	r2, #0
 8001168:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800116a:	4b1c      	ldr	r3, [pc, #112]	@ (80011dc <MX_UART4_Init+0x90>)
 800116c:	2200      	movs	r2, #0
 800116e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001170:	4b1a      	ldr	r3, [pc, #104]	@ (80011dc <MX_UART4_Init+0x90>)
 8001172:	220c      	movs	r2, #12
 8001174:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001176:	4b19      	ldr	r3, [pc, #100]	@ (80011dc <MX_UART4_Init+0x90>)
 8001178:	2200      	movs	r2, #0
 800117a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800117c:	4b17      	ldr	r3, [pc, #92]	@ (80011dc <MX_UART4_Init+0x90>)
 800117e:	2200      	movs	r2, #0
 8001180:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001182:	4b16      	ldr	r3, [pc, #88]	@ (80011dc <MX_UART4_Init+0x90>)
 8001184:	2200      	movs	r2, #0
 8001186:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001188:	4b14      	ldr	r3, [pc, #80]	@ (80011dc <MX_UART4_Init+0x90>)
 800118a:	2200      	movs	r2, #0
 800118c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800118e:	4b13      	ldr	r3, [pc, #76]	@ (80011dc <MX_UART4_Init+0x90>)
 8001190:	2200      	movs	r2, #0
 8001192:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001194:	4811      	ldr	r0, [pc, #68]	@ (80011dc <MX_UART4_Init+0x90>)
 8001196:	f005 f9d3 	bl	8006540 <HAL_UART_Init>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80011a0:	f000 f926 	bl	80013f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011a4:	2100      	movs	r1, #0
 80011a6:	480d      	ldr	r0, [pc, #52]	@ (80011dc <MX_UART4_Init+0x90>)
 80011a8:	f006 fc67 	bl	8007a7a <HAL_UARTEx_SetTxFifoThreshold>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80011b2:	f000 f91d 	bl	80013f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011b6:	2100      	movs	r1, #0
 80011b8:	4808      	ldr	r0, [pc, #32]	@ (80011dc <MX_UART4_Init+0x90>)
 80011ba:	f006 fc9c 	bl	8007af6 <HAL_UARTEx_SetRxFifoThreshold>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80011c4:	f000 f914 	bl	80013f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80011c8:	4804      	ldr	r0, [pc, #16]	@ (80011dc <MX_UART4_Init+0x90>)
 80011ca:	f006 fc1d 	bl	8007a08 <HAL_UARTEx_DisableFifoMode>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80011d4:	f000 f90c 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000234 	.word	0x20000234
 80011e0:	40004c00 	.word	0x40004c00

080011e4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80011e8:	4b22      	ldr	r3, [pc, #136]	@ (8001274 <MX_UART5_Init+0x90>)
 80011ea:	4a23      	ldr	r2, [pc, #140]	@ (8001278 <MX_UART5_Init+0x94>)
 80011ec:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80011ee:	4b21      	ldr	r3, [pc, #132]	@ (8001274 <MX_UART5_Init+0x90>)
 80011f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011f4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80011f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001274 <MX_UART5_Init+0x90>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80011fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001274 <MX_UART5_Init+0x90>)
 80011fe:	2200      	movs	r2, #0
 8001200:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001202:	4b1c      	ldr	r3, [pc, #112]	@ (8001274 <MX_UART5_Init+0x90>)
 8001204:	2200      	movs	r2, #0
 8001206:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001208:	4b1a      	ldr	r3, [pc, #104]	@ (8001274 <MX_UART5_Init+0x90>)
 800120a:	220c      	movs	r2, #12
 800120c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800120e:	4b19      	ldr	r3, [pc, #100]	@ (8001274 <MX_UART5_Init+0x90>)
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001214:	4b17      	ldr	r3, [pc, #92]	@ (8001274 <MX_UART5_Init+0x90>)
 8001216:	2200      	movs	r2, #0
 8001218:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800121a:	4b16      	ldr	r3, [pc, #88]	@ (8001274 <MX_UART5_Init+0x90>)
 800121c:	2200      	movs	r2, #0
 800121e:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001220:	4b14      	ldr	r3, [pc, #80]	@ (8001274 <MX_UART5_Init+0x90>)
 8001222:	2200      	movs	r2, #0
 8001224:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001226:	4b13      	ldr	r3, [pc, #76]	@ (8001274 <MX_UART5_Init+0x90>)
 8001228:	2200      	movs	r2, #0
 800122a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800122c:	4811      	ldr	r0, [pc, #68]	@ (8001274 <MX_UART5_Init+0x90>)
 800122e:	f005 f987 	bl	8006540 <HAL_UART_Init>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001238:	f000 f8da 	bl	80013f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800123c:	2100      	movs	r1, #0
 800123e:	480d      	ldr	r0, [pc, #52]	@ (8001274 <MX_UART5_Init+0x90>)
 8001240:	f006 fc1b 	bl	8007a7a <HAL_UARTEx_SetTxFifoThreshold>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 800124a:	f000 f8d1 	bl	80013f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800124e:	2100      	movs	r1, #0
 8001250:	4808      	ldr	r0, [pc, #32]	@ (8001274 <MX_UART5_Init+0x90>)
 8001252:	f006 fc50 	bl	8007af6 <HAL_UARTEx_SetRxFifoThreshold>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 800125c:	f000 f8c8 	bl	80013f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001260:	4804      	ldr	r0, [pc, #16]	@ (8001274 <MX_UART5_Init+0x90>)
 8001262:	f006 fbd1 	bl	8007a08 <HAL_UARTEx_DisableFifoMode>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 800126c:	f000 f8c0 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}
 8001274:	200002c8 	.word	0x200002c8
 8001278:	40005000 	.word	0x40005000

0800127c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08c      	sub	sp, #48	@ 0x30
 8001280:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001282:	f107 031c 	add.w	r3, r7, #28
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	60da      	str	r2, [r3, #12]
 8001290:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001292:	4b54      	ldr	r3, [pc, #336]	@ (80013e4 <MX_GPIO_Init+0x168>)
 8001294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001296:	4a53      	ldr	r2, [pc, #332]	@ (80013e4 <MX_GPIO_Init+0x168>)
 8001298:	f043 0310 	orr.w	r3, r3, #16
 800129c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800129e:	4b51      	ldr	r3, [pc, #324]	@ (80013e4 <MX_GPIO_Init+0x168>)
 80012a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a2:	f003 0310 	and.w	r3, r3, #16
 80012a6:	61bb      	str	r3, [r7, #24]
 80012a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012aa:	4b4e      	ldr	r3, [pc, #312]	@ (80013e4 <MX_GPIO_Init+0x168>)
 80012ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ae:	4a4d      	ldr	r2, [pc, #308]	@ (80013e4 <MX_GPIO_Init+0x168>)
 80012b0:	f043 0320 	orr.w	r3, r3, #32
 80012b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012b6:	4b4b      	ldr	r3, [pc, #300]	@ (80013e4 <MX_GPIO_Init+0x168>)
 80012b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ba:	f003 0320 	and.w	r3, r3, #32
 80012be:	617b      	str	r3, [r7, #20]
 80012c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c2:	4b48      	ldr	r3, [pc, #288]	@ (80013e4 <MX_GPIO_Init+0x168>)
 80012c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c6:	4a47      	ldr	r2, [pc, #284]	@ (80013e4 <MX_GPIO_Init+0x168>)
 80012c8:	f043 0304 	orr.w	r3, r3, #4
 80012cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ce:	4b45      	ldr	r3, [pc, #276]	@ (80013e4 <MX_GPIO_Init+0x168>)
 80012d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d2:	f003 0304 	and.w	r3, r3, #4
 80012d6:	613b      	str	r3, [r7, #16]
 80012d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012da:	4b42      	ldr	r3, [pc, #264]	@ (80013e4 <MX_GPIO_Init+0x168>)
 80012dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012de:	4a41      	ldr	r2, [pc, #260]	@ (80013e4 <MX_GPIO_Init+0x168>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012e6:	4b3f      	ldr	r3, [pc, #252]	@ (80013e4 <MX_GPIO_Init+0x168>)
 80012e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012f2:	4b3c      	ldr	r3, [pc, #240]	@ (80013e4 <MX_GPIO_Init+0x168>)
 80012f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012f6:	4a3b      	ldr	r2, [pc, #236]	@ (80013e4 <MX_GPIO_Init+0x168>)
 80012f8:	f043 0308 	orr.w	r3, r3, #8
 80012fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012fe:	4b39      	ldr	r3, [pc, #228]	@ (80013e4 <MX_GPIO_Init+0x168>)
 8001300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001302:	f003 0308 	and.w	r3, r3, #8
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800130a:	4b36      	ldr	r3, [pc, #216]	@ (80013e4 <MX_GPIO_Init+0x168>)
 800130c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800130e:	4a35      	ldr	r2, [pc, #212]	@ (80013e4 <MX_GPIO_Init+0x168>)
 8001310:	f043 0302 	orr.w	r3, r3, #2
 8001314:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001316:	4b33      	ldr	r3, [pc, #204]	@ (80013e4 <MX_GPIO_Init+0x168>)
 8001318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8001322:	2201      	movs	r2, #1
 8001324:	2108      	movs	r1, #8
 8001326:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800132a:	f001 fbbd 	bl	8002aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 800132e:	2201      	movs	r2, #1
 8001330:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001334:	482c      	ldr	r0, [pc, #176]	@ (80013e8 <MX_GPIO_Init+0x16c>)
 8001336:	f001 fbb7 	bl	8002aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800133a:	237f      	movs	r3, #127	@ 0x7f
 800133c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800133e:	2300      	movs	r3, #0
 8001340:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001346:	f107 031c 	add.w	r3, r7, #28
 800134a:	4619      	mov	r1, r3
 800134c:	4826      	ldr	r0, [pc, #152]	@ (80013e8 <MX_GPIO_Init+0x16c>)
 800134e:	f001 fa11 	bl	8002774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001352:	2308      	movs	r3, #8
 8001354:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001356:	2301      	movs	r3, #1
 8001358:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135e:	2300      	movs	r3, #0
 8001360:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001362:	f107 031c 	add.w	r3, r7, #28
 8001366:	4619      	mov	r1, r3
 8001368:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800136c:	f001 fa02 	bl	8002774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001370:	2380      	movs	r3, #128	@ 0x80
 8001372:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001374:	2300      	movs	r3, #0
 8001376:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001378:	2302      	movs	r3, #2
 800137a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800137c:	f107 031c 	add.w	r3, r7, #28
 8001380:	4619      	mov	r1, r3
 8001382:	4819      	ldr	r0, [pc, #100]	@ (80013e8 <MX_GPIO_Init+0x16c>)
 8001384:	f001 f9f6 	bl	8002774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001388:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800138c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138e:	2301      	movs	r3, #1
 8001390:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001396:	2300      	movs	r3, #0
 8001398:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800139a:	f107 031c 	add.w	r3, r7, #28
 800139e:	4619      	mov	r1, r3
 80013a0:	4811      	ldr	r0, [pc, #68]	@ (80013e8 <MX_GPIO_Init+0x16c>)
 80013a2:	f001 f9e7 	bl	8002774 <HAL_GPIO_Init>

  /*Configure GPIO pins : Limiter_switch_j19_Pin LS_DRV2_NO_Pin */
  GPIO_InitStruct.Pin = Limiter_switch_j19_Pin|LS_DRV2_NO_Pin;
 80013a6:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80013aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ac:	2300      	movs	r3, #0
 80013ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013b0:	2301      	movs	r3, #1
 80013b2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013b4:	f107 031c 	add.w	r3, r7, #28
 80013b8:	4619      	mov	r1, r3
 80013ba:	480c      	ldr	r0, [pc, #48]	@ (80013ec <MX_GPIO_Init+0x170>)
 80013bc:	f001 f9da 	bl	8002774 <HAL_GPIO_Init>

  /*Configure GPIO pins : LS2_DRV1_NO_Pin LS1_DRV1_NO_Pin */
  GPIO_InitStruct.Pin = LS2_DRV1_NO_Pin|LS1_DRV1_NO_Pin;
 80013c0:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 80013c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c6:	2300      	movs	r3, #0
 80013c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ce:	f107 031c 	add.w	r3, r7, #28
 80013d2:	4619      	mov	r1, r3
 80013d4:	4805      	ldr	r0, [pc, #20]	@ (80013ec <MX_GPIO_Init+0x170>)
 80013d6:	f001 f9cd 	bl	8002774 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013da:	bf00      	nop
 80013dc:	3730      	adds	r7, #48	@ 0x30
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40021000 	.word	0x40021000
 80013e8:	48001000 	.word	0x48001000
 80013ec:	48000c00 	.word	0x48000c00

080013f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f4:	b672      	cpsid	i
}
 80013f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013f8:	bf00      	nop
 80013fa:	e7fd      	b.n	80013f8 <Error_Handler+0x8>

080013fc <Motor_Init>:
uint8_t pinstate1=1;

#define MOTOR_SPEED_TILE_ON 250
#define MOTOR_SPEED_TILE_OFF 115

void Motor_Init(void) {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001400:	2108      	movs	r1, #8
 8001402:	4806      	ldr	r0, [pc, #24]	@ (800141c <Motor_Init+0x20>)
 8001404:	f003 fc9a 	bl	8004d3c <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001408:	210c      	movs	r1, #12
 800140a:	4804      	ldr	r0, [pc, #16]	@ (800141c <Motor_Init+0x20>)
 800140c:	f003 fc96 	bl	8004d3c <HAL_TIM_PWM_Start>
	  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001410:	213c      	movs	r1, #60	@ 0x3c
 8001412:	4803      	ldr	r0, [pc, #12]	@ (8001420 <Motor_Init+0x24>)
 8001414:	f003 fe4a 	bl	80050ac <HAL_TIM_Encoder_Start>
    // Initialize motor control here (if any initialization is needed)
}
 8001418:	bf00      	nop
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000150 	.word	0x20000150
 8001420:	200001e8 	.word	0x200001e8

08001424 <Motor_Steer>:

void Motor_Steer(int8_t target)
{	SlotSensor_Init();
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	71fb      	strb	r3, [r7, #7]
 800142e:	f000 fb8b 	bl	8001b48 <SlotSensor_Init>
	Motor_Init();
 8001432:	f7ff ffe3 	bl	80013fc <Motor_Init>
	int8_t count = 0 ;
 8001436:	2300      	movs	r3, #0
 8001438:	73fb      	strb	r3, [r7, #15]
	int16_t Motorspeed;




	if(TileON)
 800143a:	4b49      	ldr	r3, [pc, #292]	@ (8001560 <Motor_Steer+0x13c>)
 800143c:	f993 3000 	ldrsb.w	r3, [r3]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d044      	beq.n	80014ce <Motor_Steer+0xaa>
	{

		Motorspeed = MOTOR_SPEED_TILE_ON - 1 ;
 8001444:	23f9      	movs	r3, #249	@ 0xf9
 8001446:	81bb      	strh	r3, [r7, #12]
		if(target > 0)
 8001448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144c:	2b00      	cmp	r3, #0
 800144e:	dd1c      	ble.n	800148a <Motor_Steer+0x66>
		{

			while(count < target)
 8001450:	e00c      	b.n	800146c <Motor_Steer+0x48>
			{	  count = SlotSensor_Update();
 8001452:	f000 fb8f 	bl	8001b74 <SlotSensor_Update>
 8001456:	4603      	mov	r3, r0
 8001458:	73fb      	strb	r3, [r7, #15]
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, Motorspeed);
 800145a:	4b42      	ldr	r3, [pc, #264]	@ (8001564 <Motor_Steer+0x140>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001462:	63da      	str	r2, [r3, #60]	@ 0x3c
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001464:	4b3f      	ldr	r3, [pc, #252]	@ (8001564 <Motor_Steer+0x140>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2200      	movs	r2, #0
 800146a:	641a      	str	r2, [r3, #64]	@ 0x40
			while(count < target)
 800146c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001474:	429a      	cmp	r2, r3
 8001476:	dbec      	blt.n	8001452 <Motor_Steer+0x2e>
			}
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001478:	4b3a      	ldr	r3, [pc, #232]	@ (8001564 <Motor_Steer+0x140>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2200      	movs	r2, #0
 800147e:	63da      	str	r2, [r3, #60]	@ 0x3c
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001480:	4b38      	ldr	r3, [pc, #224]	@ (8001564 <Motor_Steer+0x140>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2200      	movs	r2, #0
 8001486:	641a      	str	r2, [r3, #64]	@ 0x40
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
		}

	}

}
 8001488:	e065      	b.n	8001556 <Motor_Steer+0x132>
		else if(target< 0)
 800148a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148e:	2b00      	cmp	r3, #0
 8001490:	da61      	bge.n	8001556 <Motor_Steer+0x132>
			while(count < -target)
 8001492:	e00c      	b.n	80014ae <Motor_Steer+0x8a>
					{	  count = SlotSensor_Update();
 8001494:	f000 fb6e 	bl	8001b74 <SlotSensor_Update>
 8001498:	4603      	mov	r3, r0
 800149a:	73fb      	strb	r3, [r7, #15]
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 800149c:	4b31      	ldr	r3, [pc, #196]	@ (8001564 <Motor_Steer+0x140>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2200      	movs	r2, #0
 80014a2:	63da      	str	r2, [r3, #60]	@ 0x3c
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, Motorspeed);
 80014a4:	4b2f      	ldr	r3, [pc, #188]	@ (8001564 <Motor_Steer+0x140>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80014ac:	641a      	str	r2, [r3, #64]	@ 0x40
			while(count < -target)
 80014ae:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80014b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b6:	425b      	negs	r3, r3
 80014b8:	429a      	cmp	r2, r3
 80014ba:	dbeb      	blt.n	8001494 <Motor_Steer+0x70>
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80014bc:	4b29      	ldr	r3, [pc, #164]	@ (8001564 <Motor_Steer+0x140>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2200      	movs	r2, #0
 80014c2:	63da      	str	r2, [r3, #60]	@ 0x3c
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 80014c4:	4b27      	ldr	r3, [pc, #156]	@ (8001564 <Motor_Steer+0x140>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2200      	movs	r2, #0
 80014ca:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80014cc:	e043      	b.n	8001556 <Motor_Steer+0x132>
		Motorspeed = MOTOR_SPEED_TILE_OFF -1 ;
 80014ce:	2372      	movs	r3, #114	@ 0x72
 80014d0:	81bb      	strh	r3, [r7, #12]
		if(target > 0){
 80014d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	dd1c      	ble.n	8001514 <Motor_Steer+0xf0>
					while(count < target)
 80014da:	e00c      	b.n	80014f6 <Motor_Steer+0xd2>
						count = SlotSensor_Update();
 80014dc:	f000 fb4a 	bl	8001b74 <SlotSensor_Update>
 80014e0:	4603      	mov	r3, r0
 80014e2:	73fb      	strb	r3, [r7, #15]
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, Motorspeed);
 80014e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001564 <Motor_Steer+0x140>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80014ec:	63da      	str	r2, [r3, #60]	@ 0x3c
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 80014ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001564 <Motor_Steer+0x140>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2200      	movs	r2, #0
 80014f4:	641a      	str	r2, [r3, #64]	@ 0x40
					while(count < target)
 80014f6:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80014fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fe:	429a      	cmp	r2, r3
 8001500:	dbec      	blt.n	80014dc <Motor_Steer+0xb8>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001502:	4b18      	ldr	r3, [pc, #96]	@ (8001564 <Motor_Steer+0x140>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2200      	movs	r2, #0
 8001508:	63da      	str	r2, [r3, #60]	@ 0x3c
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 800150a:	4b16      	ldr	r3, [pc, #88]	@ (8001564 <Motor_Steer+0x140>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2200      	movs	r2, #0
 8001510:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001512:	e020      	b.n	8001556 <Motor_Steer+0x132>
		else if(target< 0)
 8001514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001518:	2b00      	cmp	r3, #0
 800151a:	da1c      	bge.n	8001556 <Motor_Steer+0x132>
			while(count < -target)
 800151c:	e00c      	b.n	8001538 <Motor_Steer+0x114>
				count = SlotSensor_Update();
 800151e:	f000 fb29 	bl	8001b74 <SlotSensor_Update>
 8001522:	4603      	mov	r3, r0
 8001524:	73fb      	strb	r3, [r7, #15]
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001526:	4b0f      	ldr	r3, [pc, #60]	@ (8001564 <Motor_Steer+0x140>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2200      	movs	r2, #0
 800152c:	63da      	str	r2, [r3, #60]	@ 0x3c
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, Motorspeed);
 800152e:	4b0d      	ldr	r3, [pc, #52]	@ (8001564 <Motor_Steer+0x140>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001536:	641a      	str	r2, [r3, #64]	@ 0x40
			while(count < -target)
 8001538:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800153c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001540:	425b      	negs	r3, r3
 8001542:	429a      	cmp	r2, r3
 8001544:	dbeb      	blt.n	800151e <Motor_Steer+0xfa>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001546:	4b07      	ldr	r3, [pc, #28]	@ (8001564 <Motor_Steer+0x140>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2200      	movs	r2, #0
 800154c:	63da      	str	r2, [r3, #60]	@ 0x3c
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 800154e:	4b05      	ldr	r3, [pc, #20]	@ (8001564 <Motor_Steer+0x140>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2200      	movs	r2, #0
 8001554:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001556:	bf00      	nop
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	200000e9 	.word	0x200000e9
 8001564:	20000150 	.word	0x20000150

08001568 <ABSRotateHead>:
	Motor_Steer(target_position);


}
int8_t ABSRotateHead(int8_t target_position)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	71fb      	strb	r3, [r7, #7]
	Motor_Init();
 8001572:	f7ff ff43 	bl	80013fc <Motor_Init>

	GPIO_PinState current_state1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7); // Read pin state
 8001576:	2180      	movs	r1, #128	@ 0x80
 8001578:	48a9      	ldr	r0, [pc, #676]	@ (8001820 <ABSRotateHead+0x2b8>)
 800157a:	f001 fa7d 	bl	8002a78 <HAL_GPIO_ReadPin>
 800157e:	4603      	mov	r3, r0
 8001580:	75fb      	strb	r3, [r7, #23]
	GPIO_PinState last_state1=current_state1;
 8001582:	7dfb      	ldrb	r3, [r7, #23]
 8001584:	73fb      	strb	r3, [r7, #15]
	if(current_state1==GPIO_PIN_RESET){
 8001586:	7dfb      	ldrb	r3, [r7, #23]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d11a      	bne.n	80015c2 <ABSRotateHead+0x5a>
		while (current_state1 == last_state1){
 800158c:	e00d      	b.n	80015aa <ABSRotateHead+0x42>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,100);
 800158e:	4ba5      	ldr	r3, [pc, #660]	@ (8001824 <ABSRotateHead+0x2bc>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2264      	movs	r2, #100	@ 0x64
 8001594:	63da      	str	r2, [r3, #60]	@ 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001596:	4ba3      	ldr	r3, [pc, #652]	@ (8001824 <ABSRotateHead+0x2bc>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2200      	movs	r2, #0
 800159c:	641a      	str	r2, [r3, #64]	@ 0x40
			current_state1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7);
 800159e:	2180      	movs	r1, #128	@ 0x80
 80015a0:	489f      	ldr	r0, [pc, #636]	@ (8001820 <ABSRotateHead+0x2b8>)
 80015a2:	f001 fa69 	bl	8002a78 <HAL_GPIO_ReadPin>
 80015a6:	4603      	mov	r3, r0
 80015a8:	75fb      	strb	r3, [r7, #23]
		while (current_state1 == last_state1){
 80015aa:	7dfa      	ldrb	r2, [r7, #23]
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d0ed      	beq.n	800158e <ABSRotateHead+0x26>
		}

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80015b2:	4b9c      	ldr	r3, [pc, #624]	@ (8001824 <ABSRotateHead+0x2bc>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2200      	movs	r2, #0
 80015b8:	63da      	str	r2, [r3, #60]	@ 0x3c
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 80015ba:	4b9a      	ldr	r3, [pc, #616]	@ (8001824 <ABSRotateHead+0x2bc>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2200      	movs	r2, #0
 80015c0:	641a      	str	r2, [r3, #64]	@ 0x40

	}
	HAL_Delay(200);
 80015c2:	20c8      	movs	r0, #200	@ 0xc8
 80015c4:	f000 fee4 	bl	8002390 <HAL_Delay>
	int8_t absolute_target_position = target_position*5 - posABS;
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	461a      	mov	r2, r3
 80015cc:	0092      	lsls	r2, r2, #2
 80015ce:	4413      	add	r3, r2
 80015d0:	b2da      	uxtb	r2, r3
 80015d2:	4b95      	ldr	r3, [pc, #596]	@ (8001828 <ABSRotateHead+0x2c0>)
 80015d4:	f993 3000 	ldrsb.w	r3, [r3]
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	73bb      	strb	r3, [r7, #14]
	SlotSensor_Init();
 80015e0:	f000 fab2 	bl	8001b48 <SlotSensor_Init>
	Motor_Init();
 80015e4:	f7ff ff0a 	bl	80013fc <Motor_Init>
	int8_t count = 0 ;
 80015e8:	2300      	movs	r3, #0
 80015ea:	75bb      	strb	r3, [r7, #22]
	int16_t Motorspeed;



		if(TileON)
 80015ec:	4b8f      	ldr	r3, [pc, #572]	@ (800182c <ABSRotateHead+0x2c4>)
 80015ee:	f993 3000 	ldrsb.w	r3, [r3]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	f000 811c 	beq.w	8001830 <ABSRotateHead+0x2c8>
		{
			Motorspeed = MOTOR_SPEED_TILE_ON - 1 ;
 80015f8:	23f9      	movs	r3, #249	@ 0xf9
 80015fa:	82bb      	strh	r3, [r7, #20]
			if(absolute_target_position > 0)
 80015fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001600:	2b00      	cmp	r3, #0
 8001602:	f340 8082 	ble.w	800170a <ABSRotateHead+0x1a2>
			{
				if (absolute_target_position-count==5){
 8001606:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800160a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	2b05      	cmp	r3, #5
 8001612:	d114      	bne.n	800163e <ABSRotateHead+0xd6>
										if(target_position==1){
 8001614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d102      	bne.n	8001622 <ABSRotateHead+0xba>
										Motorspeed = 220;}
 800161c:	23dc      	movs	r3, #220	@ 0xdc
 800161e:	82bb      	strh	r3, [r7, #20]
 8001620:	e03a      	b.n	8001698 <ABSRotateHead+0x130>
										else if(target_position==2){
 8001622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001626:	2b02      	cmp	r3, #2
 8001628:	d102      	bne.n	8001630 <ABSRotateHead+0xc8>
											Motorspeed=215;
 800162a:	23d7      	movs	r3, #215	@ 0xd7
 800162c:	82bb      	strh	r3, [r7, #20]
 800162e:	e033      	b.n	8001698 <ABSRotateHead+0x130>
										}
										else if (target_position==3){
 8001630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001634:	2b03      	cmp	r3, #3
 8001636:	d12f      	bne.n	8001698 <ABSRotateHead+0x130>
											Motorspeed=215;
 8001638:	23d7      	movs	r3, #215	@ 0xd7
 800163a:	82bb      	strh	r3, [r7, #20]
 800163c:	e02c      	b.n	8001698 <ABSRotateHead+0x130>
										}
									}
									else if (absolute_target_position-count==10){
 800163e:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001642:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b0a      	cmp	r3, #10
 800164a:	d10d      	bne.n	8001668 <ABSRotateHead+0x100>
										if (target_position==2){
 800164c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001650:	2b02      	cmp	r3, #2
 8001652:	d102      	bne.n	800165a <ABSRotateHead+0xf2>
										Motorspeed=250;}
 8001654:	23fa      	movs	r3, #250	@ 0xfa
 8001656:	82bb      	strh	r3, [r7, #20]
 8001658:	e01e      	b.n	8001698 <ABSRotateHead+0x130>
										else if(target_position==3){
 800165a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165e:	2b03      	cmp	r3, #3
 8001660:	d11a      	bne.n	8001698 <ABSRotateHead+0x130>
											Motorspeed=250;
 8001662:	23fa      	movs	r3, #250	@ 0xfa
 8001664:	82bb      	strh	r3, [r7, #20]
 8001666:	e017      	b.n	8001698 <ABSRotateHead+0x130>
										}
									}
									else if (absolute_target_position-count==15){
 8001668:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800166c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b0f      	cmp	r3, #15
 8001674:	d110      	bne.n	8001698 <ABSRotateHead+0x130>
										Motorspeed=258;
 8001676:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800167a:	82bb      	strh	r3, [r7, #20]
									}

				while(count < absolute_target_position)
 800167c:	e00c      	b.n	8001698 <ABSRotateHead+0x130>
				{	  count = SlotSensor_Update();
 800167e:	f000 fa79 	bl	8001b74 <SlotSensor_Update>
 8001682:	4603      	mov	r3, r0
 8001684:	75bb      	strb	r3, [r7, #22]
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, Motorspeed);
 8001686:	4b67      	ldr	r3, [pc, #412]	@ (8001824 <ABSRotateHead+0x2bc>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800168e:	63da      	str	r2, [r3, #60]	@ 0x3c
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001690:	4b64      	ldr	r3, [pc, #400]	@ (8001824 <ABSRotateHead+0x2bc>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2200      	movs	r2, #0
 8001696:	641a      	str	r2, [r3, #64]	@ 0x40
				while(count < absolute_target_position)
 8001698:	f997 2016 	ldrsb.w	r2, [r7, #22]
 800169c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	dbec      	blt.n	800167e <ABSRotateHead+0x116>
				}

				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80016a4:	4b5f      	ldr	r3, [pc, #380]	@ (8001824 <ABSRotateHead+0x2bc>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2200      	movs	r2, #0
 80016aa:	63da      	str	r2, [r3, #60]	@ 0x3c
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 80016ac:	4b5d      	ldr	r3, [pc, #372]	@ (8001824 <ABSRotateHead+0x2bc>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2200      	movs	r2, #0
 80016b2:	641a      	str	r2, [r3, #64]	@ 0x40
				HAL_Delay(200);
 80016b4:	20c8      	movs	r0, #200	@ 0xc8
 80016b6:	f000 fe6b 	bl	8002390 <HAL_Delay>
				GPIO_PinState current_state1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7); // Read pin state
 80016ba:	2180      	movs	r1, #128	@ 0x80
 80016bc:	4858      	ldr	r0, [pc, #352]	@ (8001820 <ABSRotateHead+0x2b8>)
 80016be:	f001 f9db 	bl	8002a78 <HAL_GPIO_ReadPin>
 80016c2:	4603      	mov	r3, r0
 80016c4:	74fb      	strb	r3, [r7, #19]
				GPIO_PinState last_state1=current_state1;
 80016c6:	7cfb      	ldrb	r3, [r7, #19]
 80016c8:	72bb      	strb	r3, [r7, #10]
				if(current_state1==GPIO_PIN_RESET){
 80016ca:	7cfb      	ldrb	r3, [r7, #19]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f040 81bf 	bne.w	8001a50 <ABSRotateHead+0x4e8>
						while (current_state1 == last_state1){
 80016d2:	e00d      	b.n	80016f0 <ABSRotateHead+0x188>
								__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0 );
 80016d4:	4b53      	ldr	r3, [pc, #332]	@ (8001824 <ABSRotateHead+0x2bc>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2200      	movs	r2, #0
 80016da:	63da      	str	r2, [r3, #60]	@ 0x3c
								__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 100);
 80016dc:	4b51      	ldr	r3, [pc, #324]	@ (8001824 <ABSRotateHead+0x2bc>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2264      	movs	r2, #100	@ 0x64
 80016e2:	641a      	str	r2, [r3, #64]	@ 0x40
								current_state1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7);
 80016e4:	2180      	movs	r1, #128	@ 0x80
 80016e6:	484e      	ldr	r0, [pc, #312]	@ (8001820 <ABSRotateHead+0x2b8>)
 80016e8:	f001 f9c6 	bl	8002a78 <HAL_GPIO_ReadPin>
 80016ec:	4603      	mov	r3, r0
 80016ee:	74fb      	strb	r3, [r7, #19]
						while (current_state1 == last_state1){
 80016f0:	7cfa      	ldrb	r2, [r7, #19]
 80016f2:	7abb      	ldrb	r3, [r7, #10]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d0ed      	beq.n	80016d4 <ABSRotateHead+0x16c>
								}

					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80016f8:	4b4a      	ldr	r3, [pc, #296]	@ (8001824 <ABSRotateHead+0x2bc>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2200      	movs	r2, #0
 80016fe:	63da      	str	r2, [r3, #60]	@ 0x3c
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001700:	4b48      	ldr	r3, [pc, #288]	@ (8001824 <ABSRotateHead+0x2bc>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2200      	movs	r2, #0
 8001706:	641a      	str	r2, [r3, #64]	@ 0x40
 8001708:	e1a2      	b.n	8001a50 <ABSRotateHead+0x4e8>

			}
			}
			else if(absolute_target_position< 0)
 800170a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800170e:	2b00      	cmp	r3, #0
 8001710:	f280 819e 	bge.w	8001a50 <ABSRotateHead+0x4e8>
			{
				if (absolute_target_position-count==-5){
 8001714:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001718:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	f113 0f05 	cmn.w	r3, #5
 8001722:	d114      	bne.n	800174e <ABSRotateHead+0x1e6>
						if(target_position==0){
 8001724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d102      	bne.n	8001732 <ABSRotateHead+0x1ca>
							Motorspeed = 220;}
 800172c:	23dc      	movs	r3, #220	@ 0xdc
 800172e:	82bb      	strh	r3, [r7, #20]
 8001730:	e03c      	b.n	80017ac <ABSRotateHead+0x244>
						else if(target_position==1){
 8001732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d102      	bne.n	8001740 <ABSRotateHead+0x1d8>
								Motorspeed=210;
 800173a:	23d2      	movs	r3, #210	@ 0xd2
 800173c:	82bb      	strh	r3, [r7, #20]
 800173e:	e035      	b.n	80017ac <ABSRotateHead+0x244>
								}
						else if (target_position==2){
 8001740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001744:	2b02      	cmp	r3, #2
 8001746:	d131      	bne.n	80017ac <ABSRotateHead+0x244>
								Motorspeed=210;
 8001748:	23d2      	movs	r3, #210	@ 0xd2
 800174a:	82bb      	strh	r3, [r7, #20]
 800174c:	e02e      	b.n	80017ac <ABSRotateHead+0x244>
								}
								}
				else if (absolute_target_position-count==-10){
 800174e:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001752:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	f113 0f0a 	cmn.w	r3, #10
 800175c:	d10e      	bne.n	800177c <ABSRotateHead+0x214>
						if (target_position==0){
 800175e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d102      	bne.n	800176c <ABSRotateHead+0x204>
							Motorspeed=255;}
 8001766:	23ff      	movs	r3, #255	@ 0xff
 8001768:	82bb      	strh	r3, [r7, #20]
 800176a:	e01f      	b.n	80017ac <ABSRotateHead+0x244>
						else if(target_position==1){
 800176c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d11b      	bne.n	80017ac <ABSRotateHead+0x244>
									Motorspeed=258;
 8001774:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001778:	82bb      	strh	r3, [r7, #20]
 800177a:	e017      	b.n	80017ac <ABSRotateHead+0x244>
														}
													}
						else if (absolute_target_position-count==-15){
 800177c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001780:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	f113 0f0f 	cmn.w	r3, #15
 800178a:	d10f      	bne.n	80017ac <ABSRotateHead+0x244>
								Motorspeed=255;
 800178c:	23ff      	movs	r3, #255	@ 0xff
 800178e:	82bb      	strh	r3, [r7, #20]
						}

				while(count < -absolute_target_position)
 8001790:	e00c      	b.n	80017ac <ABSRotateHead+0x244>
						{	  count = SlotSensor_Update();
 8001792:	f000 f9ef 	bl	8001b74 <SlotSensor_Update>
 8001796:	4603      	mov	r3, r0
 8001798:	75bb      	strb	r3, [r7, #22]
							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 800179a:	4b22      	ldr	r3, [pc, #136]	@ (8001824 <ABSRotateHead+0x2bc>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2200      	movs	r2, #0
 80017a0:	63da      	str	r2, [r3, #60]	@ 0x3c
							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, Motorspeed);
 80017a2:	4b20      	ldr	r3, [pc, #128]	@ (8001824 <ABSRotateHead+0x2bc>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80017aa:	641a      	str	r2, [r3, #64]	@ 0x40
				while(count < -absolute_target_position)
 80017ac:	f997 2016 	ldrsb.w	r2, [r7, #22]
 80017b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80017b4:	425b      	negs	r3, r3
 80017b6:	429a      	cmp	r2, r3
 80017b8:	dbeb      	blt.n	8001792 <ABSRotateHead+0x22a>
						}

				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80017ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001824 <ABSRotateHead+0x2bc>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2200      	movs	r2, #0
 80017c0:	63da      	str	r2, [r3, #60]	@ 0x3c
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 80017c2:	4b18      	ldr	r3, [pc, #96]	@ (8001824 <ABSRotateHead+0x2bc>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2200      	movs	r2, #0
 80017c8:	641a      	str	r2, [r3, #64]	@ 0x40
				HAL_Delay(200);
 80017ca:	20c8      	movs	r0, #200	@ 0xc8
 80017cc:	f000 fde0 	bl	8002390 <HAL_Delay>
				GPIO_PinState current_state1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7); // Read pin state
 80017d0:	2180      	movs	r1, #128	@ 0x80
 80017d2:	4813      	ldr	r0, [pc, #76]	@ (8001820 <ABSRotateHead+0x2b8>)
 80017d4:	f001 f950 	bl	8002a78 <HAL_GPIO_ReadPin>
 80017d8:	4603      	mov	r3, r0
 80017da:	74bb      	strb	r3, [r7, #18]
				GPIO_PinState last_state1=current_state1;
 80017dc:	7cbb      	ldrb	r3, [r7, #18]
 80017de:	72fb      	strb	r3, [r7, #11]
				if(current_state1==GPIO_PIN_RESET){
 80017e0:	7cbb      	ldrb	r3, [r7, #18]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f040 8134 	bne.w	8001a50 <ABSRotateHead+0x4e8>
						while (current_state1 == last_state1){
 80017e8:	e00d      	b.n	8001806 <ABSRotateHead+0x29e>
								__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,100 );
 80017ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001824 <ABSRotateHead+0x2bc>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2264      	movs	r2, #100	@ 0x64
 80017f0:	63da      	str	r2, [r3, #60]	@ 0x3c
								__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 80017f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001824 <ABSRotateHead+0x2bc>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2200      	movs	r2, #0
 80017f8:	641a      	str	r2, [r3, #64]	@ 0x40
								current_state1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7);
 80017fa:	2180      	movs	r1, #128	@ 0x80
 80017fc:	4808      	ldr	r0, [pc, #32]	@ (8001820 <ABSRotateHead+0x2b8>)
 80017fe:	f001 f93b 	bl	8002a78 <HAL_GPIO_ReadPin>
 8001802:	4603      	mov	r3, r0
 8001804:	74bb      	strb	r3, [r7, #18]
						while (current_state1 == last_state1){
 8001806:	7cba      	ldrb	r2, [r7, #18]
 8001808:	7afb      	ldrb	r3, [r7, #11]
 800180a:	429a      	cmp	r2, r3
 800180c:	d0ed      	beq.n	80017ea <ABSRotateHead+0x282>
								}


							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 800180e:	4b05      	ldr	r3, [pc, #20]	@ (8001824 <ABSRotateHead+0x2bc>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2200      	movs	r2, #0
 8001814:	63da      	str	r2, [r3, #60]	@ 0x3c
							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001816:	4b03      	ldr	r3, [pc, #12]	@ (8001824 <ABSRotateHead+0x2bc>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2200      	movs	r2, #0
 800181c:	641a      	str	r2, [r3, #64]	@ 0x40
 800181e:	e117      	b.n	8001a50 <ABSRotateHead+0x4e8>
 8001820:	48001000 	.word	0x48001000
 8001824:	20000150 	.word	0x20000150
 8001828:	200000e8 	.word	0x200000e8
 800182c:	200000e9 	.word	0x200000e9

		}
		else
		{

			Motorspeed = MOTOR_SPEED_TILE_OFF -1 ;
 8001830:	2372      	movs	r3, #114	@ 0x72
 8001832:	82bb      	strh	r3, [r7, #20]
			if(absolute_target_position > 0){
 8001834:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001838:	2b00      	cmp	r3, #0
 800183a:	f340 8081 	ble.w	8001940 <ABSRotateHead+0x3d8>
					if (absolute_target_position-count==5){
 800183e:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001842:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b05      	cmp	r3, #5
 800184a:	d114      	bne.n	8001876 <ABSRotateHead+0x30e>
						if(target_position==1){
 800184c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d102      	bne.n	800185a <ABSRotateHead+0x2f2>
						Motorspeed = 120;}
 8001854:	2378      	movs	r3, #120	@ 0x78
 8001856:	82bb      	strh	r3, [r7, #20]
 8001858:	e039      	b.n	80018ce <ABSRotateHead+0x366>
						else if(target_position==2){
 800185a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185e:	2b02      	cmp	r3, #2
 8001860:	d102      	bne.n	8001868 <ABSRotateHead+0x300>
							Motorspeed=145;
 8001862:	2391      	movs	r3, #145	@ 0x91
 8001864:	82bb      	strh	r3, [r7, #20]
 8001866:	e032      	b.n	80018ce <ABSRotateHead+0x366>
						}
						else if (target_position==3){
 8001868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186c:	2b03      	cmp	r3, #3
 800186e:	d12e      	bne.n	80018ce <ABSRotateHead+0x366>
							Motorspeed=145;
 8001870:	2391      	movs	r3, #145	@ 0x91
 8001872:	82bb      	strh	r3, [r7, #20]
 8001874:	e02b      	b.n	80018ce <ABSRotateHead+0x366>
						}
					}
					else if (absolute_target_position-count==10){
 8001876:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800187a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b0a      	cmp	r3, #10
 8001882:	d10d      	bne.n	80018a0 <ABSRotateHead+0x338>
						if (target_position==2){
 8001884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001888:	2b02      	cmp	r3, #2
 800188a:	d102      	bne.n	8001892 <ABSRotateHead+0x32a>
						Motorspeed=115;}
 800188c:	2373      	movs	r3, #115	@ 0x73
 800188e:	82bb      	strh	r3, [r7, #20]
 8001890:	e01d      	b.n	80018ce <ABSRotateHead+0x366>
						else if(target_position==3){
 8001892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001896:	2b03      	cmp	r3, #3
 8001898:	d119      	bne.n	80018ce <ABSRotateHead+0x366>
							Motorspeed=170;
 800189a:	23aa      	movs	r3, #170	@ 0xaa
 800189c:	82bb      	strh	r3, [r7, #20]
 800189e:	e016      	b.n	80018ce <ABSRotateHead+0x366>
						}
					}
					else if (absolute_target_position-count==15){
 80018a0:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80018a4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b0f      	cmp	r3, #15
 80018ac:	d10f      	bne.n	80018ce <ABSRotateHead+0x366>
						Motorspeed=180;
 80018ae:	23b4      	movs	r3, #180	@ 0xb4
 80018b0:	82bb      	strh	r3, [r7, #20]
					}
						while(count < absolute_target_position)
 80018b2:	e00c      	b.n	80018ce <ABSRotateHead+0x366>
						{
							count = SlotSensor_Update();
 80018b4:	f000 f95e 	bl	8001b74 <SlotSensor_Update>
 80018b8:	4603      	mov	r3, r0
 80018ba:	75bb      	strb	r3, [r7, #22]
							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, Motorspeed);
 80018bc:	4b73      	ldr	r3, [pc, #460]	@ (8001a8c <ABSRotateHead+0x524>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80018c4:	63da      	str	r2, [r3, #60]	@ 0x3c
							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 80018c6:	4b71      	ldr	r3, [pc, #452]	@ (8001a8c <ABSRotateHead+0x524>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2200      	movs	r2, #0
 80018cc:	641a      	str	r2, [r3, #64]	@ 0x40
						while(count < absolute_target_position)
 80018ce:	f997 2016 	ldrsb.w	r2, [r7, #22]
 80018d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	dbec      	blt.n	80018b4 <ABSRotateHead+0x34c>
						}

					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80018da:	4b6c      	ldr	r3, [pc, #432]	@ (8001a8c <ABSRotateHead+0x524>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2200      	movs	r2, #0
 80018e0:	63da      	str	r2, [r3, #60]	@ 0x3c
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 80018e2:	4b6a      	ldr	r3, [pc, #424]	@ (8001a8c <ABSRotateHead+0x524>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2200      	movs	r2, #0
 80018e8:	641a      	str	r2, [r3, #64]	@ 0x40
					HAL_Delay(200);
 80018ea:	20c8      	movs	r0, #200	@ 0xc8
 80018ec:	f000 fd50 	bl	8002390 <HAL_Delay>

					GPIO_PinState current_state1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7); // Read pin state
 80018f0:	2180      	movs	r1, #128	@ 0x80
 80018f2:	4867      	ldr	r0, [pc, #412]	@ (8001a90 <ABSRotateHead+0x528>)
 80018f4:	f001 f8c0 	bl	8002a78 <HAL_GPIO_ReadPin>
 80018f8:	4603      	mov	r3, r0
 80018fa:	747b      	strb	r3, [r7, #17]
					GPIO_PinState last_state1=current_state1;
 80018fc:	7c7b      	ldrb	r3, [r7, #17]
 80018fe:	733b      	strb	r3, [r7, #12]
					if(current_state1==GPIO_PIN_RESET){
 8001900:	7c7b      	ldrb	r3, [r7, #17]
 8001902:	2b00      	cmp	r3, #0
 8001904:	f040 80a4 	bne.w	8001a50 <ABSRotateHead+0x4e8>
						while (current_state1 == last_state1){
 8001908:	e00d      	b.n	8001926 <ABSRotateHead+0x3be>
							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0 );
 800190a:	4b60      	ldr	r3, [pc, #384]	@ (8001a8c <ABSRotateHead+0x524>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2200      	movs	r2, #0
 8001910:	63da      	str	r2, [r3, #60]	@ 0x3c
							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 100);
 8001912:	4b5e      	ldr	r3, [pc, #376]	@ (8001a8c <ABSRotateHead+0x524>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2264      	movs	r2, #100	@ 0x64
 8001918:	641a      	str	r2, [r3, #64]	@ 0x40
							current_state1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7);
 800191a:	2180      	movs	r1, #128	@ 0x80
 800191c:	485c      	ldr	r0, [pc, #368]	@ (8001a90 <ABSRotateHead+0x528>)
 800191e:	f001 f8ab 	bl	8002a78 <HAL_GPIO_ReadPin>
 8001922:	4603      	mov	r3, r0
 8001924:	747b      	strb	r3, [r7, #17]
						while (current_state1 == last_state1){
 8001926:	7c7a      	ldrb	r2, [r7, #17]
 8001928:	7b3b      	ldrb	r3, [r7, #12]
 800192a:	429a      	cmp	r2, r3
 800192c:	d0ed      	beq.n	800190a <ABSRotateHead+0x3a2>

					}
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 800192e:	4b57      	ldr	r3, [pc, #348]	@ (8001a8c <ABSRotateHead+0x524>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2200      	movs	r2, #0
 8001934:	63da      	str	r2, [r3, #60]	@ 0x3c
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001936:	4b55      	ldr	r3, [pc, #340]	@ (8001a8c <ABSRotateHead+0x524>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2200      	movs	r2, #0
 800193c:	641a      	str	r2, [r3, #64]	@ 0x40
 800193e:	e087      	b.n	8001a50 <ABSRotateHead+0x4e8>

					}
					}
			else if(absolute_target_position< 0)
 8001940:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001944:	2b00      	cmp	r3, #0
 8001946:	f280 8083 	bge.w	8001a50 <ABSRotateHead+0x4e8>
			{
				if (absolute_target_position-count==-5){
 800194a:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800194e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	f113 0f05 	cmn.w	r3, #5
 8001958:	d114      	bne.n	8001984 <ABSRotateHead+0x41c>
										if(target_position==0){
 800195a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d102      	bne.n	8001968 <ABSRotateHead+0x400>
										Motorspeed = 131;}
 8001962:	2383      	movs	r3, #131	@ 0x83
 8001964:	82bb      	strh	r3, [r7, #20]
 8001966:	e03b      	b.n	80019e0 <ABSRotateHead+0x478>
										else if(target_position==1){
 8001968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d102      	bne.n	8001976 <ABSRotateHead+0x40e>
											Motorspeed=131;
 8001970:	2383      	movs	r3, #131	@ 0x83
 8001972:	82bb      	strh	r3, [r7, #20]
 8001974:	e034      	b.n	80019e0 <ABSRotateHead+0x478>
										}
										else if (target_position==2){
 8001976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197a:	2b02      	cmp	r3, #2
 800197c:	d130      	bne.n	80019e0 <ABSRotateHead+0x478>
											Motorspeed=129;
 800197e:	2381      	movs	r3, #129	@ 0x81
 8001980:	82bb      	strh	r3, [r7, #20]
 8001982:	e02d      	b.n	80019e0 <ABSRotateHead+0x478>
										}
									}
									else if (absolute_target_position-count==-10){
 8001984:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001988:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	f113 0f0a 	cmn.w	r3, #10
 8001992:	d10d      	bne.n	80019b0 <ABSRotateHead+0x448>
										if (target_position==0){
 8001994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d102      	bne.n	80019a2 <ABSRotateHead+0x43a>
										Motorspeed=195;}
 800199c:	23c3      	movs	r3, #195	@ 0xc3
 800199e:	82bb      	strh	r3, [r7, #20]
 80019a0:	e01e      	b.n	80019e0 <ABSRotateHead+0x478>
										else if(target_position==1){
 80019a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d11a      	bne.n	80019e0 <ABSRotateHead+0x478>
											Motorspeed=180;
 80019aa:	23b4      	movs	r3, #180	@ 0xb4
 80019ac:	82bb      	strh	r3, [r7, #20]
 80019ae:	e017      	b.n	80019e0 <ABSRotateHead+0x478>
										}
									}
									else if (absolute_target_position-count==-15){
 80019b0:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80019b4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	f113 0f0f 	cmn.w	r3, #15
 80019be:	d10f      	bne.n	80019e0 <ABSRotateHead+0x478>
										Motorspeed=210;
 80019c0:	23d2      	movs	r3, #210	@ 0xd2
 80019c2:	82bb      	strh	r3, [r7, #20]
									}

				while(count < -absolute_target_position)
 80019c4:	e00c      	b.n	80019e0 <ABSRotateHead+0x478>
				{
					count = SlotSensor_Update();
 80019c6:	f000 f8d5 	bl	8001b74 <SlotSensor_Update>
 80019ca:	4603      	mov	r3, r0
 80019cc:	75bb      	strb	r3, [r7, #22]
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80019ce:	4b2f      	ldr	r3, [pc, #188]	@ (8001a8c <ABSRotateHead+0x524>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2200      	movs	r2, #0
 80019d4:	63da      	str	r2, [r3, #60]	@ 0x3c
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, Motorspeed);
 80019d6:	4b2d      	ldr	r3, [pc, #180]	@ (8001a8c <ABSRotateHead+0x524>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80019de:	641a      	str	r2, [r3, #64]	@ 0x40
				while(count < -absolute_target_position)
 80019e0:	f997 2016 	ldrsb.w	r2, [r7, #22]
 80019e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80019e8:	425b      	negs	r3, r3
 80019ea:	429a      	cmp	r2, r3
 80019ec:	dbeb      	blt.n	80019c6 <ABSRotateHead+0x45e>
				}

					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80019ee:	4b27      	ldr	r3, [pc, #156]	@ (8001a8c <ABSRotateHead+0x524>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2200      	movs	r2, #0
 80019f4:	63da      	str	r2, [r3, #60]	@ 0x3c
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 80019f6:	4b25      	ldr	r3, [pc, #148]	@ (8001a8c <ABSRotateHead+0x524>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2200      	movs	r2, #0
 80019fc:	641a      	str	r2, [r3, #64]	@ 0x40
					HAL_Delay(200);
 80019fe:	20c8      	movs	r0, #200	@ 0xc8
 8001a00:	f000 fcc6 	bl	8002390 <HAL_Delay>
					GPIO_PinState current_state1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7); // Read pin state
 8001a04:	2180      	movs	r1, #128	@ 0x80
 8001a06:	4822      	ldr	r0, [pc, #136]	@ (8001a90 <ABSRotateHead+0x528>)
 8001a08:	f001 f836 	bl	8002a78 <HAL_GPIO_ReadPin>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	743b      	strb	r3, [r7, #16]
					GPIO_PinState last_state1=current_state1;
 8001a10:	7c3b      	ldrb	r3, [r7, #16]
 8001a12:	737b      	strb	r3, [r7, #13]
					if(current_state1==GPIO_PIN_RESET){
 8001a14:	7c3b      	ldrb	r3, [r7, #16]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d11a      	bne.n	8001a50 <ABSRotateHead+0x4e8>
							while (current_state1 == last_state1){
 8001a1a:	e00d      	b.n	8001a38 <ABSRotateHead+0x4d0>
									__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,100 );
 8001a1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001a8c <ABSRotateHead+0x524>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2264      	movs	r2, #100	@ 0x64
 8001a22:	63da      	str	r2, [r3, #60]	@ 0x3c
									__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001a24:	4b19      	ldr	r3, [pc, #100]	@ (8001a8c <ABSRotateHead+0x524>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	641a      	str	r2, [r3, #64]	@ 0x40
									current_state1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7);
 8001a2c:	2180      	movs	r1, #128	@ 0x80
 8001a2e:	4818      	ldr	r0, [pc, #96]	@ (8001a90 <ABSRotateHead+0x528>)
 8001a30:	f001 f822 	bl	8002a78 <HAL_GPIO_ReadPin>
 8001a34:	4603      	mov	r3, r0
 8001a36:	743b      	strb	r3, [r7, #16]
							while (current_state1 == last_state1){
 8001a38:	7c3a      	ldrb	r2, [r7, #16]
 8001a3a:	7b7b      	ldrb	r3, [r7, #13]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d0ed      	beq.n	8001a1c <ABSRotateHead+0x4b4>
									}
							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001a40:	4b12      	ldr	r3, [pc, #72]	@ (8001a8c <ABSRotateHead+0x524>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2200      	movs	r2, #0
 8001a46:	63da      	str	r2, [r3, #60]	@ 0x3c
							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001a48:	4b10      	ldr	r3, [pc, #64]	@ (8001a8c <ABSRotateHead+0x524>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	641a      	str	r2, [r3, #64]	@ 0x40
			}

		}

	//Motor_Steer(absolute_target_position);
	if(target_position*5 != posABS){posABS = target_position*5;}
 8001a50:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001a54:	4613      	mov	r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	4413      	add	r3, r2
 8001a5a:	4a0e      	ldr	r2, [pc, #56]	@ (8001a94 <ABSRotateHead+0x52c>)
 8001a5c:	f992 2000 	ldrsb.w	r2, [r2]
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d008      	beq.n	8001a76 <ABSRotateHead+0x50e>
 8001a64:	79fb      	ldrb	r3, [r7, #7]
 8001a66:	461a      	mov	r2, r3
 8001a68:	0092      	lsls	r2, r2, #2
 8001a6a:	4413      	add	r3, r2
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	b25a      	sxtb	r2, r3
 8001a70:	4b08      	ldr	r3, [pc, #32]	@ (8001a94 <ABSRotateHead+0x52c>)
 8001a72:	701a      	strb	r2, [r3, #0]
 8001a74:	e004      	b.n	8001a80 <ABSRotateHead+0x518>
	else{HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);}
 8001a76:	2200      	movs	r2, #0
 8001a78:	2110      	movs	r1, #16
 8001a7a:	4807      	ldr	r0, [pc, #28]	@ (8001a98 <ABSRotateHead+0x530>)
 8001a7c:	f001 f814 	bl	8002aa8 <HAL_GPIO_WritePin>
return 1;
 8001a80:	2301      	movs	r3, #1


}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3718      	adds	r7, #24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20000150 	.word	0x20000150
 8001a90:	48001000 	.word	0x48001000
 8001a94:	200000e8 	.word	0x200000e8
 8001a98:	48000400 	.word	0x48000400

08001a9c <HeadBase>:
void HeadBase(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0

	int16_t BaseSpeed = 250;
 8001aa2:	23fa      	movs	r3, #250	@ 0xfa
 8001aa4:	80fb      	strh	r3, [r7, #6]
	Motor_Init();
 8001aa6:	f7ff fca9 	bl	80013fc <Motor_Init>
	//uint8_t pinstate1;
	pinstate1 = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8);
 8001aaa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001aae:	4822      	ldr	r0, [pc, #136]	@ (8001b38 <HeadBase+0x9c>)
 8001ab0:	f000 ffe2 	bl	8002a78 <HAL_GPIO_ReadPin>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	4b20      	ldr	r3, [pc, #128]	@ (8001b3c <HeadBase+0xa0>)
 8001aba:	701a      	strb	r2, [r3, #0]

	while(pinstate1)
 8001abc:	e022      	b.n	8001b04 <HeadBase+0x68>
	{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001abe:	4b20      	ldr	r3, [pc, #128]	@ (8001b40 <HeadBase+0xa4>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	63da      	str	r2, [r3, #60]	@ 0x3c
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, BaseSpeed-1);
 8001ac6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aca:	1e5a      	subs	r2, r3, #1
 8001acc:	4b1c      	ldr	r3, [pc, #112]	@ (8001b40 <HeadBase+0xa4>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	641a      	str	r2, [r3, #64]	@ 0x40

		pinstate1 = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8);
 8001ad2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ad6:	4818      	ldr	r0, [pc, #96]	@ (8001b38 <HeadBase+0x9c>)
 8001ad8:	f000 ffce 	bl	8002a78 <HAL_GPIO_ReadPin>
 8001adc:	4603      	mov	r3, r0
 8001ade:	461a      	mov	r2, r3
 8001ae0:	4b16      	ldr	r3, [pc, #88]	@ (8001b3c <HeadBase+0xa0>)
 8001ae2:	701a      	strb	r2, [r3, #0]
		 if (pinstate1==0){
 8001ae4:	4b15      	ldr	r3, [pc, #84]	@ (8001b3c <HeadBase+0xa0>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d10b      	bne.n	8001b04 <HeadBase+0x68>
			 HAL_Delay(200);
 8001aec:	20c8      	movs	r0, #200	@ 0xc8
 8001aee:	f000 fc4f 	bl	8002390 <HAL_Delay>
			 pinstate1 = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8);
 8001af2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001af6:	4810      	ldr	r0, [pc, #64]	@ (8001b38 <HeadBase+0x9c>)
 8001af8:	f000 ffbe 	bl	8002a78 <HAL_GPIO_ReadPin>
 8001afc:	4603      	mov	r3, r0
 8001afe:	461a      	mov	r2, r3
 8001b00:	4b0e      	ldr	r3, [pc, #56]	@ (8001b3c <HeadBase+0xa0>)
 8001b02:	701a      	strb	r2, [r3, #0]
	while(pinstate1)
 8001b04:	4b0d      	ldr	r3, [pc, #52]	@ (8001b3c <HeadBase+0xa0>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d1d8      	bne.n	8001abe <HeadBase+0x22>
		 }

	}

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b40 <HeadBase+0xa4>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2200      	movs	r2, #0
 8001b12:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001b14:	4b0a      	ldr	r3, [pc, #40]	@ (8001b40 <HeadBase+0xa4>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	641a      	str	r2, [r3, #64]	@ 0x40
	HAL_Delay(2000);
 8001b1c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001b20:	f000 fc36 	bl	8002390 <HAL_Delay>
	Motor_Steer(3);
 8001b24:	2003      	movs	r0, #3
 8001b26:	f7ff fc7d 	bl	8001424 <Motor_Steer>
	posABS=0;
 8001b2a:	4b06      	ldr	r3, [pc, #24]	@ (8001b44 <HeadBase+0xa8>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	701a      	strb	r2, [r3, #0]

}
 8001b30:	bf00      	nop
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	48000c00 	.word	0x48000c00
 8001b3c:	20000000 	.word	0x20000000
 8001b40:	20000150 	.word	0x20000150
 8001b44:	200000e8 	.word	0x200000e8

08001b48 <SlotSensor_Init>:

// Counter for slot sensor
static GPIO_PinState last_state = GPIO_PIN_RESET; // Last state of the sensor
int8_t counter = 0;

void SlotSensor_Init(void) {
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
	counter = 0;
 8001b4c:	4b06      	ldr	r3, [pc, #24]	@ (8001b68 <SlotSensor_Init+0x20>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	701a      	strb	r2, [r3, #0]
    // Initialize the last state
    last_state = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7);
 8001b52:	2180      	movs	r1, #128	@ 0x80
 8001b54:	4805      	ldr	r0, [pc, #20]	@ (8001b6c <SlotSensor_Init+0x24>)
 8001b56:	f000 ff8f 	bl	8002a78 <HAL_GPIO_ReadPin>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	4b04      	ldr	r3, [pc, #16]	@ (8001b70 <SlotSensor_Init+0x28>)
 8001b60:	701a      	strb	r2, [r3, #0]
}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	2000035d 	.word	0x2000035d
 8001b6c:	48001000 	.word	0x48001000
 8001b70:	2000035c 	.word	0x2000035c

08001b74 <SlotSensor_Update>:

int SlotSensor_Update(void) {
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
    GPIO_PinState current_state = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7); // Read pin state
 8001b7a:	2180      	movs	r1, #128	@ 0x80
 8001b7c:	4815      	ldr	r0, [pc, #84]	@ (8001bd4 <SlotSensor_Update+0x60>)
 8001b7e:	f000 ff7b 	bl	8002a78 <HAL_GPIO_ReadPin>
 8001b82:	4603      	mov	r3, r0
 8001b84:	71fb      	strb	r3, [r7, #7]

    // Check for a change in state
    if (current_state == GPIO_PIN_SET && last_state == GPIO_PIN_RESET) {
 8001b86:	79fb      	ldrb	r3, [r7, #7]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d118      	bne.n	8001bbe <SlotSensor_Update+0x4a>
 8001b8c:	4b12      	ldr	r3, [pc, #72]	@ (8001bd8 <SlotSensor_Update+0x64>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d114      	bne.n	8001bbe <SlotSensor_Update+0x4a>
    	HAL_Delay(1);
 8001b94:	2001      	movs	r0, #1
 8001b96:	f000 fbfb 	bl	8002390 <HAL_Delay>
    	current_state = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7);
 8001b9a:	2180      	movs	r1, #128	@ 0x80
 8001b9c:	480d      	ldr	r0, [pc, #52]	@ (8001bd4 <SlotSensor_Update+0x60>)
 8001b9e:	f000 ff6b 	bl	8002a78 <HAL_GPIO_ReadPin>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	71fb      	strb	r3, [r7, #7]
    	if(current_state == GPIO_PIN_SET){
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d108      	bne.n	8001bbe <SlotSensor_Update+0x4a>
        counter++;} // Increment counter on state change
 8001bac:	4b0b      	ldr	r3, [pc, #44]	@ (8001bdc <SlotSensor_Update+0x68>)
 8001bae:	f993 3000 	ldrsb.w	r3, [r3]
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	b25a      	sxtb	r2, r3
 8001bba:	4b08      	ldr	r3, [pc, #32]	@ (8001bdc <SlotSensor_Update+0x68>)
 8001bbc:	701a      	strb	r2, [r3, #0]
         // Update last state
    }
    last_state = current_state;
 8001bbe:	4a06      	ldr	r2, [pc, #24]	@ (8001bd8 <SlotSensor_Update+0x64>)
 8001bc0:	79fb      	ldrb	r3, [r7, #7]
 8001bc2:	7013      	strb	r3, [r2, #0]
    return counter ;
 8001bc4:	4b05      	ldr	r3, [pc, #20]	@ (8001bdc <SlotSensor_Update+0x68>)
 8001bc6:	f993 3000 	ldrsb.w	r3, [r3]
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	48001000 	.word	0x48001000
 8001bd8:	2000035c 	.word	0x2000035c
 8001bdc:	2000035d 	.word	0x2000035d

08001be0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be6:	4b0f      	ldr	r3, [pc, #60]	@ (8001c24 <HAL_MspInit+0x44>)
 8001be8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bea:	4a0e      	ldr	r2, [pc, #56]	@ (8001c24 <HAL_MspInit+0x44>)
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8001c24 <HAL_MspInit+0x44>)
 8001bf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	607b      	str	r3, [r7, #4]
 8001bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bfe:	4b09      	ldr	r3, [pc, #36]	@ (8001c24 <HAL_MspInit+0x44>)
 8001c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c02:	4a08      	ldr	r2, [pc, #32]	@ (8001c24 <HAL_MspInit+0x44>)
 8001c04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c08:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c0a:	4b06      	ldr	r3, [pc, #24]	@ (8001c24 <HAL_MspInit+0x44>)
 8001c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c12:	603b      	str	r3, [r7, #0]
 8001c14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001c16:	f001 f803 	bl	8002c20 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40021000 	.word	0x40021000

08001c28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08a      	sub	sp, #40	@ 0x28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c30:	f107 0314 	add.w	r3, r7, #20
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a2a      	ldr	r2, [pc, #168]	@ (8001cf0 <HAL_SPI_MspInit+0xc8>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d14d      	bne.n	8001ce6 <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c4a:	4b2a      	ldr	r3, [pc, #168]	@ (8001cf4 <HAL_SPI_MspInit+0xcc>)
 8001c4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c4e:	4a29      	ldr	r2, [pc, #164]	@ (8001cf4 <HAL_SPI_MspInit+0xcc>)
 8001c50:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c54:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c56:	4b27      	ldr	r3, [pc, #156]	@ (8001cf4 <HAL_SPI_MspInit+0xcc>)
 8001c58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c5e:	613b      	str	r3, [r7, #16]
 8001c60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c62:	4b24      	ldr	r3, [pc, #144]	@ (8001cf4 <HAL_SPI_MspInit+0xcc>)
 8001c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c66:	4a23      	ldr	r2, [pc, #140]	@ (8001cf4 <HAL_SPI_MspInit+0xcc>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c6e:	4b21      	ldr	r3, [pc, #132]	@ (8001cf4 <HAL_SPI_MspInit+0xcc>)
 8001c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c7a:	4b1e      	ldr	r3, [pc, #120]	@ (8001cf4 <HAL_SPI_MspInit+0xcc>)
 8001c7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c7e:	4a1d      	ldr	r2, [pc, #116]	@ (8001cf4 <HAL_SPI_MspInit+0xcc>)
 8001c80:	f043 0302 	orr.w	r3, r3, #2
 8001c84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c86:	4b1b      	ldr	r3, [pc, #108]	@ (8001cf4 <HAL_SPI_MspInit+0xcc>)
 8001c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	60bb      	str	r3, [r7, #8]
 8001c90:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ca4:	2305      	movs	r3, #5
 8001ca6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca8:	f107 0314 	add.w	r3, r7, #20
 8001cac:	4619      	mov	r1, r3
 8001cae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cb2:	f000 fd5f 	bl	8002774 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001cb6:	2338      	movs	r3, #56	@ 0x38
 8001cb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cc6:	2305      	movs	r3, #5
 8001cc8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cca:	f107 0314 	add.w	r3, r7, #20
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4809      	ldr	r0, [pc, #36]	@ (8001cf8 <HAL_SPI_MspInit+0xd0>)
 8001cd2:	f000 fd4f 	bl	8002774 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2100      	movs	r1, #0
 8001cda:	2023      	movs	r0, #35	@ 0x23
 8001cdc:	f000 fc55 	bl	800258a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001ce0:	2023      	movs	r0, #35	@ 0x23
 8001ce2:	f000 fc6c 	bl	80025be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ce6:	bf00      	nop
 8001ce8:	3728      	adds	r7, #40	@ 0x28
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40013000 	.word	0x40013000
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	48000400 	.word	0x48000400

08001cfc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a0a      	ldr	r2, [pc, #40]	@ (8001d34 <HAL_TIM_Base_MspInit+0x38>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d10b      	bne.n	8001d26 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d38 <HAL_TIM_Base_MspInit+0x3c>)
 8001d10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d12:	4a09      	ldr	r2, [pc, #36]	@ (8001d38 <HAL_TIM_Base_MspInit+0x3c>)
 8001d14:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d18:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d1a:	4b07      	ldr	r3, [pc, #28]	@ (8001d38 <HAL_TIM_Base_MspInit+0x3c>)
 8001d1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001d26:	bf00      	nop
 8001d28:	3714      	adds	r7, #20
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	40012c00 	.word	0x40012c00
 8001d38:	40021000 	.word	0x40021000

08001d3c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08c      	sub	sp, #48	@ 0x30
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d44:	f107 031c 	add.w	r3, r7, #28
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	60da      	str	r2, [r3, #12]
 8001d52:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a33      	ldr	r2, [pc, #204]	@ (8001e28 <HAL_TIM_Encoder_MspInit+0xec>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d128      	bne.n	8001db0 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d5e:	4b33      	ldr	r3, [pc, #204]	@ (8001e2c <HAL_TIM_Encoder_MspInit+0xf0>)
 8001d60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d62:	4a32      	ldr	r2, [pc, #200]	@ (8001e2c <HAL_TIM_Encoder_MspInit+0xf0>)
 8001d64:	f043 0302 	orr.w	r3, r3, #2
 8001d68:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d6a:	4b30      	ldr	r3, [pc, #192]	@ (8001e2c <HAL_TIM_Encoder_MspInit+0xf0>)
 8001d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	61bb      	str	r3, [r7, #24]
 8001d74:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d76:	4b2d      	ldr	r3, [pc, #180]	@ (8001e2c <HAL_TIM_Encoder_MspInit+0xf0>)
 8001d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d7a:	4a2c      	ldr	r2, [pc, #176]	@ (8001e2c <HAL_TIM_Encoder_MspInit+0xf0>)
 8001d7c:	f043 0304 	orr.w	r3, r3, #4
 8001d80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d82:	4b2a      	ldr	r3, [pc, #168]	@ (8001e2c <HAL_TIM_Encoder_MspInit+0xf0>)
 8001d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d86:	f003 0304 	and.w	r3, r3, #4
 8001d8a:	617b      	str	r3, [r7, #20]
 8001d8c:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Motor_B_EN_CH1_Pin|Motor_B_EN_CH2_Pin;
 8001d8e:	23c0      	movs	r3, #192	@ 0xc0
 8001d90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d92:	2302      	movs	r3, #2
 8001d94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001da2:	f107 031c 	add.w	r3, r7, #28
 8001da6:	4619      	mov	r1, r3
 8001da8:	4821      	ldr	r0, [pc, #132]	@ (8001e30 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001daa:	f000 fce3 	bl	8002774 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001dae:	e036      	b.n	8001e1e <HAL_TIM_Encoder_MspInit+0xe2>
  else if(htim_encoder->Instance==TIM4)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a1f      	ldr	r2, [pc, #124]	@ (8001e34 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d131      	bne.n	8001e1e <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001dba:	4b1c      	ldr	r3, [pc, #112]	@ (8001e2c <HAL_TIM_Encoder_MspInit+0xf0>)
 8001dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dbe:	4a1b      	ldr	r2, [pc, #108]	@ (8001e2c <HAL_TIM_Encoder_MspInit+0xf0>)
 8001dc0:	f043 0304 	orr.w	r3, r3, #4
 8001dc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dc6:	4b19      	ldr	r3, [pc, #100]	@ (8001e2c <HAL_TIM_Encoder_MspInit+0xf0>)
 8001dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dca:	f003 0304 	and.w	r3, r3, #4
 8001dce:	613b      	str	r3, [r7, #16]
 8001dd0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd2:	4b16      	ldr	r3, [pc, #88]	@ (8001e2c <HAL_TIM_Encoder_MspInit+0xf0>)
 8001dd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dd6:	4a15      	ldr	r2, [pc, #84]	@ (8001e2c <HAL_TIM_Encoder_MspInit+0xf0>)
 8001dd8:	f043 0301 	orr.w	r3, r3, #1
 8001ddc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dde:	4b13      	ldr	r3, [pc, #76]	@ (8001e2c <HAL_TIM_Encoder_MspInit+0xf0>)
 8001de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Motor_A_EN_CH2_Pin|Motor_A_EN_CH1_Pin;
 8001dea:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001dee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df0:	2302      	movs	r3, #2
 8001df2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001dfc:	230a      	movs	r3, #10
 8001dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e00:	f107 031c 	add.w	r3, r7, #28
 8001e04:	4619      	mov	r1, r3
 8001e06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e0a:	f000 fcb3 	bl	8002774 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2100      	movs	r1, #0
 8001e12:	201e      	movs	r0, #30
 8001e14:	f000 fbb9 	bl	800258a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001e18:	201e      	movs	r0, #30
 8001e1a:	f000 fbd0 	bl	80025be <HAL_NVIC_EnableIRQ>
}
 8001e1e:	bf00      	nop
 8001e20:	3730      	adds	r7, #48	@ 0x30
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40000400 	.word	0x40000400
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	48000800 	.word	0x48000800
 8001e34:	40000800 	.word	0x40000800

08001e38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b088      	sub	sp, #32
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e40:	f107 030c 	add.w	r3, r7, #12
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	605a      	str	r2, [r3, #4]
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	60da      	str	r2, [r3, #12]
 8001e4e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a11      	ldr	r2, [pc, #68]	@ (8001e9c <HAL_TIM_MspPostInit+0x64>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d11b      	bne.n	8001e92 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e5a:	4b11      	ldr	r3, [pc, #68]	@ (8001ea0 <HAL_TIM_MspPostInit+0x68>)
 8001e5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e5e:	4a10      	ldr	r2, [pc, #64]	@ (8001ea0 <HAL_TIM_MspPostInit+0x68>)
 8001e60:	f043 0304 	orr.w	r3, r3, #4
 8001e64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e66:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea0 <HAL_TIM_MspPostInit+0x68>)
 8001e68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e6a:	f003 0304 	and.w	r3, r3, #4
 8001e6e:	60bb      	str	r3, [r7, #8]
 8001e70:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Motor_A_CH1_Pin|Motor_A_CH2_Pin|Motor_B_CH3_Pin|Motor_A_CH4_Pin;
 8001e72:	230f      	movs	r3, #15
 8001e74:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e76:	2302      	movs	r3, #2
 8001e78:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001e82:	2302      	movs	r3, #2
 8001e84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e86:	f107 030c 	add.w	r3, r7, #12
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4805      	ldr	r0, [pc, #20]	@ (8001ea4 <HAL_TIM_MspPostInit+0x6c>)
 8001e8e:	f000 fc71 	bl	8002774 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001e92:	bf00      	nop
 8001e94:	3720      	adds	r7, #32
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40012c00 	.word	0x40012c00
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	48000800 	.word	0x48000800

08001ea8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b0a2      	sub	sp, #136	@ 0x88
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	60da      	str	r2, [r3, #12]
 8001ebe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ec0:	f107 0320 	add.w	r3, r7, #32
 8001ec4:	2254      	movs	r2, #84	@ 0x54
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f006 f9a3 	bl	8008214 <memset>
  if(huart->Instance==UART4)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a56      	ldr	r2, [pc, #344]	@ (800202c <HAL_UART_MspInit+0x184>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d141      	bne.n	8001f5c <HAL_UART_MspInit+0xb4>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001ed8:	2308      	movs	r3, #8
 8001eda:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001edc:	2300      	movs	r3, #0
 8001ede:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ee0:	f107 0320 	add.w	r3, r7, #32
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f001 fbd9 	bl	800369c <HAL_RCCEx_PeriphCLKConfig>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ef0:	f7ff fa7e 	bl	80013f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001ef4:	4b4e      	ldr	r3, [pc, #312]	@ (8002030 <HAL_UART_MspInit+0x188>)
 8001ef6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ef8:	4a4d      	ldr	r2, [pc, #308]	@ (8002030 <HAL_UART_MspInit+0x188>)
 8001efa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001efe:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f00:	4b4b      	ldr	r3, [pc, #300]	@ (8002030 <HAL_UART_MspInit+0x188>)
 8001f02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f04:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f08:	61fb      	str	r3, [r7, #28]
 8001f0a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f0c:	4b48      	ldr	r3, [pc, #288]	@ (8002030 <HAL_UART_MspInit+0x188>)
 8001f0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f10:	4a47      	ldr	r2, [pc, #284]	@ (8002030 <HAL_UART_MspInit+0x188>)
 8001f12:	f043 0304 	orr.w	r3, r3, #4
 8001f16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f18:	4b45      	ldr	r3, [pc, #276]	@ (8002030 <HAL_UART_MspInit+0x188>)
 8001f1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f1c:	f003 0304 	and.w	r3, r3, #4
 8001f20:	61bb      	str	r3, [r7, #24]
 8001f22:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001f24:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001f28:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f32:	2300      	movs	r3, #0
 8001f34:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8001f38:	2305      	movs	r3, #5
 8001f3a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f3e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001f42:	4619      	mov	r1, r3
 8001f44:	483b      	ldr	r0, [pc, #236]	@ (8002034 <HAL_UART_MspInit+0x18c>)
 8001f46:	f000 fc15 	bl	8002774 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	2034      	movs	r0, #52	@ 0x34
 8001f50:	f000 fb1b 	bl	800258a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001f54:	2034      	movs	r0, #52	@ 0x34
 8001f56:	f000 fb32 	bl	80025be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8001f5a:	e063      	b.n	8002024 <HAL_UART_MspInit+0x17c>
  else if(huart->Instance==UART5)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a35      	ldr	r2, [pc, #212]	@ (8002038 <HAL_UART_MspInit+0x190>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d15e      	bne.n	8002024 <HAL_UART_MspInit+0x17c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001f66:	2310      	movs	r3, #16
 8001f68:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f6e:	f107 0320 	add.w	r3, r7, #32
 8001f72:	4618      	mov	r0, r3
 8001f74:	f001 fb92 	bl	800369c <HAL_RCCEx_PeriphCLKConfig>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <HAL_UART_MspInit+0xda>
      Error_Handler();
 8001f7e:	f7ff fa37 	bl	80013f0 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001f82:	4b2b      	ldr	r3, [pc, #172]	@ (8002030 <HAL_UART_MspInit+0x188>)
 8001f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f86:	4a2a      	ldr	r2, [pc, #168]	@ (8002030 <HAL_UART_MspInit+0x188>)
 8001f88:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001f8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f8e:	4b28      	ldr	r3, [pc, #160]	@ (8002030 <HAL_UART_MspInit+0x188>)
 8001f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f96:	617b      	str	r3, [r7, #20]
 8001f98:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f9a:	4b25      	ldr	r3, [pc, #148]	@ (8002030 <HAL_UART_MspInit+0x188>)
 8001f9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f9e:	4a24      	ldr	r2, [pc, #144]	@ (8002030 <HAL_UART_MspInit+0x188>)
 8001fa0:	f043 0304 	orr.w	r3, r3, #4
 8001fa4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fa6:	4b22      	ldr	r3, [pc, #136]	@ (8002030 <HAL_UART_MspInit+0x188>)
 8001fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001faa:	f003 0304 	and.w	r3, r3, #4
 8001fae:	613b      	str	r3, [r7, #16]
 8001fb0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fb2:	4b1f      	ldr	r3, [pc, #124]	@ (8002030 <HAL_UART_MspInit+0x188>)
 8001fb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fb6:	4a1e      	ldr	r2, [pc, #120]	@ (8002030 <HAL_UART_MspInit+0x188>)
 8001fb8:	f043 0308 	orr.w	r3, r3, #8
 8001fbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fbe:	4b1c      	ldr	r3, [pc, #112]	@ (8002030 <HAL_UART_MspInit+0x188>)
 8001fc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fc2:	f003 0308 	and.w	r3, r3, #8
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001fca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fce:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8001fde:	2305      	movs	r3, #5
 8001fe0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fe4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4812      	ldr	r0, [pc, #72]	@ (8002034 <HAL_UART_MspInit+0x18c>)
 8001fec:	f000 fbc2 	bl	8002774 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ff0:	2304      	movs	r3, #4
 8001ff2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8002002:	2305      	movs	r3, #5
 8002004:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002008:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800200c:	4619      	mov	r1, r3
 800200e:	480b      	ldr	r0, [pc, #44]	@ (800203c <HAL_UART_MspInit+0x194>)
 8002010:	f000 fbb0 	bl	8002774 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002014:	2200      	movs	r2, #0
 8002016:	2100      	movs	r1, #0
 8002018:	2035      	movs	r0, #53	@ 0x35
 800201a:	f000 fab6 	bl	800258a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800201e:	2035      	movs	r0, #53	@ 0x35
 8002020:	f000 facd 	bl	80025be <HAL_NVIC_EnableIRQ>
}
 8002024:	bf00      	nop
 8002026:	3788      	adds	r7, #136	@ 0x88
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40004c00 	.word	0x40004c00
 8002030:	40021000 	.word	0x40021000
 8002034:	48000800 	.word	0x48000800
 8002038:	40005000 	.word	0x40005000
 800203c:	48000c00 	.word	0x48000c00

08002040 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002044:	bf00      	nop
 8002046:	e7fd      	b.n	8002044 <NMI_Handler+0x4>

08002048 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800204c:	bf00      	nop
 800204e:	e7fd      	b.n	800204c <HardFault_Handler+0x4>

08002050 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002054:	bf00      	nop
 8002056:	e7fd      	b.n	8002054 <MemManage_Handler+0x4>

08002058 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800205c:	bf00      	nop
 800205e:	e7fd      	b.n	800205c <BusFault_Handler+0x4>

08002060 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002064:	bf00      	nop
 8002066:	e7fd      	b.n	8002064 <UsageFault_Handler+0x4>

08002068 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002076:	b480      	push	{r7}
 8002078:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800207a:	bf00      	nop
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002088:	bf00      	nop
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002096:	f000 f95d 	bl	8002354 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
	...

080020a0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80020a4:	4802      	ldr	r0, [pc, #8]	@ (80020b0 <TIM4_IRQHandler+0x10>)
 80020a6:	f003 f88f 	bl	80051c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	200001e8 	.word	0x200001e8

080020b4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80020b8:	4802      	ldr	r0, [pc, #8]	@ (80020c4 <SPI1_IRQHandler+0x10>)
 80020ba:	f002 fab7 	bl	800462c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	200000ec 	.word	0x200000ec

080020c8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80020cc:	4802      	ldr	r0, [pc, #8]	@ (80020d8 <UART4_IRQHandler+0x10>)
 80020ce:	f004 fbdd 	bl	800688c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20000234 	.word	0x20000234

080020dc <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt / UART5 wake-up interrupt through EXTI line 35.
  */
void UART5_IRQHandler(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80020e0:	4802      	ldr	r0, [pc, #8]	@ (80020ec <UART5_IRQHandler+0x10>)
 80020e2:	f004 fbd3 	bl	800688c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80020e6:	bf00      	nop
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	200002c8 	.word	0x200002c8

080020f0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020fc:	2300      	movs	r3, #0
 80020fe:	617b      	str	r3, [r7, #20]
 8002100:	e00a      	b.n	8002118 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002102:	f3af 8000 	nop.w
 8002106:	4601      	mov	r1, r0
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	1c5a      	adds	r2, r3, #1
 800210c:	60ba      	str	r2, [r7, #8]
 800210e:	b2ca      	uxtb	r2, r1
 8002110:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	3301      	adds	r3, #1
 8002116:	617b      	str	r3, [r7, #20]
 8002118:	697a      	ldr	r2, [r7, #20]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	429a      	cmp	r2, r3
 800211e:	dbf0      	blt.n	8002102 <_read+0x12>
  }

  return len;
 8002120:	687b      	ldr	r3, [r7, #4]
}
 8002122:	4618      	mov	r0, r3
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b086      	sub	sp, #24
 800212e:	af00      	add	r7, sp, #0
 8002130:	60f8      	str	r0, [r7, #12]
 8002132:	60b9      	str	r1, [r7, #8]
 8002134:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002136:	2300      	movs	r3, #0
 8002138:	617b      	str	r3, [r7, #20]
 800213a:	e009      	b.n	8002150 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	1c5a      	adds	r2, r3, #1
 8002140:	60ba      	str	r2, [r7, #8]
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	4618      	mov	r0, r3
 8002146:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	3301      	adds	r3, #1
 800214e:	617b      	str	r3, [r7, #20]
 8002150:	697a      	ldr	r2, [r7, #20]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	429a      	cmp	r2, r3
 8002156:	dbf1      	blt.n	800213c <_write+0x12>
  }
  return len;
 8002158:	687b      	ldr	r3, [r7, #4]
}
 800215a:	4618      	mov	r0, r3
 800215c:	3718      	adds	r7, #24
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <_close>:

int _close(int file)
{
 8002162:	b480      	push	{r7}
 8002164:	b083      	sub	sp, #12
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800216a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800216e:	4618      	mov	r0, r3
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800217a:	b480      	push	{r7}
 800217c:	b083      	sub	sp, #12
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
 8002182:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800218a:	605a      	str	r2, [r3, #4]
  return 0;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <_isatty>:

int _isatty(int file)
{
 800219a:	b480      	push	{r7}
 800219c:	b083      	sub	sp, #12
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021a2:	2301      	movs	r3, #1
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3714      	adds	r7, #20
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
	...

080021cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021d4:	4a14      	ldr	r2, [pc, #80]	@ (8002228 <_sbrk+0x5c>)
 80021d6:	4b15      	ldr	r3, [pc, #84]	@ (800222c <_sbrk+0x60>)
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021e0:	4b13      	ldr	r3, [pc, #76]	@ (8002230 <_sbrk+0x64>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d102      	bne.n	80021ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021e8:	4b11      	ldr	r3, [pc, #68]	@ (8002230 <_sbrk+0x64>)
 80021ea:	4a12      	ldr	r2, [pc, #72]	@ (8002234 <_sbrk+0x68>)
 80021ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021ee:	4b10      	ldr	r3, [pc, #64]	@ (8002230 <_sbrk+0x64>)
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4413      	add	r3, r2
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d207      	bcs.n	800220c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021fc:	f006 f87c 	bl	80082f8 <__errno>
 8002200:	4603      	mov	r3, r0
 8002202:	220c      	movs	r2, #12
 8002204:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002206:	f04f 33ff 	mov.w	r3, #4294967295
 800220a:	e009      	b.n	8002220 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800220c:	4b08      	ldr	r3, [pc, #32]	@ (8002230 <_sbrk+0x64>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002212:	4b07      	ldr	r3, [pc, #28]	@ (8002230 <_sbrk+0x64>)
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4413      	add	r3, r2
 800221a:	4a05      	ldr	r2, [pc, #20]	@ (8002230 <_sbrk+0x64>)
 800221c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800221e:	68fb      	ldr	r3, [r7, #12]
}
 8002220:	4618      	mov	r0, r3
 8002222:	3718      	adds	r7, #24
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	20020000 	.word	0x20020000
 800222c:	00000400 	.word	0x00000400
 8002230:	20000360 	.word	0x20000360
 8002234:	200004b8 	.word	0x200004b8

08002238 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800223c:	4b06      	ldr	r3, [pc, #24]	@ (8002258 <SystemInit+0x20>)
 800223e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002242:	4a05      	ldr	r2, [pc, #20]	@ (8002258 <SystemInit+0x20>)
 8002244:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002248:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800224c:	bf00      	nop
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	e000ed00 	.word	0xe000ed00

0800225c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800225c:	480d      	ldr	r0, [pc, #52]	@ (8002294 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800225e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002260:	f7ff ffea 	bl	8002238 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002264:	480c      	ldr	r0, [pc, #48]	@ (8002298 <LoopForever+0x6>)
  ldr r1, =_edata
 8002266:	490d      	ldr	r1, [pc, #52]	@ (800229c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002268:	4a0d      	ldr	r2, [pc, #52]	@ (80022a0 <LoopForever+0xe>)
  movs r3, #0
 800226a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800226c:	e002      	b.n	8002274 <LoopCopyDataInit>

0800226e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800226e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002270:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002272:	3304      	adds	r3, #4

08002274 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002274:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002276:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002278:	d3f9      	bcc.n	800226e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800227a:	4a0a      	ldr	r2, [pc, #40]	@ (80022a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800227c:	4c0a      	ldr	r4, [pc, #40]	@ (80022a8 <LoopForever+0x16>)
  movs r3, #0
 800227e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002280:	e001      	b.n	8002286 <LoopFillZerobss>

08002282 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002282:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002284:	3204      	adds	r2, #4

08002286 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002286:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002288:	d3fb      	bcc.n	8002282 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800228a:	f006 f83b 	bl	8008304 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800228e:	f7fe fd41 	bl	8000d14 <main>

08002292 <LoopForever>:

LoopForever:
    b LoopForever
 8002292:	e7fe      	b.n	8002292 <LoopForever>
  ldr   r0, =_estack
 8002294:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800229c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80022a0:	0800994c 	.word	0x0800994c
  ldr r2, =_sbss
 80022a4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80022a8:	200004b4 	.word	0x200004b4

080022ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022ac:	e7fe      	b.n	80022ac <ADC1_2_IRQHandler>

080022ae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b082      	sub	sp, #8
 80022b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80022b4:	2300      	movs	r3, #0
 80022b6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022b8:	2003      	movs	r0, #3
 80022ba:	f000 f95b 	bl	8002574 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022be:	200f      	movs	r0, #15
 80022c0:	f000 f80e 	bl	80022e0 <HAL_InitTick>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d002      	beq.n	80022d0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	71fb      	strb	r3, [r7, #7]
 80022ce:	e001      	b.n	80022d4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022d0:	f7ff fc86 	bl	8001be0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022d4:	79fb      	ldrb	r3, [r7, #7]

}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
	...

080022e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80022e8:	2300      	movs	r3, #0
 80022ea:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80022ec:	4b16      	ldr	r3, [pc, #88]	@ (8002348 <HAL_InitTick+0x68>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d022      	beq.n	800233a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80022f4:	4b15      	ldr	r3, [pc, #84]	@ (800234c <HAL_InitTick+0x6c>)
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	4b13      	ldr	r3, [pc, #76]	@ (8002348 <HAL_InitTick+0x68>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002300:	fbb1 f3f3 	udiv	r3, r1, r3
 8002304:	fbb2 f3f3 	udiv	r3, r2, r3
 8002308:	4618      	mov	r0, r3
 800230a:	f000 f966 	bl	80025da <HAL_SYSTICK_Config>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d10f      	bne.n	8002334 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2b0f      	cmp	r3, #15
 8002318:	d809      	bhi.n	800232e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800231a:	2200      	movs	r2, #0
 800231c:	6879      	ldr	r1, [r7, #4]
 800231e:	f04f 30ff 	mov.w	r0, #4294967295
 8002322:	f000 f932 	bl	800258a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002326:	4a0a      	ldr	r2, [pc, #40]	@ (8002350 <HAL_InitTick+0x70>)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6013      	str	r3, [r2, #0]
 800232c:	e007      	b.n	800233e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	73fb      	strb	r3, [r7, #15]
 8002332:	e004      	b.n	800233e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	73fb      	strb	r3, [r7, #15]
 8002338:	e001      	b.n	800233e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800233e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002340:	4618      	mov	r0, r3
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	2000000c 	.word	0x2000000c
 800234c:	20000004 	.word	0x20000004
 8002350:	20000008 	.word	0x20000008

08002354 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002358:	4b05      	ldr	r3, [pc, #20]	@ (8002370 <HAL_IncTick+0x1c>)
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	4b05      	ldr	r3, [pc, #20]	@ (8002374 <HAL_IncTick+0x20>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4413      	add	r3, r2
 8002362:	4a03      	ldr	r2, [pc, #12]	@ (8002370 <HAL_IncTick+0x1c>)
 8002364:	6013      	str	r3, [r2, #0]
}
 8002366:	bf00      	nop
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	20000364 	.word	0x20000364
 8002374:	2000000c 	.word	0x2000000c

08002378 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  return uwTick;
 800237c:	4b03      	ldr	r3, [pc, #12]	@ (800238c <HAL_GetTick+0x14>)
 800237e:	681b      	ldr	r3, [r3, #0]
}
 8002380:	4618      	mov	r0, r3
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	20000364 	.word	0x20000364

08002390 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002398:	f7ff ffee 	bl	8002378 <HAL_GetTick>
 800239c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a8:	d004      	beq.n	80023b4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80023aa:	4b09      	ldr	r3, [pc, #36]	@ (80023d0 <HAL_Delay+0x40>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	4413      	add	r3, r2
 80023b2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023b4:	bf00      	nop
 80023b6:	f7ff ffdf 	bl	8002378 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d8f7      	bhi.n	80023b6 <HAL_Delay+0x26>
  {
  }
}
 80023c6:	bf00      	nop
 80023c8:	bf00      	nop
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	2000000c 	.word	0x2000000c

080023d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002418 <__NVIC_SetPriorityGrouping+0x44>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023f0:	4013      	ands	r3, r2
 80023f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002400:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002404:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002406:	4a04      	ldr	r2, [pc, #16]	@ (8002418 <__NVIC_SetPriorityGrouping+0x44>)
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	60d3      	str	r3, [r2, #12]
}
 800240c:	bf00      	nop
 800240e:	3714      	adds	r7, #20
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	e000ed00 	.word	0xe000ed00

0800241c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002420:	4b04      	ldr	r3, [pc, #16]	@ (8002434 <__NVIC_GetPriorityGrouping+0x18>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	0a1b      	lsrs	r3, r3, #8
 8002426:	f003 0307 	and.w	r3, r3, #7
}
 800242a:	4618      	mov	r0, r3
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	e000ed00 	.word	0xe000ed00

08002438 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	4603      	mov	r3, r0
 8002440:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002446:	2b00      	cmp	r3, #0
 8002448:	db0b      	blt.n	8002462 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800244a:	79fb      	ldrb	r3, [r7, #7]
 800244c:	f003 021f 	and.w	r2, r3, #31
 8002450:	4907      	ldr	r1, [pc, #28]	@ (8002470 <__NVIC_EnableIRQ+0x38>)
 8002452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002456:	095b      	lsrs	r3, r3, #5
 8002458:	2001      	movs	r0, #1
 800245a:	fa00 f202 	lsl.w	r2, r0, r2
 800245e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002462:	bf00      	nop
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	e000e100 	.word	0xe000e100

08002474 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	4603      	mov	r3, r0
 800247c:	6039      	str	r1, [r7, #0]
 800247e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002484:	2b00      	cmp	r3, #0
 8002486:	db0a      	blt.n	800249e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	b2da      	uxtb	r2, r3
 800248c:	490c      	ldr	r1, [pc, #48]	@ (80024c0 <__NVIC_SetPriority+0x4c>)
 800248e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002492:	0112      	lsls	r2, r2, #4
 8002494:	b2d2      	uxtb	r2, r2
 8002496:	440b      	add	r3, r1
 8002498:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800249c:	e00a      	b.n	80024b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	4908      	ldr	r1, [pc, #32]	@ (80024c4 <__NVIC_SetPriority+0x50>)
 80024a4:	79fb      	ldrb	r3, [r7, #7]
 80024a6:	f003 030f 	and.w	r3, r3, #15
 80024aa:	3b04      	subs	r3, #4
 80024ac:	0112      	lsls	r2, r2, #4
 80024ae:	b2d2      	uxtb	r2, r2
 80024b0:	440b      	add	r3, r1
 80024b2:	761a      	strb	r2, [r3, #24]
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	e000e100 	.word	0xe000e100
 80024c4:	e000ed00 	.word	0xe000ed00

080024c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b089      	sub	sp, #36	@ 0x24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	f1c3 0307 	rsb	r3, r3, #7
 80024e2:	2b04      	cmp	r3, #4
 80024e4:	bf28      	it	cs
 80024e6:	2304      	movcs	r3, #4
 80024e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	3304      	adds	r3, #4
 80024ee:	2b06      	cmp	r3, #6
 80024f0:	d902      	bls.n	80024f8 <NVIC_EncodePriority+0x30>
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	3b03      	subs	r3, #3
 80024f6:	e000      	b.n	80024fa <NVIC_EncodePriority+0x32>
 80024f8:	2300      	movs	r3, #0
 80024fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	43da      	mvns	r2, r3
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	401a      	ands	r2, r3
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002510:	f04f 31ff 	mov.w	r1, #4294967295
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	fa01 f303 	lsl.w	r3, r1, r3
 800251a:	43d9      	mvns	r1, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002520:	4313      	orrs	r3, r2
         );
}
 8002522:	4618      	mov	r0, r3
 8002524:	3724      	adds	r7, #36	@ 0x24
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
	...

08002530 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3b01      	subs	r3, #1
 800253c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002540:	d301      	bcc.n	8002546 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002542:	2301      	movs	r3, #1
 8002544:	e00f      	b.n	8002566 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002546:	4a0a      	ldr	r2, [pc, #40]	@ (8002570 <SysTick_Config+0x40>)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	3b01      	subs	r3, #1
 800254c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800254e:	210f      	movs	r1, #15
 8002550:	f04f 30ff 	mov.w	r0, #4294967295
 8002554:	f7ff ff8e 	bl	8002474 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002558:	4b05      	ldr	r3, [pc, #20]	@ (8002570 <SysTick_Config+0x40>)
 800255a:	2200      	movs	r2, #0
 800255c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800255e:	4b04      	ldr	r3, [pc, #16]	@ (8002570 <SysTick_Config+0x40>)
 8002560:	2207      	movs	r2, #7
 8002562:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	e000e010 	.word	0xe000e010

08002574 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f7ff ff29 	bl	80023d4 <__NVIC_SetPriorityGrouping>
}
 8002582:	bf00      	nop
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b086      	sub	sp, #24
 800258e:	af00      	add	r7, sp, #0
 8002590:	4603      	mov	r3, r0
 8002592:	60b9      	str	r1, [r7, #8]
 8002594:	607a      	str	r2, [r7, #4]
 8002596:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002598:	f7ff ff40 	bl	800241c <__NVIC_GetPriorityGrouping>
 800259c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	68b9      	ldr	r1, [r7, #8]
 80025a2:	6978      	ldr	r0, [r7, #20]
 80025a4:	f7ff ff90 	bl	80024c8 <NVIC_EncodePriority>
 80025a8:	4602      	mov	r2, r0
 80025aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ae:	4611      	mov	r1, r2
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff ff5f 	bl	8002474 <__NVIC_SetPriority>
}
 80025b6:	bf00      	nop
 80025b8:	3718      	adds	r7, #24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b082      	sub	sp, #8
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	4603      	mov	r3, r0
 80025c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff ff33 	bl	8002438 <__NVIC_EnableIRQ>
}
 80025d2:	bf00      	nop
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b082      	sub	sp, #8
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f7ff ffa4 	bl	8002530 <SysTick_Config>
 80025e8:	4603      	mov	r3, r0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025f2:	b480      	push	{r7}
 80025f4:	b085      	sub	sp, #20
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025fa:	2300      	movs	r3, #0
 80025fc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d005      	beq.n	8002616 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2204      	movs	r2, #4
 800260e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	73fb      	strb	r3, [r7, #15]
 8002614:	e037      	b.n	8002686 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 020e 	bic.w	r2, r2, #14
 8002624:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002630:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002634:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 0201 	bic.w	r2, r2, #1
 8002644:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800264a:	f003 021f 	and.w	r2, r3, #31
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002652:	2101      	movs	r1, #1
 8002654:	fa01 f202 	lsl.w	r2, r1, r2
 8002658:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002662:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00c      	beq.n	8002686 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002676:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800267a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002684:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8002696:	7bfb      	ldrb	r3, [r7, #15]
}
 8002698:	4618      	mov	r0, r3
 800269a:	3714      	adds	r7, #20
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026ac:	2300      	movs	r3, #0
 80026ae:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d00d      	beq.n	80026d8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2204      	movs	r2, #4
 80026c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	73fb      	strb	r3, [r7, #15]
 80026d6:	e047      	b.n	8002768 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f022 020e 	bic.w	r2, r2, #14
 80026e6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 0201 	bic.w	r2, r2, #1
 80026f6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002702:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002706:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800270c:	f003 021f 	and.w	r2, r3, #31
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002714:	2101      	movs	r1, #1
 8002716:	fa01 f202 	lsl.w	r2, r1, r2
 800271a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002724:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00c      	beq.n	8002748 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002738:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800273c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002746:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800275c:	2b00      	cmp	r3, #0
 800275e:	d003      	beq.n	8002768 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	4798      	blx	r3
    }
  }
  return status;
 8002768:	7bfb      	ldrb	r3, [r7, #15]
}
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
	...

08002774 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002774:	b480      	push	{r7}
 8002776:	b087      	sub	sp, #28
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800277e:	2300      	movs	r3, #0
 8002780:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002782:	e15a      	b.n	8002a3a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	2101      	movs	r1, #1
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	fa01 f303 	lsl.w	r3, r1, r3
 8002790:	4013      	ands	r3, r2
 8002792:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2b00      	cmp	r3, #0
 8002798:	f000 814c 	beq.w	8002a34 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f003 0303 	and.w	r3, r3, #3
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d005      	beq.n	80027b4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d130      	bne.n	8002816 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	2203      	movs	r2, #3
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	43db      	mvns	r3, r3
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	4013      	ands	r3, r2
 80027ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	68da      	ldr	r2, [r3, #12]
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	4313      	orrs	r3, r2
 80027dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027ea:	2201      	movs	r2, #1
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	43db      	mvns	r3, r3
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	4013      	ands	r3, r2
 80027f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	091b      	lsrs	r3, r3, #4
 8002800:	f003 0201 	and.w	r2, r3, #1
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	4313      	orrs	r3, r2
 800280e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f003 0303 	and.w	r3, r3, #3
 800281e:	2b03      	cmp	r3, #3
 8002820:	d017      	beq.n	8002852 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	2203      	movs	r2, #3
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	43db      	mvns	r3, r3
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	4013      	ands	r3, r2
 8002838:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	689a      	ldr	r2, [r3, #8]
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	4313      	orrs	r3, r2
 800284a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f003 0303 	and.w	r3, r3, #3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d123      	bne.n	80028a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	08da      	lsrs	r2, r3, #3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	3208      	adds	r2, #8
 8002866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800286a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	220f      	movs	r2, #15
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	43db      	mvns	r3, r3
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	4013      	ands	r3, r2
 8002880:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	691a      	ldr	r2, [r3, #16]
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	4313      	orrs	r3, r2
 8002896:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	08da      	lsrs	r2, r3, #3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3208      	adds	r2, #8
 80028a0:	6939      	ldr	r1, [r7, #16]
 80028a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	2203      	movs	r2, #3
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	43db      	mvns	r3, r3
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	4013      	ands	r3, r2
 80028bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f003 0203 	and.w	r2, r3, #3
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f000 80a6 	beq.w	8002a34 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028e8:	4b5b      	ldr	r3, [pc, #364]	@ (8002a58 <HAL_GPIO_Init+0x2e4>)
 80028ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028ec:	4a5a      	ldr	r2, [pc, #360]	@ (8002a58 <HAL_GPIO_Init+0x2e4>)
 80028ee:	f043 0301 	orr.w	r3, r3, #1
 80028f2:	6613      	str	r3, [r2, #96]	@ 0x60
 80028f4:	4b58      	ldr	r3, [pc, #352]	@ (8002a58 <HAL_GPIO_Init+0x2e4>)
 80028f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	60bb      	str	r3, [r7, #8]
 80028fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002900:	4a56      	ldr	r2, [pc, #344]	@ (8002a5c <HAL_GPIO_Init+0x2e8>)
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	089b      	lsrs	r3, r3, #2
 8002906:	3302      	adds	r3, #2
 8002908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800290c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	f003 0303 	and.w	r3, r3, #3
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	220f      	movs	r2, #15
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	43db      	mvns	r3, r3
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	4013      	ands	r3, r2
 8002922:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800292a:	d01f      	beq.n	800296c <HAL_GPIO_Init+0x1f8>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a4c      	ldr	r2, [pc, #304]	@ (8002a60 <HAL_GPIO_Init+0x2ec>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d019      	beq.n	8002968 <HAL_GPIO_Init+0x1f4>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a4b      	ldr	r2, [pc, #300]	@ (8002a64 <HAL_GPIO_Init+0x2f0>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d013      	beq.n	8002964 <HAL_GPIO_Init+0x1f0>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a4a      	ldr	r2, [pc, #296]	@ (8002a68 <HAL_GPIO_Init+0x2f4>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d00d      	beq.n	8002960 <HAL_GPIO_Init+0x1ec>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a49      	ldr	r2, [pc, #292]	@ (8002a6c <HAL_GPIO_Init+0x2f8>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d007      	beq.n	800295c <HAL_GPIO_Init+0x1e8>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a48      	ldr	r2, [pc, #288]	@ (8002a70 <HAL_GPIO_Init+0x2fc>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d101      	bne.n	8002958 <HAL_GPIO_Init+0x1e4>
 8002954:	2305      	movs	r3, #5
 8002956:	e00a      	b.n	800296e <HAL_GPIO_Init+0x1fa>
 8002958:	2306      	movs	r3, #6
 800295a:	e008      	b.n	800296e <HAL_GPIO_Init+0x1fa>
 800295c:	2304      	movs	r3, #4
 800295e:	e006      	b.n	800296e <HAL_GPIO_Init+0x1fa>
 8002960:	2303      	movs	r3, #3
 8002962:	e004      	b.n	800296e <HAL_GPIO_Init+0x1fa>
 8002964:	2302      	movs	r3, #2
 8002966:	e002      	b.n	800296e <HAL_GPIO_Init+0x1fa>
 8002968:	2301      	movs	r3, #1
 800296a:	e000      	b.n	800296e <HAL_GPIO_Init+0x1fa>
 800296c:	2300      	movs	r3, #0
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	f002 0203 	and.w	r2, r2, #3
 8002974:	0092      	lsls	r2, r2, #2
 8002976:	4093      	lsls	r3, r2
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	4313      	orrs	r3, r2
 800297c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800297e:	4937      	ldr	r1, [pc, #220]	@ (8002a5c <HAL_GPIO_Init+0x2e8>)
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	089b      	lsrs	r3, r3, #2
 8002984:	3302      	adds	r3, #2
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800298c:	4b39      	ldr	r3, [pc, #228]	@ (8002a74 <HAL_GPIO_Init+0x300>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	43db      	mvns	r3, r3
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	4013      	ands	r3, r2
 800299a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d003      	beq.n	80029b0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80029b0:	4a30      	ldr	r2, [pc, #192]	@ (8002a74 <HAL_GPIO_Init+0x300>)
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80029b6:	4b2f      	ldr	r3, [pc, #188]	@ (8002a74 <HAL_GPIO_Init+0x300>)
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	43db      	mvns	r3, r3
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	4013      	ands	r3, r2
 80029c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d003      	beq.n	80029da <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80029d2:	693a      	ldr	r2, [r7, #16]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80029da:	4a26      	ldr	r2, [pc, #152]	@ (8002a74 <HAL_GPIO_Init+0x300>)
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80029e0:	4b24      	ldr	r3, [pc, #144]	@ (8002a74 <HAL_GPIO_Init+0x300>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	43db      	mvns	r3, r3
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	4013      	ands	r3, r2
 80029ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d003      	beq.n	8002a04 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a04:	4a1b      	ldr	r2, [pc, #108]	@ (8002a74 <HAL_GPIO_Init+0x300>)
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002a0a:	4b1a      	ldr	r3, [pc, #104]	@ (8002a74 <HAL_GPIO_Init+0x300>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	43db      	mvns	r3, r3
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	4013      	ands	r3, r2
 8002a18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d003      	beq.n	8002a2e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a2e:	4a11      	ldr	r2, [pc, #68]	@ (8002a74 <HAL_GPIO_Init+0x300>)
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	3301      	adds	r3, #1
 8002a38:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	fa22 f303 	lsr.w	r3, r2, r3
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f47f ae9d 	bne.w	8002784 <HAL_GPIO_Init+0x10>
  }
}
 8002a4a:	bf00      	nop
 8002a4c:	bf00      	nop
 8002a4e:	371c      	adds	r7, #28
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	40010000 	.word	0x40010000
 8002a60:	48000400 	.word	0x48000400
 8002a64:	48000800 	.word	0x48000800
 8002a68:	48000c00 	.word	0x48000c00
 8002a6c:	48001000 	.word	0x48001000
 8002a70:	48001400 	.word	0x48001400
 8002a74:	40010400 	.word	0x40010400

08002a78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	460b      	mov	r3, r1
 8002a82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	691a      	ldr	r2, [r3, #16]
 8002a88:	887b      	ldrh	r3, [r7, #2]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d002      	beq.n	8002a96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a90:	2301      	movs	r3, #1
 8002a92:	73fb      	strb	r3, [r7, #15]
 8002a94:	e001      	b.n	8002a9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a96:	2300      	movs	r3, #0
 8002a98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3714      	adds	r7, #20
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	807b      	strh	r3, [r7, #2]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ab8:	787b      	ldrb	r3, [r7, #1]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d003      	beq.n	8002ac6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002abe:	887a      	ldrh	r2, [r7, #2]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ac4:	e002      	b.n	8002acc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ac6:	887a      	ldrh	r2, [r7, #2]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d141      	bne.n	8002b6a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ae6:	4b4b      	ldr	r3, [pc, #300]	@ (8002c14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002aee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002af2:	d131      	bne.n	8002b58 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002af4:	4b47      	ldr	r3, [pc, #284]	@ (8002c14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002af6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002afa:	4a46      	ldr	r2, [pc, #280]	@ (8002c14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002afc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b00:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b04:	4b43      	ldr	r3, [pc, #268]	@ (8002c14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002b0c:	4a41      	ldr	r2, [pc, #260]	@ (8002c14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b12:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b14:	4b40      	ldr	r3, [pc, #256]	@ (8002c18 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2232      	movs	r2, #50	@ 0x32
 8002b1a:	fb02 f303 	mul.w	r3, r2, r3
 8002b1e:	4a3f      	ldr	r2, [pc, #252]	@ (8002c1c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002b20:	fba2 2303 	umull	r2, r3, r2, r3
 8002b24:	0c9b      	lsrs	r3, r3, #18
 8002b26:	3301      	adds	r3, #1
 8002b28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b2a:	e002      	b.n	8002b32 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b32:	4b38      	ldr	r3, [pc, #224]	@ (8002c14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b3e:	d102      	bne.n	8002b46 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1f2      	bne.n	8002b2c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b46:	4b33      	ldr	r3, [pc, #204]	@ (8002c14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b48:	695b      	ldr	r3, [r3, #20]
 8002b4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b52:	d158      	bne.n	8002c06 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e057      	b.n	8002c08 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b58:	4b2e      	ldr	r3, [pc, #184]	@ (8002c14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b5e:	4a2d      	ldr	r2, [pc, #180]	@ (8002c14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b64:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002b68:	e04d      	b.n	8002c06 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b70:	d141      	bne.n	8002bf6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b72:	4b28      	ldr	r3, [pc, #160]	@ (8002c14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002b7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b7e:	d131      	bne.n	8002be4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b80:	4b24      	ldr	r3, [pc, #144]	@ (8002c14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b86:	4a23      	ldr	r2, [pc, #140]	@ (8002c14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b8c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b90:	4b20      	ldr	r3, [pc, #128]	@ (8002c14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002b98:	4a1e      	ldr	r2, [pc, #120]	@ (8002c14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b9e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ba0:	4b1d      	ldr	r3, [pc, #116]	@ (8002c18 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2232      	movs	r2, #50	@ 0x32
 8002ba6:	fb02 f303 	mul.w	r3, r2, r3
 8002baa:	4a1c      	ldr	r2, [pc, #112]	@ (8002c1c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002bac:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb0:	0c9b      	lsrs	r3, r3, #18
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bb6:	e002      	b.n	8002bbe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bbe:	4b15      	ldr	r3, [pc, #84]	@ (8002c14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bca:	d102      	bne.n	8002bd2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1f2      	bne.n	8002bb8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002bd2:	4b10      	ldr	r3, [pc, #64]	@ (8002c14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bde:	d112      	bne.n	8002c06 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e011      	b.n	8002c08 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002be4:	4b0b      	ldr	r3, [pc, #44]	@ (8002c14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002be6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002bea:	4a0a      	ldr	r2, [pc, #40]	@ (8002c14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bf0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002bf4:	e007      	b.n	8002c06 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002bf6:	4b07      	ldr	r3, [pc, #28]	@ (8002c14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002bfe:	4a05      	ldr	r2, [pc, #20]	@ (8002c14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c00:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c04:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3714      	adds	r7, #20
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr
 8002c14:	40007000 	.word	0x40007000
 8002c18:	20000004 	.word	0x20000004
 8002c1c:	431bde83 	.word	0x431bde83

08002c20 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002c24:	4b05      	ldr	r3, [pc, #20]	@ (8002c3c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	4a04      	ldr	r2, [pc, #16]	@ (8002c3c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002c2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c2e:	6093      	str	r3, [r2, #8]
}
 8002c30:	bf00      	nop
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	40007000 	.word	0x40007000

08002c40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b088      	sub	sp, #32
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e2fe      	b.n	8003250 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d075      	beq.n	8002d4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c5e:	4b97      	ldr	r3, [pc, #604]	@ (8002ebc <HAL_RCC_OscConfig+0x27c>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 030c 	and.w	r3, r3, #12
 8002c66:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c68:	4b94      	ldr	r3, [pc, #592]	@ (8002ebc <HAL_RCC_OscConfig+0x27c>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	f003 0303 	and.w	r3, r3, #3
 8002c70:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	2b0c      	cmp	r3, #12
 8002c76:	d102      	bne.n	8002c7e <HAL_RCC_OscConfig+0x3e>
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	2b03      	cmp	r3, #3
 8002c7c:	d002      	beq.n	8002c84 <HAL_RCC_OscConfig+0x44>
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	2b08      	cmp	r3, #8
 8002c82:	d10b      	bne.n	8002c9c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c84:	4b8d      	ldr	r3, [pc, #564]	@ (8002ebc <HAL_RCC_OscConfig+0x27c>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d05b      	beq.n	8002d48 <HAL_RCC_OscConfig+0x108>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d157      	bne.n	8002d48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e2d9      	b.n	8003250 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ca4:	d106      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x74>
 8002ca6:	4b85      	ldr	r3, [pc, #532]	@ (8002ebc <HAL_RCC_OscConfig+0x27c>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a84      	ldr	r2, [pc, #528]	@ (8002ebc <HAL_RCC_OscConfig+0x27c>)
 8002cac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cb0:	6013      	str	r3, [r2, #0]
 8002cb2:	e01d      	b.n	8002cf0 <HAL_RCC_OscConfig+0xb0>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002cbc:	d10c      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x98>
 8002cbe:	4b7f      	ldr	r3, [pc, #508]	@ (8002ebc <HAL_RCC_OscConfig+0x27c>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a7e      	ldr	r2, [pc, #504]	@ (8002ebc <HAL_RCC_OscConfig+0x27c>)
 8002cc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cc8:	6013      	str	r3, [r2, #0]
 8002cca:	4b7c      	ldr	r3, [pc, #496]	@ (8002ebc <HAL_RCC_OscConfig+0x27c>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a7b      	ldr	r2, [pc, #492]	@ (8002ebc <HAL_RCC_OscConfig+0x27c>)
 8002cd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cd4:	6013      	str	r3, [r2, #0]
 8002cd6:	e00b      	b.n	8002cf0 <HAL_RCC_OscConfig+0xb0>
 8002cd8:	4b78      	ldr	r3, [pc, #480]	@ (8002ebc <HAL_RCC_OscConfig+0x27c>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a77      	ldr	r2, [pc, #476]	@ (8002ebc <HAL_RCC_OscConfig+0x27c>)
 8002cde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ce2:	6013      	str	r3, [r2, #0]
 8002ce4:	4b75      	ldr	r3, [pc, #468]	@ (8002ebc <HAL_RCC_OscConfig+0x27c>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a74      	ldr	r2, [pc, #464]	@ (8002ebc <HAL_RCC_OscConfig+0x27c>)
 8002cea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d013      	beq.n	8002d20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf8:	f7ff fb3e 	bl	8002378 <HAL_GetTick>
 8002cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cfe:	e008      	b.n	8002d12 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d00:	f7ff fb3a 	bl	8002378 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b64      	cmp	r3, #100	@ 0x64
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e29e      	b.n	8003250 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d12:	4b6a      	ldr	r3, [pc, #424]	@ (8002ebc <HAL_RCC_OscConfig+0x27c>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d0f0      	beq.n	8002d00 <HAL_RCC_OscConfig+0xc0>
 8002d1e:	e014      	b.n	8002d4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d20:	f7ff fb2a 	bl	8002378 <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d28:	f7ff fb26 	bl	8002378 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b64      	cmp	r3, #100	@ 0x64
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e28a      	b.n	8003250 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d3a:	4b60      	ldr	r3, [pc, #384]	@ (8002ebc <HAL_RCC_OscConfig+0x27c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1f0      	bne.n	8002d28 <HAL_RCC_OscConfig+0xe8>
 8002d46:	e000      	b.n	8002d4a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d075      	beq.n	8002e42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d56:	4b59      	ldr	r3, [pc, #356]	@ (8002ebc <HAL_RCC_OscConfig+0x27c>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f003 030c 	and.w	r3, r3, #12
 8002d5e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d60:	4b56      	ldr	r3, [pc, #344]	@ (8002ebc <HAL_RCC_OscConfig+0x27c>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	f003 0303 	and.w	r3, r3, #3
 8002d68:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	2b0c      	cmp	r3, #12
 8002d6e:	d102      	bne.n	8002d76 <HAL_RCC_OscConfig+0x136>
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d002      	beq.n	8002d7c <HAL_RCC_OscConfig+0x13c>
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	2b04      	cmp	r3, #4
 8002d7a:	d11f      	bne.n	8002dbc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d7c:	4b4f      	ldr	r3, [pc, #316]	@ (8002ebc <HAL_RCC_OscConfig+0x27c>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d005      	beq.n	8002d94 <HAL_RCC_OscConfig+0x154>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d101      	bne.n	8002d94 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e25d      	b.n	8003250 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d94:	4b49      	ldr	r3, [pc, #292]	@ (8002ebc <HAL_RCC_OscConfig+0x27c>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	061b      	lsls	r3, r3, #24
 8002da2:	4946      	ldr	r1, [pc, #280]	@ (8002ebc <HAL_RCC_OscConfig+0x27c>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002da8:	4b45      	ldr	r3, [pc, #276]	@ (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7ff fa97 	bl	80022e0 <HAL_InitTick>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d043      	beq.n	8002e40 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e249      	b.n	8003250 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d023      	beq.n	8002e0c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dc4:	4b3d      	ldr	r3, [pc, #244]	@ (8002ebc <HAL_RCC_OscConfig+0x27c>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a3c      	ldr	r2, [pc, #240]	@ (8002ebc <HAL_RCC_OscConfig+0x27c>)
 8002dca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd0:	f7ff fad2 	bl	8002378 <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dd8:	f7ff face 	bl	8002378 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e232      	b.n	8003250 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dea:	4b34      	ldr	r3, [pc, #208]	@ (8002ebc <HAL_RCC_OscConfig+0x27c>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d0f0      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df6:	4b31      	ldr	r3, [pc, #196]	@ (8002ebc <HAL_RCC_OscConfig+0x27c>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	061b      	lsls	r3, r3, #24
 8002e04:	492d      	ldr	r1, [pc, #180]	@ (8002ebc <HAL_RCC_OscConfig+0x27c>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	604b      	str	r3, [r1, #4]
 8002e0a:	e01a      	b.n	8002e42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e0c:	4b2b      	ldr	r3, [pc, #172]	@ (8002ebc <HAL_RCC_OscConfig+0x27c>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a2a      	ldr	r2, [pc, #168]	@ (8002ebc <HAL_RCC_OscConfig+0x27c>)
 8002e12:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e18:	f7ff faae 	bl	8002378 <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e20:	f7ff faaa 	bl	8002378 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e20e      	b.n	8003250 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e32:	4b22      	ldr	r3, [pc, #136]	@ (8002ebc <HAL_RCC_OscConfig+0x27c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1f0      	bne.n	8002e20 <HAL_RCC_OscConfig+0x1e0>
 8002e3e:	e000      	b.n	8002e42 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e40:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0308 	and.w	r3, r3, #8
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d041      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d01c      	beq.n	8002e90 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e56:	4b19      	ldr	r3, [pc, #100]	@ (8002ebc <HAL_RCC_OscConfig+0x27c>)
 8002e58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e5c:	4a17      	ldr	r2, [pc, #92]	@ (8002ebc <HAL_RCC_OscConfig+0x27c>)
 8002e5e:	f043 0301 	orr.w	r3, r3, #1
 8002e62:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e66:	f7ff fa87 	bl	8002378 <HAL_GetTick>
 8002e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e6c:	e008      	b.n	8002e80 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e6e:	f7ff fa83 	bl	8002378 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e1e7      	b.n	8003250 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e80:	4b0e      	ldr	r3, [pc, #56]	@ (8002ebc <HAL_RCC_OscConfig+0x27c>)
 8002e82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d0ef      	beq.n	8002e6e <HAL_RCC_OscConfig+0x22e>
 8002e8e:	e020      	b.n	8002ed2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e90:	4b0a      	ldr	r3, [pc, #40]	@ (8002ebc <HAL_RCC_OscConfig+0x27c>)
 8002e92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e96:	4a09      	ldr	r2, [pc, #36]	@ (8002ebc <HAL_RCC_OscConfig+0x27c>)
 8002e98:	f023 0301 	bic.w	r3, r3, #1
 8002e9c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea0:	f7ff fa6a 	bl	8002378 <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ea6:	e00d      	b.n	8002ec4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ea8:	f7ff fa66 	bl	8002378 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d906      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e1ca      	b.n	8003250 <HAL_RCC_OscConfig+0x610>
 8002eba:	bf00      	nop
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ec4:	4b8c      	ldr	r3, [pc, #560]	@ (80030f8 <HAL_RCC_OscConfig+0x4b8>)
 8002ec6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1ea      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0304 	and.w	r3, r3, #4
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f000 80a6 	beq.w	800302c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ee4:	4b84      	ldr	r3, [pc, #528]	@ (80030f8 <HAL_RCC_OscConfig+0x4b8>)
 8002ee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ee8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d101      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x2b4>
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e000      	b.n	8002ef6 <HAL_RCC_OscConfig+0x2b6>
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00d      	beq.n	8002f16 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002efa:	4b7f      	ldr	r3, [pc, #508]	@ (80030f8 <HAL_RCC_OscConfig+0x4b8>)
 8002efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002efe:	4a7e      	ldr	r2, [pc, #504]	@ (80030f8 <HAL_RCC_OscConfig+0x4b8>)
 8002f00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f04:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f06:	4b7c      	ldr	r3, [pc, #496]	@ (80030f8 <HAL_RCC_OscConfig+0x4b8>)
 8002f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f0e:	60fb      	str	r3, [r7, #12]
 8002f10:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002f12:	2301      	movs	r3, #1
 8002f14:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f16:	4b79      	ldr	r3, [pc, #484]	@ (80030fc <HAL_RCC_OscConfig+0x4bc>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d118      	bne.n	8002f54 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f22:	4b76      	ldr	r3, [pc, #472]	@ (80030fc <HAL_RCC_OscConfig+0x4bc>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a75      	ldr	r2, [pc, #468]	@ (80030fc <HAL_RCC_OscConfig+0x4bc>)
 8002f28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f2e:	f7ff fa23 	bl	8002378 <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f34:	e008      	b.n	8002f48 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f36:	f7ff fa1f 	bl	8002378 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e183      	b.n	8003250 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f48:	4b6c      	ldr	r3, [pc, #432]	@ (80030fc <HAL_RCC_OscConfig+0x4bc>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d0f0      	beq.n	8002f36 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d108      	bne.n	8002f6e <HAL_RCC_OscConfig+0x32e>
 8002f5c:	4b66      	ldr	r3, [pc, #408]	@ (80030f8 <HAL_RCC_OscConfig+0x4b8>)
 8002f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f62:	4a65      	ldr	r2, [pc, #404]	@ (80030f8 <HAL_RCC_OscConfig+0x4b8>)
 8002f64:	f043 0301 	orr.w	r3, r3, #1
 8002f68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f6c:	e024      	b.n	8002fb8 <HAL_RCC_OscConfig+0x378>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	2b05      	cmp	r3, #5
 8002f74:	d110      	bne.n	8002f98 <HAL_RCC_OscConfig+0x358>
 8002f76:	4b60      	ldr	r3, [pc, #384]	@ (80030f8 <HAL_RCC_OscConfig+0x4b8>)
 8002f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f7c:	4a5e      	ldr	r2, [pc, #376]	@ (80030f8 <HAL_RCC_OscConfig+0x4b8>)
 8002f7e:	f043 0304 	orr.w	r3, r3, #4
 8002f82:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f86:	4b5c      	ldr	r3, [pc, #368]	@ (80030f8 <HAL_RCC_OscConfig+0x4b8>)
 8002f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f8c:	4a5a      	ldr	r2, [pc, #360]	@ (80030f8 <HAL_RCC_OscConfig+0x4b8>)
 8002f8e:	f043 0301 	orr.w	r3, r3, #1
 8002f92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f96:	e00f      	b.n	8002fb8 <HAL_RCC_OscConfig+0x378>
 8002f98:	4b57      	ldr	r3, [pc, #348]	@ (80030f8 <HAL_RCC_OscConfig+0x4b8>)
 8002f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f9e:	4a56      	ldr	r2, [pc, #344]	@ (80030f8 <HAL_RCC_OscConfig+0x4b8>)
 8002fa0:	f023 0301 	bic.w	r3, r3, #1
 8002fa4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002fa8:	4b53      	ldr	r3, [pc, #332]	@ (80030f8 <HAL_RCC_OscConfig+0x4b8>)
 8002faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fae:	4a52      	ldr	r2, [pc, #328]	@ (80030f8 <HAL_RCC_OscConfig+0x4b8>)
 8002fb0:	f023 0304 	bic.w	r3, r3, #4
 8002fb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d016      	beq.n	8002fee <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc0:	f7ff f9da 	bl	8002378 <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fc6:	e00a      	b.n	8002fde <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fc8:	f7ff f9d6 	bl	8002378 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e138      	b.n	8003250 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fde:	4b46      	ldr	r3, [pc, #280]	@ (80030f8 <HAL_RCC_OscConfig+0x4b8>)
 8002fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d0ed      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x388>
 8002fec:	e015      	b.n	800301a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fee:	f7ff f9c3 	bl	8002378 <HAL_GetTick>
 8002ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ff4:	e00a      	b.n	800300c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ff6:	f7ff f9bf 	bl	8002378 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003004:	4293      	cmp	r3, r2
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e121      	b.n	8003250 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800300c:	4b3a      	ldr	r3, [pc, #232]	@ (80030f8 <HAL_RCC_OscConfig+0x4b8>)
 800300e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1ed      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800301a:	7ffb      	ldrb	r3, [r7, #31]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d105      	bne.n	800302c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003020:	4b35      	ldr	r3, [pc, #212]	@ (80030f8 <HAL_RCC_OscConfig+0x4b8>)
 8003022:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003024:	4a34      	ldr	r2, [pc, #208]	@ (80030f8 <HAL_RCC_OscConfig+0x4b8>)
 8003026:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800302a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0320 	and.w	r3, r3, #32
 8003034:	2b00      	cmp	r3, #0
 8003036:	d03c      	beq.n	80030b2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d01c      	beq.n	800307a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003040:	4b2d      	ldr	r3, [pc, #180]	@ (80030f8 <HAL_RCC_OscConfig+0x4b8>)
 8003042:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003046:	4a2c      	ldr	r2, [pc, #176]	@ (80030f8 <HAL_RCC_OscConfig+0x4b8>)
 8003048:	f043 0301 	orr.w	r3, r3, #1
 800304c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003050:	f7ff f992 	bl	8002378 <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003058:	f7ff f98e 	bl	8002378 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e0f2      	b.n	8003250 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800306a:	4b23      	ldr	r3, [pc, #140]	@ (80030f8 <HAL_RCC_OscConfig+0x4b8>)
 800306c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003070:	f003 0302 	and.w	r3, r3, #2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d0ef      	beq.n	8003058 <HAL_RCC_OscConfig+0x418>
 8003078:	e01b      	b.n	80030b2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800307a:	4b1f      	ldr	r3, [pc, #124]	@ (80030f8 <HAL_RCC_OscConfig+0x4b8>)
 800307c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003080:	4a1d      	ldr	r2, [pc, #116]	@ (80030f8 <HAL_RCC_OscConfig+0x4b8>)
 8003082:	f023 0301 	bic.w	r3, r3, #1
 8003086:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800308a:	f7ff f975 	bl	8002378 <HAL_GetTick>
 800308e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003090:	e008      	b.n	80030a4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003092:	f7ff f971 	bl	8002378 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d901      	bls.n	80030a4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e0d5      	b.n	8003250 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80030a4:	4b14      	ldr	r3, [pc, #80]	@ (80030f8 <HAL_RCC_OscConfig+0x4b8>)
 80030a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1ef      	bne.n	8003092 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	69db      	ldr	r3, [r3, #28]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f000 80c9 	beq.w	800324e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030bc:	4b0e      	ldr	r3, [pc, #56]	@ (80030f8 <HAL_RCC_OscConfig+0x4b8>)
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f003 030c 	and.w	r3, r3, #12
 80030c4:	2b0c      	cmp	r3, #12
 80030c6:	f000 8083 	beq.w	80031d0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d15e      	bne.n	8003190 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030d2:	4b09      	ldr	r3, [pc, #36]	@ (80030f8 <HAL_RCC_OscConfig+0x4b8>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a08      	ldr	r2, [pc, #32]	@ (80030f8 <HAL_RCC_OscConfig+0x4b8>)
 80030d8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030de:	f7ff f94b 	bl	8002378 <HAL_GetTick>
 80030e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030e4:	e00c      	b.n	8003100 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030e6:	f7ff f947 	bl	8002378 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d905      	bls.n	8003100 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e0ab      	b.n	8003250 <HAL_RCC_OscConfig+0x610>
 80030f8:	40021000 	.word	0x40021000
 80030fc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003100:	4b55      	ldr	r3, [pc, #340]	@ (8003258 <HAL_RCC_OscConfig+0x618>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1ec      	bne.n	80030e6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800310c:	4b52      	ldr	r3, [pc, #328]	@ (8003258 <HAL_RCC_OscConfig+0x618>)
 800310e:	68da      	ldr	r2, [r3, #12]
 8003110:	4b52      	ldr	r3, [pc, #328]	@ (800325c <HAL_RCC_OscConfig+0x61c>)
 8003112:	4013      	ands	r3, r2
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	6a11      	ldr	r1, [r2, #32]
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800311c:	3a01      	subs	r2, #1
 800311e:	0112      	lsls	r2, r2, #4
 8003120:	4311      	orrs	r1, r2
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003126:	0212      	lsls	r2, r2, #8
 8003128:	4311      	orrs	r1, r2
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800312e:	0852      	lsrs	r2, r2, #1
 8003130:	3a01      	subs	r2, #1
 8003132:	0552      	lsls	r2, r2, #21
 8003134:	4311      	orrs	r1, r2
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800313a:	0852      	lsrs	r2, r2, #1
 800313c:	3a01      	subs	r2, #1
 800313e:	0652      	lsls	r2, r2, #25
 8003140:	4311      	orrs	r1, r2
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003146:	06d2      	lsls	r2, r2, #27
 8003148:	430a      	orrs	r2, r1
 800314a:	4943      	ldr	r1, [pc, #268]	@ (8003258 <HAL_RCC_OscConfig+0x618>)
 800314c:	4313      	orrs	r3, r2
 800314e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003150:	4b41      	ldr	r3, [pc, #260]	@ (8003258 <HAL_RCC_OscConfig+0x618>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a40      	ldr	r2, [pc, #256]	@ (8003258 <HAL_RCC_OscConfig+0x618>)
 8003156:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800315a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800315c:	4b3e      	ldr	r3, [pc, #248]	@ (8003258 <HAL_RCC_OscConfig+0x618>)
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	4a3d      	ldr	r2, [pc, #244]	@ (8003258 <HAL_RCC_OscConfig+0x618>)
 8003162:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003166:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003168:	f7ff f906 	bl	8002378 <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003170:	f7ff f902 	bl	8002378 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e066      	b.n	8003250 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003182:	4b35      	ldr	r3, [pc, #212]	@ (8003258 <HAL_RCC_OscConfig+0x618>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d0f0      	beq.n	8003170 <HAL_RCC_OscConfig+0x530>
 800318e:	e05e      	b.n	800324e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003190:	4b31      	ldr	r3, [pc, #196]	@ (8003258 <HAL_RCC_OscConfig+0x618>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a30      	ldr	r2, [pc, #192]	@ (8003258 <HAL_RCC_OscConfig+0x618>)
 8003196:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800319a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800319c:	f7ff f8ec 	bl	8002378 <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031a2:	e008      	b.n	80031b6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031a4:	f7ff f8e8 	bl	8002378 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e04c      	b.n	8003250 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031b6:	4b28      	ldr	r3, [pc, #160]	@ (8003258 <HAL_RCC_OscConfig+0x618>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1f0      	bne.n	80031a4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80031c2:	4b25      	ldr	r3, [pc, #148]	@ (8003258 <HAL_RCC_OscConfig+0x618>)
 80031c4:	68da      	ldr	r2, [r3, #12]
 80031c6:	4924      	ldr	r1, [pc, #144]	@ (8003258 <HAL_RCC_OscConfig+0x618>)
 80031c8:	4b25      	ldr	r3, [pc, #148]	@ (8003260 <HAL_RCC_OscConfig+0x620>)
 80031ca:	4013      	ands	r3, r2
 80031cc:	60cb      	str	r3, [r1, #12]
 80031ce:	e03e      	b.n	800324e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	69db      	ldr	r3, [r3, #28]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d101      	bne.n	80031dc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e039      	b.n	8003250 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80031dc:	4b1e      	ldr	r3, [pc, #120]	@ (8003258 <HAL_RCC_OscConfig+0x618>)
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	f003 0203 	and.w	r2, r3, #3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d12c      	bne.n	800324a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fa:	3b01      	subs	r3, #1
 80031fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031fe:	429a      	cmp	r2, r3
 8003200:	d123      	bne.n	800324a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800320c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800320e:	429a      	cmp	r2, r3
 8003210:	d11b      	bne.n	800324a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800321c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800321e:	429a      	cmp	r2, r3
 8003220:	d113      	bne.n	800324a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800322c:	085b      	lsrs	r3, r3, #1
 800322e:	3b01      	subs	r3, #1
 8003230:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003232:	429a      	cmp	r2, r3
 8003234:	d109      	bne.n	800324a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003240:	085b      	lsrs	r3, r3, #1
 8003242:	3b01      	subs	r3, #1
 8003244:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003246:	429a      	cmp	r2, r3
 8003248:	d001      	beq.n	800324e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e000      	b.n	8003250 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3720      	adds	r7, #32
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	40021000 	.word	0x40021000
 800325c:	019f800c 	.word	0x019f800c
 8003260:	feeefffc 	.word	0xfeeefffc

08003264 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800326e:	2300      	movs	r3, #0
 8003270:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e11e      	b.n	80034ba <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800327c:	4b91      	ldr	r3, [pc, #580]	@ (80034c4 <HAL_RCC_ClockConfig+0x260>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 030f 	and.w	r3, r3, #15
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	429a      	cmp	r2, r3
 8003288:	d910      	bls.n	80032ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800328a:	4b8e      	ldr	r3, [pc, #568]	@ (80034c4 <HAL_RCC_ClockConfig+0x260>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f023 020f 	bic.w	r2, r3, #15
 8003292:	498c      	ldr	r1, [pc, #560]	@ (80034c4 <HAL_RCC_ClockConfig+0x260>)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	4313      	orrs	r3, r2
 8003298:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800329a:	4b8a      	ldr	r3, [pc, #552]	@ (80034c4 <HAL_RCC_ClockConfig+0x260>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 030f 	and.w	r3, r3, #15
 80032a2:	683a      	ldr	r2, [r7, #0]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d001      	beq.n	80032ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e106      	b.n	80034ba <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d073      	beq.n	80033a0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	2b03      	cmp	r3, #3
 80032be:	d129      	bne.n	8003314 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032c0:	4b81      	ldr	r3, [pc, #516]	@ (80034c8 <HAL_RCC_ClockConfig+0x264>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d101      	bne.n	80032d0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e0f4      	b.n	80034ba <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80032d0:	f000 f99e 	bl	8003610 <RCC_GetSysClockFreqFromPLLSource>
 80032d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	4a7c      	ldr	r2, [pc, #496]	@ (80034cc <HAL_RCC_ClockConfig+0x268>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d93f      	bls.n	800335e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80032de:	4b7a      	ldr	r3, [pc, #488]	@ (80034c8 <HAL_RCC_ClockConfig+0x264>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d009      	beq.n	80032fe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d033      	beq.n	800335e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d12f      	bne.n	800335e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80032fe:	4b72      	ldr	r3, [pc, #456]	@ (80034c8 <HAL_RCC_ClockConfig+0x264>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003306:	4a70      	ldr	r2, [pc, #448]	@ (80034c8 <HAL_RCC_ClockConfig+0x264>)
 8003308:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800330c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800330e:	2380      	movs	r3, #128	@ 0x80
 8003310:	617b      	str	r3, [r7, #20]
 8003312:	e024      	b.n	800335e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	2b02      	cmp	r3, #2
 800331a:	d107      	bne.n	800332c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800331c:	4b6a      	ldr	r3, [pc, #424]	@ (80034c8 <HAL_RCC_ClockConfig+0x264>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d109      	bne.n	800333c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e0c6      	b.n	80034ba <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800332c:	4b66      	ldr	r3, [pc, #408]	@ (80034c8 <HAL_RCC_ClockConfig+0x264>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e0be      	b.n	80034ba <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800333c:	f000 f8ce 	bl	80034dc <HAL_RCC_GetSysClockFreq>
 8003340:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	4a61      	ldr	r2, [pc, #388]	@ (80034cc <HAL_RCC_ClockConfig+0x268>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d909      	bls.n	800335e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800334a:	4b5f      	ldr	r3, [pc, #380]	@ (80034c8 <HAL_RCC_ClockConfig+0x264>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003352:	4a5d      	ldr	r2, [pc, #372]	@ (80034c8 <HAL_RCC_ClockConfig+0x264>)
 8003354:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003358:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800335a:	2380      	movs	r3, #128	@ 0x80
 800335c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800335e:	4b5a      	ldr	r3, [pc, #360]	@ (80034c8 <HAL_RCC_ClockConfig+0x264>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f023 0203 	bic.w	r2, r3, #3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	4957      	ldr	r1, [pc, #348]	@ (80034c8 <HAL_RCC_ClockConfig+0x264>)
 800336c:	4313      	orrs	r3, r2
 800336e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003370:	f7ff f802 	bl	8002378 <HAL_GetTick>
 8003374:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003376:	e00a      	b.n	800338e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003378:	f7fe fffe 	bl	8002378 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003386:	4293      	cmp	r3, r2
 8003388:	d901      	bls.n	800338e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e095      	b.n	80034ba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800338e:	4b4e      	ldr	r3, [pc, #312]	@ (80034c8 <HAL_RCC_ClockConfig+0x264>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 020c 	and.w	r2, r3, #12
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	429a      	cmp	r2, r3
 800339e:	d1eb      	bne.n	8003378 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0302 	and.w	r3, r3, #2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d023      	beq.n	80033f4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0304 	and.w	r3, r3, #4
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d005      	beq.n	80033c4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033b8:	4b43      	ldr	r3, [pc, #268]	@ (80034c8 <HAL_RCC_ClockConfig+0x264>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	4a42      	ldr	r2, [pc, #264]	@ (80034c8 <HAL_RCC_ClockConfig+0x264>)
 80033be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80033c2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0308 	and.w	r3, r3, #8
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d007      	beq.n	80033e0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80033d0:	4b3d      	ldr	r3, [pc, #244]	@ (80034c8 <HAL_RCC_ClockConfig+0x264>)
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80033d8:	4a3b      	ldr	r2, [pc, #236]	@ (80034c8 <HAL_RCC_ClockConfig+0x264>)
 80033da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80033de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033e0:	4b39      	ldr	r3, [pc, #228]	@ (80034c8 <HAL_RCC_ClockConfig+0x264>)
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	4936      	ldr	r1, [pc, #216]	@ (80034c8 <HAL_RCC_ClockConfig+0x264>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	608b      	str	r3, [r1, #8]
 80033f2:	e008      	b.n	8003406 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	2b80      	cmp	r3, #128	@ 0x80
 80033f8:	d105      	bne.n	8003406 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80033fa:	4b33      	ldr	r3, [pc, #204]	@ (80034c8 <HAL_RCC_ClockConfig+0x264>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	4a32      	ldr	r2, [pc, #200]	@ (80034c8 <HAL_RCC_ClockConfig+0x264>)
 8003400:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003404:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003406:	4b2f      	ldr	r3, [pc, #188]	@ (80034c4 <HAL_RCC_ClockConfig+0x260>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 030f 	and.w	r3, r3, #15
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	429a      	cmp	r2, r3
 8003412:	d21d      	bcs.n	8003450 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003414:	4b2b      	ldr	r3, [pc, #172]	@ (80034c4 <HAL_RCC_ClockConfig+0x260>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f023 020f 	bic.w	r2, r3, #15
 800341c:	4929      	ldr	r1, [pc, #164]	@ (80034c4 <HAL_RCC_ClockConfig+0x260>)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	4313      	orrs	r3, r2
 8003422:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003424:	f7fe ffa8 	bl	8002378 <HAL_GetTick>
 8003428:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800342a:	e00a      	b.n	8003442 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800342c:	f7fe ffa4 	bl	8002378 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	f241 3288 	movw	r2, #5000	@ 0x1388
 800343a:	4293      	cmp	r3, r2
 800343c:	d901      	bls.n	8003442 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e03b      	b.n	80034ba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003442:	4b20      	ldr	r3, [pc, #128]	@ (80034c4 <HAL_RCC_ClockConfig+0x260>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 030f 	and.w	r3, r3, #15
 800344a:	683a      	ldr	r2, [r7, #0]
 800344c:	429a      	cmp	r2, r3
 800344e:	d1ed      	bne.n	800342c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0304 	and.w	r3, r3, #4
 8003458:	2b00      	cmp	r3, #0
 800345a:	d008      	beq.n	800346e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800345c:	4b1a      	ldr	r3, [pc, #104]	@ (80034c8 <HAL_RCC_ClockConfig+0x264>)
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	4917      	ldr	r1, [pc, #92]	@ (80034c8 <HAL_RCC_ClockConfig+0x264>)
 800346a:	4313      	orrs	r3, r2
 800346c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0308 	and.w	r3, r3, #8
 8003476:	2b00      	cmp	r3, #0
 8003478:	d009      	beq.n	800348e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800347a:	4b13      	ldr	r3, [pc, #76]	@ (80034c8 <HAL_RCC_ClockConfig+0x264>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	490f      	ldr	r1, [pc, #60]	@ (80034c8 <HAL_RCC_ClockConfig+0x264>)
 800348a:	4313      	orrs	r3, r2
 800348c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800348e:	f000 f825 	bl	80034dc <HAL_RCC_GetSysClockFreq>
 8003492:	4602      	mov	r2, r0
 8003494:	4b0c      	ldr	r3, [pc, #48]	@ (80034c8 <HAL_RCC_ClockConfig+0x264>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	091b      	lsrs	r3, r3, #4
 800349a:	f003 030f 	and.w	r3, r3, #15
 800349e:	490c      	ldr	r1, [pc, #48]	@ (80034d0 <HAL_RCC_ClockConfig+0x26c>)
 80034a0:	5ccb      	ldrb	r3, [r1, r3]
 80034a2:	f003 031f 	and.w	r3, r3, #31
 80034a6:	fa22 f303 	lsr.w	r3, r2, r3
 80034aa:	4a0a      	ldr	r2, [pc, #40]	@ (80034d4 <HAL_RCC_ClockConfig+0x270>)
 80034ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80034ae:	4b0a      	ldr	r3, [pc, #40]	@ (80034d8 <HAL_RCC_ClockConfig+0x274>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7fe ff14 	bl	80022e0 <HAL_InitTick>
 80034b8:	4603      	mov	r3, r0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3718      	adds	r7, #24
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	40022000 	.word	0x40022000
 80034c8:	40021000 	.word	0x40021000
 80034cc:	04c4b400 	.word	0x04c4b400
 80034d0:	080097ac 	.word	0x080097ac
 80034d4:	20000004 	.word	0x20000004
 80034d8:	20000008 	.word	0x20000008

080034dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	b087      	sub	sp, #28
 80034e0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80034e2:	4b2c      	ldr	r3, [pc, #176]	@ (8003594 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f003 030c 	and.w	r3, r3, #12
 80034ea:	2b04      	cmp	r3, #4
 80034ec:	d102      	bne.n	80034f4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80034ee:	4b2a      	ldr	r3, [pc, #168]	@ (8003598 <HAL_RCC_GetSysClockFreq+0xbc>)
 80034f0:	613b      	str	r3, [r7, #16]
 80034f2:	e047      	b.n	8003584 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80034f4:	4b27      	ldr	r3, [pc, #156]	@ (8003594 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f003 030c 	and.w	r3, r3, #12
 80034fc:	2b08      	cmp	r3, #8
 80034fe:	d102      	bne.n	8003506 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003500:	4b26      	ldr	r3, [pc, #152]	@ (800359c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003502:	613b      	str	r3, [r7, #16]
 8003504:	e03e      	b.n	8003584 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003506:	4b23      	ldr	r3, [pc, #140]	@ (8003594 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f003 030c 	and.w	r3, r3, #12
 800350e:	2b0c      	cmp	r3, #12
 8003510:	d136      	bne.n	8003580 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003512:	4b20      	ldr	r3, [pc, #128]	@ (8003594 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	f003 0303 	and.w	r3, r3, #3
 800351a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800351c:	4b1d      	ldr	r3, [pc, #116]	@ (8003594 <HAL_RCC_GetSysClockFreq+0xb8>)
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	091b      	lsrs	r3, r3, #4
 8003522:	f003 030f 	and.w	r3, r3, #15
 8003526:	3301      	adds	r3, #1
 8003528:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2b03      	cmp	r3, #3
 800352e:	d10c      	bne.n	800354a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003530:	4a1a      	ldr	r2, [pc, #104]	@ (800359c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	fbb2 f3f3 	udiv	r3, r2, r3
 8003538:	4a16      	ldr	r2, [pc, #88]	@ (8003594 <HAL_RCC_GetSysClockFreq+0xb8>)
 800353a:	68d2      	ldr	r2, [r2, #12]
 800353c:	0a12      	lsrs	r2, r2, #8
 800353e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003542:	fb02 f303 	mul.w	r3, r2, r3
 8003546:	617b      	str	r3, [r7, #20]
      break;
 8003548:	e00c      	b.n	8003564 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800354a:	4a13      	ldr	r2, [pc, #76]	@ (8003598 <HAL_RCC_GetSysClockFreq+0xbc>)
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003552:	4a10      	ldr	r2, [pc, #64]	@ (8003594 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003554:	68d2      	ldr	r2, [r2, #12]
 8003556:	0a12      	lsrs	r2, r2, #8
 8003558:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800355c:	fb02 f303 	mul.w	r3, r2, r3
 8003560:	617b      	str	r3, [r7, #20]
      break;
 8003562:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003564:	4b0b      	ldr	r3, [pc, #44]	@ (8003594 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	0e5b      	lsrs	r3, r3, #25
 800356a:	f003 0303 	and.w	r3, r3, #3
 800356e:	3301      	adds	r3, #1
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003574:	697a      	ldr	r2, [r7, #20]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	fbb2 f3f3 	udiv	r3, r2, r3
 800357c:	613b      	str	r3, [r7, #16]
 800357e:	e001      	b.n	8003584 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003580:	2300      	movs	r3, #0
 8003582:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003584:	693b      	ldr	r3, [r7, #16]
}
 8003586:	4618      	mov	r0, r3
 8003588:	371c      	adds	r7, #28
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	40021000 	.word	0x40021000
 8003598:	00f42400 	.word	0x00f42400
 800359c:	016e3600 	.word	0x016e3600

080035a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035a0:	b480      	push	{r7}
 80035a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035a4:	4b03      	ldr	r3, [pc, #12]	@ (80035b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80035a6:	681b      	ldr	r3, [r3, #0]
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	20000004 	.word	0x20000004

080035b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80035bc:	f7ff fff0 	bl	80035a0 <HAL_RCC_GetHCLKFreq>
 80035c0:	4602      	mov	r2, r0
 80035c2:	4b06      	ldr	r3, [pc, #24]	@ (80035dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	0a1b      	lsrs	r3, r3, #8
 80035c8:	f003 0307 	and.w	r3, r3, #7
 80035cc:	4904      	ldr	r1, [pc, #16]	@ (80035e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80035ce:	5ccb      	ldrb	r3, [r1, r3]
 80035d0:	f003 031f 	and.w	r3, r3, #31
 80035d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035d8:	4618      	mov	r0, r3
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	40021000 	.word	0x40021000
 80035e0:	080097bc 	.word	0x080097bc

080035e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80035e8:	f7ff ffda 	bl	80035a0 <HAL_RCC_GetHCLKFreq>
 80035ec:	4602      	mov	r2, r0
 80035ee:	4b06      	ldr	r3, [pc, #24]	@ (8003608 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	0adb      	lsrs	r3, r3, #11
 80035f4:	f003 0307 	and.w	r3, r3, #7
 80035f8:	4904      	ldr	r1, [pc, #16]	@ (800360c <HAL_RCC_GetPCLK2Freq+0x28>)
 80035fa:	5ccb      	ldrb	r3, [r1, r3]
 80035fc:	f003 031f 	and.w	r3, r3, #31
 8003600:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003604:	4618      	mov	r0, r3
 8003606:	bd80      	pop	{r7, pc}
 8003608:	40021000 	.word	0x40021000
 800360c:	080097bc 	.word	0x080097bc

08003610 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003610:	b480      	push	{r7}
 8003612:	b087      	sub	sp, #28
 8003614:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003616:	4b1e      	ldr	r3, [pc, #120]	@ (8003690 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	f003 0303 	and.w	r3, r3, #3
 800361e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003620:	4b1b      	ldr	r3, [pc, #108]	@ (8003690 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	091b      	lsrs	r3, r3, #4
 8003626:	f003 030f 	and.w	r3, r3, #15
 800362a:	3301      	adds	r3, #1
 800362c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	2b03      	cmp	r3, #3
 8003632:	d10c      	bne.n	800364e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003634:	4a17      	ldr	r2, [pc, #92]	@ (8003694 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	fbb2 f3f3 	udiv	r3, r2, r3
 800363c:	4a14      	ldr	r2, [pc, #80]	@ (8003690 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800363e:	68d2      	ldr	r2, [r2, #12]
 8003640:	0a12      	lsrs	r2, r2, #8
 8003642:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003646:	fb02 f303 	mul.w	r3, r2, r3
 800364a:	617b      	str	r3, [r7, #20]
    break;
 800364c:	e00c      	b.n	8003668 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800364e:	4a12      	ldr	r2, [pc, #72]	@ (8003698 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	fbb2 f3f3 	udiv	r3, r2, r3
 8003656:	4a0e      	ldr	r2, [pc, #56]	@ (8003690 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003658:	68d2      	ldr	r2, [r2, #12]
 800365a:	0a12      	lsrs	r2, r2, #8
 800365c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003660:	fb02 f303 	mul.w	r3, r2, r3
 8003664:	617b      	str	r3, [r7, #20]
    break;
 8003666:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003668:	4b09      	ldr	r3, [pc, #36]	@ (8003690 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	0e5b      	lsrs	r3, r3, #25
 800366e:	f003 0303 	and.w	r3, r3, #3
 8003672:	3301      	adds	r3, #1
 8003674:	005b      	lsls	r3, r3, #1
 8003676:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003678:	697a      	ldr	r2, [r7, #20]
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003680:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003682:	687b      	ldr	r3, [r7, #4]
}
 8003684:	4618      	mov	r0, r3
 8003686:	371c      	adds	r7, #28
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr
 8003690:	40021000 	.word	0x40021000
 8003694:	016e3600 	.word	0x016e3600
 8003698:	00f42400 	.word	0x00f42400

0800369c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036a4:	2300      	movs	r3, #0
 80036a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036a8:	2300      	movs	r3, #0
 80036aa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 8098 	beq.w	80037ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036ba:	2300      	movs	r3, #0
 80036bc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036be:	4b43      	ldr	r3, [pc, #268]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10d      	bne.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036ca:	4b40      	ldr	r3, [pc, #256]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ce:	4a3f      	ldr	r2, [pc, #252]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80036d6:	4b3d      	ldr	r3, [pc, #244]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036de:	60bb      	str	r3, [r7, #8]
 80036e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036e2:	2301      	movs	r3, #1
 80036e4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036e6:	4b3a      	ldr	r3, [pc, #232]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a39      	ldr	r2, [pc, #228]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80036ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036f2:	f7fe fe41 	bl	8002378 <HAL_GetTick>
 80036f6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036f8:	e009      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036fa:	f7fe fe3d 	bl	8002378 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d902      	bls.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	74fb      	strb	r3, [r7, #19]
        break;
 800370c:	e005      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800370e:	4b30      	ldr	r3, [pc, #192]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003716:	2b00      	cmp	r3, #0
 8003718:	d0ef      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800371a:	7cfb      	ldrb	r3, [r7, #19]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d159      	bne.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003720:	4b2a      	ldr	r3, [pc, #168]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003722:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003726:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800372a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d01e      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	429a      	cmp	r2, r3
 800373a:	d019      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800373c:	4b23      	ldr	r3, [pc, #140]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800373e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003742:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003746:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003748:	4b20      	ldr	r3, [pc, #128]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800374a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800374e:	4a1f      	ldr	r2, [pc, #124]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003750:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003754:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003758:	4b1c      	ldr	r3, [pc, #112]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800375a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800375e:	4a1b      	ldr	r2, [pc, #108]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003760:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003764:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003768:	4a18      	ldr	r2, [pc, #96]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b00      	cmp	r3, #0
 8003778:	d016      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800377a:	f7fe fdfd 	bl	8002378 <HAL_GetTick>
 800377e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003780:	e00b      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003782:	f7fe fdf9 	bl	8002378 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003790:	4293      	cmp	r3, r2
 8003792:	d902      	bls.n	800379a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	74fb      	strb	r3, [r7, #19]
            break;
 8003798:	e006      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800379a:	4b0c      	ldr	r3, [pc, #48]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800379c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037a0:	f003 0302 	and.w	r3, r3, #2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d0ec      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80037a8:	7cfb      	ldrb	r3, [r7, #19]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d10b      	bne.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037ae:	4b07      	ldr	r3, [pc, #28]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037bc:	4903      	ldr	r1, [pc, #12]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80037c4:	e008      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037c6:	7cfb      	ldrb	r3, [r7, #19]
 80037c8:	74bb      	strb	r3, [r7, #18]
 80037ca:	e005      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80037cc:	40021000 	.word	0x40021000
 80037d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037d4:	7cfb      	ldrb	r3, [r7, #19]
 80037d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037d8:	7c7b      	ldrb	r3, [r7, #17]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d105      	bne.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037de:	4ba7      	ldr	r3, [pc, #668]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037e2:	4aa6      	ldr	r2, [pc, #664]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037e8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00a      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037f6:	4ba1      	ldr	r3, [pc, #644]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037fc:	f023 0203 	bic.w	r2, r3, #3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	499d      	ldr	r1, [pc, #628]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003806:	4313      	orrs	r3, r2
 8003808:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00a      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003818:	4b98      	ldr	r3, [pc, #608]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800381a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800381e:	f023 020c 	bic.w	r2, r3, #12
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	4995      	ldr	r1, [pc, #596]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003828:	4313      	orrs	r3, r2
 800382a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0304 	and.w	r3, r3, #4
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00a      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800383a:	4b90      	ldr	r3, [pc, #576]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800383c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003840:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	498c      	ldr	r1, [pc, #560]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800384a:	4313      	orrs	r3, r2
 800384c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0308 	and.w	r3, r3, #8
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00a      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800385c:	4b87      	ldr	r3, [pc, #540]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800385e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003862:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	4984      	ldr	r1, [pc, #528]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800386c:	4313      	orrs	r3, r2
 800386e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0310 	and.w	r3, r3, #16
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00a      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800387e:	4b7f      	ldr	r3, [pc, #508]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003880:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003884:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	497b      	ldr	r1, [pc, #492]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800388e:	4313      	orrs	r3, r2
 8003890:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0320 	and.w	r3, r3, #32
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00a      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80038a0:	4b76      	ldr	r3, [pc, #472]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038a6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	4973      	ldr	r1, [pc, #460]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00a      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038c2:	4b6e      	ldr	r3, [pc, #440]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038c8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	69db      	ldr	r3, [r3, #28]
 80038d0:	496a      	ldr	r1, [pc, #424]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d00a      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038e4:	4b65      	ldr	r3, [pc, #404]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038ea:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	4962      	ldr	r1, [pc, #392]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00a      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003906:	4b5d      	ldr	r3, [pc, #372]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003908:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800390c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003914:	4959      	ldr	r1, [pc, #356]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003916:	4313      	orrs	r3, r2
 8003918:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d00a      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003928:	4b54      	ldr	r3, [pc, #336]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800392a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800392e:	f023 0203 	bic.w	r2, r3, #3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003936:	4951      	ldr	r1, [pc, #324]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003938:	4313      	orrs	r3, r2
 800393a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00a      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800394a:	4b4c      	ldr	r3, [pc, #304]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800394c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003950:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003958:	4948      	ldr	r1, [pc, #288]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800395a:	4313      	orrs	r3, r2
 800395c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003968:	2b00      	cmp	r3, #0
 800396a:	d015      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800396c:	4b43      	ldr	r3, [pc, #268]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800396e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003972:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800397a:	4940      	ldr	r1, [pc, #256]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800397c:	4313      	orrs	r3, r2
 800397e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003986:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800398a:	d105      	bne.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800398c:	4b3b      	ldr	r3, [pc, #236]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	4a3a      	ldr	r2, [pc, #232]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003992:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003996:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d015      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80039a4:	4b35      	ldr	r3, [pc, #212]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039aa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039b2:	4932      	ldr	r1, [pc, #200]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039c2:	d105      	bne.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039c4:	4b2d      	ldr	r3, [pc, #180]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	4a2c      	ldr	r2, [pc, #176]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039ce:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d015      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80039dc:	4b27      	ldr	r3, [pc, #156]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039e2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ea:	4924      	ldr	r1, [pc, #144]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80039fa:	d105      	bne.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039fc:	4b1f      	ldr	r3, [pc, #124]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	4a1e      	ldr	r2, [pc, #120]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a06:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d015      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a14:	4b19      	ldr	r3, [pc, #100]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a1a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a22:	4916      	ldr	r1, [pc, #88]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a32:	d105      	bne.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a34:	4b11      	ldr	r3, [pc, #68]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	4a10      	ldr	r2, [pc, #64]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a3e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d019      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a52:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5a:	4908      	ldr	r1, [pc, #32]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a6a:	d109      	bne.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a6c:	4b03      	ldr	r3, [pc, #12]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	4a02      	ldr	r2, [pc, #8]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a76:	60d3      	str	r3, [r2, #12]
 8003a78:	e002      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003a7a:	bf00      	nop
 8003a7c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d015      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003a8c:	4b29      	ldr	r3, [pc, #164]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a92:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a9a:	4926      	ldr	r1, [pc, #152]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aa6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003aaa:	d105      	bne.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003aac:	4b21      	ldr	r3, [pc, #132]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	4a20      	ldr	r2, [pc, #128]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ab2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ab6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d015      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003ac4:	4b1b      	ldr	r3, [pc, #108]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aca:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ad2:	4918      	ldr	r1, [pc, #96]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ade:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ae2:	d105      	bne.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003ae4:	4b13      	ldr	r3, [pc, #76]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	4a12      	ldr	r2, [pc, #72]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003aea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003aee:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d015      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003afc:	4b0d      	ldr	r3, [pc, #52]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003afe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003b02:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b0a:	490a      	ldr	r1, [pc, #40]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b16:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b1a:	d105      	bne.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b1c:	4b05      	ldr	r3, [pc, #20]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	4a04      	ldr	r2, [pc, #16]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b26:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003b28:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3718      	adds	r7, #24
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	40021000 	.word	0x40021000

08003b38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e09d      	b.n	8003c86 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d108      	bne.n	8003b64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b5a:	d009      	beq.n	8003b70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	61da      	str	r2, [r3, #28]
 8003b62:	e005      	b.n	8003b70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d106      	bne.n	8003b90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f7fe f84c 	bl	8001c28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2202      	movs	r2, #2
 8003b94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ba6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003bb0:	d902      	bls.n	8003bb8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	60fb      	str	r3, [r7, #12]
 8003bb6:	e002      	b.n	8003bbe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003bb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003bbc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003bc6:	d007      	beq.n	8003bd8 <HAL_SPI_Init+0xa0>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003bd0:	d002      	beq.n	8003bd8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003be8:	431a      	orrs	r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	695b      	ldr	r3, [r3, #20]
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	431a      	orrs	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c06:	431a      	orrs	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	69db      	ldr	r3, [r3, #28]
 8003c0c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c10:	431a      	orrs	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c1a:	ea42 0103 	orr.w	r1, r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c22:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	0c1b      	lsrs	r3, r3, #16
 8003c34:	f003 0204 	and.w	r2, r3, #4
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3c:	f003 0310 	and.w	r3, r3, #16
 8003c40:	431a      	orrs	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c46:	f003 0308 	and.w	r3, r3, #8
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003c54:	ea42 0103 	orr.w	r1, r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	430a      	orrs	r2, r1
 8003c64:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	69da      	ldr	r2, [r3, #28]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c74:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b088      	sub	sp, #32
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	60f8      	str	r0, [r7, #12]
 8003c96:	60b9      	str	r1, [r7, #8]
 8003c98:	603b      	str	r3, [r7, #0]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d101      	bne.n	8003cb0 <HAL_SPI_Transmit+0x22>
 8003cac:	2302      	movs	r3, #2
 8003cae:	e15f      	b.n	8003f70 <HAL_SPI_Transmit+0x2e2>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cb8:	f7fe fb5e 	bl	8002378 <HAL_GetTick>
 8003cbc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003cbe:	88fb      	ldrh	r3, [r7, #6]
 8003cc0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d002      	beq.n	8003cd4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003cce:	2302      	movs	r3, #2
 8003cd0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003cd2:	e148      	b.n	8003f66 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d002      	beq.n	8003ce0 <HAL_SPI_Transmit+0x52>
 8003cda:	88fb      	ldrh	r3, [r7, #6]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d102      	bne.n	8003ce6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ce4:	e13f      	b.n	8003f66 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2203      	movs	r2, #3
 8003cea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	68ba      	ldr	r2, [r7, #8]
 8003cf8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	88fa      	ldrh	r2, [r7, #6]
 8003cfe:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	88fa      	ldrh	r2, [r7, #6]
 8003d04:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d30:	d10f      	bne.n	8003d52 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d40:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d50:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d5c:	2b40      	cmp	r3, #64	@ 0x40
 8003d5e:	d007      	beq.n	8003d70 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003d78:	d94f      	bls.n	8003e1a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d002      	beq.n	8003d88 <HAL_SPI_Transmit+0xfa>
 8003d82:	8afb      	ldrh	r3, [r7, #22]
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d142      	bne.n	8003e0e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d8c:	881a      	ldrh	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d98:	1c9a      	adds	r2, r3, #2
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	3b01      	subs	r3, #1
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003dac:	e02f      	b.n	8003e0e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d112      	bne.n	8003de2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dc0:	881a      	ldrh	r2, [r3, #0]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dcc:	1c9a      	adds	r2, r3, #2
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003de0:	e015      	b.n	8003e0e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003de2:	f7fe fac9 	bl	8002378 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	683a      	ldr	r2, [r7, #0]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d803      	bhi.n	8003dfa <HAL_SPI_Transmit+0x16c>
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df8:	d102      	bne.n	8003e00 <HAL_SPI_Transmit+0x172>
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d106      	bne.n	8003e0e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003e0c:	e0ab      	b.n	8003f66 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1ca      	bne.n	8003dae <HAL_SPI_Transmit+0x120>
 8003e18:	e080      	b.n	8003f1c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d002      	beq.n	8003e28 <HAL_SPI_Transmit+0x19a>
 8003e22:	8afb      	ldrh	r3, [r7, #22]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d174      	bne.n	8003f12 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d912      	bls.n	8003e58 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e36:	881a      	ldrh	r2, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e42:	1c9a      	adds	r2, r3, #2
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	3b02      	subs	r3, #2
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003e56:	e05c      	b.n	8003f12 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	330c      	adds	r3, #12
 8003e62:	7812      	ldrb	r2, [r2, #0]
 8003e64:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e6a:	1c5a      	adds	r2, r3, #1
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	3b01      	subs	r3, #1
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003e7e:	e048      	b.n	8003f12 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d12b      	bne.n	8003ee6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d912      	bls.n	8003ebe <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e9c:	881a      	ldrh	r2, [r3, #0]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ea8:	1c9a      	adds	r2, r3, #2
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	3b02      	subs	r3, #2
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003ebc:	e029      	b.n	8003f12 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	330c      	adds	r3, #12
 8003ec8:	7812      	ldrb	r2, [r2, #0]
 8003eca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ed0:	1c5a      	adds	r2, r3, #1
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	3b01      	subs	r3, #1
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003ee4:	e015      	b.n	8003f12 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ee6:	f7fe fa47 	bl	8002378 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	683a      	ldr	r2, [r7, #0]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d803      	bhi.n	8003efe <HAL_SPI_Transmit+0x270>
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003efc:	d102      	bne.n	8003f04 <HAL_SPI_Transmit+0x276>
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d106      	bne.n	8003f12 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003f10:	e029      	b.n	8003f66 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1b1      	bne.n	8003e80 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	6839      	ldr	r1, [r7, #0]
 8003f20:	68f8      	ldr	r0, [r7, #12]
 8003f22:	f000 fe0d 	bl	8004b40 <SPI_EndRxTxTransaction>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d002      	beq.n	8003f32 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2220      	movs	r2, #32
 8003f30:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d10a      	bne.n	8003f50 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	613b      	str	r3, [r7, #16]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	613b      	str	r3, [r7, #16]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	613b      	str	r3, [r7, #16]
 8003f4e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d002      	beq.n	8003f5e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	77fb      	strb	r3, [r7, #31]
 8003f5c:	e003      	b.n	8003f66 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003f6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3720      	adds	r7, #32
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b088      	sub	sp, #32
 8003f7c:	af02      	add	r7, sp, #8
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	603b      	str	r3, [r7, #0]
 8003f84:	4613      	mov	r3, r2
 8003f86:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d002      	beq.n	8003f9e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003f98:	2302      	movs	r3, #2
 8003f9a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f9c:	e11a      	b.n	80041d4 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003fa6:	d112      	bne.n	8003fce <HAL_SPI_Receive+0x56>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d10e      	bne.n	8003fce <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2204      	movs	r2, #4
 8003fb4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003fb8:	88fa      	ldrh	r2, [r7, #6]
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	68ba      	ldr	r2, [r7, #8]
 8003fc2:	68b9      	ldr	r1, [r7, #8]
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f000 f90e 	bl	80041e6 <HAL_SPI_TransmitReceive>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	e107      	b.n	80041de <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d101      	bne.n	8003fdc <HAL_SPI_Receive+0x64>
 8003fd8:	2302      	movs	r3, #2
 8003fda:	e100      	b.n	80041de <HAL_SPI_Receive+0x266>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fe4:	f7fe f9c8 	bl	8002378 <HAL_GetTick>
 8003fe8:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d002      	beq.n	8003ff6 <HAL_SPI_Receive+0x7e>
 8003ff0:	88fb      	ldrh	r3, [r7, #6]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d102      	bne.n	8003ffc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ffa:	e0eb      	b.n	80041d4 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2204      	movs	r2, #4
 8004000:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	68ba      	ldr	r2, [r7, #8]
 800400e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	88fa      	ldrh	r2, [r7, #6]
 8004014:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	88fa      	ldrh	r2, [r7, #6]
 800401c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004046:	d908      	bls.n	800405a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004056:	605a      	str	r2, [r3, #4]
 8004058:	e007      	b.n	800406a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	685a      	ldr	r2, [r3, #4]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004068:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004072:	d10f      	bne.n	8004094 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004082:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004092:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800409e:	2b40      	cmp	r3, #64	@ 0x40
 80040a0:	d007      	beq.n	80040b2 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80040b0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80040ba:	d86f      	bhi.n	800419c <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80040bc:	e034      	b.n	8004128 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d117      	bne.n	80040fc <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f103 020c 	add.w	r2, r3, #12
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d8:	7812      	ldrb	r2, [r2, #0]
 80040da:	b2d2      	uxtb	r2, r2
 80040dc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e2:	1c5a      	adds	r2, r3, #1
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	3b01      	subs	r3, #1
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80040fa:	e015      	b.n	8004128 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040fc:	f7fe f93c 	bl	8002378 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	683a      	ldr	r2, [r7, #0]
 8004108:	429a      	cmp	r2, r3
 800410a:	d803      	bhi.n	8004114 <HAL_SPI_Receive+0x19c>
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004112:	d102      	bne.n	800411a <HAL_SPI_Receive+0x1a2>
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d106      	bne.n	8004128 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004126:	e055      	b.n	80041d4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800412e:	b29b      	uxth	r3, r3
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1c4      	bne.n	80040be <HAL_SPI_Receive+0x146>
 8004134:	e038      	b.n	80041a8 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f003 0301 	and.w	r3, r3, #1
 8004140:	2b01      	cmp	r3, #1
 8004142:	d115      	bne.n	8004170 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68da      	ldr	r2, [r3, #12]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800414e:	b292      	uxth	r2, r2
 8004150:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004156:	1c9a      	adds	r2, r3, #2
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004162:	b29b      	uxth	r3, r3
 8004164:	3b01      	subs	r3, #1
 8004166:	b29a      	uxth	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800416e:	e015      	b.n	800419c <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004170:	f7fe f902 	bl	8002378 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	429a      	cmp	r2, r3
 800417e:	d803      	bhi.n	8004188 <HAL_SPI_Receive+0x210>
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004186:	d102      	bne.n	800418e <HAL_SPI_Receive+0x216>
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d106      	bne.n	800419c <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2201      	movs	r2, #1
 8004196:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800419a:	e01b      	b.n	80041d4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1c6      	bne.n	8004136 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	6839      	ldr	r1, [r7, #0]
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	f000 fc6f 	bl	8004a90 <SPI_EndRxTransaction>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d002      	beq.n	80041be <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2220      	movs	r2, #32
 80041bc:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d002      	beq.n	80041cc <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	75fb      	strb	r3, [r7, #23]
 80041ca:	e003      	b.n	80041d4 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80041dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3718      	adds	r7, #24
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b08a      	sub	sp, #40	@ 0x28
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	60f8      	str	r0, [r7, #12]
 80041ee:	60b9      	str	r1, [r7, #8]
 80041f0:	607a      	str	r2, [r7, #4]
 80041f2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80041f4:	2301      	movs	r3, #1
 80041f6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80041f8:	2300      	movs	r3, #0
 80041fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004204:	2b01      	cmp	r3, #1
 8004206:	d101      	bne.n	800420c <HAL_SPI_TransmitReceive+0x26>
 8004208:	2302      	movs	r3, #2
 800420a:	e20a      	b.n	8004622 <HAL_SPI_TransmitReceive+0x43c>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004214:	f7fe f8b0 	bl	8002378 <HAL_GetTick>
 8004218:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004220:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004228:	887b      	ldrh	r3, [r7, #2]
 800422a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800422c:	887b      	ldrh	r3, [r7, #2]
 800422e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004230:	7efb      	ldrb	r3, [r7, #27]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d00e      	beq.n	8004254 <HAL_SPI_TransmitReceive+0x6e>
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800423c:	d106      	bne.n	800424c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d102      	bne.n	800424c <HAL_SPI_TransmitReceive+0x66>
 8004246:	7efb      	ldrb	r3, [r7, #27]
 8004248:	2b04      	cmp	r3, #4
 800424a:	d003      	beq.n	8004254 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800424c:	2302      	movs	r3, #2
 800424e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8004252:	e1e0      	b.n	8004616 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d005      	beq.n	8004266 <HAL_SPI_TransmitReceive+0x80>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d002      	beq.n	8004266 <HAL_SPI_TransmitReceive+0x80>
 8004260:	887b      	ldrh	r3, [r7, #2]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d103      	bne.n	800426e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800426c:	e1d3      	b.n	8004616 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b04      	cmp	r3, #4
 8004278:	d003      	beq.n	8004282 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2205      	movs	r2, #5
 800427e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	887a      	ldrh	r2, [r7, #2]
 8004292:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	887a      	ldrh	r2, [r7, #2]
 800429a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	68ba      	ldr	r2, [r7, #8]
 80042a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	887a      	ldrh	r2, [r7, #2]
 80042a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	887a      	ldrh	r2, [r7, #2]
 80042ae:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80042c4:	d802      	bhi.n	80042cc <HAL_SPI_TransmitReceive+0xe6>
 80042c6:	8a3b      	ldrh	r3, [r7, #16]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d908      	bls.n	80042de <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	685a      	ldr	r2, [r3, #4]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80042da:	605a      	str	r2, [r3, #4]
 80042dc:	e007      	b.n	80042ee <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	685a      	ldr	r2, [r3, #4]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80042ec:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042f8:	2b40      	cmp	r3, #64	@ 0x40
 80042fa:	d007      	beq.n	800430c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800430a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004314:	f240 8081 	bls.w	800441a <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d002      	beq.n	8004326 <HAL_SPI_TransmitReceive+0x140>
 8004320:	8a7b      	ldrh	r3, [r7, #18]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d16d      	bne.n	8004402 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800432a:	881a      	ldrh	r2, [r3, #0]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004336:	1c9a      	adds	r2, r3, #2
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004340:	b29b      	uxth	r3, r3
 8004342:	3b01      	subs	r3, #1
 8004344:	b29a      	uxth	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800434a:	e05a      	b.n	8004402 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f003 0302 	and.w	r3, r3, #2
 8004356:	2b02      	cmp	r3, #2
 8004358:	d11b      	bne.n	8004392 <HAL_SPI_TransmitReceive+0x1ac>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800435e:	b29b      	uxth	r3, r3
 8004360:	2b00      	cmp	r3, #0
 8004362:	d016      	beq.n	8004392 <HAL_SPI_TransmitReceive+0x1ac>
 8004364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004366:	2b01      	cmp	r3, #1
 8004368:	d113      	bne.n	8004392 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800436e:	881a      	ldrh	r2, [r3, #0]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800437a:	1c9a      	adds	r2, r3, #2
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004384:	b29b      	uxth	r3, r3
 8004386:	3b01      	subs	r3, #1
 8004388:	b29a      	uxth	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800438e:	2300      	movs	r3, #0
 8004390:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f003 0301 	and.w	r3, r3, #1
 800439c:	2b01      	cmp	r3, #1
 800439e:	d11c      	bne.n	80043da <HAL_SPI_TransmitReceive+0x1f4>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d016      	beq.n	80043da <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68da      	ldr	r2, [r3, #12]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b6:	b292      	uxth	r2, r2
 80043b8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043be:	1c9a      	adds	r2, r3, #2
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	3b01      	subs	r3, #1
 80043ce:	b29a      	uxth	r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80043d6:	2301      	movs	r3, #1
 80043d8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80043da:	f7fd ffcd 	bl	8002378 <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d80b      	bhi.n	8004402 <HAL_SPI_TransmitReceive+0x21c>
 80043ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f0:	d007      	beq.n	8004402 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8004400:	e109      	b.n	8004616 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004406:	b29b      	uxth	r3, r3
 8004408:	2b00      	cmp	r3, #0
 800440a:	d19f      	bne.n	800434c <HAL_SPI_TransmitReceive+0x166>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004412:	b29b      	uxth	r3, r3
 8004414:	2b00      	cmp	r3, #0
 8004416:	d199      	bne.n	800434c <HAL_SPI_TransmitReceive+0x166>
 8004418:	e0e3      	b.n	80045e2 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <HAL_SPI_TransmitReceive+0x244>
 8004422:	8a7b      	ldrh	r3, [r7, #18]
 8004424:	2b01      	cmp	r3, #1
 8004426:	f040 80cf 	bne.w	80045c8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800442e:	b29b      	uxth	r3, r3
 8004430:	2b01      	cmp	r3, #1
 8004432:	d912      	bls.n	800445a <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004438:	881a      	ldrh	r2, [r3, #0]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004444:	1c9a      	adds	r2, r3, #2
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800444e:	b29b      	uxth	r3, r3
 8004450:	3b02      	subs	r3, #2
 8004452:	b29a      	uxth	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004458:	e0b6      	b.n	80045c8 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	330c      	adds	r3, #12
 8004464:	7812      	ldrb	r2, [r2, #0]
 8004466:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800446c:	1c5a      	adds	r2, r3, #1
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004476:	b29b      	uxth	r3, r3
 8004478:	3b01      	subs	r3, #1
 800447a:	b29a      	uxth	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004480:	e0a2      	b.n	80045c8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b02      	cmp	r3, #2
 800448e:	d134      	bne.n	80044fa <HAL_SPI_TransmitReceive+0x314>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004494:	b29b      	uxth	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d02f      	beq.n	80044fa <HAL_SPI_TransmitReceive+0x314>
 800449a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800449c:	2b01      	cmp	r3, #1
 800449e:	d12c      	bne.n	80044fa <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d912      	bls.n	80044d0 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ae:	881a      	ldrh	r2, [r3, #0]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ba:	1c9a      	adds	r2, r3, #2
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	3b02      	subs	r3, #2
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80044ce:	e012      	b.n	80044f6 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	330c      	adds	r3, #12
 80044da:	7812      	ldrb	r2, [r2, #0]
 80044dc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044e2:	1c5a      	adds	r2, r3, #1
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	3b01      	subs	r3, #1
 80044f0:	b29a      	uxth	r2, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80044f6:	2300      	movs	r3, #0
 80044f8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f003 0301 	and.w	r3, r3, #1
 8004504:	2b01      	cmp	r3, #1
 8004506:	d148      	bne.n	800459a <HAL_SPI_TransmitReceive+0x3b4>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800450e:	b29b      	uxth	r3, r3
 8004510:	2b00      	cmp	r3, #0
 8004512:	d042      	beq.n	800459a <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800451a:	b29b      	uxth	r3, r3
 800451c:	2b01      	cmp	r3, #1
 800451e:	d923      	bls.n	8004568 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68da      	ldr	r2, [r3, #12]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800452a:	b292      	uxth	r2, r2
 800452c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004532:	1c9a      	adds	r2, r3, #2
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800453e:	b29b      	uxth	r3, r3
 8004540:	3b02      	subs	r3, #2
 8004542:	b29a      	uxth	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004550:	b29b      	uxth	r3, r3
 8004552:	2b01      	cmp	r3, #1
 8004554:	d81f      	bhi.n	8004596 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	685a      	ldr	r2, [r3, #4]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004564:	605a      	str	r2, [r3, #4]
 8004566:	e016      	b.n	8004596 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f103 020c 	add.w	r2, r3, #12
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004574:	7812      	ldrb	r2, [r2, #0]
 8004576:	b2d2      	uxtb	r2, r2
 8004578:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800457e:	1c5a      	adds	r2, r3, #1
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800458a:	b29b      	uxth	r3, r3
 800458c:	3b01      	subs	r3, #1
 800458e:	b29a      	uxth	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004596:	2301      	movs	r3, #1
 8004598:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800459a:	f7fd feed 	bl	8002378 <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d803      	bhi.n	80045b2 <HAL_SPI_TransmitReceive+0x3cc>
 80045aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b0:	d102      	bne.n	80045b8 <HAL_SPI_TransmitReceive+0x3d2>
 80045b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d107      	bne.n	80045c8 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2201      	movs	r2, #1
 80045c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80045c6:	e026      	b.n	8004616 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f47f af57 	bne.w	8004482 <HAL_SPI_TransmitReceive+0x29c>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80045da:	b29b      	uxth	r3, r3
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f47f af50 	bne.w	8004482 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045e2:	69fa      	ldr	r2, [r7, #28]
 80045e4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f000 faaa 	bl	8004b40 <SPI_EndRxTxTransaction>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d005      	beq.n	80045fe <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2220      	movs	r2, #32
 80045fc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004602:	2b00      	cmp	r3, #0
 8004604:	d003      	beq.n	800460e <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800460c:	e003      	b.n	8004616 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800461e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8004622:	4618      	mov	r0, r3
 8004624:	3728      	adds	r7, #40	@ 0x28
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
	...

0800462c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b088      	sub	sp, #32
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800464a:	2b00      	cmp	r3, #0
 800464c:	d10e      	bne.n	800466c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004654:	2b00      	cmp	r3, #0
 8004656:	d009      	beq.n	800466c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800465e:	2b00      	cmp	r3, #0
 8004660:	d004      	beq.n	800466c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	4798      	blx	r3
    return;
 800466a:	e0ce      	b.n	800480a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d009      	beq.n	800468a <HAL_SPI_IRQHandler+0x5e>
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800467c:	2b00      	cmp	r3, #0
 800467e:	d004      	beq.n	800468a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	4798      	blx	r3
    return;
 8004688:	e0bf      	b.n	800480a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	f003 0320 	and.w	r3, r3, #32
 8004690:	2b00      	cmp	r3, #0
 8004692:	d10a      	bne.n	80046aa <HAL_SPI_IRQHandler+0x7e>
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800469a:	2b00      	cmp	r3, #0
 800469c:	d105      	bne.n	80046aa <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	f000 80b0 	beq.w	800480a <HAL_SPI_IRQHandler+0x1de>
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	f003 0320 	and.w	r3, r3, #32
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f000 80aa 	beq.w	800480a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d023      	beq.n	8004708 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	2b03      	cmp	r3, #3
 80046ca:	d011      	beq.n	80046f0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046d0:	f043 0204 	orr.w	r2, r3, #4
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046d8:	2300      	movs	r3, #0
 80046da:	617b      	str	r3, [r7, #20]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	617b      	str	r3, [r7, #20]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	617b      	str	r3, [r7, #20]
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	e00b      	b.n	8004708 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046f0:	2300      	movs	r3, #0
 80046f2:	613b      	str	r3, [r7, #16]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	613b      	str	r3, [r7, #16]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	613b      	str	r3, [r7, #16]
 8004704:	693b      	ldr	r3, [r7, #16]
        return;
 8004706:	e080      	b.n	800480a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	f003 0320 	and.w	r3, r3, #32
 800470e:	2b00      	cmp	r3, #0
 8004710:	d014      	beq.n	800473c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004716:	f043 0201 	orr.w	r2, r3, #1
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800471e:	2300      	movs	r3, #0
 8004720:	60fb      	str	r3, [r7, #12]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	60fb      	str	r3, [r7, #12]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004738:	601a      	str	r2, [r3, #0]
 800473a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00c      	beq.n	8004760 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800474a:	f043 0208 	orr.w	r2, r3, #8
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004752:	2300      	movs	r3, #0
 8004754:	60bb      	str	r3, [r7, #8]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	60bb      	str	r3, [r7, #8]
 800475e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004764:	2b00      	cmp	r3, #0
 8004766:	d04f      	beq.n	8004808 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	685a      	ldr	r2, [r3, #4]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004776:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d104      	bne.n	8004794 <HAL_SPI_IRQHandler+0x168>
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	f003 0301 	and.w	r3, r3, #1
 8004790:	2b00      	cmp	r3, #0
 8004792:	d034      	beq.n	80047fe <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685a      	ldr	r2, [r3, #4]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f022 0203 	bic.w	r2, r2, #3
 80047a2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d011      	beq.n	80047d0 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047b0:	4a17      	ldr	r2, [pc, #92]	@ (8004810 <HAL_SPI_IRQHandler+0x1e4>)
 80047b2:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7fd ff73 	bl	80026a4 <HAL_DMA_Abort_IT>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d005      	beq.n	80047d0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047c8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d016      	beq.n	8004806 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047dc:	4a0c      	ldr	r2, [pc, #48]	@ (8004810 <HAL_SPI_IRQHandler+0x1e4>)
 80047de:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047e4:	4618      	mov	r0, r3
 80047e6:	f7fd ff5d 	bl	80026a4 <HAL_DMA_Abort_IT>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00a      	beq.n	8004806 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047f4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80047fc:	e003      	b.n	8004806 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 f808 	bl	8004814 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004804:	e000      	b.n	8004808 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8004806:	bf00      	nop
    return;
 8004808:	bf00      	nop
  }
}
 800480a:	3720      	adds	r7, #32
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	08004829 	.word	0x08004829

08004814 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800481c:	bf00      	nop
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004834:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004844:	68f8      	ldr	r0, [r7, #12]
 8004846:	f7ff ffe5 	bl	8004814 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800484a:	bf00      	nop
 800484c:	3710      	adds	r7, #16
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
	...

08004854 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b088      	sub	sp, #32
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	603b      	str	r3, [r7, #0]
 8004860:	4613      	mov	r3, r2
 8004862:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004864:	f7fd fd88 	bl	8002378 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800486c:	1a9b      	subs	r3, r3, r2
 800486e:	683a      	ldr	r2, [r7, #0]
 8004870:	4413      	add	r3, r2
 8004872:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004874:	f7fd fd80 	bl	8002378 <HAL_GetTick>
 8004878:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800487a:	4b39      	ldr	r3, [pc, #228]	@ (8004960 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	015b      	lsls	r3, r3, #5
 8004880:	0d1b      	lsrs	r3, r3, #20
 8004882:	69fa      	ldr	r2, [r7, #28]
 8004884:	fb02 f303 	mul.w	r3, r2, r3
 8004888:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800488a:	e054      	b.n	8004936 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004892:	d050      	beq.n	8004936 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004894:	f7fd fd70 	bl	8002378 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	69fa      	ldr	r2, [r7, #28]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d902      	bls.n	80048aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d13d      	bne.n	8004926 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	685a      	ldr	r2, [r3, #4]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80048b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80048c2:	d111      	bne.n	80048e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048cc:	d004      	beq.n	80048d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048d6:	d107      	bne.n	80048e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048f0:	d10f      	bne.n	8004912 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004900:	601a      	str	r2, [r3, #0]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004910:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2201      	movs	r2, #1
 8004916:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e017      	b.n	8004956 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d101      	bne.n	8004930 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800492c:	2300      	movs	r3, #0
 800492e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	3b01      	subs	r3, #1
 8004934:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	689a      	ldr	r2, [r3, #8]
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	4013      	ands	r3, r2
 8004940:	68ba      	ldr	r2, [r7, #8]
 8004942:	429a      	cmp	r2, r3
 8004944:	bf0c      	ite	eq
 8004946:	2301      	moveq	r3, #1
 8004948:	2300      	movne	r3, #0
 800494a:	b2db      	uxtb	r3, r3
 800494c:	461a      	mov	r2, r3
 800494e:	79fb      	ldrb	r3, [r7, #7]
 8004950:	429a      	cmp	r2, r3
 8004952:	d19b      	bne.n	800488c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3720      	adds	r7, #32
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	20000004 	.word	0x20000004

08004964 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b08a      	sub	sp, #40	@ 0x28
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
 8004970:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004972:	2300      	movs	r3, #0
 8004974:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004976:	f7fd fcff 	bl	8002378 <HAL_GetTick>
 800497a:	4602      	mov	r2, r0
 800497c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800497e:	1a9b      	subs	r3, r3, r2
 8004980:	683a      	ldr	r2, [r7, #0]
 8004982:	4413      	add	r3, r2
 8004984:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004986:	f7fd fcf7 	bl	8002378 <HAL_GetTick>
 800498a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	330c      	adds	r3, #12
 8004992:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004994:	4b3d      	ldr	r3, [pc, #244]	@ (8004a8c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	4613      	mov	r3, r2
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	4413      	add	r3, r2
 800499e:	00da      	lsls	r2, r3, #3
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	0d1b      	lsrs	r3, r3, #20
 80049a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049a6:	fb02 f303 	mul.w	r3, r2, r3
 80049aa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80049ac:	e060      	b.n	8004a70 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80049b4:	d107      	bne.n	80049c6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d104      	bne.n	80049c6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80049c4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049cc:	d050      	beq.n	8004a70 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80049ce:	f7fd fcd3 	bl	8002378 <HAL_GetTick>
 80049d2:	4602      	mov	r2, r0
 80049d4:	6a3b      	ldr	r3, [r7, #32]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049da:	429a      	cmp	r2, r3
 80049dc:	d902      	bls.n	80049e4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80049de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d13d      	bne.n	8004a60 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	685a      	ldr	r2, [r3, #4]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80049f2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80049fc:	d111      	bne.n	8004a22 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a06:	d004      	beq.n	8004a12 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a10:	d107      	bne.n	8004a22 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a20:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a2a:	d10f      	bne.n	8004a4c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a3a:	601a      	str	r2, [r3, #0]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a4a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e010      	b.n	8004a82 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d101      	bne.n	8004a6a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004a66:	2300      	movs	r3, #0
 8004a68:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	3b01      	subs	r3, #1
 8004a6e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	689a      	ldr	r2, [r3, #8]
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	4013      	ands	r3, r2
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d196      	bne.n	80049ae <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3728      	adds	r7, #40	@ 0x28
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	20000004 	.word	0x20000004

08004a90 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b086      	sub	sp, #24
 8004a94:	af02      	add	r7, sp, #8
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004aa4:	d111      	bne.n	8004aca <SPI_EndRxTransaction+0x3a>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004aae:	d004      	beq.n	8004aba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ab8:	d107      	bne.n	8004aca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ac8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	9300      	str	r3, [sp, #0]
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	2180      	movs	r1, #128	@ 0x80
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f7ff febd 	bl	8004854 <SPI_WaitFlagStateUntilTimeout>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d007      	beq.n	8004af0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ae4:	f043 0220 	orr.w	r2, r3, #32
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e023      	b.n	8004b38 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004af8:	d11d      	bne.n	8004b36 <SPI_EndRxTransaction+0xa6>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b02:	d004      	beq.n	8004b0e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b0c:	d113      	bne.n	8004b36 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	9300      	str	r3, [sp, #0]
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f7ff ff22 	bl	8004964 <SPI_WaitFifoStateUntilTimeout>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d007      	beq.n	8004b36 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b2a:	f043 0220 	orr.w	r2, r3, #32
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e000      	b.n	8004b38 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b086      	sub	sp, #24
 8004b44:	af02      	add	r7, sp, #8
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	9300      	str	r3, [sp, #0]
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004b58:	68f8      	ldr	r0, [r7, #12]
 8004b5a:	f7ff ff03 	bl	8004964 <SPI_WaitFifoStateUntilTimeout>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d007      	beq.n	8004b74 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b68:	f043 0220 	orr.w	r2, r3, #32
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e027      	b.n	8004bc4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	9300      	str	r3, [sp, #0]
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	2180      	movs	r1, #128	@ 0x80
 8004b7e:	68f8      	ldr	r0, [r7, #12]
 8004b80:	f7ff fe68 	bl	8004854 <SPI_WaitFlagStateUntilTimeout>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d007      	beq.n	8004b9a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b8e:	f043 0220 	orr.w	r2, r3, #32
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e014      	b.n	8004bc4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	9300      	str	r3, [sp, #0]
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f7ff fedc 	bl	8004964 <SPI_WaitFifoStateUntilTimeout>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d007      	beq.n	8004bc2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bb6:	f043 0220 	orr.w	r2, r3, #32
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e000      	b.n	8004bc4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3710      	adds	r7, #16
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d101      	bne.n	8004bde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e049      	b.n	8004c72 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d106      	bne.n	8004bf8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f7fd f882 	bl	8001cfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2202      	movs	r2, #2
 8004bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	3304      	adds	r3, #4
 8004c08:	4619      	mov	r1, r3
 8004c0a:	4610      	mov	r0, r2
 8004c0c:	f000 fe88 	bl	8005920 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3708      	adds	r7, #8
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}

08004c7a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c7a:	b580      	push	{r7, lr}
 8004c7c:	b082      	sub	sp, #8
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d101      	bne.n	8004c8c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e049      	b.n	8004d20 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d106      	bne.n	8004ca6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 f841 	bl	8004d28 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2202      	movs	r2, #2
 8004caa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	3304      	adds	r3, #4
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	4610      	mov	r0, r2
 8004cba:	f000 fe31 	bl	8005920 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2201      	movs	r2, #1
 8004d02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2201      	movs	r2, #1
 8004d12:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3708      	adds	r7, #8
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d109      	bne.n	8004d60 <HAL_TIM_PWM_Start+0x24>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	bf14      	ite	ne
 8004d58:	2301      	movne	r3, #1
 8004d5a:	2300      	moveq	r3, #0
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	e03c      	b.n	8004dda <HAL_TIM_PWM_Start+0x9e>
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	2b04      	cmp	r3, #4
 8004d64:	d109      	bne.n	8004d7a <HAL_TIM_PWM_Start+0x3e>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	bf14      	ite	ne
 8004d72:	2301      	movne	r3, #1
 8004d74:	2300      	moveq	r3, #0
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	e02f      	b.n	8004dda <HAL_TIM_PWM_Start+0x9e>
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	2b08      	cmp	r3, #8
 8004d7e:	d109      	bne.n	8004d94 <HAL_TIM_PWM_Start+0x58>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	bf14      	ite	ne
 8004d8c:	2301      	movne	r3, #1
 8004d8e:	2300      	moveq	r3, #0
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	e022      	b.n	8004dda <HAL_TIM_PWM_Start+0x9e>
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	2b0c      	cmp	r3, #12
 8004d98:	d109      	bne.n	8004dae <HAL_TIM_PWM_Start+0x72>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	bf14      	ite	ne
 8004da6:	2301      	movne	r3, #1
 8004da8:	2300      	moveq	r3, #0
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	e015      	b.n	8004dda <HAL_TIM_PWM_Start+0x9e>
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	2b10      	cmp	r3, #16
 8004db2:	d109      	bne.n	8004dc8 <HAL_TIM_PWM_Start+0x8c>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	bf14      	ite	ne
 8004dc0:	2301      	movne	r3, #1
 8004dc2:	2300      	moveq	r3, #0
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	e008      	b.n	8004dda <HAL_TIM_PWM_Start+0x9e>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	bf14      	ite	ne
 8004dd4:	2301      	movne	r3, #1
 8004dd6:	2300      	moveq	r3, #0
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d001      	beq.n	8004de2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e0a6      	b.n	8004f30 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d104      	bne.n	8004df2 <HAL_TIM_PWM_Start+0xb6>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2202      	movs	r2, #2
 8004dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004df0:	e023      	b.n	8004e3a <HAL_TIM_PWM_Start+0xfe>
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	2b04      	cmp	r3, #4
 8004df6:	d104      	bne.n	8004e02 <HAL_TIM_PWM_Start+0xc6>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2202      	movs	r2, #2
 8004dfc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e00:	e01b      	b.n	8004e3a <HAL_TIM_PWM_Start+0xfe>
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	2b08      	cmp	r3, #8
 8004e06:	d104      	bne.n	8004e12 <HAL_TIM_PWM_Start+0xd6>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e10:	e013      	b.n	8004e3a <HAL_TIM_PWM_Start+0xfe>
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	2b0c      	cmp	r3, #12
 8004e16:	d104      	bne.n	8004e22 <HAL_TIM_PWM_Start+0xe6>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2202      	movs	r2, #2
 8004e1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e20:	e00b      	b.n	8004e3a <HAL_TIM_PWM_Start+0xfe>
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	2b10      	cmp	r3, #16
 8004e26:	d104      	bne.n	8004e32 <HAL_TIM_PWM_Start+0xf6>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e30:	e003      	b.n	8004e3a <HAL_TIM_PWM_Start+0xfe>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2202      	movs	r2, #2
 8004e36:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	6839      	ldr	r1, [r7, #0]
 8004e42:	4618      	mov	r0, r3
 8004e44:	f001 f9e6 	bl	8006214 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a3a      	ldr	r2, [pc, #232]	@ (8004f38 <HAL_TIM_PWM_Start+0x1fc>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d018      	beq.n	8004e84 <HAL_TIM_PWM_Start+0x148>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a39      	ldr	r2, [pc, #228]	@ (8004f3c <HAL_TIM_PWM_Start+0x200>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d013      	beq.n	8004e84 <HAL_TIM_PWM_Start+0x148>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a37      	ldr	r2, [pc, #220]	@ (8004f40 <HAL_TIM_PWM_Start+0x204>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d00e      	beq.n	8004e84 <HAL_TIM_PWM_Start+0x148>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a36      	ldr	r2, [pc, #216]	@ (8004f44 <HAL_TIM_PWM_Start+0x208>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d009      	beq.n	8004e84 <HAL_TIM_PWM_Start+0x148>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a34      	ldr	r2, [pc, #208]	@ (8004f48 <HAL_TIM_PWM_Start+0x20c>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d004      	beq.n	8004e84 <HAL_TIM_PWM_Start+0x148>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a33      	ldr	r2, [pc, #204]	@ (8004f4c <HAL_TIM_PWM_Start+0x210>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d101      	bne.n	8004e88 <HAL_TIM_PWM_Start+0x14c>
 8004e84:	2301      	movs	r3, #1
 8004e86:	e000      	b.n	8004e8a <HAL_TIM_PWM_Start+0x14e>
 8004e88:	2300      	movs	r3, #0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d007      	beq.n	8004e9e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004e9c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a25      	ldr	r2, [pc, #148]	@ (8004f38 <HAL_TIM_PWM_Start+0x1fc>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d022      	beq.n	8004eee <HAL_TIM_PWM_Start+0x1b2>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004eb0:	d01d      	beq.n	8004eee <HAL_TIM_PWM_Start+0x1b2>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a26      	ldr	r2, [pc, #152]	@ (8004f50 <HAL_TIM_PWM_Start+0x214>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d018      	beq.n	8004eee <HAL_TIM_PWM_Start+0x1b2>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a24      	ldr	r2, [pc, #144]	@ (8004f54 <HAL_TIM_PWM_Start+0x218>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d013      	beq.n	8004eee <HAL_TIM_PWM_Start+0x1b2>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a23      	ldr	r2, [pc, #140]	@ (8004f58 <HAL_TIM_PWM_Start+0x21c>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d00e      	beq.n	8004eee <HAL_TIM_PWM_Start+0x1b2>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a19      	ldr	r2, [pc, #100]	@ (8004f3c <HAL_TIM_PWM_Start+0x200>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d009      	beq.n	8004eee <HAL_TIM_PWM_Start+0x1b2>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a18      	ldr	r2, [pc, #96]	@ (8004f40 <HAL_TIM_PWM_Start+0x204>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d004      	beq.n	8004eee <HAL_TIM_PWM_Start+0x1b2>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a18      	ldr	r2, [pc, #96]	@ (8004f4c <HAL_TIM_PWM_Start+0x210>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d115      	bne.n	8004f1a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	689a      	ldr	r2, [r3, #8]
 8004ef4:	4b19      	ldr	r3, [pc, #100]	@ (8004f5c <HAL_TIM_PWM_Start+0x220>)
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2b06      	cmp	r3, #6
 8004efe:	d015      	beq.n	8004f2c <HAL_TIM_PWM_Start+0x1f0>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f06:	d011      	beq.n	8004f2c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f042 0201 	orr.w	r2, r2, #1
 8004f16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f18:	e008      	b.n	8004f2c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f042 0201 	orr.w	r2, r2, #1
 8004f28:	601a      	str	r2, [r3, #0]
 8004f2a:	e000      	b.n	8004f2e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f2c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3710      	adds	r7, #16
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	40012c00 	.word	0x40012c00
 8004f3c:	40013400 	.word	0x40013400
 8004f40:	40014000 	.word	0x40014000
 8004f44:	40014400 	.word	0x40014400
 8004f48:	40014800 	.word	0x40014800
 8004f4c:	40015000 	.word	0x40015000
 8004f50:	40000400 	.word	0x40000400
 8004f54:	40000800 	.word	0x40000800
 8004f58:	40000c00 	.word	0x40000c00
 8004f5c:	00010007 	.word	0x00010007

08004f60 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b086      	sub	sp, #24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d101      	bne.n	8004f74 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e097      	b.n	80050a4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d106      	bne.n	8004f8e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f7fc fed7 	bl	8001d3c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2202      	movs	r2, #2
 8004f92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	6812      	ldr	r2, [r2, #0]
 8004fa0:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8004fa4:	f023 0307 	bic.w	r3, r3, #7
 8004fa8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	3304      	adds	r3, #4
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	4610      	mov	r0, r2
 8004fb6:	f000 fcb3 	bl	8005920 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	6a1b      	ldr	r3, [r3, #32]
 8004fd0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fe2:	f023 0303 	bic.w	r3, r3, #3
 8004fe6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	689a      	ldr	r2, [r3, #8]
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	699b      	ldr	r3, [r3, #24]
 8004ff0:	021b      	lsls	r3, r3, #8
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	693a      	ldr	r2, [r7, #16]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005000:	f023 030c 	bic.w	r3, r3, #12
 8005004:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800500c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005010:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	68da      	ldr	r2, [r3, #12]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	69db      	ldr	r3, [r3, #28]
 800501a:	021b      	lsls	r3, r3, #8
 800501c:	4313      	orrs	r3, r2
 800501e:	693a      	ldr	r2, [r7, #16]
 8005020:	4313      	orrs	r3, r2
 8005022:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	011a      	lsls	r2, r3, #4
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	6a1b      	ldr	r3, [r3, #32]
 800502e:	031b      	lsls	r3, r3, #12
 8005030:	4313      	orrs	r3, r2
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	4313      	orrs	r3, r2
 8005036:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800503e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005046:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	685a      	ldr	r2, [r3, #4]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	695b      	ldr	r3, [r3, #20]
 8005050:	011b      	lsls	r3, r3, #4
 8005052:	4313      	orrs	r3, r2
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	4313      	orrs	r3, r2
 8005058:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2201      	movs	r2, #1
 8005086:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2201      	movs	r2, #1
 800509e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3718      	adds	r7, #24
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80050bc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80050c4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80050cc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80050d4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d110      	bne.n	80050fe <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80050dc:	7bfb      	ldrb	r3, [r7, #15]
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d102      	bne.n	80050e8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80050e2:	7b7b      	ldrb	r3, [r7, #13]
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d001      	beq.n	80050ec <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e069      	b.n	80051c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2202      	movs	r2, #2
 80050f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2202      	movs	r2, #2
 80050f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050fc:	e031      	b.n	8005162 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	2b04      	cmp	r3, #4
 8005102:	d110      	bne.n	8005126 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005104:	7bbb      	ldrb	r3, [r7, #14]
 8005106:	2b01      	cmp	r3, #1
 8005108:	d102      	bne.n	8005110 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800510a:	7b3b      	ldrb	r3, [r7, #12]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d001      	beq.n	8005114 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e055      	b.n	80051c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2202      	movs	r2, #2
 8005118:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2202      	movs	r2, #2
 8005120:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005124:	e01d      	b.n	8005162 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005126:	7bfb      	ldrb	r3, [r7, #15]
 8005128:	2b01      	cmp	r3, #1
 800512a:	d108      	bne.n	800513e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800512c:	7bbb      	ldrb	r3, [r7, #14]
 800512e:	2b01      	cmp	r3, #1
 8005130:	d105      	bne.n	800513e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005132:	7b7b      	ldrb	r3, [r7, #13]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d102      	bne.n	800513e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005138:	7b3b      	ldrb	r3, [r7, #12]
 800513a:	2b01      	cmp	r3, #1
 800513c:	d001      	beq.n	8005142 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e03e      	b.n	80051c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2202      	movs	r2, #2
 8005146:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2202      	movs	r2, #2
 800514e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2202      	movs	r2, #2
 8005156:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2202      	movs	r2, #2
 800515e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d003      	beq.n	8005170 <HAL_TIM_Encoder_Start+0xc4>
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	2b04      	cmp	r3, #4
 800516c:	d008      	beq.n	8005180 <HAL_TIM_Encoder_Start+0xd4>
 800516e:	e00f      	b.n	8005190 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2201      	movs	r2, #1
 8005176:	2100      	movs	r1, #0
 8005178:	4618      	mov	r0, r3
 800517a:	f001 f84b 	bl	8006214 <TIM_CCxChannelCmd>
      break;
 800517e:	e016      	b.n	80051ae <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2201      	movs	r2, #1
 8005186:	2104      	movs	r1, #4
 8005188:	4618      	mov	r0, r3
 800518a:	f001 f843 	bl	8006214 <TIM_CCxChannelCmd>
      break;
 800518e:	e00e      	b.n	80051ae <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2201      	movs	r2, #1
 8005196:	2100      	movs	r1, #0
 8005198:	4618      	mov	r0, r3
 800519a:	f001 f83b 	bl	8006214 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2201      	movs	r2, #1
 80051a4:	2104      	movs	r1, #4
 80051a6:	4618      	mov	r0, r3
 80051a8:	f001 f834 	bl	8006214 <TIM_CCxChannelCmd>
      break;
 80051ac:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f042 0201 	orr.w	r2, r2, #1
 80051bc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3710      	adds	r7, #16
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	f003 0302 	and.w	r3, r3, #2
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d020      	beq.n	800522c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f003 0302 	and.w	r3, r3, #2
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d01b      	beq.n	800522c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f06f 0202 	mvn.w	r2, #2
 80051fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2201      	movs	r2, #1
 8005202:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	f003 0303 	and.w	r3, r3, #3
 800520e:	2b00      	cmp	r3, #0
 8005210:	d003      	beq.n	800521a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 fb66 	bl	80058e4 <HAL_TIM_IC_CaptureCallback>
 8005218:	e005      	b.n	8005226 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 fb58 	bl	80058d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 fb69 	bl	80058f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	f003 0304 	and.w	r3, r3, #4
 8005232:	2b00      	cmp	r3, #0
 8005234:	d020      	beq.n	8005278 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f003 0304 	and.w	r3, r3, #4
 800523c:	2b00      	cmp	r3, #0
 800523e:	d01b      	beq.n	8005278 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f06f 0204 	mvn.w	r2, #4
 8005248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2202      	movs	r2, #2
 800524e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800525a:	2b00      	cmp	r3, #0
 800525c:	d003      	beq.n	8005266 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 fb40 	bl	80058e4 <HAL_TIM_IC_CaptureCallback>
 8005264:	e005      	b.n	8005272 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 fb32 	bl	80058d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 fb43 	bl	80058f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	f003 0308 	and.w	r3, r3, #8
 800527e:	2b00      	cmp	r3, #0
 8005280:	d020      	beq.n	80052c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f003 0308 	and.w	r3, r3, #8
 8005288:	2b00      	cmp	r3, #0
 800528a:	d01b      	beq.n	80052c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f06f 0208 	mvn.w	r2, #8
 8005294:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2204      	movs	r2, #4
 800529a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	69db      	ldr	r3, [r3, #28]
 80052a2:	f003 0303 	and.w	r3, r3, #3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d003      	beq.n	80052b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 fb1a 	bl	80058e4 <HAL_TIM_IC_CaptureCallback>
 80052b0:	e005      	b.n	80052be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 fb0c 	bl	80058d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 fb1d 	bl	80058f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	f003 0310 	and.w	r3, r3, #16
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d020      	beq.n	8005310 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f003 0310 	and.w	r3, r3, #16
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d01b      	beq.n	8005310 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f06f 0210 	mvn.w	r2, #16
 80052e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2208      	movs	r2, #8
 80052e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	69db      	ldr	r3, [r3, #28]
 80052ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d003      	beq.n	80052fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 faf4 	bl	80058e4 <HAL_TIM_IC_CaptureCallback>
 80052fc:	e005      	b.n	800530a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 fae6 	bl	80058d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f000 faf7 	bl	80058f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	f003 0301 	and.w	r3, r3, #1
 8005316:	2b00      	cmp	r3, #0
 8005318:	d00c      	beq.n	8005334 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f003 0301 	and.w	r3, r3, #1
 8005320:	2b00      	cmp	r3, #0
 8005322:	d007      	beq.n	8005334 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f06f 0201 	mvn.w	r2, #1
 800532c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 fac4 	bl	80058bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800533a:	2b00      	cmp	r3, #0
 800533c:	d104      	bne.n	8005348 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00c      	beq.n	8005362 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800534e:	2b00      	cmp	r3, #0
 8005350:	d007      	beq.n	8005362 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800535a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f001 f8b3 	bl	80064c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00c      	beq.n	8005386 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005372:	2b00      	cmp	r3, #0
 8005374:	d007      	beq.n	8005386 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800537e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f001 f8ab 	bl	80064dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800538c:	2b00      	cmp	r3, #0
 800538e:	d00c      	beq.n	80053aa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005396:	2b00      	cmp	r3, #0
 8005398:	d007      	beq.n	80053aa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80053a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f000 fab1 	bl	800590c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	f003 0320 	and.w	r3, r3, #32
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00c      	beq.n	80053ce <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f003 0320 	and.w	r3, r3, #32
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d007      	beq.n	80053ce <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f06f 0220 	mvn.w	r2, #32
 80053c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f001 f873 	bl	80064b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00c      	beq.n	80053f2 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d007      	beq.n	80053f2 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80053ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f001 f87f 	bl	80064f0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00c      	beq.n	8005416 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005402:	2b00      	cmp	r3, #0
 8005404:	d007      	beq.n	8005416 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800540e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f001 f877 	bl	8006504 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00c      	beq.n	800543a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d007      	beq.n	800543a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005432:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f001 f86f 	bl	8006518 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00c      	beq.n	800545e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800544a:	2b00      	cmp	r3, #0
 800544c:	d007      	beq.n	800545e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005456:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f001 f867 	bl	800652c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800545e:	bf00      	nop
 8005460:	3710      	adds	r7, #16
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
	...

08005468 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b086      	sub	sp, #24
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005474:	2300      	movs	r3, #0
 8005476:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800547e:	2b01      	cmp	r3, #1
 8005480:	d101      	bne.n	8005486 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005482:	2302      	movs	r3, #2
 8005484:	e0ff      	b.n	8005686 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2201      	movs	r2, #1
 800548a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2b14      	cmp	r3, #20
 8005492:	f200 80f0 	bhi.w	8005676 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005496:	a201      	add	r2, pc, #4	@ (adr r2, 800549c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800549c:	080054f1 	.word	0x080054f1
 80054a0:	08005677 	.word	0x08005677
 80054a4:	08005677 	.word	0x08005677
 80054a8:	08005677 	.word	0x08005677
 80054ac:	08005531 	.word	0x08005531
 80054b0:	08005677 	.word	0x08005677
 80054b4:	08005677 	.word	0x08005677
 80054b8:	08005677 	.word	0x08005677
 80054bc:	08005573 	.word	0x08005573
 80054c0:	08005677 	.word	0x08005677
 80054c4:	08005677 	.word	0x08005677
 80054c8:	08005677 	.word	0x08005677
 80054cc:	080055b3 	.word	0x080055b3
 80054d0:	08005677 	.word	0x08005677
 80054d4:	08005677 	.word	0x08005677
 80054d8:	08005677 	.word	0x08005677
 80054dc:	080055f5 	.word	0x080055f5
 80054e0:	08005677 	.word	0x08005677
 80054e4:	08005677 	.word	0x08005677
 80054e8:	08005677 	.word	0x08005677
 80054ec:	08005635 	.word	0x08005635
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68b9      	ldr	r1, [r7, #8]
 80054f6:	4618      	mov	r0, r3
 80054f8:	f000 fac6 	bl	8005a88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	699a      	ldr	r2, [r3, #24]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f042 0208 	orr.w	r2, r2, #8
 800550a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	699a      	ldr	r2, [r3, #24]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f022 0204 	bic.w	r2, r2, #4
 800551a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	6999      	ldr	r1, [r3, #24]
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	691a      	ldr	r2, [r3, #16]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	430a      	orrs	r2, r1
 800552c:	619a      	str	r2, [r3, #24]
      break;
 800552e:	e0a5      	b.n	800567c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68b9      	ldr	r1, [r7, #8]
 8005536:	4618      	mov	r0, r3
 8005538:	f000 fb40 	bl	8005bbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	699a      	ldr	r2, [r3, #24]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800554a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	699a      	ldr	r2, [r3, #24]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800555a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	6999      	ldr	r1, [r3, #24]
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	021a      	lsls	r2, r3, #8
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	430a      	orrs	r2, r1
 800556e:	619a      	str	r2, [r3, #24]
      break;
 8005570:	e084      	b.n	800567c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68b9      	ldr	r1, [r7, #8]
 8005578:	4618      	mov	r0, r3
 800557a:	f000 fbb3 	bl	8005ce4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	69da      	ldr	r2, [r3, #28]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f042 0208 	orr.w	r2, r2, #8
 800558c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	69da      	ldr	r2, [r3, #28]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f022 0204 	bic.w	r2, r2, #4
 800559c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	69d9      	ldr	r1, [r3, #28]
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	691a      	ldr	r2, [r3, #16]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	430a      	orrs	r2, r1
 80055ae:	61da      	str	r2, [r3, #28]
      break;
 80055b0:	e064      	b.n	800567c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68b9      	ldr	r1, [r7, #8]
 80055b8:	4618      	mov	r0, r3
 80055ba:	f000 fc25 	bl	8005e08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	69da      	ldr	r2, [r3, #28]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	69da      	ldr	r2, [r3, #28]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	69d9      	ldr	r1, [r3, #28]
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	021a      	lsls	r2, r3, #8
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	430a      	orrs	r2, r1
 80055f0:	61da      	str	r2, [r3, #28]
      break;
 80055f2:	e043      	b.n	800567c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68b9      	ldr	r1, [r7, #8]
 80055fa:	4618      	mov	r0, r3
 80055fc:	f000 fc98 	bl	8005f30 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f042 0208 	orr.w	r2, r2, #8
 800560e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f022 0204 	bic.w	r2, r2, #4
 800561e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	691a      	ldr	r2, [r3, #16]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	430a      	orrs	r2, r1
 8005630:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005632:	e023      	b.n	800567c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68b9      	ldr	r1, [r7, #8]
 800563a:	4618      	mov	r0, r3
 800563c:	f000 fce2 	bl	8006004 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800564e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800565e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	021a      	lsls	r2, r3, #8
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	430a      	orrs	r2, r1
 8005672:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005674:	e002      	b.n	800567c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	75fb      	strb	r3, [r7, #23]
      break;
 800567a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2200      	movs	r2, #0
 8005680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005684:	7dfb      	ldrb	r3, [r7, #23]
}
 8005686:	4618      	mov	r0, r3
 8005688:	3718      	adds	r7, #24
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop

08005690 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800569a:	2300      	movs	r3, #0
 800569c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d101      	bne.n	80056ac <HAL_TIM_ConfigClockSource+0x1c>
 80056a8:	2302      	movs	r3, #2
 80056aa:	e0f6      	b.n	800589a <HAL_TIM_ConfigClockSource+0x20a>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2202      	movs	r2, #2
 80056b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80056ca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80056ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80056d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	68ba      	ldr	r2, [r7, #8]
 80056de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a6f      	ldr	r2, [pc, #444]	@ (80058a4 <HAL_TIM_ConfigClockSource+0x214>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	f000 80c1 	beq.w	800586e <HAL_TIM_ConfigClockSource+0x1de>
 80056ec:	4a6d      	ldr	r2, [pc, #436]	@ (80058a4 <HAL_TIM_ConfigClockSource+0x214>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	f200 80c6 	bhi.w	8005880 <HAL_TIM_ConfigClockSource+0x1f0>
 80056f4:	4a6c      	ldr	r2, [pc, #432]	@ (80058a8 <HAL_TIM_ConfigClockSource+0x218>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	f000 80b9 	beq.w	800586e <HAL_TIM_ConfigClockSource+0x1de>
 80056fc:	4a6a      	ldr	r2, [pc, #424]	@ (80058a8 <HAL_TIM_ConfigClockSource+0x218>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	f200 80be 	bhi.w	8005880 <HAL_TIM_ConfigClockSource+0x1f0>
 8005704:	4a69      	ldr	r2, [pc, #420]	@ (80058ac <HAL_TIM_ConfigClockSource+0x21c>)
 8005706:	4293      	cmp	r3, r2
 8005708:	f000 80b1 	beq.w	800586e <HAL_TIM_ConfigClockSource+0x1de>
 800570c:	4a67      	ldr	r2, [pc, #412]	@ (80058ac <HAL_TIM_ConfigClockSource+0x21c>)
 800570e:	4293      	cmp	r3, r2
 8005710:	f200 80b6 	bhi.w	8005880 <HAL_TIM_ConfigClockSource+0x1f0>
 8005714:	4a66      	ldr	r2, [pc, #408]	@ (80058b0 <HAL_TIM_ConfigClockSource+0x220>)
 8005716:	4293      	cmp	r3, r2
 8005718:	f000 80a9 	beq.w	800586e <HAL_TIM_ConfigClockSource+0x1de>
 800571c:	4a64      	ldr	r2, [pc, #400]	@ (80058b0 <HAL_TIM_ConfigClockSource+0x220>)
 800571e:	4293      	cmp	r3, r2
 8005720:	f200 80ae 	bhi.w	8005880 <HAL_TIM_ConfigClockSource+0x1f0>
 8005724:	4a63      	ldr	r2, [pc, #396]	@ (80058b4 <HAL_TIM_ConfigClockSource+0x224>)
 8005726:	4293      	cmp	r3, r2
 8005728:	f000 80a1 	beq.w	800586e <HAL_TIM_ConfigClockSource+0x1de>
 800572c:	4a61      	ldr	r2, [pc, #388]	@ (80058b4 <HAL_TIM_ConfigClockSource+0x224>)
 800572e:	4293      	cmp	r3, r2
 8005730:	f200 80a6 	bhi.w	8005880 <HAL_TIM_ConfigClockSource+0x1f0>
 8005734:	4a60      	ldr	r2, [pc, #384]	@ (80058b8 <HAL_TIM_ConfigClockSource+0x228>)
 8005736:	4293      	cmp	r3, r2
 8005738:	f000 8099 	beq.w	800586e <HAL_TIM_ConfigClockSource+0x1de>
 800573c:	4a5e      	ldr	r2, [pc, #376]	@ (80058b8 <HAL_TIM_ConfigClockSource+0x228>)
 800573e:	4293      	cmp	r3, r2
 8005740:	f200 809e 	bhi.w	8005880 <HAL_TIM_ConfigClockSource+0x1f0>
 8005744:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005748:	f000 8091 	beq.w	800586e <HAL_TIM_ConfigClockSource+0x1de>
 800574c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005750:	f200 8096 	bhi.w	8005880 <HAL_TIM_ConfigClockSource+0x1f0>
 8005754:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005758:	f000 8089 	beq.w	800586e <HAL_TIM_ConfigClockSource+0x1de>
 800575c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005760:	f200 808e 	bhi.w	8005880 <HAL_TIM_ConfigClockSource+0x1f0>
 8005764:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005768:	d03e      	beq.n	80057e8 <HAL_TIM_ConfigClockSource+0x158>
 800576a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800576e:	f200 8087 	bhi.w	8005880 <HAL_TIM_ConfigClockSource+0x1f0>
 8005772:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005776:	f000 8086 	beq.w	8005886 <HAL_TIM_ConfigClockSource+0x1f6>
 800577a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800577e:	d87f      	bhi.n	8005880 <HAL_TIM_ConfigClockSource+0x1f0>
 8005780:	2b70      	cmp	r3, #112	@ 0x70
 8005782:	d01a      	beq.n	80057ba <HAL_TIM_ConfigClockSource+0x12a>
 8005784:	2b70      	cmp	r3, #112	@ 0x70
 8005786:	d87b      	bhi.n	8005880 <HAL_TIM_ConfigClockSource+0x1f0>
 8005788:	2b60      	cmp	r3, #96	@ 0x60
 800578a:	d050      	beq.n	800582e <HAL_TIM_ConfigClockSource+0x19e>
 800578c:	2b60      	cmp	r3, #96	@ 0x60
 800578e:	d877      	bhi.n	8005880 <HAL_TIM_ConfigClockSource+0x1f0>
 8005790:	2b50      	cmp	r3, #80	@ 0x50
 8005792:	d03c      	beq.n	800580e <HAL_TIM_ConfigClockSource+0x17e>
 8005794:	2b50      	cmp	r3, #80	@ 0x50
 8005796:	d873      	bhi.n	8005880 <HAL_TIM_ConfigClockSource+0x1f0>
 8005798:	2b40      	cmp	r3, #64	@ 0x40
 800579a:	d058      	beq.n	800584e <HAL_TIM_ConfigClockSource+0x1be>
 800579c:	2b40      	cmp	r3, #64	@ 0x40
 800579e:	d86f      	bhi.n	8005880 <HAL_TIM_ConfigClockSource+0x1f0>
 80057a0:	2b30      	cmp	r3, #48	@ 0x30
 80057a2:	d064      	beq.n	800586e <HAL_TIM_ConfigClockSource+0x1de>
 80057a4:	2b30      	cmp	r3, #48	@ 0x30
 80057a6:	d86b      	bhi.n	8005880 <HAL_TIM_ConfigClockSource+0x1f0>
 80057a8:	2b20      	cmp	r3, #32
 80057aa:	d060      	beq.n	800586e <HAL_TIM_ConfigClockSource+0x1de>
 80057ac:	2b20      	cmp	r3, #32
 80057ae:	d867      	bhi.n	8005880 <HAL_TIM_ConfigClockSource+0x1f0>
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d05c      	beq.n	800586e <HAL_TIM_ConfigClockSource+0x1de>
 80057b4:	2b10      	cmp	r3, #16
 80057b6:	d05a      	beq.n	800586e <HAL_TIM_ConfigClockSource+0x1de>
 80057b8:	e062      	b.n	8005880 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80057ca:	f000 fd03 	bl	80061d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80057dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	68ba      	ldr	r2, [r7, #8]
 80057e4:	609a      	str	r2, [r3, #8]
      break;
 80057e6:	e04f      	b.n	8005888 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80057f8:	f000 fcec 	bl	80061d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	689a      	ldr	r2, [r3, #8]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800580a:	609a      	str	r2, [r3, #8]
      break;
 800580c:	e03c      	b.n	8005888 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800581a:	461a      	mov	r2, r3
 800581c:	f000 fc5e 	bl	80060dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2150      	movs	r1, #80	@ 0x50
 8005826:	4618      	mov	r0, r3
 8005828:	f000 fcb7 	bl	800619a <TIM_ITRx_SetConfig>
      break;
 800582c:	e02c      	b.n	8005888 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800583a:	461a      	mov	r2, r3
 800583c:	f000 fc7d 	bl	800613a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2160      	movs	r1, #96	@ 0x60
 8005846:	4618      	mov	r0, r3
 8005848:	f000 fca7 	bl	800619a <TIM_ITRx_SetConfig>
      break;
 800584c:	e01c      	b.n	8005888 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800585a:	461a      	mov	r2, r3
 800585c:	f000 fc3e 	bl	80060dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2140      	movs	r1, #64	@ 0x40
 8005866:	4618      	mov	r0, r3
 8005868:	f000 fc97 	bl	800619a <TIM_ITRx_SetConfig>
      break;
 800586c:	e00c      	b.n	8005888 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4619      	mov	r1, r3
 8005878:	4610      	mov	r0, r2
 800587a:	f000 fc8e 	bl	800619a <TIM_ITRx_SetConfig>
      break;
 800587e:	e003      	b.n	8005888 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	73fb      	strb	r3, [r7, #15]
      break;
 8005884:	e000      	b.n	8005888 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005886:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005898:	7bfb      	ldrb	r3, [r7, #15]
}
 800589a:	4618      	mov	r0, r3
 800589c:	3710      	adds	r7, #16
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	00100070 	.word	0x00100070
 80058a8:	00100060 	.word	0x00100060
 80058ac:	00100050 	.word	0x00100050
 80058b0:	00100040 	.word	0x00100040
 80058b4:	00100030 	.word	0x00100030
 80058b8:	00100020 	.word	0x00100020

080058bc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80058c4:	bf00      	nop
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058d8:	bf00      	nop
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058ec:	bf00      	nop
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005900:	bf00      	nop
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005914:	bf00      	nop
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4a4c      	ldr	r2, [pc, #304]	@ (8005a64 <TIM_Base_SetConfig+0x144>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d017      	beq.n	8005968 <TIM_Base_SetConfig+0x48>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800593e:	d013      	beq.n	8005968 <TIM_Base_SetConfig+0x48>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a49      	ldr	r2, [pc, #292]	@ (8005a68 <TIM_Base_SetConfig+0x148>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d00f      	beq.n	8005968 <TIM_Base_SetConfig+0x48>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a48      	ldr	r2, [pc, #288]	@ (8005a6c <TIM_Base_SetConfig+0x14c>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d00b      	beq.n	8005968 <TIM_Base_SetConfig+0x48>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a47      	ldr	r2, [pc, #284]	@ (8005a70 <TIM_Base_SetConfig+0x150>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d007      	beq.n	8005968 <TIM_Base_SetConfig+0x48>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4a46      	ldr	r2, [pc, #280]	@ (8005a74 <TIM_Base_SetConfig+0x154>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d003      	beq.n	8005968 <TIM_Base_SetConfig+0x48>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4a45      	ldr	r2, [pc, #276]	@ (8005a78 <TIM_Base_SetConfig+0x158>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d108      	bne.n	800597a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800596e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	4313      	orrs	r3, r2
 8005978:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a39      	ldr	r2, [pc, #228]	@ (8005a64 <TIM_Base_SetConfig+0x144>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d023      	beq.n	80059ca <TIM_Base_SetConfig+0xaa>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005988:	d01f      	beq.n	80059ca <TIM_Base_SetConfig+0xaa>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a36      	ldr	r2, [pc, #216]	@ (8005a68 <TIM_Base_SetConfig+0x148>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d01b      	beq.n	80059ca <TIM_Base_SetConfig+0xaa>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a35      	ldr	r2, [pc, #212]	@ (8005a6c <TIM_Base_SetConfig+0x14c>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d017      	beq.n	80059ca <TIM_Base_SetConfig+0xaa>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a34      	ldr	r2, [pc, #208]	@ (8005a70 <TIM_Base_SetConfig+0x150>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d013      	beq.n	80059ca <TIM_Base_SetConfig+0xaa>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a33      	ldr	r2, [pc, #204]	@ (8005a74 <TIM_Base_SetConfig+0x154>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d00f      	beq.n	80059ca <TIM_Base_SetConfig+0xaa>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a33      	ldr	r2, [pc, #204]	@ (8005a7c <TIM_Base_SetConfig+0x15c>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d00b      	beq.n	80059ca <TIM_Base_SetConfig+0xaa>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a32      	ldr	r2, [pc, #200]	@ (8005a80 <TIM_Base_SetConfig+0x160>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d007      	beq.n	80059ca <TIM_Base_SetConfig+0xaa>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a31      	ldr	r2, [pc, #196]	@ (8005a84 <TIM_Base_SetConfig+0x164>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d003      	beq.n	80059ca <TIM_Base_SetConfig+0xaa>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a2c      	ldr	r2, [pc, #176]	@ (8005a78 <TIM_Base_SetConfig+0x158>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d108      	bne.n	80059dc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	4313      	orrs	r3, r2
 80059da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	695b      	ldr	r3, [r3, #20]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	689a      	ldr	r2, [r3, #8]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a18      	ldr	r2, [pc, #96]	@ (8005a64 <TIM_Base_SetConfig+0x144>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d013      	beq.n	8005a30 <TIM_Base_SetConfig+0x110>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a1a      	ldr	r2, [pc, #104]	@ (8005a74 <TIM_Base_SetConfig+0x154>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d00f      	beq.n	8005a30 <TIM_Base_SetConfig+0x110>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a1a      	ldr	r2, [pc, #104]	@ (8005a7c <TIM_Base_SetConfig+0x15c>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d00b      	beq.n	8005a30 <TIM_Base_SetConfig+0x110>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a19      	ldr	r2, [pc, #100]	@ (8005a80 <TIM_Base_SetConfig+0x160>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d007      	beq.n	8005a30 <TIM_Base_SetConfig+0x110>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a18      	ldr	r2, [pc, #96]	@ (8005a84 <TIM_Base_SetConfig+0x164>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d003      	beq.n	8005a30 <TIM_Base_SetConfig+0x110>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a13      	ldr	r2, [pc, #76]	@ (8005a78 <TIM_Base_SetConfig+0x158>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d103      	bne.n	8005a38 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	691a      	ldr	r2, [r3, #16]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	f003 0301 	and.w	r3, r3, #1
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d105      	bne.n	8005a56 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	f023 0201 	bic.w	r2, r3, #1
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	611a      	str	r2, [r3, #16]
  }
}
 8005a56:	bf00      	nop
 8005a58:	3714      	adds	r7, #20
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	40012c00 	.word	0x40012c00
 8005a68:	40000400 	.word	0x40000400
 8005a6c:	40000800 	.word	0x40000800
 8005a70:	40000c00 	.word	0x40000c00
 8005a74:	40013400 	.word	0x40013400
 8005a78:	40015000 	.word	0x40015000
 8005a7c:	40014000 	.word	0x40014000
 8005a80:	40014400 	.word	0x40014400
 8005a84:	40014800 	.word	0x40014800

08005a88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b087      	sub	sp, #28
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a1b      	ldr	r3, [r3, #32]
 8005a96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6a1b      	ldr	r3, [r3, #32]
 8005a9c:	f023 0201 	bic.w	r2, r3, #1
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ab6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005aba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f023 0303 	bic.w	r3, r3, #3
 8005ac2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	f023 0302 	bic.w	r3, r3, #2
 8005ad4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a30      	ldr	r2, [pc, #192]	@ (8005ba4 <TIM_OC1_SetConfig+0x11c>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d013      	beq.n	8005b10 <TIM_OC1_SetConfig+0x88>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a2f      	ldr	r2, [pc, #188]	@ (8005ba8 <TIM_OC1_SetConfig+0x120>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d00f      	beq.n	8005b10 <TIM_OC1_SetConfig+0x88>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a2e      	ldr	r2, [pc, #184]	@ (8005bac <TIM_OC1_SetConfig+0x124>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d00b      	beq.n	8005b10 <TIM_OC1_SetConfig+0x88>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a2d      	ldr	r2, [pc, #180]	@ (8005bb0 <TIM_OC1_SetConfig+0x128>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d007      	beq.n	8005b10 <TIM_OC1_SetConfig+0x88>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a2c      	ldr	r2, [pc, #176]	@ (8005bb4 <TIM_OC1_SetConfig+0x12c>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d003      	beq.n	8005b10 <TIM_OC1_SetConfig+0x88>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a2b      	ldr	r2, [pc, #172]	@ (8005bb8 <TIM_OC1_SetConfig+0x130>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d10c      	bne.n	8005b2a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	f023 0308 	bic.w	r3, r3, #8
 8005b16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	697a      	ldr	r2, [r7, #20]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	f023 0304 	bic.w	r3, r3, #4
 8005b28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a1d      	ldr	r2, [pc, #116]	@ (8005ba4 <TIM_OC1_SetConfig+0x11c>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d013      	beq.n	8005b5a <TIM_OC1_SetConfig+0xd2>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a1c      	ldr	r2, [pc, #112]	@ (8005ba8 <TIM_OC1_SetConfig+0x120>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d00f      	beq.n	8005b5a <TIM_OC1_SetConfig+0xd2>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a1b      	ldr	r2, [pc, #108]	@ (8005bac <TIM_OC1_SetConfig+0x124>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d00b      	beq.n	8005b5a <TIM_OC1_SetConfig+0xd2>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a1a      	ldr	r2, [pc, #104]	@ (8005bb0 <TIM_OC1_SetConfig+0x128>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d007      	beq.n	8005b5a <TIM_OC1_SetConfig+0xd2>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a19      	ldr	r2, [pc, #100]	@ (8005bb4 <TIM_OC1_SetConfig+0x12c>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d003      	beq.n	8005b5a <TIM_OC1_SetConfig+0xd2>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a18      	ldr	r2, [pc, #96]	@ (8005bb8 <TIM_OC1_SetConfig+0x130>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d111      	bne.n	8005b7e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	695b      	ldr	r3, [r3, #20]
 8005b6e:	693a      	ldr	r2, [r7, #16]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	699b      	ldr	r3, [r3, #24]
 8005b78:	693a      	ldr	r2, [r7, #16]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	693a      	ldr	r2, [r7, #16]
 8005b82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	685a      	ldr	r2, [r3, #4]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	697a      	ldr	r2, [r7, #20]
 8005b96:	621a      	str	r2, [r3, #32]
}
 8005b98:	bf00      	nop
 8005b9a:	371c      	adds	r7, #28
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr
 8005ba4:	40012c00 	.word	0x40012c00
 8005ba8:	40013400 	.word	0x40013400
 8005bac:	40014000 	.word	0x40014000
 8005bb0:	40014400 	.word	0x40014400
 8005bb4:	40014800 	.word	0x40014800
 8005bb8:	40015000 	.word	0x40015000

08005bbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b087      	sub	sp, #28
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a1b      	ldr	r3, [r3, #32]
 8005bca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6a1b      	ldr	r3, [r3, #32]
 8005bd0:	f023 0210 	bic.w	r2, r3, #16
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	699b      	ldr	r3, [r3, #24]
 8005be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005bea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	021b      	lsls	r3, r3, #8
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	f023 0320 	bic.w	r3, r3, #32
 8005c0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	011b      	lsls	r3, r3, #4
 8005c12:	697a      	ldr	r2, [r7, #20]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a2c      	ldr	r2, [pc, #176]	@ (8005ccc <TIM_OC2_SetConfig+0x110>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d007      	beq.n	8005c30 <TIM_OC2_SetConfig+0x74>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a2b      	ldr	r2, [pc, #172]	@ (8005cd0 <TIM_OC2_SetConfig+0x114>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d003      	beq.n	8005c30 <TIM_OC2_SetConfig+0x74>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a2a      	ldr	r2, [pc, #168]	@ (8005cd4 <TIM_OC2_SetConfig+0x118>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d10d      	bne.n	8005c4c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	011b      	lsls	r3, r3, #4
 8005c3e:	697a      	ldr	r2, [r7, #20]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c4a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a1f      	ldr	r2, [pc, #124]	@ (8005ccc <TIM_OC2_SetConfig+0x110>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d013      	beq.n	8005c7c <TIM_OC2_SetConfig+0xc0>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a1e      	ldr	r2, [pc, #120]	@ (8005cd0 <TIM_OC2_SetConfig+0x114>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d00f      	beq.n	8005c7c <TIM_OC2_SetConfig+0xc0>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a1e      	ldr	r2, [pc, #120]	@ (8005cd8 <TIM_OC2_SetConfig+0x11c>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d00b      	beq.n	8005c7c <TIM_OC2_SetConfig+0xc0>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a1d      	ldr	r2, [pc, #116]	@ (8005cdc <TIM_OC2_SetConfig+0x120>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d007      	beq.n	8005c7c <TIM_OC2_SetConfig+0xc0>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a1c      	ldr	r2, [pc, #112]	@ (8005ce0 <TIM_OC2_SetConfig+0x124>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d003      	beq.n	8005c7c <TIM_OC2_SetConfig+0xc0>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a17      	ldr	r2, [pc, #92]	@ (8005cd4 <TIM_OC2_SetConfig+0x118>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d113      	bne.n	8005ca4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	695b      	ldr	r3, [r3, #20]
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	693a      	ldr	r2, [r7, #16]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	699b      	ldr	r3, [r3, #24]
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	693a      	ldr	r2, [r7, #16]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	693a      	ldr	r2, [r7, #16]
 8005ca8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	685a      	ldr	r2, [r3, #4]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	621a      	str	r2, [r3, #32]
}
 8005cbe:	bf00      	nop
 8005cc0:	371c      	adds	r7, #28
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	40012c00 	.word	0x40012c00
 8005cd0:	40013400 	.word	0x40013400
 8005cd4:	40015000 	.word	0x40015000
 8005cd8:	40014000 	.word	0x40014000
 8005cdc:	40014400 	.word	0x40014400
 8005ce0:	40014800 	.word	0x40014800

08005ce4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b087      	sub	sp, #28
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6a1b      	ldr	r3, [r3, #32]
 8005cf8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	69db      	ldr	r3, [r3, #28]
 8005d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f023 0303 	bic.w	r3, r3, #3
 8005d1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005d30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	021b      	lsls	r3, r3, #8
 8005d38:	697a      	ldr	r2, [r7, #20]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a2b      	ldr	r2, [pc, #172]	@ (8005df0 <TIM_OC3_SetConfig+0x10c>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d007      	beq.n	8005d56 <TIM_OC3_SetConfig+0x72>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a2a      	ldr	r2, [pc, #168]	@ (8005df4 <TIM_OC3_SetConfig+0x110>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d003      	beq.n	8005d56 <TIM_OC3_SetConfig+0x72>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a29      	ldr	r2, [pc, #164]	@ (8005df8 <TIM_OC3_SetConfig+0x114>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d10d      	bne.n	8005d72 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005d5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	021b      	lsls	r3, r3, #8
 8005d64:	697a      	ldr	r2, [r7, #20]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005d70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a1e      	ldr	r2, [pc, #120]	@ (8005df0 <TIM_OC3_SetConfig+0x10c>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d013      	beq.n	8005da2 <TIM_OC3_SetConfig+0xbe>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4a1d      	ldr	r2, [pc, #116]	@ (8005df4 <TIM_OC3_SetConfig+0x110>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d00f      	beq.n	8005da2 <TIM_OC3_SetConfig+0xbe>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a1d      	ldr	r2, [pc, #116]	@ (8005dfc <TIM_OC3_SetConfig+0x118>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d00b      	beq.n	8005da2 <TIM_OC3_SetConfig+0xbe>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a1c      	ldr	r2, [pc, #112]	@ (8005e00 <TIM_OC3_SetConfig+0x11c>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d007      	beq.n	8005da2 <TIM_OC3_SetConfig+0xbe>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a1b      	ldr	r2, [pc, #108]	@ (8005e04 <TIM_OC3_SetConfig+0x120>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d003      	beq.n	8005da2 <TIM_OC3_SetConfig+0xbe>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a16      	ldr	r2, [pc, #88]	@ (8005df8 <TIM_OC3_SetConfig+0x114>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d113      	bne.n	8005dca <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005da8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005db0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	695b      	ldr	r3, [r3, #20]
 8005db6:	011b      	lsls	r3, r3, #4
 8005db8:	693a      	ldr	r2, [r7, #16]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	011b      	lsls	r3, r3, #4
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	693a      	ldr	r2, [r7, #16]
 8005dce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	68fa      	ldr	r2, [r7, #12]
 8005dd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	685a      	ldr	r2, [r3, #4]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	697a      	ldr	r2, [r7, #20]
 8005de2:	621a      	str	r2, [r3, #32]
}
 8005de4:	bf00      	nop
 8005de6:	371c      	adds	r7, #28
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr
 8005df0:	40012c00 	.word	0x40012c00
 8005df4:	40013400 	.word	0x40013400
 8005df8:	40015000 	.word	0x40015000
 8005dfc:	40014000 	.word	0x40014000
 8005e00:	40014400 	.word	0x40014400
 8005e04:	40014800 	.word	0x40014800

08005e08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b087      	sub	sp, #28
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a1b      	ldr	r3, [r3, #32]
 8005e16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6a1b      	ldr	r3, [r3, #32]
 8005e1c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	69db      	ldr	r3, [r3, #28]
 8005e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	021b      	lsls	r3, r3, #8
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005e56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	031b      	lsls	r3, r3, #12
 8005e5e:	697a      	ldr	r2, [r7, #20]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4a2c      	ldr	r2, [pc, #176]	@ (8005f18 <TIM_OC4_SetConfig+0x110>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d007      	beq.n	8005e7c <TIM_OC4_SetConfig+0x74>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a2b      	ldr	r2, [pc, #172]	@ (8005f1c <TIM_OC4_SetConfig+0x114>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d003      	beq.n	8005e7c <TIM_OC4_SetConfig+0x74>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a2a      	ldr	r2, [pc, #168]	@ (8005f20 <TIM_OC4_SetConfig+0x118>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d10d      	bne.n	8005e98 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005e82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	031b      	lsls	r3, r3, #12
 8005e8a:	697a      	ldr	r2, [r7, #20]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e96:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4a1f      	ldr	r2, [pc, #124]	@ (8005f18 <TIM_OC4_SetConfig+0x110>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d013      	beq.n	8005ec8 <TIM_OC4_SetConfig+0xc0>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a1e      	ldr	r2, [pc, #120]	@ (8005f1c <TIM_OC4_SetConfig+0x114>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d00f      	beq.n	8005ec8 <TIM_OC4_SetConfig+0xc0>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4a1e      	ldr	r2, [pc, #120]	@ (8005f24 <TIM_OC4_SetConfig+0x11c>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d00b      	beq.n	8005ec8 <TIM_OC4_SetConfig+0xc0>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a1d      	ldr	r2, [pc, #116]	@ (8005f28 <TIM_OC4_SetConfig+0x120>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d007      	beq.n	8005ec8 <TIM_OC4_SetConfig+0xc0>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a1c      	ldr	r2, [pc, #112]	@ (8005f2c <TIM_OC4_SetConfig+0x124>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d003      	beq.n	8005ec8 <TIM_OC4_SetConfig+0xc0>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a17      	ldr	r2, [pc, #92]	@ (8005f20 <TIM_OC4_SetConfig+0x118>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d113      	bne.n	8005ef0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ece:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005ed6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	695b      	ldr	r3, [r3, #20]
 8005edc:	019b      	lsls	r3, r3, #6
 8005ede:	693a      	ldr	r2, [r7, #16]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	699b      	ldr	r3, [r3, #24]
 8005ee8:	019b      	lsls	r3, r3, #6
 8005eea:	693a      	ldr	r2, [r7, #16]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	693a      	ldr	r2, [r7, #16]
 8005ef4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	685a      	ldr	r2, [r3, #4]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	697a      	ldr	r2, [r7, #20]
 8005f08:	621a      	str	r2, [r3, #32]
}
 8005f0a:	bf00      	nop
 8005f0c:	371c      	adds	r7, #28
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	40012c00 	.word	0x40012c00
 8005f1c:	40013400 	.word	0x40013400
 8005f20:	40015000 	.word	0x40015000
 8005f24:	40014000 	.word	0x40014000
 8005f28:	40014400 	.word	0x40014400
 8005f2c:	40014800 	.word	0x40014800

08005f30 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b087      	sub	sp, #28
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a1b      	ldr	r3, [r3, #32]
 8005f3e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6a1b      	ldr	r3, [r3, #32]
 8005f44:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005f74:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	041b      	lsls	r3, r3, #16
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a19      	ldr	r2, [pc, #100]	@ (8005fec <TIM_OC5_SetConfig+0xbc>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d013      	beq.n	8005fb2 <TIM_OC5_SetConfig+0x82>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a18      	ldr	r2, [pc, #96]	@ (8005ff0 <TIM_OC5_SetConfig+0xc0>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d00f      	beq.n	8005fb2 <TIM_OC5_SetConfig+0x82>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a17      	ldr	r2, [pc, #92]	@ (8005ff4 <TIM_OC5_SetConfig+0xc4>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d00b      	beq.n	8005fb2 <TIM_OC5_SetConfig+0x82>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a16      	ldr	r2, [pc, #88]	@ (8005ff8 <TIM_OC5_SetConfig+0xc8>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d007      	beq.n	8005fb2 <TIM_OC5_SetConfig+0x82>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a15      	ldr	r2, [pc, #84]	@ (8005ffc <TIM_OC5_SetConfig+0xcc>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d003      	beq.n	8005fb2 <TIM_OC5_SetConfig+0x82>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a14      	ldr	r2, [pc, #80]	@ (8006000 <TIM_OC5_SetConfig+0xd0>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d109      	bne.n	8005fc6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fb8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	021b      	lsls	r3, r3, #8
 8005fc0:	697a      	ldr	r2, [r7, #20]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	697a      	ldr	r2, [r7, #20]
 8005fca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	685a      	ldr	r2, [r3, #4]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	693a      	ldr	r2, [r7, #16]
 8005fde:	621a      	str	r2, [r3, #32]
}
 8005fe0:	bf00      	nop
 8005fe2:	371c      	adds	r7, #28
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr
 8005fec:	40012c00 	.word	0x40012c00
 8005ff0:	40013400 	.word	0x40013400
 8005ff4:	40014000 	.word	0x40014000
 8005ff8:	40014400 	.word	0x40014400
 8005ffc:	40014800 	.word	0x40014800
 8006000:	40015000 	.word	0x40015000

08006004 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006004:	b480      	push	{r7}
 8006006:	b087      	sub	sp, #28
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a1b      	ldr	r3, [r3, #32]
 8006012:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6a1b      	ldr	r3, [r3, #32]
 8006018:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800602a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006032:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006036:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	021b      	lsls	r3, r3, #8
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	4313      	orrs	r3, r2
 8006042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800604a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	051b      	lsls	r3, r3, #20
 8006052:	693a      	ldr	r2, [r7, #16]
 8006054:	4313      	orrs	r3, r2
 8006056:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4a1a      	ldr	r2, [pc, #104]	@ (80060c4 <TIM_OC6_SetConfig+0xc0>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d013      	beq.n	8006088 <TIM_OC6_SetConfig+0x84>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	4a19      	ldr	r2, [pc, #100]	@ (80060c8 <TIM_OC6_SetConfig+0xc4>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d00f      	beq.n	8006088 <TIM_OC6_SetConfig+0x84>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	4a18      	ldr	r2, [pc, #96]	@ (80060cc <TIM_OC6_SetConfig+0xc8>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d00b      	beq.n	8006088 <TIM_OC6_SetConfig+0x84>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4a17      	ldr	r2, [pc, #92]	@ (80060d0 <TIM_OC6_SetConfig+0xcc>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d007      	beq.n	8006088 <TIM_OC6_SetConfig+0x84>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a16      	ldr	r2, [pc, #88]	@ (80060d4 <TIM_OC6_SetConfig+0xd0>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d003      	beq.n	8006088 <TIM_OC6_SetConfig+0x84>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a15      	ldr	r2, [pc, #84]	@ (80060d8 <TIM_OC6_SetConfig+0xd4>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d109      	bne.n	800609c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800608e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	695b      	ldr	r3, [r3, #20]
 8006094:	029b      	lsls	r3, r3, #10
 8006096:	697a      	ldr	r2, [r7, #20]
 8006098:	4313      	orrs	r3, r2
 800609a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	697a      	ldr	r2, [r7, #20]
 80060a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	685a      	ldr	r2, [r3, #4]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	693a      	ldr	r2, [r7, #16]
 80060b4:	621a      	str	r2, [r3, #32]
}
 80060b6:	bf00      	nop
 80060b8:	371c      	adds	r7, #28
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	40012c00 	.word	0x40012c00
 80060c8:	40013400 	.word	0x40013400
 80060cc:	40014000 	.word	0x40014000
 80060d0:	40014400 	.word	0x40014400
 80060d4:	40014800 	.word	0x40014800
 80060d8:	40015000 	.word	0x40015000

080060dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060dc:	b480      	push	{r7}
 80060de:	b087      	sub	sp, #28
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6a1b      	ldr	r3, [r3, #32]
 80060ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6a1b      	ldr	r3, [r3, #32]
 80060f2:	f023 0201 	bic.w	r2, r3, #1
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	699b      	ldr	r3, [r3, #24]
 80060fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006106:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	011b      	lsls	r3, r3, #4
 800610c:	693a      	ldr	r2, [r7, #16]
 800610e:	4313      	orrs	r3, r2
 8006110:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	f023 030a 	bic.w	r3, r3, #10
 8006118:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	4313      	orrs	r3, r2
 8006120:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	697a      	ldr	r2, [r7, #20]
 800612c:	621a      	str	r2, [r3, #32]
}
 800612e:	bf00      	nop
 8006130:	371c      	adds	r7, #28
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr

0800613a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800613a:	b480      	push	{r7}
 800613c:	b087      	sub	sp, #28
 800613e:	af00      	add	r7, sp, #0
 8006140:	60f8      	str	r0, [r7, #12]
 8006142:	60b9      	str	r1, [r7, #8]
 8006144:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	6a1b      	ldr	r3, [r3, #32]
 800614a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6a1b      	ldr	r3, [r3, #32]
 8006150:	f023 0210 	bic.w	r2, r3, #16
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	699b      	ldr	r3, [r3, #24]
 800615c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006164:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	031b      	lsls	r3, r3, #12
 800616a:	693a      	ldr	r2, [r7, #16]
 800616c:	4313      	orrs	r3, r2
 800616e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006176:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	011b      	lsls	r3, r3, #4
 800617c:	697a      	ldr	r2, [r7, #20]
 800617e:	4313      	orrs	r3, r2
 8006180:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	693a      	ldr	r2, [r7, #16]
 8006186:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	697a      	ldr	r2, [r7, #20]
 800618c:	621a      	str	r2, [r3, #32]
}
 800618e:	bf00      	nop
 8006190:	371c      	adds	r7, #28
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr

0800619a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800619a:	b480      	push	{r7}
 800619c:	b085      	sub	sp, #20
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
 80061a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80061b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061b6:	683a      	ldr	r2, [r7, #0]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	f043 0307 	orr.w	r3, r3, #7
 80061c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	609a      	str	r2, [r3, #8]
}
 80061c8:	bf00      	nop
 80061ca:	3714      	adds	r7, #20
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b087      	sub	sp, #28
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	607a      	str	r2, [r7, #4]
 80061e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80061ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	021a      	lsls	r2, r3, #8
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	431a      	orrs	r2, r3
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	697a      	ldr	r2, [r7, #20]
 80061fe:	4313      	orrs	r3, r2
 8006200:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	697a      	ldr	r2, [r7, #20]
 8006206:	609a      	str	r2, [r3, #8]
}
 8006208:	bf00      	nop
 800620a:	371c      	adds	r7, #28
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006214:	b480      	push	{r7}
 8006216:	b087      	sub	sp, #28
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	f003 031f 	and.w	r3, r3, #31
 8006226:	2201      	movs	r2, #1
 8006228:	fa02 f303 	lsl.w	r3, r2, r3
 800622c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6a1a      	ldr	r2, [r3, #32]
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	43db      	mvns	r3, r3
 8006236:	401a      	ands	r2, r3
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6a1a      	ldr	r2, [r3, #32]
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	f003 031f 	and.w	r3, r3, #31
 8006246:	6879      	ldr	r1, [r7, #4]
 8006248:	fa01 f303 	lsl.w	r3, r1, r3
 800624c:	431a      	orrs	r2, r3
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	621a      	str	r2, [r3, #32]
}
 8006252:	bf00      	nop
 8006254:	371c      	adds	r7, #28
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr
	...

08006260 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006260:	b480      	push	{r7}
 8006262:	b085      	sub	sp, #20
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006270:	2b01      	cmp	r3, #1
 8006272:	d101      	bne.n	8006278 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006274:	2302      	movs	r3, #2
 8006276:	e074      	b.n	8006362 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2202      	movs	r2, #2
 8006284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a34      	ldr	r2, [pc, #208]	@ (8006370 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d009      	beq.n	80062b6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a33      	ldr	r2, [pc, #204]	@ (8006374 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d004      	beq.n	80062b6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a31      	ldr	r2, [pc, #196]	@ (8006378 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d108      	bne.n	80062c8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80062bc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80062ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68fa      	ldr	r2, [r7, #12]
 80062da:	4313      	orrs	r3, r2
 80062dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	68fa      	ldr	r2, [r7, #12]
 80062e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a21      	ldr	r2, [pc, #132]	@ (8006370 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d022      	beq.n	8006336 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062f8:	d01d      	beq.n	8006336 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a1f      	ldr	r2, [pc, #124]	@ (800637c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d018      	beq.n	8006336 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a1d      	ldr	r2, [pc, #116]	@ (8006380 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d013      	beq.n	8006336 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a1c      	ldr	r2, [pc, #112]	@ (8006384 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d00e      	beq.n	8006336 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a15      	ldr	r2, [pc, #84]	@ (8006374 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d009      	beq.n	8006336 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a18      	ldr	r2, [pc, #96]	@ (8006388 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d004      	beq.n	8006336 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a11      	ldr	r2, [pc, #68]	@ (8006378 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d10c      	bne.n	8006350 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800633c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	68ba      	ldr	r2, [r7, #8]
 8006344:	4313      	orrs	r3, r2
 8006346:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68ba      	ldr	r2, [r7, #8]
 800634e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006360:	2300      	movs	r3, #0
}
 8006362:	4618      	mov	r0, r3
 8006364:	3714      	adds	r7, #20
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr
 800636e:	bf00      	nop
 8006370:	40012c00 	.word	0x40012c00
 8006374:	40013400 	.word	0x40013400
 8006378:	40015000 	.word	0x40015000
 800637c:	40000400 	.word	0x40000400
 8006380:	40000800 	.word	0x40000800
 8006384:	40000c00 	.word	0x40000c00
 8006388:	40014000 	.word	0x40014000

0800638c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800638c:	b480      	push	{r7}
 800638e:	b085      	sub	sp, #20
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006396:	2300      	movs	r3, #0
 8006398:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d101      	bne.n	80063a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80063a4:	2302      	movs	r3, #2
 80063a6:	e078      	b.n	800649a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	695b      	ldr	r3, [r3, #20]
 8006400:	4313      	orrs	r3, r2
 8006402:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800640e:	4313      	orrs	r3, r2
 8006410:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	699b      	ldr	r3, [r3, #24]
 800641c:	041b      	lsls	r3, r3, #16
 800641e:	4313      	orrs	r3, r2
 8006420:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	69db      	ldr	r3, [r3, #28]
 800642c:	4313      	orrs	r3, r2
 800642e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a1c      	ldr	r2, [pc, #112]	@ (80064a8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d009      	beq.n	800644e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a1b      	ldr	r2, [pc, #108]	@ (80064ac <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d004      	beq.n	800644e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a19      	ldr	r2, [pc, #100]	@ (80064b0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d11c      	bne.n	8006488 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006458:	051b      	lsls	r3, r3, #20
 800645a:	4313      	orrs	r3, r2
 800645c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	6a1b      	ldr	r3, [r3, #32]
 8006468:	4313      	orrs	r3, r2
 800646a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006476:	4313      	orrs	r3, r2
 8006478:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006484:	4313      	orrs	r3, r2
 8006486:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	3714      	adds	r7, #20
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr
 80064a6:	bf00      	nop
 80064a8:	40012c00 	.word	0x40012c00
 80064ac:	40013400 	.word	0x40013400
 80064b0:	40015000 	.word	0x40015000

080064b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064bc:	bf00      	nop
 80064be:	370c      	adds	r7, #12
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064d0:	bf00      	nop
 80064d2:	370c      	adds	r7, #12
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80064e4:	bf00      	nop
 80064e6:	370c      	adds	r7, #12
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80064f8:	bf00      	nop
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800650c:	bf00      	nop
 800650e:	370c      	adds	r7, #12
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006518:	b480      	push	{r7}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006520:	bf00      	nop
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800652c:	b480      	push	{r7}
 800652e:	b083      	sub	sp, #12
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006534:	bf00      	nop
 8006536:	370c      	adds	r7, #12
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b082      	sub	sp, #8
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d101      	bne.n	8006552 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	e042      	b.n	80065d8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006558:	2b00      	cmp	r3, #0
 800655a:	d106      	bne.n	800656a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f7fb fc9f 	bl	8001ea8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2224      	movs	r2, #36	@ 0x24
 800656e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f022 0201 	bic.w	r2, r2, #1
 8006580:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006586:	2b00      	cmp	r3, #0
 8006588:	d002      	beq.n	8006590 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 ffbe 	bl	800750c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 fcbf 	bl	8006f14 <UART_SetConfig>
 8006596:	4603      	mov	r3, r0
 8006598:	2b01      	cmp	r3, #1
 800659a:	d101      	bne.n	80065a0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e01b      	b.n	80065d8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	685a      	ldr	r2, [r3, #4]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80065ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	689a      	ldr	r2, [r3, #8]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80065be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f042 0201 	orr.w	r2, r2, #1
 80065ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f001 f83d 	bl	8007650 <UART_CheckIdleState>
 80065d6:	4603      	mov	r3, r0
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3708      	adds	r7, #8
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b08a      	sub	sp, #40	@ 0x28
 80065e4:	af02      	add	r7, sp, #8
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	603b      	str	r3, [r7, #0]
 80065ec:	4613      	mov	r3, r2
 80065ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065f6:	2b20      	cmp	r3, #32
 80065f8:	d17b      	bne.n	80066f2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d002      	beq.n	8006606 <HAL_UART_Transmit+0x26>
 8006600:	88fb      	ldrh	r3, [r7, #6]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d101      	bne.n	800660a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	e074      	b.n	80066f4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2200      	movs	r2, #0
 800660e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2221      	movs	r2, #33	@ 0x21
 8006616:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800661a:	f7fb fead 	bl	8002378 <HAL_GetTick>
 800661e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	88fa      	ldrh	r2, [r7, #6]
 8006624:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	88fa      	ldrh	r2, [r7, #6]
 800662c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006638:	d108      	bne.n	800664c <HAL_UART_Transmit+0x6c>
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d104      	bne.n	800664c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006642:	2300      	movs	r3, #0
 8006644:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	61bb      	str	r3, [r7, #24]
 800664a:	e003      	b.n	8006654 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006650:	2300      	movs	r3, #0
 8006652:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006654:	e030      	b.n	80066b8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	9300      	str	r3, [sp, #0]
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	2200      	movs	r2, #0
 800665e:	2180      	movs	r1, #128	@ 0x80
 8006660:	68f8      	ldr	r0, [r7, #12]
 8006662:	f001 f89f 	bl	80077a4 <UART_WaitOnFlagUntilTimeout>
 8006666:	4603      	mov	r3, r0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d005      	beq.n	8006678 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2220      	movs	r2, #32
 8006670:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006674:	2303      	movs	r3, #3
 8006676:	e03d      	b.n	80066f4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d10b      	bne.n	8006696 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	881b      	ldrh	r3, [r3, #0]
 8006682:	461a      	mov	r2, r3
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800668c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	3302      	adds	r3, #2
 8006692:	61bb      	str	r3, [r7, #24]
 8006694:	e007      	b.n	80066a6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	781a      	ldrb	r2, [r3, #0]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	3301      	adds	r3, #1
 80066a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	3b01      	subs	r3, #1
 80066b0:	b29a      	uxth	r2, r3
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80066be:	b29b      	uxth	r3, r3
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d1c8      	bne.n	8006656 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	9300      	str	r3, [sp, #0]
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	2200      	movs	r2, #0
 80066cc:	2140      	movs	r1, #64	@ 0x40
 80066ce:	68f8      	ldr	r0, [r7, #12]
 80066d0:	f001 f868 	bl	80077a4 <UART_WaitOnFlagUntilTimeout>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d005      	beq.n	80066e6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2220      	movs	r2, #32
 80066de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80066e2:	2303      	movs	r3, #3
 80066e4:	e006      	b.n	80066f4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2220      	movs	r2, #32
 80066ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80066ee:	2300      	movs	r3, #0
 80066f0:	e000      	b.n	80066f4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80066f2:	2302      	movs	r3, #2
  }
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3720      	adds	r7, #32
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b08a      	sub	sp, #40	@ 0x28
 8006700:	af02      	add	r7, sp, #8
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	603b      	str	r3, [r7, #0]
 8006708:	4613      	mov	r3, r2
 800670a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006712:	2b20      	cmp	r3, #32
 8006714:	f040 80b5 	bne.w	8006882 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d002      	beq.n	8006724 <HAL_UART_Receive+0x28>
 800671e:	88fb      	ldrh	r3, [r7, #6]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d101      	bne.n	8006728 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	e0ad      	b.n	8006884 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2200      	movs	r2, #0
 800672c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2222      	movs	r2, #34	@ 0x22
 8006734:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2200      	movs	r2, #0
 800673c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800673e:	f7fb fe1b 	bl	8002378 <HAL_GetTick>
 8006742:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	88fa      	ldrh	r2, [r7, #6]
 8006748:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	88fa      	ldrh	r2, [r7, #6]
 8006750:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800675c:	d10e      	bne.n	800677c <HAL_UART_Receive+0x80>
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d105      	bne.n	8006772 <HAL_UART_Receive+0x76>
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800676c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006770:	e02d      	b.n	80067ce <HAL_UART_Receive+0xd2>
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	22ff      	movs	r2, #255	@ 0xff
 8006776:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800677a:	e028      	b.n	80067ce <HAL_UART_Receive+0xd2>
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d10d      	bne.n	80067a0 <HAL_UART_Receive+0xa4>
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	691b      	ldr	r3, [r3, #16]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d104      	bne.n	8006796 <HAL_UART_Receive+0x9a>
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	22ff      	movs	r2, #255	@ 0xff
 8006790:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006794:	e01b      	b.n	80067ce <HAL_UART_Receive+0xd2>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	227f      	movs	r2, #127	@ 0x7f
 800679a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800679e:	e016      	b.n	80067ce <HAL_UART_Receive+0xd2>
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80067a8:	d10d      	bne.n	80067c6 <HAL_UART_Receive+0xca>
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d104      	bne.n	80067bc <HAL_UART_Receive+0xc0>
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	227f      	movs	r2, #127	@ 0x7f
 80067b6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80067ba:	e008      	b.n	80067ce <HAL_UART_Receive+0xd2>
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	223f      	movs	r2, #63	@ 0x3f
 80067c0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80067c4:	e003      	b.n	80067ce <HAL_UART_Receive+0xd2>
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2200      	movs	r2, #0
 80067ca:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80067d4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067de:	d108      	bne.n	80067f2 <HAL_UART_Receive+0xf6>
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d104      	bne.n	80067f2 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80067e8:	2300      	movs	r3, #0
 80067ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	61bb      	str	r3, [r7, #24]
 80067f0:	e003      	b.n	80067fa <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067f6:	2300      	movs	r3, #0
 80067f8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80067fa:	e036      	b.n	800686a <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	9300      	str	r3, [sp, #0]
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	2200      	movs	r2, #0
 8006804:	2120      	movs	r1, #32
 8006806:	68f8      	ldr	r0, [r7, #12]
 8006808:	f000 ffcc 	bl	80077a4 <UART_WaitOnFlagUntilTimeout>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d005      	beq.n	800681e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2220      	movs	r2, #32
 8006816:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800681a:	2303      	movs	r3, #3
 800681c:	e032      	b.n	8006884 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800681e:	69fb      	ldr	r3, [r7, #28]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d10c      	bne.n	800683e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800682a:	b29a      	uxth	r2, r3
 800682c:	8a7b      	ldrh	r3, [r7, #18]
 800682e:	4013      	ands	r3, r2
 8006830:	b29a      	uxth	r2, r3
 8006832:	69bb      	ldr	r3, [r7, #24]
 8006834:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	3302      	adds	r3, #2
 800683a:	61bb      	str	r3, [r7, #24]
 800683c:	e00c      	b.n	8006858 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006844:	b2da      	uxtb	r2, r3
 8006846:	8a7b      	ldrh	r3, [r7, #18]
 8006848:	b2db      	uxtb	r3, r3
 800684a:	4013      	ands	r3, r2
 800684c:	b2da      	uxtb	r2, r3
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006852:	69fb      	ldr	r3, [r7, #28]
 8006854:	3301      	adds	r3, #1
 8006856:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800685e:	b29b      	uxth	r3, r3
 8006860:	3b01      	subs	r3, #1
 8006862:	b29a      	uxth	r2, r3
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006870:	b29b      	uxth	r3, r3
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1c2      	bne.n	80067fc <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2220      	movs	r2, #32
 800687a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800687e:	2300      	movs	r3, #0
 8006880:	e000      	b.n	8006884 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8006882:	2302      	movs	r3, #2
  }
}
 8006884:	4618      	mov	r0, r3
 8006886:	3720      	adds	r7, #32
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b0ba      	sub	sp, #232	@ 0xe8
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	69db      	ldr	r3, [r3, #28]
 800689a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80068b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80068b6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80068ba:	4013      	ands	r3, r2
 80068bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80068c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d11b      	bne.n	8006900 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80068c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068cc:	f003 0320 	and.w	r3, r3, #32
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d015      	beq.n	8006900 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80068d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068d8:	f003 0320 	and.w	r3, r3, #32
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d105      	bne.n	80068ec <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80068e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d009      	beq.n	8006900 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	f000 82e3 	beq.w	8006ebc <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	4798      	blx	r3
      }
      return;
 80068fe:	e2dd      	b.n	8006ebc <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006900:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006904:	2b00      	cmp	r3, #0
 8006906:	f000 8123 	beq.w	8006b50 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800690a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800690e:	4b8d      	ldr	r3, [pc, #564]	@ (8006b44 <HAL_UART_IRQHandler+0x2b8>)
 8006910:	4013      	ands	r3, r2
 8006912:	2b00      	cmp	r3, #0
 8006914:	d106      	bne.n	8006924 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006916:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800691a:	4b8b      	ldr	r3, [pc, #556]	@ (8006b48 <HAL_UART_IRQHandler+0x2bc>)
 800691c:	4013      	ands	r3, r2
 800691e:	2b00      	cmp	r3, #0
 8006920:	f000 8116 	beq.w	8006b50 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006928:	f003 0301 	and.w	r3, r3, #1
 800692c:	2b00      	cmp	r3, #0
 800692e:	d011      	beq.n	8006954 <HAL_UART_IRQHandler+0xc8>
 8006930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006934:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006938:	2b00      	cmp	r3, #0
 800693a:	d00b      	beq.n	8006954 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	2201      	movs	r2, #1
 8006942:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800694a:	f043 0201 	orr.w	r2, r3, #1
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006958:	f003 0302 	and.w	r3, r3, #2
 800695c:	2b00      	cmp	r3, #0
 800695e:	d011      	beq.n	8006984 <HAL_UART_IRQHandler+0xf8>
 8006960:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006964:	f003 0301 	and.w	r3, r3, #1
 8006968:	2b00      	cmp	r3, #0
 800696a:	d00b      	beq.n	8006984 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	2202      	movs	r2, #2
 8006972:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800697a:	f043 0204 	orr.w	r2, r3, #4
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006988:	f003 0304 	and.w	r3, r3, #4
 800698c:	2b00      	cmp	r3, #0
 800698e:	d011      	beq.n	80069b4 <HAL_UART_IRQHandler+0x128>
 8006990:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006994:	f003 0301 	and.w	r3, r3, #1
 8006998:	2b00      	cmp	r3, #0
 800699a:	d00b      	beq.n	80069b4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2204      	movs	r2, #4
 80069a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069aa:	f043 0202 	orr.w	r2, r3, #2
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80069b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069b8:	f003 0308 	and.w	r3, r3, #8
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d017      	beq.n	80069f0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80069c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069c4:	f003 0320 	and.w	r3, r3, #32
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d105      	bne.n	80069d8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80069cc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80069d0:	4b5c      	ldr	r3, [pc, #368]	@ (8006b44 <HAL_UART_IRQHandler+0x2b8>)
 80069d2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d00b      	beq.n	80069f0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2208      	movs	r2, #8
 80069de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069e6:	f043 0208 	orr.w	r2, r3, #8
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80069f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d012      	beq.n	8006a22 <HAL_UART_IRQHandler+0x196>
 80069fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a00:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d00c      	beq.n	8006a22 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006a10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a18:	f043 0220 	orr.w	r2, r3, #32
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f000 8249 	beq.w	8006ec0 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a32:	f003 0320 	and.w	r3, r3, #32
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d013      	beq.n	8006a62 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006a3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a3e:	f003 0320 	and.w	r3, r3, #32
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d105      	bne.n	8006a52 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006a46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d007      	beq.n	8006a62 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d003      	beq.n	8006a62 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a68:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a76:	2b40      	cmp	r3, #64	@ 0x40
 8006a78:	d005      	beq.n	8006a86 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006a7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a7e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d054      	beq.n	8006b30 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 fef9 	bl	800787e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a96:	2b40      	cmp	r3, #64	@ 0x40
 8006a98:	d146      	bne.n	8006b28 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	3308      	adds	r3, #8
 8006aa0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006aa8:	e853 3f00 	ldrex	r3, [r3]
 8006aac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006ab0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006ab4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ab8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	3308      	adds	r3, #8
 8006ac2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006ac6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006aca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ace:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006ad2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006ad6:	e841 2300 	strex	r3, r2, [r1]
 8006ada:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006ade:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d1d9      	bne.n	8006a9a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d017      	beq.n	8006b20 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006af6:	4a15      	ldr	r2, [pc, #84]	@ (8006b4c <HAL_UART_IRQHandler+0x2c0>)
 8006af8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b00:	4618      	mov	r0, r3
 8006b02:	f7fb fdcf 	bl	80026a4 <HAL_DMA_Abort_IT>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d019      	beq.n	8006b40 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006b1a:	4610      	mov	r0, r2
 8006b1c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b1e:	e00f      	b.n	8006b40 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 f9e1 	bl	8006ee8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b26:	e00b      	b.n	8006b40 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 f9dd 	bl	8006ee8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b2e:	e007      	b.n	8006b40 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 f9d9 	bl	8006ee8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006b3e:	e1bf      	b.n	8006ec0 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b40:	bf00      	nop
    return;
 8006b42:	e1bd      	b.n	8006ec0 <HAL_UART_IRQHandler+0x634>
 8006b44:	10000001 	.word	0x10000001
 8006b48:	04000120 	.word	0x04000120
 8006b4c:	0800794b 	.word	0x0800794b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	f040 8153 	bne.w	8006e00 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b5e:	f003 0310 	and.w	r3, r3, #16
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	f000 814c 	beq.w	8006e00 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b6c:	f003 0310 	and.w	r3, r3, #16
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	f000 8145 	beq.w	8006e00 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	2210      	movs	r2, #16
 8006b7c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b88:	2b40      	cmp	r3, #64	@ 0x40
 8006b8a:	f040 80bb 	bne.w	8006d04 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006b9c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f000 818f 	beq.w	8006ec4 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006bac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	f080 8187 	bcs.w	8006ec4 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006bbc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 0320 	and.w	r3, r3, #32
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	f040 8087 	bne.w	8006ce2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006be0:	e853 3f00 	ldrex	r3, [r3]
 8006be4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006be8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006bec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006bf0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006bfe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006c02:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c06:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006c0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006c0e:	e841 2300 	strex	r3, r2, [r1]
 8006c12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006c16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d1da      	bne.n	8006bd4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	3308      	adds	r3, #8
 8006c24:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006c28:	e853 3f00 	ldrex	r3, [r3]
 8006c2c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006c2e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006c30:	f023 0301 	bic.w	r3, r3, #1
 8006c34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	3308      	adds	r3, #8
 8006c3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006c42:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006c46:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c48:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006c4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006c4e:	e841 2300 	strex	r3, r2, [r1]
 8006c52:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006c54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d1e1      	bne.n	8006c1e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	3308      	adds	r3, #8
 8006c60:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006c64:	e853 3f00 	ldrex	r3, [r3]
 8006c68:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006c6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	3308      	adds	r3, #8
 8006c7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006c7e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006c80:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c82:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006c84:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006c86:	e841 2300 	strex	r3, r2, [r1]
 8006c8a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006c8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d1e3      	bne.n	8006c5a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2220      	movs	r2, #32
 8006c96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ca8:	e853 3f00 	ldrex	r3, [r3]
 8006cac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006cae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cb0:	f023 0310 	bic.w	r3, r3, #16
 8006cb4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006cc2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006cc4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006cc8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006cca:	e841 2300 	strex	r3, r2, [r1]
 8006cce:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006cd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d1e4      	bne.n	8006ca0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f7fb fc88 	bl	80025f2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2202      	movs	r2, #2
 8006ce6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	1ad3      	subs	r3, r2, r3
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f000 f8fd 	bl	8006efc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006d02:	e0df      	b.n	8006ec4 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	1ad3      	subs	r3, r2, r3
 8006d14:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	f000 80d1 	beq.w	8006ec8 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8006d26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	f000 80cc 	beq.w	8006ec8 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d38:	e853 3f00 	ldrex	r3, [r3]
 8006d3c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d44:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006d52:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d54:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d56:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d58:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d5a:	e841 2300 	strex	r3, r2, [r1]
 8006d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d1e4      	bne.n	8006d30 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	3308      	adds	r3, #8
 8006d6c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d70:	e853 3f00 	ldrex	r3, [r3]
 8006d74:	623b      	str	r3, [r7, #32]
   return(result);
 8006d76:	6a3b      	ldr	r3, [r7, #32]
 8006d78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d7c:	f023 0301 	bic.w	r3, r3, #1
 8006d80:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	3308      	adds	r3, #8
 8006d8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006d8e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d96:	e841 2300 	strex	r3, r2, [r1]
 8006d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d1e1      	bne.n	8006d66 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2220      	movs	r2, #32
 8006da6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	e853 3f00 	ldrex	r3, [r3]
 8006dc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f023 0310 	bic.w	r3, r3, #16
 8006dca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006dd8:	61fb      	str	r3, [r7, #28]
 8006dda:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ddc:	69b9      	ldr	r1, [r7, #24]
 8006dde:	69fa      	ldr	r2, [r7, #28]
 8006de0:	e841 2300 	strex	r3, r2, [r1]
 8006de4:	617b      	str	r3, [r7, #20]
   return(result);
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d1e4      	bne.n	8006db6 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2202      	movs	r2, #2
 8006df0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006df2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006df6:	4619      	mov	r1, r3
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 f87f 	bl	8006efc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006dfe:	e063      	b.n	8006ec8 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006e00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d00e      	beq.n	8006e2a <HAL_UART_IRQHandler+0x59e>
 8006e0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d008      	beq.n	8006e2a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006e20:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 fdd2 	bl	80079cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e28:	e051      	b.n	8006ece <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d014      	beq.n	8006e60 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006e36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d105      	bne.n	8006e4e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006e42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d008      	beq.n	8006e60 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d03a      	beq.n	8006ecc <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	4798      	blx	r3
    }
    return;
 8006e5e:	e035      	b.n	8006ecc <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d009      	beq.n	8006e80 <HAL_UART_IRQHandler+0x5f4>
 8006e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d003      	beq.n	8006e80 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f000 fd7c 	bl	8007976 <UART_EndTransmit_IT>
    return;
 8006e7e:	e026      	b.n	8006ece <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006e80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e84:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d009      	beq.n	8006ea0 <HAL_UART_IRQHandler+0x614>
 8006e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e90:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d003      	beq.n	8006ea0 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 fdab 	bl	80079f4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e9e:	e016      	b.n	8006ece <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006ea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ea4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d010      	beq.n	8006ece <HAL_UART_IRQHandler+0x642>
 8006eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	da0c      	bge.n	8006ece <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f000 fd93 	bl	80079e0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006eba:	e008      	b.n	8006ece <HAL_UART_IRQHandler+0x642>
      return;
 8006ebc:	bf00      	nop
 8006ebe:	e006      	b.n	8006ece <HAL_UART_IRQHandler+0x642>
    return;
 8006ec0:	bf00      	nop
 8006ec2:	e004      	b.n	8006ece <HAL_UART_IRQHandler+0x642>
      return;
 8006ec4:	bf00      	nop
 8006ec6:	e002      	b.n	8006ece <HAL_UART_IRQHandler+0x642>
      return;
 8006ec8:	bf00      	nop
 8006eca:	e000      	b.n	8006ece <HAL_UART_IRQHandler+0x642>
    return;
 8006ecc:	bf00      	nop
  }
}
 8006ece:	37e8      	adds	r7, #232	@ 0xe8
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006edc:	bf00      	nop
 8006ede:	370c      	adds	r7, #12
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006ef0:	bf00      	nop
 8006ef2:	370c      	adds	r7, #12
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	460b      	mov	r3, r1
 8006f06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f08:	bf00      	nop
 8006f0a:	370c      	adds	r7, #12
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr

08006f14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f18:	b08c      	sub	sp, #48	@ 0x30
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	689a      	ldr	r2, [r3, #8]
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	691b      	ldr	r3, [r3, #16]
 8006f2c:	431a      	orrs	r2, r3
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	695b      	ldr	r3, [r3, #20]
 8006f32:	431a      	orrs	r2, r3
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	69db      	ldr	r3, [r3, #28]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	4baa      	ldr	r3, [pc, #680]	@ (80071ec <UART_SetConfig+0x2d8>)
 8006f44:	4013      	ands	r3, r2
 8006f46:	697a      	ldr	r2, [r7, #20]
 8006f48:	6812      	ldr	r2, [r2, #0]
 8006f4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f4c:	430b      	orrs	r3, r1
 8006f4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	68da      	ldr	r2, [r3, #12]
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	430a      	orrs	r2, r1
 8006f64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	699b      	ldr	r3, [r3, #24]
 8006f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a9f      	ldr	r2, [pc, #636]	@ (80071f0 <UART_SetConfig+0x2dc>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d004      	beq.n	8006f80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	6a1b      	ldr	r3, [r3, #32]
 8006f7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006f8a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006f8e:	697a      	ldr	r2, [r7, #20]
 8006f90:	6812      	ldr	r2, [r2, #0]
 8006f92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f94:	430b      	orrs	r3, r1
 8006f96:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f9e:	f023 010f 	bic.w	r1, r3, #15
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	430a      	orrs	r2, r1
 8006fac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a90      	ldr	r2, [pc, #576]	@ (80071f4 <UART_SetConfig+0x2e0>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d125      	bne.n	8007004 <UART_SetConfig+0xf0>
 8006fb8:	4b8f      	ldr	r3, [pc, #572]	@ (80071f8 <UART_SetConfig+0x2e4>)
 8006fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fbe:	f003 0303 	and.w	r3, r3, #3
 8006fc2:	2b03      	cmp	r3, #3
 8006fc4:	d81a      	bhi.n	8006ffc <UART_SetConfig+0xe8>
 8006fc6:	a201      	add	r2, pc, #4	@ (adr r2, 8006fcc <UART_SetConfig+0xb8>)
 8006fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fcc:	08006fdd 	.word	0x08006fdd
 8006fd0:	08006fed 	.word	0x08006fed
 8006fd4:	08006fe5 	.word	0x08006fe5
 8006fd8:	08006ff5 	.word	0x08006ff5
 8006fdc:	2301      	movs	r3, #1
 8006fde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fe2:	e116      	b.n	8007212 <UART_SetConfig+0x2fe>
 8006fe4:	2302      	movs	r3, #2
 8006fe6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fea:	e112      	b.n	8007212 <UART_SetConfig+0x2fe>
 8006fec:	2304      	movs	r3, #4
 8006fee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ff2:	e10e      	b.n	8007212 <UART_SetConfig+0x2fe>
 8006ff4:	2308      	movs	r3, #8
 8006ff6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ffa:	e10a      	b.n	8007212 <UART_SetConfig+0x2fe>
 8006ffc:	2310      	movs	r3, #16
 8006ffe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007002:	e106      	b.n	8007212 <UART_SetConfig+0x2fe>
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a7c      	ldr	r2, [pc, #496]	@ (80071fc <UART_SetConfig+0x2e8>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d138      	bne.n	8007080 <UART_SetConfig+0x16c>
 800700e:	4b7a      	ldr	r3, [pc, #488]	@ (80071f8 <UART_SetConfig+0x2e4>)
 8007010:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007014:	f003 030c 	and.w	r3, r3, #12
 8007018:	2b0c      	cmp	r3, #12
 800701a:	d82d      	bhi.n	8007078 <UART_SetConfig+0x164>
 800701c:	a201      	add	r2, pc, #4	@ (adr r2, 8007024 <UART_SetConfig+0x110>)
 800701e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007022:	bf00      	nop
 8007024:	08007059 	.word	0x08007059
 8007028:	08007079 	.word	0x08007079
 800702c:	08007079 	.word	0x08007079
 8007030:	08007079 	.word	0x08007079
 8007034:	08007069 	.word	0x08007069
 8007038:	08007079 	.word	0x08007079
 800703c:	08007079 	.word	0x08007079
 8007040:	08007079 	.word	0x08007079
 8007044:	08007061 	.word	0x08007061
 8007048:	08007079 	.word	0x08007079
 800704c:	08007079 	.word	0x08007079
 8007050:	08007079 	.word	0x08007079
 8007054:	08007071 	.word	0x08007071
 8007058:	2300      	movs	r3, #0
 800705a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800705e:	e0d8      	b.n	8007212 <UART_SetConfig+0x2fe>
 8007060:	2302      	movs	r3, #2
 8007062:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007066:	e0d4      	b.n	8007212 <UART_SetConfig+0x2fe>
 8007068:	2304      	movs	r3, #4
 800706a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800706e:	e0d0      	b.n	8007212 <UART_SetConfig+0x2fe>
 8007070:	2308      	movs	r3, #8
 8007072:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007076:	e0cc      	b.n	8007212 <UART_SetConfig+0x2fe>
 8007078:	2310      	movs	r3, #16
 800707a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800707e:	e0c8      	b.n	8007212 <UART_SetConfig+0x2fe>
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a5e      	ldr	r2, [pc, #376]	@ (8007200 <UART_SetConfig+0x2ec>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d125      	bne.n	80070d6 <UART_SetConfig+0x1c2>
 800708a:	4b5b      	ldr	r3, [pc, #364]	@ (80071f8 <UART_SetConfig+0x2e4>)
 800708c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007090:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007094:	2b30      	cmp	r3, #48	@ 0x30
 8007096:	d016      	beq.n	80070c6 <UART_SetConfig+0x1b2>
 8007098:	2b30      	cmp	r3, #48	@ 0x30
 800709a:	d818      	bhi.n	80070ce <UART_SetConfig+0x1ba>
 800709c:	2b20      	cmp	r3, #32
 800709e:	d00a      	beq.n	80070b6 <UART_SetConfig+0x1a2>
 80070a0:	2b20      	cmp	r3, #32
 80070a2:	d814      	bhi.n	80070ce <UART_SetConfig+0x1ba>
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d002      	beq.n	80070ae <UART_SetConfig+0x19a>
 80070a8:	2b10      	cmp	r3, #16
 80070aa:	d008      	beq.n	80070be <UART_SetConfig+0x1aa>
 80070ac:	e00f      	b.n	80070ce <UART_SetConfig+0x1ba>
 80070ae:	2300      	movs	r3, #0
 80070b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070b4:	e0ad      	b.n	8007212 <UART_SetConfig+0x2fe>
 80070b6:	2302      	movs	r3, #2
 80070b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070bc:	e0a9      	b.n	8007212 <UART_SetConfig+0x2fe>
 80070be:	2304      	movs	r3, #4
 80070c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070c4:	e0a5      	b.n	8007212 <UART_SetConfig+0x2fe>
 80070c6:	2308      	movs	r3, #8
 80070c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070cc:	e0a1      	b.n	8007212 <UART_SetConfig+0x2fe>
 80070ce:	2310      	movs	r3, #16
 80070d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070d4:	e09d      	b.n	8007212 <UART_SetConfig+0x2fe>
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a4a      	ldr	r2, [pc, #296]	@ (8007204 <UART_SetConfig+0x2f0>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d125      	bne.n	800712c <UART_SetConfig+0x218>
 80070e0:	4b45      	ldr	r3, [pc, #276]	@ (80071f8 <UART_SetConfig+0x2e4>)
 80070e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070e6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80070ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80070ec:	d016      	beq.n	800711c <UART_SetConfig+0x208>
 80070ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80070f0:	d818      	bhi.n	8007124 <UART_SetConfig+0x210>
 80070f2:	2b80      	cmp	r3, #128	@ 0x80
 80070f4:	d00a      	beq.n	800710c <UART_SetConfig+0x1f8>
 80070f6:	2b80      	cmp	r3, #128	@ 0x80
 80070f8:	d814      	bhi.n	8007124 <UART_SetConfig+0x210>
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d002      	beq.n	8007104 <UART_SetConfig+0x1f0>
 80070fe:	2b40      	cmp	r3, #64	@ 0x40
 8007100:	d008      	beq.n	8007114 <UART_SetConfig+0x200>
 8007102:	e00f      	b.n	8007124 <UART_SetConfig+0x210>
 8007104:	2300      	movs	r3, #0
 8007106:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800710a:	e082      	b.n	8007212 <UART_SetConfig+0x2fe>
 800710c:	2302      	movs	r3, #2
 800710e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007112:	e07e      	b.n	8007212 <UART_SetConfig+0x2fe>
 8007114:	2304      	movs	r3, #4
 8007116:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800711a:	e07a      	b.n	8007212 <UART_SetConfig+0x2fe>
 800711c:	2308      	movs	r3, #8
 800711e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007122:	e076      	b.n	8007212 <UART_SetConfig+0x2fe>
 8007124:	2310      	movs	r3, #16
 8007126:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800712a:	e072      	b.n	8007212 <UART_SetConfig+0x2fe>
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a35      	ldr	r2, [pc, #212]	@ (8007208 <UART_SetConfig+0x2f4>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d12a      	bne.n	800718c <UART_SetConfig+0x278>
 8007136:	4b30      	ldr	r3, [pc, #192]	@ (80071f8 <UART_SetConfig+0x2e4>)
 8007138:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800713c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007140:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007144:	d01a      	beq.n	800717c <UART_SetConfig+0x268>
 8007146:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800714a:	d81b      	bhi.n	8007184 <UART_SetConfig+0x270>
 800714c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007150:	d00c      	beq.n	800716c <UART_SetConfig+0x258>
 8007152:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007156:	d815      	bhi.n	8007184 <UART_SetConfig+0x270>
 8007158:	2b00      	cmp	r3, #0
 800715a:	d003      	beq.n	8007164 <UART_SetConfig+0x250>
 800715c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007160:	d008      	beq.n	8007174 <UART_SetConfig+0x260>
 8007162:	e00f      	b.n	8007184 <UART_SetConfig+0x270>
 8007164:	2300      	movs	r3, #0
 8007166:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800716a:	e052      	b.n	8007212 <UART_SetConfig+0x2fe>
 800716c:	2302      	movs	r3, #2
 800716e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007172:	e04e      	b.n	8007212 <UART_SetConfig+0x2fe>
 8007174:	2304      	movs	r3, #4
 8007176:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800717a:	e04a      	b.n	8007212 <UART_SetConfig+0x2fe>
 800717c:	2308      	movs	r3, #8
 800717e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007182:	e046      	b.n	8007212 <UART_SetConfig+0x2fe>
 8007184:	2310      	movs	r3, #16
 8007186:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800718a:	e042      	b.n	8007212 <UART_SetConfig+0x2fe>
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a17      	ldr	r2, [pc, #92]	@ (80071f0 <UART_SetConfig+0x2dc>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d13a      	bne.n	800720c <UART_SetConfig+0x2f8>
 8007196:	4b18      	ldr	r3, [pc, #96]	@ (80071f8 <UART_SetConfig+0x2e4>)
 8007198:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800719c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80071a0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80071a4:	d01a      	beq.n	80071dc <UART_SetConfig+0x2c8>
 80071a6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80071aa:	d81b      	bhi.n	80071e4 <UART_SetConfig+0x2d0>
 80071ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071b0:	d00c      	beq.n	80071cc <UART_SetConfig+0x2b8>
 80071b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071b6:	d815      	bhi.n	80071e4 <UART_SetConfig+0x2d0>
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d003      	beq.n	80071c4 <UART_SetConfig+0x2b0>
 80071bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071c0:	d008      	beq.n	80071d4 <UART_SetConfig+0x2c0>
 80071c2:	e00f      	b.n	80071e4 <UART_SetConfig+0x2d0>
 80071c4:	2300      	movs	r3, #0
 80071c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071ca:	e022      	b.n	8007212 <UART_SetConfig+0x2fe>
 80071cc:	2302      	movs	r3, #2
 80071ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071d2:	e01e      	b.n	8007212 <UART_SetConfig+0x2fe>
 80071d4:	2304      	movs	r3, #4
 80071d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071da:	e01a      	b.n	8007212 <UART_SetConfig+0x2fe>
 80071dc:	2308      	movs	r3, #8
 80071de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071e2:	e016      	b.n	8007212 <UART_SetConfig+0x2fe>
 80071e4:	2310      	movs	r3, #16
 80071e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071ea:	e012      	b.n	8007212 <UART_SetConfig+0x2fe>
 80071ec:	cfff69f3 	.word	0xcfff69f3
 80071f0:	40008000 	.word	0x40008000
 80071f4:	40013800 	.word	0x40013800
 80071f8:	40021000 	.word	0x40021000
 80071fc:	40004400 	.word	0x40004400
 8007200:	40004800 	.word	0x40004800
 8007204:	40004c00 	.word	0x40004c00
 8007208:	40005000 	.word	0x40005000
 800720c:	2310      	movs	r3, #16
 800720e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4aae      	ldr	r2, [pc, #696]	@ (80074d0 <UART_SetConfig+0x5bc>)
 8007218:	4293      	cmp	r3, r2
 800721a:	f040 8097 	bne.w	800734c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800721e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007222:	2b08      	cmp	r3, #8
 8007224:	d823      	bhi.n	800726e <UART_SetConfig+0x35a>
 8007226:	a201      	add	r2, pc, #4	@ (adr r2, 800722c <UART_SetConfig+0x318>)
 8007228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800722c:	08007251 	.word	0x08007251
 8007230:	0800726f 	.word	0x0800726f
 8007234:	08007259 	.word	0x08007259
 8007238:	0800726f 	.word	0x0800726f
 800723c:	0800725f 	.word	0x0800725f
 8007240:	0800726f 	.word	0x0800726f
 8007244:	0800726f 	.word	0x0800726f
 8007248:	0800726f 	.word	0x0800726f
 800724c:	08007267 	.word	0x08007267
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007250:	f7fc f9b2 	bl	80035b8 <HAL_RCC_GetPCLK1Freq>
 8007254:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007256:	e010      	b.n	800727a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007258:	4b9e      	ldr	r3, [pc, #632]	@ (80074d4 <UART_SetConfig+0x5c0>)
 800725a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800725c:	e00d      	b.n	800727a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800725e:	f7fc f93d 	bl	80034dc <HAL_RCC_GetSysClockFreq>
 8007262:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007264:	e009      	b.n	800727a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007266:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800726a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800726c:	e005      	b.n	800727a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800726e:	2300      	movs	r3, #0
 8007270:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007278:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800727a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800727c:	2b00      	cmp	r3, #0
 800727e:	f000 8130 	beq.w	80074e2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007286:	4a94      	ldr	r2, [pc, #592]	@ (80074d8 <UART_SetConfig+0x5c4>)
 8007288:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800728c:	461a      	mov	r2, r3
 800728e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007290:	fbb3 f3f2 	udiv	r3, r3, r2
 8007294:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	685a      	ldr	r2, [r3, #4]
 800729a:	4613      	mov	r3, r2
 800729c:	005b      	lsls	r3, r3, #1
 800729e:	4413      	add	r3, r2
 80072a0:	69ba      	ldr	r2, [r7, #24]
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d305      	bcc.n	80072b2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80072ac:	69ba      	ldr	r2, [r7, #24]
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d903      	bls.n	80072ba <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80072b8:	e113      	b.n	80074e2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072bc:	2200      	movs	r2, #0
 80072be:	60bb      	str	r3, [r7, #8]
 80072c0:	60fa      	str	r2, [r7, #12]
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072c6:	4a84      	ldr	r2, [pc, #528]	@ (80074d8 <UART_SetConfig+0x5c4>)
 80072c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	2200      	movs	r2, #0
 80072d0:	603b      	str	r3, [r7, #0]
 80072d2:	607a      	str	r2, [r7, #4]
 80072d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80072dc:	f7f9 f808 	bl	80002f0 <__aeabi_uldivmod>
 80072e0:	4602      	mov	r2, r0
 80072e2:	460b      	mov	r3, r1
 80072e4:	4610      	mov	r0, r2
 80072e6:	4619      	mov	r1, r3
 80072e8:	f04f 0200 	mov.w	r2, #0
 80072ec:	f04f 0300 	mov.w	r3, #0
 80072f0:	020b      	lsls	r3, r1, #8
 80072f2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80072f6:	0202      	lsls	r2, r0, #8
 80072f8:	6979      	ldr	r1, [r7, #20]
 80072fa:	6849      	ldr	r1, [r1, #4]
 80072fc:	0849      	lsrs	r1, r1, #1
 80072fe:	2000      	movs	r0, #0
 8007300:	460c      	mov	r4, r1
 8007302:	4605      	mov	r5, r0
 8007304:	eb12 0804 	adds.w	r8, r2, r4
 8007308:	eb43 0905 	adc.w	r9, r3, r5
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	469a      	mov	sl, r3
 8007314:	4693      	mov	fp, r2
 8007316:	4652      	mov	r2, sl
 8007318:	465b      	mov	r3, fp
 800731a:	4640      	mov	r0, r8
 800731c:	4649      	mov	r1, r9
 800731e:	f7f8 ffe7 	bl	80002f0 <__aeabi_uldivmod>
 8007322:	4602      	mov	r2, r0
 8007324:	460b      	mov	r3, r1
 8007326:	4613      	mov	r3, r2
 8007328:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800732a:	6a3b      	ldr	r3, [r7, #32]
 800732c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007330:	d308      	bcc.n	8007344 <UART_SetConfig+0x430>
 8007332:	6a3b      	ldr	r3, [r7, #32]
 8007334:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007338:	d204      	bcs.n	8007344 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	6a3a      	ldr	r2, [r7, #32]
 8007340:	60da      	str	r2, [r3, #12]
 8007342:	e0ce      	b.n	80074e2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800734a:	e0ca      	b.n	80074e2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	69db      	ldr	r3, [r3, #28]
 8007350:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007354:	d166      	bne.n	8007424 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007356:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800735a:	2b08      	cmp	r3, #8
 800735c:	d827      	bhi.n	80073ae <UART_SetConfig+0x49a>
 800735e:	a201      	add	r2, pc, #4	@ (adr r2, 8007364 <UART_SetConfig+0x450>)
 8007360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007364:	08007389 	.word	0x08007389
 8007368:	08007391 	.word	0x08007391
 800736c:	08007399 	.word	0x08007399
 8007370:	080073af 	.word	0x080073af
 8007374:	0800739f 	.word	0x0800739f
 8007378:	080073af 	.word	0x080073af
 800737c:	080073af 	.word	0x080073af
 8007380:	080073af 	.word	0x080073af
 8007384:	080073a7 	.word	0x080073a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007388:	f7fc f916 	bl	80035b8 <HAL_RCC_GetPCLK1Freq>
 800738c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800738e:	e014      	b.n	80073ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007390:	f7fc f928 	bl	80035e4 <HAL_RCC_GetPCLK2Freq>
 8007394:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007396:	e010      	b.n	80073ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007398:	4b4e      	ldr	r3, [pc, #312]	@ (80074d4 <UART_SetConfig+0x5c0>)
 800739a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800739c:	e00d      	b.n	80073ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800739e:	f7fc f89d 	bl	80034dc <HAL_RCC_GetSysClockFreq>
 80073a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80073a4:	e009      	b.n	80073ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80073ac:	e005      	b.n	80073ba <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80073ae:	2300      	movs	r3, #0
 80073b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80073b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80073ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073bc:	2b00      	cmp	r3, #0
 80073be:	f000 8090 	beq.w	80074e2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073c6:	4a44      	ldr	r2, [pc, #272]	@ (80074d8 <UART_SetConfig+0x5c4>)
 80073c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073cc:	461a      	mov	r2, r3
 80073ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80073d4:	005a      	lsls	r2, r3, #1
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	085b      	lsrs	r3, r3, #1
 80073dc:	441a      	add	r2, r3
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80073e6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073e8:	6a3b      	ldr	r3, [r7, #32]
 80073ea:	2b0f      	cmp	r3, #15
 80073ec:	d916      	bls.n	800741c <UART_SetConfig+0x508>
 80073ee:	6a3b      	ldr	r3, [r7, #32]
 80073f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073f4:	d212      	bcs.n	800741c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80073f6:	6a3b      	ldr	r3, [r7, #32]
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	f023 030f 	bic.w	r3, r3, #15
 80073fe:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007400:	6a3b      	ldr	r3, [r7, #32]
 8007402:	085b      	lsrs	r3, r3, #1
 8007404:	b29b      	uxth	r3, r3
 8007406:	f003 0307 	and.w	r3, r3, #7
 800740a:	b29a      	uxth	r2, r3
 800740c:	8bfb      	ldrh	r3, [r7, #30]
 800740e:	4313      	orrs	r3, r2
 8007410:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	8bfa      	ldrh	r2, [r7, #30]
 8007418:	60da      	str	r2, [r3, #12]
 800741a:	e062      	b.n	80074e2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800741c:	2301      	movs	r3, #1
 800741e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007422:	e05e      	b.n	80074e2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007424:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007428:	2b08      	cmp	r3, #8
 800742a:	d828      	bhi.n	800747e <UART_SetConfig+0x56a>
 800742c:	a201      	add	r2, pc, #4	@ (adr r2, 8007434 <UART_SetConfig+0x520>)
 800742e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007432:	bf00      	nop
 8007434:	08007459 	.word	0x08007459
 8007438:	08007461 	.word	0x08007461
 800743c:	08007469 	.word	0x08007469
 8007440:	0800747f 	.word	0x0800747f
 8007444:	0800746f 	.word	0x0800746f
 8007448:	0800747f 	.word	0x0800747f
 800744c:	0800747f 	.word	0x0800747f
 8007450:	0800747f 	.word	0x0800747f
 8007454:	08007477 	.word	0x08007477
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007458:	f7fc f8ae 	bl	80035b8 <HAL_RCC_GetPCLK1Freq>
 800745c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800745e:	e014      	b.n	800748a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007460:	f7fc f8c0 	bl	80035e4 <HAL_RCC_GetPCLK2Freq>
 8007464:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007466:	e010      	b.n	800748a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007468:	4b1a      	ldr	r3, [pc, #104]	@ (80074d4 <UART_SetConfig+0x5c0>)
 800746a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800746c:	e00d      	b.n	800748a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800746e:	f7fc f835 	bl	80034dc <HAL_RCC_GetSysClockFreq>
 8007472:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007474:	e009      	b.n	800748a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007476:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800747a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800747c:	e005      	b.n	800748a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800747e:	2300      	movs	r3, #0
 8007480:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007482:	2301      	movs	r3, #1
 8007484:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007488:	bf00      	nop
    }

    if (pclk != 0U)
 800748a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800748c:	2b00      	cmp	r3, #0
 800748e:	d028      	beq.n	80074e2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007494:	4a10      	ldr	r2, [pc, #64]	@ (80074d8 <UART_SetConfig+0x5c4>)
 8007496:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800749a:	461a      	mov	r2, r3
 800749c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800749e:	fbb3 f2f2 	udiv	r2, r3, r2
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	085b      	lsrs	r3, r3, #1
 80074a8:	441a      	add	r2, r3
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80074b2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074b4:	6a3b      	ldr	r3, [r7, #32]
 80074b6:	2b0f      	cmp	r3, #15
 80074b8:	d910      	bls.n	80074dc <UART_SetConfig+0x5c8>
 80074ba:	6a3b      	ldr	r3, [r7, #32]
 80074bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074c0:	d20c      	bcs.n	80074dc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80074c2:	6a3b      	ldr	r3, [r7, #32]
 80074c4:	b29a      	uxth	r2, r3
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	60da      	str	r2, [r3, #12]
 80074cc:	e009      	b.n	80074e2 <UART_SetConfig+0x5ce>
 80074ce:	bf00      	nop
 80074d0:	40008000 	.word	0x40008000
 80074d4:	00f42400 	.word	0x00f42400
 80074d8:	080097c4 	.word	0x080097c4
      }
      else
      {
        ret = HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	2201      	movs	r2, #1
 80074e6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	2201      	movs	r2, #1
 80074ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	2200      	movs	r2, #0
 80074f6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	2200      	movs	r2, #0
 80074fc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80074fe:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007502:	4618      	mov	r0, r3
 8007504:	3730      	adds	r7, #48	@ 0x30
 8007506:	46bd      	mov	sp, r7
 8007508:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800750c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007518:	f003 0308 	and.w	r3, r3, #8
 800751c:	2b00      	cmp	r3, #0
 800751e:	d00a      	beq.n	8007536 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	430a      	orrs	r2, r1
 8007534:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800753a:	f003 0301 	and.w	r3, r3, #1
 800753e:	2b00      	cmp	r3, #0
 8007540:	d00a      	beq.n	8007558 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	430a      	orrs	r2, r1
 8007556:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800755c:	f003 0302 	and.w	r3, r3, #2
 8007560:	2b00      	cmp	r3, #0
 8007562:	d00a      	beq.n	800757a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	430a      	orrs	r2, r1
 8007578:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800757e:	f003 0304 	and.w	r3, r3, #4
 8007582:	2b00      	cmp	r3, #0
 8007584:	d00a      	beq.n	800759c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	430a      	orrs	r2, r1
 800759a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075a0:	f003 0310 	and.w	r3, r3, #16
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d00a      	beq.n	80075be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	430a      	orrs	r2, r1
 80075bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075c2:	f003 0320 	and.w	r3, r3, #32
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d00a      	beq.n	80075e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	430a      	orrs	r2, r1
 80075de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d01a      	beq.n	8007622 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	430a      	orrs	r2, r1
 8007600:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007606:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800760a:	d10a      	bne.n	8007622 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	430a      	orrs	r2, r1
 8007620:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007626:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800762a:	2b00      	cmp	r3, #0
 800762c:	d00a      	beq.n	8007644 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	430a      	orrs	r2, r1
 8007642:	605a      	str	r2, [r3, #4]
  }
}
 8007644:	bf00      	nop
 8007646:	370c      	adds	r7, #12
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b098      	sub	sp, #96	@ 0x60
 8007654:	af02      	add	r7, sp, #8
 8007656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007660:	f7fa fe8a 	bl	8002378 <HAL_GetTick>
 8007664:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f003 0308 	and.w	r3, r3, #8
 8007670:	2b08      	cmp	r3, #8
 8007672:	d12f      	bne.n	80076d4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007674:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007678:	9300      	str	r3, [sp, #0]
 800767a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800767c:	2200      	movs	r2, #0
 800767e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 f88e 	bl	80077a4 <UART_WaitOnFlagUntilTimeout>
 8007688:	4603      	mov	r3, r0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d022      	beq.n	80076d4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007696:	e853 3f00 	ldrex	r3, [r3]
 800769a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800769c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800769e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	461a      	mov	r2, r3
 80076aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80076ae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80076b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80076b4:	e841 2300 	strex	r3, r2, [r1]
 80076b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80076ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d1e6      	bne.n	800768e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2220      	movs	r2, #32
 80076c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076d0:	2303      	movs	r3, #3
 80076d2:	e063      	b.n	800779c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f003 0304 	and.w	r3, r3, #4
 80076de:	2b04      	cmp	r3, #4
 80076e0:	d149      	bne.n	8007776 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076e2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80076e6:	9300      	str	r3, [sp, #0]
 80076e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076ea:	2200      	movs	r2, #0
 80076ec:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 f857 	bl	80077a4 <UART_WaitOnFlagUntilTimeout>
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d03c      	beq.n	8007776 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007704:	e853 3f00 	ldrex	r3, [r3]
 8007708:	623b      	str	r3, [r7, #32]
   return(result);
 800770a:	6a3b      	ldr	r3, [r7, #32]
 800770c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007710:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	461a      	mov	r2, r3
 8007718:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800771a:	633b      	str	r3, [r7, #48]	@ 0x30
 800771c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007720:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007722:	e841 2300 	strex	r3, r2, [r1]
 8007726:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800772a:	2b00      	cmp	r3, #0
 800772c:	d1e6      	bne.n	80076fc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	3308      	adds	r3, #8
 8007734:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	e853 3f00 	ldrex	r3, [r3]
 800773c:	60fb      	str	r3, [r7, #12]
   return(result);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f023 0301 	bic.w	r3, r3, #1
 8007744:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	3308      	adds	r3, #8
 800774c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800774e:	61fa      	str	r2, [r7, #28]
 8007750:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007752:	69b9      	ldr	r1, [r7, #24]
 8007754:	69fa      	ldr	r2, [r7, #28]
 8007756:	e841 2300 	strex	r3, r2, [r1]
 800775a:	617b      	str	r3, [r7, #20]
   return(result);
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d1e5      	bne.n	800772e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2220      	movs	r2, #32
 8007766:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007772:	2303      	movs	r3, #3
 8007774:	e012      	b.n	800779c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2220      	movs	r2, #32
 800777a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2220      	movs	r2, #32
 8007782:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2200      	movs	r2, #0
 800778a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2200      	movs	r2, #0
 8007790:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800779a:	2300      	movs	r3, #0
}
 800779c:	4618      	mov	r0, r3
 800779e:	3758      	adds	r7, #88	@ 0x58
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	60f8      	str	r0, [r7, #12]
 80077ac:	60b9      	str	r1, [r7, #8]
 80077ae:	603b      	str	r3, [r7, #0]
 80077b0:	4613      	mov	r3, r2
 80077b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077b4:	e04f      	b.n	8007856 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077b6:	69bb      	ldr	r3, [r7, #24]
 80077b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077bc:	d04b      	beq.n	8007856 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077be:	f7fa fddb 	bl	8002378 <HAL_GetTick>
 80077c2:	4602      	mov	r2, r0
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	1ad3      	subs	r3, r2, r3
 80077c8:	69ba      	ldr	r2, [r7, #24]
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d302      	bcc.n	80077d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80077ce:	69bb      	ldr	r3, [r7, #24]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d101      	bne.n	80077d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80077d4:	2303      	movs	r3, #3
 80077d6:	e04e      	b.n	8007876 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f003 0304 	and.w	r3, r3, #4
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d037      	beq.n	8007856 <UART_WaitOnFlagUntilTimeout+0xb2>
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	2b80      	cmp	r3, #128	@ 0x80
 80077ea:	d034      	beq.n	8007856 <UART_WaitOnFlagUntilTimeout+0xb2>
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	2b40      	cmp	r3, #64	@ 0x40
 80077f0:	d031      	beq.n	8007856 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	69db      	ldr	r3, [r3, #28]
 80077f8:	f003 0308 	and.w	r3, r3, #8
 80077fc:	2b08      	cmp	r3, #8
 80077fe:	d110      	bne.n	8007822 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2208      	movs	r2, #8
 8007806:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007808:	68f8      	ldr	r0, [r7, #12]
 800780a:	f000 f838 	bl	800787e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2208      	movs	r2, #8
 8007812:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2200      	movs	r2, #0
 800781a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	e029      	b.n	8007876 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	69db      	ldr	r3, [r3, #28]
 8007828:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800782c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007830:	d111      	bne.n	8007856 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800783a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800783c:	68f8      	ldr	r0, [r7, #12]
 800783e:	f000 f81e 	bl	800787e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2220      	movs	r2, #32
 8007846:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2200      	movs	r2, #0
 800784e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007852:	2303      	movs	r3, #3
 8007854:	e00f      	b.n	8007876 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	69da      	ldr	r2, [r3, #28]
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	4013      	ands	r3, r2
 8007860:	68ba      	ldr	r2, [r7, #8]
 8007862:	429a      	cmp	r2, r3
 8007864:	bf0c      	ite	eq
 8007866:	2301      	moveq	r3, #1
 8007868:	2300      	movne	r3, #0
 800786a:	b2db      	uxtb	r3, r3
 800786c:	461a      	mov	r2, r3
 800786e:	79fb      	ldrb	r3, [r7, #7]
 8007870:	429a      	cmp	r2, r3
 8007872:	d0a0      	beq.n	80077b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007874:	2300      	movs	r3, #0
}
 8007876:	4618      	mov	r0, r3
 8007878:	3710      	adds	r7, #16
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}

0800787e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800787e:	b480      	push	{r7}
 8007880:	b095      	sub	sp, #84	@ 0x54
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800788c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800788e:	e853 3f00 	ldrex	r3, [r3]
 8007892:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007896:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800789a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	461a      	mov	r2, r3
 80078a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80078a6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80078aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80078ac:	e841 2300 	strex	r3, r2, [r1]
 80078b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80078b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d1e6      	bne.n	8007886 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	3308      	adds	r3, #8
 80078be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c0:	6a3b      	ldr	r3, [r7, #32]
 80078c2:	e853 3f00 	ldrex	r3, [r3]
 80078c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80078c8:	69fb      	ldr	r3, [r7, #28]
 80078ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80078ce:	f023 0301 	bic.w	r3, r3, #1
 80078d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	3308      	adds	r3, #8
 80078da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80078dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80078de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80078e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078e4:	e841 2300 	strex	r3, r2, [r1]
 80078e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80078ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d1e3      	bne.n	80078b8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d118      	bne.n	800792a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	e853 3f00 	ldrex	r3, [r3]
 8007904:	60bb      	str	r3, [r7, #8]
   return(result);
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	f023 0310 	bic.w	r3, r3, #16
 800790c:	647b      	str	r3, [r7, #68]	@ 0x44
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	461a      	mov	r2, r3
 8007914:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007916:	61bb      	str	r3, [r7, #24]
 8007918:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800791a:	6979      	ldr	r1, [r7, #20]
 800791c:	69ba      	ldr	r2, [r7, #24]
 800791e:	e841 2300 	strex	r3, r2, [r1]
 8007922:	613b      	str	r3, [r7, #16]
   return(result);
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d1e6      	bne.n	80078f8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2220      	movs	r2, #32
 800792e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800793e:	bf00      	nop
 8007940:	3754      	adds	r7, #84	@ 0x54
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr

0800794a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800794a:	b580      	push	{r7, lr}
 800794c:	b084      	sub	sp, #16
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007956:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2200      	movs	r2, #0
 800795c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2200      	movs	r2, #0
 8007964:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007968:	68f8      	ldr	r0, [r7, #12]
 800796a:	f7ff fabd 	bl	8006ee8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800796e:	bf00      	nop
 8007970:	3710      	adds	r7, #16
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}

08007976 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007976:	b580      	push	{r7, lr}
 8007978:	b088      	sub	sp, #32
 800797a:	af00      	add	r7, sp, #0
 800797c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	e853 3f00 	ldrex	r3, [r3]
 800798a:	60bb      	str	r3, [r7, #8]
   return(result);
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007992:	61fb      	str	r3, [r7, #28]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	461a      	mov	r2, r3
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	61bb      	str	r3, [r7, #24]
 800799e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a0:	6979      	ldr	r1, [r7, #20]
 80079a2:	69ba      	ldr	r2, [r7, #24]
 80079a4:	e841 2300 	strex	r3, r2, [r1]
 80079a8:	613b      	str	r3, [r7, #16]
   return(result);
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d1e6      	bne.n	800797e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2220      	movs	r2, #32
 80079b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2200      	movs	r2, #0
 80079bc:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f7ff fa88 	bl	8006ed4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079c4:	bf00      	nop
 80079c6:	3720      	adds	r7, #32
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80079d4:	bf00      	nop
 80079d6:	370c      	adds	r7, #12
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b083      	sub	sp, #12
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80079e8:	bf00      	nop
 80079ea:	370c      	adds	r7, #12
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b083      	sub	sp, #12
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80079fc:	bf00      	nop
 80079fe:	370c      	adds	r7, #12
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b085      	sub	sp, #20
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d101      	bne.n	8007a1e <HAL_UARTEx_DisableFifoMode+0x16>
 8007a1a:	2302      	movs	r3, #2
 8007a1c:	e027      	b.n	8007a6e <HAL_UARTEx_DisableFifoMode+0x66>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2201      	movs	r2, #1
 8007a22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2224      	movs	r2, #36	@ 0x24
 8007a2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f022 0201 	bic.w	r2, r2, #1
 8007a44:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007a4c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2220      	movs	r2, #32
 8007a60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a6c:	2300      	movs	r3, #0
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3714      	adds	r7, #20
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr

08007a7a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a7a:	b580      	push	{r7, lr}
 8007a7c:	b084      	sub	sp, #16
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
 8007a82:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d101      	bne.n	8007a92 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007a8e:	2302      	movs	r3, #2
 8007a90:	e02d      	b.n	8007aee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2201      	movs	r2, #1
 8007a96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2224      	movs	r2, #36	@ 0x24
 8007a9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f022 0201 	bic.w	r2, r2, #1
 8007ab8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	683a      	ldr	r2, [r7, #0]
 8007aca:	430a      	orrs	r2, r1
 8007acc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 f850 	bl	8007b74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	68fa      	ldr	r2, [r7, #12]
 8007ada:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2220      	movs	r2, #32
 8007ae0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007aec:	2300      	movs	r3, #0
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3710      	adds	r7, #16
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}

08007af6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007af6:	b580      	push	{r7, lr}
 8007af8:	b084      	sub	sp, #16
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]
 8007afe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	d101      	bne.n	8007b0e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007b0a:	2302      	movs	r3, #2
 8007b0c:	e02d      	b.n	8007b6a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2201      	movs	r2, #1
 8007b12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2224      	movs	r2, #36	@ 0x24
 8007b1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	681a      	ldr	r2, [r3, #0]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f022 0201 	bic.w	r2, r2, #1
 8007b34:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	683a      	ldr	r2, [r7, #0]
 8007b46:	430a      	orrs	r2, r1
 8007b48:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 f812 	bl	8007b74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	68fa      	ldr	r2, [r7, #12]
 8007b56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2220      	movs	r2, #32
 8007b5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007b68:	2300      	movs	r3, #0
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3710      	adds	r7, #16
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
	...

08007b74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b085      	sub	sp, #20
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d108      	bne.n	8007b96 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2201      	movs	r2, #1
 8007b88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007b94:	e031      	b.n	8007bfa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007b96:	2308      	movs	r3, #8
 8007b98:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007b9a:	2308      	movs	r3, #8
 8007b9c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	0e5b      	lsrs	r3, r3, #25
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	f003 0307 	and.w	r3, r3, #7
 8007bac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	0f5b      	lsrs	r3, r3, #29
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	f003 0307 	and.w	r3, r3, #7
 8007bbc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007bbe:	7bbb      	ldrb	r3, [r7, #14]
 8007bc0:	7b3a      	ldrb	r2, [r7, #12]
 8007bc2:	4911      	ldr	r1, [pc, #68]	@ (8007c08 <UARTEx_SetNbDataToProcess+0x94>)
 8007bc4:	5c8a      	ldrb	r2, [r1, r2]
 8007bc6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007bca:	7b3a      	ldrb	r2, [r7, #12]
 8007bcc:	490f      	ldr	r1, [pc, #60]	@ (8007c0c <UARTEx_SetNbDataToProcess+0x98>)
 8007bce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007bd0:	fb93 f3f2 	sdiv	r3, r3, r2
 8007bd4:	b29a      	uxth	r2, r3
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007bdc:	7bfb      	ldrb	r3, [r7, #15]
 8007bde:	7b7a      	ldrb	r2, [r7, #13]
 8007be0:	4909      	ldr	r1, [pc, #36]	@ (8007c08 <UARTEx_SetNbDataToProcess+0x94>)
 8007be2:	5c8a      	ldrb	r2, [r1, r2]
 8007be4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007be8:	7b7a      	ldrb	r2, [r7, #13]
 8007bea:	4908      	ldr	r1, [pc, #32]	@ (8007c0c <UARTEx_SetNbDataToProcess+0x98>)
 8007bec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007bee:	fb93 f3f2 	sdiv	r3, r3, r2
 8007bf2:	b29a      	uxth	r2, r3
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007bfa:	bf00      	nop
 8007bfc:	3714      	adds	r7, #20
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c04:	4770      	bx	lr
 8007c06:	bf00      	nop
 8007c08:	080097dc 	.word	0x080097dc
 8007c0c:	080097e4 	.word	0x080097e4

08007c10 <malloc>:
 8007c10:	4b02      	ldr	r3, [pc, #8]	@ (8007c1c <malloc+0xc>)
 8007c12:	4601      	mov	r1, r0
 8007c14:	6818      	ldr	r0, [r3, #0]
 8007c16:	f000 b82d 	b.w	8007c74 <_malloc_r>
 8007c1a:	bf00      	nop
 8007c1c:	2000001c 	.word	0x2000001c

08007c20 <free>:
 8007c20:	4b02      	ldr	r3, [pc, #8]	@ (8007c2c <free+0xc>)
 8007c22:	4601      	mov	r1, r0
 8007c24:	6818      	ldr	r0, [r3, #0]
 8007c26:	f000 bb95 	b.w	8008354 <_free_r>
 8007c2a:	bf00      	nop
 8007c2c:	2000001c 	.word	0x2000001c

08007c30 <sbrk_aligned>:
 8007c30:	b570      	push	{r4, r5, r6, lr}
 8007c32:	4e0f      	ldr	r6, [pc, #60]	@ (8007c70 <sbrk_aligned+0x40>)
 8007c34:	460c      	mov	r4, r1
 8007c36:	6831      	ldr	r1, [r6, #0]
 8007c38:	4605      	mov	r5, r0
 8007c3a:	b911      	cbnz	r1, 8007c42 <sbrk_aligned+0x12>
 8007c3c:	f000 fb3a 	bl	80082b4 <_sbrk_r>
 8007c40:	6030      	str	r0, [r6, #0]
 8007c42:	4621      	mov	r1, r4
 8007c44:	4628      	mov	r0, r5
 8007c46:	f000 fb35 	bl	80082b4 <_sbrk_r>
 8007c4a:	1c43      	adds	r3, r0, #1
 8007c4c:	d103      	bne.n	8007c56 <sbrk_aligned+0x26>
 8007c4e:	f04f 34ff 	mov.w	r4, #4294967295
 8007c52:	4620      	mov	r0, r4
 8007c54:	bd70      	pop	{r4, r5, r6, pc}
 8007c56:	1cc4      	adds	r4, r0, #3
 8007c58:	f024 0403 	bic.w	r4, r4, #3
 8007c5c:	42a0      	cmp	r0, r4
 8007c5e:	d0f8      	beq.n	8007c52 <sbrk_aligned+0x22>
 8007c60:	1a21      	subs	r1, r4, r0
 8007c62:	4628      	mov	r0, r5
 8007c64:	f000 fb26 	bl	80082b4 <_sbrk_r>
 8007c68:	3001      	adds	r0, #1
 8007c6a:	d1f2      	bne.n	8007c52 <sbrk_aligned+0x22>
 8007c6c:	e7ef      	b.n	8007c4e <sbrk_aligned+0x1e>
 8007c6e:	bf00      	nop
 8007c70:	20000368 	.word	0x20000368

08007c74 <_malloc_r>:
 8007c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c78:	1ccd      	adds	r5, r1, #3
 8007c7a:	f025 0503 	bic.w	r5, r5, #3
 8007c7e:	3508      	adds	r5, #8
 8007c80:	2d0c      	cmp	r5, #12
 8007c82:	bf38      	it	cc
 8007c84:	250c      	movcc	r5, #12
 8007c86:	2d00      	cmp	r5, #0
 8007c88:	4606      	mov	r6, r0
 8007c8a:	db01      	blt.n	8007c90 <_malloc_r+0x1c>
 8007c8c:	42a9      	cmp	r1, r5
 8007c8e:	d904      	bls.n	8007c9a <_malloc_r+0x26>
 8007c90:	230c      	movs	r3, #12
 8007c92:	6033      	str	r3, [r6, #0]
 8007c94:	2000      	movs	r0, #0
 8007c96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007d70 <_malloc_r+0xfc>
 8007c9e:	f000 f869 	bl	8007d74 <__malloc_lock>
 8007ca2:	f8d8 3000 	ldr.w	r3, [r8]
 8007ca6:	461c      	mov	r4, r3
 8007ca8:	bb44      	cbnz	r4, 8007cfc <_malloc_r+0x88>
 8007caa:	4629      	mov	r1, r5
 8007cac:	4630      	mov	r0, r6
 8007cae:	f7ff ffbf 	bl	8007c30 <sbrk_aligned>
 8007cb2:	1c43      	adds	r3, r0, #1
 8007cb4:	4604      	mov	r4, r0
 8007cb6:	d158      	bne.n	8007d6a <_malloc_r+0xf6>
 8007cb8:	f8d8 4000 	ldr.w	r4, [r8]
 8007cbc:	4627      	mov	r7, r4
 8007cbe:	2f00      	cmp	r7, #0
 8007cc0:	d143      	bne.n	8007d4a <_malloc_r+0xd6>
 8007cc2:	2c00      	cmp	r4, #0
 8007cc4:	d04b      	beq.n	8007d5e <_malloc_r+0xea>
 8007cc6:	6823      	ldr	r3, [r4, #0]
 8007cc8:	4639      	mov	r1, r7
 8007cca:	4630      	mov	r0, r6
 8007ccc:	eb04 0903 	add.w	r9, r4, r3
 8007cd0:	f000 faf0 	bl	80082b4 <_sbrk_r>
 8007cd4:	4581      	cmp	r9, r0
 8007cd6:	d142      	bne.n	8007d5e <_malloc_r+0xea>
 8007cd8:	6821      	ldr	r1, [r4, #0]
 8007cda:	1a6d      	subs	r5, r5, r1
 8007cdc:	4629      	mov	r1, r5
 8007cde:	4630      	mov	r0, r6
 8007ce0:	f7ff ffa6 	bl	8007c30 <sbrk_aligned>
 8007ce4:	3001      	adds	r0, #1
 8007ce6:	d03a      	beq.n	8007d5e <_malloc_r+0xea>
 8007ce8:	6823      	ldr	r3, [r4, #0]
 8007cea:	442b      	add	r3, r5
 8007cec:	6023      	str	r3, [r4, #0]
 8007cee:	f8d8 3000 	ldr.w	r3, [r8]
 8007cf2:	685a      	ldr	r2, [r3, #4]
 8007cf4:	bb62      	cbnz	r2, 8007d50 <_malloc_r+0xdc>
 8007cf6:	f8c8 7000 	str.w	r7, [r8]
 8007cfa:	e00f      	b.n	8007d1c <_malloc_r+0xa8>
 8007cfc:	6822      	ldr	r2, [r4, #0]
 8007cfe:	1b52      	subs	r2, r2, r5
 8007d00:	d420      	bmi.n	8007d44 <_malloc_r+0xd0>
 8007d02:	2a0b      	cmp	r2, #11
 8007d04:	d917      	bls.n	8007d36 <_malloc_r+0xc2>
 8007d06:	1961      	adds	r1, r4, r5
 8007d08:	42a3      	cmp	r3, r4
 8007d0a:	6025      	str	r5, [r4, #0]
 8007d0c:	bf18      	it	ne
 8007d0e:	6059      	strne	r1, [r3, #4]
 8007d10:	6863      	ldr	r3, [r4, #4]
 8007d12:	bf08      	it	eq
 8007d14:	f8c8 1000 	streq.w	r1, [r8]
 8007d18:	5162      	str	r2, [r4, r5]
 8007d1a:	604b      	str	r3, [r1, #4]
 8007d1c:	4630      	mov	r0, r6
 8007d1e:	f000 f82f 	bl	8007d80 <__malloc_unlock>
 8007d22:	f104 000b 	add.w	r0, r4, #11
 8007d26:	1d23      	adds	r3, r4, #4
 8007d28:	f020 0007 	bic.w	r0, r0, #7
 8007d2c:	1ac2      	subs	r2, r0, r3
 8007d2e:	bf1c      	itt	ne
 8007d30:	1a1b      	subne	r3, r3, r0
 8007d32:	50a3      	strne	r3, [r4, r2]
 8007d34:	e7af      	b.n	8007c96 <_malloc_r+0x22>
 8007d36:	6862      	ldr	r2, [r4, #4]
 8007d38:	42a3      	cmp	r3, r4
 8007d3a:	bf0c      	ite	eq
 8007d3c:	f8c8 2000 	streq.w	r2, [r8]
 8007d40:	605a      	strne	r2, [r3, #4]
 8007d42:	e7eb      	b.n	8007d1c <_malloc_r+0xa8>
 8007d44:	4623      	mov	r3, r4
 8007d46:	6864      	ldr	r4, [r4, #4]
 8007d48:	e7ae      	b.n	8007ca8 <_malloc_r+0x34>
 8007d4a:	463c      	mov	r4, r7
 8007d4c:	687f      	ldr	r7, [r7, #4]
 8007d4e:	e7b6      	b.n	8007cbe <_malloc_r+0x4a>
 8007d50:	461a      	mov	r2, r3
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	42a3      	cmp	r3, r4
 8007d56:	d1fb      	bne.n	8007d50 <_malloc_r+0xdc>
 8007d58:	2300      	movs	r3, #0
 8007d5a:	6053      	str	r3, [r2, #4]
 8007d5c:	e7de      	b.n	8007d1c <_malloc_r+0xa8>
 8007d5e:	230c      	movs	r3, #12
 8007d60:	6033      	str	r3, [r6, #0]
 8007d62:	4630      	mov	r0, r6
 8007d64:	f000 f80c 	bl	8007d80 <__malloc_unlock>
 8007d68:	e794      	b.n	8007c94 <_malloc_r+0x20>
 8007d6a:	6005      	str	r5, [r0, #0]
 8007d6c:	e7d6      	b.n	8007d1c <_malloc_r+0xa8>
 8007d6e:	bf00      	nop
 8007d70:	2000036c 	.word	0x2000036c

08007d74 <__malloc_lock>:
 8007d74:	4801      	ldr	r0, [pc, #4]	@ (8007d7c <__malloc_lock+0x8>)
 8007d76:	f000 baea 	b.w	800834e <__retarget_lock_acquire_recursive>
 8007d7a:	bf00      	nop
 8007d7c:	200004b0 	.word	0x200004b0

08007d80 <__malloc_unlock>:
 8007d80:	4801      	ldr	r0, [pc, #4]	@ (8007d88 <__malloc_unlock+0x8>)
 8007d82:	f000 bae5 	b.w	8008350 <__retarget_lock_release_recursive>
 8007d86:	bf00      	nop
 8007d88:	200004b0 	.word	0x200004b0

08007d8c <std>:
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	b510      	push	{r4, lr}
 8007d90:	4604      	mov	r4, r0
 8007d92:	e9c0 3300 	strd	r3, r3, [r0]
 8007d96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d9a:	6083      	str	r3, [r0, #8]
 8007d9c:	8181      	strh	r1, [r0, #12]
 8007d9e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007da0:	81c2      	strh	r2, [r0, #14]
 8007da2:	6183      	str	r3, [r0, #24]
 8007da4:	4619      	mov	r1, r3
 8007da6:	2208      	movs	r2, #8
 8007da8:	305c      	adds	r0, #92	@ 0x5c
 8007daa:	f000 fa33 	bl	8008214 <memset>
 8007dae:	4b0d      	ldr	r3, [pc, #52]	@ (8007de4 <std+0x58>)
 8007db0:	6263      	str	r3, [r4, #36]	@ 0x24
 8007db2:	4b0d      	ldr	r3, [pc, #52]	@ (8007de8 <std+0x5c>)
 8007db4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007db6:	4b0d      	ldr	r3, [pc, #52]	@ (8007dec <std+0x60>)
 8007db8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007dba:	4b0d      	ldr	r3, [pc, #52]	@ (8007df0 <std+0x64>)
 8007dbc:	6323      	str	r3, [r4, #48]	@ 0x30
 8007dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8007df4 <std+0x68>)
 8007dc0:	6224      	str	r4, [r4, #32]
 8007dc2:	429c      	cmp	r4, r3
 8007dc4:	d006      	beq.n	8007dd4 <std+0x48>
 8007dc6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007dca:	4294      	cmp	r4, r2
 8007dcc:	d002      	beq.n	8007dd4 <std+0x48>
 8007dce:	33d0      	adds	r3, #208	@ 0xd0
 8007dd0:	429c      	cmp	r4, r3
 8007dd2:	d105      	bne.n	8007de0 <std+0x54>
 8007dd4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ddc:	f000 bab6 	b.w	800834c <__retarget_lock_init_recursive>
 8007de0:	bd10      	pop	{r4, pc}
 8007de2:	bf00      	nop
 8007de4:	08008061 	.word	0x08008061
 8007de8:	08008087 	.word	0x08008087
 8007dec:	080080bf 	.word	0x080080bf
 8007df0:	080080e3 	.word	0x080080e3
 8007df4:	20000370 	.word	0x20000370

08007df8 <stdio_exit_handler>:
 8007df8:	4a02      	ldr	r2, [pc, #8]	@ (8007e04 <stdio_exit_handler+0xc>)
 8007dfa:	4903      	ldr	r1, [pc, #12]	@ (8007e08 <stdio_exit_handler+0x10>)
 8007dfc:	4803      	ldr	r0, [pc, #12]	@ (8007e0c <stdio_exit_handler+0x14>)
 8007dfe:	f000 b869 	b.w	8007ed4 <_fwalk_sglue>
 8007e02:	bf00      	nop
 8007e04:	20000010 	.word	0x20000010
 8007e08:	080090f1 	.word	0x080090f1
 8007e0c:	20000020 	.word	0x20000020

08007e10 <cleanup_stdio>:
 8007e10:	6841      	ldr	r1, [r0, #4]
 8007e12:	4b0c      	ldr	r3, [pc, #48]	@ (8007e44 <cleanup_stdio+0x34>)
 8007e14:	4299      	cmp	r1, r3
 8007e16:	b510      	push	{r4, lr}
 8007e18:	4604      	mov	r4, r0
 8007e1a:	d001      	beq.n	8007e20 <cleanup_stdio+0x10>
 8007e1c:	f001 f968 	bl	80090f0 <_fflush_r>
 8007e20:	68a1      	ldr	r1, [r4, #8]
 8007e22:	4b09      	ldr	r3, [pc, #36]	@ (8007e48 <cleanup_stdio+0x38>)
 8007e24:	4299      	cmp	r1, r3
 8007e26:	d002      	beq.n	8007e2e <cleanup_stdio+0x1e>
 8007e28:	4620      	mov	r0, r4
 8007e2a:	f001 f961 	bl	80090f0 <_fflush_r>
 8007e2e:	68e1      	ldr	r1, [r4, #12]
 8007e30:	4b06      	ldr	r3, [pc, #24]	@ (8007e4c <cleanup_stdio+0x3c>)
 8007e32:	4299      	cmp	r1, r3
 8007e34:	d004      	beq.n	8007e40 <cleanup_stdio+0x30>
 8007e36:	4620      	mov	r0, r4
 8007e38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e3c:	f001 b958 	b.w	80090f0 <_fflush_r>
 8007e40:	bd10      	pop	{r4, pc}
 8007e42:	bf00      	nop
 8007e44:	20000370 	.word	0x20000370
 8007e48:	200003d8 	.word	0x200003d8
 8007e4c:	20000440 	.word	0x20000440

08007e50 <global_stdio_init.part.0>:
 8007e50:	b510      	push	{r4, lr}
 8007e52:	4b0b      	ldr	r3, [pc, #44]	@ (8007e80 <global_stdio_init.part.0+0x30>)
 8007e54:	4c0b      	ldr	r4, [pc, #44]	@ (8007e84 <global_stdio_init.part.0+0x34>)
 8007e56:	4a0c      	ldr	r2, [pc, #48]	@ (8007e88 <global_stdio_init.part.0+0x38>)
 8007e58:	601a      	str	r2, [r3, #0]
 8007e5a:	4620      	mov	r0, r4
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	2104      	movs	r1, #4
 8007e60:	f7ff ff94 	bl	8007d8c <std>
 8007e64:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007e68:	2201      	movs	r2, #1
 8007e6a:	2109      	movs	r1, #9
 8007e6c:	f7ff ff8e 	bl	8007d8c <std>
 8007e70:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007e74:	2202      	movs	r2, #2
 8007e76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e7a:	2112      	movs	r1, #18
 8007e7c:	f7ff bf86 	b.w	8007d8c <std>
 8007e80:	200004a8 	.word	0x200004a8
 8007e84:	20000370 	.word	0x20000370
 8007e88:	08007df9 	.word	0x08007df9

08007e8c <__sfp_lock_acquire>:
 8007e8c:	4801      	ldr	r0, [pc, #4]	@ (8007e94 <__sfp_lock_acquire+0x8>)
 8007e8e:	f000 ba5e 	b.w	800834e <__retarget_lock_acquire_recursive>
 8007e92:	bf00      	nop
 8007e94:	200004b1 	.word	0x200004b1

08007e98 <__sfp_lock_release>:
 8007e98:	4801      	ldr	r0, [pc, #4]	@ (8007ea0 <__sfp_lock_release+0x8>)
 8007e9a:	f000 ba59 	b.w	8008350 <__retarget_lock_release_recursive>
 8007e9e:	bf00      	nop
 8007ea0:	200004b1 	.word	0x200004b1

08007ea4 <__sinit>:
 8007ea4:	b510      	push	{r4, lr}
 8007ea6:	4604      	mov	r4, r0
 8007ea8:	f7ff fff0 	bl	8007e8c <__sfp_lock_acquire>
 8007eac:	6a23      	ldr	r3, [r4, #32]
 8007eae:	b11b      	cbz	r3, 8007eb8 <__sinit+0x14>
 8007eb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007eb4:	f7ff bff0 	b.w	8007e98 <__sfp_lock_release>
 8007eb8:	4b04      	ldr	r3, [pc, #16]	@ (8007ecc <__sinit+0x28>)
 8007eba:	6223      	str	r3, [r4, #32]
 8007ebc:	4b04      	ldr	r3, [pc, #16]	@ (8007ed0 <__sinit+0x2c>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d1f5      	bne.n	8007eb0 <__sinit+0xc>
 8007ec4:	f7ff ffc4 	bl	8007e50 <global_stdio_init.part.0>
 8007ec8:	e7f2      	b.n	8007eb0 <__sinit+0xc>
 8007eca:	bf00      	nop
 8007ecc:	08007e11 	.word	0x08007e11
 8007ed0:	200004a8 	.word	0x200004a8

08007ed4 <_fwalk_sglue>:
 8007ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ed8:	4607      	mov	r7, r0
 8007eda:	4688      	mov	r8, r1
 8007edc:	4614      	mov	r4, r2
 8007ede:	2600      	movs	r6, #0
 8007ee0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007ee4:	f1b9 0901 	subs.w	r9, r9, #1
 8007ee8:	d505      	bpl.n	8007ef6 <_fwalk_sglue+0x22>
 8007eea:	6824      	ldr	r4, [r4, #0]
 8007eec:	2c00      	cmp	r4, #0
 8007eee:	d1f7      	bne.n	8007ee0 <_fwalk_sglue+0xc>
 8007ef0:	4630      	mov	r0, r6
 8007ef2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ef6:	89ab      	ldrh	r3, [r5, #12]
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d907      	bls.n	8007f0c <_fwalk_sglue+0x38>
 8007efc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f00:	3301      	adds	r3, #1
 8007f02:	d003      	beq.n	8007f0c <_fwalk_sglue+0x38>
 8007f04:	4629      	mov	r1, r5
 8007f06:	4638      	mov	r0, r7
 8007f08:	47c0      	blx	r8
 8007f0a:	4306      	orrs	r6, r0
 8007f0c:	3568      	adds	r5, #104	@ 0x68
 8007f0e:	e7e9      	b.n	8007ee4 <_fwalk_sglue+0x10>

08007f10 <_puts_r>:
 8007f10:	6a03      	ldr	r3, [r0, #32]
 8007f12:	b570      	push	{r4, r5, r6, lr}
 8007f14:	6884      	ldr	r4, [r0, #8]
 8007f16:	4605      	mov	r5, r0
 8007f18:	460e      	mov	r6, r1
 8007f1a:	b90b      	cbnz	r3, 8007f20 <_puts_r+0x10>
 8007f1c:	f7ff ffc2 	bl	8007ea4 <__sinit>
 8007f20:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007f22:	07db      	lsls	r3, r3, #31
 8007f24:	d405      	bmi.n	8007f32 <_puts_r+0x22>
 8007f26:	89a3      	ldrh	r3, [r4, #12]
 8007f28:	0598      	lsls	r0, r3, #22
 8007f2a:	d402      	bmi.n	8007f32 <_puts_r+0x22>
 8007f2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f2e:	f000 fa0e 	bl	800834e <__retarget_lock_acquire_recursive>
 8007f32:	89a3      	ldrh	r3, [r4, #12]
 8007f34:	0719      	lsls	r1, r3, #28
 8007f36:	d502      	bpl.n	8007f3e <_puts_r+0x2e>
 8007f38:	6923      	ldr	r3, [r4, #16]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d135      	bne.n	8007faa <_puts_r+0x9a>
 8007f3e:	4621      	mov	r1, r4
 8007f40:	4628      	mov	r0, r5
 8007f42:	f000 f911 	bl	8008168 <__swsetup_r>
 8007f46:	b380      	cbz	r0, 8007faa <_puts_r+0x9a>
 8007f48:	f04f 35ff 	mov.w	r5, #4294967295
 8007f4c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007f4e:	07da      	lsls	r2, r3, #31
 8007f50:	d405      	bmi.n	8007f5e <_puts_r+0x4e>
 8007f52:	89a3      	ldrh	r3, [r4, #12]
 8007f54:	059b      	lsls	r3, r3, #22
 8007f56:	d402      	bmi.n	8007f5e <_puts_r+0x4e>
 8007f58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f5a:	f000 f9f9 	bl	8008350 <__retarget_lock_release_recursive>
 8007f5e:	4628      	mov	r0, r5
 8007f60:	bd70      	pop	{r4, r5, r6, pc}
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	da04      	bge.n	8007f70 <_puts_r+0x60>
 8007f66:	69a2      	ldr	r2, [r4, #24]
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	dc17      	bgt.n	8007f9c <_puts_r+0x8c>
 8007f6c:	290a      	cmp	r1, #10
 8007f6e:	d015      	beq.n	8007f9c <_puts_r+0x8c>
 8007f70:	6823      	ldr	r3, [r4, #0]
 8007f72:	1c5a      	adds	r2, r3, #1
 8007f74:	6022      	str	r2, [r4, #0]
 8007f76:	7019      	strb	r1, [r3, #0]
 8007f78:	68a3      	ldr	r3, [r4, #8]
 8007f7a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007f7e:	3b01      	subs	r3, #1
 8007f80:	60a3      	str	r3, [r4, #8]
 8007f82:	2900      	cmp	r1, #0
 8007f84:	d1ed      	bne.n	8007f62 <_puts_r+0x52>
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	da11      	bge.n	8007fae <_puts_r+0x9e>
 8007f8a:	4622      	mov	r2, r4
 8007f8c:	210a      	movs	r1, #10
 8007f8e:	4628      	mov	r0, r5
 8007f90:	f000 f8ab 	bl	80080ea <__swbuf_r>
 8007f94:	3001      	adds	r0, #1
 8007f96:	d0d7      	beq.n	8007f48 <_puts_r+0x38>
 8007f98:	250a      	movs	r5, #10
 8007f9a:	e7d7      	b.n	8007f4c <_puts_r+0x3c>
 8007f9c:	4622      	mov	r2, r4
 8007f9e:	4628      	mov	r0, r5
 8007fa0:	f000 f8a3 	bl	80080ea <__swbuf_r>
 8007fa4:	3001      	adds	r0, #1
 8007fa6:	d1e7      	bne.n	8007f78 <_puts_r+0x68>
 8007fa8:	e7ce      	b.n	8007f48 <_puts_r+0x38>
 8007faa:	3e01      	subs	r6, #1
 8007fac:	e7e4      	b.n	8007f78 <_puts_r+0x68>
 8007fae:	6823      	ldr	r3, [r4, #0]
 8007fb0:	1c5a      	adds	r2, r3, #1
 8007fb2:	6022      	str	r2, [r4, #0]
 8007fb4:	220a      	movs	r2, #10
 8007fb6:	701a      	strb	r2, [r3, #0]
 8007fb8:	e7ee      	b.n	8007f98 <_puts_r+0x88>
	...

08007fbc <puts>:
 8007fbc:	4b02      	ldr	r3, [pc, #8]	@ (8007fc8 <puts+0xc>)
 8007fbe:	4601      	mov	r1, r0
 8007fc0:	6818      	ldr	r0, [r3, #0]
 8007fc2:	f7ff bfa5 	b.w	8007f10 <_puts_r>
 8007fc6:	bf00      	nop
 8007fc8:	2000001c 	.word	0x2000001c

08007fcc <siprintf>:
 8007fcc:	b40e      	push	{r1, r2, r3}
 8007fce:	b500      	push	{lr}
 8007fd0:	b09c      	sub	sp, #112	@ 0x70
 8007fd2:	ab1d      	add	r3, sp, #116	@ 0x74
 8007fd4:	9002      	str	r0, [sp, #8]
 8007fd6:	9006      	str	r0, [sp, #24]
 8007fd8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007fdc:	4809      	ldr	r0, [pc, #36]	@ (8008004 <siprintf+0x38>)
 8007fde:	9107      	str	r1, [sp, #28]
 8007fe0:	9104      	str	r1, [sp, #16]
 8007fe2:	4909      	ldr	r1, [pc, #36]	@ (8008008 <siprintf+0x3c>)
 8007fe4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fe8:	9105      	str	r1, [sp, #20]
 8007fea:	6800      	ldr	r0, [r0, #0]
 8007fec:	9301      	str	r3, [sp, #4]
 8007fee:	a902      	add	r1, sp, #8
 8007ff0:	f000 fa56 	bl	80084a0 <_svfiprintf_r>
 8007ff4:	9b02      	ldr	r3, [sp, #8]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	701a      	strb	r2, [r3, #0]
 8007ffa:	b01c      	add	sp, #112	@ 0x70
 8007ffc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008000:	b003      	add	sp, #12
 8008002:	4770      	bx	lr
 8008004:	2000001c 	.word	0x2000001c
 8008008:	ffff0208 	.word	0xffff0208

0800800c <siscanf>:
 800800c:	b40e      	push	{r1, r2, r3}
 800800e:	b530      	push	{r4, r5, lr}
 8008010:	b09c      	sub	sp, #112	@ 0x70
 8008012:	ac1f      	add	r4, sp, #124	@ 0x7c
 8008014:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8008018:	f854 5b04 	ldr.w	r5, [r4], #4
 800801c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8008020:	9002      	str	r0, [sp, #8]
 8008022:	9006      	str	r0, [sp, #24]
 8008024:	f7f8 f906 	bl	8000234 <strlen>
 8008028:	4b0b      	ldr	r3, [pc, #44]	@ (8008058 <siscanf+0x4c>)
 800802a:	9003      	str	r0, [sp, #12]
 800802c:	9007      	str	r0, [sp, #28]
 800802e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008030:	480a      	ldr	r0, [pc, #40]	@ (800805c <siscanf+0x50>)
 8008032:	9401      	str	r4, [sp, #4]
 8008034:	2300      	movs	r3, #0
 8008036:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008038:	9314      	str	r3, [sp, #80]	@ 0x50
 800803a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800803e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008042:	462a      	mov	r2, r5
 8008044:	4623      	mov	r3, r4
 8008046:	a902      	add	r1, sp, #8
 8008048:	6800      	ldr	r0, [r0, #0]
 800804a:	f000 fb7d 	bl	8008748 <__ssvfiscanf_r>
 800804e:	b01c      	add	sp, #112	@ 0x70
 8008050:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008054:	b003      	add	sp, #12
 8008056:	4770      	bx	lr
 8008058:	08008083 	.word	0x08008083
 800805c:	2000001c 	.word	0x2000001c

08008060 <__sread>:
 8008060:	b510      	push	{r4, lr}
 8008062:	460c      	mov	r4, r1
 8008064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008068:	f000 f912 	bl	8008290 <_read_r>
 800806c:	2800      	cmp	r0, #0
 800806e:	bfab      	itete	ge
 8008070:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008072:	89a3      	ldrhlt	r3, [r4, #12]
 8008074:	181b      	addge	r3, r3, r0
 8008076:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800807a:	bfac      	ite	ge
 800807c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800807e:	81a3      	strhlt	r3, [r4, #12]
 8008080:	bd10      	pop	{r4, pc}

08008082 <__seofread>:
 8008082:	2000      	movs	r0, #0
 8008084:	4770      	bx	lr

08008086 <__swrite>:
 8008086:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800808a:	461f      	mov	r7, r3
 800808c:	898b      	ldrh	r3, [r1, #12]
 800808e:	05db      	lsls	r3, r3, #23
 8008090:	4605      	mov	r5, r0
 8008092:	460c      	mov	r4, r1
 8008094:	4616      	mov	r6, r2
 8008096:	d505      	bpl.n	80080a4 <__swrite+0x1e>
 8008098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800809c:	2302      	movs	r3, #2
 800809e:	2200      	movs	r2, #0
 80080a0:	f000 f8e4 	bl	800826c <_lseek_r>
 80080a4:	89a3      	ldrh	r3, [r4, #12]
 80080a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80080ae:	81a3      	strh	r3, [r4, #12]
 80080b0:	4632      	mov	r2, r6
 80080b2:	463b      	mov	r3, r7
 80080b4:	4628      	mov	r0, r5
 80080b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080ba:	f000 b90b 	b.w	80082d4 <_write_r>

080080be <__sseek>:
 80080be:	b510      	push	{r4, lr}
 80080c0:	460c      	mov	r4, r1
 80080c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080c6:	f000 f8d1 	bl	800826c <_lseek_r>
 80080ca:	1c43      	adds	r3, r0, #1
 80080cc:	89a3      	ldrh	r3, [r4, #12]
 80080ce:	bf15      	itete	ne
 80080d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80080d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80080d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80080da:	81a3      	strheq	r3, [r4, #12]
 80080dc:	bf18      	it	ne
 80080de:	81a3      	strhne	r3, [r4, #12]
 80080e0:	bd10      	pop	{r4, pc}

080080e2 <__sclose>:
 80080e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080e6:	f000 b8b1 	b.w	800824c <_close_r>

080080ea <__swbuf_r>:
 80080ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ec:	460e      	mov	r6, r1
 80080ee:	4614      	mov	r4, r2
 80080f0:	4605      	mov	r5, r0
 80080f2:	b118      	cbz	r0, 80080fc <__swbuf_r+0x12>
 80080f4:	6a03      	ldr	r3, [r0, #32]
 80080f6:	b90b      	cbnz	r3, 80080fc <__swbuf_r+0x12>
 80080f8:	f7ff fed4 	bl	8007ea4 <__sinit>
 80080fc:	69a3      	ldr	r3, [r4, #24]
 80080fe:	60a3      	str	r3, [r4, #8]
 8008100:	89a3      	ldrh	r3, [r4, #12]
 8008102:	071a      	lsls	r2, r3, #28
 8008104:	d501      	bpl.n	800810a <__swbuf_r+0x20>
 8008106:	6923      	ldr	r3, [r4, #16]
 8008108:	b943      	cbnz	r3, 800811c <__swbuf_r+0x32>
 800810a:	4621      	mov	r1, r4
 800810c:	4628      	mov	r0, r5
 800810e:	f000 f82b 	bl	8008168 <__swsetup_r>
 8008112:	b118      	cbz	r0, 800811c <__swbuf_r+0x32>
 8008114:	f04f 37ff 	mov.w	r7, #4294967295
 8008118:	4638      	mov	r0, r7
 800811a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800811c:	6823      	ldr	r3, [r4, #0]
 800811e:	6922      	ldr	r2, [r4, #16]
 8008120:	1a98      	subs	r0, r3, r2
 8008122:	6963      	ldr	r3, [r4, #20]
 8008124:	b2f6      	uxtb	r6, r6
 8008126:	4283      	cmp	r3, r0
 8008128:	4637      	mov	r7, r6
 800812a:	dc05      	bgt.n	8008138 <__swbuf_r+0x4e>
 800812c:	4621      	mov	r1, r4
 800812e:	4628      	mov	r0, r5
 8008130:	f000 ffde 	bl	80090f0 <_fflush_r>
 8008134:	2800      	cmp	r0, #0
 8008136:	d1ed      	bne.n	8008114 <__swbuf_r+0x2a>
 8008138:	68a3      	ldr	r3, [r4, #8]
 800813a:	3b01      	subs	r3, #1
 800813c:	60a3      	str	r3, [r4, #8]
 800813e:	6823      	ldr	r3, [r4, #0]
 8008140:	1c5a      	adds	r2, r3, #1
 8008142:	6022      	str	r2, [r4, #0]
 8008144:	701e      	strb	r6, [r3, #0]
 8008146:	6962      	ldr	r2, [r4, #20]
 8008148:	1c43      	adds	r3, r0, #1
 800814a:	429a      	cmp	r2, r3
 800814c:	d004      	beq.n	8008158 <__swbuf_r+0x6e>
 800814e:	89a3      	ldrh	r3, [r4, #12]
 8008150:	07db      	lsls	r3, r3, #31
 8008152:	d5e1      	bpl.n	8008118 <__swbuf_r+0x2e>
 8008154:	2e0a      	cmp	r6, #10
 8008156:	d1df      	bne.n	8008118 <__swbuf_r+0x2e>
 8008158:	4621      	mov	r1, r4
 800815a:	4628      	mov	r0, r5
 800815c:	f000 ffc8 	bl	80090f0 <_fflush_r>
 8008160:	2800      	cmp	r0, #0
 8008162:	d0d9      	beq.n	8008118 <__swbuf_r+0x2e>
 8008164:	e7d6      	b.n	8008114 <__swbuf_r+0x2a>
	...

08008168 <__swsetup_r>:
 8008168:	b538      	push	{r3, r4, r5, lr}
 800816a:	4b29      	ldr	r3, [pc, #164]	@ (8008210 <__swsetup_r+0xa8>)
 800816c:	4605      	mov	r5, r0
 800816e:	6818      	ldr	r0, [r3, #0]
 8008170:	460c      	mov	r4, r1
 8008172:	b118      	cbz	r0, 800817c <__swsetup_r+0x14>
 8008174:	6a03      	ldr	r3, [r0, #32]
 8008176:	b90b      	cbnz	r3, 800817c <__swsetup_r+0x14>
 8008178:	f7ff fe94 	bl	8007ea4 <__sinit>
 800817c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008180:	0719      	lsls	r1, r3, #28
 8008182:	d422      	bmi.n	80081ca <__swsetup_r+0x62>
 8008184:	06da      	lsls	r2, r3, #27
 8008186:	d407      	bmi.n	8008198 <__swsetup_r+0x30>
 8008188:	2209      	movs	r2, #9
 800818a:	602a      	str	r2, [r5, #0]
 800818c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008190:	81a3      	strh	r3, [r4, #12]
 8008192:	f04f 30ff 	mov.w	r0, #4294967295
 8008196:	e033      	b.n	8008200 <__swsetup_r+0x98>
 8008198:	0758      	lsls	r0, r3, #29
 800819a:	d512      	bpl.n	80081c2 <__swsetup_r+0x5a>
 800819c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800819e:	b141      	cbz	r1, 80081b2 <__swsetup_r+0x4a>
 80081a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80081a4:	4299      	cmp	r1, r3
 80081a6:	d002      	beq.n	80081ae <__swsetup_r+0x46>
 80081a8:	4628      	mov	r0, r5
 80081aa:	f000 f8d3 	bl	8008354 <_free_r>
 80081ae:	2300      	movs	r3, #0
 80081b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80081b2:	89a3      	ldrh	r3, [r4, #12]
 80081b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80081b8:	81a3      	strh	r3, [r4, #12]
 80081ba:	2300      	movs	r3, #0
 80081bc:	6063      	str	r3, [r4, #4]
 80081be:	6923      	ldr	r3, [r4, #16]
 80081c0:	6023      	str	r3, [r4, #0]
 80081c2:	89a3      	ldrh	r3, [r4, #12]
 80081c4:	f043 0308 	orr.w	r3, r3, #8
 80081c8:	81a3      	strh	r3, [r4, #12]
 80081ca:	6923      	ldr	r3, [r4, #16]
 80081cc:	b94b      	cbnz	r3, 80081e2 <__swsetup_r+0x7a>
 80081ce:	89a3      	ldrh	r3, [r4, #12]
 80081d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80081d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081d8:	d003      	beq.n	80081e2 <__swsetup_r+0x7a>
 80081da:	4621      	mov	r1, r4
 80081dc:	4628      	mov	r0, r5
 80081de:	f000 ffd5 	bl	800918c <__smakebuf_r>
 80081e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081e6:	f013 0201 	ands.w	r2, r3, #1
 80081ea:	d00a      	beq.n	8008202 <__swsetup_r+0x9a>
 80081ec:	2200      	movs	r2, #0
 80081ee:	60a2      	str	r2, [r4, #8]
 80081f0:	6962      	ldr	r2, [r4, #20]
 80081f2:	4252      	negs	r2, r2
 80081f4:	61a2      	str	r2, [r4, #24]
 80081f6:	6922      	ldr	r2, [r4, #16]
 80081f8:	b942      	cbnz	r2, 800820c <__swsetup_r+0xa4>
 80081fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80081fe:	d1c5      	bne.n	800818c <__swsetup_r+0x24>
 8008200:	bd38      	pop	{r3, r4, r5, pc}
 8008202:	0799      	lsls	r1, r3, #30
 8008204:	bf58      	it	pl
 8008206:	6962      	ldrpl	r2, [r4, #20]
 8008208:	60a2      	str	r2, [r4, #8]
 800820a:	e7f4      	b.n	80081f6 <__swsetup_r+0x8e>
 800820c:	2000      	movs	r0, #0
 800820e:	e7f7      	b.n	8008200 <__swsetup_r+0x98>
 8008210:	2000001c 	.word	0x2000001c

08008214 <memset>:
 8008214:	4402      	add	r2, r0
 8008216:	4603      	mov	r3, r0
 8008218:	4293      	cmp	r3, r2
 800821a:	d100      	bne.n	800821e <memset+0xa>
 800821c:	4770      	bx	lr
 800821e:	f803 1b01 	strb.w	r1, [r3], #1
 8008222:	e7f9      	b.n	8008218 <memset+0x4>

08008224 <strncpy>:
 8008224:	b510      	push	{r4, lr}
 8008226:	3901      	subs	r1, #1
 8008228:	4603      	mov	r3, r0
 800822a:	b132      	cbz	r2, 800823a <strncpy+0x16>
 800822c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008230:	f803 4b01 	strb.w	r4, [r3], #1
 8008234:	3a01      	subs	r2, #1
 8008236:	2c00      	cmp	r4, #0
 8008238:	d1f7      	bne.n	800822a <strncpy+0x6>
 800823a:	441a      	add	r2, r3
 800823c:	2100      	movs	r1, #0
 800823e:	4293      	cmp	r3, r2
 8008240:	d100      	bne.n	8008244 <strncpy+0x20>
 8008242:	bd10      	pop	{r4, pc}
 8008244:	f803 1b01 	strb.w	r1, [r3], #1
 8008248:	e7f9      	b.n	800823e <strncpy+0x1a>
	...

0800824c <_close_r>:
 800824c:	b538      	push	{r3, r4, r5, lr}
 800824e:	4d06      	ldr	r5, [pc, #24]	@ (8008268 <_close_r+0x1c>)
 8008250:	2300      	movs	r3, #0
 8008252:	4604      	mov	r4, r0
 8008254:	4608      	mov	r0, r1
 8008256:	602b      	str	r3, [r5, #0]
 8008258:	f7f9 ff83 	bl	8002162 <_close>
 800825c:	1c43      	adds	r3, r0, #1
 800825e:	d102      	bne.n	8008266 <_close_r+0x1a>
 8008260:	682b      	ldr	r3, [r5, #0]
 8008262:	b103      	cbz	r3, 8008266 <_close_r+0x1a>
 8008264:	6023      	str	r3, [r4, #0]
 8008266:	bd38      	pop	{r3, r4, r5, pc}
 8008268:	200004ac 	.word	0x200004ac

0800826c <_lseek_r>:
 800826c:	b538      	push	{r3, r4, r5, lr}
 800826e:	4d07      	ldr	r5, [pc, #28]	@ (800828c <_lseek_r+0x20>)
 8008270:	4604      	mov	r4, r0
 8008272:	4608      	mov	r0, r1
 8008274:	4611      	mov	r1, r2
 8008276:	2200      	movs	r2, #0
 8008278:	602a      	str	r2, [r5, #0]
 800827a:	461a      	mov	r2, r3
 800827c:	f7f9 ff98 	bl	80021b0 <_lseek>
 8008280:	1c43      	adds	r3, r0, #1
 8008282:	d102      	bne.n	800828a <_lseek_r+0x1e>
 8008284:	682b      	ldr	r3, [r5, #0]
 8008286:	b103      	cbz	r3, 800828a <_lseek_r+0x1e>
 8008288:	6023      	str	r3, [r4, #0]
 800828a:	bd38      	pop	{r3, r4, r5, pc}
 800828c:	200004ac 	.word	0x200004ac

08008290 <_read_r>:
 8008290:	b538      	push	{r3, r4, r5, lr}
 8008292:	4d07      	ldr	r5, [pc, #28]	@ (80082b0 <_read_r+0x20>)
 8008294:	4604      	mov	r4, r0
 8008296:	4608      	mov	r0, r1
 8008298:	4611      	mov	r1, r2
 800829a:	2200      	movs	r2, #0
 800829c:	602a      	str	r2, [r5, #0]
 800829e:	461a      	mov	r2, r3
 80082a0:	f7f9 ff26 	bl	80020f0 <_read>
 80082a4:	1c43      	adds	r3, r0, #1
 80082a6:	d102      	bne.n	80082ae <_read_r+0x1e>
 80082a8:	682b      	ldr	r3, [r5, #0]
 80082aa:	b103      	cbz	r3, 80082ae <_read_r+0x1e>
 80082ac:	6023      	str	r3, [r4, #0]
 80082ae:	bd38      	pop	{r3, r4, r5, pc}
 80082b0:	200004ac 	.word	0x200004ac

080082b4 <_sbrk_r>:
 80082b4:	b538      	push	{r3, r4, r5, lr}
 80082b6:	4d06      	ldr	r5, [pc, #24]	@ (80082d0 <_sbrk_r+0x1c>)
 80082b8:	2300      	movs	r3, #0
 80082ba:	4604      	mov	r4, r0
 80082bc:	4608      	mov	r0, r1
 80082be:	602b      	str	r3, [r5, #0]
 80082c0:	f7f9 ff84 	bl	80021cc <_sbrk>
 80082c4:	1c43      	adds	r3, r0, #1
 80082c6:	d102      	bne.n	80082ce <_sbrk_r+0x1a>
 80082c8:	682b      	ldr	r3, [r5, #0]
 80082ca:	b103      	cbz	r3, 80082ce <_sbrk_r+0x1a>
 80082cc:	6023      	str	r3, [r4, #0]
 80082ce:	bd38      	pop	{r3, r4, r5, pc}
 80082d0:	200004ac 	.word	0x200004ac

080082d4 <_write_r>:
 80082d4:	b538      	push	{r3, r4, r5, lr}
 80082d6:	4d07      	ldr	r5, [pc, #28]	@ (80082f4 <_write_r+0x20>)
 80082d8:	4604      	mov	r4, r0
 80082da:	4608      	mov	r0, r1
 80082dc:	4611      	mov	r1, r2
 80082de:	2200      	movs	r2, #0
 80082e0:	602a      	str	r2, [r5, #0]
 80082e2:	461a      	mov	r2, r3
 80082e4:	f7f9 ff21 	bl	800212a <_write>
 80082e8:	1c43      	adds	r3, r0, #1
 80082ea:	d102      	bne.n	80082f2 <_write_r+0x1e>
 80082ec:	682b      	ldr	r3, [r5, #0]
 80082ee:	b103      	cbz	r3, 80082f2 <_write_r+0x1e>
 80082f0:	6023      	str	r3, [r4, #0]
 80082f2:	bd38      	pop	{r3, r4, r5, pc}
 80082f4:	200004ac 	.word	0x200004ac

080082f8 <__errno>:
 80082f8:	4b01      	ldr	r3, [pc, #4]	@ (8008300 <__errno+0x8>)
 80082fa:	6818      	ldr	r0, [r3, #0]
 80082fc:	4770      	bx	lr
 80082fe:	bf00      	nop
 8008300:	2000001c 	.word	0x2000001c

08008304 <__libc_init_array>:
 8008304:	b570      	push	{r4, r5, r6, lr}
 8008306:	4d0d      	ldr	r5, [pc, #52]	@ (800833c <__libc_init_array+0x38>)
 8008308:	4c0d      	ldr	r4, [pc, #52]	@ (8008340 <__libc_init_array+0x3c>)
 800830a:	1b64      	subs	r4, r4, r5
 800830c:	10a4      	asrs	r4, r4, #2
 800830e:	2600      	movs	r6, #0
 8008310:	42a6      	cmp	r6, r4
 8008312:	d109      	bne.n	8008328 <__libc_init_array+0x24>
 8008314:	4d0b      	ldr	r5, [pc, #44]	@ (8008344 <__libc_init_array+0x40>)
 8008316:	4c0c      	ldr	r4, [pc, #48]	@ (8008348 <__libc_init_array+0x44>)
 8008318:	f001 f954 	bl	80095c4 <_init>
 800831c:	1b64      	subs	r4, r4, r5
 800831e:	10a4      	asrs	r4, r4, #2
 8008320:	2600      	movs	r6, #0
 8008322:	42a6      	cmp	r6, r4
 8008324:	d105      	bne.n	8008332 <__libc_init_array+0x2e>
 8008326:	bd70      	pop	{r4, r5, r6, pc}
 8008328:	f855 3b04 	ldr.w	r3, [r5], #4
 800832c:	4798      	blx	r3
 800832e:	3601      	adds	r6, #1
 8008330:	e7ee      	b.n	8008310 <__libc_init_array+0xc>
 8008332:	f855 3b04 	ldr.w	r3, [r5], #4
 8008336:	4798      	blx	r3
 8008338:	3601      	adds	r6, #1
 800833a:	e7f2      	b.n	8008322 <__libc_init_array+0x1e>
 800833c:	08009944 	.word	0x08009944
 8008340:	08009944 	.word	0x08009944
 8008344:	08009944 	.word	0x08009944
 8008348:	08009948 	.word	0x08009948

0800834c <__retarget_lock_init_recursive>:
 800834c:	4770      	bx	lr

0800834e <__retarget_lock_acquire_recursive>:
 800834e:	4770      	bx	lr

08008350 <__retarget_lock_release_recursive>:
 8008350:	4770      	bx	lr
	...

08008354 <_free_r>:
 8008354:	b538      	push	{r3, r4, r5, lr}
 8008356:	4605      	mov	r5, r0
 8008358:	2900      	cmp	r1, #0
 800835a:	d041      	beq.n	80083e0 <_free_r+0x8c>
 800835c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008360:	1f0c      	subs	r4, r1, #4
 8008362:	2b00      	cmp	r3, #0
 8008364:	bfb8      	it	lt
 8008366:	18e4      	addlt	r4, r4, r3
 8008368:	f7ff fd04 	bl	8007d74 <__malloc_lock>
 800836c:	4a1d      	ldr	r2, [pc, #116]	@ (80083e4 <_free_r+0x90>)
 800836e:	6813      	ldr	r3, [r2, #0]
 8008370:	b933      	cbnz	r3, 8008380 <_free_r+0x2c>
 8008372:	6063      	str	r3, [r4, #4]
 8008374:	6014      	str	r4, [r2, #0]
 8008376:	4628      	mov	r0, r5
 8008378:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800837c:	f7ff bd00 	b.w	8007d80 <__malloc_unlock>
 8008380:	42a3      	cmp	r3, r4
 8008382:	d908      	bls.n	8008396 <_free_r+0x42>
 8008384:	6820      	ldr	r0, [r4, #0]
 8008386:	1821      	adds	r1, r4, r0
 8008388:	428b      	cmp	r3, r1
 800838a:	bf01      	itttt	eq
 800838c:	6819      	ldreq	r1, [r3, #0]
 800838e:	685b      	ldreq	r3, [r3, #4]
 8008390:	1809      	addeq	r1, r1, r0
 8008392:	6021      	streq	r1, [r4, #0]
 8008394:	e7ed      	b.n	8008372 <_free_r+0x1e>
 8008396:	461a      	mov	r2, r3
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	b10b      	cbz	r3, 80083a0 <_free_r+0x4c>
 800839c:	42a3      	cmp	r3, r4
 800839e:	d9fa      	bls.n	8008396 <_free_r+0x42>
 80083a0:	6811      	ldr	r1, [r2, #0]
 80083a2:	1850      	adds	r0, r2, r1
 80083a4:	42a0      	cmp	r0, r4
 80083a6:	d10b      	bne.n	80083c0 <_free_r+0x6c>
 80083a8:	6820      	ldr	r0, [r4, #0]
 80083aa:	4401      	add	r1, r0
 80083ac:	1850      	adds	r0, r2, r1
 80083ae:	4283      	cmp	r3, r0
 80083b0:	6011      	str	r1, [r2, #0]
 80083b2:	d1e0      	bne.n	8008376 <_free_r+0x22>
 80083b4:	6818      	ldr	r0, [r3, #0]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	6053      	str	r3, [r2, #4]
 80083ba:	4408      	add	r0, r1
 80083bc:	6010      	str	r0, [r2, #0]
 80083be:	e7da      	b.n	8008376 <_free_r+0x22>
 80083c0:	d902      	bls.n	80083c8 <_free_r+0x74>
 80083c2:	230c      	movs	r3, #12
 80083c4:	602b      	str	r3, [r5, #0]
 80083c6:	e7d6      	b.n	8008376 <_free_r+0x22>
 80083c8:	6820      	ldr	r0, [r4, #0]
 80083ca:	1821      	adds	r1, r4, r0
 80083cc:	428b      	cmp	r3, r1
 80083ce:	bf04      	itt	eq
 80083d0:	6819      	ldreq	r1, [r3, #0]
 80083d2:	685b      	ldreq	r3, [r3, #4]
 80083d4:	6063      	str	r3, [r4, #4]
 80083d6:	bf04      	itt	eq
 80083d8:	1809      	addeq	r1, r1, r0
 80083da:	6021      	streq	r1, [r4, #0]
 80083dc:	6054      	str	r4, [r2, #4]
 80083de:	e7ca      	b.n	8008376 <_free_r+0x22>
 80083e0:	bd38      	pop	{r3, r4, r5, pc}
 80083e2:	bf00      	nop
 80083e4:	2000036c 	.word	0x2000036c

080083e8 <__ssputs_r>:
 80083e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083ec:	688e      	ldr	r6, [r1, #8]
 80083ee:	461f      	mov	r7, r3
 80083f0:	42be      	cmp	r6, r7
 80083f2:	680b      	ldr	r3, [r1, #0]
 80083f4:	4682      	mov	sl, r0
 80083f6:	460c      	mov	r4, r1
 80083f8:	4690      	mov	r8, r2
 80083fa:	d82d      	bhi.n	8008458 <__ssputs_r+0x70>
 80083fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008400:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008404:	d026      	beq.n	8008454 <__ssputs_r+0x6c>
 8008406:	6965      	ldr	r5, [r4, #20]
 8008408:	6909      	ldr	r1, [r1, #16]
 800840a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800840e:	eba3 0901 	sub.w	r9, r3, r1
 8008412:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008416:	1c7b      	adds	r3, r7, #1
 8008418:	444b      	add	r3, r9
 800841a:	106d      	asrs	r5, r5, #1
 800841c:	429d      	cmp	r5, r3
 800841e:	bf38      	it	cc
 8008420:	461d      	movcc	r5, r3
 8008422:	0553      	lsls	r3, r2, #21
 8008424:	d527      	bpl.n	8008476 <__ssputs_r+0x8e>
 8008426:	4629      	mov	r1, r5
 8008428:	f7ff fc24 	bl	8007c74 <_malloc_r>
 800842c:	4606      	mov	r6, r0
 800842e:	b360      	cbz	r0, 800848a <__ssputs_r+0xa2>
 8008430:	6921      	ldr	r1, [r4, #16]
 8008432:	464a      	mov	r2, r9
 8008434:	f000 ff96 	bl	8009364 <memcpy>
 8008438:	89a3      	ldrh	r3, [r4, #12]
 800843a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800843e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008442:	81a3      	strh	r3, [r4, #12]
 8008444:	6126      	str	r6, [r4, #16]
 8008446:	6165      	str	r5, [r4, #20]
 8008448:	444e      	add	r6, r9
 800844a:	eba5 0509 	sub.w	r5, r5, r9
 800844e:	6026      	str	r6, [r4, #0]
 8008450:	60a5      	str	r5, [r4, #8]
 8008452:	463e      	mov	r6, r7
 8008454:	42be      	cmp	r6, r7
 8008456:	d900      	bls.n	800845a <__ssputs_r+0x72>
 8008458:	463e      	mov	r6, r7
 800845a:	6820      	ldr	r0, [r4, #0]
 800845c:	4632      	mov	r2, r6
 800845e:	4641      	mov	r1, r8
 8008460:	f000 ff43 	bl	80092ea <memmove>
 8008464:	68a3      	ldr	r3, [r4, #8]
 8008466:	1b9b      	subs	r3, r3, r6
 8008468:	60a3      	str	r3, [r4, #8]
 800846a:	6823      	ldr	r3, [r4, #0]
 800846c:	4433      	add	r3, r6
 800846e:	6023      	str	r3, [r4, #0]
 8008470:	2000      	movs	r0, #0
 8008472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008476:	462a      	mov	r2, r5
 8008478:	f000 ff82 	bl	8009380 <_realloc_r>
 800847c:	4606      	mov	r6, r0
 800847e:	2800      	cmp	r0, #0
 8008480:	d1e0      	bne.n	8008444 <__ssputs_r+0x5c>
 8008482:	6921      	ldr	r1, [r4, #16]
 8008484:	4650      	mov	r0, sl
 8008486:	f7ff ff65 	bl	8008354 <_free_r>
 800848a:	230c      	movs	r3, #12
 800848c:	f8ca 3000 	str.w	r3, [sl]
 8008490:	89a3      	ldrh	r3, [r4, #12]
 8008492:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008496:	81a3      	strh	r3, [r4, #12]
 8008498:	f04f 30ff 	mov.w	r0, #4294967295
 800849c:	e7e9      	b.n	8008472 <__ssputs_r+0x8a>
	...

080084a0 <_svfiprintf_r>:
 80084a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084a4:	4698      	mov	r8, r3
 80084a6:	898b      	ldrh	r3, [r1, #12]
 80084a8:	061b      	lsls	r3, r3, #24
 80084aa:	b09d      	sub	sp, #116	@ 0x74
 80084ac:	4607      	mov	r7, r0
 80084ae:	460d      	mov	r5, r1
 80084b0:	4614      	mov	r4, r2
 80084b2:	d510      	bpl.n	80084d6 <_svfiprintf_r+0x36>
 80084b4:	690b      	ldr	r3, [r1, #16]
 80084b6:	b973      	cbnz	r3, 80084d6 <_svfiprintf_r+0x36>
 80084b8:	2140      	movs	r1, #64	@ 0x40
 80084ba:	f7ff fbdb 	bl	8007c74 <_malloc_r>
 80084be:	6028      	str	r0, [r5, #0]
 80084c0:	6128      	str	r0, [r5, #16]
 80084c2:	b930      	cbnz	r0, 80084d2 <_svfiprintf_r+0x32>
 80084c4:	230c      	movs	r3, #12
 80084c6:	603b      	str	r3, [r7, #0]
 80084c8:	f04f 30ff 	mov.w	r0, #4294967295
 80084cc:	b01d      	add	sp, #116	@ 0x74
 80084ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084d2:	2340      	movs	r3, #64	@ 0x40
 80084d4:	616b      	str	r3, [r5, #20]
 80084d6:	2300      	movs	r3, #0
 80084d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80084da:	2320      	movs	r3, #32
 80084dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80084e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80084e4:	2330      	movs	r3, #48	@ 0x30
 80084e6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008684 <_svfiprintf_r+0x1e4>
 80084ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80084ee:	f04f 0901 	mov.w	r9, #1
 80084f2:	4623      	mov	r3, r4
 80084f4:	469a      	mov	sl, r3
 80084f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084fa:	b10a      	cbz	r2, 8008500 <_svfiprintf_r+0x60>
 80084fc:	2a25      	cmp	r2, #37	@ 0x25
 80084fe:	d1f9      	bne.n	80084f4 <_svfiprintf_r+0x54>
 8008500:	ebba 0b04 	subs.w	fp, sl, r4
 8008504:	d00b      	beq.n	800851e <_svfiprintf_r+0x7e>
 8008506:	465b      	mov	r3, fp
 8008508:	4622      	mov	r2, r4
 800850a:	4629      	mov	r1, r5
 800850c:	4638      	mov	r0, r7
 800850e:	f7ff ff6b 	bl	80083e8 <__ssputs_r>
 8008512:	3001      	adds	r0, #1
 8008514:	f000 80a7 	beq.w	8008666 <_svfiprintf_r+0x1c6>
 8008518:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800851a:	445a      	add	r2, fp
 800851c:	9209      	str	r2, [sp, #36]	@ 0x24
 800851e:	f89a 3000 	ldrb.w	r3, [sl]
 8008522:	2b00      	cmp	r3, #0
 8008524:	f000 809f 	beq.w	8008666 <_svfiprintf_r+0x1c6>
 8008528:	2300      	movs	r3, #0
 800852a:	f04f 32ff 	mov.w	r2, #4294967295
 800852e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008532:	f10a 0a01 	add.w	sl, sl, #1
 8008536:	9304      	str	r3, [sp, #16]
 8008538:	9307      	str	r3, [sp, #28]
 800853a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800853e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008540:	4654      	mov	r4, sl
 8008542:	2205      	movs	r2, #5
 8008544:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008548:	484e      	ldr	r0, [pc, #312]	@ (8008684 <_svfiprintf_r+0x1e4>)
 800854a:	f7f7 fe81 	bl	8000250 <memchr>
 800854e:	9a04      	ldr	r2, [sp, #16]
 8008550:	b9d8      	cbnz	r0, 800858a <_svfiprintf_r+0xea>
 8008552:	06d0      	lsls	r0, r2, #27
 8008554:	bf44      	itt	mi
 8008556:	2320      	movmi	r3, #32
 8008558:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800855c:	0711      	lsls	r1, r2, #28
 800855e:	bf44      	itt	mi
 8008560:	232b      	movmi	r3, #43	@ 0x2b
 8008562:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008566:	f89a 3000 	ldrb.w	r3, [sl]
 800856a:	2b2a      	cmp	r3, #42	@ 0x2a
 800856c:	d015      	beq.n	800859a <_svfiprintf_r+0xfa>
 800856e:	9a07      	ldr	r2, [sp, #28]
 8008570:	4654      	mov	r4, sl
 8008572:	2000      	movs	r0, #0
 8008574:	f04f 0c0a 	mov.w	ip, #10
 8008578:	4621      	mov	r1, r4
 800857a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800857e:	3b30      	subs	r3, #48	@ 0x30
 8008580:	2b09      	cmp	r3, #9
 8008582:	d94b      	bls.n	800861c <_svfiprintf_r+0x17c>
 8008584:	b1b0      	cbz	r0, 80085b4 <_svfiprintf_r+0x114>
 8008586:	9207      	str	r2, [sp, #28]
 8008588:	e014      	b.n	80085b4 <_svfiprintf_r+0x114>
 800858a:	eba0 0308 	sub.w	r3, r0, r8
 800858e:	fa09 f303 	lsl.w	r3, r9, r3
 8008592:	4313      	orrs	r3, r2
 8008594:	9304      	str	r3, [sp, #16]
 8008596:	46a2      	mov	sl, r4
 8008598:	e7d2      	b.n	8008540 <_svfiprintf_r+0xa0>
 800859a:	9b03      	ldr	r3, [sp, #12]
 800859c:	1d19      	adds	r1, r3, #4
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	9103      	str	r1, [sp, #12]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	bfbb      	ittet	lt
 80085a6:	425b      	neglt	r3, r3
 80085a8:	f042 0202 	orrlt.w	r2, r2, #2
 80085ac:	9307      	strge	r3, [sp, #28]
 80085ae:	9307      	strlt	r3, [sp, #28]
 80085b0:	bfb8      	it	lt
 80085b2:	9204      	strlt	r2, [sp, #16]
 80085b4:	7823      	ldrb	r3, [r4, #0]
 80085b6:	2b2e      	cmp	r3, #46	@ 0x2e
 80085b8:	d10a      	bne.n	80085d0 <_svfiprintf_r+0x130>
 80085ba:	7863      	ldrb	r3, [r4, #1]
 80085bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80085be:	d132      	bne.n	8008626 <_svfiprintf_r+0x186>
 80085c0:	9b03      	ldr	r3, [sp, #12]
 80085c2:	1d1a      	adds	r2, r3, #4
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	9203      	str	r2, [sp, #12]
 80085c8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80085cc:	3402      	adds	r4, #2
 80085ce:	9305      	str	r3, [sp, #20]
 80085d0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008694 <_svfiprintf_r+0x1f4>
 80085d4:	7821      	ldrb	r1, [r4, #0]
 80085d6:	2203      	movs	r2, #3
 80085d8:	4650      	mov	r0, sl
 80085da:	f7f7 fe39 	bl	8000250 <memchr>
 80085de:	b138      	cbz	r0, 80085f0 <_svfiprintf_r+0x150>
 80085e0:	9b04      	ldr	r3, [sp, #16]
 80085e2:	eba0 000a 	sub.w	r0, r0, sl
 80085e6:	2240      	movs	r2, #64	@ 0x40
 80085e8:	4082      	lsls	r2, r0
 80085ea:	4313      	orrs	r3, r2
 80085ec:	3401      	adds	r4, #1
 80085ee:	9304      	str	r3, [sp, #16]
 80085f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085f4:	4824      	ldr	r0, [pc, #144]	@ (8008688 <_svfiprintf_r+0x1e8>)
 80085f6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80085fa:	2206      	movs	r2, #6
 80085fc:	f7f7 fe28 	bl	8000250 <memchr>
 8008600:	2800      	cmp	r0, #0
 8008602:	d036      	beq.n	8008672 <_svfiprintf_r+0x1d2>
 8008604:	4b21      	ldr	r3, [pc, #132]	@ (800868c <_svfiprintf_r+0x1ec>)
 8008606:	bb1b      	cbnz	r3, 8008650 <_svfiprintf_r+0x1b0>
 8008608:	9b03      	ldr	r3, [sp, #12]
 800860a:	3307      	adds	r3, #7
 800860c:	f023 0307 	bic.w	r3, r3, #7
 8008610:	3308      	adds	r3, #8
 8008612:	9303      	str	r3, [sp, #12]
 8008614:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008616:	4433      	add	r3, r6
 8008618:	9309      	str	r3, [sp, #36]	@ 0x24
 800861a:	e76a      	b.n	80084f2 <_svfiprintf_r+0x52>
 800861c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008620:	460c      	mov	r4, r1
 8008622:	2001      	movs	r0, #1
 8008624:	e7a8      	b.n	8008578 <_svfiprintf_r+0xd8>
 8008626:	2300      	movs	r3, #0
 8008628:	3401      	adds	r4, #1
 800862a:	9305      	str	r3, [sp, #20]
 800862c:	4619      	mov	r1, r3
 800862e:	f04f 0c0a 	mov.w	ip, #10
 8008632:	4620      	mov	r0, r4
 8008634:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008638:	3a30      	subs	r2, #48	@ 0x30
 800863a:	2a09      	cmp	r2, #9
 800863c:	d903      	bls.n	8008646 <_svfiprintf_r+0x1a6>
 800863e:	2b00      	cmp	r3, #0
 8008640:	d0c6      	beq.n	80085d0 <_svfiprintf_r+0x130>
 8008642:	9105      	str	r1, [sp, #20]
 8008644:	e7c4      	b.n	80085d0 <_svfiprintf_r+0x130>
 8008646:	fb0c 2101 	mla	r1, ip, r1, r2
 800864a:	4604      	mov	r4, r0
 800864c:	2301      	movs	r3, #1
 800864e:	e7f0      	b.n	8008632 <_svfiprintf_r+0x192>
 8008650:	ab03      	add	r3, sp, #12
 8008652:	9300      	str	r3, [sp, #0]
 8008654:	462a      	mov	r2, r5
 8008656:	4b0e      	ldr	r3, [pc, #56]	@ (8008690 <_svfiprintf_r+0x1f0>)
 8008658:	a904      	add	r1, sp, #16
 800865a:	4638      	mov	r0, r7
 800865c:	f3af 8000 	nop.w
 8008660:	1c42      	adds	r2, r0, #1
 8008662:	4606      	mov	r6, r0
 8008664:	d1d6      	bne.n	8008614 <_svfiprintf_r+0x174>
 8008666:	89ab      	ldrh	r3, [r5, #12]
 8008668:	065b      	lsls	r3, r3, #25
 800866a:	f53f af2d 	bmi.w	80084c8 <_svfiprintf_r+0x28>
 800866e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008670:	e72c      	b.n	80084cc <_svfiprintf_r+0x2c>
 8008672:	ab03      	add	r3, sp, #12
 8008674:	9300      	str	r3, [sp, #0]
 8008676:	462a      	mov	r2, r5
 8008678:	4b05      	ldr	r3, [pc, #20]	@ (8008690 <_svfiprintf_r+0x1f0>)
 800867a:	a904      	add	r1, sp, #16
 800867c:	4638      	mov	r0, r7
 800867e:	f000 fa45 	bl	8008b0c <_printf_i>
 8008682:	e7ed      	b.n	8008660 <_svfiprintf_r+0x1c0>
 8008684:	080097ec 	.word	0x080097ec
 8008688:	080097f6 	.word	0x080097f6
 800868c:	00000000 	.word	0x00000000
 8008690:	080083e9 	.word	0x080083e9
 8008694:	080097f2 	.word	0x080097f2

08008698 <_sungetc_r>:
 8008698:	b538      	push	{r3, r4, r5, lr}
 800869a:	1c4b      	adds	r3, r1, #1
 800869c:	4614      	mov	r4, r2
 800869e:	d103      	bne.n	80086a8 <_sungetc_r+0x10>
 80086a0:	f04f 35ff 	mov.w	r5, #4294967295
 80086a4:	4628      	mov	r0, r5
 80086a6:	bd38      	pop	{r3, r4, r5, pc}
 80086a8:	8993      	ldrh	r3, [r2, #12]
 80086aa:	f023 0320 	bic.w	r3, r3, #32
 80086ae:	8193      	strh	r3, [r2, #12]
 80086b0:	6853      	ldr	r3, [r2, #4]
 80086b2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80086b4:	b2cd      	uxtb	r5, r1
 80086b6:	b18a      	cbz	r2, 80086dc <_sungetc_r+0x44>
 80086b8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80086ba:	429a      	cmp	r2, r3
 80086bc:	dd08      	ble.n	80086d0 <_sungetc_r+0x38>
 80086be:	6823      	ldr	r3, [r4, #0]
 80086c0:	1e5a      	subs	r2, r3, #1
 80086c2:	6022      	str	r2, [r4, #0]
 80086c4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80086c8:	6863      	ldr	r3, [r4, #4]
 80086ca:	3301      	adds	r3, #1
 80086cc:	6063      	str	r3, [r4, #4]
 80086ce:	e7e9      	b.n	80086a4 <_sungetc_r+0xc>
 80086d0:	4621      	mov	r1, r4
 80086d2:	f000 fdd0 	bl	8009276 <__submore>
 80086d6:	2800      	cmp	r0, #0
 80086d8:	d0f1      	beq.n	80086be <_sungetc_r+0x26>
 80086da:	e7e1      	b.n	80086a0 <_sungetc_r+0x8>
 80086dc:	6921      	ldr	r1, [r4, #16]
 80086de:	6822      	ldr	r2, [r4, #0]
 80086e0:	b141      	cbz	r1, 80086f4 <_sungetc_r+0x5c>
 80086e2:	4291      	cmp	r1, r2
 80086e4:	d206      	bcs.n	80086f4 <_sungetc_r+0x5c>
 80086e6:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80086ea:	42a9      	cmp	r1, r5
 80086ec:	d102      	bne.n	80086f4 <_sungetc_r+0x5c>
 80086ee:	3a01      	subs	r2, #1
 80086f0:	6022      	str	r2, [r4, #0]
 80086f2:	e7ea      	b.n	80086ca <_sungetc_r+0x32>
 80086f4:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 80086f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80086fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80086fe:	2303      	movs	r3, #3
 8008700:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008702:	4623      	mov	r3, r4
 8008704:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008708:	6023      	str	r3, [r4, #0]
 800870a:	2301      	movs	r3, #1
 800870c:	e7de      	b.n	80086cc <_sungetc_r+0x34>

0800870e <__ssrefill_r>:
 800870e:	b510      	push	{r4, lr}
 8008710:	460c      	mov	r4, r1
 8008712:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8008714:	b169      	cbz	r1, 8008732 <__ssrefill_r+0x24>
 8008716:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800871a:	4299      	cmp	r1, r3
 800871c:	d001      	beq.n	8008722 <__ssrefill_r+0x14>
 800871e:	f7ff fe19 	bl	8008354 <_free_r>
 8008722:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008724:	6063      	str	r3, [r4, #4]
 8008726:	2000      	movs	r0, #0
 8008728:	6360      	str	r0, [r4, #52]	@ 0x34
 800872a:	b113      	cbz	r3, 8008732 <__ssrefill_r+0x24>
 800872c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800872e:	6023      	str	r3, [r4, #0]
 8008730:	bd10      	pop	{r4, pc}
 8008732:	6923      	ldr	r3, [r4, #16]
 8008734:	6023      	str	r3, [r4, #0]
 8008736:	2300      	movs	r3, #0
 8008738:	6063      	str	r3, [r4, #4]
 800873a:	89a3      	ldrh	r3, [r4, #12]
 800873c:	f043 0320 	orr.w	r3, r3, #32
 8008740:	81a3      	strh	r3, [r4, #12]
 8008742:	f04f 30ff 	mov.w	r0, #4294967295
 8008746:	e7f3      	b.n	8008730 <__ssrefill_r+0x22>

08008748 <__ssvfiscanf_r>:
 8008748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800874c:	460c      	mov	r4, r1
 800874e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8008752:	2100      	movs	r1, #0
 8008754:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8008758:	49a5      	ldr	r1, [pc, #660]	@ (80089f0 <__ssvfiscanf_r+0x2a8>)
 800875a:	91a0      	str	r1, [sp, #640]	@ 0x280
 800875c:	f10d 0804 	add.w	r8, sp, #4
 8008760:	49a4      	ldr	r1, [pc, #656]	@ (80089f4 <__ssvfiscanf_r+0x2ac>)
 8008762:	4fa5      	ldr	r7, [pc, #660]	@ (80089f8 <__ssvfiscanf_r+0x2b0>)
 8008764:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8008768:	4606      	mov	r6, r0
 800876a:	91a1      	str	r1, [sp, #644]	@ 0x284
 800876c:	9300      	str	r3, [sp, #0]
 800876e:	7813      	ldrb	r3, [r2, #0]
 8008770:	2b00      	cmp	r3, #0
 8008772:	f000 8158 	beq.w	8008a26 <__ssvfiscanf_r+0x2de>
 8008776:	5cf9      	ldrb	r1, [r7, r3]
 8008778:	f011 0108 	ands.w	r1, r1, #8
 800877c:	f102 0501 	add.w	r5, r2, #1
 8008780:	d019      	beq.n	80087b6 <__ssvfiscanf_r+0x6e>
 8008782:	6863      	ldr	r3, [r4, #4]
 8008784:	2b00      	cmp	r3, #0
 8008786:	dd0f      	ble.n	80087a8 <__ssvfiscanf_r+0x60>
 8008788:	6823      	ldr	r3, [r4, #0]
 800878a:	781a      	ldrb	r2, [r3, #0]
 800878c:	5cba      	ldrb	r2, [r7, r2]
 800878e:	0712      	lsls	r2, r2, #28
 8008790:	d401      	bmi.n	8008796 <__ssvfiscanf_r+0x4e>
 8008792:	462a      	mov	r2, r5
 8008794:	e7eb      	b.n	800876e <__ssvfiscanf_r+0x26>
 8008796:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008798:	3201      	adds	r2, #1
 800879a:	9245      	str	r2, [sp, #276]	@ 0x114
 800879c:	6862      	ldr	r2, [r4, #4]
 800879e:	3301      	adds	r3, #1
 80087a0:	3a01      	subs	r2, #1
 80087a2:	6062      	str	r2, [r4, #4]
 80087a4:	6023      	str	r3, [r4, #0]
 80087a6:	e7ec      	b.n	8008782 <__ssvfiscanf_r+0x3a>
 80087a8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80087aa:	4621      	mov	r1, r4
 80087ac:	4630      	mov	r0, r6
 80087ae:	4798      	blx	r3
 80087b0:	2800      	cmp	r0, #0
 80087b2:	d0e9      	beq.n	8008788 <__ssvfiscanf_r+0x40>
 80087b4:	e7ed      	b.n	8008792 <__ssvfiscanf_r+0x4a>
 80087b6:	2b25      	cmp	r3, #37	@ 0x25
 80087b8:	d012      	beq.n	80087e0 <__ssvfiscanf_r+0x98>
 80087ba:	4699      	mov	r9, r3
 80087bc:	6863      	ldr	r3, [r4, #4]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	f340 8093 	ble.w	80088ea <__ssvfiscanf_r+0x1a2>
 80087c4:	6822      	ldr	r2, [r4, #0]
 80087c6:	7813      	ldrb	r3, [r2, #0]
 80087c8:	454b      	cmp	r3, r9
 80087ca:	f040 812c 	bne.w	8008a26 <__ssvfiscanf_r+0x2de>
 80087ce:	6863      	ldr	r3, [r4, #4]
 80087d0:	3b01      	subs	r3, #1
 80087d2:	6063      	str	r3, [r4, #4]
 80087d4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80087d6:	3201      	adds	r2, #1
 80087d8:	3301      	adds	r3, #1
 80087da:	6022      	str	r2, [r4, #0]
 80087dc:	9345      	str	r3, [sp, #276]	@ 0x114
 80087de:	e7d8      	b.n	8008792 <__ssvfiscanf_r+0x4a>
 80087e0:	9141      	str	r1, [sp, #260]	@ 0x104
 80087e2:	9143      	str	r1, [sp, #268]	@ 0x10c
 80087e4:	7853      	ldrb	r3, [r2, #1]
 80087e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80087e8:	bf02      	ittt	eq
 80087ea:	2310      	moveq	r3, #16
 80087ec:	1c95      	addeq	r5, r2, #2
 80087ee:	9341      	streq	r3, [sp, #260]	@ 0x104
 80087f0:	220a      	movs	r2, #10
 80087f2:	46a9      	mov	r9, r5
 80087f4:	f819 1b01 	ldrb.w	r1, [r9], #1
 80087f8:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80087fc:	2b09      	cmp	r3, #9
 80087fe:	d91e      	bls.n	800883e <__ssvfiscanf_r+0xf6>
 8008800:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 80089fc <__ssvfiscanf_r+0x2b4>
 8008804:	2203      	movs	r2, #3
 8008806:	4650      	mov	r0, sl
 8008808:	f7f7 fd22 	bl	8000250 <memchr>
 800880c:	b138      	cbz	r0, 800881e <__ssvfiscanf_r+0xd6>
 800880e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008810:	eba0 000a 	sub.w	r0, r0, sl
 8008814:	2301      	movs	r3, #1
 8008816:	4083      	lsls	r3, r0
 8008818:	4313      	orrs	r3, r2
 800881a:	9341      	str	r3, [sp, #260]	@ 0x104
 800881c:	464d      	mov	r5, r9
 800881e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008822:	2b78      	cmp	r3, #120	@ 0x78
 8008824:	d806      	bhi.n	8008834 <__ssvfiscanf_r+0xec>
 8008826:	2b57      	cmp	r3, #87	@ 0x57
 8008828:	d810      	bhi.n	800884c <__ssvfiscanf_r+0x104>
 800882a:	2b25      	cmp	r3, #37	@ 0x25
 800882c:	d0c5      	beq.n	80087ba <__ssvfiscanf_r+0x72>
 800882e:	d857      	bhi.n	80088e0 <__ssvfiscanf_r+0x198>
 8008830:	2b00      	cmp	r3, #0
 8008832:	d065      	beq.n	8008900 <__ssvfiscanf_r+0x1b8>
 8008834:	2303      	movs	r3, #3
 8008836:	9347      	str	r3, [sp, #284]	@ 0x11c
 8008838:	230a      	movs	r3, #10
 800883a:	9342      	str	r3, [sp, #264]	@ 0x108
 800883c:	e078      	b.n	8008930 <__ssvfiscanf_r+0x1e8>
 800883e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8008840:	fb02 1103 	mla	r1, r2, r3, r1
 8008844:	3930      	subs	r1, #48	@ 0x30
 8008846:	9143      	str	r1, [sp, #268]	@ 0x10c
 8008848:	464d      	mov	r5, r9
 800884a:	e7d2      	b.n	80087f2 <__ssvfiscanf_r+0xaa>
 800884c:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8008850:	2a20      	cmp	r2, #32
 8008852:	d8ef      	bhi.n	8008834 <__ssvfiscanf_r+0xec>
 8008854:	a101      	add	r1, pc, #4	@ (adr r1, 800885c <__ssvfiscanf_r+0x114>)
 8008856:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800885a:	bf00      	nop
 800885c:	0800890f 	.word	0x0800890f
 8008860:	08008835 	.word	0x08008835
 8008864:	08008835 	.word	0x08008835
 8008868:	08008969 	.word	0x08008969
 800886c:	08008835 	.word	0x08008835
 8008870:	08008835 	.word	0x08008835
 8008874:	08008835 	.word	0x08008835
 8008878:	08008835 	.word	0x08008835
 800887c:	08008835 	.word	0x08008835
 8008880:	08008835 	.word	0x08008835
 8008884:	08008835 	.word	0x08008835
 8008888:	0800897f 	.word	0x0800897f
 800888c:	08008965 	.word	0x08008965
 8008890:	080088e7 	.word	0x080088e7
 8008894:	080088e7 	.word	0x080088e7
 8008898:	080088e7 	.word	0x080088e7
 800889c:	08008835 	.word	0x08008835
 80088a0:	08008921 	.word	0x08008921
 80088a4:	08008835 	.word	0x08008835
 80088a8:	08008835 	.word	0x08008835
 80088ac:	08008835 	.word	0x08008835
 80088b0:	08008835 	.word	0x08008835
 80088b4:	0800898f 	.word	0x0800898f
 80088b8:	08008929 	.word	0x08008929
 80088bc:	08008907 	.word	0x08008907
 80088c0:	08008835 	.word	0x08008835
 80088c4:	08008835 	.word	0x08008835
 80088c8:	0800898b 	.word	0x0800898b
 80088cc:	08008835 	.word	0x08008835
 80088d0:	08008965 	.word	0x08008965
 80088d4:	08008835 	.word	0x08008835
 80088d8:	08008835 	.word	0x08008835
 80088dc:	0800890f 	.word	0x0800890f
 80088e0:	3b45      	subs	r3, #69	@ 0x45
 80088e2:	2b02      	cmp	r3, #2
 80088e4:	d8a6      	bhi.n	8008834 <__ssvfiscanf_r+0xec>
 80088e6:	2305      	movs	r3, #5
 80088e8:	e021      	b.n	800892e <__ssvfiscanf_r+0x1e6>
 80088ea:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80088ec:	4621      	mov	r1, r4
 80088ee:	4630      	mov	r0, r6
 80088f0:	4798      	blx	r3
 80088f2:	2800      	cmp	r0, #0
 80088f4:	f43f af66 	beq.w	80087c4 <__ssvfiscanf_r+0x7c>
 80088f8:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80088fa:	2800      	cmp	r0, #0
 80088fc:	f040 808b 	bne.w	8008a16 <__ssvfiscanf_r+0x2ce>
 8008900:	f04f 30ff 	mov.w	r0, #4294967295
 8008904:	e08b      	b.n	8008a1e <__ssvfiscanf_r+0x2d6>
 8008906:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008908:	f042 0220 	orr.w	r2, r2, #32
 800890c:	9241      	str	r2, [sp, #260]	@ 0x104
 800890e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008910:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008914:	9241      	str	r2, [sp, #260]	@ 0x104
 8008916:	2210      	movs	r2, #16
 8008918:	2b6e      	cmp	r3, #110	@ 0x6e
 800891a:	9242      	str	r2, [sp, #264]	@ 0x108
 800891c:	d902      	bls.n	8008924 <__ssvfiscanf_r+0x1dc>
 800891e:	e005      	b.n	800892c <__ssvfiscanf_r+0x1e4>
 8008920:	2300      	movs	r3, #0
 8008922:	9342      	str	r3, [sp, #264]	@ 0x108
 8008924:	2303      	movs	r3, #3
 8008926:	e002      	b.n	800892e <__ssvfiscanf_r+0x1e6>
 8008928:	2308      	movs	r3, #8
 800892a:	9342      	str	r3, [sp, #264]	@ 0x108
 800892c:	2304      	movs	r3, #4
 800892e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8008930:	6863      	ldr	r3, [r4, #4]
 8008932:	2b00      	cmp	r3, #0
 8008934:	dd39      	ble.n	80089aa <__ssvfiscanf_r+0x262>
 8008936:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008938:	0659      	lsls	r1, r3, #25
 800893a:	d404      	bmi.n	8008946 <__ssvfiscanf_r+0x1fe>
 800893c:	6823      	ldr	r3, [r4, #0]
 800893e:	781a      	ldrb	r2, [r3, #0]
 8008940:	5cba      	ldrb	r2, [r7, r2]
 8008942:	0712      	lsls	r2, r2, #28
 8008944:	d438      	bmi.n	80089b8 <__ssvfiscanf_r+0x270>
 8008946:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8008948:	2b02      	cmp	r3, #2
 800894a:	dc47      	bgt.n	80089dc <__ssvfiscanf_r+0x294>
 800894c:	466b      	mov	r3, sp
 800894e:	4622      	mov	r2, r4
 8008950:	a941      	add	r1, sp, #260	@ 0x104
 8008952:	4630      	mov	r0, r6
 8008954:	f000 f9fa 	bl	8008d4c <_scanf_chars>
 8008958:	2801      	cmp	r0, #1
 800895a:	d064      	beq.n	8008a26 <__ssvfiscanf_r+0x2de>
 800895c:	2802      	cmp	r0, #2
 800895e:	f47f af18 	bne.w	8008792 <__ssvfiscanf_r+0x4a>
 8008962:	e7c9      	b.n	80088f8 <__ssvfiscanf_r+0x1b0>
 8008964:	220a      	movs	r2, #10
 8008966:	e7d7      	b.n	8008918 <__ssvfiscanf_r+0x1d0>
 8008968:	4629      	mov	r1, r5
 800896a:	4640      	mov	r0, r8
 800896c:	f000 fc4a 	bl	8009204 <__sccl>
 8008970:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008972:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008976:	9341      	str	r3, [sp, #260]	@ 0x104
 8008978:	4605      	mov	r5, r0
 800897a:	2301      	movs	r3, #1
 800897c:	e7d7      	b.n	800892e <__ssvfiscanf_r+0x1e6>
 800897e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008980:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008984:	9341      	str	r3, [sp, #260]	@ 0x104
 8008986:	2300      	movs	r3, #0
 8008988:	e7d1      	b.n	800892e <__ssvfiscanf_r+0x1e6>
 800898a:	2302      	movs	r3, #2
 800898c:	e7cf      	b.n	800892e <__ssvfiscanf_r+0x1e6>
 800898e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8008990:	06c3      	lsls	r3, r0, #27
 8008992:	f53f aefe 	bmi.w	8008792 <__ssvfiscanf_r+0x4a>
 8008996:	9b00      	ldr	r3, [sp, #0]
 8008998:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800899a:	1d19      	adds	r1, r3, #4
 800899c:	9100      	str	r1, [sp, #0]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	07c0      	lsls	r0, r0, #31
 80089a2:	bf4c      	ite	mi
 80089a4:	801a      	strhmi	r2, [r3, #0]
 80089a6:	601a      	strpl	r2, [r3, #0]
 80089a8:	e6f3      	b.n	8008792 <__ssvfiscanf_r+0x4a>
 80089aa:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80089ac:	4621      	mov	r1, r4
 80089ae:	4630      	mov	r0, r6
 80089b0:	4798      	blx	r3
 80089b2:	2800      	cmp	r0, #0
 80089b4:	d0bf      	beq.n	8008936 <__ssvfiscanf_r+0x1ee>
 80089b6:	e79f      	b.n	80088f8 <__ssvfiscanf_r+0x1b0>
 80089b8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80089ba:	3201      	adds	r2, #1
 80089bc:	9245      	str	r2, [sp, #276]	@ 0x114
 80089be:	6862      	ldr	r2, [r4, #4]
 80089c0:	3a01      	subs	r2, #1
 80089c2:	2a00      	cmp	r2, #0
 80089c4:	6062      	str	r2, [r4, #4]
 80089c6:	dd02      	ble.n	80089ce <__ssvfiscanf_r+0x286>
 80089c8:	3301      	adds	r3, #1
 80089ca:	6023      	str	r3, [r4, #0]
 80089cc:	e7b6      	b.n	800893c <__ssvfiscanf_r+0x1f4>
 80089ce:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80089d0:	4621      	mov	r1, r4
 80089d2:	4630      	mov	r0, r6
 80089d4:	4798      	blx	r3
 80089d6:	2800      	cmp	r0, #0
 80089d8:	d0b0      	beq.n	800893c <__ssvfiscanf_r+0x1f4>
 80089da:	e78d      	b.n	80088f8 <__ssvfiscanf_r+0x1b0>
 80089dc:	2b04      	cmp	r3, #4
 80089de:	dc0f      	bgt.n	8008a00 <__ssvfiscanf_r+0x2b8>
 80089e0:	466b      	mov	r3, sp
 80089e2:	4622      	mov	r2, r4
 80089e4:	a941      	add	r1, sp, #260	@ 0x104
 80089e6:	4630      	mov	r0, r6
 80089e8:	f000 fa0a 	bl	8008e00 <_scanf_i>
 80089ec:	e7b4      	b.n	8008958 <__ssvfiscanf_r+0x210>
 80089ee:	bf00      	nop
 80089f0:	08008699 	.word	0x08008699
 80089f4:	0800870f 	.word	0x0800870f
 80089f8:	0800983b 	.word	0x0800983b
 80089fc:	080097f2 	.word	0x080097f2
 8008a00:	4b0a      	ldr	r3, [pc, #40]	@ (8008a2c <__ssvfiscanf_r+0x2e4>)
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	f43f aec5 	beq.w	8008792 <__ssvfiscanf_r+0x4a>
 8008a08:	466b      	mov	r3, sp
 8008a0a:	4622      	mov	r2, r4
 8008a0c:	a941      	add	r1, sp, #260	@ 0x104
 8008a0e:	4630      	mov	r0, r6
 8008a10:	f3af 8000 	nop.w
 8008a14:	e7a0      	b.n	8008958 <__ssvfiscanf_r+0x210>
 8008a16:	89a3      	ldrh	r3, [r4, #12]
 8008a18:	065b      	lsls	r3, r3, #25
 8008a1a:	f53f af71 	bmi.w	8008900 <__ssvfiscanf_r+0x1b8>
 8008a1e:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8008a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a26:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8008a28:	e7f9      	b.n	8008a1e <__ssvfiscanf_r+0x2d6>
 8008a2a:	bf00      	nop
 8008a2c:	00000000 	.word	0x00000000

08008a30 <_printf_common>:
 8008a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a34:	4616      	mov	r6, r2
 8008a36:	4698      	mov	r8, r3
 8008a38:	688a      	ldr	r2, [r1, #8]
 8008a3a:	690b      	ldr	r3, [r1, #16]
 8008a3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008a40:	4293      	cmp	r3, r2
 8008a42:	bfb8      	it	lt
 8008a44:	4613      	movlt	r3, r2
 8008a46:	6033      	str	r3, [r6, #0]
 8008a48:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008a4c:	4607      	mov	r7, r0
 8008a4e:	460c      	mov	r4, r1
 8008a50:	b10a      	cbz	r2, 8008a56 <_printf_common+0x26>
 8008a52:	3301      	adds	r3, #1
 8008a54:	6033      	str	r3, [r6, #0]
 8008a56:	6823      	ldr	r3, [r4, #0]
 8008a58:	0699      	lsls	r1, r3, #26
 8008a5a:	bf42      	ittt	mi
 8008a5c:	6833      	ldrmi	r3, [r6, #0]
 8008a5e:	3302      	addmi	r3, #2
 8008a60:	6033      	strmi	r3, [r6, #0]
 8008a62:	6825      	ldr	r5, [r4, #0]
 8008a64:	f015 0506 	ands.w	r5, r5, #6
 8008a68:	d106      	bne.n	8008a78 <_printf_common+0x48>
 8008a6a:	f104 0a19 	add.w	sl, r4, #25
 8008a6e:	68e3      	ldr	r3, [r4, #12]
 8008a70:	6832      	ldr	r2, [r6, #0]
 8008a72:	1a9b      	subs	r3, r3, r2
 8008a74:	42ab      	cmp	r3, r5
 8008a76:	dc26      	bgt.n	8008ac6 <_printf_common+0x96>
 8008a78:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008a7c:	6822      	ldr	r2, [r4, #0]
 8008a7e:	3b00      	subs	r3, #0
 8008a80:	bf18      	it	ne
 8008a82:	2301      	movne	r3, #1
 8008a84:	0692      	lsls	r2, r2, #26
 8008a86:	d42b      	bmi.n	8008ae0 <_printf_common+0xb0>
 8008a88:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008a8c:	4641      	mov	r1, r8
 8008a8e:	4638      	mov	r0, r7
 8008a90:	47c8      	blx	r9
 8008a92:	3001      	adds	r0, #1
 8008a94:	d01e      	beq.n	8008ad4 <_printf_common+0xa4>
 8008a96:	6823      	ldr	r3, [r4, #0]
 8008a98:	6922      	ldr	r2, [r4, #16]
 8008a9a:	f003 0306 	and.w	r3, r3, #6
 8008a9e:	2b04      	cmp	r3, #4
 8008aa0:	bf02      	ittt	eq
 8008aa2:	68e5      	ldreq	r5, [r4, #12]
 8008aa4:	6833      	ldreq	r3, [r6, #0]
 8008aa6:	1aed      	subeq	r5, r5, r3
 8008aa8:	68a3      	ldr	r3, [r4, #8]
 8008aaa:	bf0c      	ite	eq
 8008aac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ab0:	2500      	movne	r5, #0
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	bfc4      	itt	gt
 8008ab6:	1a9b      	subgt	r3, r3, r2
 8008ab8:	18ed      	addgt	r5, r5, r3
 8008aba:	2600      	movs	r6, #0
 8008abc:	341a      	adds	r4, #26
 8008abe:	42b5      	cmp	r5, r6
 8008ac0:	d11a      	bne.n	8008af8 <_printf_common+0xc8>
 8008ac2:	2000      	movs	r0, #0
 8008ac4:	e008      	b.n	8008ad8 <_printf_common+0xa8>
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	4652      	mov	r2, sl
 8008aca:	4641      	mov	r1, r8
 8008acc:	4638      	mov	r0, r7
 8008ace:	47c8      	blx	r9
 8008ad0:	3001      	adds	r0, #1
 8008ad2:	d103      	bne.n	8008adc <_printf_common+0xac>
 8008ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008adc:	3501      	adds	r5, #1
 8008ade:	e7c6      	b.n	8008a6e <_printf_common+0x3e>
 8008ae0:	18e1      	adds	r1, r4, r3
 8008ae2:	1c5a      	adds	r2, r3, #1
 8008ae4:	2030      	movs	r0, #48	@ 0x30
 8008ae6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008aea:	4422      	add	r2, r4
 8008aec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008af0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008af4:	3302      	adds	r3, #2
 8008af6:	e7c7      	b.n	8008a88 <_printf_common+0x58>
 8008af8:	2301      	movs	r3, #1
 8008afa:	4622      	mov	r2, r4
 8008afc:	4641      	mov	r1, r8
 8008afe:	4638      	mov	r0, r7
 8008b00:	47c8      	blx	r9
 8008b02:	3001      	adds	r0, #1
 8008b04:	d0e6      	beq.n	8008ad4 <_printf_common+0xa4>
 8008b06:	3601      	adds	r6, #1
 8008b08:	e7d9      	b.n	8008abe <_printf_common+0x8e>
	...

08008b0c <_printf_i>:
 8008b0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b10:	7e0f      	ldrb	r7, [r1, #24]
 8008b12:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008b14:	2f78      	cmp	r7, #120	@ 0x78
 8008b16:	4691      	mov	r9, r2
 8008b18:	4680      	mov	r8, r0
 8008b1a:	460c      	mov	r4, r1
 8008b1c:	469a      	mov	sl, r3
 8008b1e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008b22:	d807      	bhi.n	8008b34 <_printf_i+0x28>
 8008b24:	2f62      	cmp	r7, #98	@ 0x62
 8008b26:	d80a      	bhi.n	8008b3e <_printf_i+0x32>
 8008b28:	2f00      	cmp	r7, #0
 8008b2a:	f000 80d2 	beq.w	8008cd2 <_printf_i+0x1c6>
 8008b2e:	2f58      	cmp	r7, #88	@ 0x58
 8008b30:	f000 80b9 	beq.w	8008ca6 <_printf_i+0x19a>
 8008b34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b38:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008b3c:	e03a      	b.n	8008bb4 <_printf_i+0xa8>
 8008b3e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008b42:	2b15      	cmp	r3, #21
 8008b44:	d8f6      	bhi.n	8008b34 <_printf_i+0x28>
 8008b46:	a101      	add	r1, pc, #4	@ (adr r1, 8008b4c <_printf_i+0x40>)
 8008b48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b4c:	08008ba5 	.word	0x08008ba5
 8008b50:	08008bb9 	.word	0x08008bb9
 8008b54:	08008b35 	.word	0x08008b35
 8008b58:	08008b35 	.word	0x08008b35
 8008b5c:	08008b35 	.word	0x08008b35
 8008b60:	08008b35 	.word	0x08008b35
 8008b64:	08008bb9 	.word	0x08008bb9
 8008b68:	08008b35 	.word	0x08008b35
 8008b6c:	08008b35 	.word	0x08008b35
 8008b70:	08008b35 	.word	0x08008b35
 8008b74:	08008b35 	.word	0x08008b35
 8008b78:	08008cb9 	.word	0x08008cb9
 8008b7c:	08008be3 	.word	0x08008be3
 8008b80:	08008c73 	.word	0x08008c73
 8008b84:	08008b35 	.word	0x08008b35
 8008b88:	08008b35 	.word	0x08008b35
 8008b8c:	08008cdb 	.word	0x08008cdb
 8008b90:	08008b35 	.word	0x08008b35
 8008b94:	08008be3 	.word	0x08008be3
 8008b98:	08008b35 	.word	0x08008b35
 8008b9c:	08008b35 	.word	0x08008b35
 8008ba0:	08008c7b 	.word	0x08008c7b
 8008ba4:	6833      	ldr	r3, [r6, #0]
 8008ba6:	1d1a      	adds	r2, r3, #4
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	6032      	str	r2, [r6, #0]
 8008bac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008bb0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	e09d      	b.n	8008cf4 <_printf_i+0x1e8>
 8008bb8:	6833      	ldr	r3, [r6, #0]
 8008bba:	6820      	ldr	r0, [r4, #0]
 8008bbc:	1d19      	adds	r1, r3, #4
 8008bbe:	6031      	str	r1, [r6, #0]
 8008bc0:	0606      	lsls	r6, r0, #24
 8008bc2:	d501      	bpl.n	8008bc8 <_printf_i+0xbc>
 8008bc4:	681d      	ldr	r5, [r3, #0]
 8008bc6:	e003      	b.n	8008bd0 <_printf_i+0xc4>
 8008bc8:	0645      	lsls	r5, r0, #25
 8008bca:	d5fb      	bpl.n	8008bc4 <_printf_i+0xb8>
 8008bcc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008bd0:	2d00      	cmp	r5, #0
 8008bd2:	da03      	bge.n	8008bdc <_printf_i+0xd0>
 8008bd4:	232d      	movs	r3, #45	@ 0x2d
 8008bd6:	426d      	negs	r5, r5
 8008bd8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008bdc:	4859      	ldr	r0, [pc, #356]	@ (8008d44 <_printf_i+0x238>)
 8008bde:	230a      	movs	r3, #10
 8008be0:	e011      	b.n	8008c06 <_printf_i+0xfa>
 8008be2:	6821      	ldr	r1, [r4, #0]
 8008be4:	6833      	ldr	r3, [r6, #0]
 8008be6:	0608      	lsls	r0, r1, #24
 8008be8:	f853 5b04 	ldr.w	r5, [r3], #4
 8008bec:	d402      	bmi.n	8008bf4 <_printf_i+0xe8>
 8008bee:	0649      	lsls	r1, r1, #25
 8008bf0:	bf48      	it	mi
 8008bf2:	b2ad      	uxthmi	r5, r5
 8008bf4:	2f6f      	cmp	r7, #111	@ 0x6f
 8008bf6:	4853      	ldr	r0, [pc, #332]	@ (8008d44 <_printf_i+0x238>)
 8008bf8:	6033      	str	r3, [r6, #0]
 8008bfa:	bf14      	ite	ne
 8008bfc:	230a      	movne	r3, #10
 8008bfe:	2308      	moveq	r3, #8
 8008c00:	2100      	movs	r1, #0
 8008c02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008c06:	6866      	ldr	r6, [r4, #4]
 8008c08:	60a6      	str	r6, [r4, #8]
 8008c0a:	2e00      	cmp	r6, #0
 8008c0c:	bfa2      	ittt	ge
 8008c0e:	6821      	ldrge	r1, [r4, #0]
 8008c10:	f021 0104 	bicge.w	r1, r1, #4
 8008c14:	6021      	strge	r1, [r4, #0]
 8008c16:	b90d      	cbnz	r5, 8008c1c <_printf_i+0x110>
 8008c18:	2e00      	cmp	r6, #0
 8008c1a:	d04b      	beq.n	8008cb4 <_printf_i+0x1a8>
 8008c1c:	4616      	mov	r6, r2
 8008c1e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008c22:	fb03 5711 	mls	r7, r3, r1, r5
 8008c26:	5dc7      	ldrb	r7, [r0, r7]
 8008c28:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008c2c:	462f      	mov	r7, r5
 8008c2e:	42bb      	cmp	r3, r7
 8008c30:	460d      	mov	r5, r1
 8008c32:	d9f4      	bls.n	8008c1e <_printf_i+0x112>
 8008c34:	2b08      	cmp	r3, #8
 8008c36:	d10b      	bne.n	8008c50 <_printf_i+0x144>
 8008c38:	6823      	ldr	r3, [r4, #0]
 8008c3a:	07df      	lsls	r7, r3, #31
 8008c3c:	d508      	bpl.n	8008c50 <_printf_i+0x144>
 8008c3e:	6923      	ldr	r3, [r4, #16]
 8008c40:	6861      	ldr	r1, [r4, #4]
 8008c42:	4299      	cmp	r1, r3
 8008c44:	bfde      	ittt	le
 8008c46:	2330      	movle	r3, #48	@ 0x30
 8008c48:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008c4c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008c50:	1b92      	subs	r2, r2, r6
 8008c52:	6122      	str	r2, [r4, #16]
 8008c54:	f8cd a000 	str.w	sl, [sp]
 8008c58:	464b      	mov	r3, r9
 8008c5a:	aa03      	add	r2, sp, #12
 8008c5c:	4621      	mov	r1, r4
 8008c5e:	4640      	mov	r0, r8
 8008c60:	f7ff fee6 	bl	8008a30 <_printf_common>
 8008c64:	3001      	adds	r0, #1
 8008c66:	d14a      	bne.n	8008cfe <_printf_i+0x1f2>
 8008c68:	f04f 30ff 	mov.w	r0, #4294967295
 8008c6c:	b004      	add	sp, #16
 8008c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c72:	6823      	ldr	r3, [r4, #0]
 8008c74:	f043 0320 	orr.w	r3, r3, #32
 8008c78:	6023      	str	r3, [r4, #0]
 8008c7a:	4833      	ldr	r0, [pc, #204]	@ (8008d48 <_printf_i+0x23c>)
 8008c7c:	2778      	movs	r7, #120	@ 0x78
 8008c7e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008c82:	6823      	ldr	r3, [r4, #0]
 8008c84:	6831      	ldr	r1, [r6, #0]
 8008c86:	061f      	lsls	r7, r3, #24
 8008c88:	f851 5b04 	ldr.w	r5, [r1], #4
 8008c8c:	d402      	bmi.n	8008c94 <_printf_i+0x188>
 8008c8e:	065f      	lsls	r7, r3, #25
 8008c90:	bf48      	it	mi
 8008c92:	b2ad      	uxthmi	r5, r5
 8008c94:	6031      	str	r1, [r6, #0]
 8008c96:	07d9      	lsls	r1, r3, #31
 8008c98:	bf44      	itt	mi
 8008c9a:	f043 0320 	orrmi.w	r3, r3, #32
 8008c9e:	6023      	strmi	r3, [r4, #0]
 8008ca0:	b11d      	cbz	r5, 8008caa <_printf_i+0x19e>
 8008ca2:	2310      	movs	r3, #16
 8008ca4:	e7ac      	b.n	8008c00 <_printf_i+0xf4>
 8008ca6:	4827      	ldr	r0, [pc, #156]	@ (8008d44 <_printf_i+0x238>)
 8008ca8:	e7e9      	b.n	8008c7e <_printf_i+0x172>
 8008caa:	6823      	ldr	r3, [r4, #0]
 8008cac:	f023 0320 	bic.w	r3, r3, #32
 8008cb0:	6023      	str	r3, [r4, #0]
 8008cb2:	e7f6      	b.n	8008ca2 <_printf_i+0x196>
 8008cb4:	4616      	mov	r6, r2
 8008cb6:	e7bd      	b.n	8008c34 <_printf_i+0x128>
 8008cb8:	6833      	ldr	r3, [r6, #0]
 8008cba:	6825      	ldr	r5, [r4, #0]
 8008cbc:	6961      	ldr	r1, [r4, #20]
 8008cbe:	1d18      	adds	r0, r3, #4
 8008cc0:	6030      	str	r0, [r6, #0]
 8008cc2:	062e      	lsls	r6, r5, #24
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	d501      	bpl.n	8008ccc <_printf_i+0x1c0>
 8008cc8:	6019      	str	r1, [r3, #0]
 8008cca:	e002      	b.n	8008cd2 <_printf_i+0x1c6>
 8008ccc:	0668      	lsls	r0, r5, #25
 8008cce:	d5fb      	bpl.n	8008cc8 <_printf_i+0x1bc>
 8008cd0:	8019      	strh	r1, [r3, #0]
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	6123      	str	r3, [r4, #16]
 8008cd6:	4616      	mov	r6, r2
 8008cd8:	e7bc      	b.n	8008c54 <_printf_i+0x148>
 8008cda:	6833      	ldr	r3, [r6, #0]
 8008cdc:	1d1a      	adds	r2, r3, #4
 8008cde:	6032      	str	r2, [r6, #0]
 8008ce0:	681e      	ldr	r6, [r3, #0]
 8008ce2:	6862      	ldr	r2, [r4, #4]
 8008ce4:	2100      	movs	r1, #0
 8008ce6:	4630      	mov	r0, r6
 8008ce8:	f7f7 fab2 	bl	8000250 <memchr>
 8008cec:	b108      	cbz	r0, 8008cf2 <_printf_i+0x1e6>
 8008cee:	1b80      	subs	r0, r0, r6
 8008cf0:	6060      	str	r0, [r4, #4]
 8008cf2:	6863      	ldr	r3, [r4, #4]
 8008cf4:	6123      	str	r3, [r4, #16]
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008cfc:	e7aa      	b.n	8008c54 <_printf_i+0x148>
 8008cfe:	6923      	ldr	r3, [r4, #16]
 8008d00:	4632      	mov	r2, r6
 8008d02:	4649      	mov	r1, r9
 8008d04:	4640      	mov	r0, r8
 8008d06:	47d0      	blx	sl
 8008d08:	3001      	adds	r0, #1
 8008d0a:	d0ad      	beq.n	8008c68 <_printf_i+0x15c>
 8008d0c:	6823      	ldr	r3, [r4, #0]
 8008d0e:	079b      	lsls	r3, r3, #30
 8008d10:	d413      	bmi.n	8008d3a <_printf_i+0x22e>
 8008d12:	68e0      	ldr	r0, [r4, #12]
 8008d14:	9b03      	ldr	r3, [sp, #12]
 8008d16:	4298      	cmp	r0, r3
 8008d18:	bfb8      	it	lt
 8008d1a:	4618      	movlt	r0, r3
 8008d1c:	e7a6      	b.n	8008c6c <_printf_i+0x160>
 8008d1e:	2301      	movs	r3, #1
 8008d20:	4632      	mov	r2, r6
 8008d22:	4649      	mov	r1, r9
 8008d24:	4640      	mov	r0, r8
 8008d26:	47d0      	blx	sl
 8008d28:	3001      	adds	r0, #1
 8008d2a:	d09d      	beq.n	8008c68 <_printf_i+0x15c>
 8008d2c:	3501      	adds	r5, #1
 8008d2e:	68e3      	ldr	r3, [r4, #12]
 8008d30:	9903      	ldr	r1, [sp, #12]
 8008d32:	1a5b      	subs	r3, r3, r1
 8008d34:	42ab      	cmp	r3, r5
 8008d36:	dcf2      	bgt.n	8008d1e <_printf_i+0x212>
 8008d38:	e7eb      	b.n	8008d12 <_printf_i+0x206>
 8008d3a:	2500      	movs	r5, #0
 8008d3c:	f104 0619 	add.w	r6, r4, #25
 8008d40:	e7f5      	b.n	8008d2e <_printf_i+0x222>
 8008d42:	bf00      	nop
 8008d44:	080097fd 	.word	0x080097fd
 8008d48:	0800980e 	.word	0x0800980e

08008d4c <_scanf_chars>:
 8008d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d50:	4615      	mov	r5, r2
 8008d52:	688a      	ldr	r2, [r1, #8]
 8008d54:	4680      	mov	r8, r0
 8008d56:	460c      	mov	r4, r1
 8008d58:	b932      	cbnz	r2, 8008d68 <_scanf_chars+0x1c>
 8008d5a:	698a      	ldr	r2, [r1, #24]
 8008d5c:	2a00      	cmp	r2, #0
 8008d5e:	bf14      	ite	ne
 8008d60:	f04f 32ff 	movne.w	r2, #4294967295
 8008d64:	2201      	moveq	r2, #1
 8008d66:	608a      	str	r2, [r1, #8]
 8008d68:	6822      	ldr	r2, [r4, #0]
 8008d6a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8008dfc <_scanf_chars+0xb0>
 8008d6e:	06d1      	lsls	r1, r2, #27
 8008d70:	bf5f      	itttt	pl
 8008d72:	681a      	ldrpl	r2, [r3, #0]
 8008d74:	1d11      	addpl	r1, r2, #4
 8008d76:	6019      	strpl	r1, [r3, #0]
 8008d78:	6816      	ldrpl	r6, [r2, #0]
 8008d7a:	2700      	movs	r7, #0
 8008d7c:	69a0      	ldr	r0, [r4, #24]
 8008d7e:	b188      	cbz	r0, 8008da4 <_scanf_chars+0x58>
 8008d80:	2801      	cmp	r0, #1
 8008d82:	d107      	bne.n	8008d94 <_scanf_chars+0x48>
 8008d84:	682b      	ldr	r3, [r5, #0]
 8008d86:	781a      	ldrb	r2, [r3, #0]
 8008d88:	6963      	ldr	r3, [r4, #20]
 8008d8a:	5c9b      	ldrb	r3, [r3, r2]
 8008d8c:	b953      	cbnz	r3, 8008da4 <_scanf_chars+0x58>
 8008d8e:	2f00      	cmp	r7, #0
 8008d90:	d031      	beq.n	8008df6 <_scanf_chars+0xaa>
 8008d92:	e022      	b.n	8008dda <_scanf_chars+0x8e>
 8008d94:	2802      	cmp	r0, #2
 8008d96:	d120      	bne.n	8008dda <_scanf_chars+0x8e>
 8008d98:	682b      	ldr	r3, [r5, #0]
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8008da0:	071b      	lsls	r3, r3, #28
 8008da2:	d41a      	bmi.n	8008dda <_scanf_chars+0x8e>
 8008da4:	6823      	ldr	r3, [r4, #0]
 8008da6:	06da      	lsls	r2, r3, #27
 8008da8:	bf5e      	ittt	pl
 8008daa:	682b      	ldrpl	r3, [r5, #0]
 8008dac:	781b      	ldrbpl	r3, [r3, #0]
 8008dae:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008db2:	682a      	ldr	r2, [r5, #0]
 8008db4:	686b      	ldr	r3, [r5, #4]
 8008db6:	3201      	adds	r2, #1
 8008db8:	602a      	str	r2, [r5, #0]
 8008dba:	68a2      	ldr	r2, [r4, #8]
 8008dbc:	3b01      	subs	r3, #1
 8008dbe:	3a01      	subs	r2, #1
 8008dc0:	606b      	str	r3, [r5, #4]
 8008dc2:	3701      	adds	r7, #1
 8008dc4:	60a2      	str	r2, [r4, #8]
 8008dc6:	b142      	cbz	r2, 8008dda <_scanf_chars+0x8e>
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	dcd7      	bgt.n	8008d7c <_scanf_chars+0x30>
 8008dcc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008dd0:	4629      	mov	r1, r5
 8008dd2:	4640      	mov	r0, r8
 8008dd4:	4798      	blx	r3
 8008dd6:	2800      	cmp	r0, #0
 8008dd8:	d0d0      	beq.n	8008d7c <_scanf_chars+0x30>
 8008dda:	6823      	ldr	r3, [r4, #0]
 8008ddc:	f013 0310 	ands.w	r3, r3, #16
 8008de0:	d105      	bne.n	8008dee <_scanf_chars+0xa2>
 8008de2:	68e2      	ldr	r2, [r4, #12]
 8008de4:	3201      	adds	r2, #1
 8008de6:	60e2      	str	r2, [r4, #12]
 8008de8:	69a2      	ldr	r2, [r4, #24]
 8008dea:	b102      	cbz	r2, 8008dee <_scanf_chars+0xa2>
 8008dec:	7033      	strb	r3, [r6, #0]
 8008dee:	6923      	ldr	r3, [r4, #16]
 8008df0:	443b      	add	r3, r7
 8008df2:	6123      	str	r3, [r4, #16]
 8008df4:	2000      	movs	r0, #0
 8008df6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dfa:	bf00      	nop
 8008dfc:	0800983b 	.word	0x0800983b

08008e00 <_scanf_i>:
 8008e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e04:	4698      	mov	r8, r3
 8008e06:	4b74      	ldr	r3, [pc, #464]	@ (8008fd8 <_scanf_i+0x1d8>)
 8008e08:	460c      	mov	r4, r1
 8008e0a:	4682      	mov	sl, r0
 8008e0c:	4616      	mov	r6, r2
 8008e0e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008e12:	b087      	sub	sp, #28
 8008e14:	ab03      	add	r3, sp, #12
 8008e16:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008e1a:	4b70      	ldr	r3, [pc, #448]	@ (8008fdc <_scanf_i+0x1dc>)
 8008e1c:	69a1      	ldr	r1, [r4, #24]
 8008e1e:	4a70      	ldr	r2, [pc, #448]	@ (8008fe0 <_scanf_i+0x1e0>)
 8008e20:	2903      	cmp	r1, #3
 8008e22:	bf08      	it	eq
 8008e24:	461a      	moveq	r2, r3
 8008e26:	68a3      	ldr	r3, [r4, #8]
 8008e28:	9201      	str	r2, [sp, #4]
 8008e2a:	1e5a      	subs	r2, r3, #1
 8008e2c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008e30:	bf88      	it	hi
 8008e32:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008e36:	4627      	mov	r7, r4
 8008e38:	bf82      	ittt	hi
 8008e3a:	eb03 0905 	addhi.w	r9, r3, r5
 8008e3e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008e42:	60a3      	strhi	r3, [r4, #8]
 8008e44:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008e48:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8008e4c:	bf98      	it	ls
 8008e4e:	f04f 0900 	movls.w	r9, #0
 8008e52:	6023      	str	r3, [r4, #0]
 8008e54:	463d      	mov	r5, r7
 8008e56:	f04f 0b00 	mov.w	fp, #0
 8008e5a:	6831      	ldr	r1, [r6, #0]
 8008e5c:	ab03      	add	r3, sp, #12
 8008e5e:	7809      	ldrb	r1, [r1, #0]
 8008e60:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008e64:	2202      	movs	r2, #2
 8008e66:	f7f7 f9f3 	bl	8000250 <memchr>
 8008e6a:	b328      	cbz	r0, 8008eb8 <_scanf_i+0xb8>
 8008e6c:	f1bb 0f01 	cmp.w	fp, #1
 8008e70:	d159      	bne.n	8008f26 <_scanf_i+0x126>
 8008e72:	6862      	ldr	r2, [r4, #4]
 8008e74:	b92a      	cbnz	r2, 8008e82 <_scanf_i+0x82>
 8008e76:	6822      	ldr	r2, [r4, #0]
 8008e78:	2108      	movs	r1, #8
 8008e7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008e7e:	6061      	str	r1, [r4, #4]
 8008e80:	6022      	str	r2, [r4, #0]
 8008e82:	6822      	ldr	r2, [r4, #0]
 8008e84:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8008e88:	6022      	str	r2, [r4, #0]
 8008e8a:	68a2      	ldr	r2, [r4, #8]
 8008e8c:	1e51      	subs	r1, r2, #1
 8008e8e:	60a1      	str	r1, [r4, #8]
 8008e90:	b192      	cbz	r2, 8008eb8 <_scanf_i+0xb8>
 8008e92:	6832      	ldr	r2, [r6, #0]
 8008e94:	1c51      	adds	r1, r2, #1
 8008e96:	6031      	str	r1, [r6, #0]
 8008e98:	7812      	ldrb	r2, [r2, #0]
 8008e9a:	f805 2b01 	strb.w	r2, [r5], #1
 8008e9e:	6872      	ldr	r2, [r6, #4]
 8008ea0:	3a01      	subs	r2, #1
 8008ea2:	2a00      	cmp	r2, #0
 8008ea4:	6072      	str	r2, [r6, #4]
 8008ea6:	dc07      	bgt.n	8008eb8 <_scanf_i+0xb8>
 8008ea8:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8008eac:	4631      	mov	r1, r6
 8008eae:	4650      	mov	r0, sl
 8008eb0:	4790      	blx	r2
 8008eb2:	2800      	cmp	r0, #0
 8008eb4:	f040 8085 	bne.w	8008fc2 <_scanf_i+0x1c2>
 8008eb8:	f10b 0b01 	add.w	fp, fp, #1
 8008ebc:	f1bb 0f03 	cmp.w	fp, #3
 8008ec0:	d1cb      	bne.n	8008e5a <_scanf_i+0x5a>
 8008ec2:	6863      	ldr	r3, [r4, #4]
 8008ec4:	b90b      	cbnz	r3, 8008eca <_scanf_i+0xca>
 8008ec6:	230a      	movs	r3, #10
 8008ec8:	6063      	str	r3, [r4, #4]
 8008eca:	6863      	ldr	r3, [r4, #4]
 8008ecc:	4945      	ldr	r1, [pc, #276]	@ (8008fe4 <_scanf_i+0x1e4>)
 8008ece:	6960      	ldr	r0, [r4, #20]
 8008ed0:	1ac9      	subs	r1, r1, r3
 8008ed2:	f000 f997 	bl	8009204 <__sccl>
 8008ed6:	f04f 0b00 	mov.w	fp, #0
 8008eda:	68a3      	ldr	r3, [r4, #8]
 8008edc:	6822      	ldr	r2, [r4, #0]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d03d      	beq.n	8008f5e <_scanf_i+0x15e>
 8008ee2:	6831      	ldr	r1, [r6, #0]
 8008ee4:	6960      	ldr	r0, [r4, #20]
 8008ee6:	f891 c000 	ldrb.w	ip, [r1]
 8008eea:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008eee:	2800      	cmp	r0, #0
 8008ef0:	d035      	beq.n	8008f5e <_scanf_i+0x15e>
 8008ef2:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8008ef6:	d124      	bne.n	8008f42 <_scanf_i+0x142>
 8008ef8:	0510      	lsls	r0, r2, #20
 8008efa:	d522      	bpl.n	8008f42 <_scanf_i+0x142>
 8008efc:	f10b 0b01 	add.w	fp, fp, #1
 8008f00:	f1b9 0f00 	cmp.w	r9, #0
 8008f04:	d003      	beq.n	8008f0e <_scanf_i+0x10e>
 8008f06:	3301      	adds	r3, #1
 8008f08:	f109 39ff 	add.w	r9, r9, #4294967295
 8008f0c:	60a3      	str	r3, [r4, #8]
 8008f0e:	6873      	ldr	r3, [r6, #4]
 8008f10:	3b01      	subs	r3, #1
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	6073      	str	r3, [r6, #4]
 8008f16:	dd1b      	ble.n	8008f50 <_scanf_i+0x150>
 8008f18:	6833      	ldr	r3, [r6, #0]
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	6033      	str	r3, [r6, #0]
 8008f1e:	68a3      	ldr	r3, [r4, #8]
 8008f20:	3b01      	subs	r3, #1
 8008f22:	60a3      	str	r3, [r4, #8]
 8008f24:	e7d9      	b.n	8008eda <_scanf_i+0xda>
 8008f26:	f1bb 0f02 	cmp.w	fp, #2
 8008f2a:	d1ae      	bne.n	8008e8a <_scanf_i+0x8a>
 8008f2c:	6822      	ldr	r2, [r4, #0]
 8008f2e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8008f32:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8008f36:	d1bf      	bne.n	8008eb8 <_scanf_i+0xb8>
 8008f38:	2110      	movs	r1, #16
 8008f3a:	6061      	str	r1, [r4, #4]
 8008f3c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008f40:	e7a2      	b.n	8008e88 <_scanf_i+0x88>
 8008f42:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8008f46:	6022      	str	r2, [r4, #0]
 8008f48:	780b      	ldrb	r3, [r1, #0]
 8008f4a:	f805 3b01 	strb.w	r3, [r5], #1
 8008f4e:	e7de      	b.n	8008f0e <_scanf_i+0x10e>
 8008f50:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008f54:	4631      	mov	r1, r6
 8008f56:	4650      	mov	r0, sl
 8008f58:	4798      	blx	r3
 8008f5a:	2800      	cmp	r0, #0
 8008f5c:	d0df      	beq.n	8008f1e <_scanf_i+0x11e>
 8008f5e:	6823      	ldr	r3, [r4, #0]
 8008f60:	05d9      	lsls	r1, r3, #23
 8008f62:	d50d      	bpl.n	8008f80 <_scanf_i+0x180>
 8008f64:	42bd      	cmp	r5, r7
 8008f66:	d909      	bls.n	8008f7c <_scanf_i+0x17c>
 8008f68:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008f6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008f70:	4632      	mov	r2, r6
 8008f72:	4650      	mov	r0, sl
 8008f74:	4798      	blx	r3
 8008f76:	f105 39ff 	add.w	r9, r5, #4294967295
 8008f7a:	464d      	mov	r5, r9
 8008f7c:	42bd      	cmp	r5, r7
 8008f7e:	d028      	beq.n	8008fd2 <_scanf_i+0x1d2>
 8008f80:	6822      	ldr	r2, [r4, #0]
 8008f82:	f012 0210 	ands.w	r2, r2, #16
 8008f86:	d113      	bne.n	8008fb0 <_scanf_i+0x1b0>
 8008f88:	702a      	strb	r2, [r5, #0]
 8008f8a:	6863      	ldr	r3, [r4, #4]
 8008f8c:	9e01      	ldr	r6, [sp, #4]
 8008f8e:	4639      	mov	r1, r7
 8008f90:	4650      	mov	r0, sl
 8008f92:	47b0      	blx	r6
 8008f94:	f8d8 3000 	ldr.w	r3, [r8]
 8008f98:	6821      	ldr	r1, [r4, #0]
 8008f9a:	1d1a      	adds	r2, r3, #4
 8008f9c:	f8c8 2000 	str.w	r2, [r8]
 8008fa0:	f011 0f20 	tst.w	r1, #32
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	d00f      	beq.n	8008fc8 <_scanf_i+0x1c8>
 8008fa8:	6018      	str	r0, [r3, #0]
 8008faa:	68e3      	ldr	r3, [r4, #12]
 8008fac:	3301      	adds	r3, #1
 8008fae:	60e3      	str	r3, [r4, #12]
 8008fb0:	6923      	ldr	r3, [r4, #16]
 8008fb2:	1bed      	subs	r5, r5, r7
 8008fb4:	445d      	add	r5, fp
 8008fb6:	442b      	add	r3, r5
 8008fb8:	6123      	str	r3, [r4, #16]
 8008fba:	2000      	movs	r0, #0
 8008fbc:	b007      	add	sp, #28
 8008fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fc2:	f04f 0b00 	mov.w	fp, #0
 8008fc6:	e7ca      	b.n	8008f5e <_scanf_i+0x15e>
 8008fc8:	07ca      	lsls	r2, r1, #31
 8008fca:	bf4c      	ite	mi
 8008fcc:	8018      	strhmi	r0, [r3, #0]
 8008fce:	6018      	strpl	r0, [r3, #0]
 8008fd0:	e7eb      	b.n	8008faa <_scanf_i+0x1aa>
 8008fd2:	2001      	movs	r0, #1
 8008fd4:	e7f2      	b.n	8008fbc <_scanf_i+0x1bc>
 8008fd6:	bf00      	nop
 8008fd8:	080097a0 	.word	0x080097a0
 8008fdc:	080094d1 	.word	0x080094d1
 8008fe0:	080095b1 	.word	0x080095b1
 8008fe4:	0800982f 	.word	0x0800982f

08008fe8 <__sflush_r>:
 8008fe8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ff0:	0716      	lsls	r6, r2, #28
 8008ff2:	4605      	mov	r5, r0
 8008ff4:	460c      	mov	r4, r1
 8008ff6:	d454      	bmi.n	80090a2 <__sflush_r+0xba>
 8008ff8:	684b      	ldr	r3, [r1, #4]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	dc02      	bgt.n	8009004 <__sflush_r+0x1c>
 8008ffe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009000:	2b00      	cmp	r3, #0
 8009002:	dd48      	ble.n	8009096 <__sflush_r+0xae>
 8009004:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009006:	2e00      	cmp	r6, #0
 8009008:	d045      	beq.n	8009096 <__sflush_r+0xae>
 800900a:	2300      	movs	r3, #0
 800900c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009010:	682f      	ldr	r7, [r5, #0]
 8009012:	6a21      	ldr	r1, [r4, #32]
 8009014:	602b      	str	r3, [r5, #0]
 8009016:	d030      	beq.n	800907a <__sflush_r+0x92>
 8009018:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800901a:	89a3      	ldrh	r3, [r4, #12]
 800901c:	0759      	lsls	r1, r3, #29
 800901e:	d505      	bpl.n	800902c <__sflush_r+0x44>
 8009020:	6863      	ldr	r3, [r4, #4]
 8009022:	1ad2      	subs	r2, r2, r3
 8009024:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009026:	b10b      	cbz	r3, 800902c <__sflush_r+0x44>
 8009028:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800902a:	1ad2      	subs	r2, r2, r3
 800902c:	2300      	movs	r3, #0
 800902e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009030:	6a21      	ldr	r1, [r4, #32]
 8009032:	4628      	mov	r0, r5
 8009034:	47b0      	blx	r6
 8009036:	1c43      	adds	r3, r0, #1
 8009038:	89a3      	ldrh	r3, [r4, #12]
 800903a:	d106      	bne.n	800904a <__sflush_r+0x62>
 800903c:	6829      	ldr	r1, [r5, #0]
 800903e:	291d      	cmp	r1, #29
 8009040:	d82b      	bhi.n	800909a <__sflush_r+0xb2>
 8009042:	4a2a      	ldr	r2, [pc, #168]	@ (80090ec <__sflush_r+0x104>)
 8009044:	410a      	asrs	r2, r1
 8009046:	07d6      	lsls	r6, r2, #31
 8009048:	d427      	bmi.n	800909a <__sflush_r+0xb2>
 800904a:	2200      	movs	r2, #0
 800904c:	6062      	str	r2, [r4, #4]
 800904e:	04d9      	lsls	r1, r3, #19
 8009050:	6922      	ldr	r2, [r4, #16]
 8009052:	6022      	str	r2, [r4, #0]
 8009054:	d504      	bpl.n	8009060 <__sflush_r+0x78>
 8009056:	1c42      	adds	r2, r0, #1
 8009058:	d101      	bne.n	800905e <__sflush_r+0x76>
 800905a:	682b      	ldr	r3, [r5, #0]
 800905c:	b903      	cbnz	r3, 8009060 <__sflush_r+0x78>
 800905e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009060:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009062:	602f      	str	r7, [r5, #0]
 8009064:	b1b9      	cbz	r1, 8009096 <__sflush_r+0xae>
 8009066:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800906a:	4299      	cmp	r1, r3
 800906c:	d002      	beq.n	8009074 <__sflush_r+0x8c>
 800906e:	4628      	mov	r0, r5
 8009070:	f7ff f970 	bl	8008354 <_free_r>
 8009074:	2300      	movs	r3, #0
 8009076:	6363      	str	r3, [r4, #52]	@ 0x34
 8009078:	e00d      	b.n	8009096 <__sflush_r+0xae>
 800907a:	2301      	movs	r3, #1
 800907c:	4628      	mov	r0, r5
 800907e:	47b0      	blx	r6
 8009080:	4602      	mov	r2, r0
 8009082:	1c50      	adds	r0, r2, #1
 8009084:	d1c9      	bne.n	800901a <__sflush_r+0x32>
 8009086:	682b      	ldr	r3, [r5, #0]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d0c6      	beq.n	800901a <__sflush_r+0x32>
 800908c:	2b1d      	cmp	r3, #29
 800908e:	d001      	beq.n	8009094 <__sflush_r+0xac>
 8009090:	2b16      	cmp	r3, #22
 8009092:	d11e      	bne.n	80090d2 <__sflush_r+0xea>
 8009094:	602f      	str	r7, [r5, #0]
 8009096:	2000      	movs	r0, #0
 8009098:	e022      	b.n	80090e0 <__sflush_r+0xf8>
 800909a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800909e:	b21b      	sxth	r3, r3
 80090a0:	e01b      	b.n	80090da <__sflush_r+0xf2>
 80090a2:	690f      	ldr	r7, [r1, #16]
 80090a4:	2f00      	cmp	r7, #0
 80090a6:	d0f6      	beq.n	8009096 <__sflush_r+0xae>
 80090a8:	0793      	lsls	r3, r2, #30
 80090aa:	680e      	ldr	r6, [r1, #0]
 80090ac:	bf08      	it	eq
 80090ae:	694b      	ldreq	r3, [r1, #20]
 80090b0:	600f      	str	r7, [r1, #0]
 80090b2:	bf18      	it	ne
 80090b4:	2300      	movne	r3, #0
 80090b6:	eba6 0807 	sub.w	r8, r6, r7
 80090ba:	608b      	str	r3, [r1, #8]
 80090bc:	f1b8 0f00 	cmp.w	r8, #0
 80090c0:	dde9      	ble.n	8009096 <__sflush_r+0xae>
 80090c2:	6a21      	ldr	r1, [r4, #32]
 80090c4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80090c6:	4643      	mov	r3, r8
 80090c8:	463a      	mov	r2, r7
 80090ca:	4628      	mov	r0, r5
 80090cc:	47b0      	blx	r6
 80090ce:	2800      	cmp	r0, #0
 80090d0:	dc08      	bgt.n	80090e4 <__sflush_r+0xfc>
 80090d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090da:	81a3      	strh	r3, [r4, #12]
 80090dc:	f04f 30ff 	mov.w	r0, #4294967295
 80090e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090e4:	4407      	add	r7, r0
 80090e6:	eba8 0800 	sub.w	r8, r8, r0
 80090ea:	e7e7      	b.n	80090bc <__sflush_r+0xd4>
 80090ec:	dfbffffe 	.word	0xdfbffffe

080090f0 <_fflush_r>:
 80090f0:	b538      	push	{r3, r4, r5, lr}
 80090f2:	690b      	ldr	r3, [r1, #16]
 80090f4:	4605      	mov	r5, r0
 80090f6:	460c      	mov	r4, r1
 80090f8:	b913      	cbnz	r3, 8009100 <_fflush_r+0x10>
 80090fa:	2500      	movs	r5, #0
 80090fc:	4628      	mov	r0, r5
 80090fe:	bd38      	pop	{r3, r4, r5, pc}
 8009100:	b118      	cbz	r0, 800910a <_fflush_r+0x1a>
 8009102:	6a03      	ldr	r3, [r0, #32]
 8009104:	b90b      	cbnz	r3, 800910a <_fflush_r+0x1a>
 8009106:	f7fe fecd 	bl	8007ea4 <__sinit>
 800910a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d0f3      	beq.n	80090fa <_fflush_r+0xa>
 8009112:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009114:	07d0      	lsls	r0, r2, #31
 8009116:	d404      	bmi.n	8009122 <_fflush_r+0x32>
 8009118:	0599      	lsls	r1, r3, #22
 800911a:	d402      	bmi.n	8009122 <_fflush_r+0x32>
 800911c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800911e:	f7ff f916 	bl	800834e <__retarget_lock_acquire_recursive>
 8009122:	4628      	mov	r0, r5
 8009124:	4621      	mov	r1, r4
 8009126:	f7ff ff5f 	bl	8008fe8 <__sflush_r>
 800912a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800912c:	07da      	lsls	r2, r3, #31
 800912e:	4605      	mov	r5, r0
 8009130:	d4e4      	bmi.n	80090fc <_fflush_r+0xc>
 8009132:	89a3      	ldrh	r3, [r4, #12]
 8009134:	059b      	lsls	r3, r3, #22
 8009136:	d4e1      	bmi.n	80090fc <_fflush_r+0xc>
 8009138:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800913a:	f7ff f909 	bl	8008350 <__retarget_lock_release_recursive>
 800913e:	e7dd      	b.n	80090fc <_fflush_r+0xc>

08009140 <__swhatbuf_r>:
 8009140:	b570      	push	{r4, r5, r6, lr}
 8009142:	460c      	mov	r4, r1
 8009144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009148:	2900      	cmp	r1, #0
 800914a:	b096      	sub	sp, #88	@ 0x58
 800914c:	4615      	mov	r5, r2
 800914e:	461e      	mov	r6, r3
 8009150:	da0d      	bge.n	800916e <__swhatbuf_r+0x2e>
 8009152:	89a3      	ldrh	r3, [r4, #12]
 8009154:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009158:	f04f 0100 	mov.w	r1, #0
 800915c:	bf14      	ite	ne
 800915e:	2340      	movne	r3, #64	@ 0x40
 8009160:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009164:	2000      	movs	r0, #0
 8009166:	6031      	str	r1, [r6, #0]
 8009168:	602b      	str	r3, [r5, #0]
 800916a:	b016      	add	sp, #88	@ 0x58
 800916c:	bd70      	pop	{r4, r5, r6, pc}
 800916e:	466a      	mov	r2, sp
 8009170:	f000 f8d6 	bl	8009320 <_fstat_r>
 8009174:	2800      	cmp	r0, #0
 8009176:	dbec      	blt.n	8009152 <__swhatbuf_r+0x12>
 8009178:	9901      	ldr	r1, [sp, #4]
 800917a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800917e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009182:	4259      	negs	r1, r3
 8009184:	4159      	adcs	r1, r3
 8009186:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800918a:	e7eb      	b.n	8009164 <__swhatbuf_r+0x24>

0800918c <__smakebuf_r>:
 800918c:	898b      	ldrh	r3, [r1, #12]
 800918e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009190:	079d      	lsls	r5, r3, #30
 8009192:	4606      	mov	r6, r0
 8009194:	460c      	mov	r4, r1
 8009196:	d507      	bpl.n	80091a8 <__smakebuf_r+0x1c>
 8009198:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800919c:	6023      	str	r3, [r4, #0]
 800919e:	6123      	str	r3, [r4, #16]
 80091a0:	2301      	movs	r3, #1
 80091a2:	6163      	str	r3, [r4, #20]
 80091a4:	b003      	add	sp, #12
 80091a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091a8:	ab01      	add	r3, sp, #4
 80091aa:	466a      	mov	r2, sp
 80091ac:	f7ff ffc8 	bl	8009140 <__swhatbuf_r>
 80091b0:	9f00      	ldr	r7, [sp, #0]
 80091b2:	4605      	mov	r5, r0
 80091b4:	4639      	mov	r1, r7
 80091b6:	4630      	mov	r0, r6
 80091b8:	f7fe fd5c 	bl	8007c74 <_malloc_r>
 80091bc:	b948      	cbnz	r0, 80091d2 <__smakebuf_r+0x46>
 80091be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091c2:	059a      	lsls	r2, r3, #22
 80091c4:	d4ee      	bmi.n	80091a4 <__smakebuf_r+0x18>
 80091c6:	f023 0303 	bic.w	r3, r3, #3
 80091ca:	f043 0302 	orr.w	r3, r3, #2
 80091ce:	81a3      	strh	r3, [r4, #12]
 80091d0:	e7e2      	b.n	8009198 <__smakebuf_r+0xc>
 80091d2:	89a3      	ldrh	r3, [r4, #12]
 80091d4:	6020      	str	r0, [r4, #0]
 80091d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091da:	81a3      	strh	r3, [r4, #12]
 80091dc:	9b01      	ldr	r3, [sp, #4]
 80091de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80091e2:	b15b      	cbz	r3, 80091fc <__smakebuf_r+0x70>
 80091e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091e8:	4630      	mov	r0, r6
 80091ea:	f000 f8ab 	bl	8009344 <_isatty_r>
 80091ee:	b128      	cbz	r0, 80091fc <__smakebuf_r+0x70>
 80091f0:	89a3      	ldrh	r3, [r4, #12]
 80091f2:	f023 0303 	bic.w	r3, r3, #3
 80091f6:	f043 0301 	orr.w	r3, r3, #1
 80091fa:	81a3      	strh	r3, [r4, #12]
 80091fc:	89a3      	ldrh	r3, [r4, #12]
 80091fe:	431d      	orrs	r5, r3
 8009200:	81a5      	strh	r5, [r4, #12]
 8009202:	e7cf      	b.n	80091a4 <__smakebuf_r+0x18>

08009204 <__sccl>:
 8009204:	b570      	push	{r4, r5, r6, lr}
 8009206:	780b      	ldrb	r3, [r1, #0]
 8009208:	4604      	mov	r4, r0
 800920a:	2b5e      	cmp	r3, #94	@ 0x5e
 800920c:	bf0b      	itete	eq
 800920e:	784b      	ldrbeq	r3, [r1, #1]
 8009210:	1c4a      	addne	r2, r1, #1
 8009212:	1c8a      	addeq	r2, r1, #2
 8009214:	2100      	movne	r1, #0
 8009216:	bf08      	it	eq
 8009218:	2101      	moveq	r1, #1
 800921a:	3801      	subs	r0, #1
 800921c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8009220:	f800 1f01 	strb.w	r1, [r0, #1]!
 8009224:	42a8      	cmp	r0, r5
 8009226:	d1fb      	bne.n	8009220 <__sccl+0x1c>
 8009228:	b90b      	cbnz	r3, 800922e <__sccl+0x2a>
 800922a:	1e50      	subs	r0, r2, #1
 800922c:	bd70      	pop	{r4, r5, r6, pc}
 800922e:	f081 0101 	eor.w	r1, r1, #1
 8009232:	54e1      	strb	r1, [r4, r3]
 8009234:	4610      	mov	r0, r2
 8009236:	4602      	mov	r2, r0
 8009238:	f812 5b01 	ldrb.w	r5, [r2], #1
 800923c:	2d2d      	cmp	r5, #45	@ 0x2d
 800923e:	d005      	beq.n	800924c <__sccl+0x48>
 8009240:	2d5d      	cmp	r5, #93	@ 0x5d
 8009242:	d016      	beq.n	8009272 <__sccl+0x6e>
 8009244:	2d00      	cmp	r5, #0
 8009246:	d0f1      	beq.n	800922c <__sccl+0x28>
 8009248:	462b      	mov	r3, r5
 800924a:	e7f2      	b.n	8009232 <__sccl+0x2e>
 800924c:	7846      	ldrb	r6, [r0, #1]
 800924e:	2e5d      	cmp	r6, #93	@ 0x5d
 8009250:	d0fa      	beq.n	8009248 <__sccl+0x44>
 8009252:	42b3      	cmp	r3, r6
 8009254:	dcf8      	bgt.n	8009248 <__sccl+0x44>
 8009256:	3002      	adds	r0, #2
 8009258:	461a      	mov	r2, r3
 800925a:	3201      	adds	r2, #1
 800925c:	4296      	cmp	r6, r2
 800925e:	54a1      	strb	r1, [r4, r2]
 8009260:	dcfb      	bgt.n	800925a <__sccl+0x56>
 8009262:	1af2      	subs	r2, r6, r3
 8009264:	3a01      	subs	r2, #1
 8009266:	1c5d      	adds	r5, r3, #1
 8009268:	42b3      	cmp	r3, r6
 800926a:	bfa8      	it	ge
 800926c:	2200      	movge	r2, #0
 800926e:	18ab      	adds	r3, r5, r2
 8009270:	e7e1      	b.n	8009236 <__sccl+0x32>
 8009272:	4610      	mov	r0, r2
 8009274:	e7da      	b.n	800922c <__sccl+0x28>

08009276 <__submore>:
 8009276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800927a:	460c      	mov	r4, r1
 800927c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800927e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009282:	4299      	cmp	r1, r3
 8009284:	d11d      	bne.n	80092c2 <__submore+0x4c>
 8009286:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800928a:	f7fe fcf3 	bl	8007c74 <_malloc_r>
 800928e:	b918      	cbnz	r0, 8009298 <__submore+0x22>
 8009290:	f04f 30ff 	mov.w	r0, #4294967295
 8009294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009298:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800929c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800929e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80092a2:	6360      	str	r0, [r4, #52]	@ 0x34
 80092a4:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80092a8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80092ac:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80092b0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80092b4:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80092b8:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80092bc:	6020      	str	r0, [r4, #0]
 80092be:	2000      	movs	r0, #0
 80092c0:	e7e8      	b.n	8009294 <__submore+0x1e>
 80092c2:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80092c4:	0077      	lsls	r7, r6, #1
 80092c6:	463a      	mov	r2, r7
 80092c8:	f000 f85a 	bl	8009380 <_realloc_r>
 80092cc:	4605      	mov	r5, r0
 80092ce:	2800      	cmp	r0, #0
 80092d0:	d0de      	beq.n	8009290 <__submore+0x1a>
 80092d2:	eb00 0806 	add.w	r8, r0, r6
 80092d6:	4601      	mov	r1, r0
 80092d8:	4632      	mov	r2, r6
 80092da:	4640      	mov	r0, r8
 80092dc:	f000 f842 	bl	8009364 <memcpy>
 80092e0:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80092e4:	f8c4 8000 	str.w	r8, [r4]
 80092e8:	e7e9      	b.n	80092be <__submore+0x48>

080092ea <memmove>:
 80092ea:	4288      	cmp	r0, r1
 80092ec:	b510      	push	{r4, lr}
 80092ee:	eb01 0402 	add.w	r4, r1, r2
 80092f2:	d902      	bls.n	80092fa <memmove+0x10>
 80092f4:	4284      	cmp	r4, r0
 80092f6:	4623      	mov	r3, r4
 80092f8:	d807      	bhi.n	800930a <memmove+0x20>
 80092fa:	1e43      	subs	r3, r0, #1
 80092fc:	42a1      	cmp	r1, r4
 80092fe:	d008      	beq.n	8009312 <memmove+0x28>
 8009300:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009304:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009308:	e7f8      	b.n	80092fc <memmove+0x12>
 800930a:	4402      	add	r2, r0
 800930c:	4601      	mov	r1, r0
 800930e:	428a      	cmp	r2, r1
 8009310:	d100      	bne.n	8009314 <memmove+0x2a>
 8009312:	bd10      	pop	{r4, pc}
 8009314:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009318:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800931c:	e7f7      	b.n	800930e <memmove+0x24>
	...

08009320 <_fstat_r>:
 8009320:	b538      	push	{r3, r4, r5, lr}
 8009322:	4d07      	ldr	r5, [pc, #28]	@ (8009340 <_fstat_r+0x20>)
 8009324:	2300      	movs	r3, #0
 8009326:	4604      	mov	r4, r0
 8009328:	4608      	mov	r0, r1
 800932a:	4611      	mov	r1, r2
 800932c:	602b      	str	r3, [r5, #0]
 800932e:	f7f8 ff24 	bl	800217a <_fstat>
 8009332:	1c43      	adds	r3, r0, #1
 8009334:	d102      	bne.n	800933c <_fstat_r+0x1c>
 8009336:	682b      	ldr	r3, [r5, #0]
 8009338:	b103      	cbz	r3, 800933c <_fstat_r+0x1c>
 800933a:	6023      	str	r3, [r4, #0]
 800933c:	bd38      	pop	{r3, r4, r5, pc}
 800933e:	bf00      	nop
 8009340:	200004ac 	.word	0x200004ac

08009344 <_isatty_r>:
 8009344:	b538      	push	{r3, r4, r5, lr}
 8009346:	4d06      	ldr	r5, [pc, #24]	@ (8009360 <_isatty_r+0x1c>)
 8009348:	2300      	movs	r3, #0
 800934a:	4604      	mov	r4, r0
 800934c:	4608      	mov	r0, r1
 800934e:	602b      	str	r3, [r5, #0]
 8009350:	f7f8 ff23 	bl	800219a <_isatty>
 8009354:	1c43      	adds	r3, r0, #1
 8009356:	d102      	bne.n	800935e <_isatty_r+0x1a>
 8009358:	682b      	ldr	r3, [r5, #0]
 800935a:	b103      	cbz	r3, 800935e <_isatty_r+0x1a>
 800935c:	6023      	str	r3, [r4, #0]
 800935e:	bd38      	pop	{r3, r4, r5, pc}
 8009360:	200004ac 	.word	0x200004ac

08009364 <memcpy>:
 8009364:	440a      	add	r2, r1
 8009366:	4291      	cmp	r1, r2
 8009368:	f100 33ff 	add.w	r3, r0, #4294967295
 800936c:	d100      	bne.n	8009370 <memcpy+0xc>
 800936e:	4770      	bx	lr
 8009370:	b510      	push	{r4, lr}
 8009372:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009376:	f803 4f01 	strb.w	r4, [r3, #1]!
 800937a:	4291      	cmp	r1, r2
 800937c:	d1f9      	bne.n	8009372 <memcpy+0xe>
 800937e:	bd10      	pop	{r4, pc}

08009380 <_realloc_r>:
 8009380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009384:	4680      	mov	r8, r0
 8009386:	4615      	mov	r5, r2
 8009388:	460c      	mov	r4, r1
 800938a:	b921      	cbnz	r1, 8009396 <_realloc_r+0x16>
 800938c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009390:	4611      	mov	r1, r2
 8009392:	f7fe bc6f 	b.w	8007c74 <_malloc_r>
 8009396:	b92a      	cbnz	r2, 80093a4 <_realloc_r+0x24>
 8009398:	f7fe ffdc 	bl	8008354 <_free_r>
 800939c:	2400      	movs	r4, #0
 800939e:	4620      	mov	r0, r4
 80093a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093a4:	f000 f906 	bl	80095b4 <_malloc_usable_size_r>
 80093a8:	4285      	cmp	r5, r0
 80093aa:	4606      	mov	r6, r0
 80093ac:	d802      	bhi.n	80093b4 <_realloc_r+0x34>
 80093ae:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80093b2:	d8f4      	bhi.n	800939e <_realloc_r+0x1e>
 80093b4:	4629      	mov	r1, r5
 80093b6:	4640      	mov	r0, r8
 80093b8:	f7fe fc5c 	bl	8007c74 <_malloc_r>
 80093bc:	4607      	mov	r7, r0
 80093be:	2800      	cmp	r0, #0
 80093c0:	d0ec      	beq.n	800939c <_realloc_r+0x1c>
 80093c2:	42b5      	cmp	r5, r6
 80093c4:	462a      	mov	r2, r5
 80093c6:	4621      	mov	r1, r4
 80093c8:	bf28      	it	cs
 80093ca:	4632      	movcs	r2, r6
 80093cc:	f7ff ffca 	bl	8009364 <memcpy>
 80093d0:	4621      	mov	r1, r4
 80093d2:	4640      	mov	r0, r8
 80093d4:	f7fe ffbe 	bl	8008354 <_free_r>
 80093d8:	463c      	mov	r4, r7
 80093da:	e7e0      	b.n	800939e <_realloc_r+0x1e>

080093dc <_strtol_l.constprop.0>:
 80093dc:	2b24      	cmp	r3, #36	@ 0x24
 80093de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093e2:	4686      	mov	lr, r0
 80093e4:	4690      	mov	r8, r2
 80093e6:	d801      	bhi.n	80093ec <_strtol_l.constprop.0+0x10>
 80093e8:	2b01      	cmp	r3, #1
 80093ea:	d106      	bne.n	80093fa <_strtol_l.constprop.0+0x1e>
 80093ec:	f7fe ff84 	bl	80082f8 <__errno>
 80093f0:	2316      	movs	r3, #22
 80093f2:	6003      	str	r3, [r0, #0]
 80093f4:	2000      	movs	r0, #0
 80093f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093fa:	4834      	ldr	r0, [pc, #208]	@ (80094cc <_strtol_l.constprop.0+0xf0>)
 80093fc:	460d      	mov	r5, r1
 80093fe:	462a      	mov	r2, r5
 8009400:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009404:	5d06      	ldrb	r6, [r0, r4]
 8009406:	f016 0608 	ands.w	r6, r6, #8
 800940a:	d1f8      	bne.n	80093fe <_strtol_l.constprop.0+0x22>
 800940c:	2c2d      	cmp	r4, #45	@ 0x2d
 800940e:	d12d      	bne.n	800946c <_strtol_l.constprop.0+0x90>
 8009410:	782c      	ldrb	r4, [r5, #0]
 8009412:	2601      	movs	r6, #1
 8009414:	1c95      	adds	r5, r2, #2
 8009416:	f033 0210 	bics.w	r2, r3, #16
 800941a:	d109      	bne.n	8009430 <_strtol_l.constprop.0+0x54>
 800941c:	2c30      	cmp	r4, #48	@ 0x30
 800941e:	d12a      	bne.n	8009476 <_strtol_l.constprop.0+0x9a>
 8009420:	782a      	ldrb	r2, [r5, #0]
 8009422:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009426:	2a58      	cmp	r2, #88	@ 0x58
 8009428:	d125      	bne.n	8009476 <_strtol_l.constprop.0+0x9a>
 800942a:	786c      	ldrb	r4, [r5, #1]
 800942c:	2310      	movs	r3, #16
 800942e:	3502      	adds	r5, #2
 8009430:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009434:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009438:	2200      	movs	r2, #0
 800943a:	fbbc f9f3 	udiv	r9, ip, r3
 800943e:	4610      	mov	r0, r2
 8009440:	fb03 ca19 	mls	sl, r3, r9, ip
 8009444:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009448:	2f09      	cmp	r7, #9
 800944a:	d81b      	bhi.n	8009484 <_strtol_l.constprop.0+0xa8>
 800944c:	463c      	mov	r4, r7
 800944e:	42a3      	cmp	r3, r4
 8009450:	dd27      	ble.n	80094a2 <_strtol_l.constprop.0+0xc6>
 8009452:	1c57      	adds	r7, r2, #1
 8009454:	d007      	beq.n	8009466 <_strtol_l.constprop.0+0x8a>
 8009456:	4581      	cmp	r9, r0
 8009458:	d320      	bcc.n	800949c <_strtol_l.constprop.0+0xc0>
 800945a:	d101      	bne.n	8009460 <_strtol_l.constprop.0+0x84>
 800945c:	45a2      	cmp	sl, r4
 800945e:	db1d      	blt.n	800949c <_strtol_l.constprop.0+0xc0>
 8009460:	fb00 4003 	mla	r0, r0, r3, r4
 8009464:	2201      	movs	r2, #1
 8009466:	f815 4b01 	ldrb.w	r4, [r5], #1
 800946a:	e7eb      	b.n	8009444 <_strtol_l.constprop.0+0x68>
 800946c:	2c2b      	cmp	r4, #43	@ 0x2b
 800946e:	bf04      	itt	eq
 8009470:	782c      	ldrbeq	r4, [r5, #0]
 8009472:	1c95      	addeq	r5, r2, #2
 8009474:	e7cf      	b.n	8009416 <_strtol_l.constprop.0+0x3a>
 8009476:	2b00      	cmp	r3, #0
 8009478:	d1da      	bne.n	8009430 <_strtol_l.constprop.0+0x54>
 800947a:	2c30      	cmp	r4, #48	@ 0x30
 800947c:	bf0c      	ite	eq
 800947e:	2308      	moveq	r3, #8
 8009480:	230a      	movne	r3, #10
 8009482:	e7d5      	b.n	8009430 <_strtol_l.constprop.0+0x54>
 8009484:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009488:	2f19      	cmp	r7, #25
 800948a:	d801      	bhi.n	8009490 <_strtol_l.constprop.0+0xb4>
 800948c:	3c37      	subs	r4, #55	@ 0x37
 800948e:	e7de      	b.n	800944e <_strtol_l.constprop.0+0x72>
 8009490:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009494:	2f19      	cmp	r7, #25
 8009496:	d804      	bhi.n	80094a2 <_strtol_l.constprop.0+0xc6>
 8009498:	3c57      	subs	r4, #87	@ 0x57
 800949a:	e7d8      	b.n	800944e <_strtol_l.constprop.0+0x72>
 800949c:	f04f 32ff 	mov.w	r2, #4294967295
 80094a0:	e7e1      	b.n	8009466 <_strtol_l.constprop.0+0x8a>
 80094a2:	1c53      	adds	r3, r2, #1
 80094a4:	d108      	bne.n	80094b8 <_strtol_l.constprop.0+0xdc>
 80094a6:	2322      	movs	r3, #34	@ 0x22
 80094a8:	f8ce 3000 	str.w	r3, [lr]
 80094ac:	4660      	mov	r0, ip
 80094ae:	f1b8 0f00 	cmp.w	r8, #0
 80094b2:	d0a0      	beq.n	80093f6 <_strtol_l.constprop.0+0x1a>
 80094b4:	1e69      	subs	r1, r5, #1
 80094b6:	e006      	b.n	80094c6 <_strtol_l.constprop.0+0xea>
 80094b8:	b106      	cbz	r6, 80094bc <_strtol_l.constprop.0+0xe0>
 80094ba:	4240      	negs	r0, r0
 80094bc:	f1b8 0f00 	cmp.w	r8, #0
 80094c0:	d099      	beq.n	80093f6 <_strtol_l.constprop.0+0x1a>
 80094c2:	2a00      	cmp	r2, #0
 80094c4:	d1f6      	bne.n	80094b4 <_strtol_l.constprop.0+0xd8>
 80094c6:	f8c8 1000 	str.w	r1, [r8]
 80094ca:	e794      	b.n	80093f6 <_strtol_l.constprop.0+0x1a>
 80094cc:	0800983b 	.word	0x0800983b

080094d0 <_strtol_r>:
 80094d0:	f7ff bf84 	b.w	80093dc <_strtol_l.constprop.0>

080094d4 <_strtoul_l.constprop.0>:
 80094d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80094d8:	4e34      	ldr	r6, [pc, #208]	@ (80095ac <_strtoul_l.constprop.0+0xd8>)
 80094da:	4686      	mov	lr, r0
 80094dc:	460d      	mov	r5, r1
 80094de:	4628      	mov	r0, r5
 80094e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80094e4:	5d37      	ldrb	r7, [r6, r4]
 80094e6:	f017 0708 	ands.w	r7, r7, #8
 80094ea:	d1f8      	bne.n	80094de <_strtoul_l.constprop.0+0xa>
 80094ec:	2c2d      	cmp	r4, #45	@ 0x2d
 80094ee:	d12f      	bne.n	8009550 <_strtoul_l.constprop.0+0x7c>
 80094f0:	782c      	ldrb	r4, [r5, #0]
 80094f2:	2701      	movs	r7, #1
 80094f4:	1c85      	adds	r5, r0, #2
 80094f6:	f033 0010 	bics.w	r0, r3, #16
 80094fa:	d109      	bne.n	8009510 <_strtoul_l.constprop.0+0x3c>
 80094fc:	2c30      	cmp	r4, #48	@ 0x30
 80094fe:	d12c      	bne.n	800955a <_strtoul_l.constprop.0+0x86>
 8009500:	7828      	ldrb	r0, [r5, #0]
 8009502:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8009506:	2858      	cmp	r0, #88	@ 0x58
 8009508:	d127      	bne.n	800955a <_strtoul_l.constprop.0+0x86>
 800950a:	786c      	ldrb	r4, [r5, #1]
 800950c:	2310      	movs	r3, #16
 800950e:	3502      	adds	r5, #2
 8009510:	f04f 38ff 	mov.w	r8, #4294967295
 8009514:	2600      	movs	r6, #0
 8009516:	fbb8 f8f3 	udiv	r8, r8, r3
 800951a:	fb03 f908 	mul.w	r9, r3, r8
 800951e:	ea6f 0909 	mvn.w	r9, r9
 8009522:	4630      	mov	r0, r6
 8009524:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8009528:	f1bc 0f09 	cmp.w	ip, #9
 800952c:	d81c      	bhi.n	8009568 <_strtoul_l.constprop.0+0x94>
 800952e:	4664      	mov	r4, ip
 8009530:	42a3      	cmp	r3, r4
 8009532:	dd2a      	ble.n	800958a <_strtoul_l.constprop.0+0xb6>
 8009534:	f1b6 3fff 	cmp.w	r6, #4294967295
 8009538:	d007      	beq.n	800954a <_strtoul_l.constprop.0+0x76>
 800953a:	4580      	cmp	r8, r0
 800953c:	d322      	bcc.n	8009584 <_strtoul_l.constprop.0+0xb0>
 800953e:	d101      	bne.n	8009544 <_strtoul_l.constprop.0+0x70>
 8009540:	45a1      	cmp	r9, r4
 8009542:	db1f      	blt.n	8009584 <_strtoul_l.constprop.0+0xb0>
 8009544:	fb00 4003 	mla	r0, r0, r3, r4
 8009548:	2601      	movs	r6, #1
 800954a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800954e:	e7e9      	b.n	8009524 <_strtoul_l.constprop.0+0x50>
 8009550:	2c2b      	cmp	r4, #43	@ 0x2b
 8009552:	bf04      	itt	eq
 8009554:	782c      	ldrbeq	r4, [r5, #0]
 8009556:	1c85      	addeq	r5, r0, #2
 8009558:	e7cd      	b.n	80094f6 <_strtoul_l.constprop.0+0x22>
 800955a:	2b00      	cmp	r3, #0
 800955c:	d1d8      	bne.n	8009510 <_strtoul_l.constprop.0+0x3c>
 800955e:	2c30      	cmp	r4, #48	@ 0x30
 8009560:	bf0c      	ite	eq
 8009562:	2308      	moveq	r3, #8
 8009564:	230a      	movne	r3, #10
 8009566:	e7d3      	b.n	8009510 <_strtoul_l.constprop.0+0x3c>
 8009568:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800956c:	f1bc 0f19 	cmp.w	ip, #25
 8009570:	d801      	bhi.n	8009576 <_strtoul_l.constprop.0+0xa2>
 8009572:	3c37      	subs	r4, #55	@ 0x37
 8009574:	e7dc      	b.n	8009530 <_strtoul_l.constprop.0+0x5c>
 8009576:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800957a:	f1bc 0f19 	cmp.w	ip, #25
 800957e:	d804      	bhi.n	800958a <_strtoul_l.constprop.0+0xb6>
 8009580:	3c57      	subs	r4, #87	@ 0x57
 8009582:	e7d5      	b.n	8009530 <_strtoul_l.constprop.0+0x5c>
 8009584:	f04f 36ff 	mov.w	r6, #4294967295
 8009588:	e7df      	b.n	800954a <_strtoul_l.constprop.0+0x76>
 800958a:	1c73      	adds	r3, r6, #1
 800958c:	d106      	bne.n	800959c <_strtoul_l.constprop.0+0xc8>
 800958e:	2322      	movs	r3, #34	@ 0x22
 8009590:	f8ce 3000 	str.w	r3, [lr]
 8009594:	4630      	mov	r0, r6
 8009596:	b932      	cbnz	r2, 80095a6 <_strtoul_l.constprop.0+0xd2>
 8009598:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800959c:	b107      	cbz	r7, 80095a0 <_strtoul_l.constprop.0+0xcc>
 800959e:	4240      	negs	r0, r0
 80095a0:	2a00      	cmp	r2, #0
 80095a2:	d0f9      	beq.n	8009598 <_strtoul_l.constprop.0+0xc4>
 80095a4:	b106      	cbz	r6, 80095a8 <_strtoul_l.constprop.0+0xd4>
 80095a6:	1e69      	subs	r1, r5, #1
 80095a8:	6011      	str	r1, [r2, #0]
 80095aa:	e7f5      	b.n	8009598 <_strtoul_l.constprop.0+0xc4>
 80095ac:	0800983b 	.word	0x0800983b

080095b0 <_strtoul_r>:
 80095b0:	f7ff bf90 	b.w	80094d4 <_strtoul_l.constprop.0>

080095b4 <_malloc_usable_size_r>:
 80095b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095b8:	1f18      	subs	r0, r3, #4
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	bfbc      	itt	lt
 80095be:	580b      	ldrlt	r3, [r1, r0]
 80095c0:	18c0      	addlt	r0, r0, r3
 80095c2:	4770      	bx	lr

080095c4 <_init>:
 80095c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095c6:	bf00      	nop
 80095c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095ca:	bc08      	pop	{r3}
 80095cc:	469e      	mov	lr, r3
 80095ce:	4770      	bx	lr

080095d0 <_fini>:
 80095d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095d2:	bf00      	nop
 80095d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095d6:	bc08      	pop	{r3}
 80095d8:	469e      	mov	lr, r3
 80095da:	4770      	bx	lr
