
G474VET6_SPI_TRY1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ef4  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  080060cc  080060cc  000070cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006110  08006110  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  08006110  08006110  00007110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006118  08006118  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006118  08006118  00007118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800611c  0800611c  0000711c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006120  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  2000000c  0800612c  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  0800612c  000082bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000146ad  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002716  00000000  00000000  0001c6e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001260  00000000  00000000  0001ee00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e71  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002073  00000000  00000000  00020ed1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000157a8  00000000  00000000  00022f44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd2ba  00000000  00000000  000386ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001359a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004efc  00000000  00000000  001359ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0013a8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080060b4 	.word	0x080060b4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080060b4 	.word	0x080060b4

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 fe87 	bl	800121e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f816 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 fab0 	bl	8000a78 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000518:	f000 f85e 	bl	80005d8 <MX_SPI1_Init>
  MX_UART5_Init();
 800051c:	f000 fa60 	bl	80009e0 <MX_UART5_Init>
  MX_UART4_Init();
 8000520:	f000 fa12 	bl	8000948 <MX_UART4_Init>
  MX_TIM1_Init();
 8000524:	f000 f890 	bl	8000648 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000528:	f000 f962 	bl	80007f0 <MX_TIM3_Init>
  MX_TIM4_Init();
 800052c:	f000 f9b6 	bl	800089c <MX_TIM4_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

HAL_Delay(3000);
 8000530:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000534:	f000 fee4 	bl	8001300 <HAL_Delay>
//HAL_UART_Transmit_IT(&huart5, (uint8_t *)"MAGNET#4#$", 10);
fill_the_buffer();
 8000538:	f000 fb38 	bl	8000bac <fill_the_buffer>

  while (1)
 800053c:	bf00      	nop
 800053e:	e7fd      	b.n	800053c <main+0x34>

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b094      	sub	sp, #80	@ 0x50
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0318 	add.w	r3, r7, #24
 800054a:	2238      	movs	r2, #56	@ 0x38
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f005 fd6e 	bl	8006030 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
 800055c:	609a      	str	r2, [r3, #8]
 800055e:	60da      	str	r2, [r3, #12]
 8000560:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000562:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000566:	f001 fa6f 	bl	8001a48 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800056a:	2302      	movs	r3, #2
 800056c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800056e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000572:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000574:	2340      	movs	r3, #64	@ 0x40
 8000576:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000578:	2302      	movs	r3, #2
 800057a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800057c:	2302      	movs	r3, #2
 800057e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000580:	2301      	movs	r3, #1
 8000582:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000584:	2308      	movs	r3, #8
 8000586:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000588:	2302      	movs	r3, #2
 800058a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800058c:	2302      	movs	r3, #2
 800058e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000590:	2302      	movs	r3, #2
 8000592:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000594:	f107 0318 	add.w	r3, r7, #24
 8000598:	4618      	mov	r0, r3
 800059a:	f001 fb09 	bl	8001bb0 <HAL_RCC_OscConfig>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80005a4:	f000 fb96 	bl	8000cd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a8:	230f      	movs	r3, #15
 80005aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ac:	2303      	movs	r3, #3
 80005ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80005b0:	2390      	movs	r3, #144	@ 0x90
 80005b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	2100      	movs	r1, #0
 80005c0:	4618      	mov	r0, r3
 80005c2:	f001 fe07 	bl	80021d4 <HAL_RCC_ClockConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80005cc:	f000 fb82 	bl	8000cd4 <Error_Handler>
  }
}
 80005d0:	bf00      	nop
 80005d2:	3750      	adds	r7, #80	@ 0x50
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005dc:	4b18      	ldr	r3, [pc, #96]	@ (8000640 <MX_SPI1_Init+0x68>)
 80005de:	4a19      	ldr	r2, [pc, #100]	@ (8000644 <MX_SPI1_Init+0x6c>)
 80005e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80005e2:	4b17      	ldr	r3, [pc, #92]	@ (8000640 <MX_SPI1_Init+0x68>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005e8:	4b15      	ldr	r3, [pc, #84]	@ (8000640 <MX_SPI1_Init+0x68>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80005ee:	4b14      	ldr	r3, [pc, #80]	@ (8000640 <MX_SPI1_Init+0x68>)
 80005f0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80005f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005f6:	4b12      	ldr	r3, [pc, #72]	@ (8000640 <MX_SPI1_Init+0x68>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005fc:	4b10      	ldr	r3, [pc, #64]	@ (8000640 <MX_SPI1_Init+0x68>)
 80005fe:	2200      	movs	r2, #0
 8000600:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000602:	4b0f      	ldr	r3, [pc, #60]	@ (8000640 <MX_SPI1_Init+0x68>)
 8000604:	2200      	movs	r2, #0
 8000606:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000608:	4b0d      	ldr	r3, [pc, #52]	@ (8000640 <MX_SPI1_Init+0x68>)
 800060a:	2200      	movs	r2, #0
 800060c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800060e:	4b0c      	ldr	r3, [pc, #48]	@ (8000640 <MX_SPI1_Init+0x68>)
 8000610:	2200      	movs	r2, #0
 8000612:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000614:	4b0a      	ldr	r3, [pc, #40]	@ (8000640 <MX_SPI1_Init+0x68>)
 8000616:	2200      	movs	r2, #0
 8000618:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800061a:	4b09      	ldr	r3, [pc, #36]	@ (8000640 <MX_SPI1_Init+0x68>)
 800061c:	2207      	movs	r2, #7
 800061e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000620:	4b07      	ldr	r3, [pc, #28]	@ (8000640 <MX_SPI1_Init+0x68>)
 8000622:	2200      	movs	r2, #0
 8000624:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000626:	4b06      	ldr	r3, [pc, #24]	@ (8000640 <MX_SPI1_Init+0x68>)
 8000628:	2200      	movs	r2, #0
 800062a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800062c:	4804      	ldr	r0, [pc, #16]	@ (8000640 <MX_SPI1_Init+0x68>)
 800062e:	f002 fa3b 	bl	8002aa8 <HAL_SPI_Init>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8000638:	f000 fb4c 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000048 	.word	0x20000048
 8000644:	40013000 	.word	0x40013000

08000648 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b09c      	sub	sp, #112	@ 0x70
 800064c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800064e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	609a      	str	r2, [r3, #8]
 800065a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800065c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000668:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]
 8000678:	615a      	str	r2, [r3, #20]
 800067a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	2234      	movs	r2, #52	@ 0x34
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f005 fcd4 	bl	8006030 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000688:	4b57      	ldr	r3, [pc, #348]	@ (80007e8 <MX_TIM1_Init+0x1a0>)
 800068a:	4a58      	ldr	r2, [pc, #352]	@ (80007ec <MX_TIM1_Init+0x1a4>)
 800068c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800068e:	4b56      	ldr	r3, [pc, #344]	@ (80007e8 <MX_TIM1_Init+0x1a0>)
 8000690:	2200      	movs	r2, #0
 8000692:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000694:	4b54      	ldr	r3, [pc, #336]	@ (80007e8 <MX_TIM1_Init+0x1a0>)
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 399;
 800069a:	4b53      	ldr	r3, [pc, #332]	@ (80007e8 <MX_TIM1_Init+0x1a0>)
 800069c:	f240 128f 	movw	r2, #399	@ 0x18f
 80006a0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006a2:	4b51      	ldr	r3, [pc, #324]	@ (80007e8 <MX_TIM1_Init+0x1a0>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006a8:	4b4f      	ldr	r3, [pc, #316]	@ (80007e8 <MX_TIM1_Init+0x1a0>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ae:	4b4e      	ldr	r3, [pc, #312]	@ (80007e8 <MX_TIM1_Init+0x1a0>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006b4:	484c      	ldr	r0, [pc, #304]	@ (80007e8 <MX_TIM1_Init+0x1a0>)
 80006b6:	f002 ffb7 	bl	8003628 <HAL_TIM_Base_Init>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80006c0:	f000 fb08 	bl	8000cd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006c8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006ca:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80006ce:	4619      	mov	r1, r3
 80006d0:	4845      	ldr	r0, [pc, #276]	@ (80007e8 <MX_TIM1_Init+0x1a0>)
 80006d2:	f003 fb2d 	bl	8003d30 <HAL_TIM_ConfigClockSource>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80006dc:	f000 fafa 	bl	8000cd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006e0:	4841      	ldr	r0, [pc, #260]	@ (80007e8 <MX_TIM1_Init+0x1a0>)
 80006e2:	f002 fff8 	bl	80036d6 <HAL_TIM_PWM_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80006ec:	f000 faf2 	bl	8000cd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006f0:	2300      	movs	r3, #0
 80006f2:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006f4:	2300      	movs	r3, #0
 80006f6:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006f8:	2300      	movs	r3, #0
 80006fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006fc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000700:	4619      	mov	r1, r3
 8000702:	4839      	ldr	r0, [pc, #228]	@ (80007e8 <MX_TIM1_Init+0x1a0>)
 8000704:	f004 f8ca 	bl	800489c <HAL_TIMEx_MasterConfigSynchronization>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800070e:	f000 fae1 	bl	8000cd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000712:	2360      	movs	r3, #96	@ 0x60
 8000714:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000716:	2300      	movs	r3, #0
 8000718:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800071a:	2300      	movs	r3, #0
 800071c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800071e:	2300      	movs	r3, #0
 8000720:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000722:	2300      	movs	r3, #0
 8000724:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000726:	2300      	movs	r3, #0
 8000728:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800072a:	2300      	movs	r3, #0
 800072c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800072e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000732:	2200      	movs	r2, #0
 8000734:	4619      	mov	r1, r3
 8000736:	482c      	ldr	r0, [pc, #176]	@ (80007e8 <MX_TIM1_Init+0x1a0>)
 8000738:	f003 f9e6 	bl	8003b08 <HAL_TIM_PWM_ConfigChannel>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000742:	f000 fac7 	bl	8000cd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000746:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800074a:	2204      	movs	r2, #4
 800074c:	4619      	mov	r1, r3
 800074e:	4826      	ldr	r0, [pc, #152]	@ (80007e8 <MX_TIM1_Init+0x1a0>)
 8000750:	f003 f9da 	bl	8003b08 <HAL_TIM_PWM_ConfigChannel>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800075a:	f000 fabb 	bl	8000cd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800075e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000762:	2208      	movs	r2, #8
 8000764:	4619      	mov	r1, r3
 8000766:	4820      	ldr	r0, [pc, #128]	@ (80007e8 <MX_TIM1_Init+0x1a0>)
 8000768:	f003 f9ce 	bl	8003b08 <HAL_TIM_PWM_ConfigChannel>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000772:	f000 faaf 	bl	8000cd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000776:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800077a:	220c      	movs	r2, #12
 800077c:	4619      	mov	r1, r3
 800077e:	481a      	ldr	r0, [pc, #104]	@ (80007e8 <MX_TIM1_Init+0x1a0>)
 8000780:	f003 f9c2 	bl	8003b08 <HAL_TIM_PWM_ConfigChannel>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 800078a:	f000 faa3 	bl	8000cd4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800078e:	2300      	movs	r3, #0
 8000790:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000792:	2300      	movs	r3, #0
 8000794:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800079e:	2300      	movs	r3, #0
 80007a0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007a6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80007ac:	2300      	movs	r3, #0
 80007ae:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80007b0:	2300      	movs	r3, #0
 80007b2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80007b4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80007b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80007be:	2300      	movs	r3, #0
 80007c0:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007c2:	2300      	movs	r3, #0
 80007c4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	4619      	mov	r1, r3
 80007ca:	4807      	ldr	r0, [pc, #28]	@ (80007e8 <MX_TIM1_Init+0x1a0>)
 80007cc:	f004 f8fc 	bl	80049c8 <HAL_TIMEx_ConfigBreakDeadTime>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_TIM1_Init+0x192>
  {
    Error_Handler();
 80007d6:	f000 fa7d 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007da:	4803      	ldr	r0, [pc, #12]	@ (80007e8 <MX_TIM1_Init+0x1a0>)
 80007dc:	f000 fb9c 	bl	8000f18 <HAL_TIM_MspPostInit>

}
 80007e0:	bf00      	nop
 80007e2:	3770      	adds	r7, #112	@ 0x70
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	200000ac 	.word	0x200000ac
 80007ec:	40012c00 	.word	0x40012c00

080007f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08c      	sub	sp, #48	@ 0x30
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80007f6:	f107 030c 	add.w	r3, r7, #12
 80007fa:	2224      	movs	r2, #36	@ 0x24
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f005 fc16 	bl	8006030 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000804:	463b      	mov	r3, r7
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800080e:	4b21      	ldr	r3, [pc, #132]	@ (8000894 <MX_TIM3_Init+0xa4>)
 8000810:	4a21      	ldr	r2, [pc, #132]	@ (8000898 <MX_TIM3_Init+0xa8>)
 8000812:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000814:	4b1f      	ldr	r3, [pc, #124]	@ (8000894 <MX_TIM3_Init+0xa4>)
 8000816:	2200      	movs	r2, #0
 8000818:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800081a:	4b1e      	ldr	r3, [pc, #120]	@ (8000894 <MX_TIM3_Init+0xa4>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000820:	4b1c      	ldr	r3, [pc, #112]	@ (8000894 <MX_TIM3_Init+0xa4>)
 8000822:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000826:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000828:	4b1a      	ldr	r3, [pc, #104]	@ (8000894 <MX_TIM3_Init+0xa4>)
 800082a:	2200      	movs	r2, #0
 800082c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800082e:	4b19      	ldr	r3, [pc, #100]	@ (8000894 <MX_TIM3_Init+0xa4>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000834:	2301      	movs	r3, #1
 8000836:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000838:	2300      	movs	r3, #0
 800083a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800083c:	2301      	movs	r3, #1
 800083e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000840:	2300      	movs	r3, #0
 8000842:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000844:	2300      	movs	r3, #0
 8000846:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000848:	2300      	movs	r3, #0
 800084a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800084c:	2301      	movs	r3, #1
 800084e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000850:	2300      	movs	r3, #0
 8000852:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000854:	2300      	movs	r3, #0
 8000856:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000858:	f107 030c 	add.w	r3, r7, #12
 800085c:	4619      	mov	r1, r3
 800085e:	480d      	ldr	r0, [pc, #52]	@ (8000894 <MX_TIM3_Init+0xa4>)
 8000860:	f003 f8ac 	bl	80039bc <HAL_TIM_Encoder_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800086a:	f000 fa33 	bl	8000cd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800086e:	2300      	movs	r3, #0
 8000870:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000872:	2300      	movs	r3, #0
 8000874:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000876:	463b      	mov	r3, r7
 8000878:	4619      	mov	r1, r3
 800087a:	4806      	ldr	r0, [pc, #24]	@ (8000894 <MX_TIM3_Init+0xa4>)
 800087c:	f004 f80e 	bl	800489c <HAL_TIMEx_MasterConfigSynchronization>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000886:	f000 fa25 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800088a:	bf00      	nop
 800088c:	3730      	adds	r7, #48	@ 0x30
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	200000f8 	.word	0x200000f8
 8000898:	40000400 	.word	0x40000400

0800089c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08c      	sub	sp, #48	@ 0x30
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80008a2:	f107 030c 	add.w	r3, r7, #12
 80008a6:	2224      	movs	r2, #36	@ 0x24
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f005 fbc0 	bl	8006030 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008b0:	463b      	mov	r3, r7
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008ba:	4b21      	ldr	r3, [pc, #132]	@ (8000940 <MX_TIM4_Init+0xa4>)
 80008bc:	4a21      	ldr	r2, [pc, #132]	@ (8000944 <MX_TIM4_Init+0xa8>)
 80008be:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80008c0:	4b1f      	ldr	r3, [pc, #124]	@ (8000940 <MX_TIM4_Init+0xa4>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c6:	4b1e      	ldr	r3, [pc, #120]	@ (8000940 <MX_TIM4_Init+0xa4>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80008cc:	4b1c      	ldr	r3, [pc, #112]	@ (8000940 <MX_TIM4_Init+0xa4>)
 80008ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80008d2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000940 <MX_TIM4_Init+0xa4>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008da:	4b19      	ldr	r3, [pc, #100]	@ (8000940 <MX_TIM4_Init+0xa4>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80008e0:	2301      	movs	r3, #1
 80008e2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008e4:	2300      	movs	r3, #0
 80008e6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008e8:	2301      	movs	r3, #1
 80008ea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008ec:	2300      	movs	r3, #0
 80008ee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80008f4:	2300      	movs	r3, #0
 80008f6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008f8:	2301      	movs	r3, #1
 80008fa:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008fc:	2300      	movs	r3, #0
 80008fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000904:	f107 030c 	add.w	r3, r7, #12
 8000908:	4619      	mov	r1, r3
 800090a:	480d      	ldr	r0, [pc, #52]	@ (8000940 <MX_TIM4_Init+0xa4>)
 800090c:	f003 f856 	bl	80039bc <HAL_TIM_Encoder_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000916:	f000 f9dd 	bl	8000cd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800091a:	2300      	movs	r3, #0
 800091c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800091e:	2300      	movs	r3, #0
 8000920:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000922:	463b      	mov	r3, r7
 8000924:	4619      	mov	r1, r3
 8000926:	4806      	ldr	r0, [pc, #24]	@ (8000940 <MX_TIM4_Init+0xa4>)
 8000928:	f003 ffb8 	bl	800489c <HAL_TIMEx_MasterConfigSynchronization>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000932:	f000 f9cf 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	3730      	adds	r7, #48	@ 0x30
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000144 	.word	0x20000144
 8000944:	40000800 	.word	0x40000800

08000948 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800094c:	4b22      	ldr	r3, [pc, #136]	@ (80009d8 <MX_UART4_Init+0x90>)
 800094e:	4a23      	ldr	r2, [pc, #140]	@ (80009dc <MX_UART4_Init+0x94>)
 8000950:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000952:	4b21      	ldr	r3, [pc, #132]	@ (80009d8 <MX_UART4_Init+0x90>)
 8000954:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000958:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800095a:	4b1f      	ldr	r3, [pc, #124]	@ (80009d8 <MX_UART4_Init+0x90>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000960:	4b1d      	ldr	r3, [pc, #116]	@ (80009d8 <MX_UART4_Init+0x90>)
 8000962:	2200      	movs	r2, #0
 8000964:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000966:	4b1c      	ldr	r3, [pc, #112]	@ (80009d8 <MX_UART4_Init+0x90>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800096c:	4b1a      	ldr	r3, [pc, #104]	@ (80009d8 <MX_UART4_Init+0x90>)
 800096e:	220c      	movs	r2, #12
 8000970:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000972:	4b19      	ldr	r3, [pc, #100]	@ (80009d8 <MX_UART4_Init+0x90>)
 8000974:	2200      	movs	r2, #0
 8000976:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000978:	4b17      	ldr	r3, [pc, #92]	@ (80009d8 <MX_UART4_Init+0x90>)
 800097a:	2200      	movs	r2, #0
 800097c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800097e:	4b16      	ldr	r3, [pc, #88]	@ (80009d8 <MX_UART4_Init+0x90>)
 8000980:	2200      	movs	r2, #0
 8000982:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000984:	4b14      	ldr	r3, [pc, #80]	@ (80009d8 <MX_UART4_Init+0x90>)
 8000986:	2200      	movs	r2, #0
 8000988:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800098a:	4b13      	ldr	r3, [pc, #76]	@ (80009d8 <MX_UART4_Init+0x90>)
 800098c:	2200      	movs	r2, #0
 800098e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000990:	4811      	ldr	r0, [pc, #68]	@ (80009d8 <MX_UART4_Init+0x90>)
 8000992:	f004 f8ad 	bl	8004af0 <HAL_UART_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 800099c:	f000 f99a 	bl	8000cd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009a0:	2100      	movs	r1, #0
 80009a2:	480d      	ldr	r0, [pc, #52]	@ (80009d8 <MX_UART4_Init+0x90>)
 80009a4:	f005 fa79 	bl	8005e9a <HAL_UARTEx_SetTxFifoThreshold>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80009ae:	f000 f991 	bl	8000cd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009b2:	2100      	movs	r1, #0
 80009b4:	4808      	ldr	r0, [pc, #32]	@ (80009d8 <MX_UART4_Init+0x90>)
 80009b6:	f005 faae 	bl	8005f16 <HAL_UARTEx_SetRxFifoThreshold>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80009c0:	f000 f988 	bl	8000cd4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80009c4:	4804      	ldr	r0, [pc, #16]	@ (80009d8 <MX_UART4_Init+0x90>)
 80009c6:	f005 fa2f 	bl	8005e28 <HAL_UARTEx_DisableFifoMode>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80009d0:	f000 f980 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20000190 	.word	0x20000190
 80009dc:	40004c00 	.word	0x40004c00

080009e0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80009e4:	4b22      	ldr	r3, [pc, #136]	@ (8000a70 <MX_UART5_Init+0x90>)
 80009e6:	4a23      	ldr	r2, [pc, #140]	@ (8000a74 <MX_UART5_Init+0x94>)
 80009e8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80009ea:	4b21      	ldr	r3, [pc, #132]	@ (8000a70 <MX_UART5_Init+0x90>)
 80009ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009f0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80009f2:	4b1f      	ldr	r3, [pc, #124]	@ (8000a70 <MX_UART5_Init+0x90>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80009f8:	4b1d      	ldr	r3, [pc, #116]	@ (8000a70 <MX_UART5_Init+0x90>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80009fe:	4b1c      	ldr	r3, [pc, #112]	@ (8000a70 <MX_UART5_Init+0x90>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000a04:	4b1a      	ldr	r3, [pc, #104]	@ (8000a70 <MX_UART5_Init+0x90>)
 8000a06:	220c      	movs	r2, #12
 8000a08:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a0a:	4b19      	ldr	r3, [pc, #100]	@ (8000a70 <MX_UART5_Init+0x90>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a10:	4b17      	ldr	r3, [pc, #92]	@ (8000a70 <MX_UART5_Init+0x90>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a16:	4b16      	ldr	r3, [pc, #88]	@ (8000a70 <MX_UART5_Init+0x90>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a1c:	4b14      	ldr	r3, [pc, #80]	@ (8000a70 <MX_UART5_Init+0x90>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a22:	4b13      	ldr	r3, [pc, #76]	@ (8000a70 <MX_UART5_Init+0x90>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000a28:	4811      	ldr	r0, [pc, #68]	@ (8000a70 <MX_UART5_Init+0x90>)
 8000a2a:	f004 f861 	bl	8004af0 <HAL_UART_Init>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8000a34:	f000 f94e 	bl	8000cd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a38:	2100      	movs	r1, #0
 8000a3a:	480d      	ldr	r0, [pc, #52]	@ (8000a70 <MX_UART5_Init+0x90>)
 8000a3c:	f005 fa2d 	bl	8005e9a <HAL_UARTEx_SetTxFifoThreshold>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8000a46:	f000 f945 	bl	8000cd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4808      	ldr	r0, [pc, #32]	@ (8000a70 <MX_UART5_Init+0x90>)
 8000a4e:	f005 fa62 	bl	8005f16 <HAL_UARTEx_SetRxFifoThreshold>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8000a58:	f000 f93c 	bl	8000cd4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8000a5c:	4804      	ldr	r0, [pc, #16]	@ (8000a70 <MX_UART5_Init+0x90>)
 8000a5e:	f005 f9e3 	bl	8005e28 <HAL_UARTEx_DisableFifoMode>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8000a68:	f000 f934 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20000224 	.word	0x20000224
 8000a74:	40005000 	.word	0x40005000

08000a78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08c      	sub	sp, #48	@ 0x30
 8000a7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
 8000a8c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a8e:	4b44      	ldr	r3, [pc, #272]	@ (8000ba0 <MX_GPIO_Init+0x128>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a92:	4a43      	ldr	r2, [pc, #268]	@ (8000ba0 <MX_GPIO_Init+0x128>)
 8000a94:	f043 0310 	orr.w	r3, r3, #16
 8000a98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a9a:	4b41      	ldr	r3, [pc, #260]	@ (8000ba0 <MX_GPIO_Init+0x128>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a9e:	f003 0310 	and.w	r3, r3, #16
 8000aa2:	61bb      	str	r3, [r7, #24]
 8000aa4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000aa6:	4b3e      	ldr	r3, [pc, #248]	@ (8000ba0 <MX_GPIO_Init+0x128>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aaa:	4a3d      	ldr	r2, [pc, #244]	@ (8000ba0 <MX_GPIO_Init+0x128>)
 8000aac:	f043 0320 	orr.w	r3, r3, #32
 8000ab0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ab2:	4b3b      	ldr	r3, [pc, #236]	@ (8000ba0 <MX_GPIO_Init+0x128>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ab6:	f003 0320 	and.w	r3, r3, #32
 8000aba:	617b      	str	r3, [r7, #20]
 8000abc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000abe:	4b38      	ldr	r3, [pc, #224]	@ (8000ba0 <MX_GPIO_Init+0x128>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac2:	4a37      	ldr	r2, [pc, #220]	@ (8000ba0 <MX_GPIO_Init+0x128>)
 8000ac4:	f043 0304 	orr.w	r3, r3, #4
 8000ac8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aca:	4b35      	ldr	r3, [pc, #212]	@ (8000ba0 <MX_GPIO_Init+0x128>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ace:	f003 0304 	and.w	r3, r3, #4
 8000ad2:	613b      	str	r3, [r7, #16]
 8000ad4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad6:	4b32      	ldr	r3, [pc, #200]	@ (8000ba0 <MX_GPIO_Init+0x128>)
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ada:	4a31      	ldr	r2, [pc, #196]	@ (8000ba0 <MX_GPIO_Init+0x128>)
 8000adc:	f043 0301 	orr.w	r3, r3, #1
 8000ae0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ae2:	4b2f      	ldr	r3, [pc, #188]	@ (8000ba0 <MX_GPIO_Init+0x128>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aee:	4b2c      	ldr	r3, [pc, #176]	@ (8000ba0 <MX_GPIO_Init+0x128>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af2:	4a2b      	ldr	r2, [pc, #172]	@ (8000ba0 <MX_GPIO_Init+0x128>)
 8000af4:	f043 0308 	orr.w	r3, r3, #8
 8000af8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000afa:	4b29      	ldr	r3, [pc, #164]	@ (8000ba0 <MX_GPIO_Init+0x128>)
 8000afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000afe:	f003 0308 	and.w	r3, r3, #8
 8000b02:	60bb      	str	r3, [r7, #8]
 8000b04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b06:	4b26      	ldr	r3, [pc, #152]	@ (8000ba0 <MX_GPIO_Init+0x128>)
 8000b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b0a:	4a25      	ldr	r2, [pc, #148]	@ (8000ba0 <MX_GPIO_Init+0x128>)
 8000b0c:	f043 0302 	orr.w	r3, r3, #2
 8000b10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b12:	4b23      	ldr	r3, [pc, #140]	@ (8000ba0 <MX_GPIO_Init+0x128>)
 8000b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b16:	f003 0302 	and.w	r3, r3, #2
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2170      	movs	r1, #112	@ 0x70
 8000b22:	4820      	ldr	r0, [pc, #128]	@ (8000ba4 <MX_GPIO_Init+0x12c>)
 8000b24:	f000 ff78 	bl	8001a18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000b28:	2201      	movs	r2, #1
 8000b2a:	2108      	movs	r1, #8
 8000b2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b30:	f000 ff72 	bl	8001a18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000b34:	2200      	movs	r2, #0
 8000b36:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b3a:	481b      	ldr	r0, [pc, #108]	@ (8000ba8 <MX_GPIO_Init+0x130>)
 8000b3c:	f000 ff6c 	bl	8001a18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE4 PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000b40:	2370      	movs	r3, #112	@ 0x70
 8000b42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b44:	2301      	movs	r3, #1
 8000b46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b50:	f107 031c 	add.w	r3, r7, #28
 8000b54:	4619      	mov	r1, r3
 8000b56:	4813      	ldr	r0, [pc, #76]	@ (8000ba4 <MX_GPIO_Init+0x12c>)
 8000b58:	f000 fdc4 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b5c:	2308      	movs	r3, #8
 8000b5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b60:	2301      	movs	r3, #1
 8000b62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6c:	f107 031c 	add.w	r3, r7, #28
 8000b70:	4619      	mov	r1, r3
 8000b72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b76:	f000 fdb5 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000b7a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000b7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b80:	2301      	movs	r3, #1
 8000b82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b8c:	f107 031c 	add.w	r3, r7, #28
 8000b90:	4619      	mov	r1, r3
 8000b92:	4805      	ldr	r0, [pc, #20]	@ (8000ba8 <MX_GPIO_Init+0x130>)
 8000b94:	f000 fda6 	bl	80016e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b98:	bf00      	nop
 8000b9a:	3730      	adds	r7, #48	@ 0x30
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40021000 	.word	0x40021000
 8000ba4:	48001000 	.word	0x48001000
 8000ba8:	48000c00 	.word	0x48000c00

08000bac <fill_the_buffer>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void fill_the_buffer(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
    uint8_t RXindex = 0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	71fb      	strb	r3, [r7, #7]
    uint8_t pinstate;
    while(1)
    {

    // Read initial pin state
    pinstate = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 8000bb6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000bba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bbe:	f000 ff13 	bl	80019e8 <HAL_GPIO_ReadPin>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	71bb      	strb	r3, [r7, #6]
    if (!pinstate)
 8000bc6:	79bb      	ldrb	r3, [r7, #6]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d12b      	bne.n	8000c24 <fill_the_buffer+0x78>
    {
        // Clear the buffer if pin is low
        memset(buffer, 0, sizeof(buffer));
 8000bcc:	2220      	movs	r2, #32
 8000bce:	2100      	movs	r1, #0
 8000bd0:	4823      	ldr	r0, [pc, #140]	@ (8000c60 <fill_the_buffer+0xb4>)
 8000bd2:	f005 fa2d 	bl	8006030 <memset>
    }

    while (!pinstate)
 8000bd6:	e025      	b.n	8000c24 <fill_the_buffer+0x78>
    {
        // Receive data from SPI
        HAL_SPI_Receive(&hspi1, &receivedData, 1, HAL_MAX_DELAY);
 8000bd8:	1d79      	adds	r1, r7, #5
 8000bda:	f04f 33ff 	mov.w	r3, #4294967295
 8000bde:	2201      	movs	r2, #1
 8000be0:	4820      	ldr	r0, [pc, #128]	@ (8000c64 <fill_the_buffer+0xb8>)
 8000be2:	f002 f80c 	bl	8002bfe <HAL_SPI_Receive>

        // Check for buffer overflow
        if (RXindex < MAX_BUFFER_SIZE)
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	2b1f      	cmp	r3, #31
 8000bea:	d813      	bhi.n	8000c14 <fill_the_buffer+0x68>
        {
            // Store received data in buffer
            buffer[RXindex++] = (char)receivedData;
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	1c5a      	adds	r2, r3, #1
 8000bf0:	71fa      	strb	r2, [r7, #7]
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	7979      	ldrb	r1, [r7, #5]
 8000bf6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c60 <fill_the_buffer+0xb4>)
 8000bf8:	5499      	strb	r1, [r3, r2]

            // Check if end of message
            if ((char)receivedData == '$')
 8000bfa:	797b      	ldrb	r3, [r7, #5]
 8000bfc:	2b24      	cmp	r3, #36	@ 0x24
 8000bfe:	d109      	bne.n	8000c14 <fill_the_buffer+0x68>
            {
            	HAL_UART_Transmit(&huart5, (uint8_t *)buffer, RXindex, HAL_MAX_DELAY);
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	b29a      	uxth	r2, r3
 8000c04:	f04f 33ff 	mov.w	r3, #4294967295
 8000c08:	4915      	ldr	r1, [pc, #84]	@ (8000c60 <fill_the_buffer+0xb4>)
 8000c0a:	4817      	ldr	r0, [pc, #92]	@ (8000c68 <fill_the_buffer+0xbc>)
 8000c0c:	f003 ffc0 	bl	8004b90 <HAL_UART_Transmit>

                RXindex = 0; // Reset buffer index
 8000c10:	2300      	movs	r3, #0
 8000c12:	71fb      	strb	r3, [r7, #7]
            }
            */
        }

        // Update pin state
        pinstate = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 8000c14:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c1c:	f000 fee4 	bl	80019e8 <HAL_GPIO_ReadPin>
 8000c20:	4603      	mov	r3, r0
 8000c22:	71bb      	strb	r3, [r7, #6]
    while (!pinstate)
 8000c24:	79bb      	ldrb	r3, [r7, #6]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d0d6      	beq.n	8000bd8 <fill_the_buffer+0x2c>
    }
    if(strstr(buffer,"ROT"))
 8000c2a:	4910      	ldr	r1, [pc, #64]	@ (8000c6c <fill_the_buffer+0xc0>)
 8000c2c:	480c      	ldr	r0, [pc, #48]	@ (8000c60 <fill_the_buffer+0xb4>)
 8000c2e:	f005 fa07 	bl	8006040 <strstr>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d0be      	beq.n	8000bb6 <fill_the_buffer+0xa>
      {
          if(buffer[4]=='2'){rot(2);}
 8000c38:	4b09      	ldr	r3, [pc, #36]	@ (8000c60 <fill_the_buffer+0xb4>)
 8000c3a:	791b      	ldrb	r3, [r3, #4]
 8000c3c:	2b32      	cmp	r3, #50	@ 0x32
 8000c3e:	d103      	bne.n	8000c48 <fill_the_buffer+0x9c>
 8000c40:	2002      	movs	r0, #2
 8000c42:	f000 f815 	bl	8000c70 <rot>
 8000c46:	e7b6      	b.n	8000bb6 <fill_the_buffer+0xa>
          else if(buffer[4]=='1'){rot(1);}
 8000c48:	4b05      	ldr	r3, [pc, #20]	@ (8000c60 <fill_the_buffer+0xb4>)
 8000c4a:	791b      	ldrb	r3, [r3, #4]
 8000c4c:	2b31      	cmp	r3, #49	@ 0x31
 8000c4e:	d103      	bne.n	8000c58 <fill_the_buffer+0xac>
 8000c50:	2001      	movs	r0, #1
 8000c52:	f000 f80d 	bl	8000c70 <rot>
 8000c56:	e7ae      	b.n	8000bb6 <fill_the_buffer+0xa>
          else{rot(0);}
 8000c58:	2000      	movs	r0, #0
 8000c5a:	f000 f809 	bl	8000c70 <rot>
    pinstate = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 8000c5e:	e7aa      	b.n	8000bb6 <fill_the_buffer+0xa>
 8000c60:	20000028 	.word	0x20000028
 8000c64:	20000048 	.word	0x20000048
 8000c68:	20000224 	.word	0x20000224
 8000c6c:	080060cc 	.word	0x080060cc

08000c70 <rot>:
       }
   }
}

void rot(uint8_t kek)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	71fb      	strb	r3, [r7, #7]
    // Ustawienie odpowiednich wartości wypełnienia PWM
    // aby obrócić silnik zgodnie z ruchem wskazówek zegara

	//TIM1->CCR1 = 32767;
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	4813      	ldr	r0, [pc, #76]	@ (8000ccc <rot+0x5c>)
 8000c7e:	f002 fd8b 	bl	8003798 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000c82:	2104      	movs	r1, #4
 8000c84:	4811      	ldr	r0, [pc, #68]	@ (8000ccc <rot+0x5c>)
 8000c86:	f002 fd87 	bl	8003798 <HAL_TIM_PWM_Start>

	if(kek == 1)
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d107      	bne.n	8000ca0 <rot+0x30>
	{
		TIM1->CCR1 = 2000;
 8000c90:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd0 <rot+0x60>)
 8000c92:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000c96:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM1->CCR2 = 0;
 8000c98:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd0 <rot+0x60>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	639a      	str	r2, [r3, #56]	@ 0x38





}
 8000c9e:	e010      	b.n	8000cc2 <rot+0x52>
	else if(kek == 2)
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	d107      	bne.n	8000cb6 <rot+0x46>
			TIM1->CCR1 = 0;
 8000ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd0 <rot+0x60>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	635a      	str	r2, [r3, #52]	@ 0x34
			TIM1->CCR2 = 2000;
 8000cac:	4b08      	ldr	r3, [pc, #32]	@ (8000cd0 <rot+0x60>)
 8000cae:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000cb2:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000cb4:	e005      	b.n	8000cc2 <rot+0x52>
		TIM1->CCR1 = 0;
 8000cb6:	4b06      	ldr	r3, [pc, #24]	@ (8000cd0 <rot+0x60>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM1->CCR2 = 0;
 8000cbc:	4b04      	ldr	r3, [pc, #16]	@ (8000cd0 <rot+0x60>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	200000ac 	.word	0x200000ac
 8000cd0:	40012c00 	.word	0x40012c00

08000cd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd8:	b672      	cpsid	i
}
 8000cda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cdc:	bf00      	nop
 8000cde:	e7fd      	b.n	8000cdc <Error_Handler+0x8>

08000ce0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce6:	4b0f      	ldr	r3, [pc, #60]	@ (8000d24 <HAL_MspInit+0x44>)
 8000ce8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cea:	4a0e      	ldr	r2, [pc, #56]	@ (8000d24 <HAL_MspInit+0x44>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cf2:	4b0c      	ldr	r3, [pc, #48]	@ (8000d24 <HAL_MspInit+0x44>)
 8000cf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfe:	4b09      	ldr	r3, [pc, #36]	@ (8000d24 <HAL_MspInit+0x44>)
 8000d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d02:	4a08      	ldr	r2, [pc, #32]	@ (8000d24 <HAL_MspInit+0x44>)
 8000d04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d08:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d0a:	4b06      	ldr	r3, [pc, #24]	@ (8000d24 <HAL_MspInit+0x44>)
 8000d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000d16:	f000 ff3b 	bl	8001b90 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40021000 	.word	0x40021000

08000d28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08a      	sub	sp, #40	@ 0x28
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a26      	ldr	r2, [pc, #152]	@ (8000de0 <HAL_SPI_MspInit+0xb8>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d145      	bne.n	8000dd6 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d4a:	4b26      	ldr	r3, [pc, #152]	@ (8000de4 <HAL_SPI_MspInit+0xbc>)
 8000d4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d4e:	4a25      	ldr	r2, [pc, #148]	@ (8000de4 <HAL_SPI_MspInit+0xbc>)
 8000d50:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d54:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d56:	4b23      	ldr	r3, [pc, #140]	@ (8000de4 <HAL_SPI_MspInit+0xbc>)
 8000d58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d62:	4b20      	ldr	r3, [pc, #128]	@ (8000de4 <HAL_SPI_MspInit+0xbc>)
 8000d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d66:	4a1f      	ldr	r2, [pc, #124]	@ (8000de4 <HAL_SPI_MspInit+0xbc>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d6e:	4b1d      	ldr	r3, [pc, #116]	@ (8000de4 <HAL_SPI_MspInit+0xbc>)
 8000d70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000de4 <HAL_SPI_MspInit+0xbc>)
 8000d7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d7e:	4a19      	ldr	r2, [pc, #100]	@ (8000de4 <HAL_SPI_MspInit+0xbc>)
 8000d80:	f043 0302 	orr.w	r3, r3, #2
 8000d84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d86:	4b17      	ldr	r3, [pc, #92]	@ (8000de4 <HAL_SPI_MspInit+0xbc>)
 8000d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d8a:	f003 0302 	and.w	r3, r3, #2
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da0:	2303      	movs	r3, #3
 8000da2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000da4:	2305      	movs	r3, #5
 8000da6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	4619      	mov	r1, r3
 8000dae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000db2:	f000 fc97 	bl	80016e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000db6:	2338      	movs	r3, #56	@ 0x38
 8000db8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dc6:	2305      	movs	r3, #5
 8000dc8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dca:	f107 0314 	add.w	r3, r7, #20
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4805      	ldr	r0, [pc, #20]	@ (8000de8 <HAL_SPI_MspInit+0xc0>)
 8000dd2:	f000 fc87 	bl	80016e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000dd6:	bf00      	nop
 8000dd8:	3728      	adds	r7, #40	@ 0x28
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40013000 	.word	0x40013000
 8000de4:	40021000 	.word	0x40021000
 8000de8:	48000400 	.word	0x48000400

08000dec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a0a      	ldr	r2, [pc, #40]	@ (8000e24 <HAL_TIM_Base_MspInit+0x38>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d10b      	bne.n	8000e16 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dfe:	4b0a      	ldr	r3, [pc, #40]	@ (8000e28 <HAL_TIM_Base_MspInit+0x3c>)
 8000e00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e02:	4a09      	ldr	r2, [pc, #36]	@ (8000e28 <HAL_TIM_Base_MspInit+0x3c>)
 8000e04:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000e08:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e0a:	4b07      	ldr	r3, [pc, #28]	@ (8000e28 <HAL_TIM_Base_MspInit+0x3c>)
 8000e0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000e16:	bf00      	nop
 8000e18:	3714      	adds	r7, #20
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	40012c00 	.word	0x40012c00
 8000e28:	40021000 	.word	0x40021000

08000e2c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b08c      	sub	sp, #48	@ 0x30
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e34:	f107 031c 	add.w	r3, r7, #28
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a2f      	ldr	r2, [pc, #188]	@ (8000f08 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d128      	bne.n	8000ea0 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e4e:	4b2f      	ldr	r3, [pc, #188]	@ (8000f0c <HAL_TIM_Encoder_MspInit+0xe0>)
 8000e50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e52:	4a2e      	ldr	r2, [pc, #184]	@ (8000f0c <HAL_TIM_Encoder_MspInit+0xe0>)
 8000e54:	f043 0302 	orr.w	r3, r3, #2
 8000e58:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e5a:	4b2c      	ldr	r3, [pc, #176]	@ (8000f0c <HAL_TIM_Encoder_MspInit+0xe0>)
 8000e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e5e:	f003 0302 	and.w	r3, r3, #2
 8000e62:	61bb      	str	r3, [r7, #24]
 8000e64:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e66:	4b29      	ldr	r3, [pc, #164]	@ (8000f0c <HAL_TIM_Encoder_MspInit+0xe0>)
 8000e68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e6a:	4a28      	ldr	r2, [pc, #160]	@ (8000f0c <HAL_TIM_Encoder_MspInit+0xe0>)
 8000e6c:	f043 0304 	orr.w	r3, r3, #4
 8000e70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e72:	4b26      	ldr	r3, [pc, #152]	@ (8000f0c <HAL_TIM_Encoder_MspInit+0xe0>)
 8000e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e76:	f003 0304 	and.w	r3, r3, #4
 8000e7a:	617b      	str	r3, [r7, #20]
 8000e7c:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e7e:	23c0      	movs	r3, #192	@ 0xc0
 8000e80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e82:	2302      	movs	r3, #2
 8000e84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e92:	f107 031c 	add.w	r3, r7, #28
 8000e96:	4619      	mov	r1, r3
 8000e98:	481d      	ldr	r0, [pc, #116]	@ (8000f10 <HAL_TIM_Encoder_MspInit+0xe4>)
 8000e9a:	f000 fc23 	bl	80016e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000e9e:	e02e      	b.n	8000efe <HAL_TIM_Encoder_MspInit+0xd2>
  else if(htim_encoder->Instance==TIM4)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a1b      	ldr	r2, [pc, #108]	@ (8000f14 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d129      	bne.n	8000efe <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000eaa:	4b18      	ldr	r3, [pc, #96]	@ (8000f0c <HAL_TIM_Encoder_MspInit+0xe0>)
 8000eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eae:	4a17      	ldr	r2, [pc, #92]	@ (8000f0c <HAL_TIM_Encoder_MspInit+0xe0>)
 8000eb0:	f043 0304 	orr.w	r3, r3, #4
 8000eb4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000eb6:	4b15      	ldr	r3, [pc, #84]	@ (8000f0c <HAL_TIM_Encoder_MspInit+0xe0>)
 8000eb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eba:	f003 0304 	and.w	r3, r3, #4
 8000ebe:	613b      	str	r3, [r7, #16]
 8000ec0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec2:	4b12      	ldr	r3, [pc, #72]	@ (8000f0c <HAL_TIM_Encoder_MspInit+0xe0>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec6:	4a11      	ldr	r2, [pc, #68]	@ (8000f0c <HAL_TIM_Encoder_MspInit+0xe0>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ece:	4b0f      	ldr	r3, [pc, #60]	@ (8000f0c <HAL_TIM_Encoder_MspInit+0xe0>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000eda:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000ede:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8000eec:	230a      	movs	r3, #10
 8000eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef0:	f107 031c 	add.w	r3, r7, #28
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000efa:	f000 fbf3 	bl	80016e4 <HAL_GPIO_Init>
}
 8000efe:	bf00      	nop
 8000f00:	3730      	adds	r7, #48	@ 0x30
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40000400 	.word	0x40000400
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	48000800 	.word	0x48000800
 8000f14:	40000800 	.word	0x40000800

08000f18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b088      	sub	sp, #32
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f20:	f107 030c 	add.w	r3, r7, #12
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a11      	ldr	r2, [pc, #68]	@ (8000f7c <HAL_TIM_MspPostInit+0x64>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d11b      	bne.n	8000f72 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f3a:	4b11      	ldr	r3, [pc, #68]	@ (8000f80 <HAL_TIM_MspPostInit+0x68>)
 8000f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f3e:	4a10      	ldr	r2, [pc, #64]	@ (8000f80 <HAL_TIM_MspPostInit+0x68>)
 8000f40:	f043 0304 	orr.w	r3, r3, #4
 8000f44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f46:	4b0e      	ldr	r3, [pc, #56]	@ (8000f80 <HAL_TIM_MspPostInit+0x68>)
 8000f48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f4a:	f003 0304 	and.w	r3, r3, #4
 8000f4e:	60bb      	str	r3, [r7, #8]
 8000f50:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000f52:	230f      	movs	r3, #15
 8000f54:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f56:	2302      	movs	r3, #2
 8000f58:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000f62:	2302      	movs	r3, #2
 8000f64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f66:	f107 030c 	add.w	r3, r7, #12
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4805      	ldr	r0, [pc, #20]	@ (8000f84 <HAL_TIM_MspPostInit+0x6c>)
 8000f6e:	f000 fbb9 	bl	80016e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000f72:	bf00      	nop
 8000f74:	3720      	adds	r7, #32
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40012c00 	.word	0x40012c00
 8000f80:	40021000 	.word	0x40021000
 8000f84:	48000800 	.word	0x48000800

08000f88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b0a2      	sub	sp, #136	@ 0x88
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fa0:	f107 0320 	add.w	r3, r7, #32
 8000fa4:	2254      	movs	r2, #84	@ 0x54
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f005 f841 	bl	8006030 <memset>
  if(huart->Instance==UART4)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a56      	ldr	r2, [pc, #344]	@ (800110c <HAL_UART_MspInit+0x184>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d141      	bne.n	800103c <HAL_UART_MspInit+0xb4>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000fb8:	2308      	movs	r3, #8
 8000fba:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fc0:	f107 0320 	add.w	r3, r7, #32
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f001 fb21 	bl	800260c <HAL_RCCEx_PeriphCLKConfig>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000fd0:	f7ff fe80 	bl	8000cd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000fd4:	4b4e      	ldr	r3, [pc, #312]	@ (8001110 <HAL_UART_MspInit+0x188>)
 8000fd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fd8:	4a4d      	ldr	r2, [pc, #308]	@ (8001110 <HAL_UART_MspInit+0x188>)
 8000fda:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000fde:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fe0:	4b4b      	ldr	r3, [pc, #300]	@ (8001110 <HAL_UART_MspInit+0x188>)
 8000fe2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fe4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000fe8:	61fb      	str	r3, [r7, #28]
 8000fea:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fec:	4b48      	ldr	r3, [pc, #288]	@ (8001110 <HAL_UART_MspInit+0x188>)
 8000fee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ff0:	4a47      	ldr	r2, [pc, #284]	@ (8001110 <HAL_UART_MspInit+0x188>)
 8000ff2:	f043 0304 	orr.w	r3, r3, #4
 8000ff6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ff8:	4b45      	ldr	r3, [pc, #276]	@ (8001110 <HAL_UART_MspInit+0x188>)
 8000ffa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ffc:	f003 0304 	and.w	r3, r3, #4
 8001000:	61bb      	str	r3, [r7, #24]
 8001002:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001004:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001008:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100a:	2302      	movs	r3, #2
 800100c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001012:	2300      	movs	r3, #0
 8001014:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8001018:	2305      	movs	r3, #5
 800101a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800101e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001022:	4619      	mov	r1, r3
 8001024:	483b      	ldr	r0, [pc, #236]	@ (8001114 <HAL_UART_MspInit+0x18c>)
 8001026:	f000 fb5d 	bl	80016e4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800102a:	2200      	movs	r2, #0
 800102c:	2100      	movs	r1, #0
 800102e:	2034      	movs	r0, #52	@ 0x34
 8001030:	f000 fa63 	bl	80014fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001034:	2034      	movs	r0, #52	@ 0x34
 8001036:	f000 fa7a 	bl	800152e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 800103a:	e063      	b.n	8001104 <HAL_UART_MspInit+0x17c>
  else if(huart->Instance==UART5)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a35      	ldr	r2, [pc, #212]	@ (8001118 <HAL_UART_MspInit+0x190>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d15e      	bne.n	8001104 <HAL_UART_MspInit+0x17c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001046:	2310      	movs	r3, #16
 8001048:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800104a:	2300      	movs	r3, #0
 800104c:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800104e:	f107 0320 	add.w	r3, r7, #32
 8001052:	4618      	mov	r0, r3
 8001054:	f001 fada 	bl	800260c <HAL_RCCEx_PeriphCLKConfig>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <HAL_UART_MspInit+0xda>
      Error_Handler();
 800105e:	f7ff fe39 	bl	8000cd4 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001062:	4b2b      	ldr	r3, [pc, #172]	@ (8001110 <HAL_UART_MspInit+0x188>)
 8001064:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001066:	4a2a      	ldr	r2, [pc, #168]	@ (8001110 <HAL_UART_MspInit+0x188>)
 8001068:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800106c:	6593      	str	r3, [r2, #88]	@ 0x58
 800106e:	4b28      	ldr	r3, [pc, #160]	@ (8001110 <HAL_UART_MspInit+0x188>)
 8001070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001072:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001076:	617b      	str	r3, [r7, #20]
 8001078:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800107a:	4b25      	ldr	r3, [pc, #148]	@ (8001110 <HAL_UART_MspInit+0x188>)
 800107c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800107e:	4a24      	ldr	r2, [pc, #144]	@ (8001110 <HAL_UART_MspInit+0x188>)
 8001080:	f043 0304 	orr.w	r3, r3, #4
 8001084:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001086:	4b22      	ldr	r3, [pc, #136]	@ (8001110 <HAL_UART_MspInit+0x188>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800108a:	f003 0304 	and.w	r3, r3, #4
 800108e:	613b      	str	r3, [r7, #16]
 8001090:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001092:	4b1f      	ldr	r3, [pc, #124]	@ (8001110 <HAL_UART_MspInit+0x188>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001096:	4a1e      	ldr	r2, [pc, #120]	@ (8001110 <HAL_UART_MspInit+0x188>)
 8001098:	f043 0308 	orr.w	r3, r3, #8
 800109c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800109e:	4b1c      	ldr	r3, [pc, #112]	@ (8001110 <HAL_UART_MspInit+0x188>)
 80010a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a2:	f003 0308 	and.w	r3, r3, #8
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80010aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010ae:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b0:	2302      	movs	r3, #2
 80010b2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b8:	2300      	movs	r3, #0
 80010ba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80010be:	2305      	movs	r3, #5
 80010c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010c4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80010c8:	4619      	mov	r1, r3
 80010ca:	4812      	ldr	r0, [pc, #72]	@ (8001114 <HAL_UART_MspInit+0x18c>)
 80010cc:	f000 fb0a 	bl	80016e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010d0:	2304      	movs	r3, #4
 80010d2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d4:	2302      	movs	r3, #2
 80010d6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010dc:	2300      	movs	r3, #0
 80010de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80010e2:	2305      	movs	r3, #5
 80010e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010e8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80010ec:	4619      	mov	r1, r3
 80010ee:	480b      	ldr	r0, [pc, #44]	@ (800111c <HAL_UART_MspInit+0x194>)
 80010f0:	f000 faf8 	bl	80016e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80010f4:	2200      	movs	r2, #0
 80010f6:	2100      	movs	r1, #0
 80010f8:	2035      	movs	r0, #53	@ 0x35
 80010fa:	f000 f9fe 	bl	80014fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80010fe:	2035      	movs	r0, #53	@ 0x35
 8001100:	f000 fa15 	bl	800152e <HAL_NVIC_EnableIRQ>
}
 8001104:	bf00      	nop
 8001106:	3788      	adds	r7, #136	@ 0x88
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40004c00 	.word	0x40004c00
 8001110:	40021000 	.word	0x40021000
 8001114:	48000800 	.word	0x48000800
 8001118:	40005000 	.word	0x40005000
 800111c:	48000c00 	.word	0x48000c00

08001120 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001124:	bf00      	nop
 8001126:	e7fd      	b.n	8001124 <NMI_Handler+0x4>

08001128 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800112c:	bf00      	nop
 800112e:	e7fd      	b.n	800112c <HardFault_Handler+0x4>

08001130 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001134:	bf00      	nop
 8001136:	e7fd      	b.n	8001134 <MemManage_Handler+0x4>

08001138 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800113c:	bf00      	nop
 800113e:	e7fd      	b.n	800113c <BusFault_Handler+0x4>

08001140 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001144:	bf00      	nop
 8001146:	e7fd      	b.n	8001144 <UsageFault_Handler+0x4>

08001148 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001156:	b480      	push	{r7}
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001168:	bf00      	nop
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001176:	f000 f8a5 	bl	80012c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001184:	4802      	ldr	r0, [pc, #8]	@ (8001190 <UART4_IRQHandler+0x10>)
 8001186:	f003 fd91 	bl	8004cac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000190 	.word	0x20000190

08001194 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt / UART5 wake-up interrupt through EXTI line 35.
  */
void UART5_IRQHandler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001198:	4802      	ldr	r0, [pc, #8]	@ (80011a4 <UART5_IRQHandler+0x10>)
 800119a:	f003 fd87 	bl	8004cac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000224 	.word	0x20000224

080011a8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011ac:	4b06      	ldr	r3, [pc, #24]	@ (80011c8 <SystemInit+0x20>)
 80011ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011b2:	4a05      	ldr	r2, [pc, #20]	@ (80011c8 <SystemInit+0x20>)
 80011b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011cc:	480d      	ldr	r0, [pc, #52]	@ (8001204 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011ce:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011d0:	f7ff ffea 	bl	80011a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011d4:	480c      	ldr	r0, [pc, #48]	@ (8001208 <LoopForever+0x6>)
  ldr r1, =_edata
 80011d6:	490d      	ldr	r1, [pc, #52]	@ (800120c <LoopForever+0xa>)
  ldr r2, =_sidata
 80011d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001210 <LoopForever+0xe>)
  movs r3, #0
 80011da:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80011dc:	e002      	b.n	80011e4 <LoopCopyDataInit>

080011de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011e2:	3304      	adds	r3, #4

080011e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e8:	d3f9      	bcc.n	80011de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001214 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011ec:	4c0a      	ldr	r4, [pc, #40]	@ (8001218 <LoopForever+0x16>)
  movs r3, #0
 80011ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f0:	e001      	b.n	80011f6 <LoopFillZerobss>

080011f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f4:	3204      	adds	r2, #4

080011f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f8:	d3fb      	bcc.n	80011f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011fa:	f004 ff37 	bl	800606c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011fe:	f7ff f983 	bl	8000508 <main>

08001202 <LoopForever>:

LoopForever:
    b LoopForever
 8001202:	e7fe      	b.n	8001202 <LoopForever>
  ldr   r0, =_estack
 8001204:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001208:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800120c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001210:	08006120 	.word	0x08006120
  ldr r2, =_sbss
 8001214:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001218:	200002bc 	.word	0x200002bc

0800121c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800121c:	e7fe      	b.n	800121c <ADC1_2_IRQHandler>

0800121e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b082      	sub	sp, #8
 8001222:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001224:	2300      	movs	r3, #0
 8001226:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001228:	2003      	movs	r0, #3
 800122a:	f000 f95b 	bl	80014e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800122e:	200f      	movs	r0, #15
 8001230:	f000 f80e 	bl	8001250 <HAL_InitTick>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d002      	beq.n	8001240 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	71fb      	strb	r3, [r7, #7]
 800123e:	e001      	b.n	8001244 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001240:	f7ff fd4e 	bl	8000ce0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001244:	79fb      	ldrb	r3, [r7, #7]

}
 8001246:	4618      	mov	r0, r3
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001258:	2300      	movs	r3, #0
 800125a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800125c:	4b16      	ldr	r3, [pc, #88]	@ (80012b8 <HAL_InitTick+0x68>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d022      	beq.n	80012aa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001264:	4b15      	ldr	r3, [pc, #84]	@ (80012bc <HAL_InitTick+0x6c>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	4b13      	ldr	r3, [pc, #76]	@ (80012b8 <HAL_InitTick+0x68>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001270:	fbb1 f3f3 	udiv	r3, r1, r3
 8001274:	fbb2 f3f3 	udiv	r3, r2, r3
 8001278:	4618      	mov	r0, r3
 800127a:	f000 f966 	bl	800154a <HAL_SYSTICK_Config>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d10f      	bne.n	80012a4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2b0f      	cmp	r3, #15
 8001288:	d809      	bhi.n	800129e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800128a:	2200      	movs	r2, #0
 800128c:	6879      	ldr	r1, [r7, #4]
 800128e:	f04f 30ff 	mov.w	r0, #4294967295
 8001292:	f000 f932 	bl	80014fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001296:	4a0a      	ldr	r2, [pc, #40]	@ (80012c0 <HAL_InitTick+0x70>)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6013      	str	r3, [r2, #0]
 800129c:	e007      	b.n	80012ae <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	73fb      	strb	r3, [r7, #15]
 80012a2:	e004      	b.n	80012ae <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	73fb      	strb	r3, [r7, #15]
 80012a8:	e001      	b.n	80012ae <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20000008 	.word	0x20000008
 80012bc:	20000000 	.word	0x20000000
 80012c0:	20000004 	.word	0x20000004

080012c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012c8:	4b05      	ldr	r3, [pc, #20]	@ (80012e0 <HAL_IncTick+0x1c>)
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	4b05      	ldr	r3, [pc, #20]	@ (80012e4 <HAL_IncTick+0x20>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4413      	add	r3, r2
 80012d2:	4a03      	ldr	r2, [pc, #12]	@ (80012e0 <HAL_IncTick+0x1c>)
 80012d4:	6013      	str	r3, [r2, #0]
}
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	200002b8 	.word	0x200002b8
 80012e4:	20000008 	.word	0x20000008

080012e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return uwTick;
 80012ec:	4b03      	ldr	r3, [pc, #12]	@ (80012fc <HAL_GetTick+0x14>)
 80012ee:	681b      	ldr	r3, [r3, #0]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	200002b8 	.word	0x200002b8

08001300 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001308:	f7ff ffee 	bl	80012e8 <HAL_GetTick>
 800130c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001318:	d004      	beq.n	8001324 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800131a:	4b09      	ldr	r3, [pc, #36]	@ (8001340 <HAL_Delay+0x40>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	68fa      	ldr	r2, [r7, #12]
 8001320:	4413      	add	r3, r2
 8001322:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001324:	bf00      	nop
 8001326:	f7ff ffdf 	bl	80012e8 <HAL_GetTick>
 800132a:	4602      	mov	r2, r0
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	68fa      	ldr	r2, [r7, #12]
 8001332:	429a      	cmp	r2, r3
 8001334:	d8f7      	bhi.n	8001326 <HAL_Delay+0x26>
  {
  }
}
 8001336:	bf00      	nop
 8001338:	bf00      	nop
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000008 	.word	0x20000008

08001344 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001354:	4b0c      	ldr	r3, [pc, #48]	@ (8001388 <__NVIC_SetPriorityGrouping+0x44>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800135a:	68ba      	ldr	r2, [r7, #8]
 800135c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001360:	4013      	ands	r3, r2
 8001362:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800136c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001370:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001374:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001376:	4a04      	ldr	r2, [pc, #16]	@ (8001388 <__NVIC_SetPriorityGrouping+0x44>)
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	60d3      	str	r3, [r2, #12]
}
 800137c:	bf00      	nop
 800137e:	3714      	adds	r7, #20
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001390:	4b04      	ldr	r3, [pc, #16]	@ (80013a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	0a1b      	lsrs	r3, r3, #8
 8001396:	f003 0307 	and.w	r3, r3, #7
}
 800139a:	4618      	mov	r0, r3
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	db0b      	blt.n	80013d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	f003 021f 	and.w	r2, r3, #31
 80013c0:	4907      	ldr	r1, [pc, #28]	@ (80013e0 <__NVIC_EnableIRQ+0x38>)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	095b      	lsrs	r3, r3, #5
 80013c8:	2001      	movs	r0, #1
 80013ca:	fa00 f202 	lsl.w	r2, r0, r2
 80013ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	e000e100 	.word	0xe000e100

080013e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	6039      	str	r1, [r7, #0]
 80013ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	db0a      	blt.n	800140e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	490c      	ldr	r1, [pc, #48]	@ (8001430 <__NVIC_SetPriority+0x4c>)
 80013fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001402:	0112      	lsls	r2, r2, #4
 8001404:	b2d2      	uxtb	r2, r2
 8001406:	440b      	add	r3, r1
 8001408:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800140c:	e00a      	b.n	8001424 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	b2da      	uxtb	r2, r3
 8001412:	4908      	ldr	r1, [pc, #32]	@ (8001434 <__NVIC_SetPriority+0x50>)
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	f003 030f 	and.w	r3, r3, #15
 800141a:	3b04      	subs	r3, #4
 800141c:	0112      	lsls	r2, r2, #4
 800141e:	b2d2      	uxtb	r2, r2
 8001420:	440b      	add	r3, r1
 8001422:	761a      	strb	r2, [r3, #24]
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	e000e100 	.word	0xe000e100
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001438:	b480      	push	{r7}
 800143a:	b089      	sub	sp, #36	@ 0x24
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f003 0307 	and.w	r3, r3, #7
 800144a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	f1c3 0307 	rsb	r3, r3, #7
 8001452:	2b04      	cmp	r3, #4
 8001454:	bf28      	it	cs
 8001456:	2304      	movcs	r3, #4
 8001458:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	3304      	adds	r3, #4
 800145e:	2b06      	cmp	r3, #6
 8001460:	d902      	bls.n	8001468 <NVIC_EncodePriority+0x30>
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	3b03      	subs	r3, #3
 8001466:	e000      	b.n	800146a <NVIC_EncodePriority+0x32>
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800146c:	f04f 32ff 	mov.w	r2, #4294967295
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43da      	mvns	r2, r3
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	401a      	ands	r2, r3
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001480:	f04f 31ff 	mov.w	r1, #4294967295
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	fa01 f303 	lsl.w	r3, r1, r3
 800148a:	43d9      	mvns	r1, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001490:	4313      	orrs	r3, r2
         );
}
 8001492:	4618      	mov	r0, r3
 8001494:	3724      	adds	r7, #36	@ 0x24
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
	...

080014a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3b01      	subs	r3, #1
 80014ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014b0:	d301      	bcc.n	80014b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014b2:	2301      	movs	r3, #1
 80014b4:	e00f      	b.n	80014d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014b6:	4a0a      	ldr	r2, [pc, #40]	@ (80014e0 <SysTick_Config+0x40>)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3b01      	subs	r3, #1
 80014bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014be:	210f      	movs	r1, #15
 80014c0:	f04f 30ff 	mov.w	r0, #4294967295
 80014c4:	f7ff ff8e 	bl	80013e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014c8:	4b05      	ldr	r3, [pc, #20]	@ (80014e0 <SysTick_Config+0x40>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ce:	4b04      	ldr	r3, [pc, #16]	@ (80014e0 <SysTick_Config+0x40>)
 80014d0:	2207      	movs	r2, #7
 80014d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	e000e010 	.word	0xe000e010

080014e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f7ff ff29 	bl	8001344 <__NVIC_SetPriorityGrouping>
}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b086      	sub	sp, #24
 80014fe:	af00      	add	r7, sp, #0
 8001500:	4603      	mov	r3, r0
 8001502:	60b9      	str	r1, [r7, #8]
 8001504:	607a      	str	r2, [r7, #4]
 8001506:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001508:	f7ff ff40 	bl	800138c <__NVIC_GetPriorityGrouping>
 800150c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	68b9      	ldr	r1, [r7, #8]
 8001512:	6978      	ldr	r0, [r7, #20]
 8001514:	f7ff ff90 	bl	8001438 <NVIC_EncodePriority>
 8001518:	4602      	mov	r2, r0
 800151a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800151e:	4611      	mov	r1, r2
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff ff5f 	bl	80013e4 <__NVIC_SetPriority>
}
 8001526:	bf00      	nop
 8001528:	3718      	adds	r7, #24
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b082      	sub	sp, #8
 8001532:	af00      	add	r7, sp, #0
 8001534:	4603      	mov	r3, r0
 8001536:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff ff33 	bl	80013a8 <__NVIC_EnableIRQ>
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b082      	sub	sp, #8
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f7ff ffa4 	bl	80014a0 <SysTick_Config>
 8001558:	4603      	mov	r3, r0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001562:	b480      	push	{r7}
 8001564:	b085      	sub	sp, #20
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800156a:	2300      	movs	r3, #0
 800156c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b02      	cmp	r3, #2
 8001578:	d005      	beq.n	8001586 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2204      	movs	r2, #4
 800157e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	73fb      	strb	r3, [r7, #15]
 8001584:	e037      	b.n	80015f6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f022 020e 	bic.w	r2, r2, #14
 8001594:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80015a4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f022 0201 	bic.w	r2, r2, #1
 80015b4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ba:	f003 021f 	and.w	r2, r3, #31
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c2:	2101      	movs	r1, #1
 80015c4:	fa01 f202 	lsl.w	r2, r1, r2
 80015c8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80015d2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d00c      	beq.n	80015f6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015e6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80015ea:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80015f4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2201      	movs	r2, #1
 80015fa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001606:	7bfb      	ldrb	r3, [r7, #15]
}
 8001608:	4618      	mov	r0, r3
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800161c:	2300      	movs	r3, #0
 800161e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001626:	b2db      	uxtb	r3, r3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d00d      	beq.n	8001648 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2204      	movs	r2, #4
 8001630:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2201      	movs	r2, #1
 8001636:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	73fb      	strb	r3, [r7, #15]
 8001646:	e047      	b.n	80016d8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f022 020e 	bic.w	r2, r2, #14
 8001656:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f022 0201 	bic.w	r2, r2, #1
 8001666:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001672:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001676:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800167c:	f003 021f 	and.w	r2, r3, #31
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001684:	2101      	movs	r1, #1
 8001686:	fa01 f202 	lsl.w	r2, r1, r2
 800168a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001694:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800169a:	2b00      	cmp	r3, #0
 800169c:	d00c      	beq.n	80016b8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80016ac:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80016b6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2201      	movs	r2, #1
 80016bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d003      	beq.n	80016d8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	4798      	blx	r3
    }
  }
  return status;
 80016d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
	...

080016e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b087      	sub	sp, #28
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80016f2:	e15a      	b.n	80019aa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	2101      	movs	r1, #1
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001700:	4013      	ands	r3, r2
 8001702:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 814c 	beq.w	80019a4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f003 0303 	and.w	r3, r3, #3
 8001714:	2b01      	cmp	r3, #1
 8001716:	d005      	beq.n	8001724 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001720:	2b02      	cmp	r3, #2
 8001722:	d130      	bne.n	8001786 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	2203      	movs	r2, #3
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	43db      	mvns	r3, r3
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	4013      	ands	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	68da      	ldr	r2, [r3, #12]
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	4313      	orrs	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800175a:	2201      	movs	r2, #1
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	43db      	mvns	r3, r3
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	4013      	ands	r3, r2
 8001768:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	091b      	lsrs	r3, r3, #4
 8001770:	f003 0201 	and.w	r2, r3, #1
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	4313      	orrs	r3, r2
 800177e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f003 0303 	and.w	r3, r3, #3
 800178e:	2b03      	cmp	r3, #3
 8001790:	d017      	beq.n	80017c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	2203      	movs	r2, #3
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	43db      	mvns	r3, r3
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	4013      	ands	r3, r2
 80017a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	689a      	ldr	r2, [r3, #8]
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f003 0303 	and.w	r3, r3, #3
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d123      	bne.n	8001816 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	08da      	lsrs	r2, r3, #3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	3208      	adds	r2, #8
 80017d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	220f      	movs	r2, #15
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	43db      	mvns	r3, r3
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	4013      	ands	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	691a      	ldr	r2, [r3, #16]
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	f003 0307 	and.w	r3, r3, #7
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	4313      	orrs	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	08da      	lsrs	r2, r3, #3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3208      	adds	r2, #8
 8001810:	6939      	ldr	r1, [r7, #16]
 8001812:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	2203      	movs	r2, #3
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	43db      	mvns	r3, r3
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	4013      	ands	r3, r2
 800182c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f003 0203 	and.w	r2, r3, #3
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	4313      	orrs	r3, r2
 8001842:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001852:	2b00      	cmp	r3, #0
 8001854:	f000 80a6 	beq.w	80019a4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001858:	4b5b      	ldr	r3, [pc, #364]	@ (80019c8 <HAL_GPIO_Init+0x2e4>)
 800185a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800185c:	4a5a      	ldr	r2, [pc, #360]	@ (80019c8 <HAL_GPIO_Init+0x2e4>)
 800185e:	f043 0301 	orr.w	r3, r3, #1
 8001862:	6613      	str	r3, [r2, #96]	@ 0x60
 8001864:	4b58      	ldr	r3, [pc, #352]	@ (80019c8 <HAL_GPIO_Init+0x2e4>)
 8001866:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	60bb      	str	r3, [r7, #8]
 800186e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001870:	4a56      	ldr	r2, [pc, #344]	@ (80019cc <HAL_GPIO_Init+0x2e8>)
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	089b      	lsrs	r3, r3, #2
 8001876:	3302      	adds	r3, #2
 8001878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800187c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	f003 0303 	and.w	r3, r3, #3
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	220f      	movs	r2, #15
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	43db      	mvns	r3, r3
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	4013      	ands	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800189a:	d01f      	beq.n	80018dc <HAL_GPIO_Init+0x1f8>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4a4c      	ldr	r2, [pc, #304]	@ (80019d0 <HAL_GPIO_Init+0x2ec>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d019      	beq.n	80018d8 <HAL_GPIO_Init+0x1f4>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4a4b      	ldr	r2, [pc, #300]	@ (80019d4 <HAL_GPIO_Init+0x2f0>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d013      	beq.n	80018d4 <HAL_GPIO_Init+0x1f0>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4a4a      	ldr	r2, [pc, #296]	@ (80019d8 <HAL_GPIO_Init+0x2f4>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d00d      	beq.n	80018d0 <HAL_GPIO_Init+0x1ec>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a49      	ldr	r2, [pc, #292]	@ (80019dc <HAL_GPIO_Init+0x2f8>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d007      	beq.n	80018cc <HAL_GPIO_Init+0x1e8>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4a48      	ldr	r2, [pc, #288]	@ (80019e0 <HAL_GPIO_Init+0x2fc>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d101      	bne.n	80018c8 <HAL_GPIO_Init+0x1e4>
 80018c4:	2305      	movs	r3, #5
 80018c6:	e00a      	b.n	80018de <HAL_GPIO_Init+0x1fa>
 80018c8:	2306      	movs	r3, #6
 80018ca:	e008      	b.n	80018de <HAL_GPIO_Init+0x1fa>
 80018cc:	2304      	movs	r3, #4
 80018ce:	e006      	b.n	80018de <HAL_GPIO_Init+0x1fa>
 80018d0:	2303      	movs	r3, #3
 80018d2:	e004      	b.n	80018de <HAL_GPIO_Init+0x1fa>
 80018d4:	2302      	movs	r3, #2
 80018d6:	e002      	b.n	80018de <HAL_GPIO_Init+0x1fa>
 80018d8:	2301      	movs	r3, #1
 80018da:	e000      	b.n	80018de <HAL_GPIO_Init+0x1fa>
 80018dc:	2300      	movs	r3, #0
 80018de:	697a      	ldr	r2, [r7, #20]
 80018e0:	f002 0203 	and.w	r2, r2, #3
 80018e4:	0092      	lsls	r2, r2, #2
 80018e6:	4093      	lsls	r3, r2
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018ee:	4937      	ldr	r1, [pc, #220]	@ (80019cc <HAL_GPIO_Init+0x2e8>)
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	089b      	lsrs	r3, r3, #2
 80018f4:	3302      	adds	r3, #2
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018fc:	4b39      	ldr	r3, [pc, #228]	@ (80019e4 <HAL_GPIO_Init+0x300>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	43db      	mvns	r3, r3
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	4013      	ands	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d003      	beq.n	8001920 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	4313      	orrs	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001920:	4a30      	ldr	r2, [pc, #192]	@ (80019e4 <HAL_GPIO_Init+0x300>)
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001926:	4b2f      	ldr	r3, [pc, #188]	@ (80019e4 <HAL_GPIO_Init+0x300>)
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	43db      	mvns	r3, r3
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	4013      	ands	r3, r2
 8001934:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	4313      	orrs	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800194a:	4a26      	ldr	r2, [pc, #152]	@ (80019e4 <HAL_GPIO_Init+0x300>)
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001950:	4b24      	ldr	r3, [pc, #144]	@ (80019e4 <HAL_GPIO_Init+0x300>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	43db      	mvns	r3, r3
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	4013      	ands	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d003      	beq.n	8001974 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	4313      	orrs	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001974:	4a1b      	ldr	r2, [pc, #108]	@ (80019e4 <HAL_GPIO_Init+0x300>)
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800197a:	4b1a      	ldr	r3, [pc, #104]	@ (80019e4 <HAL_GPIO_Init+0x300>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	43db      	mvns	r3, r3
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	4013      	ands	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	4313      	orrs	r3, r2
 800199c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800199e:	4a11      	ldr	r2, [pc, #68]	@ (80019e4 <HAL_GPIO_Init+0x300>)
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	3301      	adds	r3, #1
 80019a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	fa22 f303 	lsr.w	r3, r2, r3
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f47f ae9d 	bne.w	80016f4 <HAL_GPIO_Init+0x10>
  }
}
 80019ba:	bf00      	nop
 80019bc:	bf00      	nop
 80019be:	371c      	adds	r7, #28
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	40021000 	.word	0x40021000
 80019cc:	40010000 	.word	0x40010000
 80019d0:	48000400 	.word	0x48000400
 80019d4:	48000800 	.word	0x48000800
 80019d8:	48000c00 	.word	0x48000c00
 80019dc:	48001000 	.word	0x48001000
 80019e0:	48001400 	.word	0x48001400
 80019e4:	40010400 	.word	0x40010400

080019e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	460b      	mov	r3, r1
 80019f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	691a      	ldr	r2, [r3, #16]
 80019f8:	887b      	ldrh	r3, [r7, #2]
 80019fa:	4013      	ands	r3, r2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d002      	beq.n	8001a06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a00:	2301      	movs	r3, #1
 8001a02:	73fb      	strb	r3, [r7, #15]
 8001a04:	e001      	b.n	8001a0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a06:	2300      	movs	r3, #0
 8001a08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3714      	adds	r7, #20
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	460b      	mov	r3, r1
 8001a22:	807b      	strh	r3, [r7, #2]
 8001a24:	4613      	mov	r3, r2
 8001a26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a28:	787b      	ldrb	r3, [r7, #1]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a2e:	887a      	ldrh	r2, [r7, #2]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a34:	e002      	b.n	8001a3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a36:	887a      	ldrh	r2, [r7, #2]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d141      	bne.n	8001ada <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a56:	4b4b      	ldr	r3, [pc, #300]	@ (8001b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001a5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a62:	d131      	bne.n	8001ac8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a64:	4b47      	ldr	r3, [pc, #284]	@ (8001b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a6a:	4a46      	ldr	r2, [pc, #280]	@ (8001b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001a70:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a74:	4b43      	ldr	r3, [pc, #268]	@ (8001b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a7c:	4a41      	ldr	r2, [pc, #260]	@ (8001b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a82:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a84:	4b40      	ldr	r3, [pc, #256]	@ (8001b88 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2232      	movs	r2, #50	@ 0x32
 8001a8a:	fb02 f303 	mul.w	r3, r2, r3
 8001a8e:	4a3f      	ldr	r2, [pc, #252]	@ (8001b8c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a90:	fba2 2303 	umull	r2, r3, r2, r3
 8001a94:	0c9b      	lsrs	r3, r3, #18
 8001a96:	3301      	adds	r3, #1
 8001a98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a9a:	e002      	b.n	8001aa2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001aa2:	4b38      	ldr	r3, [pc, #224]	@ (8001b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001aaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001aae:	d102      	bne.n	8001ab6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1f2      	bne.n	8001a9c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ab6:	4b33      	ldr	r3, [pc, #204]	@ (8001b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001abe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ac2:	d158      	bne.n	8001b76 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e057      	b.n	8001b78 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ac8:	4b2e      	ldr	r3, [pc, #184]	@ (8001b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ace:	4a2d      	ldr	r2, [pc, #180]	@ (8001b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ad0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ad4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001ad8:	e04d      	b.n	8001b76 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ae0:	d141      	bne.n	8001b66 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ae2:	4b28      	ldr	r3, [pc, #160]	@ (8001b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001aea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001aee:	d131      	bne.n	8001b54 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001af0:	4b24      	ldr	r3, [pc, #144]	@ (8001b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001af2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001af6:	4a23      	ldr	r2, [pc, #140]	@ (8001b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001af8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001afc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b00:	4b20      	ldr	r3, [pc, #128]	@ (8001b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b08:	4a1e      	ldr	r2, [pc, #120]	@ (8001b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b0e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b10:	4b1d      	ldr	r3, [pc, #116]	@ (8001b88 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2232      	movs	r2, #50	@ 0x32
 8001b16:	fb02 f303 	mul.w	r3, r2, r3
 8001b1a:	4a1c      	ldr	r2, [pc, #112]	@ (8001b8c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b20:	0c9b      	lsrs	r3, r3, #18
 8001b22:	3301      	adds	r3, #1
 8001b24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b26:	e002      	b.n	8001b2e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b2e:	4b15      	ldr	r3, [pc, #84]	@ (8001b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b3a:	d102      	bne.n	8001b42 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1f2      	bne.n	8001b28 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b42:	4b10      	ldr	r3, [pc, #64]	@ (8001b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b4e:	d112      	bne.n	8001b76 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e011      	b.n	8001b78 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b54:	4b0b      	ldr	r3, [pc, #44]	@ (8001b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b60:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001b64:	e007      	b.n	8001b76 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b66:	4b07      	ldr	r3, [pc, #28]	@ (8001b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b6e:	4a05      	ldr	r2, [pc, #20]	@ (8001b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b70:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b74:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3714      	adds	r7, #20
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	40007000 	.word	0x40007000
 8001b88:	20000000 	.word	0x20000000
 8001b8c:	431bde83 	.word	0x431bde83

08001b90 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001b94:	4b05      	ldr	r3, [pc, #20]	@ (8001bac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	4a04      	ldr	r2, [pc, #16]	@ (8001bac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001b9a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b9e:	6093      	str	r3, [r2, #8]
}
 8001ba0:	bf00      	nop
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	40007000 	.word	0x40007000

08001bb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b088      	sub	sp, #32
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d101      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e2fe      	b.n	80021c0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d075      	beq.n	8001cba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bce:	4b97      	ldr	r3, [pc, #604]	@ (8001e2c <HAL_RCC_OscConfig+0x27c>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f003 030c 	and.w	r3, r3, #12
 8001bd6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bd8:	4b94      	ldr	r3, [pc, #592]	@ (8001e2c <HAL_RCC_OscConfig+0x27c>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	f003 0303 	and.w	r3, r3, #3
 8001be0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	2b0c      	cmp	r3, #12
 8001be6:	d102      	bne.n	8001bee <HAL_RCC_OscConfig+0x3e>
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	2b03      	cmp	r3, #3
 8001bec:	d002      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x44>
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	2b08      	cmp	r3, #8
 8001bf2:	d10b      	bne.n	8001c0c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf4:	4b8d      	ldr	r3, [pc, #564]	@ (8001e2c <HAL_RCC_OscConfig+0x27c>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d05b      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x108>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d157      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e2d9      	b.n	80021c0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c14:	d106      	bne.n	8001c24 <HAL_RCC_OscConfig+0x74>
 8001c16:	4b85      	ldr	r3, [pc, #532]	@ (8001e2c <HAL_RCC_OscConfig+0x27c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a84      	ldr	r2, [pc, #528]	@ (8001e2c <HAL_RCC_OscConfig+0x27c>)
 8001c1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c20:	6013      	str	r3, [r2, #0]
 8001c22:	e01d      	b.n	8001c60 <HAL_RCC_OscConfig+0xb0>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c2c:	d10c      	bne.n	8001c48 <HAL_RCC_OscConfig+0x98>
 8001c2e:	4b7f      	ldr	r3, [pc, #508]	@ (8001e2c <HAL_RCC_OscConfig+0x27c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a7e      	ldr	r2, [pc, #504]	@ (8001e2c <HAL_RCC_OscConfig+0x27c>)
 8001c34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c38:	6013      	str	r3, [r2, #0]
 8001c3a:	4b7c      	ldr	r3, [pc, #496]	@ (8001e2c <HAL_RCC_OscConfig+0x27c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a7b      	ldr	r2, [pc, #492]	@ (8001e2c <HAL_RCC_OscConfig+0x27c>)
 8001c40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c44:	6013      	str	r3, [r2, #0]
 8001c46:	e00b      	b.n	8001c60 <HAL_RCC_OscConfig+0xb0>
 8001c48:	4b78      	ldr	r3, [pc, #480]	@ (8001e2c <HAL_RCC_OscConfig+0x27c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a77      	ldr	r2, [pc, #476]	@ (8001e2c <HAL_RCC_OscConfig+0x27c>)
 8001c4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c52:	6013      	str	r3, [r2, #0]
 8001c54:	4b75      	ldr	r3, [pc, #468]	@ (8001e2c <HAL_RCC_OscConfig+0x27c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a74      	ldr	r2, [pc, #464]	@ (8001e2c <HAL_RCC_OscConfig+0x27c>)
 8001c5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d013      	beq.n	8001c90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c68:	f7ff fb3e 	bl	80012e8 <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c70:	f7ff fb3a 	bl	80012e8 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b64      	cmp	r3, #100	@ 0x64
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e29e      	b.n	80021c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c82:	4b6a      	ldr	r3, [pc, #424]	@ (8001e2c <HAL_RCC_OscConfig+0x27c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d0f0      	beq.n	8001c70 <HAL_RCC_OscConfig+0xc0>
 8001c8e:	e014      	b.n	8001cba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c90:	f7ff fb2a 	bl	80012e8 <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c98:	f7ff fb26 	bl	80012e8 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b64      	cmp	r3, #100	@ 0x64
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e28a      	b.n	80021c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001caa:	4b60      	ldr	r3, [pc, #384]	@ (8001e2c <HAL_RCC_OscConfig+0x27c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1f0      	bne.n	8001c98 <HAL_RCC_OscConfig+0xe8>
 8001cb6:	e000      	b.n	8001cba <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d075      	beq.n	8001db2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cc6:	4b59      	ldr	r3, [pc, #356]	@ (8001e2c <HAL_RCC_OscConfig+0x27c>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f003 030c 	and.w	r3, r3, #12
 8001cce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cd0:	4b56      	ldr	r3, [pc, #344]	@ (8001e2c <HAL_RCC_OscConfig+0x27c>)
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	f003 0303 	and.w	r3, r3, #3
 8001cd8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	2b0c      	cmp	r3, #12
 8001cde:	d102      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x136>
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d002      	beq.n	8001cec <HAL_RCC_OscConfig+0x13c>
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	2b04      	cmp	r3, #4
 8001cea:	d11f      	bne.n	8001d2c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cec:	4b4f      	ldr	r3, [pc, #316]	@ (8001e2c <HAL_RCC_OscConfig+0x27c>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d005      	beq.n	8001d04 <HAL_RCC_OscConfig+0x154>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d101      	bne.n	8001d04 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e25d      	b.n	80021c0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d04:	4b49      	ldr	r3, [pc, #292]	@ (8001e2c <HAL_RCC_OscConfig+0x27c>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	061b      	lsls	r3, r3, #24
 8001d12:	4946      	ldr	r1, [pc, #280]	@ (8001e2c <HAL_RCC_OscConfig+0x27c>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d18:	4b45      	ldr	r3, [pc, #276]	@ (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff fa97 	bl	8001250 <HAL_InitTick>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d043      	beq.n	8001db0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e249      	b.n	80021c0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d023      	beq.n	8001d7c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d34:	4b3d      	ldr	r3, [pc, #244]	@ (8001e2c <HAL_RCC_OscConfig+0x27c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a3c      	ldr	r2, [pc, #240]	@ (8001e2c <HAL_RCC_OscConfig+0x27c>)
 8001d3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d40:	f7ff fad2 	bl	80012e8 <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d48:	f7ff face 	bl	80012e8 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e232      	b.n	80021c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d5a:	4b34      	ldr	r3, [pc, #208]	@ (8001e2c <HAL_RCC_OscConfig+0x27c>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d0f0      	beq.n	8001d48 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d66:	4b31      	ldr	r3, [pc, #196]	@ (8001e2c <HAL_RCC_OscConfig+0x27c>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	061b      	lsls	r3, r3, #24
 8001d74:	492d      	ldr	r1, [pc, #180]	@ (8001e2c <HAL_RCC_OscConfig+0x27c>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	604b      	str	r3, [r1, #4]
 8001d7a:	e01a      	b.n	8001db2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d7c:	4b2b      	ldr	r3, [pc, #172]	@ (8001e2c <HAL_RCC_OscConfig+0x27c>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a2a      	ldr	r2, [pc, #168]	@ (8001e2c <HAL_RCC_OscConfig+0x27c>)
 8001d82:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d88:	f7ff faae 	bl	80012e8 <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d90:	f7ff faaa 	bl	80012e8 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e20e      	b.n	80021c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001da2:	4b22      	ldr	r3, [pc, #136]	@ (8001e2c <HAL_RCC_OscConfig+0x27c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1f0      	bne.n	8001d90 <HAL_RCC_OscConfig+0x1e0>
 8001dae:	e000      	b.n	8001db2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001db0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0308 	and.w	r3, r3, #8
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d041      	beq.n	8001e42 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	695b      	ldr	r3, [r3, #20]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d01c      	beq.n	8001e00 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dc6:	4b19      	ldr	r3, [pc, #100]	@ (8001e2c <HAL_RCC_OscConfig+0x27c>)
 8001dc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dcc:	4a17      	ldr	r2, [pc, #92]	@ (8001e2c <HAL_RCC_OscConfig+0x27c>)
 8001dce:	f043 0301 	orr.w	r3, r3, #1
 8001dd2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd6:	f7ff fa87 	bl	80012e8 <HAL_GetTick>
 8001dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ddc:	e008      	b.n	8001df0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dde:	f7ff fa83 	bl	80012e8 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e1e7      	b.n	80021c0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001df0:	4b0e      	ldr	r3, [pc, #56]	@ (8001e2c <HAL_RCC_OscConfig+0x27c>)
 8001df2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d0ef      	beq.n	8001dde <HAL_RCC_OscConfig+0x22e>
 8001dfe:	e020      	b.n	8001e42 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e00:	4b0a      	ldr	r3, [pc, #40]	@ (8001e2c <HAL_RCC_OscConfig+0x27c>)
 8001e02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e06:	4a09      	ldr	r2, [pc, #36]	@ (8001e2c <HAL_RCC_OscConfig+0x27c>)
 8001e08:	f023 0301 	bic.w	r3, r3, #1
 8001e0c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e10:	f7ff fa6a 	bl	80012e8 <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e16:	e00d      	b.n	8001e34 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e18:	f7ff fa66 	bl	80012e8 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d906      	bls.n	8001e34 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e1ca      	b.n	80021c0 <HAL_RCC_OscConfig+0x610>
 8001e2a:	bf00      	nop
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e34:	4b8c      	ldr	r3, [pc, #560]	@ (8002068 <HAL_RCC_OscConfig+0x4b8>)
 8001e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1ea      	bne.n	8001e18 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0304 	and.w	r3, r3, #4
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f000 80a6 	beq.w	8001f9c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e50:	2300      	movs	r3, #0
 8001e52:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e54:	4b84      	ldr	r3, [pc, #528]	@ (8002068 <HAL_RCC_OscConfig+0x4b8>)
 8001e56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d101      	bne.n	8001e64 <HAL_RCC_OscConfig+0x2b4>
 8001e60:	2301      	movs	r3, #1
 8001e62:	e000      	b.n	8001e66 <HAL_RCC_OscConfig+0x2b6>
 8001e64:	2300      	movs	r3, #0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d00d      	beq.n	8001e86 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e6a:	4b7f      	ldr	r3, [pc, #508]	@ (8002068 <HAL_RCC_OscConfig+0x4b8>)
 8001e6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e6e:	4a7e      	ldr	r2, [pc, #504]	@ (8002068 <HAL_RCC_OscConfig+0x4b8>)
 8001e70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e74:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e76:	4b7c      	ldr	r3, [pc, #496]	@ (8002068 <HAL_RCC_OscConfig+0x4b8>)
 8001e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001e82:	2301      	movs	r3, #1
 8001e84:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e86:	4b79      	ldr	r3, [pc, #484]	@ (800206c <HAL_RCC_OscConfig+0x4bc>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d118      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e92:	4b76      	ldr	r3, [pc, #472]	@ (800206c <HAL_RCC_OscConfig+0x4bc>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a75      	ldr	r2, [pc, #468]	@ (800206c <HAL_RCC_OscConfig+0x4bc>)
 8001e98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e9e:	f7ff fa23 	bl	80012e8 <HAL_GetTick>
 8001ea2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ea4:	e008      	b.n	8001eb8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ea6:	f7ff fa1f 	bl	80012e8 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e183      	b.n	80021c0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eb8:	4b6c      	ldr	r3, [pc, #432]	@ (800206c <HAL_RCC_OscConfig+0x4bc>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d0f0      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d108      	bne.n	8001ede <HAL_RCC_OscConfig+0x32e>
 8001ecc:	4b66      	ldr	r3, [pc, #408]	@ (8002068 <HAL_RCC_OscConfig+0x4b8>)
 8001ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ed2:	4a65      	ldr	r2, [pc, #404]	@ (8002068 <HAL_RCC_OscConfig+0x4b8>)
 8001ed4:	f043 0301 	orr.w	r3, r3, #1
 8001ed8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001edc:	e024      	b.n	8001f28 <HAL_RCC_OscConfig+0x378>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	2b05      	cmp	r3, #5
 8001ee4:	d110      	bne.n	8001f08 <HAL_RCC_OscConfig+0x358>
 8001ee6:	4b60      	ldr	r3, [pc, #384]	@ (8002068 <HAL_RCC_OscConfig+0x4b8>)
 8001ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eec:	4a5e      	ldr	r2, [pc, #376]	@ (8002068 <HAL_RCC_OscConfig+0x4b8>)
 8001eee:	f043 0304 	orr.w	r3, r3, #4
 8001ef2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ef6:	4b5c      	ldr	r3, [pc, #368]	@ (8002068 <HAL_RCC_OscConfig+0x4b8>)
 8001ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001efc:	4a5a      	ldr	r2, [pc, #360]	@ (8002068 <HAL_RCC_OscConfig+0x4b8>)
 8001efe:	f043 0301 	orr.w	r3, r3, #1
 8001f02:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f06:	e00f      	b.n	8001f28 <HAL_RCC_OscConfig+0x378>
 8001f08:	4b57      	ldr	r3, [pc, #348]	@ (8002068 <HAL_RCC_OscConfig+0x4b8>)
 8001f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f0e:	4a56      	ldr	r2, [pc, #344]	@ (8002068 <HAL_RCC_OscConfig+0x4b8>)
 8001f10:	f023 0301 	bic.w	r3, r3, #1
 8001f14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f18:	4b53      	ldr	r3, [pc, #332]	@ (8002068 <HAL_RCC_OscConfig+0x4b8>)
 8001f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f1e:	4a52      	ldr	r2, [pc, #328]	@ (8002068 <HAL_RCC_OscConfig+0x4b8>)
 8001f20:	f023 0304 	bic.w	r3, r3, #4
 8001f24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d016      	beq.n	8001f5e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f30:	f7ff f9da 	bl	80012e8 <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f36:	e00a      	b.n	8001f4e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f38:	f7ff f9d6 	bl	80012e8 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e138      	b.n	80021c0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f4e:	4b46      	ldr	r3, [pc, #280]	@ (8002068 <HAL_RCC_OscConfig+0x4b8>)
 8001f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d0ed      	beq.n	8001f38 <HAL_RCC_OscConfig+0x388>
 8001f5c:	e015      	b.n	8001f8a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f5e:	f7ff f9c3 	bl	80012e8 <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f64:	e00a      	b.n	8001f7c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f66:	f7ff f9bf 	bl	80012e8 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e121      	b.n	80021c0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f7c:	4b3a      	ldr	r3, [pc, #232]	@ (8002068 <HAL_RCC_OscConfig+0x4b8>)
 8001f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1ed      	bne.n	8001f66 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f8a:	7ffb      	ldrb	r3, [r7, #31]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d105      	bne.n	8001f9c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f90:	4b35      	ldr	r3, [pc, #212]	@ (8002068 <HAL_RCC_OscConfig+0x4b8>)
 8001f92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f94:	4a34      	ldr	r2, [pc, #208]	@ (8002068 <HAL_RCC_OscConfig+0x4b8>)
 8001f96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f9a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0320 	and.w	r3, r3, #32
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d03c      	beq.n	8002022 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d01c      	beq.n	8001fea <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001fb0:	4b2d      	ldr	r3, [pc, #180]	@ (8002068 <HAL_RCC_OscConfig+0x4b8>)
 8001fb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001fb6:	4a2c      	ldr	r2, [pc, #176]	@ (8002068 <HAL_RCC_OscConfig+0x4b8>)
 8001fb8:	f043 0301 	orr.w	r3, r3, #1
 8001fbc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc0:	f7ff f992 	bl	80012e8 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fc8:	f7ff f98e 	bl	80012e8 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e0f2      	b.n	80021c0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001fda:	4b23      	ldr	r3, [pc, #140]	@ (8002068 <HAL_RCC_OscConfig+0x4b8>)
 8001fdc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0ef      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x418>
 8001fe8:	e01b      	b.n	8002022 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001fea:	4b1f      	ldr	r3, [pc, #124]	@ (8002068 <HAL_RCC_OscConfig+0x4b8>)
 8001fec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ff0:	4a1d      	ldr	r2, [pc, #116]	@ (8002068 <HAL_RCC_OscConfig+0x4b8>)
 8001ff2:	f023 0301 	bic.w	r3, r3, #1
 8001ff6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ffa:	f7ff f975 	bl	80012e8 <HAL_GetTick>
 8001ffe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002000:	e008      	b.n	8002014 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002002:	f7ff f971 	bl	80012e8 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e0d5      	b.n	80021c0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002014:	4b14      	ldr	r3, [pc, #80]	@ (8002068 <HAL_RCC_OscConfig+0x4b8>)
 8002016:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1ef      	bne.n	8002002 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	2b00      	cmp	r3, #0
 8002028:	f000 80c9 	beq.w	80021be <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800202c:	4b0e      	ldr	r3, [pc, #56]	@ (8002068 <HAL_RCC_OscConfig+0x4b8>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f003 030c 	and.w	r3, r3, #12
 8002034:	2b0c      	cmp	r3, #12
 8002036:	f000 8083 	beq.w	8002140 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	2b02      	cmp	r3, #2
 8002040:	d15e      	bne.n	8002100 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002042:	4b09      	ldr	r3, [pc, #36]	@ (8002068 <HAL_RCC_OscConfig+0x4b8>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a08      	ldr	r2, [pc, #32]	@ (8002068 <HAL_RCC_OscConfig+0x4b8>)
 8002048:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800204c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800204e:	f7ff f94b 	bl	80012e8 <HAL_GetTick>
 8002052:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002054:	e00c      	b.n	8002070 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002056:	f7ff f947 	bl	80012e8 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d905      	bls.n	8002070 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e0ab      	b.n	80021c0 <HAL_RCC_OscConfig+0x610>
 8002068:	40021000 	.word	0x40021000
 800206c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002070:	4b55      	ldr	r3, [pc, #340]	@ (80021c8 <HAL_RCC_OscConfig+0x618>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1ec      	bne.n	8002056 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800207c:	4b52      	ldr	r3, [pc, #328]	@ (80021c8 <HAL_RCC_OscConfig+0x618>)
 800207e:	68da      	ldr	r2, [r3, #12]
 8002080:	4b52      	ldr	r3, [pc, #328]	@ (80021cc <HAL_RCC_OscConfig+0x61c>)
 8002082:	4013      	ands	r3, r2
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	6a11      	ldr	r1, [r2, #32]
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800208c:	3a01      	subs	r2, #1
 800208e:	0112      	lsls	r2, r2, #4
 8002090:	4311      	orrs	r1, r2
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002096:	0212      	lsls	r2, r2, #8
 8002098:	4311      	orrs	r1, r2
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800209e:	0852      	lsrs	r2, r2, #1
 80020a0:	3a01      	subs	r2, #1
 80020a2:	0552      	lsls	r2, r2, #21
 80020a4:	4311      	orrs	r1, r2
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80020aa:	0852      	lsrs	r2, r2, #1
 80020ac:	3a01      	subs	r2, #1
 80020ae:	0652      	lsls	r2, r2, #25
 80020b0:	4311      	orrs	r1, r2
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80020b6:	06d2      	lsls	r2, r2, #27
 80020b8:	430a      	orrs	r2, r1
 80020ba:	4943      	ldr	r1, [pc, #268]	@ (80021c8 <HAL_RCC_OscConfig+0x618>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020c0:	4b41      	ldr	r3, [pc, #260]	@ (80021c8 <HAL_RCC_OscConfig+0x618>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a40      	ldr	r2, [pc, #256]	@ (80021c8 <HAL_RCC_OscConfig+0x618>)
 80020c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020ca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020cc:	4b3e      	ldr	r3, [pc, #248]	@ (80021c8 <HAL_RCC_OscConfig+0x618>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	4a3d      	ldr	r2, [pc, #244]	@ (80021c8 <HAL_RCC_OscConfig+0x618>)
 80020d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d8:	f7ff f906 	bl	80012e8 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e0:	f7ff f902 	bl	80012e8 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e066      	b.n	80021c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020f2:	4b35      	ldr	r3, [pc, #212]	@ (80021c8 <HAL_RCC_OscConfig+0x618>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d0f0      	beq.n	80020e0 <HAL_RCC_OscConfig+0x530>
 80020fe:	e05e      	b.n	80021be <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002100:	4b31      	ldr	r3, [pc, #196]	@ (80021c8 <HAL_RCC_OscConfig+0x618>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a30      	ldr	r2, [pc, #192]	@ (80021c8 <HAL_RCC_OscConfig+0x618>)
 8002106:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800210a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800210c:	f7ff f8ec 	bl	80012e8 <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002114:	f7ff f8e8 	bl	80012e8 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b02      	cmp	r3, #2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e04c      	b.n	80021c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002126:	4b28      	ldr	r3, [pc, #160]	@ (80021c8 <HAL_RCC_OscConfig+0x618>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1f0      	bne.n	8002114 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002132:	4b25      	ldr	r3, [pc, #148]	@ (80021c8 <HAL_RCC_OscConfig+0x618>)
 8002134:	68da      	ldr	r2, [r3, #12]
 8002136:	4924      	ldr	r1, [pc, #144]	@ (80021c8 <HAL_RCC_OscConfig+0x618>)
 8002138:	4b25      	ldr	r3, [pc, #148]	@ (80021d0 <HAL_RCC_OscConfig+0x620>)
 800213a:	4013      	ands	r3, r2
 800213c:	60cb      	str	r3, [r1, #12]
 800213e:	e03e      	b.n	80021be <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	69db      	ldr	r3, [r3, #28]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d101      	bne.n	800214c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e039      	b.n	80021c0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800214c:	4b1e      	ldr	r3, [pc, #120]	@ (80021c8 <HAL_RCC_OscConfig+0x618>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	f003 0203 	and.w	r2, r3, #3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a1b      	ldr	r3, [r3, #32]
 800215c:	429a      	cmp	r2, r3
 800215e:	d12c      	bne.n	80021ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800216a:	3b01      	subs	r3, #1
 800216c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800216e:	429a      	cmp	r2, r3
 8002170:	d123      	bne.n	80021ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800217c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800217e:	429a      	cmp	r2, r3
 8002180:	d11b      	bne.n	80021ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800218c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800218e:	429a      	cmp	r2, r3
 8002190:	d113      	bne.n	80021ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219c:	085b      	lsrs	r3, r3, #1
 800219e:	3b01      	subs	r3, #1
 80021a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d109      	bne.n	80021ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021b0:	085b      	lsrs	r3, r3, #1
 80021b2:	3b01      	subs	r3, #1
 80021b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d001      	beq.n	80021be <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e000      	b.n	80021c0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3720      	adds	r7, #32
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40021000 	.word	0x40021000
 80021cc:	019f800c 	.word	0x019f800c
 80021d0:	feeefffc 	.word	0xfeeefffc

080021d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80021de:	2300      	movs	r3, #0
 80021e0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e11e      	b.n	800242a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021ec:	4b91      	ldr	r3, [pc, #580]	@ (8002434 <HAL_RCC_ClockConfig+0x260>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 030f 	and.w	r3, r3, #15
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d910      	bls.n	800221c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021fa:	4b8e      	ldr	r3, [pc, #568]	@ (8002434 <HAL_RCC_ClockConfig+0x260>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f023 020f 	bic.w	r2, r3, #15
 8002202:	498c      	ldr	r1, [pc, #560]	@ (8002434 <HAL_RCC_ClockConfig+0x260>)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	4313      	orrs	r3, r2
 8002208:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800220a:	4b8a      	ldr	r3, [pc, #552]	@ (8002434 <HAL_RCC_ClockConfig+0x260>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 030f 	and.w	r3, r3, #15
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	429a      	cmp	r2, r3
 8002216:	d001      	beq.n	800221c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e106      	b.n	800242a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	2b00      	cmp	r3, #0
 8002226:	d073      	beq.n	8002310 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	2b03      	cmp	r3, #3
 800222e:	d129      	bne.n	8002284 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002230:	4b81      	ldr	r3, [pc, #516]	@ (8002438 <HAL_RCC_ClockConfig+0x264>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d101      	bne.n	8002240 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e0f4      	b.n	800242a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002240:	f000 f99e 	bl	8002580 <RCC_GetSysClockFreqFromPLLSource>
 8002244:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	4a7c      	ldr	r2, [pc, #496]	@ (800243c <HAL_RCC_ClockConfig+0x268>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d93f      	bls.n	80022ce <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800224e:	4b7a      	ldr	r3, [pc, #488]	@ (8002438 <HAL_RCC_ClockConfig+0x264>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d009      	beq.n	800226e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002262:	2b00      	cmp	r3, #0
 8002264:	d033      	beq.n	80022ce <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800226a:	2b00      	cmp	r3, #0
 800226c:	d12f      	bne.n	80022ce <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800226e:	4b72      	ldr	r3, [pc, #456]	@ (8002438 <HAL_RCC_ClockConfig+0x264>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002276:	4a70      	ldr	r2, [pc, #448]	@ (8002438 <HAL_RCC_ClockConfig+0x264>)
 8002278:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800227c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800227e:	2380      	movs	r3, #128	@ 0x80
 8002280:	617b      	str	r3, [r7, #20]
 8002282:	e024      	b.n	80022ce <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	2b02      	cmp	r3, #2
 800228a:	d107      	bne.n	800229c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800228c:	4b6a      	ldr	r3, [pc, #424]	@ (8002438 <HAL_RCC_ClockConfig+0x264>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d109      	bne.n	80022ac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e0c6      	b.n	800242a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800229c:	4b66      	ldr	r3, [pc, #408]	@ (8002438 <HAL_RCC_ClockConfig+0x264>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d101      	bne.n	80022ac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e0be      	b.n	800242a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80022ac:	f000 f8ce 	bl	800244c <HAL_RCC_GetSysClockFreq>
 80022b0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	4a61      	ldr	r2, [pc, #388]	@ (800243c <HAL_RCC_ClockConfig+0x268>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d909      	bls.n	80022ce <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80022ba:	4b5f      	ldr	r3, [pc, #380]	@ (8002438 <HAL_RCC_ClockConfig+0x264>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80022c2:	4a5d      	ldr	r2, [pc, #372]	@ (8002438 <HAL_RCC_ClockConfig+0x264>)
 80022c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022c8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80022ca:	2380      	movs	r3, #128	@ 0x80
 80022cc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022ce:	4b5a      	ldr	r3, [pc, #360]	@ (8002438 <HAL_RCC_ClockConfig+0x264>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f023 0203 	bic.w	r2, r3, #3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	4957      	ldr	r1, [pc, #348]	@ (8002438 <HAL_RCC_ClockConfig+0x264>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022e0:	f7ff f802 	bl	80012e8 <HAL_GetTick>
 80022e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e6:	e00a      	b.n	80022fe <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022e8:	f7fe fffe 	bl	80012e8 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e095      	b.n	800242a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022fe:	4b4e      	ldr	r3, [pc, #312]	@ (8002438 <HAL_RCC_ClockConfig+0x264>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 020c 	and.w	r2, r3, #12
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	429a      	cmp	r2, r3
 800230e:	d1eb      	bne.n	80022e8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d023      	beq.n	8002364 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0304 	and.w	r3, r3, #4
 8002324:	2b00      	cmp	r3, #0
 8002326:	d005      	beq.n	8002334 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002328:	4b43      	ldr	r3, [pc, #268]	@ (8002438 <HAL_RCC_ClockConfig+0x264>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	4a42      	ldr	r2, [pc, #264]	@ (8002438 <HAL_RCC_ClockConfig+0x264>)
 800232e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002332:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0308 	and.w	r3, r3, #8
 800233c:	2b00      	cmp	r3, #0
 800233e:	d007      	beq.n	8002350 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002340:	4b3d      	ldr	r3, [pc, #244]	@ (8002438 <HAL_RCC_ClockConfig+0x264>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002348:	4a3b      	ldr	r2, [pc, #236]	@ (8002438 <HAL_RCC_ClockConfig+0x264>)
 800234a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800234e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002350:	4b39      	ldr	r3, [pc, #228]	@ (8002438 <HAL_RCC_ClockConfig+0x264>)
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	4936      	ldr	r1, [pc, #216]	@ (8002438 <HAL_RCC_ClockConfig+0x264>)
 800235e:	4313      	orrs	r3, r2
 8002360:	608b      	str	r3, [r1, #8]
 8002362:	e008      	b.n	8002376 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	2b80      	cmp	r3, #128	@ 0x80
 8002368:	d105      	bne.n	8002376 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800236a:	4b33      	ldr	r3, [pc, #204]	@ (8002438 <HAL_RCC_ClockConfig+0x264>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	4a32      	ldr	r2, [pc, #200]	@ (8002438 <HAL_RCC_ClockConfig+0x264>)
 8002370:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002374:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002376:	4b2f      	ldr	r3, [pc, #188]	@ (8002434 <HAL_RCC_ClockConfig+0x260>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	683a      	ldr	r2, [r7, #0]
 8002380:	429a      	cmp	r2, r3
 8002382:	d21d      	bcs.n	80023c0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002384:	4b2b      	ldr	r3, [pc, #172]	@ (8002434 <HAL_RCC_ClockConfig+0x260>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f023 020f 	bic.w	r2, r3, #15
 800238c:	4929      	ldr	r1, [pc, #164]	@ (8002434 <HAL_RCC_ClockConfig+0x260>)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	4313      	orrs	r3, r2
 8002392:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002394:	f7fe ffa8 	bl	80012e8 <HAL_GetTick>
 8002398:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800239a:	e00a      	b.n	80023b2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800239c:	f7fe ffa4 	bl	80012e8 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e03b      	b.n	800242a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b2:	4b20      	ldr	r3, [pc, #128]	@ (8002434 <HAL_RCC_ClockConfig+0x260>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 030f 	and.w	r3, r3, #15
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d1ed      	bne.n	800239c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0304 	and.w	r3, r3, #4
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d008      	beq.n	80023de <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002438 <HAL_RCC_ClockConfig+0x264>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	4917      	ldr	r1, [pc, #92]	@ (8002438 <HAL_RCC_ClockConfig+0x264>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0308 	and.w	r3, r3, #8
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d009      	beq.n	80023fe <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023ea:	4b13      	ldr	r3, [pc, #76]	@ (8002438 <HAL_RCC_ClockConfig+0x264>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	490f      	ldr	r1, [pc, #60]	@ (8002438 <HAL_RCC_ClockConfig+0x264>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023fe:	f000 f825 	bl	800244c <HAL_RCC_GetSysClockFreq>
 8002402:	4602      	mov	r2, r0
 8002404:	4b0c      	ldr	r3, [pc, #48]	@ (8002438 <HAL_RCC_ClockConfig+0x264>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	091b      	lsrs	r3, r3, #4
 800240a:	f003 030f 	and.w	r3, r3, #15
 800240e:	490c      	ldr	r1, [pc, #48]	@ (8002440 <HAL_RCC_ClockConfig+0x26c>)
 8002410:	5ccb      	ldrb	r3, [r1, r3]
 8002412:	f003 031f 	and.w	r3, r3, #31
 8002416:	fa22 f303 	lsr.w	r3, r2, r3
 800241a:	4a0a      	ldr	r2, [pc, #40]	@ (8002444 <HAL_RCC_ClockConfig+0x270>)
 800241c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800241e:	4b0a      	ldr	r3, [pc, #40]	@ (8002448 <HAL_RCC_ClockConfig+0x274>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f7fe ff14 	bl	8001250 <HAL_InitTick>
 8002428:	4603      	mov	r3, r0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3718      	adds	r7, #24
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	40022000 	.word	0x40022000
 8002438:	40021000 	.word	0x40021000
 800243c:	04c4b400 	.word	0x04c4b400
 8002440:	080060d0 	.word	0x080060d0
 8002444:	20000000 	.word	0x20000000
 8002448:	20000004 	.word	0x20000004

0800244c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800244c:	b480      	push	{r7}
 800244e:	b087      	sub	sp, #28
 8002450:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002452:	4b2c      	ldr	r3, [pc, #176]	@ (8002504 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f003 030c 	and.w	r3, r3, #12
 800245a:	2b04      	cmp	r3, #4
 800245c:	d102      	bne.n	8002464 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800245e:	4b2a      	ldr	r3, [pc, #168]	@ (8002508 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002460:	613b      	str	r3, [r7, #16]
 8002462:	e047      	b.n	80024f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002464:	4b27      	ldr	r3, [pc, #156]	@ (8002504 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f003 030c 	and.w	r3, r3, #12
 800246c:	2b08      	cmp	r3, #8
 800246e:	d102      	bne.n	8002476 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002470:	4b26      	ldr	r3, [pc, #152]	@ (800250c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002472:	613b      	str	r3, [r7, #16]
 8002474:	e03e      	b.n	80024f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002476:	4b23      	ldr	r3, [pc, #140]	@ (8002504 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f003 030c 	and.w	r3, r3, #12
 800247e:	2b0c      	cmp	r3, #12
 8002480:	d136      	bne.n	80024f0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002482:	4b20      	ldr	r3, [pc, #128]	@ (8002504 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	f003 0303 	and.w	r3, r3, #3
 800248a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800248c:	4b1d      	ldr	r3, [pc, #116]	@ (8002504 <HAL_RCC_GetSysClockFreq+0xb8>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	091b      	lsrs	r3, r3, #4
 8002492:	f003 030f 	and.w	r3, r3, #15
 8002496:	3301      	adds	r3, #1
 8002498:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2b03      	cmp	r3, #3
 800249e:	d10c      	bne.n	80024ba <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024a0:	4a1a      	ldr	r2, [pc, #104]	@ (800250c <HAL_RCC_GetSysClockFreq+0xc0>)
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a8:	4a16      	ldr	r2, [pc, #88]	@ (8002504 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024aa:	68d2      	ldr	r2, [r2, #12]
 80024ac:	0a12      	lsrs	r2, r2, #8
 80024ae:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80024b2:	fb02 f303 	mul.w	r3, r2, r3
 80024b6:	617b      	str	r3, [r7, #20]
      break;
 80024b8:	e00c      	b.n	80024d4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024ba:	4a13      	ldr	r2, [pc, #76]	@ (8002508 <HAL_RCC_GetSysClockFreq+0xbc>)
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c2:	4a10      	ldr	r2, [pc, #64]	@ (8002504 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024c4:	68d2      	ldr	r2, [r2, #12]
 80024c6:	0a12      	lsrs	r2, r2, #8
 80024c8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80024cc:	fb02 f303 	mul.w	r3, r2, r3
 80024d0:	617b      	str	r3, [r7, #20]
      break;
 80024d2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002504 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	0e5b      	lsrs	r3, r3, #25
 80024da:	f003 0303 	and.w	r3, r3, #3
 80024de:	3301      	adds	r3, #1
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80024e4:	697a      	ldr	r2, [r7, #20]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ec:	613b      	str	r3, [r7, #16]
 80024ee:	e001      	b.n	80024f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80024f0:	2300      	movs	r3, #0
 80024f2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80024f4:	693b      	ldr	r3, [r7, #16]
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	371c      	adds	r7, #28
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	40021000 	.word	0x40021000
 8002508:	00f42400 	.word	0x00f42400
 800250c:	016e3600 	.word	0x016e3600

08002510 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002514:	4b03      	ldr	r3, [pc, #12]	@ (8002524 <HAL_RCC_GetHCLKFreq+0x14>)
 8002516:	681b      	ldr	r3, [r3, #0]
}
 8002518:	4618      	mov	r0, r3
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	20000000 	.word	0x20000000

08002528 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800252c:	f7ff fff0 	bl	8002510 <HAL_RCC_GetHCLKFreq>
 8002530:	4602      	mov	r2, r0
 8002532:	4b06      	ldr	r3, [pc, #24]	@ (800254c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	0a1b      	lsrs	r3, r3, #8
 8002538:	f003 0307 	and.w	r3, r3, #7
 800253c:	4904      	ldr	r1, [pc, #16]	@ (8002550 <HAL_RCC_GetPCLK1Freq+0x28>)
 800253e:	5ccb      	ldrb	r3, [r1, r3]
 8002540:	f003 031f 	and.w	r3, r3, #31
 8002544:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002548:	4618      	mov	r0, r3
 800254a:	bd80      	pop	{r7, pc}
 800254c:	40021000 	.word	0x40021000
 8002550:	080060e0 	.word	0x080060e0

08002554 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002558:	f7ff ffda 	bl	8002510 <HAL_RCC_GetHCLKFreq>
 800255c:	4602      	mov	r2, r0
 800255e:	4b06      	ldr	r3, [pc, #24]	@ (8002578 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	0adb      	lsrs	r3, r3, #11
 8002564:	f003 0307 	and.w	r3, r3, #7
 8002568:	4904      	ldr	r1, [pc, #16]	@ (800257c <HAL_RCC_GetPCLK2Freq+0x28>)
 800256a:	5ccb      	ldrb	r3, [r1, r3]
 800256c:	f003 031f 	and.w	r3, r3, #31
 8002570:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002574:	4618      	mov	r0, r3
 8002576:	bd80      	pop	{r7, pc}
 8002578:	40021000 	.word	0x40021000
 800257c:	080060e0 	.word	0x080060e0

08002580 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002580:	b480      	push	{r7}
 8002582:	b087      	sub	sp, #28
 8002584:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002586:	4b1e      	ldr	r3, [pc, #120]	@ (8002600 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	f003 0303 	and.w	r3, r3, #3
 800258e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002590:	4b1b      	ldr	r3, [pc, #108]	@ (8002600 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	091b      	lsrs	r3, r3, #4
 8002596:	f003 030f 	and.w	r3, r3, #15
 800259a:	3301      	adds	r3, #1
 800259c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	2b03      	cmp	r3, #3
 80025a2:	d10c      	bne.n	80025be <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025a4:	4a17      	ldr	r2, [pc, #92]	@ (8002604 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ac:	4a14      	ldr	r2, [pc, #80]	@ (8002600 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025ae:	68d2      	ldr	r2, [r2, #12]
 80025b0:	0a12      	lsrs	r2, r2, #8
 80025b2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80025b6:	fb02 f303 	mul.w	r3, r2, r3
 80025ba:	617b      	str	r3, [r7, #20]
    break;
 80025bc:	e00c      	b.n	80025d8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025be:	4a12      	ldr	r2, [pc, #72]	@ (8002608 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c6:	4a0e      	ldr	r2, [pc, #56]	@ (8002600 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025c8:	68d2      	ldr	r2, [r2, #12]
 80025ca:	0a12      	lsrs	r2, r2, #8
 80025cc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80025d0:	fb02 f303 	mul.w	r3, r2, r3
 80025d4:	617b      	str	r3, [r7, #20]
    break;
 80025d6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025d8:	4b09      	ldr	r3, [pc, #36]	@ (8002600 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	0e5b      	lsrs	r3, r3, #25
 80025de:	f003 0303 	and.w	r3, r3, #3
 80025e2:	3301      	adds	r3, #1
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80025e8:	697a      	ldr	r2, [r7, #20]
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80025f2:	687b      	ldr	r3, [r7, #4]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	371c      	adds	r7, #28
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	40021000 	.word	0x40021000
 8002604:	016e3600 	.word	0x016e3600
 8002608:	00f42400 	.word	0x00f42400

0800260c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002614:	2300      	movs	r3, #0
 8002616:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002618:	2300      	movs	r3, #0
 800261a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 8098 	beq.w	800275a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800262a:	2300      	movs	r3, #0
 800262c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800262e:	4b43      	ldr	r3, [pc, #268]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002632:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d10d      	bne.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800263a:	4b40      	ldr	r3, [pc, #256]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800263c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800263e:	4a3f      	ldr	r2, [pc, #252]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002640:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002644:	6593      	str	r3, [r2, #88]	@ 0x58
 8002646:	4b3d      	ldr	r3, [pc, #244]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800264a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800264e:	60bb      	str	r3, [r7, #8]
 8002650:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002652:	2301      	movs	r3, #1
 8002654:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002656:	4b3a      	ldr	r3, [pc, #232]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a39      	ldr	r2, [pc, #228]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800265c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002660:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002662:	f7fe fe41 	bl	80012e8 <HAL_GetTick>
 8002666:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002668:	e009      	b.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800266a:	f7fe fe3d 	bl	80012e8 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d902      	bls.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	74fb      	strb	r3, [r7, #19]
        break;
 800267c:	e005      	b.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800267e:	4b30      	ldr	r3, [pc, #192]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002686:	2b00      	cmp	r3, #0
 8002688:	d0ef      	beq.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800268a:	7cfb      	ldrb	r3, [r7, #19]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d159      	bne.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002690:	4b2a      	ldr	r3, [pc, #168]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002692:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002696:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800269a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d01e      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d019      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026ac:	4b23      	ldr	r3, [pc, #140]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026b6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026b8:	4b20      	ldr	r3, [pc, #128]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026be:	4a1f      	ldr	r2, [pc, #124]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026c8:	4b1c      	ldr	r3, [pc, #112]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026ce:	4a1b      	ldr	r2, [pc, #108]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026d8:	4a18      	ldr	r2, [pc, #96]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d016      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ea:	f7fe fdfd 	bl	80012e8 <HAL_GetTick>
 80026ee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026f0:	e00b      	b.n	800270a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026f2:	f7fe fdf9 	bl	80012e8 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002700:	4293      	cmp	r3, r2
 8002702:	d902      	bls.n	800270a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	74fb      	strb	r3, [r7, #19]
            break;
 8002708:	e006      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800270a:	4b0c      	ldr	r3, [pc, #48]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800270c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d0ec      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002718:	7cfb      	ldrb	r3, [r7, #19]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10b      	bne.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800271e:	4b07      	ldr	r3, [pc, #28]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002720:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002724:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800272c:	4903      	ldr	r1, [pc, #12]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800272e:	4313      	orrs	r3, r2
 8002730:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002734:	e008      	b.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002736:	7cfb      	ldrb	r3, [r7, #19]
 8002738:	74bb      	strb	r3, [r7, #18]
 800273a:	e005      	b.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800273c:	40021000 	.word	0x40021000
 8002740:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002744:	7cfb      	ldrb	r3, [r7, #19]
 8002746:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002748:	7c7b      	ldrb	r3, [r7, #17]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d105      	bne.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800274e:	4ba7      	ldr	r3, [pc, #668]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002752:	4aa6      	ldr	r2, [pc, #664]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002754:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002758:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00a      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002766:	4ba1      	ldr	r3, [pc, #644]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800276c:	f023 0203 	bic.w	r2, r3, #3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	499d      	ldr	r1, [pc, #628]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002776:	4313      	orrs	r3, r2
 8002778:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00a      	beq.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002788:	4b98      	ldr	r3, [pc, #608]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800278a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800278e:	f023 020c 	bic.w	r2, r3, #12
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	4995      	ldr	r1, [pc, #596]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002798:	4313      	orrs	r3, r2
 800279a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0304 	and.w	r3, r3, #4
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00a      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027aa:	4b90      	ldr	r3, [pc, #576]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027b0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	498c      	ldr	r1, [pc, #560]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0308 	and.w	r3, r3, #8
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00a      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027cc:	4b87      	ldr	r3, [pc, #540]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027d2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	4984      	ldr	r1, [pc, #528]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0310 	and.w	r3, r3, #16
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00a      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027ee:	4b7f      	ldr	r3, [pc, #508]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	695b      	ldr	r3, [r3, #20]
 80027fc:	497b      	ldr	r1, [pc, #492]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0320 	and.w	r3, r3, #32
 800280c:	2b00      	cmp	r3, #0
 800280e:	d00a      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002810:	4b76      	ldr	r3, [pc, #472]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002812:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002816:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	4973      	ldr	r1, [pc, #460]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002820:	4313      	orrs	r3, r2
 8002822:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00a      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002832:	4b6e      	ldr	r3, [pc, #440]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002834:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002838:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	69db      	ldr	r3, [r3, #28]
 8002840:	496a      	ldr	r1, [pc, #424]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002842:	4313      	orrs	r3, r2
 8002844:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002850:	2b00      	cmp	r3, #0
 8002852:	d00a      	beq.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002854:	4b65      	ldr	r3, [pc, #404]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002856:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800285a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	4962      	ldr	r1, [pc, #392]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002864:	4313      	orrs	r3, r2
 8002866:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00a      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002876:	4b5d      	ldr	r3, [pc, #372]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002878:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800287c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002884:	4959      	ldr	r1, [pc, #356]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002886:	4313      	orrs	r3, r2
 8002888:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00a      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002898:	4b54      	ldr	r3, [pc, #336]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800289a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800289e:	f023 0203 	bic.w	r2, r3, #3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a6:	4951      	ldr	r1, [pc, #324]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00a      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028ba:	4b4c      	ldr	r3, [pc, #304]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028c0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c8:	4948      	ldr	r1, [pc, #288]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d015      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028dc:	4b43      	ldr	r3, [pc, #268]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ea:	4940      	ldr	r1, [pc, #256]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80028fa:	d105      	bne.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028fc:	4b3b      	ldr	r3, [pc, #236]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	4a3a      	ldr	r2, [pc, #232]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002902:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002906:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002910:	2b00      	cmp	r3, #0
 8002912:	d015      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002914:	4b35      	ldr	r3, [pc, #212]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800291a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002922:	4932      	ldr	r1, [pc, #200]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002924:	4313      	orrs	r3, r2
 8002926:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800292e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002932:	d105      	bne.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002934:	4b2d      	ldr	r3, [pc, #180]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	4a2c      	ldr	r2, [pc, #176]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800293a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800293e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d015      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800294c:	4b27      	ldr	r3, [pc, #156]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800294e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002952:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800295a:	4924      	ldr	r1, [pc, #144]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800295c:	4313      	orrs	r3, r2
 800295e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002966:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800296a:	d105      	bne.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800296c:	4b1f      	ldr	r3, [pc, #124]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	4a1e      	ldr	r2, [pc, #120]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002972:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002976:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d015      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002984:	4b19      	ldr	r3, [pc, #100]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002986:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800298a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002992:	4916      	ldr	r1, [pc, #88]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002994:	4313      	orrs	r3, r2
 8002996:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800299e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80029a2:	d105      	bne.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029a4:	4b11      	ldr	r3, [pc, #68]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	4a10      	ldr	r2, [pc, #64]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029ae:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d019      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029bc:	4b0b      	ldr	r3, [pc, #44]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029c2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ca:	4908      	ldr	r1, [pc, #32]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80029da:	d109      	bne.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029dc:	4b03      	ldr	r3, [pc, #12]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	4a02      	ldr	r2, [pc, #8]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029e6:	60d3      	str	r3, [r2, #12]
 80029e8:	e002      	b.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80029ea:	bf00      	nop
 80029ec:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d015      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80029fc:	4b29      	ldr	r3, [pc, #164]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a02:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a0a:	4926      	ldr	r1, [pc, #152]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002a1a:	d105      	bne.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002a1c:	4b21      	ldr	r3, [pc, #132]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	4a20      	ldr	r2, [pc, #128]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a26:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d015      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002a34:	4b1b      	ldr	r3, [pc, #108]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a3a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a42:	4918      	ldr	r1, [pc, #96]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a52:	d105      	bne.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002a54:	4b13      	ldr	r3, [pc, #76]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	4a12      	ldr	r2, [pc, #72]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a5e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d015      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002a6c:	4b0d      	ldr	r3, [pc, #52]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002a72:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a7a:	490a      	ldr	r1, [pc, #40]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a86:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a8a:	d105      	bne.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a8c:	4b05      	ldr	r3, [pc, #20]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	4a04      	ldr	r2, [pc, #16]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a96:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002a98:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3718      	adds	r7, #24
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40021000 	.word	0x40021000

08002aa8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e09d      	b.n	8002bf6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d108      	bne.n	8002ad4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002aca:	d009      	beq.n	8002ae0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	61da      	str	r2, [r3, #28]
 8002ad2:	e005      	b.n	8002ae0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d106      	bne.n	8002b00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f7fe f914 	bl	8000d28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2202      	movs	r2, #2
 8002b04:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b16:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002b20:	d902      	bls.n	8002b28 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002b22:	2300      	movs	r3, #0
 8002b24:	60fb      	str	r3, [r7, #12]
 8002b26:	e002      	b.n	8002b2e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002b28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b2c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002b36:	d007      	beq.n	8002b48 <HAL_SPI_Init+0xa0>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002b40:	d002      	beq.n	8002b48 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	431a      	orrs	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b76:	431a      	orrs	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	69db      	ldr	r3, [r3, #28]
 8002b7c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b80:	431a      	orrs	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b8a:	ea42 0103 	orr.w	r1, r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b92:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	0c1b      	lsrs	r3, r3, #16
 8002ba4:	f003 0204 	and.w	r2, r3, #4
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bac:	f003 0310 	and.w	r3, r3, #16
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bb6:	f003 0308 	and.w	r3, r3, #8
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002bc4:	ea42 0103 	orr.w	r1, r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	69da      	ldr	r2, [r3, #28]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002be4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b088      	sub	sp, #32
 8002c02:	af02      	add	r7, sp, #8
 8002c04:	60f8      	str	r0, [r7, #12]
 8002c06:	60b9      	str	r1, [r7, #8]
 8002c08:	603b      	str	r3, [r7, #0]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d002      	beq.n	8002c24 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8002c1e:	2302      	movs	r3, #2
 8002c20:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c22:	e11a      	b.n	8002e5a <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c2c:	d112      	bne.n	8002c54 <HAL_SPI_Receive+0x56>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10e      	bne.n	8002c54 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2204      	movs	r2, #4
 8002c3a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002c3e:	88fa      	ldrh	r2, [r7, #6]
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	9300      	str	r3, [sp, #0]
 8002c44:	4613      	mov	r3, r2
 8002c46:	68ba      	ldr	r2, [r7, #8]
 8002c48:	68b9      	ldr	r1, [r7, #8]
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f000 f90e 	bl	8002e6c <HAL_SPI_TransmitReceive>
 8002c50:	4603      	mov	r3, r0
 8002c52:	e107      	b.n	8002e64 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d101      	bne.n	8002c62 <HAL_SPI_Receive+0x64>
 8002c5e:	2302      	movs	r3, #2
 8002c60:	e100      	b.n	8002e64 <HAL_SPI_Receive+0x266>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c6a:	f7fe fb3d 	bl	80012e8 <HAL_GetTick>
 8002c6e:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d002      	beq.n	8002c7c <HAL_SPI_Receive+0x7e>
 8002c76:	88fb      	ldrh	r3, [r7, #6]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d102      	bne.n	8002c82 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c80:	e0eb      	b.n	8002e5a <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2204      	movs	r2, #4
 8002c86:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	68ba      	ldr	r2, [r7, #8]
 8002c94:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	88fa      	ldrh	r2, [r7, #6]
 8002c9a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	88fa      	ldrh	r2, [r7, #6]
 8002ca2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002ccc:	d908      	bls.n	8002ce0 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	685a      	ldr	r2, [r3, #4]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002cdc:	605a      	str	r2, [r3, #4]
 8002cde:	e007      	b.n	8002cf0 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	685a      	ldr	r2, [r3, #4]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002cee:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cf8:	d10f      	bne.n	8002d1a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d08:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002d18:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d24:	2b40      	cmp	r3, #64	@ 0x40
 8002d26:	d007      	beq.n	8002d38 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d36:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002d40:	d86f      	bhi.n	8002e22 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002d42:	e034      	b.n	8002dae <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d117      	bne.n	8002d82 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f103 020c 	add.w	r2, r3, #12
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5e:	7812      	ldrb	r2, [r2, #0]
 8002d60:	b2d2      	uxtb	r2, r2
 8002d62:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d68:	1c5a      	adds	r2, r3, #1
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	3b01      	subs	r3, #1
 8002d78:	b29a      	uxth	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002d80:	e015      	b.n	8002dae <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d82:	f7fe fab1 	bl	80012e8 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d803      	bhi.n	8002d9a <HAL_SPI_Receive+0x19c>
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d98:	d102      	bne.n	8002da0 <HAL_SPI_Receive+0x1a2>
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d106      	bne.n	8002dae <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002dac:	e055      	b.n	8002e5a <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1c4      	bne.n	8002d44 <HAL_SPI_Receive+0x146>
 8002dba:	e038      	b.n	8002e2e <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d115      	bne.n	8002df6 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68da      	ldr	r2, [r3, #12]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd4:	b292      	uxth	r2, r2
 8002dd6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ddc:	1c9a      	adds	r2, r3, #2
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	3b01      	subs	r3, #1
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002df4:	e015      	b.n	8002e22 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002df6:	f7fe fa77 	bl	80012e8 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d803      	bhi.n	8002e0e <HAL_SPI_Receive+0x210>
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e0c:	d102      	bne.n	8002e14 <HAL_SPI_Receive+0x216>
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d106      	bne.n	8002e22 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002e20:	e01b      	b.n	8002e5a <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1c6      	bne.n	8002dbc <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	6839      	ldr	r1, [r7, #0]
 8002e32:	68f8      	ldr	r0, [r7, #12]
 8002e34:	f000 fb5a 	bl	80034ec <SPI_EndRxTransaction>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d002      	beq.n	8002e44 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2220      	movs	r2, #32
 8002e42:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d002      	beq.n	8002e52 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	75fb      	strb	r3, [r7, #23]
 8002e50:	e003      	b.n	8002e5a <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002e62:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3718      	adds	r7, #24
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b08a      	sub	sp, #40	@ 0x28
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
 8002e78:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d101      	bne.n	8002e92 <HAL_SPI_TransmitReceive+0x26>
 8002e8e:	2302      	movs	r3, #2
 8002e90:	e20a      	b.n	80032a8 <HAL_SPI_TransmitReceive+0x43c>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e9a:	f7fe fa25 	bl	80012e8 <HAL_GetTick>
 8002e9e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002ea6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002eae:	887b      	ldrh	r3, [r7, #2]
 8002eb0:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002eb2:	887b      	ldrh	r3, [r7, #2]
 8002eb4:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002eb6:	7efb      	ldrb	r3, [r7, #27]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d00e      	beq.n	8002eda <HAL_SPI_TransmitReceive+0x6e>
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ec2:	d106      	bne.n	8002ed2 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d102      	bne.n	8002ed2 <HAL_SPI_TransmitReceive+0x66>
 8002ecc:	7efb      	ldrb	r3, [r7, #27]
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	d003      	beq.n	8002eda <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8002ed8:	e1e0      	b.n	800329c <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d005      	beq.n	8002eec <HAL_SPI_TransmitReceive+0x80>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d002      	beq.n	8002eec <HAL_SPI_TransmitReceive+0x80>
 8002ee6:	887b      	ldrh	r3, [r7, #2]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d103      	bne.n	8002ef4 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8002ef2:	e1d3      	b.n	800329c <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b04      	cmp	r3, #4
 8002efe:	d003      	beq.n	8002f08 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2205      	movs	r2, #5
 8002f04:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	887a      	ldrh	r2, [r7, #2]
 8002f18:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	887a      	ldrh	r2, [r7, #2]
 8002f20:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	68ba      	ldr	r2, [r7, #8]
 8002f28:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	887a      	ldrh	r2, [r7, #2]
 8002f2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	887a      	ldrh	r2, [r7, #2]
 8002f34:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f4a:	d802      	bhi.n	8002f52 <HAL_SPI_TransmitReceive+0xe6>
 8002f4c:	8a3b      	ldrh	r3, [r7, #16]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d908      	bls.n	8002f64 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002f60:	605a      	str	r2, [r3, #4]
 8002f62:	e007      	b.n	8002f74 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	685a      	ldr	r2, [r3, #4]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002f72:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f7e:	2b40      	cmp	r3, #64	@ 0x40
 8002f80:	d007      	beq.n	8002f92 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f90:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f9a:	f240 8081 	bls.w	80030a0 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d002      	beq.n	8002fac <HAL_SPI_TransmitReceive+0x140>
 8002fa6:	8a7b      	ldrh	r3, [r7, #18]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d16d      	bne.n	8003088 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fb0:	881a      	ldrh	r2, [r3, #0]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fbc:	1c9a      	adds	r2, r3, #2
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fd0:	e05a      	b.n	8003088 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d11b      	bne.n	8003018 <HAL_SPI_TransmitReceive+0x1ac>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d016      	beq.n	8003018 <HAL_SPI_TransmitReceive+0x1ac>
 8002fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d113      	bne.n	8003018 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ff4:	881a      	ldrh	r2, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003000:	1c9a      	adds	r2, r3, #2
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800300a:	b29b      	uxth	r3, r3
 800300c:	3b01      	subs	r3, #1
 800300e:	b29a      	uxth	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003014:	2300      	movs	r3, #0
 8003016:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b01      	cmp	r3, #1
 8003024:	d11c      	bne.n	8003060 <HAL_SPI_TransmitReceive+0x1f4>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800302c:	b29b      	uxth	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d016      	beq.n	8003060 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68da      	ldr	r2, [r3, #12]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303c:	b292      	uxth	r2, r2
 800303e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003044:	1c9a      	adds	r2, r3, #2
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003050:	b29b      	uxth	r3, r3
 8003052:	3b01      	subs	r3, #1
 8003054:	b29a      	uxth	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800305c:	2301      	movs	r3, #1
 800305e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003060:	f7fe f942 	bl	80012e8 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800306c:	429a      	cmp	r2, r3
 800306e:	d80b      	bhi.n	8003088 <HAL_SPI_TransmitReceive+0x21c>
 8003070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003076:	d007      	beq.n	8003088 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003086:	e109      	b.n	800329c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800308c:	b29b      	uxth	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d19f      	bne.n	8002fd2 <HAL_SPI_TransmitReceive+0x166>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003098:	b29b      	uxth	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d199      	bne.n	8002fd2 <HAL_SPI_TransmitReceive+0x166>
 800309e:	e0e3      	b.n	8003268 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d003      	beq.n	80030b0 <HAL_SPI_TransmitReceive+0x244>
 80030a8:	8a7b      	ldrh	r3, [r7, #18]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	f040 80cf 	bne.w	800324e <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d912      	bls.n	80030e0 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030be:	881a      	ldrh	r2, [r3, #0]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ca:	1c9a      	adds	r2, r3, #2
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	3b02      	subs	r3, #2
 80030d8:	b29a      	uxth	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80030de:	e0b6      	b.n	800324e <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	330c      	adds	r3, #12
 80030ea:	7812      	ldrb	r2, [r2, #0]
 80030ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030f2:	1c5a      	adds	r2, r3, #1
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	3b01      	subs	r3, #1
 8003100:	b29a      	uxth	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003106:	e0a2      	b.n	800324e <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b02      	cmp	r3, #2
 8003114:	d134      	bne.n	8003180 <HAL_SPI_TransmitReceive+0x314>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800311a:	b29b      	uxth	r3, r3
 800311c:	2b00      	cmp	r3, #0
 800311e:	d02f      	beq.n	8003180 <HAL_SPI_TransmitReceive+0x314>
 8003120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003122:	2b01      	cmp	r3, #1
 8003124:	d12c      	bne.n	8003180 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800312a:	b29b      	uxth	r3, r3
 800312c:	2b01      	cmp	r3, #1
 800312e:	d912      	bls.n	8003156 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003134:	881a      	ldrh	r2, [r3, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003140:	1c9a      	adds	r2, r3, #2
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800314a:	b29b      	uxth	r3, r3
 800314c:	3b02      	subs	r3, #2
 800314e:	b29a      	uxth	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003154:	e012      	b.n	800317c <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	330c      	adds	r3, #12
 8003160:	7812      	ldrb	r2, [r2, #0]
 8003162:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003168:	1c5a      	adds	r2, r3, #1
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003172:	b29b      	uxth	r3, r3
 8003174:	3b01      	subs	r3, #1
 8003176:	b29a      	uxth	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800317c:	2300      	movs	r3, #0
 800317e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b01      	cmp	r3, #1
 800318c:	d148      	bne.n	8003220 <HAL_SPI_TransmitReceive+0x3b4>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003194:	b29b      	uxth	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d042      	beq.n	8003220 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d923      	bls.n	80031ee <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68da      	ldr	r2, [r3, #12]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b0:	b292      	uxth	r2, r2
 80031b2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b8:	1c9a      	adds	r2, r3, #2
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	3b02      	subs	r3, #2
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d81f      	bhi.n	800321c <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80031ea:	605a      	str	r2, [r3, #4]
 80031ec:	e016      	b.n	800321c <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f103 020c 	add.w	r2, r3, #12
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031fa:	7812      	ldrb	r2, [r2, #0]
 80031fc:	b2d2      	uxtb	r2, r2
 80031fe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003204:	1c5a      	adds	r2, r3, #1
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003210:	b29b      	uxth	r3, r3
 8003212:	3b01      	subs	r3, #1
 8003214:	b29a      	uxth	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800321c:	2301      	movs	r3, #1
 800321e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003220:	f7fe f862 	bl	80012e8 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800322c:	429a      	cmp	r2, r3
 800322e:	d803      	bhi.n	8003238 <HAL_SPI_TransmitReceive+0x3cc>
 8003230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003236:	d102      	bne.n	800323e <HAL_SPI_TransmitReceive+0x3d2>
 8003238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800323a:	2b00      	cmp	r3, #0
 800323c:	d107      	bne.n	800324e <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800324c:	e026      	b.n	800329c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003252:	b29b      	uxth	r3, r3
 8003254:	2b00      	cmp	r3, #0
 8003256:	f47f af57 	bne.w	8003108 <HAL_SPI_TransmitReceive+0x29c>
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003260:	b29b      	uxth	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	f47f af50 	bne.w	8003108 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003268:	69fa      	ldr	r2, [r7, #28]
 800326a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f000 f995 	bl	800359c <SPI_EndRxTxTransaction>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d005      	beq.n	8003284 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2220      	movs	r2, #32
 8003282:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003288:	2b00      	cmp	r3, #0
 800328a:	d003      	beq.n	8003294 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003292:	e003      	b.n	800329c <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80032a4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3728      	adds	r7, #40	@ 0x28
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b088      	sub	sp, #32
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	603b      	str	r3, [r7, #0]
 80032bc:	4613      	mov	r3, r2
 80032be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80032c0:	f7fe f812 	bl	80012e8 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032c8:	1a9b      	subs	r3, r3, r2
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	4413      	add	r3, r2
 80032ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80032d0:	f7fe f80a 	bl	80012e8 <HAL_GetTick>
 80032d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80032d6:	4b39      	ldr	r3, [pc, #228]	@ (80033bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	015b      	lsls	r3, r3, #5
 80032dc:	0d1b      	lsrs	r3, r3, #20
 80032de:	69fa      	ldr	r2, [r7, #28]
 80032e0:	fb02 f303 	mul.w	r3, r2, r3
 80032e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032e6:	e054      	b.n	8003392 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ee:	d050      	beq.n	8003392 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032f0:	f7fd fffa 	bl	80012e8 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	69fa      	ldr	r2, [r7, #28]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d902      	bls.n	8003306 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d13d      	bne.n	8003382 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	685a      	ldr	r2, [r3, #4]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003314:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800331e:	d111      	bne.n	8003344 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003328:	d004      	beq.n	8003334 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003332:	d107      	bne.n	8003344 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003342:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003348:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800334c:	d10f      	bne.n	800336e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800336c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e017      	b.n	80033b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d101      	bne.n	800338c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003388:	2300      	movs	r3, #0
 800338a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	3b01      	subs	r3, #1
 8003390:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689a      	ldr	r2, [r3, #8]
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	4013      	ands	r3, r2
 800339c:	68ba      	ldr	r2, [r7, #8]
 800339e:	429a      	cmp	r2, r3
 80033a0:	bf0c      	ite	eq
 80033a2:	2301      	moveq	r3, #1
 80033a4:	2300      	movne	r3, #0
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	461a      	mov	r2, r3
 80033aa:	79fb      	ldrb	r3, [r7, #7]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d19b      	bne.n	80032e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3720      	adds	r7, #32
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	20000000 	.word	0x20000000

080033c0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b08a      	sub	sp, #40	@ 0x28
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
 80033cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80033ce:	2300      	movs	r3, #0
 80033d0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80033d2:	f7fd ff89 	bl	80012e8 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033da:	1a9b      	subs	r3, r3, r2
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	4413      	add	r3, r2
 80033e0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80033e2:	f7fd ff81 	bl	80012e8 <HAL_GetTick>
 80033e6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	330c      	adds	r3, #12
 80033ee:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80033f0:	4b3d      	ldr	r3, [pc, #244]	@ (80034e8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	4613      	mov	r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	4413      	add	r3, r2
 80033fa:	00da      	lsls	r2, r3, #3
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	0d1b      	lsrs	r3, r3, #20
 8003400:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003402:	fb02 f303 	mul.w	r3, r2, r3
 8003406:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003408:	e060      	b.n	80034cc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003410:	d107      	bne.n	8003422 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d104      	bne.n	8003422 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	b2db      	uxtb	r3, r3
 800341e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003420:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003428:	d050      	beq.n	80034cc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800342a:	f7fd ff5d 	bl	80012e8 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	6a3b      	ldr	r3, [r7, #32]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003436:	429a      	cmp	r2, r3
 8003438:	d902      	bls.n	8003440 <SPI_WaitFifoStateUntilTimeout+0x80>
 800343a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800343c:	2b00      	cmp	r3, #0
 800343e:	d13d      	bne.n	80034bc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	685a      	ldr	r2, [r3, #4]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800344e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003458:	d111      	bne.n	800347e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003462:	d004      	beq.n	800346e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800346c:	d107      	bne.n	800347e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800347c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003482:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003486:	d10f      	bne.n	80034a8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003496:	601a      	str	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80034a6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e010      	b.n	80034de <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80034c2:	2300      	movs	r3, #0
 80034c4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	3b01      	subs	r3, #1
 80034ca:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	689a      	ldr	r2, [r3, #8]
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	4013      	ands	r3, r2
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d196      	bne.n	800340a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3728      	adds	r7, #40	@ 0x28
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	20000000 	.word	0x20000000

080034ec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af02      	add	r7, sp, #8
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003500:	d111      	bne.n	8003526 <SPI_EndRxTransaction+0x3a>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800350a:	d004      	beq.n	8003516 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003514:	d107      	bne.n	8003526 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003524:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	9300      	str	r3, [sp, #0]
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	2200      	movs	r2, #0
 800352e:	2180      	movs	r1, #128	@ 0x80
 8003530:	68f8      	ldr	r0, [r7, #12]
 8003532:	f7ff febd 	bl	80032b0 <SPI_WaitFlagStateUntilTimeout>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d007      	beq.n	800354c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003540:	f043 0220 	orr.w	r2, r3, #32
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e023      	b.n	8003594 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003554:	d11d      	bne.n	8003592 <SPI_EndRxTransaction+0xa6>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800355e:	d004      	beq.n	800356a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003568:	d113      	bne.n	8003592 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	2200      	movs	r2, #0
 8003572:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f7ff ff22 	bl	80033c0 <SPI_WaitFifoStateUntilTimeout>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d007      	beq.n	8003592 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003586:	f043 0220 	orr.w	r2, r3, #32
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e000      	b.n	8003594 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af02      	add	r7, sp, #8
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	9300      	str	r3, [sp, #0]
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f7ff ff03 	bl	80033c0 <SPI_WaitFifoStateUntilTimeout>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d007      	beq.n	80035d0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035c4:	f043 0220 	orr.w	r2, r3, #32
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e027      	b.n	8003620 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	9300      	str	r3, [sp, #0]
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	2200      	movs	r2, #0
 80035d8:	2180      	movs	r1, #128	@ 0x80
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f7ff fe68 	bl	80032b0 <SPI_WaitFlagStateUntilTimeout>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d007      	beq.n	80035f6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035ea:	f043 0220 	orr.w	r2, r3, #32
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e014      	b.n	8003620 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	9300      	str	r3, [sp, #0]
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f7ff fedc 	bl	80033c0 <SPI_WaitFifoStateUntilTimeout>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d007      	beq.n	800361e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003612:	f043 0220 	orr.w	r2, r3, #32
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e000      	b.n	8003620 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e049      	b.n	80036ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d106      	bne.n	8003654 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7fd fbcc 	bl	8000dec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2202      	movs	r2, #2
 8003658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	3304      	adds	r3, #4
 8003664:	4619      	mov	r1, r3
 8003666:	4610      	mov	r0, r2
 8003668:	f000 fc78 	bl	8003f5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b082      	sub	sp, #8
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d101      	bne.n	80036e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e049      	b.n	800377c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d106      	bne.n	8003702 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 f841 	bl	8003784 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2202      	movs	r2, #2
 8003706:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	3304      	adds	r3, #4
 8003712:	4619      	mov	r1, r3
 8003714:	4610      	mov	r0, r2
 8003716:	f000 fc21 	bl	8003f5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2201      	movs	r2, #1
 8003726:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d109      	bne.n	80037bc <HAL_TIM_PWM_Start+0x24>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	bf14      	ite	ne
 80037b4:	2301      	movne	r3, #1
 80037b6:	2300      	moveq	r3, #0
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	e03c      	b.n	8003836 <HAL_TIM_PWM_Start+0x9e>
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	2b04      	cmp	r3, #4
 80037c0:	d109      	bne.n	80037d6 <HAL_TIM_PWM_Start+0x3e>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	bf14      	ite	ne
 80037ce:	2301      	movne	r3, #1
 80037d0:	2300      	moveq	r3, #0
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	e02f      	b.n	8003836 <HAL_TIM_PWM_Start+0x9e>
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	2b08      	cmp	r3, #8
 80037da:	d109      	bne.n	80037f0 <HAL_TIM_PWM_Start+0x58>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	bf14      	ite	ne
 80037e8:	2301      	movne	r3, #1
 80037ea:	2300      	moveq	r3, #0
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	e022      	b.n	8003836 <HAL_TIM_PWM_Start+0x9e>
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	2b0c      	cmp	r3, #12
 80037f4:	d109      	bne.n	800380a <HAL_TIM_PWM_Start+0x72>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b01      	cmp	r3, #1
 8003800:	bf14      	ite	ne
 8003802:	2301      	movne	r3, #1
 8003804:	2300      	moveq	r3, #0
 8003806:	b2db      	uxtb	r3, r3
 8003808:	e015      	b.n	8003836 <HAL_TIM_PWM_Start+0x9e>
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	2b10      	cmp	r3, #16
 800380e:	d109      	bne.n	8003824 <HAL_TIM_PWM_Start+0x8c>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b01      	cmp	r3, #1
 800381a:	bf14      	ite	ne
 800381c:	2301      	movne	r3, #1
 800381e:	2300      	moveq	r3, #0
 8003820:	b2db      	uxtb	r3, r3
 8003822:	e008      	b.n	8003836 <HAL_TIM_PWM_Start+0x9e>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800382a:	b2db      	uxtb	r3, r3
 800382c:	2b01      	cmp	r3, #1
 800382e:	bf14      	ite	ne
 8003830:	2301      	movne	r3, #1
 8003832:	2300      	moveq	r3, #0
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e0a6      	b.n	800398c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d104      	bne.n	800384e <HAL_TIM_PWM_Start+0xb6>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2202      	movs	r2, #2
 8003848:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800384c:	e023      	b.n	8003896 <HAL_TIM_PWM_Start+0xfe>
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	2b04      	cmp	r3, #4
 8003852:	d104      	bne.n	800385e <HAL_TIM_PWM_Start+0xc6>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2202      	movs	r2, #2
 8003858:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800385c:	e01b      	b.n	8003896 <HAL_TIM_PWM_Start+0xfe>
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	2b08      	cmp	r3, #8
 8003862:	d104      	bne.n	800386e <HAL_TIM_PWM_Start+0xd6>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2202      	movs	r2, #2
 8003868:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800386c:	e013      	b.n	8003896 <HAL_TIM_PWM_Start+0xfe>
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	2b0c      	cmp	r3, #12
 8003872:	d104      	bne.n	800387e <HAL_TIM_PWM_Start+0xe6>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2202      	movs	r2, #2
 8003878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800387c:	e00b      	b.n	8003896 <HAL_TIM_PWM_Start+0xfe>
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	2b10      	cmp	r3, #16
 8003882:	d104      	bne.n	800388e <HAL_TIM_PWM_Start+0xf6>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2202      	movs	r2, #2
 8003888:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800388c:	e003      	b.n	8003896 <HAL_TIM_PWM_Start+0xfe>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2202      	movs	r2, #2
 8003892:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2201      	movs	r2, #1
 800389c:	6839      	ldr	r1, [r7, #0]
 800389e:	4618      	mov	r0, r3
 80038a0:	f000 ffd6 	bl	8004850 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a3a      	ldr	r2, [pc, #232]	@ (8003994 <HAL_TIM_PWM_Start+0x1fc>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d018      	beq.n	80038e0 <HAL_TIM_PWM_Start+0x148>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a39      	ldr	r2, [pc, #228]	@ (8003998 <HAL_TIM_PWM_Start+0x200>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d013      	beq.n	80038e0 <HAL_TIM_PWM_Start+0x148>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a37      	ldr	r2, [pc, #220]	@ (800399c <HAL_TIM_PWM_Start+0x204>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d00e      	beq.n	80038e0 <HAL_TIM_PWM_Start+0x148>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a36      	ldr	r2, [pc, #216]	@ (80039a0 <HAL_TIM_PWM_Start+0x208>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d009      	beq.n	80038e0 <HAL_TIM_PWM_Start+0x148>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a34      	ldr	r2, [pc, #208]	@ (80039a4 <HAL_TIM_PWM_Start+0x20c>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d004      	beq.n	80038e0 <HAL_TIM_PWM_Start+0x148>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a33      	ldr	r2, [pc, #204]	@ (80039a8 <HAL_TIM_PWM_Start+0x210>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d101      	bne.n	80038e4 <HAL_TIM_PWM_Start+0x14c>
 80038e0:	2301      	movs	r3, #1
 80038e2:	e000      	b.n	80038e6 <HAL_TIM_PWM_Start+0x14e>
 80038e4:	2300      	movs	r3, #0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d007      	beq.n	80038fa <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80038f8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a25      	ldr	r2, [pc, #148]	@ (8003994 <HAL_TIM_PWM_Start+0x1fc>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d022      	beq.n	800394a <HAL_TIM_PWM_Start+0x1b2>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800390c:	d01d      	beq.n	800394a <HAL_TIM_PWM_Start+0x1b2>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a26      	ldr	r2, [pc, #152]	@ (80039ac <HAL_TIM_PWM_Start+0x214>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d018      	beq.n	800394a <HAL_TIM_PWM_Start+0x1b2>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a24      	ldr	r2, [pc, #144]	@ (80039b0 <HAL_TIM_PWM_Start+0x218>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d013      	beq.n	800394a <HAL_TIM_PWM_Start+0x1b2>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a23      	ldr	r2, [pc, #140]	@ (80039b4 <HAL_TIM_PWM_Start+0x21c>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d00e      	beq.n	800394a <HAL_TIM_PWM_Start+0x1b2>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a19      	ldr	r2, [pc, #100]	@ (8003998 <HAL_TIM_PWM_Start+0x200>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d009      	beq.n	800394a <HAL_TIM_PWM_Start+0x1b2>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a18      	ldr	r2, [pc, #96]	@ (800399c <HAL_TIM_PWM_Start+0x204>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d004      	beq.n	800394a <HAL_TIM_PWM_Start+0x1b2>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a18      	ldr	r2, [pc, #96]	@ (80039a8 <HAL_TIM_PWM_Start+0x210>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d115      	bne.n	8003976 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689a      	ldr	r2, [r3, #8]
 8003950:	4b19      	ldr	r3, [pc, #100]	@ (80039b8 <HAL_TIM_PWM_Start+0x220>)
 8003952:	4013      	ands	r3, r2
 8003954:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2b06      	cmp	r3, #6
 800395a:	d015      	beq.n	8003988 <HAL_TIM_PWM_Start+0x1f0>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003962:	d011      	beq.n	8003988 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f042 0201 	orr.w	r2, r2, #1
 8003972:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003974:	e008      	b.n	8003988 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f042 0201 	orr.w	r2, r2, #1
 8003984:	601a      	str	r2, [r3, #0]
 8003986:	e000      	b.n	800398a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003988:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	40012c00 	.word	0x40012c00
 8003998:	40013400 	.word	0x40013400
 800399c:	40014000 	.word	0x40014000
 80039a0:	40014400 	.word	0x40014400
 80039a4:	40014800 	.word	0x40014800
 80039a8:	40015000 	.word	0x40015000
 80039ac:	40000400 	.word	0x40000400
 80039b0:	40000800 	.word	0x40000800
 80039b4:	40000c00 	.word	0x40000c00
 80039b8:	00010007 	.word	0x00010007

080039bc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b086      	sub	sp, #24
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d101      	bne.n	80039d0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e097      	b.n	8003b00 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d106      	bne.n	80039ea <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f7fd fa21 	bl	8000e2c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2202      	movs	r2, #2
 80039ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	6812      	ldr	r2, [r2, #0]
 80039fc:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8003a00:	f023 0307 	bic.w	r3, r3, #7
 8003a04:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	3304      	adds	r3, #4
 8003a0e:	4619      	mov	r1, r3
 8003a10:	4610      	mov	r0, r2
 8003a12:	f000 faa3 	bl	8003f5c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a3e:	f023 0303 	bic.w	r3, r3, #3
 8003a42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	689a      	ldr	r2, [r3, #8]
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	021b      	lsls	r3, r3, #8
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003a5c:	f023 030c 	bic.w	r3, r3, #12
 8003a60:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003a68:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	68da      	ldr	r2, [r3, #12]
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	021b      	lsls	r3, r3, #8
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	011a      	lsls	r2, r3, #4
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	031b      	lsls	r3, r3, #12
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003a9a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003aa2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685a      	ldr	r2, [r3, #4]
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	011b      	lsls	r3, r3, #4
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3718      	adds	r7, #24
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b086      	sub	sp, #24
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b14:	2300      	movs	r3, #0
 8003b16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d101      	bne.n	8003b26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003b22:	2302      	movs	r3, #2
 8003b24:	e0ff      	b.n	8003d26 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2b14      	cmp	r3, #20
 8003b32:	f200 80f0 	bhi.w	8003d16 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003b36:	a201      	add	r2, pc, #4	@ (adr r2, 8003b3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b3c:	08003b91 	.word	0x08003b91
 8003b40:	08003d17 	.word	0x08003d17
 8003b44:	08003d17 	.word	0x08003d17
 8003b48:	08003d17 	.word	0x08003d17
 8003b4c:	08003bd1 	.word	0x08003bd1
 8003b50:	08003d17 	.word	0x08003d17
 8003b54:	08003d17 	.word	0x08003d17
 8003b58:	08003d17 	.word	0x08003d17
 8003b5c:	08003c13 	.word	0x08003c13
 8003b60:	08003d17 	.word	0x08003d17
 8003b64:	08003d17 	.word	0x08003d17
 8003b68:	08003d17 	.word	0x08003d17
 8003b6c:	08003c53 	.word	0x08003c53
 8003b70:	08003d17 	.word	0x08003d17
 8003b74:	08003d17 	.word	0x08003d17
 8003b78:	08003d17 	.word	0x08003d17
 8003b7c:	08003c95 	.word	0x08003c95
 8003b80:	08003d17 	.word	0x08003d17
 8003b84:	08003d17 	.word	0x08003d17
 8003b88:	08003d17 	.word	0x08003d17
 8003b8c:	08003cd5 	.word	0x08003cd5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68b9      	ldr	r1, [r7, #8]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f000 fa94 	bl	80040c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	699a      	ldr	r2, [r3, #24]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f042 0208 	orr.w	r2, r2, #8
 8003baa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	699a      	ldr	r2, [r3, #24]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f022 0204 	bic.w	r2, r2, #4
 8003bba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	6999      	ldr	r1, [r3, #24]
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	691a      	ldr	r2, [r3, #16]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	619a      	str	r2, [r3, #24]
      break;
 8003bce:	e0a5      	b.n	8003d1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68b9      	ldr	r1, [r7, #8]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f000 fb0e 	bl	80041f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	699a      	ldr	r2, [r3, #24]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	699a      	ldr	r2, [r3, #24]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	6999      	ldr	r1, [r3, #24]
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	021a      	lsls	r2, r3, #8
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	619a      	str	r2, [r3, #24]
      break;
 8003c10:	e084      	b.n	8003d1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68b9      	ldr	r1, [r7, #8]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f000 fb81 	bl	8004320 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	69da      	ldr	r2, [r3, #28]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f042 0208 	orr.w	r2, r2, #8
 8003c2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	69da      	ldr	r2, [r3, #28]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 0204 	bic.w	r2, r2, #4
 8003c3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	69d9      	ldr	r1, [r3, #28]
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	691a      	ldr	r2, [r3, #16]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	61da      	str	r2, [r3, #28]
      break;
 8003c50:	e064      	b.n	8003d1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68b9      	ldr	r1, [r7, #8]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f000 fbf3 	bl	8004444 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	69da      	ldr	r2, [r3, #28]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	69da      	ldr	r2, [r3, #28]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	69d9      	ldr	r1, [r3, #28]
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	021a      	lsls	r2, r3, #8
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	61da      	str	r2, [r3, #28]
      break;
 8003c92:	e043      	b.n	8003d1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68b9      	ldr	r1, [r7, #8]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 fc66 	bl	800456c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f042 0208 	orr.w	r2, r2, #8
 8003cae:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f022 0204 	bic.w	r2, r2, #4
 8003cbe:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	691a      	ldr	r2, [r3, #16]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003cd2:	e023      	b.n	8003d1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68b9      	ldr	r1, [r7, #8]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f000 fcb0 	bl	8004640 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cee:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cfe:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	021a      	lsls	r2, r3, #8
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	430a      	orrs	r2, r1
 8003d12:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003d14:	e002      	b.n	8003d1c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	75fb      	strb	r3, [r7, #23]
      break;
 8003d1a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d24:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3718      	adds	r7, #24
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop

08003d30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d101      	bne.n	8003d4c <HAL_TIM_ConfigClockSource+0x1c>
 8003d48:	2302      	movs	r3, #2
 8003d4a:	e0f6      	b.n	8003f3a <HAL_TIM_ConfigClockSource+0x20a>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2202      	movs	r2, #2
 8003d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8003d6a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003d6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68ba      	ldr	r2, [r7, #8]
 8003d7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a6f      	ldr	r2, [pc, #444]	@ (8003f44 <HAL_TIM_ConfigClockSource+0x214>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	f000 80c1 	beq.w	8003f0e <HAL_TIM_ConfigClockSource+0x1de>
 8003d8c:	4a6d      	ldr	r2, [pc, #436]	@ (8003f44 <HAL_TIM_ConfigClockSource+0x214>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	f200 80c6 	bhi.w	8003f20 <HAL_TIM_ConfigClockSource+0x1f0>
 8003d94:	4a6c      	ldr	r2, [pc, #432]	@ (8003f48 <HAL_TIM_ConfigClockSource+0x218>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	f000 80b9 	beq.w	8003f0e <HAL_TIM_ConfigClockSource+0x1de>
 8003d9c:	4a6a      	ldr	r2, [pc, #424]	@ (8003f48 <HAL_TIM_ConfigClockSource+0x218>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	f200 80be 	bhi.w	8003f20 <HAL_TIM_ConfigClockSource+0x1f0>
 8003da4:	4a69      	ldr	r2, [pc, #420]	@ (8003f4c <HAL_TIM_ConfigClockSource+0x21c>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	f000 80b1 	beq.w	8003f0e <HAL_TIM_ConfigClockSource+0x1de>
 8003dac:	4a67      	ldr	r2, [pc, #412]	@ (8003f4c <HAL_TIM_ConfigClockSource+0x21c>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	f200 80b6 	bhi.w	8003f20 <HAL_TIM_ConfigClockSource+0x1f0>
 8003db4:	4a66      	ldr	r2, [pc, #408]	@ (8003f50 <HAL_TIM_ConfigClockSource+0x220>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	f000 80a9 	beq.w	8003f0e <HAL_TIM_ConfigClockSource+0x1de>
 8003dbc:	4a64      	ldr	r2, [pc, #400]	@ (8003f50 <HAL_TIM_ConfigClockSource+0x220>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	f200 80ae 	bhi.w	8003f20 <HAL_TIM_ConfigClockSource+0x1f0>
 8003dc4:	4a63      	ldr	r2, [pc, #396]	@ (8003f54 <HAL_TIM_ConfigClockSource+0x224>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	f000 80a1 	beq.w	8003f0e <HAL_TIM_ConfigClockSource+0x1de>
 8003dcc:	4a61      	ldr	r2, [pc, #388]	@ (8003f54 <HAL_TIM_ConfigClockSource+0x224>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	f200 80a6 	bhi.w	8003f20 <HAL_TIM_ConfigClockSource+0x1f0>
 8003dd4:	4a60      	ldr	r2, [pc, #384]	@ (8003f58 <HAL_TIM_ConfigClockSource+0x228>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	f000 8099 	beq.w	8003f0e <HAL_TIM_ConfigClockSource+0x1de>
 8003ddc:	4a5e      	ldr	r2, [pc, #376]	@ (8003f58 <HAL_TIM_ConfigClockSource+0x228>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	f200 809e 	bhi.w	8003f20 <HAL_TIM_ConfigClockSource+0x1f0>
 8003de4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003de8:	f000 8091 	beq.w	8003f0e <HAL_TIM_ConfigClockSource+0x1de>
 8003dec:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003df0:	f200 8096 	bhi.w	8003f20 <HAL_TIM_ConfigClockSource+0x1f0>
 8003df4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003df8:	f000 8089 	beq.w	8003f0e <HAL_TIM_ConfigClockSource+0x1de>
 8003dfc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e00:	f200 808e 	bhi.w	8003f20 <HAL_TIM_ConfigClockSource+0x1f0>
 8003e04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e08:	d03e      	beq.n	8003e88 <HAL_TIM_ConfigClockSource+0x158>
 8003e0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e0e:	f200 8087 	bhi.w	8003f20 <HAL_TIM_ConfigClockSource+0x1f0>
 8003e12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e16:	f000 8086 	beq.w	8003f26 <HAL_TIM_ConfigClockSource+0x1f6>
 8003e1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e1e:	d87f      	bhi.n	8003f20 <HAL_TIM_ConfigClockSource+0x1f0>
 8003e20:	2b70      	cmp	r3, #112	@ 0x70
 8003e22:	d01a      	beq.n	8003e5a <HAL_TIM_ConfigClockSource+0x12a>
 8003e24:	2b70      	cmp	r3, #112	@ 0x70
 8003e26:	d87b      	bhi.n	8003f20 <HAL_TIM_ConfigClockSource+0x1f0>
 8003e28:	2b60      	cmp	r3, #96	@ 0x60
 8003e2a:	d050      	beq.n	8003ece <HAL_TIM_ConfigClockSource+0x19e>
 8003e2c:	2b60      	cmp	r3, #96	@ 0x60
 8003e2e:	d877      	bhi.n	8003f20 <HAL_TIM_ConfigClockSource+0x1f0>
 8003e30:	2b50      	cmp	r3, #80	@ 0x50
 8003e32:	d03c      	beq.n	8003eae <HAL_TIM_ConfigClockSource+0x17e>
 8003e34:	2b50      	cmp	r3, #80	@ 0x50
 8003e36:	d873      	bhi.n	8003f20 <HAL_TIM_ConfigClockSource+0x1f0>
 8003e38:	2b40      	cmp	r3, #64	@ 0x40
 8003e3a:	d058      	beq.n	8003eee <HAL_TIM_ConfigClockSource+0x1be>
 8003e3c:	2b40      	cmp	r3, #64	@ 0x40
 8003e3e:	d86f      	bhi.n	8003f20 <HAL_TIM_ConfigClockSource+0x1f0>
 8003e40:	2b30      	cmp	r3, #48	@ 0x30
 8003e42:	d064      	beq.n	8003f0e <HAL_TIM_ConfigClockSource+0x1de>
 8003e44:	2b30      	cmp	r3, #48	@ 0x30
 8003e46:	d86b      	bhi.n	8003f20 <HAL_TIM_ConfigClockSource+0x1f0>
 8003e48:	2b20      	cmp	r3, #32
 8003e4a:	d060      	beq.n	8003f0e <HAL_TIM_ConfigClockSource+0x1de>
 8003e4c:	2b20      	cmp	r3, #32
 8003e4e:	d867      	bhi.n	8003f20 <HAL_TIM_ConfigClockSource+0x1f0>
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d05c      	beq.n	8003f0e <HAL_TIM_ConfigClockSource+0x1de>
 8003e54:	2b10      	cmp	r3, #16
 8003e56:	d05a      	beq.n	8003f0e <HAL_TIM_ConfigClockSource+0x1de>
 8003e58:	e062      	b.n	8003f20 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e6a:	f000 fcd1 	bl	8004810 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003e7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68ba      	ldr	r2, [r7, #8]
 8003e84:	609a      	str	r2, [r3, #8]
      break;
 8003e86:	e04f      	b.n	8003f28 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e98:	f000 fcba 	bl	8004810 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689a      	ldr	r2, [r3, #8]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003eaa:	609a      	str	r2, [r3, #8]
      break;
 8003eac:	e03c      	b.n	8003f28 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eba:	461a      	mov	r2, r3
 8003ebc:	f000 fc2c 	bl	8004718 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2150      	movs	r1, #80	@ 0x50
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 fc85 	bl	80047d6 <TIM_ITRx_SetConfig>
      break;
 8003ecc:	e02c      	b.n	8003f28 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003eda:	461a      	mov	r2, r3
 8003edc:	f000 fc4b 	bl	8004776 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2160      	movs	r1, #96	@ 0x60
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f000 fc75 	bl	80047d6 <TIM_ITRx_SetConfig>
      break;
 8003eec:	e01c      	b.n	8003f28 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003efa:	461a      	mov	r2, r3
 8003efc:	f000 fc0c 	bl	8004718 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2140      	movs	r1, #64	@ 0x40
 8003f06:	4618      	mov	r0, r3
 8003f08:	f000 fc65 	bl	80047d6 <TIM_ITRx_SetConfig>
      break;
 8003f0c:	e00c      	b.n	8003f28 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4619      	mov	r1, r3
 8003f18:	4610      	mov	r0, r2
 8003f1a:	f000 fc5c 	bl	80047d6 <TIM_ITRx_SetConfig>
      break;
 8003f1e:	e003      	b.n	8003f28 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	73fb      	strb	r3, [r7, #15]
      break;
 8003f24:	e000      	b.n	8003f28 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8003f26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3710      	adds	r7, #16
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	00100070 	.word	0x00100070
 8003f48:	00100060 	.word	0x00100060
 8003f4c:	00100050 	.word	0x00100050
 8003f50:	00100040 	.word	0x00100040
 8003f54:	00100030 	.word	0x00100030
 8003f58:	00100020 	.word	0x00100020

08003f5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a4c      	ldr	r2, [pc, #304]	@ (80040a0 <TIM_Base_SetConfig+0x144>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d017      	beq.n	8003fa4 <TIM_Base_SetConfig+0x48>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f7a:	d013      	beq.n	8003fa4 <TIM_Base_SetConfig+0x48>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a49      	ldr	r2, [pc, #292]	@ (80040a4 <TIM_Base_SetConfig+0x148>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d00f      	beq.n	8003fa4 <TIM_Base_SetConfig+0x48>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a48      	ldr	r2, [pc, #288]	@ (80040a8 <TIM_Base_SetConfig+0x14c>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d00b      	beq.n	8003fa4 <TIM_Base_SetConfig+0x48>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a47      	ldr	r2, [pc, #284]	@ (80040ac <TIM_Base_SetConfig+0x150>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d007      	beq.n	8003fa4 <TIM_Base_SetConfig+0x48>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a46      	ldr	r2, [pc, #280]	@ (80040b0 <TIM_Base_SetConfig+0x154>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d003      	beq.n	8003fa4 <TIM_Base_SetConfig+0x48>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a45      	ldr	r2, [pc, #276]	@ (80040b4 <TIM_Base_SetConfig+0x158>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d108      	bne.n	8003fb6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003faa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a39      	ldr	r2, [pc, #228]	@ (80040a0 <TIM_Base_SetConfig+0x144>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d023      	beq.n	8004006 <TIM_Base_SetConfig+0xaa>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fc4:	d01f      	beq.n	8004006 <TIM_Base_SetConfig+0xaa>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a36      	ldr	r2, [pc, #216]	@ (80040a4 <TIM_Base_SetConfig+0x148>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d01b      	beq.n	8004006 <TIM_Base_SetConfig+0xaa>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a35      	ldr	r2, [pc, #212]	@ (80040a8 <TIM_Base_SetConfig+0x14c>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d017      	beq.n	8004006 <TIM_Base_SetConfig+0xaa>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a34      	ldr	r2, [pc, #208]	@ (80040ac <TIM_Base_SetConfig+0x150>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d013      	beq.n	8004006 <TIM_Base_SetConfig+0xaa>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a33      	ldr	r2, [pc, #204]	@ (80040b0 <TIM_Base_SetConfig+0x154>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d00f      	beq.n	8004006 <TIM_Base_SetConfig+0xaa>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a33      	ldr	r2, [pc, #204]	@ (80040b8 <TIM_Base_SetConfig+0x15c>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d00b      	beq.n	8004006 <TIM_Base_SetConfig+0xaa>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a32      	ldr	r2, [pc, #200]	@ (80040bc <TIM_Base_SetConfig+0x160>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d007      	beq.n	8004006 <TIM_Base_SetConfig+0xaa>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a31      	ldr	r2, [pc, #196]	@ (80040c0 <TIM_Base_SetConfig+0x164>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d003      	beq.n	8004006 <TIM_Base_SetConfig+0xaa>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a2c      	ldr	r2, [pc, #176]	@ (80040b4 <TIM_Base_SetConfig+0x158>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d108      	bne.n	8004018 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800400c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	4313      	orrs	r3, r2
 8004016:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	4313      	orrs	r3, r2
 8004024:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	689a      	ldr	r2, [r3, #8]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4a18      	ldr	r2, [pc, #96]	@ (80040a0 <TIM_Base_SetConfig+0x144>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d013      	beq.n	800406c <TIM_Base_SetConfig+0x110>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a1a      	ldr	r2, [pc, #104]	@ (80040b0 <TIM_Base_SetConfig+0x154>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d00f      	beq.n	800406c <TIM_Base_SetConfig+0x110>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a1a      	ldr	r2, [pc, #104]	@ (80040b8 <TIM_Base_SetConfig+0x15c>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d00b      	beq.n	800406c <TIM_Base_SetConfig+0x110>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a19      	ldr	r2, [pc, #100]	@ (80040bc <TIM_Base_SetConfig+0x160>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d007      	beq.n	800406c <TIM_Base_SetConfig+0x110>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a18      	ldr	r2, [pc, #96]	@ (80040c0 <TIM_Base_SetConfig+0x164>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d003      	beq.n	800406c <TIM_Base_SetConfig+0x110>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a13      	ldr	r2, [pc, #76]	@ (80040b4 <TIM_Base_SetConfig+0x158>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d103      	bne.n	8004074 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	691a      	ldr	r2, [r3, #16]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b01      	cmp	r3, #1
 8004084:	d105      	bne.n	8004092 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	f023 0201 	bic.w	r2, r3, #1
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	611a      	str	r2, [r3, #16]
  }
}
 8004092:	bf00      	nop
 8004094:	3714      	adds	r7, #20
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	40012c00 	.word	0x40012c00
 80040a4:	40000400 	.word	0x40000400
 80040a8:	40000800 	.word	0x40000800
 80040ac:	40000c00 	.word	0x40000c00
 80040b0:	40013400 	.word	0x40013400
 80040b4:	40015000 	.word	0x40015000
 80040b8:	40014000 	.word	0x40014000
 80040bc:	40014400 	.word	0x40014400
 80040c0:	40014800 	.word	0x40014800

080040c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b087      	sub	sp, #28
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	f023 0201 	bic.w	r2, r3, #1
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f023 0303 	bic.w	r3, r3, #3
 80040fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	4313      	orrs	r3, r2
 8004108:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	f023 0302 	bic.w	r3, r3, #2
 8004110:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	4313      	orrs	r3, r2
 800411a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a30      	ldr	r2, [pc, #192]	@ (80041e0 <TIM_OC1_SetConfig+0x11c>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d013      	beq.n	800414c <TIM_OC1_SetConfig+0x88>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a2f      	ldr	r2, [pc, #188]	@ (80041e4 <TIM_OC1_SetConfig+0x120>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d00f      	beq.n	800414c <TIM_OC1_SetConfig+0x88>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a2e      	ldr	r2, [pc, #184]	@ (80041e8 <TIM_OC1_SetConfig+0x124>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d00b      	beq.n	800414c <TIM_OC1_SetConfig+0x88>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a2d      	ldr	r2, [pc, #180]	@ (80041ec <TIM_OC1_SetConfig+0x128>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d007      	beq.n	800414c <TIM_OC1_SetConfig+0x88>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a2c      	ldr	r2, [pc, #176]	@ (80041f0 <TIM_OC1_SetConfig+0x12c>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d003      	beq.n	800414c <TIM_OC1_SetConfig+0x88>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a2b      	ldr	r2, [pc, #172]	@ (80041f4 <TIM_OC1_SetConfig+0x130>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d10c      	bne.n	8004166 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	f023 0308 	bic.w	r3, r3, #8
 8004152:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	697a      	ldr	r2, [r7, #20]
 800415a:	4313      	orrs	r3, r2
 800415c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	f023 0304 	bic.w	r3, r3, #4
 8004164:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a1d      	ldr	r2, [pc, #116]	@ (80041e0 <TIM_OC1_SetConfig+0x11c>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d013      	beq.n	8004196 <TIM_OC1_SetConfig+0xd2>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a1c      	ldr	r2, [pc, #112]	@ (80041e4 <TIM_OC1_SetConfig+0x120>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d00f      	beq.n	8004196 <TIM_OC1_SetConfig+0xd2>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a1b      	ldr	r2, [pc, #108]	@ (80041e8 <TIM_OC1_SetConfig+0x124>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d00b      	beq.n	8004196 <TIM_OC1_SetConfig+0xd2>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a1a      	ldr	r2, [pc, #104]	@ (80041ec <TIM_OC1_SetConfig+0x128>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d007      	beq.n	8004196 <TIM_OC1_SetConfig+0xd2>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a19      	ldr	r2, [pc, #100]	@ (80041f0 <TIM_OC1_SetConfig+0x12c>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d003      	beq.n	8004196 <TIM_OC1_SetConfig+0xd2>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a18      	ldr	r2, [pc, #96]	@ (80041f4 <TIM_OC1_SetConfig+0x130>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d111      	bne.n	80041ba <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800419c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80041a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	621a      	str	r2, [r3, #32]
}
 80041d4:	bf00      	nop
 80041d6:	371c      	adds	r7, #28
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr
 80041e0:	40012c00 	.word	0x40012c00
 80041e4:	40013400 	.word	0x40013400
 80041e8:	40014000 	.word	0x40014000
 80041ec:	40014400 	.word	0x40014400
 80041f0:	40014800 	.word	0x40014800
 80041f4:	40015000 	.word	0x40015000

080041f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b087      	sub	sp, #28
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a1b      	ldr	r3, [r3, #32]
 800420c:	f023 0210 	bic.w	r2, r3, #16
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004226:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800422a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004232:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	021b      	lsls	r3, r3, #8
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	4313      	orrs	r3, r2
 800423e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	f023 0320 	bic.w	r3, r3, #32
 8004246:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	011b      	lsls	r3, r3, #4
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	4313      	orrs	r3, r2
 8004252:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a2c      	ldr	r2, [pc, #176]	@ (8004308 <TIM_OC2_SetConfig+0x110>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d007      	beq.n	800426c <TIM_OC2_SetConfig+0x74>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a2b      	ldr	r2, [pc, #172]	@ (800430c <TIM_OC2_SetConfig+0x114>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d003      	beq.n	800426c <TIM_OC2_SetConfig+0x74>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a2a      	ldr	r2, [pc, #168]	@ (8004310 <TIM_OC2_SetConfig+0x118>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d10d      	bne.n	8004288 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004272:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	011b      	lsls	r3, r3, #4
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	4313      	orrs	r3, r2
 800427e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004286:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a1f      	ldr	r2, [pc, #124]	@ (8004308 <TIM_OC2_SetConfig+0x110>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d013      	beq.n	80042b8 <TIM_OC2_SetConfig+0xc0>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a1e      	ldr	r2, [pc, #120]	@ (800430c <TIM_OC2_SetConfig+0x114>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d00f      	beq.n	80042b8 <TIM_OC2_SetConfig+0xc0>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a1e      	ldr	r2, [pc, #120]	@ (8004314 <TIM_OC2_SetConfig+0x11c>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d00b      	beq.n	80042b8 <TIM_OC2_SetConfig+0xc0>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a1d      	ldr	r2, [pc, #116]	@ (8004318 <TIM_OC2_SetConfig+0x120>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d007      	beq.n	80042b8 <TIM_OC2_SetConfig+0xc0>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a1c      	ldr	r2, [pc, #112]	@ (800431c <TIM_OC2_SetConfig+0x124>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d003      	beq.n	80042b8 <TIM_OC2_SetConfig+0xc0>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a17      	ldr	r2, [pc, #92]	@ (8004310 <TIM_OC2_SetConfig+0x118>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d113      	bne.n	80042e0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80042be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80042c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	695b      	ldr	r3, [r3, #20]
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	693a      	ldr	r2, [r7, #16]
 80042dc:	4313      	orrs	r3, r2
 80042de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	685a      	ldr	r2, [r3, #4]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	621a      	str	r2, [r3, #32]
}
 80042fa:	bf00      	nop
 80042fc:	371c      	adds	r7, #28
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	40012c00 	.word	0x40012c00
 800430c:	40013400 	.word	0x40013400
 8004310:	40015000 	.word	0x40015000
 8004314:	40014000 	.word	0x40014000
 8004318:	40014400 	.word	0x40014400
 800431c:	40014800 	.word	0x40014800

08004320 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004320:	b480      	push	{r7}
 8004322:	b087      	sub	sp, #28
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a1b      	ldr	r3, [r3, #32]
 8004334:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	69db      	ldr	r3, [r3, #28]
 8004346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800434e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f023 0303 	bic.w	r3, r3, #3
 800435a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	4313      	orrs	r3, r2
 8004364:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800436c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	021b      	lsls	r3, r3, #8
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	4313      	orrs	r3, r2
 8004378:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a2b      	ldr	r2, [pc, #172]	@ (800442c <TIM_OC3_SetConfig+0x10c>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d007      	beq.n	8004392 <TIM_OC3_SetConfig+0x72>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a2a      	ldr	r2, [pc, #168]	@ (8004430 <TIM_OC3_SetConfig+0x110>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d003      	beq.n	8004392 <TIM_OC3_SetConfig+0x72>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a29      	ldr	r2, [pc, #164]	@ (8004434 <TIM_OC3_SetConfig+0x114>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d10d      	bne.n	80043ae <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004398:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	021b      	lsls	r3, r3, #8
 80043a0:	697a      	ldr	r2, [r7, #20]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80043ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a1e      	ldr	r2, [pc, #120]	@ (800442c <TIM_OC3_SetConfig+0x10c>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d013      	beq.n	80043de <TIM_OC3_SetConfig+0xbe>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a1d      	ldr	r2, [pc, #116]	@ (8004430 <TIM_OC3_SetConfig+0x110>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d00f      	beq.n	80043de <TIM_OC3_SetConfig+0xbe>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a1d      	ldr	r2, [pc, #116]	@ (8004438 <TIM_OC3_SetConfig+0x118>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d00b      	beq.n	80043de <TIM_OC3_SetConfig+0xbe>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a1c      	ldr	r2, [pc, #112]	@ (800443c <TIM_OC3_SetConfig+0x11c>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d007      	beq.n	80043de <TIM_OC3_SetConfig+0xbe>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a1b      	ldr	r2, [pc, #108]	@ (8004440 <TIM_OC3_SetConfig+0x120>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d003      	beq.n	80043de <TIM_OC3_SetConfig+0xbe>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a16      	ldr	r2, [pc, #88]	@ (8004434 <TIM_OC3_SetConfig+0x114>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d113      	bne.n	8004406 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80043e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80043ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	011b      	lsls	r3, r3, #4
 80043f4:	693a      	ldr	r2, [r7, #16]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	011b      	lsls	r3, r3, #4
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	4313      	orrs	r3, r2
 8004404:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	685a      	ldr	r2, [r3, #4]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	697a      	ldr	r2, [r7, #20]
 800441e:	621a      	str	r2, [r3, #32]
}
 8004420:	bf00      	nop
 8004422:	371c      	adds	r7, #28
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr
 800442c:	40012c00 	.word	0x40012c00
 8004430:	40013400 	.word	0x40013400
 8004434:	40015000 	.word	0x40015000
 8004438:	40014000 	.word	0x40014000
 800443c:	40014400 	.word	0x40014400
 8004440:	40014800 	.word	0x40014800

08004444 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004444:	b480      	push	{r7}
 8004446:	b087      	sub	sp, #28
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a1b      	ldr	r3, [r3, #32]
 8004458:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	69db      	ldr	r3, [r3, #28]
 800446a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004472:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004476:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800447e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	021b      	lsls	r3, r3, #8
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	4313      	orrs	r3, r2
 800448a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004492:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	031b      	lsls	r3, r3, #12
 800449a:	697a      	ldr	r2, [r7, #20]
 800449c:	4313      	orrs	r3, r2
 800449e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a2c      	ldr	r2, [pc, #176]	@ (8004554 <TIM_OC4_SetConfig+0x110>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d007      	beq.n	80044b8 <TIM_OC4_SetConfig+0x74>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a2b      	ldr	r2, [pc, #172]	@ (8004558 <TIM_OC4_SetConfig+0x114>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d003      	beq.n	80044b8 <TIM_OC4_SetConfig+0x74>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a2a      	ldr	r2, [pc, #168]	@ (800455c <TIM_OC4_SetConfig+0x118>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d10d      	bne.n	80044d4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80044be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	031b      	lsls	r3, r3, #12
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80044d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a1f      	ldr	r2, [pc, #124]	@ (8004554 <TIM_OC4_SetConfig+0x110>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d013      	beq.n	8004504 <TIM_OC4_SetConfig+0xc0>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a1e      	ldr	r2, [pc, #120]	@ (8004558 <TIM_OC4_SetConfig+0x114>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d00f      	beq.n	8004504 <TIM_OC4_SetConfig+0xc0>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a1e      	ldr	r2, [pc, #120]	@ (8004560 <TIM_OC4_SetConfig+0x11c>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d00b      	beq.n	8004504 <TIM_OC4_SetConfig+0xc0>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a1d      	ldr	r2, [pc, #116]	@ (8004564 <TIM_OC4_SetConfig+0x120>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d007      	beq.n	8004504 <TIM_OC4_SetConfig+0xc0>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a1c      	ldr	r2, [pc, #112]	@ (8004568 <TIM_OC4_SetConfig+0x124>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d003      	beq.n	8004504 <TIM_OC4_SetConfig+0xc0>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a17      	ldr	r2, [pc, #92]	@ (800455c <TIM_OC4_SetConfig+0x118>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d113      	bne.n	800452c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800450a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004512:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	695b      	ldr	r3, [r3, #20]
 8004518:	019b      	lsls	r3, r3, #6
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	4313      	orrs	r3, r2
 800451e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	019b      	lsls	r3, r3, #6
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	4313      	orrs	r3, r2
 800452a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	685a      	ldr	r2, [r3, #4]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	621a      	str	r2, [r3, #32]
}
 8004546:	bf00      	nop
 8004548:	371c      	adds	r7, #28
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	40012c00 	.word	0x40012c00
 8004558:	40013400 	.word	0x40013400
 800455c:	40015000 	.word	0x40015000
 8004560:	40014000 	.word	0x40014000
 8004564:	40014400 	.word	0x40014400
 8004568:	40014800 	.word	0x40014800

0800456c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800456c:	b480      	push	{r7}
 800456e:	b087      	sub	sp, #28
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a1b      	ldr	r3, [r3, #32]
 8004580:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800459a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800459e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80045b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	041b      	lsls	r3, r3, #16
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a19      	ldr	r2, [pc, #100]	@ (8004628 <TIM_OC5_SetConfig+0xbc>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d013      	beq.n	80045ee <TIM_OC5_SetConfig+0x82>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a18      	ldr	r2, [pc, #96]	@ (800462c <TIM_OC5_SetConfig+0xc0>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d00f      	beq.n	80045ee <TIM_OC5_SetConfig+0x82>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a17      	ldr	r2, [pc, #92]	@ (8004630 <TIM_OC5_SetConfig+0xc4>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d00b      	beq.n	80045ee <TIM_OC5_SetConfig+0x82>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a16      	ldr	r2, [pc, #88]	@ (8004634 <TIM_OC5_SetConfig+0xc8>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d007      	beq.n	80045ee <TIM_OC5_SetConfig+0x82>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a15      	ldr	r2, [pc, #84]	@ (8004638 <TIM_OC5_SetConfig+0xcc>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d003      	beq.n	80045ee <TIM_OC5_SetConfig+0x82>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a14      	ldr	r2, [pc, #80]	@ (800463c <TIM_OC5_SetConfig+0xd0>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d109      	bne.n	8004602 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045f4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	021b      	lsls	r3, r3, #8
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	4313      	orrs	r3, r2
 8004600:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	697a      	ldr	r2, [r7, #20]
 8004606:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	685a      	ldr	r2, [r3, #4]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	621a      	str	r2, [r3, #32]
}
 800461c:	bf00      	nop
 800461e:	371c      	adds	r7, #28
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr
 8004628:	40012c00 	.word	0x40012c00
 800462c:	40013400 	.word	0x40013400
 8004630:	40014000 	.word	0x40014000
 8004634:	40014400 	.word	0x40014400
 8004638:	40014800 	.word	0x40014800
 800463c:	40015000 	.word	0x40015000

08004640 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004640:	b480      	push	{r7}
 8004642:	b087      	sub	sp, #28
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a1b      	ldr	r3, [r3, #32]
 800464e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a1b      	ldr	r3, [r3, #32]
 8004654:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800466e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004672:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	021b      	lsls	r3, r3, #8
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	4313      	orrs	r3, r2
 800467e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004686:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	051b      	lsls	r3, r3, #20
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	4313      	orrs	r3, r2
 8004692:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a1a      	ldr	r2, [pc, #104]	@ (8004700 <TIM_OC6_SetConfig+0xc0>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d013      	beq.n	80046c4 <TIM_OC6_SetConfig+0x84>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a19      	ldr	r2, [pc, #100]	@ (8004704 <TIM_OC6_SetConfig+0xc4>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d00f      	beq.n	80046c4 <TIM_OC6_SetConfig+0x84>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a18      	ldr	r2, [pc, #96]	@ (8004708 <TIM_OC6_SetConfig+0xc8>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d00b      	beq.n	80046c4 <TIM_OC6_SetConfig+0x84>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a17      	ldr	r2, [pc, #92]	@ (800470c <TIM_OC6_SetConfig+0xcc>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d007      	beq.n	80046c4 <TIM_OC6_SetConfig+0x84>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a16      	ldr	r2, [pc, #88]	@ (8004710 <TIM_OC6_SetConfig+0xd0>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d003      	beq.n	80046c4 <TIM_OC6_SetConfig+0x84>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a15      	ldr	r2, [pc, #84]	@ (8004714 <TIM_OC6_SetConfig+0xd4>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d109      	bne.n	80046d8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	695b      	ldr	r3, [r3, #20]
 80046d0:	029b      	lsls	r3, r3, #10
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	697a      	ldr	r2, [r7, #20]
 80046dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	685a      	ldr	r2, [r3, #4]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	693a      	ldr	r2, [r7, #16]
 80046f0:	621a      	str	r2, [r3, #32]
}
 80046f2:	bf00      	nop
 80046f4:	371c      	adds	r7, #28
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	40012c00 	.word	0x40012c00
 8004704:	40013400 	.word	0x40013400
 8004708:	40014000 	.word	0x40014000
 800470c:	40014400 	.word	0x40014400
 8004710:	40014800 	.word	0x40014800
 8004714:	40015000 	.word	0x40015000

08004718 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004718:	b480      	push	{r7}
 800471a:	b087      	sub	sp, #28
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6a1b      	ldr	r3, [r3, #32]
 8004728:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6a1b      	ldr	r3, [r3, #32]
 800472e:	f023 0201 	bic.w	r2, r3, #1
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004742:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	011b      	lsls	r3, r3, #4
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	4313      	orrs	r3, r2
 800474c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	f023 030a 	bic.w	r3, r3, #10
 8004754:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004756:	697a      	ldr	r2, [r7, #20]
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	4313      	orrs	r3, r2
 800475c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	621a      	str	r2, [r3, #32]
}
 800476a:	bf00      	nop
 800476c:	371c      	adds	r7, #28
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr

08004776 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004776:	b480      	push	{r7}
 8004778:	b087      	sub	sp, #28
 800477a:	af00      	add	r7, sp, #0
 800477c:	60f8      	str	r0, [r7, #12]
 800477e:	60b9      	str	r1, [r7, #8]
 8004780:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6a1b      	ldr	r3, [r3, #32]
 800478c:	f023 0210 	bic.w	r2, r3, #16
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	699b      	ldr	r3, [r3, #24]
 8004798:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80047a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	031b      	lsls	r3, r3, #12
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80047b2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	011b      	lsls	r3, r3, #4
 80047b8:	697a      	ldr	r2, [r7, #20]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	697a      	ldr	r2, [r7, #20]
 80047c8:	621a      	str	r2, [r3, #32]
}
 80047ca:	bf00      	nop
 80047cc:	371c      	adds	r7, #28
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr

080047d6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047d6:	b480      	push	{r7}
 80047d8:	b085      	sub	sp, #20
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
 80047de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80047ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047f2:	683a      	ldr	r2, [r7, #0]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	f043 0307 	orr.w	r3, r3, #7
 80047fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	609a      	str	r2, [r3, #8]
}
 8004804:	bf00      	nop
 8004806:	3714      	adds	r7, #20
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004810:	b480      	push	{r7}
 8004812:	b087      	sub	sp, #28
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]
 800481c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800482a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	021a      	lsls	r2, r3, #8
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	431a      	orrs	r2, r3
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	4313      	orrs	r3, r2
 8004838:	697a      	ldr	r2, [r7, #20]
 800483a:	4313      	orrs	r3, r2
 800483c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	697a      	ldr	r2, [r7, #20]
 8004842:	609a      	str	r2, [r3, #8]
}
 8004844:	bf00      	nop
 8004846:	371c      	adds	r7, #28
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004850:	b480      	push	{r7}
 8004852:	b087      	sub	sp, #28
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	f003 031f 	and.w	r3, r3, #31
 8004862:	2201      	movs	r2, #1
 8004864:	fa02 f303 	lsl.w	r3, r2, r3
 8004868:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6a1a      	ldr	r2, [r3, #32]
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	43db      	mvns	r3, r3
 8004872:	401a      	ands	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6a1a      	ldr	r2, [r3, #32]
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	f003 031f 	and.w	r3, r3, #31
 8004882:	6879      	ldr	r1, [r7, #4]
 8004884:	fa01 f303 	lsl.w	r3, r1, r3
 8004888:	431a      	orrs	r2, r3
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	621a      	str	r2, [r3, #32]
}
 800488e:	bf00      	nop
 8004890:	371c      	adds	r7, #28
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
	...

0800489c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d101      	bne.n	80048b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048b0:	2302      	movs	r3, #2
 80048b2:	e074      	b.n	800499e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2202      	movs	r2, #2
 80048c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a34      	ldr	r2, [pc, #208]	@ (80049ac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d009      	beq.n	80048f2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a33      	ldr	r2, [pc, #204]	@ (80049b0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d004      	beq.n	80048f2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a31      	ldr	r2, [pc, #196]	@ (80049b4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d108      	bne.n	8004904 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80048f8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	4313      	orrs	r3, r2
 8004902:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800490a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800490e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	4313      	orrs	r3, r2
 8004918:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a21      	ldr	r2, [pc, #132]	@ (80049ac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d022      	beq.n	8004972 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004934:	d01d      	beq.n	8004972 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a1f      	ldr	r2, [pc, #124]	@ (80049b8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d018      	beq.n	8004972 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a1d      	ldr	r2, [pc, #116]	@ (80049bc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d013      	beq.n	8004972 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a1c      	ldr	r2, [pc, #112]	@ (80049c0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d00e      	beq.n	8004972 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a15      	ldr	r2, [pc, #84]	@ (80049b0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d009      	beq.n	8004972 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a18      	ldr	r2, [pc, #96]	@ (80049c4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d004      	beq.n	8004972 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a11      	ldr	r2, [pc, #68]	@ (80049b4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d10c      	bne.n	800498c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004978:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	68ba      	ldr	r2, [r7, #8]
 8004980:	4313      	orrs	r3, r2
 8004982:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68ba      	ldr	r2, [r7, #8]
 800498a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3714      	adds	r7, #20
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	40012c00 	.word	0x40012c00
 80049b0:	40013400 	.word	0x40013400
 80049b4:	40015000 	.word	0x40015000
 80049b8:	40000400 	.word	0x40000400
 80049bc:	40000800 	.word	0x40000800
 80049c0:	40000c00 	.word	0x40000c00
 80049c4:	40014000 	.word	0x40014000

080049c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80049d2:	2300      	movs	r3, #0
 80049d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d101      	bne.n	80049e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80049e0:	2302      	movs	r3, #2
 80049e2:	e078      	b.n	8004ad6 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	695b      	ldr	r3, [r3, #20]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	699b      	ldr	r3, [r3, #24]
 8004a58:	041b      	lsls	r3, r3, #16
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	69db      	ldr	r3, [r3, #28]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a1c      	ldr	r2, [pc, #112]	@ (8004ae4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d009      	beq.n	8004a8a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a1b      	ldr	r2, [pc, #108]	@ (8004ae8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d004      	beq.n	8004a8a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a19      	ldr	r2, [pc, #100]	@ (8004aec <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d11c      	bne.n	8004ac4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a94:	051b      	lsls	r3, r3, #20
 8004a96:	4313      	orrs	r3, r2
 8004a98:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	6a1b      	ldr	r3, [r3, #32]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3714      	adds	r7, #20
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	40012c00 	.word	0x40012c00
 8004ae8:	40013400 	.word	0x40013400
 8004aec:	40015000 	.word	0x40015000

08004af0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d101      	bne.n	8004b02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e042      	b.n	8004b88 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d106      	bne.n	8004b1a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f7fc fa37 	bl	8000f88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2224      	movs	r2, #36	@ 0x24
 8004b1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f022 0201 	bic.w	r2, r2, #1
 8004b30:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d002      	beq.n	8004b40 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 fef6 	bl	800592c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 fbf7 	bl	8005334 <UART_SetConfig>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d101      	bne.n	8004b50 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e01b      	b.n	8004b88 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	685a      	ldr	r2, [r3, #4]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	689a      	ldr	r2, [r3, #8]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f042 0201 	orr.w	r2, r2, #1
 8004b7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 ff75 	bl	8005a70 <UART_CheckIdleState>
 8004b86:	4603      	mov	r3, r0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3708      	adds	r7, #8
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b08a      	sub	sp, #40	@ 0x28
 8004b94:	af02      	add	r7, sp, #8
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	603b      	str	r3, [r7, #0]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ba6:	2b20      	cmp	r3, #32
 8004ba8:	d17b      	bne.n	8004ca2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d002      	beq.n	8004bb6 <HAL_UART_Transmit+0x26>
 8004bb0:	88fb      	ldrh	r3, [r7, #6]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e074      	b.n	8004ca4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2221      	movs	r2, #33	@ 0x21
 8004bc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bca:	f7fc fb8d 	bl	80012e8 <HAL_GetTick>
 8004bce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	88fa      	ldrh	r2, [r7, #6]
 8004bd4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	88fa      	ldrh	r2, [r7, #6]
 8004bdc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004be8:	d108      	bne.n	8004bfc <HAL_UART_Transmit+0x6c>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d104      	bne.n	8004bfc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	61bb      	str	r3, [r7, #24]
 8004bfa:	e003      	b.n	8004c04 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c00:	2300      	movs	r3, #0
 8004c02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c04:	e030      	b.n	8004c68 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	9300      	str	r3, [sp, #0]
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	2180      	movs	r1, #128	@ 0x80
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f000 ffd7 	bl	8005bc4 <UART_WaitOnFlagUntilTimeout>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d005      	beq.n	8004c28 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2220      	movs	r2, #32
 8004c20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e03d      	b.n	8004ca4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10b      	bne.n	8004c46 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	881b      	ldrh	r3, [r3, #0]
 8004c32:	461a      	mov	r2, r3
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c3c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	3302      	adds	r3, #2
 8004c42:	61bb      	str	r3, [r7, #24]
 8004c44:	e007      	b.n	8004c56 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	781a      	ldrb	r2, [r3, #0]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	3301      	adds	r3, #1
 8004c54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1c8      	bne.n	8004c06 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	9300      	str	r3, [sp, #0]
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	2140      	movs	r1, #64	@ 0x40
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	f000 ffa0 	bl	8005bc4 <UART_WaitOnFlagUntilTimeout>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d005      	beq.n	8004c96 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2220      	movs	r2, #32
 8004c8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e006      	b.n	8004ca4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2220      	movs	r2, #32
 8004c9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	e000      	b.n	8004ca4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004ca2:	2302      	movs	r3, #2
  }
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3720      	adds	r7, #32
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b0ba      	sub	sp, #232	@ 0xe8
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	69db      	ldr	r3, [r3, #28]
 8004cba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004cd2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004cd6:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004cda:	4013      	ands	r3, r2
 8004cdc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004ce0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d11b      	bne.n	8004d20 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004ce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cec:	f003 0320 	and.w	r3, r3, #32
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d015      	beq.n	8004d20 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cf8:	f003 0320 	and.w	r3, r3, #32
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d105      	bne.n	8004d0c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004d00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d009      	beq.n	8004d20 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 82e3 	beq.w	80052dc <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	4798      	blx	r3
      }
      return;
 8004d1e:	e2dd      	b.n	80052dc <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004d20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f000 8123 	beq.w	8004f70 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004d2a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004d2e:	4b8d      	ldr	r3, [pc, #564]	@ (8004f64 <HAL_UART_IRQHandler+0x2b8>)
 8004d30:	4013      	ands	r3, r2
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d106      	bne.n	8004d44 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004d36:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004d3a:	4b8b      	ldr	r3, [pc, #556]	@ (8004f68 <HAL_UART_IRQHandler+0x2bc>)
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	f000 8116 	beq.w	8004f70 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004d44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d48:	f003 0301 	and.w	r3, r3, #1
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d011      	beq.n	8004d74 <HAL_UART_IRQHandler+0xc8>
 8004d50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00b      	beq.n	8004d74 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2201      	movs	r2, #1
 8004d62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d6a:	f043 0201 	orr.w	r2, r3, #1
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d78:	f003 0302 	and.w	r3, r3, #2
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d011      	beq.n	8004da4 <HAL_UART_IRQHandler+0xf8>
 8004d80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d84:	f003 0301 	and.w	r3, r3, #1
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00b      	beq.n	8004da4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2202      	movs	r2, #2
 8004d92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d9a:	f043 0204 	orr.w	r2, r3, #4
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004da4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004da8:	f003 0304 	and.w	r3, r3, #4
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d011      	beq.n	8004dd4 <HAL_UART_IRQHandler+0x128>
 8004db0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004db4:	f003 0301 	and.w	r3, r3, #1
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00b      	beq.n	8004dd4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2204      	movs	r2, #4
 8004dc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dca:	f043 0202 	orr.w	r2, r3, #2
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004dd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dd8:	f003 0308 	and.w	r3, r3, #8
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d017      	beq.n	8004e10 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004de0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004de4:	f003 0320 	and.w	r3, r3, #32
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d105      	bne.n	8004df8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004dec:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004df0:	4b5c      	ldr	r3, [pc, #368]	@ (8004f64 <HAL_UART_IRQHandler+0x2b8>)
 8004df2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00b      	beq.n	8004e10 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2208      	movs	r2, #8
 8004dfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e06:	f043 0208 	orr.w	r2, r3, #8
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004e10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d012      	beq.n	8004e42 <HAL_UART_IRQHandler+0x196>
 8004e1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e20:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00c      	beq.n	8004e42 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004e30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e38:	f043 0220 	orr.w	r2, r3, #32
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	f000 8249 	beq.w	80052e0 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e52:	f003 0320 	and.w	r3, r3, #32
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d013      	beq.n	8004e82 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004e5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e5e:	f003 0320 	and.w	r3, r3, #32
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d105      	bne.n	8004e72 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004e66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d007      	beq.n	8004e82 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d003      	beq.n	8004e82 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e88:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e96:	2b40      	cmp	r3, #64	@ 0x40
 8004e98:	d005      	beq.n	8004ea6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004e9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e9e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d054      	beq.n	8004f50 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 fef9 	bl	8005c9e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eb6:	2b40      	cmp	r3, #64	@ 0x40
 8004eb8:	d146      	bne.n	8004f48 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	3308      	adds	r3, #8
 8004ec0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004ec8:	e853 3f00 	ldrex	r3, [r3]
 8004ecc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004ed0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004ed4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ed8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	3308      	adds	r3, #8
 8004ee2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004ee6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004eea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004ef2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004ef6:	e841 2300 	strex	r3, r2, [r1]
 8004efa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004efe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1d9      	bne.n	8004eba <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d017      	beq.n	8004f40 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f16:	4a15      	ldr	r2, [pc, #84]	@ (8004f6c <HAL_UART_IRQHandler+0x2c0>)
 8004f18:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f20:	4618      	mov	r0, r3
 8004f22:	f7fc fb77 	bl	8001614 <HAL_DMA_Abort_IT>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d019      	beq.n	8004f60 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8004f3a:	4610      	mov	r0, r2
 8004f3c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f3e:	e00f      	b.n	8004f60 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 f9e1 	bl	8005308 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f46:	e00b      	b.n	8004f60 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 f9dd 	bl	8005308 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f4e:	e007      	b.n	8004f60 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 f9d9 	bl	8005308 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8004f5e:	e1bf      	b.n	80052e0 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f60:	bf00      	nop
    return;
 8004f62:	e1bd      	b.n	80052e0 <HAL_UART_IRQHandler+0x634>
 8004f64:	10000001 	.word	0x10000001
 8004f68:	04000120 	.word	0x04000120
 8004f6c:	08005d6b 	.word	0x08005d6b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	f040 8153 	bne.w	8005220 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f7e:	f003 0310 	and.w	r3, r3, #16
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	f000 814c 	beq.w	8005220 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f8c:	f003 0310 	and.w	r3, r3, #16
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	f000 8145 	beq.w	8005220 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2210      	movs	r2, #16
 8004f9c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fa8:	2b40      	cmp	r3, #64	@ 0x40
 8004faa:	f040 80bb 	bne.w	8005124 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004fbc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	f000 818f 	beq.w	80052e4 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004fcc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	f080 8187 	bcs.w	80052e4 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004fdc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0320 	and.w	r3, r3, #32
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	f040 8087 	bne.w	8005102 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ffc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005000:	e853 3f00 	ldrex	r3, [r3]
 8005004:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005008:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800500c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005010:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	461a      	mov	r2, r3
 800501a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800501e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005022:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005026:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800502a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800502e:	e841 2300 	strex	r3, r2, [r1]
 8005032:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005036:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1da      	bne.n	8004ff4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	3308      	adds	r3, #8
 8005044:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005046:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005048:	e853 3f00 	ldrex	r3, [r3]
 800504c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800504e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005050:	f023 0301 	bic.w	r3, r3, #1
 8005054:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	3308      	adds	r3, #8
 800505e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005062:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005066:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005068:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800506a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800506e:	e841 2300 	strex	r3, r2, [r1]
 8005072:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005074:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1e1      	bne.n	800503e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	3308      	adds	r3, #8
 8005080:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005082:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005084:	e853 3f00 	ldrex	r3, [r3]
 8005088:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800508a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800508c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005090:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	3308      	adds	r3, #8
 800509a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800509e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80050a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80050a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80050a6:	e841 2300 	strex	r3, r2, [r1]
 80050aa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80050ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d1e3      	bne.n	800507a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2220      	movs	r2, #32
 80050b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050c8:	e853 3f00 	ldrex	r3, [r3]
 80050cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80050ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050d0:	f023 0310 	bic.w	r3, r3, #16
 80050d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	461a      	mov	r2, r3
 80050de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80050e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80050e4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80050e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80050ea:	e841 2300 	strex	r3, r2, [r1]
 80050ee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80050f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1e4      	bne.n	80050c0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050fc:	4618      	mov	r0, r3
 80050fe:	f7fc fa30 	bl	8001562 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2202      	movs	r2, #2
 8005106:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005114:	b29b      	uxth	r3, r3
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	b29b      	uxth	r3, r3
 800511a:	4619      	mov	r1, r3
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 f8fd 	bl	800531c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005122:	e0df      	b.n	80052e4 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005130:	b29b      	uxth	r3, r3
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800513e:	b29b      	uxth	r3, r3
 8005140:	2b00      	cmp	r3, #0
 8005142:	f000 80d1 	beq.w	80052e8 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8005146:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800514a:	2b00      	cmp	r3, #0
 800514c:	f000 80cc 	beq.w	80052e8 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005158:	e853 3f00 	ldrex	r3, [r3]
 800515c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800515e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005160:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005164:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	461a      	mov	r2, r3
 800516e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005172:	647b      	str	r3, [r7, #68]	@ 0x44
 8005174:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005176:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005178:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800517a:	e841 2300 	strex	r3, r2, [r1]
 800517e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005180:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005182:	2b00      	cmp	r3, #0
 8005184:	d1e4      	bne.n	8005150 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	3308      	adds	r3, #8
 800518c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005190:	e853 3f00 	ldrex	r3, [r3]
 8005194:	623b      	str	r3, [r7, #32]
   return(result);
 8005196:	6a3b      	ldr	r3, [r7, #32]
 8005198:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800519c:	f023 0301 	bic.w	r3, r3, #1
 80051a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	3308      	adds	r3, #8
 80051aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80051ae:	633a      	str	r2, [r7, #48]	@ 0x30
 80051b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051b6:	e841 2300 	strex	r3, r2, [r1]
 80051ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80051bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1e1      	bne.n	8005186 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2220      	movs	r2, #32
 80051c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	e853 3f00 	ldrex	r3, [r3]
 80051e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f023 0310 	bic.w	r3, r3, #16
 80051ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	461a      	mov	r2, r3
 80051f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80051f8:	61fb      	str	r3, [r7, #28]
 80051fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051fc:	69b9      	ldr	r1, [r7, #24]
 80051fe:	69fa      	ldr	r2, [r7, #28]
 8005200:	e841 2300 	strex	r3, r2, [r1]
 8005204:	617b      	str	r3, [r7, #20]
   return(result);
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d1e4      	bne.n	80051d6 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2202      	movs	r2, #2
 8005210:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005212:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005216:	4619      	mov	r1, r3
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 f87f 	bl	800531c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800521e:	e063      	b.n	80052e8 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005224:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00e      	beq.n	800524a <HAL_UART_IRQHandler+0x59e>
 800522c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005230:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d008      	beq.n	800524a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005240:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 fdd2 	bl	8005dec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005248:	e051      	b.n	80052ee <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800524a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800524e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005252:	2b00      	cmp	r3, #0
 8005254:	d014      	beq.n	8005280 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005256:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800525a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800525e:	2b00      	cmp	r3, #0
 8005260:	d105      	bne.n	800526e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005262:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005266:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d008      	beq.n	8005280 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005272:	2b00      	cmp	r3, #0
 8005274:	d03a      	beq.n	80052ec <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	4798      	blx	r3
    }
    return;
 800527e:	e035      	b.n	80052ec <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005284:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005288:	2b00      	cmp	r3, #0
 800528a:	d009      	beq.n	80052a0 <HAL_UART_IRQHandler+0x5f4>
 800528c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005290:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005294:	2b00      	cmp	r3, #0
 8005296:	d003      	beq.n	80052a0 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 fd7c 	bl	8005d96 <UART_EndTransmit_IT>
    return;
 800529e:	e026      	b.n	80052ee <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80052a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d009      	beq.n	80052c0 <HAL_UART_IRQHandler+0x614>
 80052ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052b0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d003      	beq.n	80052c0 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 fdab 	bl	8005e14 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80052be:	e016      	b.n	80052ee <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80052c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d010      	beq.n	80052ee <HAL_UART_IRQHandler+0x642>
 80052cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	da0c      	bge.n	80052ee <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 fd93 	bl	8005e00 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80052da:	e008      	b.n	80052ee <HAL_UART_IRQHandler+0x642>
      return;
 80052dc:	bf00      	nop
 80052de:	e006      	b.n	80052ee <HAL_UART_IRQHandler+0x642>
    return;
 80052e0:	bf00      	nop
 80052e2:	e004      	b.n	80052ee <HAL_UART_IRQHandler+0x642>
      return;
 80052e4:	bf00      	nop
 80052e6:	e002      	b.n	80052ee <HAL_UART_IRQHandler+0x642>
      return;
 80052e8:	bf00      	nop
 80052ea:	e000      	b.n	80052ee <HAL_UART_IRQHandler+0x642>
    return;
 80052ec:	bf00      	nop
  }
}
 80052ee:	37e8      	adds	r7, #232	@ 0xe8
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80052fc:	bf00      	nop
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005310:	bf00      	nop
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	460b      	mov	r3, r1
 8005326:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005328:	bf00      	nop
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005334:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005338:	b08c      	sub	sp, #48	@ 0x30
 800533a:	af00      	add	r7, sp, #0
 800533c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800533e:	2300      	movs	r3, #0
 8005340:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	689a      	ldr	r2, [r3, #8]
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	431a      	orrs	r2, r3
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	431a      	orrs	r2, r3
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	69db      	ldr	r3, [r3, #28]
 8005358:	4313      	orrs	r3, r2
 800535a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	4baa      	ldr	r3, [pc, #680]	@ (800560c <UART_SetConfig+0x2d8>)
 8005364:	4013      	ands	r3, r2
 8005366:	697a      	ldr	r2, [r7, #20]
 8005368:	6812      	ldr	r2, [r2, #0]
 800536a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800536c:	430b      	orrs	r3, r1
 800536e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	68da      	ldr	r2, [r3, #12]
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	430a      	orrs	r2, r1
 8005384:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	699b      	ldr	r3, [r3, #24]
 800538a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a9f      	ldr	r2, [pc, #636]	@ (8005610 <UART_SetConfig+0x2dc>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d004      	beq.n	80053a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	6a1b      	ldr	r3, [r3, #32]
 800539a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800539c:	4313      	orrs	r3, r2
 800539e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80053aa:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80053ae:	697a      	ldr	r2, [r7, #20]
 80053b0:	6812      	ldr	r2, [r2, #0]
 80053b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053b4:	430b      	orrs	r3, r1
 80053b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053be:	f023 010f 	bic.w	r1, r3, #15
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	430a      	orrs	r2, r1
 80053cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a90      	ldr	r2, [pc, #576]	@ (8005614 <UART_SetConfig+0x2e0>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d125      	bne.n	8005424 <UART_SetConfig+0xf0>
 80053d8:	4b8f      	ldr	r3, [pc, #572]	@ (8005618 <UART_SetConfig+0x2e4>)
 80053da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053de:	f003 0303 	and.w	r3, r3, #3
 80053e2:	2b03      	cmp	r3, #3
 80053e4:	d81a      	bhi.n	800541c <UART_SetConfig+0xe8>
 80053e6:	a201      	add	r2, pc, #4	@ (adr r2, 80053ec <UART_SetConfig+0xb8>)
 80053e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ec:	080053fd 	.word	0x080053fd
 80053f0:	0800540d 	.word	0x0800540d
 80053f4:	08005405 	.word	0x08005405
 80053f8:	08005415 	.word	0x08005415
 80053fc:	2301      	movs	r3, #1
 80053fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005402:	e116      	b.n	8005632 <UART_SetConfig+0x2fe>
 8005404:	2302      	movs	r3, #2
 8005406:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800540a:	e112      	b.n	8005632 <UART_SetConfig+0x2fe>
 800540c:	2304      	movs	r3, #4
 800540e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005412:	e10e      	b.n	8005632 <UART_SetConfig+0x2fe>
 8005414:	2308      	movs	r3, #8
 8005416:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800541a:	e10a      	b.n	8005632 <UART_SetConfig+0x2fe>
 800541c:	2310      	movs	r3, #16
 800541e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005422:	e106      	b.n	8005632 <UART_SetConfig+0x2fe>
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a7c      	ldr	r2, [pc, #496]	@ (800561c <UART_SetConfig+0x2e8>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d138      	bne.n	80054a0 <UART_SetConfig+0x16c>
 800542e:	4b7a      	ldr	r3, [pc, #488]	@ (8005618 <UART_SetConfig+0x2e4>)
 8005430:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005434:	f003 030c 	and.w	r3, r3, #12
 8005438:	2b0c      	cmp	r3, #12
 800543a:	d82d      	bhi.n	8005498 <UART_SetConfig+0x164>
 800543c:	a201      	add	r2, pc, #4	@ (adr r2, 8005444 <UART_SetConfig+0x110>)
 800543e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005442:	bf00      	nop
 8005444:	08005479 	.word	0x08005479
 8005448:	08005499 	.word	0x08005499
 800544c:	08005499 	.word	0x08005499
 8005450:	08005499 	.word	0x08005499
 8005454:	08005489 	.word	0x08005489
 8005458:	08005499 	.word	0x08005499
 800545c:	08005499 	.word	0x08005499
 8005460:	08005499 	.word	0x08005499
 8005464:	08005481 	.word	0x08005481
 8005468:	08005499 	.word	0x08005499
 800546c:	08005499 	.word	0x08005499
 8005470:	08005499 	.word	0x08005499
 8005474:	08005491 	.word	0x08005491
 8005478:	2300      	movs	r3, #0
 800547a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800547e:	e0d8      	b.n	8005632 <UART_SetConfig+0x2fe>
 8005480:	2302      	movs	r3, #2
 8005482:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005486:	e0d4      	b.n	8005632 <UART_SetConfig+0x2fe>
 8005488:	2304      	movs	r3, #4
 800548a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800548e:	e0d0      	b.n	8005632 <UART_SetConfig+0x2fe>
 8005490:	2308      	movs	r3, #8
 8005492:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005496:	e0cc      	b.n	8005632 <UART_SetConfig+0x2fe>
 8005498:	2310      	movs	r3, #16
 800549a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800549e:	e0c8      	b.n	8005632 <UART_SetConfig+0x2fe>
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a5e      	ldr	r2, [pc, #376]	@ (8005620 <UART_SetConfig+0x2ec>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d125      	bne.n	80054f6 <UART_SetConfig+0x1c2>
 80054aa:	4b5b      	ldr	r3, [pc, #364]	@ (8005618 <UART_SetConfig+0x2e4>)
 80054ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054b0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80054b4:	2b30      	cmp	r3, #48	@ 0x30
 80054b6:	d016      	beq.n	80054e6 <UART_SetConfig+0x1b2>
 80054b8:	2b30      	cmp	r3, #48	@ 0x30
 80054ba:	d818      	bhi.n	80054ee <UART_SetConfig+0x1ba>
 80054bc:	2b20      	cmp	r3, #32
 80054be:	d00a      	beq.n	80054d6 <UART_SetConfig+0x1a2>
 80054c0:	2b20      	cmp	r3, #32
 80054c2:	d814      	bhi.n	80054ee <UART_SetConfig+0x1ba>
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d002      	beq.n	80054ce <UART_SetConfig+0x19a>
 80054c8:	2b10      	cmp	r3, #16
 80054ca:	d008      	beq.n	80054de <UART_SetConfig+0x1aa>
 80054cc:	e00f      	b.n	80054ee <UART_SetConfig+0x1ba>
 80054ce:	2300      	movs	r3, #0
 80054d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054d4:	e0ad      	b.n	8005632 <UART_SetConfig+0x2fe>
 80054d6:	2302      	movs	r3, #2
 80054d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054dc:	e0a9      	b.n	8005632 <UART_SetConfig+0x2fe>
 80054de:	2304      	movs	r3, #4
 80054e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054e4:	e0a5      	b.n	8005632 <UART_SetConfig+0x2fe>
 80054e6:	2308      	movs	r3, #8
 80054e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054ec:	e0a1      	b.n	8005632 <UART_SetConfig+0x2fe>
 80054ee:	2310      	movs	r3, #16
 80054f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054f4:	e09d      	b.n	8005632 <UART_SetConfig+0x2fe>
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a4a      	ldr	r2, [pc, #296]	@ (8005624 <UART_SetConfig+0x2f0>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d125      	bne.n	800554c <UART_SetConfig+0x218>
 8005500:	4b45      	ldr	r3, [pc, #276]	@ (8005618 <UART_SetConfig+0x2e4>)
 8005502:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005506:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800550a:	2bc0      	cmp	r3, #192	@ 0xc0
 800550c:	d016      	beq.n	800553c <UART_SetConfig+0x208>
 800550e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005510:	d818      	bhi.n	8005544 <UART_SetConfig+0x210>
 8005512:	2b80      	cmp	r3, #128	@ 0x80
 8005514:	d00a      	beq.n	800552c <UART_SetConfig+0x1f8>
 8005516:	2b80      	cmp	r3, #128	@ 0x80
 8005518:	d814      	bhi.n	8005544 <UART_SetConfig+0x210>
 800551a:	2b00      	cmp	r3, #0
 800551c:	d002      	beq.n	8005524 <UART_SetConfig+0x1f0>
 800551e:	2b40      	cmp	r3, #64	@ 0x40
 8005520:	d008      	beq.n	8005534 <UART_SetConfig+0x200>
 8005522:	e00f      	b.n	8005544 <UART_SetConfig+0x210>
 8005524:	2300      	movs	r3, #0
 8005526:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800552a:	e082      	b.n	8005632 <UART_SetConfig+0x2fe>
 800552c:	2302      	movs	r3, #2
 800552e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005532:	e07e      	b.n	8005632 <UART_SetConfig+0x2fe>
 8005534:	2304      	movs	r3, #4
 8005536:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800553a:	e07a      	b.n	8005632 <UART_SetConfig+0x2fe>
 800553c:	2308      	movs	r3, #8
 800553e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005542:	e076      	b.n	8005632 <UART_SetConfig+0x2fe>
 8005544:	2310      	movs	r3, #16
 8005546:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800554a:	e072      	b.n	8005632 <UART_SetConfig+0x2fe>
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a35      	ldr	r2, [pc, #212]	@ (8005628 <UART_SetConfig+0x2f4>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d12a      	bne.n	80055ac <UART_SetConfig+0x278>
 8005556:	4b30      	ldr	r3, [pc, #192]	@ (8005618 <UART_SetConfig+0x2e4>)
 8005558:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800555c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005560:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005564:	d01a      	beq.n	800559c <UART_SetConfig+0x268>
 8005566:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800556a:	d81b      	bhi.n	80055a4 <UART_SetConfig+0x270>
 800556c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005570:	d00c      	beq.n	800558c <UART_SetConfig+0x258>
 8005572:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005576:	d815      	bhi.n	80055a4 <UART_SetConfig+0x270>
 8005578:	2b00      	cmp	r3, #0
 800557a:	d003      	beq.n	8005584 <UART_SetConfig+0x250>
 800557c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005580:	d008      	beq.n	8005594 <UART_SetConfig+0x260>
 8005582:	e00f      	b.n	80055a4 <UART_SetConfig+0x270>
 8005584:	2300      	movs	r3, #0
 8005586:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800558a:	e052      	b.n	8005632 <UART_SetConfig+0x2fe>
 800558c:	2302      	movs	r3, #2
 800558e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005592:	e04e      	b.n	8005632 <UART_SetConfig+0x2fe>
 8005594:	2304      	movs	r3, #4
 8005596:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800559a:	e04a      	b.n	8005632 <UART_SetConfig+0x2fe>
 800559c:	2308      	movs	r3, #8
 800559e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055a2:	e046      	b.n	8005632 <UART_SetConfig+0x2fe>
 80055a4:	2310      	movs	r3, #16
 80055a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055aa:	e042      	b.n	8005632 <UART_SetConfig+0x2fe>
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a17      	ldr	r2, [pc, #92]	@ (8005610 <UART_SetConfig+0x2dc>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d13a      	bne.n	800562c <UART_SetConfig+0x2f8>
 80055b6:	4b18      	ldr	r3, [pc, #96]	@ (8005618 <UART_SetConfig+0x2e4>)
 80055b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055bc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80055c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80055c4:	d01a      	beq.n	80055fc <UART_SetConfig+0x2c8>
 80055c6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80055ca:	d81b      	bhi.n	8005604 <UART_SetConfig+0x2d0>
 80055cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055d0:	d00c      	beq.n	80055ec <UART_SetConfig+0x2b8>
 80055d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055d6:	d815      	bhi.n	8005604 <UART_SetConfig+0x2d0>
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d003      	beq.n	80055e4 <UART_SetConfig+0x2b0>
 80055dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055e0:	d008      	beq.n	80055f4 <UART_SetConfig+0x2c0>
 80055e2:	e00f      	b.n	8005604 <UART_SetConfig+0x2d0>
 80055e4:	2300      	movs	r3, #0
 80055e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055ea:	e022      	b.n	8005632 <UART_SetConfig+0x2fe>
 80055ec:	2302      	movs	r3, #2
 80055ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055f2:	e01e      	b.n	8005632 <UART_SetConfig+0x2fe>
 80055f4:	2304      	movs	r3, #4
 80055f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055fa:	e01a      	b.n	8005632 <UART_SetConfig+0x2fe>
 80055fc:	2308      	movs	r3, #8
 80055fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005602:	e016      	b.n	8005632 <UART_SetConfig+0x2fe>
 8005604:	2310      	movs	r3, #16
 8005606:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800560a:	e012      	b.n	8005632 <UART_SetConfig+0x2fe>
 800560c:	cfff69f3 	.word	0xcfff69f3
 8005610:	40008000 	.word	0x40008000
 8005614:	40013800 	.word	0x40013800
 8005618:	40021000 	.word	0x40021000
 800561c:	40004400 	.word	0x40004400
 8005620:	40004800 	.word	0x40004800
 8005624:	40004c00 	.word	0x40004c00
 8005628:	40005000 	.word	0x40005000
 800562c:	2310      	movs	r3, #16
 800562e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4aae      	ldr	r2, [pc, #696]	@ (80058f0 <UART_SetConfig+0x5bc>)
 8005638:	4293      	cmp	r3, r2
 800563a:	f040 8097 	bne.w	800576c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800563e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005642:	2b08      	cmp	r3, #8
 8005644:	d823      	bhi.n	800568e <UART_SetConfig+0x35a>
 8005646:	a201      	add	r2, pc, #4	@ (adr r2, 800564c <UART_SetConfig+0x318>)
 8005648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800564c:	08005671 	.word	0x08005671
 8005650:	0800568f 	.word	0x0800568f
 8005654:	08005679 	.word	0x08005679
 8005658:	0800568f 	.word	0x0800568f
 800565c:	0800567f 	.word	0x0800567f
 8005660:	0800568f 	.word	0x0800568f
 8005664:	0800568f 	.word	0x0800568f
 8005668:	0800568f 	.word	0x0800568f
 800566c:	08005687 	.word	0x08005687
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005670:	f7fc ff5a 	bl	8002528 <HAL_RCC_GetPCLK1Freq>
 8005674:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005676:	e010      	b.n	800569a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005678:	4b9e      	ldr	r3, [pc, #632]	@ (80058f4 <UART_SetConfig+0x5c0>)
 800567a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800567c:	e00d      	b.n	800569a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800567e:	f7fc fee5 	bl	800244c <HAL_RCC_GetSysClockFreq>
 8005682:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005684:	e009      	b.n	800569a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005686:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800568a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800568c:	e005      	b.n	800569a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800568e:	2300      	movs	r3, #0
 8005690:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005698:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800569a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800569c:	2b00      	cmp	r3, #0
 800569e:	f000 8130 	beq.w	8005902 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a6:	4a94      	ldr	r2, [pc, #592]	@ (80058f8 <UART_SetConfig+0x5c4>)
 80056a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056ac:	461a      	mov	r2, r3
 80056ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80056b4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	685a      	ldr	r2, [r3, #4]
 80056ba:	4613      	mov	r3, r2
 80056bc:	005b      	lsls	r3, r3, #1
 80056be:	4413      	add	r3, r2
 80056c0:	69ba      	ldr	r2, [r7, #24]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d305      	bcc.n	80056d2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d903      	bls.n	80056da <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80056d8:	e113      	b.n	8005902 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056dc:	2200      	movs	r2, #0
 80056de:	60bb      	str	r3, [r7, #8]
 80056e0:	60fa      	str	r2, [r7, #12]
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056e6:	4a84      	ldr	r2, [pc, #528]	@ (80058f8 <UART_SetConfig+0x5c4>)
 80056e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	2200      	movs	r2, #0
 80056f0:	603b      	str	r3, [r7, #0]
 80056f2:	607a      	str	r2, [r7, #4]
 80056f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80056fc:	f7fa fd8c 	bl	8000218 <__aeabi_uldivmod>
 8005700:	4602      	mov	r2, r0
 8005702:	460b      	mov	r3, r1
 8005704:	4610      	mov	r0, r2
 8005706:	4619      	mov	r1, r3
 8005708:	f04f 0200 	mov.w	r2, #0
 800570c:	f04f 0300 	mov.w	r3, #0
 8005710:	020b      	lsls	r3, r1, #8
 8005712:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005716:	0202      	lsls	r2, r0, #8
 8005718:	6979      	ldr	r1, [r7, #20]
 800571a:	6849      	ldr	r1, [r1, #4]
 800571c:	0849      	lsrs	r1, r1, #1
 800571e:	2000      	movs	r0, #0
 8005720:	460c      	mov	r4, r1
 8005722:	4605      	mov	r5, r0
 8005724:	eb12 0804 	adds.w	r8, r2, r4
 8005728:	eb43 0905 	adc.w	r9, r3, r5
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	469a      	mov	sl, r3
 8005734:	4693      	mov	fp, r2
 8005736:	4652      	mov	r2, sl
 8005738:	465b      	mov	r3, fp
 800573a:	4640      	mov	r0, r8
 800573c:	4649      	mov	r1, r9
 800573e:	f7fa fd6b 	bl	8000218 <__aeabi_uldivmod>
 8005742:	4602      	mov	r2, r0
 8005744:	460b      	mov	r3, r1
 8005746:	4613      	mov	r3, r2
 8005748:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800574a:	6a3b      	ldr	r3, [r7, #32]
 800574c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005750:	d308      	bcc.n	8005764 <UART_SetConfig+0x430>
 8005752:	6a3b      	ldr	r3, [r7, #32]
 8005754:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005758:	d204      	bcs.n	8005764 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	6a3a      	ldr	r2, [r7, #32]
 8005760:	60da      	str	r2, [r3, #12]
 8005762:	e0ce      	b.n	8005902 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800576a:	e0ca      	b.n	8005902 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	69db      	ldr	r3, [r3, #28]
 8005770:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005774:	d166      	bne.n	8005844 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005776:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800577a:	2b08      	cmp	r3, #8
 800577c:	d827      	bhi.n	80057ce <UART_SetConfig+0x49a>
 800577e:	a201      	add	r2, pc, #4	@ (adr r2, 8005784 <UART_SetConfig+0x450>)
 8005780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005784:	080057a9 	.word	0x080057a9
 8005788:	080057b1 	.word	0x080057b1
 800578c:	080057b9 	.word	0x080057b9
 8005790:	080057cf 	.word	0x080057cf
 8005794:	080057bf 	.word	0x080057bf
 8005798:	080057cf 	.word	0x080057cf
 800579c:	080057cf 	.word	0x080057cf
 80057a0:	080057cf 	.word	0x080057cf
 80057a4:	080057c7 	.word	0x080057c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057a8:	f7fc febe 	bl	8002528 <HAL_RCC_GetPCLK1Freq>
 80057ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80057ae:	e014      	b.n	80057da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057b0:	f7fc fed0 	bl	8002554 <HAL_RCC_GetPCLK2Freq>
 80057b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80057b6:	e010      	b.n	80057da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057b8:	4b4e      	ldr	r3, [pc, #312]	@ (80058f4 <UART_SetConfig+0x5c0>)
 80057ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80057bc:	e00d      	b.n	80057da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057be:	f7fc fe45 	bl	800244c <HAL_RCC_GetSysClockFreq>
 80057c2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80057c4:	e009      	b.n	80057da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80057cc:	e005      	b.n	80057da <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80057ce:	2300      	movs	r3, #0
 80057d0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80057d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80057da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057dc:	2b00      	cmp	r3, #0
 80057de:	f000 8090 	beq.w	8005902 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e6:	4a44      	ldr	r2, [pc, #272]	@ (80058f8 <UART_SetConfig+0x5c4>)
 80057e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057ec:	461a      	mov	r2, r3
 80057ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80057f4:	005a      	lsls	r2, r3, #1
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	085b      	lsrs	r3, r3, #1
 80057fc:	441a      	add	r2, r3
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	fbb2 f3f3 	udiv	r3, r2, r3
 8005806:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005808:	6a3b      	ldr	r3, [r7, #32]
 800580a:	2b0f      	cmp	r3, #15
 800580c:	d916      	bls.n	800583c <UART_SetConfig+0x508>
 800580e:	6a3b      	ldr	r3, [r7, #32]
 8005810:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005814:	d212      	bcs.n	800583c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005816:	6a3b      	ldr	r3, [r7, #32]
 8005818:	b29b      	uxth	r3, r3
 800581a:	f023 030f 	bic.w	r3, r3, #15
 800581e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005820:	6a3b      	ldr	r3, [r7, #32]
 8005822:	085b      	lsrs	r3, r3, #1
 8005824:	b29b      	uxth	r3, r3
 8005826:	f003 0307 	and.w	r3, r3, #7
 800582a:	b29a      	uxth	r2, r3
 800582c:	8bfb      	ldrh	r3, [r7, #30]
 800582e:	4313      	orrs	r3, r2
 8005830:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	8bfa      	ldrh	r2, [r7, #30]
 8005838:	60da      	str	r2, [r3, #12]
 800583a:	e062      	b.n	8005902 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005842:	e05e      	b.n	8005902 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005844:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005848:	2b08      	cmp	r3, #8
 800584a:	d828      	bhi.n	800589e <UART_SetConfig+0x56a>
 800584c:	a201      	add	r2, pc, #4	@ (adr r2, 8005854 <UART_SetConfig+0x520>)
 800584e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005852:	bf00      	nop
 8005854:	08005879 	.word	0x08005879
 8005858:	08005881 	.word	0x08005881
 800585c:	08005889 	.word	0x08005889
 8005860:	0800589f 	.word	0x0800589f
 8005864:	0800588f 	.word	0x0800588f
 8005868:	0800589f 	.word	0x0800589f
 800586c:	0800589f 	.word	0x0800589f
 8005870:	0800589f 	.word	0x0800589f
 8005874:	08005897 	.word	0x08005897
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005878:	f7fc fe56 	bl	8002528 <HAL_RCC_GetPCLK1Freq>
 800587c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800587e:	e014      	b.n	80058aa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005880:	f7fc fe68 	bl	8002554 <HAL_RCC_GetPCLK2Freq>
 8005884:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005886:	e010      	b.n	80058aa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005888:	4b1a      	ldr	r3, [pc, #104]	@ (80058f4 <UART_SetConfig+0x5c0>)
 800588a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800588c:	e00d      	b.n	80058aa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800588e:	f7fc fddd 	bl	800244c <HAL_RCC_GetSysClockFreq>
 8005892:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005894:	e009      	b.n	80058aa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005896:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800589a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800589c:	e005      	b.n	80058aa <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800589e:	2300      	movs	r3, #0
 80058a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80058a8:	bf00      	nop
    }

    if (pclk != 0U)
 80058aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d028      	beq.n	8005902 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b4:	4a10      	ldr	r2, [pc, #64]	@ (80058f8 <UART_SetConfig+0x5c4>)
 80058b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058ba:	461a      	mov	r2, r3
 80058bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058be:	fbb3 f2f2 	udiv	r2, r3, r2
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	085b      	lsrs	r3, r3, #1
 80058c8:	441a      	add	r2, r3
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80058d2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058d4:	6a3b      	ldr	r3, [r7, #32]
 80058d6:	2b0f      	cmp	r3, #15
 80058d8:	d910      	bls.n	80058fc <UART_SetConfig+0x5c8>
 80058da:	6a3b      	ldr	r3, [r7, #32]
 80058dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058e0:	d20c      	bcs.n	80058fc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80058e2:	6a3b      	ldr	r3, [r7, #32]
 80058e4:	b29a      	uxth	r2, r3
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	60da      	str	r2, [r3, #12]
 80058ec:	e009      	b.n	8005902 <UART_SetConfig+0x5ce>
 80058ee:	bf00      	nop
 80058f0:	40008000 	.word	0x40008000
 80058f4:	00f42400 	.word	0x00f42400
 80058f8:	080060e8 	.word	0x080060e8
      }
      else
      {
        ret = HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	2201      	movs	r2, #1
 8005906:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	2201      	movs	r2, #1
 800590e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	2200      	movs	r2, #0
 8005916:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	2200      	movs	r2, #0
 800591c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800591e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005922:	4618      	mov	r0, r3
 8005924:	3730      	adds	r7, #48	@ 0x30
 8005926:	46bd      	mov	sp, r7
 8005928:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800592c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005938:	f003 0308 	and.w	r3, r3, #8
 800593c:	2b00      	cmp	r3, #0
 800593e:	d00a      	beq.n	8005956 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	430a      	orrs	r2, r1
 8005954:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800595a:	f003 0301 	and.w	r3, r3, #1
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00a      	beq.n	8005978 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	430a      	orrs	r2, r1
 8005976:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800597c:	f003 0302 	and.w	r3, r3, #2
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00a      	beq.n	800599a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	430a      	orrs	r2, r1
 8005998:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800599e:	f003 0304 	and.w	r3, r3, #4
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00a      	beq.n	80059bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	430a      	orrs	r2, r1
 80059ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059c0:	f003 0310 	and.w	r3, r3, #16
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d00a      	beq.n	80059de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	430a      	orrs	r2, r1
 80059dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059e2:	f003 0320 	and.w	r3, r3, #32
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00a      	beq.n	8005a00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	430a      	orrs	r2, r1
 80059fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d01a      	beq.n	8005a42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	430a      	orrs	r2, r1
 8005a20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a2a:	d10a      	bne.n	8005a42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00a      	beq.n	8005a64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	430a      	orrs	r2, r1
 8005a62:	605a      	str	r2, [r3, #4]
  }
}
 8005a64:	bf00      	nop
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b098      	sub	sp, #96	@ 0x60
 8005a74:	af02      	add	r7, sp, #8
 8005a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a80:	f7fb fc32 	bl	80012e8 <HAL_GetTick>
 8005a84:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0308 	and.w	r3, r3, #8
 8005a90:	2b08      	cmp	r3, #8
 8005a92:	d12f      	bne.n	8005af4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a94:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005a98:	9300      	str	r3, [sp, #0]
 8005a9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 f88e 	bl	8005bc4 <UART_WaitOnFlagUntilTimeout>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d022      	beq.n	8005af4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ab6:	e853 3f00 	ldrex	r3, [r3]
 8005aba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005abc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005abe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ac2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	461a      	mov	r2, r3
 8005aca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005acc:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ace:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ad2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ad4:	e841 2300 	strex	r3, r2, [r1]
 8005ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ada:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d1e6      	bne.n	8005aae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2220      	movs	r2, #32
 8005ae4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005af0:	2303      	movs	r3, #3
 8005af2:	e063      	b.n	8005bbc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 0304 	and.w	r3, r3, #4
 8005afe:	2b04      	cmp	r3, #4
 8005b00:	d149      	bne.n	8005b96 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b02:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b06:	9300      	str	r3, [sp, #0]
 8005b08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 f857 	bl	8005bc4 <UART_WaitOnFlagUntilTimeout>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d03c      	beq.n	8005b96 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b24:	e853 3f00 	ldrex	r3, [r3]
 8005b28:	623b      	str	r3, [r7, #32]
   return(result);
 8005b2a:	6a3b      	ldr	r3, [r7, #32]
 8005b2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	461a      	mov	r2, r3
 8005b38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b42:	e841 2300 	strex	r3, r2, [r1]
 8005b46:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1e6      	bne.n	8005b1c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	3308      	adds	r3, #8
 8005b54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	e853 3f00 	ldrex	r3, [r3]
 8005b5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f023 0301 	bic.w	r3, r3, #1
 8005b64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	3308      	adds	r3, #8
 8005b6c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b6e:	61fa      	str	r2, [r7, #28]
 8005b70:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b72:	69b9      	ldr	r1, [r7, #24]
 8005b74:	69fa      	ldr	r2, [r7, #28]
 8005b76:	e841 2300 	strex	r3, r2, [r1]
 8005b7a:	617b      	str	r3, [r7, #20]
   return(result);
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1e5      	bne.n	8005b4e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2220      	movs	r2, #32
 8005b86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e012      	b.n	8005bbc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2220      	movs	r2, #32
 8005b9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2220      	movs	r2, #32
 8005ba2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3758      	adds	r7, #88	@ 0x58
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	603b      	str	r3, [r7, #0]
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bd4:	e04f      	b.n	8005c76 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bdc:	d04b      	beq.n	8005c76 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bde:	f7fb fb83 	bl	80012e8 <HAL_GetTick>
 8005be2:	4602      	mov	r2, r0
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	69ba      	ldr	r2, [r7, #24]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d302      	bcc.n	8005bf4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d101      	bne.n	8005bf8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	e04e      	b.n	8005c96 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 0304 	and.w	r3, r3, #4
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d037      	beq.n	8005c76 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	2b80      	cmp	r3, #128	@ 0x80
 8005c0a:	d034      	beq.n	8005c76 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	2b40      	cmp	r3, #64	@ 0x40
 8005c10:	d031      	beq.n	8005c76 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	69db      	ldr	r3, [r3, #28]
 8005c18:	f003 0308 	and.w	r3, r3, #8
 8005c1c:	2b08      	cmp	r3, #8
 8005c1e:	d110      	bne.n	8005c42 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2208      	movs	r2, #8
 8005c26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	f000 f838 	bl	8005c9e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2208      	movs	r2, #8
 8005c32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e029      	b.n	8005c96 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	69db      	ldr	r3, [r3, #28]
 8005c48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c50:	d111      	bne.n	8005c76 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005c5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c5c:	68f8      	ldr	r0, [r7, #12]
 8005c5e:	f000 f81e 	bl	8005c9e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2220      	movs	r2, #32
 8005c66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e00f      	b.n	8005c96 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	69da      	ldr	r2, [r3, #28]
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	4013      	ands	r3, r2
 8005c80:	68ba      	ldr	r2, [r7, #8]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	bf0c      	ite	eq
 8005c86:	2301      	moveq	r3, #1
 8005c88:	2300      	movne	r3, #0
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	79fb      	ldrb	r3, [r7, #7]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d0a0      	beq.n	8005bd6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3710      	adds	r7, #16
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}

08005c9e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c9e:	b480      	push	{r7}
 8005ca0:	b095      	sub	sp, #84	@ 0x54
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cae:	e853 3f00 	ldrex	r3, [r3]
 8005cb2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cb6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005cba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cc4:	643b      	str	r3, [r7, #64]	@ 0x40
 8005cc6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005cca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ccc:	e841 2300 	strex	r3, r2, [r1]
 8005cd0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d1e6      	bne.n	8005ca6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	3308      	adds	r3, #8
 8005cde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce0:	6a3b      	ldr	r3, [r7, #32]
 8005ce2:	e853 3f00 	ldrex	r3, [r3]
 8005ce6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005cee:	f023 0301 	bic.w	r3, r3, #1
 8005cf2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	3308      	adds	r3, #8
 8005cfa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005cfc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d04:	e841 2300 	strex	r3, r2, [r1]
 8005d08:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d1e3      	bne.n	8005cd8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d118      	bne.n	8005d4a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	e853 3f00 	ldrex	r3, [r3]
 8005d24:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	f023 0310 	bic.w	r3, r3, #16
 8005d2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	461a      	mov	r2, r3
 8005d34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d36:	61bb      	str	r3, [r7, #24]
 8005d38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3a:	6979      	ldr	r1, [r7, #20]
 8005d3c:	69ba      	ldr	r2, [r7, #24]
 8005d3e:	e841 2300 	strex	r3, r2, [r1]
 8005d42:	613b      	str	r3, [r7, #16]
   return(result);
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d1e6      	bne.n	8005d18 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2220      	movs	r2, #32
 8005d4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005d5e:	bf00      	nop
 8005d60:	3754      	adds	r7, #84	@ 0x54
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr

08005d6a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d6a:	b580      	push	{r7, lr}
 8005d6c:	b084      	sub	sp, #16
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d76:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d88:	68f8      	ldr	r0, [r7, #12]
 8005d8a:	f7ff fabd 	bl	8005308 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d8e:	bf00      	nop
 8005d90:	3710      	adds	r7, #16
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}

08005d96 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d96:	b580      	push	{r7, lr}
 8005d98:	b088      	sub	sp, #32
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	e853 3f00 	ldrex	r3, [r3]
 8005daa:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005db2:	61fb      	str	r3, [r7, #28]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	461a      	mov	r2, r3
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	61bb      	str	r3, [r7, #24]
 8005dbe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc0:	6979      	ldr	r1, [r7, #20]
 8005dc2:	69ba      	ldr	r2, [r7, #24]
 8005dc4:	e841 2300 	strex	r3, r2, [r1]
 8005dc8:	613b      	str	r3, [r7, #16]
   return(result);
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1e6      	bne.n	8005d9e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2220      	movs	r2, #32
 8005dd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f7ff fa88 	bl	80052f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005de4:	bf00      	nop
 8005de6:	3720      	adds	r7, #32
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005df4:	bf00      	nop
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005e08:	bf00      	nop
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005e1c:	bf00      	nop
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d101      	bne.n	8005e3e <HAL_UARTEx_DisableFifoMode+0x16>
 8005e3a:	2302      	movs	r3, #2
 8005e3c:	e027      	b.n	8005e8e <HAL_UARTEx_DisableFifoMode+0x66>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2201      	movs	r2, #1
 8005e42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2224      	movs	r2, #36	@ 0x24
 8005e4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f022 0201 	bic.w	r2, r2, #1
 8005e64:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005e6c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2220      	movs	r2, #32
 8005e80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3714      	adds	r7, #20
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr

08005e9a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b084      	sub	sp, #16
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
 8005ea2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d101      	bne.n	8005eb2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005eae:	2302      	movs	r3, #2
 8005eb0:	e02d      	b.n	8005f0e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2224      	movs	r2, #36	@ 0x24
 8005ebe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f022 0201 	bic.w	r2, r2, #1
 8005ed8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	683a      	ldr	r2, [r7, #0]
 8005eea:	430a      	orrs	r2, r1
 8005eec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 f850 	bl	8005f94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2220      	movs	r2, #32
 8005f00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3710      	adds	r7, #16
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}

08005f16 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f16:	b580      	push	{r7, lr}
 8005f18:	b084      	sub	sp, #16
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
 8005f1e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d101      	bne.n	8005f2e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005f2a:	2302      	movs	r3, #2
 8005f2c:	e02d      	b.n	8005f8a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2201      	movs	r2, #1
 8005f32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2224      	movs	r2, #36	@ 0x24
 8005f3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f022 0201 	bic.w	r2, r2, #1
 8005f54:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	683a      	ldr	r2, [r7, #0]
 8005f66:	430a      	orrs	r2, r1
 8005f68:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 f812 	bl	8005f94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2220      	movs	r2, #32
 8005f7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3710      	adds	r7, #16
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
	...

08005f94 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b085      	sub	sp, #20
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d108      	bne.n	8005fb6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005fb4:	e031      	b.n	800601a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005fb6:	2308      	movs	r3, #8
 8005fb8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005fba:	2308      	movs	r3, #8
 8005fbc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	0e5b      	lsrs	r3, r3, #25
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	f003 0307 	and.w	r3, r3, #7
 8005fcc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	0f5b      	lsrs	r3, r3, #29
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	f003 0307 	and.w	r3, r3, #7
 8005fdc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005fde:	7bbb      	ldrb	r3, [r7, #14]
 8005fe0:	7b3a      	ldrb	r2, [r7, #12]
 8005fe2:	4911      	ldr	r1, [pc, #68]	@ (8006028 <UARTEx_SetNbDataToProcess+0x94>)
 8005fe4:	5c8a      	ldrb	r2, [r1, r2]
 8005fe6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005fea:	7b3a      	ldrb	r2, [r7, #12]
 8005fec:	490f      	ldr	r1, [pc, #60]	@ (800602c <UARTEx_SetNbDataToProcess+0x98>)
 8005fee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ff0:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ff4:	b29a      	uxth	r2, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ffc:	7bfb      	ldrb	r3, [r7, #15]
 8005ffe:	7b7a      	ldrb	r2, [r7, #13]
 8006000:	4909      	ldr	r1, [pc, #36]	@ (8006028 <UARTEx_SetNbDataToProcess+0x94>)
 8006002:	5c8a      	ldrb	r2, [r1, r2]
 8006004:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006008:	7b7a      	ldrb	r2, [r7, #13]
 800600a:	4908      	ldr	r1, [pc, #32]	@ (800602c <UARTEx_SetNbDataToProcess+0x98>)
 800600c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800600e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006012:	b29a      	uxth	r2, r3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800601a:	bf00      	nop
 800601c:	3714      	adds	r7, #20
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	08006100 	.word	0x08006100
 800602c:	08006108 	.word	0x08006108

08006030 <memset>:
 8006030:	4402      	add	r2, r0
 8006032:	4603      	mov	r3, r0
 8006034:	4293      	cmp	r3, r2
 8006036:	d100      	bne.n	800603a <memset+0xa>
 8006038:	4770      	bx	lr
 800603a:	f803 1b01 	strb.w	r1, [r3], #1
 800603e:	e7f9      	b.n	8006034 <memset+0x4>

08006040 <strstr>:
 8006040:	780a      	ldrb	r2, [r1, #0]
 8006042:	b570      	push	{r4, r5, r6, lr}
 8006044:	b96a      	cbnz	r2, 8006062 <strstr+0x22>
 8006046:	bd70      	pop	{r4, r5, r6, pc}
 8006048:	429a      	cmp	r2, r3
 800604a:	d109      	bne.n	8006060 <strstr+0x20>
 800604c:	460c      	mov	r4, r1
 800604e:	4605      	mov	r5, r0
 8006050:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8006054:	2b00      	cmp	r3, #0
 8006056:	d0f6      	beq.n	8006046 <strstr+0x6>
 8006058:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800605c:	429e      	cmp	r6, r3
 800605e:	d0f7      	beq.n	8006050 <strstr+0x10>
 8006060:	3001      	adds	r0, #1
 8006062:	7803      	ldrb	r3, [r0, #0]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d1ef      	bne.n	8006048 <strstr+0x8>
 8006068:	4618      	mov	r0, r3
 800606a:	e7ec      	b.n	8006046 <strstr+0x6>

0800606c <__libc_init_array>:
 800606c:	b570      	push	{r4, r5, r6, lr}
 800606e:	4d0d      	ldr	r5, [pc, #52]	@ (80060a4 <__libc_init_array+0x38>)
 8006070:	4c0d      	ldr	r4, [pc, #52]	@ (80060a8 <__libc_init_array+0x3c>)
 8006072:	1b64      	subs	r4, r4, r5
 8006074:	10a4      	asrs	r4, r4, #2
 8006076:	2600      	movs	r6, #0
 8006078:	42a6      	cmp	r6, r4
 800607a:	d109      	bne.n	8006090 <__libc_init_array+0x24>
 800607c:	4d0b      	ldr	r5, [pc, #44]	@ (80060ac <__libc_init_array+0x40>)
 800607e:	4c0c      	ldr	r4, [pc, #48]	@ (80060b0 <__libc_init_array+0x44>)
 8006080:	f000 f818 	bl	80060b4 <_init>
 8006084:	1b64      	subs	r4, r4, r5
 8006086:	10a4      	asrs	r4, r4, #2
 8006088:	2600      	movs	r6, #0
 800608a:	42a6      	cmp	r6, r4
 800608c:	d105      	bne.n	800609a <__libc_init_array+0x2e>
 800608e:	bd70      	pop	{r4, r5, r6, pc}
 8006090:	f855 3b04 	ldr.w	r3, [r5], #4
 8006094:	4798      	blx	r3
 8006096:	3601      	adds	r6, #1
 8006098:	e7ee      	b.n	8006078 <__libc_init_array+0xc>
 800609a:	f855 3b04 	ldr.w	r3, [r5], #4
 800609e:	4798      	blx	r3
 80060a0:	3601      	adds	r6, #1
 80060a2:	e7f2      	b.n	800608a <__libc_init_array+0x1e>
 80060a4:	08006118 	.word	0x08006118
 80060a8:	08006118 	.word	0x08006118
 80060ac:	08006118 	.word	0x08006118
 80060b0:	0800611c 	.word	0x0800611c

080060b4 <_init>:
 80060b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060b6:	bf00      	nop
 80060b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ba:	bc08      	pop	{r3}
 80060bc:	469e      	mov	lr, r3
 80060be:	4770      	bx	lr

080060c0 <_fini>:
 80060c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060c2:	bf00      	nop
 80060c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060c6:	bc08      	pop	{r3}
 80060c8:	469e      	mov	lr, r3
 80060ca:	4770      	bx	lr
