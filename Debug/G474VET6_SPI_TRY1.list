
G474VET6_SPI_TRY1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007248  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  08007428  08007428  00008428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075ac  080075ac  0000905c  2**0
                  CONTENTS
  4 .ARM          00000008  080075ac  080075ac  000085ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075b4  080075b4  0000905c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075b4  080075b4  000085b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080075b8  080075b8  000085b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080075bc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003fc  2000005c  08007618  0000905c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000458  08007618  00009458  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000905c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014d7a  00000000  00000000  0000908c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002839  00000000  00000000  0001de06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001290  00000000  00000000  00020640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e91  00000000  00000000  000218d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002734  00000000  00000000  00022761  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015dac  00000000  00000000  00024e95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe87a  00000000  00000000  0003ac41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001394bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005680  00000000  00000000  00139500  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0013eb80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007410 	.word	0x08007410

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	08007410 	.word	0x08007410

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b96a 	b.w	80005bc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	460c      	mov	r4, r1
 8000308:	2b00      	cmp	r3, #0
 800030a:	d14e      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030c:	4694      	mov	ip, r2
 800030e:	458c      	cmp	ip, r1
 8000310:	4686      	mov	lr, r0
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	d962      	bls.n	80003de <__udivmoddi4+0xde>
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0320 	rsb	r3, r2, #32
 800031e:	4091      	lsls	r1, r2
 8000320:	fa20 f303 	lsr.w	r3, r0, r3
 8000324:	fa0c fc02 	lsl.w	ip, ip, r2
 8000328:	4319      	orrs	r1, r3
 800032a:	fa00 fe02 	lsl.w	lr, r0, r2
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f f68c 	uxth.w	r6, ip
 8000336:	fbb1 f4f7 	udiv	r4, r1, r7
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb07 1114 	mls	r1, r7, r4, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb04 f106 	mul.w	r1, r4, r6
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f104 30ff 	add.w	r0, r4, #4294967295
 8000356:	f080 8112 	bcs.w	800057e <__udivmoddi4+0x27e>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 810f 	bls.w	800057e <__udivmoddi4+0x27e>
 8000360:	3c02      	subs	r4, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb1 f0f7 	udiv	r0, r1, r7
 800036e:	fb07 1110 	mls	r1, r7, r0, r1
 8000372:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000376:	fb00 f606 	mul.w	r6, r0, r6
 800037a:	429e      	cmp	r6, r3
 800037c:	d90a      	bls.n	8000394 <__udivmoddi4+0x94>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 31ff 	add.w	r1, r0, #4294967295
 8000386:	f080 80fc 	bcs.w	8000582 <__udivmoddi4+0x282>
 800038a:	429e      	cmp	r6, r3
 800038c:	f240 80f9 	bls.w	8000582 <__udivmoddi4+0x282>
 8000390:	4463      	add	r3, ip
 8000392:	3802      	subs	r0, #2
 8000394:	1b9b      	subs	r3, r3, r6
 8000396:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039a:	2100      	movs	r1, #0
 800039c:	b11d      	cbz	r5, 80003a6 <__udivmoddi4+0xa6>
 800039e:	40d3      	lsrs	r3, r2
 80003a0:	2200      	movs	r2, #0
 80003a2:	e9c5 3200 	strd	r3, r2, [r5]
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d905      	bls.n	80003ba <__udivmoddi4+0xba>
 80003ae:	b10d      	cbz	r5, 80003b4 <__udivmoddi4+0xb4>
 80003b0:	e9c5 0100 	strd	r0, r1, [r5]
 80003b4:	2100      	movs	r1, #0
 80003b6:	4608      	mov	r0, r1
 80003b8:	e7f5      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003ba:	fab3 f183 	clz	r1, r3
 80003be:	2900      	cmp	r1, #0
 80003c0:	d146      	bne.n	8000450 <__udivmoddi4+0x150>
 80003c2:	42a3      	cmp	r3, r4
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xcc>
 80003c6:	4290      	cmp	r0, r2
 80003c8:	f0c0 80f0 	bcc.w	80005ac <__udivmoddi4+0x2ac>
 80003cc:	1a86      	subs	r6, r0, r2
 80003ce:	eb64 0303 	sbc.w	r3, r4, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d0e6      	beq.n	80003a6 <__udivmoddi4+0xa6>
 80003d8:	e9c5 6300 	strd	r6, r3, [r5]
 80003dc:	e7e3      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003de:	2a00      	cmp	r2, #0
 80003e0:	f040 8090 	bne.w	8000504 <__udivmoddi4+0x204>
 80003e4:	eba1 040c 	sub.w	r4, r1, ip
 80003e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ec:	fa1f f78c 	uxth.w	r7, ip
 80003f0:	2101      	movs	r1, #1
 80003f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fa:	fb08 4416 	mls	r4, r8, r6, r4
 80003fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000402:	fb07 f006 	mul.w	r0, r7, r6
 8000406:	4298      	cmp	r0, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x11c>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x11a>
 8000414:	4298      	cmp	r0, r3
 8000416:	f200 80cd 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 800041a:	4626      	mov	r6, r4
 800041c:	1a1c      	subs	r4, r3, r0
 800041e:	fa1f f38e 	uxth.w	r3, lr
 8000422:	fbb4 f0f8 	udiv	r0, r4, r8
 8000426:	fb08 4410 	mls	r4, r8, r0, r4
 800042a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800042e:	fb00 f707 	mul.w	r7, r0, r7
 8000432:	429f      	cmp	r7, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x148>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 34ff 	add.w	r4, r0, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x146>
 8000440:	429f      	cmp	r7, r3
 8000442:	f200 80b0 	bhi.w	80005a6 <__udivmoddi4+0x2a6>
 8000446:	4620      	mov	r0, r4
 8000448:	1bdb      	subs	r3, r3, r7
 800044a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800044e:	e7a5      	b.n	800039c <__udivmoddi4+0x9c>
 8000450:	f1c1 0620 	rsb	r6, r1, #32
 8000454:	408b      	lsls	r3, r1
 8000456:	fa22 f706 	lsr.w	r7, r2, r6
 800045a:	431f      	orrs	r7, r3
 800045c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000460:	fa04 f301 	lsl.w	r3, r4, r1
 8000464:	ea43 030c 	orr.w	r3, r3, ip
 8000468:	40f4      	lsrs	r4, r6
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	0c38      	lsrs	r0, r7, #16
 8000470:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000474:	fbb4 fef0 	udiv	lr, r4, r0
 8000478:	fa1f fc87 	uxth.w	ip, r7
 800047c:	fb00 441e 	mls	r4, r0, lr, r4
 8000480:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000484:	fb0e f90c 	mul.w	r9, lr, ip
 8000488:	45a1      	cmp	r9, r4
 800048a:	fa02 f201 	lsl.w	r2, r2, r1
 800048e:	d90a      	bls.n	80004a6 <__udivmoddi4+0x1a6>
 8000490:	193c      	adds	r4, r7, r4
 8000492:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000496:	f080 8084 	bcs.w	80005a2 <__udivmoddi4+0x2a2>
 800049a:	45a1      	cmp	r9, r4
 800049c:	f240 8081 	bls.w	80005a2 <__udivmoddi4+0x2a2>
 80004a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a4:	443c      	add	r4, r7
 80004a6:	eba4 0409 	sub.w	r4, r4, r9
 80004aa:	fa1f f983 	uxth.w	r9, r3
 80004ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b2:	fb00 4413 	mls	r4, r0, r3, r4
 80004b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80004be:	45a4      	cmp	ip, r4
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x1d2>
 80004c2:	193c      	adds	r4, r7, r4
 80004c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004c8:	d267      	bcs.n	800059a <__udivmoddi4+0x29a>
 80004ca:	45a4      	cmp	ip, r4
 80004cc:	d965      	bls.n	800059a <__udivmoddi4+0x29a>
 80004ce:	3b02      	subs	r3, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004d6:	fba0 9302 	umull	r9, r3, r0, r2
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	429c      	cmp	r4, r3
 80004e0:	46ce      	mov	lr, r9
 80004e2:	469c      	mov	ip, r3
 80004e4:	d351      	bcc.n	800058a <__udivmoddi4+0x28a>
 80004e6:	d04e      	beq.n	8000586 <__udivmoddi4+0x286>
 80004e8:	b155      	cbz	r5, 8000500 <__udivmoddi4+0x200>
 80004ea:	ebb8 030e 	subs.w	r3, r8, lr
 80004ee:	eb64 040c 	sbc.w	r4, r4, ip
 80004f2:	fa04 f606 	lsl.w	r6, r4, r6
 80004f6:	40cb      	lsrs	r3, r1
 80004f8:	431e      	orrs	r6, r3
 80004fa:	40cc      	lsrs	r4, r1
 80004fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000500:	2100      	movs	r1, #0
 8000502:	e750      	b.n	80003a6 <__udivmoddi4+0xa6>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f103 	lsr.w	r1, r0, r3
 800050c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000510:	fa24 f303 	lsr.w	r3, r4, r3
 8000514:	4094      	lsls	r4, r2
 8000516:	430c      	orrs	r4, r1
 8000518:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800051c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000520:	fa1f f78c 	uxth.w	r7, ip
 8000524:	fbb3 f0f8 	udiv	r0, r3, r8
 8000528:	fb08 3110 	mls	r1, r8, r0, r3
 800052c:	0c23      	lsrs	r3, r4, #16
 800052e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000532:	fb00 f107 	mul.w	r1, r0, r7
 8000536:	4299      	cmp	r1, r3
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x24c>
 800053a:	eb1c 0303 	adds.w	r3, ip, r3
 800053e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000542:	d22c      	bcs.n	800059e <__udivmoddi4+0x29e>
 8000544:	4299      	cmp	r1, r3
 8000546:	d92a      	bls.n	800059e <__udivmoddi4+0x29e>
 8000548:	3802      	subs	r0, #2
 800054a:	4463      	add	r3, ip
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b2a4      	uxth	r4, r4
 8000550:	fbb3 f1f8 	udiv	r1, r3, r8
 8000554:	fb08 3311 	mls	r3, r8, r1, r3
 8000558:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800055c:	fb01 f307 	mul.w	r3, r1, r7
 8000560:	42a3      	cmp	r3, r4
 8000562:	d908      	bls.n	8000576 <__udivmoddi4+0x276>
 8000564:	eb1c 0404 	adds.w	r4, ip, r4
 8000568:	f101 36ff 	add.w	r6, r1, #4294967295
 800056c:	d213      	bcs.n	8000596 <__udivmoddi4+0x296>
 800056e:	42a3      	cmp	r3, r4
 8000570:	d911      	bls.n	8000596 <__udivmoddi4+0x296>
 8000572:	3902      	subs	r1, #2
 8000574:	4464      	add	r4, ip
 8000576:	1ae4      	subs	r4, r4, r3
 8000578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800057c:	e739      	b.n	80003f2 <__udivmoddi4+0xf2>
 800057e:	4604      	mov	r4, r0
 8000580:	e6f0      	b.n	8000364 <__udivmoddi4+0x64>
 8000582:	4608      	mov	r0, r1
 8000584:	e706      	b.n	8000394 <__udivmoddi4+0x94>
 8000586:	45c8      	cmp	r8, r9
 8000588:	d2ae      	bcs.n	80004e8 <__udivmoddi4+0x1e8>
 800058a:	ebb9 0e02 	subs.w	lr, r9, r2
 800058e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000592:	3801      	subs	r0, #1
 8000594:	e7a8      	b.n	80004e8 <__udivmoddi4+0x1e8>
 8000596:	4631      	mov	r1, r6
 8000598:	e7ed      	b.n	8000576 <__udivmoddi4+0x276>
 800059a:	4603      	mov	r3, r0
 800059c:	e799      	b.n	80004d2 <__udivmoddi4+0x1d2>
 800059e:	4630      	mov	r0, r6
 80005a0:	e7d4      	b.n	800054c <__udivmoddi4+0x24c>
 80005a2:	46d6      	mov	lr, sl
 80005a4:	e77f      	b.n	80004a6 <__udivmoddi4+0x1a6>
 80005a6:	4463      	add	r3, ip
 80005a8:	3802      	subs	r0, #2
 80005aa:	e74d      	b.n	8000448 <__udivmoddi4+0x148>
 80005ac:	4606      	mov	r6, r0
 80005ae:	4623      	mov	r3, r4
 80005b0:	4608      	mov	r0, r1
 80005b2:	e70f      	b.n	80003d4 <__udivmoddi4+0xd4>
 80005b4:	3e02      	subs	r6, #2
 80005b6:	4463      	add	r3, ip
 80005b8:	e730      	b.n	800041c <__udivmoddi4+0x11c>
 80005ba:	bf00      	nop

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c4:	f000 ff79 	bl	80014ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c8:	f000 f816 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005cc:	f000 fab0 	bl	8000b30 <MX_GPIO_Init>
  MX_SPI1_Init();
 80005d0:	f000 f85e 	bl	8000690 <MX_SPI1_Init>
  MX_UART5_Init();
 80005d4:	f000 fa60 	bl	8000a98 <MX_UART5_Init>
  MX_UART4_Init();
 80005d8:	f000 fa12 	bl	8000a00 <MX_UART4_Init>
  MX_TIM1_Init();
 80005dc:	f000 f890 	bl	8000700 <MX_TIM1_Init>
  MX_TIM3_Init();
 80005e0:	f000 f962 	bl	80008a8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80005e4:	f000 f9b6 	bl	8000954 <MX_TIM4_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

HAL_Delay(3500);
 80005e8:	f640 50ac 	movw	r0, #3500	@ 0xdac
 80005ec:	f000 ffd6 	bl	800159c <HAL_Delay>
//HAL_UART_Transmit_IT(&huart5, (uint8_t *)"MAGNET#4#$", 10);
fill_the_buffer();
 80005f0:	f000 fb38 	bl	8000c64 <fill_the_buffer>




  while (1)
 80005f4:	bf00      	nop
 80005f6:	e7fd      	b.n	80005f4 <main+0x34>

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b094      	sub	sp, #80	@ 0x50
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0318 	add.w	r3, r7, #24
 8000602:	2238      	movs	r2, #56	@ 0x38
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f006 f8e2 	bl	80067d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]
 8000618:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800061a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800061e:	f001 fb61 	bl	8001ce4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000622:	2302      	movs	r3, #2
 8000624:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000626:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800062a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800062c:	2340      	movs	r3, #64	@ 0x40
 800062e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000630:	2302      	movs	r3, #2
 8000632:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000634:	2302      	movs	r3, #2
 8000636:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000638:	2301      	movs	r3, #1
 800063a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 800063c:	2308      	movs	r3, #8
 800063e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000640:	2302      	movs	r3, #2
 8000642:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000644:	2302      	movs	r3, #2
 8000646:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000648:	2302      	movs	r3, #2
 800064a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064c:	f107 0318 	add.w	r3, r7, #24
 8000650:	4618      	mov	r0, r3
 8000652:	f001 fbfb 	bl	8001e4c <HAL_RCC_OscConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800065c:	f000 fc40 	bl	8000ee0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000660:	230f      	movs	r3, #15
 8000662:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000664:	2303      	movs	r3, #3
 8000666:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8000668:	2390      	movs	r3, #144	@ 0x90
 800066a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000674:	1d3b      	adds	r3, r7, #4
 8000676:	2100      	movs	r1, #0
 8000678:	4618      	mov	r0, r3
 800067a:	f001 fef9 	bl	8002470 <HAL_RCC_ClockConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000684:	f000 fc2c 	bl	8000ee0 <Error_Handler>
  }
}
 8000688:	bf00      	nop
 800068a:	3750      	adds	r7, #80	@ 0x50
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000694:	4b18      	ldr	r3, [pc, #96]	@ (80006f8 <MX_SPI1_Init+0x68>)
 8000696:	4a19      	ldr	r2, [pc, #100]	@ (80006fc <MX_SPI1_Init+0x6c>)
 8000698:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800069a:	4b17      	ldr	r3, [pc, #92]	@ (80006f8 <MX_SPI1_Init+0x68>)
 800069c:	2200      	movs	r2, #0
 800069e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006a0:	4b15      	ldr	r3, [pc, #84]	@ (80006f8 <MX_SPI1_Init+0x68>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006a6:	4b14      	ldr	r3, [pc, #80]	@ (80006f8 <MX_SPI1_Init+0x68>)
 80006a8:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80006ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ae:	4b12      	ldr	r3, [pc, #72]	@ (80006f8 <MX_SPI1_Init+0x68>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006b4:	4b10      	ldr	r3, [pc, #64]	@ (80006f8 <MX_SPI1_Init+0x68>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80006ba:	4b0f      	ldr	r3, [pc, #60]	@ (80006f8 <MX_SPI1_Init+0x68>)
 80006bc:	2200      	movs	r2, #0
 80006be:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006c0:	4b0d      	ldr	r3, [pc, #52]	@ (80006f8 <MX_SPI1_Init+0x68>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006c6:	4b0c      	ldr	r3, [pc, #48]	@ (80006f8 <MX_SPI1_Init+0x68>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006cc:	4b0a      	ldr	r3, [pc, #40]	@ (80006f8 <MX_SPI1_Init+0x68>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80006d2:	4b09      	ldr	r3, [pc, #36]	@ (80006f8 <MX_SPI1_Init+0x68>)
 80006d4:	2207      	movs	r2, #7
 80006d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006d8:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <MX_SPI1_Init+0x68>)
 80006da:	2200      	movs	r2, #0
 80006dc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80006de:	4b06      	ldr	r3, [pc, #24]	@ (80006f8 <MX_SPI1_Init+0x68>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006e4:	4804      	ldr	r0, [pc, #16]	@ (80006f8 <MX_SPI1_Init+0x68>)
 80006e6:	f002 fb2d 	bl	8002d44 <HAL_SPI_Init>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 80006f0:	f000 fbf6 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20000098 	.word	0x20000098
 80006fc:	40013000 	.word	0x40013000

08000700 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b09c      	sub	sp, #112	@ 0x70
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000706:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000714:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000720:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]
 8000730:	615a      	str	r2, [r3, #20]
 8000732:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000734:	1d3b      	adds	r3, r7, #4
 8000736:	2234      	movs	r2, #52	@ 0x34
 8000738:	2100      	movs	r1, #0
 800073a:	4618      	mov	r0, r3
 800073c:	f006 f848 	bl	80067d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000740:	4b57      	ldr	r3, [pc, #348]	@ (80008a0 <MX_TIM1_Init+0x1a0>)
 8000742:	4a58      	ldr	r2, [pc, #352]	@ (80008a4 <MX_TIM1_Init+0x1a4>)
 8000744:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000746:	4b56      	ldr	r3, [pc, #344]	@ (80008a0 <MX_TIM1_Init+0x1a0>)
 8000748:	2200      	movs	r2, #0
 800074a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800074c:	4b54      	ldr	r3, [pc, #336]	@ (80008a0 <MX_TIM1_Init+0x1a0>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 399;
 8000752:	4b53      	ldr	r3, [pc, #332]	@ (80008a0 <MX_TIM1_Init+0x1a0>)
 8000754:	f240 128f 	movw	r2, #399	@ 0x18f
 8000758:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800075a:	4b51      	ldr	r3, [pc, #324]	@ (80008a0 <MX_TIM1_Init+0x1a0>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000760:	4b4f      	ldr	r3, [pc, #316]	@ (80008a0 <MX_TIM1_Init+0x1a0>)
 8000762:	2200      	movs	r2, #0
 8000764:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000766:	4b4e      	ldr	r3, [pc, #312]	@ (80008a0 <MX_TIM1_Init+0x1a0>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800076c:	484c      	ldr	r0, [pc, #304]	@ (80008a0 <MX_TIM1_Init+0x1a0>)
 800076e:	f003 f8a9 	bl	80038c4 <HAL_TIM_Base_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000778:	f000 fbb2 	bl	8000ee0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800077c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000780:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000782:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000786:	4619      	mov	r1, r3
 8000788:	4845      	ldr	r0, [pc, #276]	@ (80008a0 <MX_TIM1_Init+0x1a0>)
 800078a:	f003 fdfd 	bl	8004388 <HAL_TIM_ConfigClockSource>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000794:	f000 fba4 	bl	8000ee0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000798:	4841      	ldr	r0, [pc, #260]	@ (80008a0 <MX_TIM1_Init+0x1a0>)
 800079a:	f003 f8ea 	bl	8003972 <HAL_TIM_PWM_Init>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80007a4:	f000 fb9c 	bl	8000ee0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007a8:	2300      	movs	r3, #0
 80007aa:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80007ac:	2300      	movs	r3, #0
 80007ae:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b0:	2300      	movs	r3, #0
 80007b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007b4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80007b8:	4619      	mov	r1, r3
 80007ba:	4839      	ldr	r0, [pc, #228]	@ (80008a0 <MX_TIM1_Init+0x1a0>)
 80007bc:	f004 fbcc 	bl	8004f58 <HAL_TIMEx_MasterConfigSynchronization>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80007c6:	f000 fb8b 	bl	8000ee0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007ca:	2360      	movs	r3, #96	@ 0x60
 80007cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007d2:	2300      	movs	r3, #0
 80007d4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007d6:	2300      	movs	r3, #0
 80007d8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007da:	2300      	movs	r3, #0
 80007dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007de:	2300      	movs	r3, #0
 80007e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007e2:	2300      	movs	r3, #0
 80007e4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007e6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80007ea:	2200      	movs	r2, #0
 80007ec:	4619      	mov	r1, r3
 80007ee:	482c      	ldr	r0, [pc, #176]	@ (80008a0 <MX_TIM1_Init+0x1a0>)
 80007f0:	f003 fcb6 	bl	8004160 <HAL_TIM_PWM_ConfigChannel>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80007fa:	f000 fb71 	bl	8000ee0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007fe:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000802:	2204      	movs	r2, #4
 8000804:	4619      	mov	r1, r3
 8000806:	4826      	ldr	r0, [pc, #152]	@ (80008a0 <MX_TIM1_Init+0x1a0>)
 8000808:	f003 fcaa 	bl	8004160 <HAL_TIM_PWM_ConfigChannel>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000812:	f000 fb65 	bl	8000ee0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000816:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800081a:	2208      	movs	r2, #8
 800081c:	4619      	mov	r1, r3
 800081e:	4820      	ldr	r0, [pc, #128]	@ (80008a0 <MX_TIM1_Init+0x1a0>)
 8000820:	f003 fc9e 	bl	8004160 <HAL_TIM_PWM_ConfigChannel>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800082a:	f000 fb59 	bl	8000ee0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800082e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000832:	220c      	movs	r2, #12
 8000834:	4619      	mov	r1, r3
 8000836:	481a      	ldr	r0, [pc, #104]	@ (80008a0 <MX_TIM1_Init+0x1a0>)
 8000838:	f003 fc92 	bl	8004160 <HAL_TIM_PWM_ConfigChannel>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8000842:	f000 fb4d 	bl	8000ee0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000846:	2300      	movs	r3, #0
 8000848:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800084a:	2300      	movs	r3, #0
 800084c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000856:	2300      	movs	r3, #0
 8000858:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800085a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800085e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000860:	2300      	movs	r3, #0
 8000862:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000864:	2300      	movs	r3, #0
 8000866:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000868:	2300      	movs	r3, #0
 800086a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800086c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000870:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000872:	2300      	movs	r3, #0
 8000874:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000876:	2300      	movs	r3, #0
 8000878:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800087a:	2300      	movs	r3, #0
 800087c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	4619      	mov	r1, r3
 8000882:	4807      	ldr	r0, [pc, #28]	@ (80008a0 <MX_TIM1_Init+0x1a0>)
 8000884:	f004 fbfe 	bl	8005084 <HAL_TIMEx_ConfigBreakDeadTime>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM1_Init+0x192>
  {
    Error_Handler();
 800088e:	f000 fb27 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000892:	4803      	ldr	r0, [pc, #12]	@ (80008a0 <MX_TIM1_Init+0x1a0>)
 8000894:	f000 fc4e 	bl	8001134 <HAL_TIM_MspPostInit>

}
 8000898:	bf00      	nop
 800089a:	3770      	adds	r7, #112	@ 0x70
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	200000fc 	.word	0x200000fc
 80008a4:	40012c00 	.word	0x40012c00

080008a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08c      	sub	sp, #48	@ 0x30
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80008ae:	f107 030c 	add.w	r3, r7, #12
 80008b2:	2224      	movs	r2, #36	@ 0x24
 80008b4:	2100      	movs	r1, #0
 80008b6:	4618      	mov	r0, r3
 80008b8:	f005 ff8a 	bl	80067d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008bc:	463b      	mov	r3, r7
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008c6:	4b21      	ldr	r3, [pc, #132]	@ (800094c <MX_TIM3_Init+0xa4>)
 80008c8:	4a21      	ldr	r2, [pc, #132]	@ (8000950 <MX_TIM3_Init+0xa8>)
 80008ca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80008cc:	4b1f      	ldr	r3, [pc, #124]	@ (800094c <MX_TIM3_Init+0xa4>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d2:	4b1e      	ldr	r3, [pc, #120]	@ (800094c <MX_TIM3_Init+0xa4>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80008d8:	4b1c      	ldr	r3, [pc, #112]	@ (800094c <MX_TIM3_Init+0xa4>)
 80008da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80008de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008e0:	4b1a      	ldr	r3, [pc, #104]	@ (800094c <MX_TIM3_Init+0xa4>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008e6:	4b19      	ldr	r3, [pc, #100]	@ (800094c <MX_TIM3_Init+0xa4>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80008ec:	2301      	movs	r3, #1
 80008ee:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008f0:	2300      	movs	r3, #0
 80008f2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008f4:	2301      	movs	r3, #1
 80008f6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008f8:	2300      	movs	r3, #0
 80008fa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000900:	2300      	movs	r3, #0
 8000902:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000904:	2301      	movs	r3, #1
 8000906:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000908:	2300      	movs	r3, #0
 800090a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800090c:	2300      	movs	r3, #0
 800090e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000910:	f107 030c 	add.w	r3, r7, #12
 8000914:	4619      	mov	r1, r3
 8000916:	480d      	ldr	r0, [pc, #52]	@ (800094c <MX_TIM3_Init+0xa4>)
 8000918:	f003 f99e 	bl	8003c58 <HAL_TIM_Encoder_Init>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000922:	f000 fadd 	bl	8000ee0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000926:	2300      	movs	r3, #0
 8000928:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800092a:	2300      	movs	r3, #0
 800092c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800092e:	463b      	mov	r3, r7
 8000930:	4619      	mov	r1, r3
 8000932:	4806      	ldr	r0, [pc, #24]	@ (800094c <MX_TIM3_Init+0xa4>)
 8000934:	f004 fb10 	bl	8004f58 <HAL_TIMEx_MasterConfigSynchronization>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800093e:	f000 facf 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	3730      	adds	r7, #48	@ 0x30
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000148 	.word	0x20000148
 8000950:	40000400 	.word	0x40000400

08000954 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08c      	sub	sp, #48	@ 0x30
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800095a:	f107 030c 	add.w	r3, r7, #12
 800095e:	2224      	movs	r2, #36	@ 0x24
 8000960:	2100      	movs	r1, #0
 8000962:	4618      	mov	r0, r3
 8000964:	f005 ff34 	bl	80067d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000968:	463b      	mov	r3, r7
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000972:	4b21      	ldr	r3, [pc, #132]	@ (80009f8 <MX_TIM4_Init+0xa4>)
 8000974:	4a21      	ldr	r2, [pc, #132]	@ (80009fc <MX_TIM4_Init+0xa8>)
 8000976:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000978:	4b1f      	ldr	r3, [pc, #124]	@ (80009f8 <MX_TIM4_Init+0xa4>)
 800097a:	2200      	movs	r2, #0
 800097c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800097e:	4b1e      	ldr	r3, [pc, #120]	@ (80009f8 <MX_TIM4_Init+0xa4>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000984:	4b1c      	ldr	r3, [pc, #112]	@ (80009f8 <MX_TIM4_Init+0xa4>)
 8000986:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800098a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800098c:	4b1a      	ldr	r3, [pc, #104]	@ (80009f8 <MX_TIM4_Init+0xa4>)
 800098e:	2200      	movs	r2, #0
 8000990:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000992:	4b19      	ldr	r3, [pc, #100]	@ (80009f8 <MX_TIM4_Init+0xa4>)
 8000994:	2280      	movs	r2, #128	@ 0x80
 8000996:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000998:	2303      	movs	r3, #3
 800099a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800099c:	2300      	movs	r3, #0
 800099e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009a0:	2301      	movs	r3, #1
 80009a2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80009ac:	2300      	movs	r3, #0
 80009ae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80009b0:	2301      	movs	r3, #1
 80009b2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80009b4:	2300      	movs	r3, #0
 80009b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80009bc:	f107 030c 	add.w	r3, r7, #12
 80009c0:	4619      	mov	r1, r3
 80009c2:	480d      	ldr	r0, [pc, #52]	@ (80009f8 <MX_TIM4_Init+0xa4>)
 80009c4:	f003 f948 	bl	8003c58 <HAL_TIM_Encoder_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80009ce:	f000 fa87 	bl	8000ee0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009d2:	2300      	movs	r3, #0
 80009d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009d6:	2300      	movs	r3, #0
 80009d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009da:	463b      	mov	r3, r7
 80009dc:	4619      	mov	r1, r3
 80009de:	4806      	ldr	r0, [pc, #24]	@ (80009f8 <MX_TIM4_Init+0xa4>)
 80009e0:	f004 faba 	bl	8004f58 <HAL_TIMEx_MasterConfigSynchronization>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80009ea:	f000 fa79 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80009ee:	bf00      	nop
 80009f0:	3730      	adds	r7, #48	@ 0x30
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000194 	.word	0x20000194
 80009fc:	40000800 	.word	0x40000800

08000a00 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000a04:	4b22      	ldr	r3, [pc, #136]	@ (8000a90 <MX_UART4_Init+0x90>)
 8000a06:	4a23      	ldr	r2, [pc, #140]	@ (8000a94 <MX_UART4_Init+0x94>)
 8000a08:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000a0a:	4b21      	ldr	r3, [pc, #132]	@ (8000a90 <MX_UART4_Init+0x90>)
 8000a0c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a10:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a12:	4b1f      	ldr	r3, [pc, #124]	@ (8000a90 <MX_UART4_Init+0x90>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a18:	4b1d      	ldr	r3, [pc, #116]	@ (8000a90 <MX_UART4_Init+0x90>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000a1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a90 <MX_UART4_Init+0x90>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a24:	4b1a      	ldr	r3, [pc, #104]	@ (8000a90 <MX_UART4_Init+0x90>)
 8000a26:	220c      	movs	r2, #12
 8000a28:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a2a:	4b19      	ldr	r3, [pc, #100]	@ (8000a90 <MX_UART4_Init+0x90>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a30:	4b17      	ldr	r3, [pc, #92]	@ (8000a90 <MX_UART4_Init+0x90>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a36:	4b16      	ldr	r3, [pc, #88]	@ (8000a90 <MX_UART4_Init+0x90>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a3c:	4b14      	ldr	r3, [pc, #80]	@ (8000a90 <MX_UART4_Init+0x90>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a42:	4b13      	ldr	r3, [pc, #76]	@ (8000a90 <MX_UART4_Init+0x90>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a48:	4811      	ldr	r0, [pc, #68]	@ (8000a90 <MX_UART4_Init+0x90>)
 8000a4a:	f004 fbf5 	bl	8005238 <HAL_UART_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000a54:	f000 fa44 	bl	8000ee0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a58:	2100      	movs	r1, #0
 8000a5a:	480d      	ldr	r0, [pc, #52]	@ (8000a90 <MX_UART4_Init+0x90>)
 8000a5c:	f005 fdc1 	bl	80065e2 <HAL_UARTEx_SetTxFifoThreshold>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000a66:	f000 fa3b 	bl	8000ee0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	4808      	ldr	r0, [pc, #32]	@ (8000a90 <MX_UART4_Init+0x90>)
 8000a6e:	f005 fdf6 	bl	800665e <HAL_UARTEx_SetRxFifoThreshold>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000a78:	f000 fa32 	bl	8000ee0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000a7c:	4804      	ldr	r0, [pc, #16]	@ (8000a90 <MX_UART4_Init+0x90>)
 8000a7e:	f005 fd77 	bl	8006570 <HAL_UARTEx_DisableFifoMode>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000a88:	f000 fa2a 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	200001e0 	.word	0x200001e0
 8000a94:	40004c00 	.word	0x40004c00

08000a98 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000a9c:	4b22      	ldr	r3, [pc, #136]	@ (8000b28 <MX_UART5_Init+0x90>)
 8000a9e:	4a23      	ldr	r2, [pc, #140]	@ (8000b2c <MX_UART5_Init+0x94>)
 8000aa0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000aa2:	4b21      	ldr	r3, [pc, #132]	@ (8000b28 <MX_UART5_Init+0x90>)
 8000aa4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000aa8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000aaa:	4b1f      	ldr	r3, [pc, #124]	@ (8000b28 <MX_UART5_Init+0x90>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8000b28 <MX_UART5_Init+0x90>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000ab6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b28 <MX_UART5_Init+0x90>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000abc:	4b1a      	ldr	r3, [pc, #104]	@ (8000b28 <MX_UART5_Init+0x90>)
 8000abe:	220c      	movs	r2, #12
 8000ac0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac2:	4b19      	ldr	r3, [pc, #100]	@ (8000b28 <MX_UART5_Init+0x90>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac8:	4b17      	ldr	r3, [pc, #92]	@ (8000b28 <MX_UART5_Init+0x90>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ace:	4b16      	ldr	r3, [pc, #88]	@ (8000b28 <MX_UART5_Init+0x90>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ad4:	4b14      	ldr	r3, [pc, #80]	@ (8000b28 <MX_UART5_Init+0x90>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ada:	4b13      	ldr	r3, [pc, #76]	@ (8000b28 <MX_UART5_Init+0x90>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000ae0:	4811      	ldr	r0, [pc, #68]	@ (8000b28 <MX_UART5_Init+0x90>)
 8000ae2:	f004 fba9 	bl	8005238 <HAL_UART_Init>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8000aec:	f000 f9f8 	bl	8000ee0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000af0:	2100      	movs	r1, #0
 8000af2:	480d      	ldr	r0, [pc, #52]	@ (8000b28 <MX_UART5_Init+0x90>)
 8000af4:	f005 fd75 	bl	80065e2 <HAL_UARTEx_SetTxFifoThreshold>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8000afe:	f000 f9ef 	bl	8000ee0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b02:	2100      	movs	r1, #0
 8000b04:	4808      	ldr	r0, [pc, #32]	@ (8000b28 <MX_UART5_Init+0x90>)
 8000b06:	f005 fdaa 	bl	800665e <HAL_UARTEx_SetRxFifoThreshold>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8000b10:	f000 f9e6 	bl	8000ee0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8000b14:	4804      	ldr	r0, [pc, #16]	@ (8000b28 <MX_UART5_Init+0x90>)
 8000b16:	f005 fd2b 	bl	8006570 <HAL_UARTEx_DisableFifoMode>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8000b20:	f000 f9de 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20000274 	.word	0x20000274
 8000b2c:	40005000 	.word	0x40005000

08000b30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08c      	sub	sp, #48	@ 0x30
 8000b34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b36:	f107 031c 	add.w	r3, r7, #28
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
 8000b42:	60da      	str	r2, [r3, #12]
 8000b44:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b46:	4b44      	ldr	r3, [pc, #272]	@ (8000c58 <MX_GPIO_Init+0x128>)
 8000b48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b4a:	4a43      	ldr	r2, [pc, #268]	@ (8000c58 <MX_GPIO_Init+0x128>)
 8000b4c:	f043 0310 	orr.w	r3, r3, #16
 8000b50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b52:	4b41      	ldr	r3, [pc, #260]	@ (8000c58 <MX_GPIO_Init+0x128>)
 8000b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b56:	f003 0310 	and.w	r3, r3, #16
 8000b5a:	61bb      	str	r3, [r7, #24]
 8000b5c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b5e:	4b3e      	ldr	r3, [pc, #248]	@ (8000c58 <MX_GPIO_Init+0x128>)
 8000b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b62:	4a3d      	ldr	r2, [pc, #244]	@ (8000c58 <MX_GPIO_Init+0x128>)
 8000b64:	f043 0320 	orr.w	r3, r3, #32
 8000b68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b6a:	4b3b      	ldr	r3, [pc, #236]	@ (8000c58 <MX_GPIO_Init+0x128>)
 8000b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b6e:	f003 0320 	and.w	r3, r3, #32
 8000b72:	617b      	str	r3, [r7, #20]
 8000b74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b76:	4b38      	ldr	r3, [pc, #224]	@ (8000c58 <MX_GPIO_Init+0x128>)
 8000b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b7a:	4a37      	ldr	r2, [pc, #220]	@ (8000c58 <MX_GPIO_Init+0x128>)
 8000b7c:	f043 0304 	orr.w	r3, r3, #4
 8000b80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b82:	4b35      	ldr	r3, [pc, #212]	@ (8000c58 <MX_GPIO_Init+0x128>)
 8000b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b86:	f003 0304 	and.w	r3, r3, #4
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8e:	4b32      	ldr	r3, [pc, #200]	@ (8000c58 <MX_GPIO_Init+0x128>)
 8000b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b92:	4a31      	ldr	r2, [pc, #196]	@ (8000c58 <MX_GPIO_Init+0x128>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b9a:	4b2f      	ldr	r3, [pc, #188]	@ (8000c58 <MX_GPIO_Init+0x128>)
 8000b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ba6:	4b2c      	ldr	r3, [pc, #176]	@ (8000c58 <MX_GPIO_Init+0x128>)
 8000ba8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000baa:	4a2b      	ldr	r2, [pc, #172]	@ (8000c58 <MX_GPIO_Init+0x128>)
 8000bac:	f043 0308 	orr.w	r3, r3, #8
 8000bb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bb2:	4b29      	ldr	r3, [pc, #164]	@ (8000c58 <MX_GPIO_Init+0x128>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bb6:	f003 0308 	and.w	r3, r3, #8
 8000bba:	60bb      	str	r3, [r7, #8]
 8000bbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bbe:	4b26      	ldr	r3, [pc, #152]	@ (8000c58 <MX_GPIO_Init+0x128>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bc2:	4a25      	ldr	r2, [pc, #148]	@ (8000c58 <MX_GPIO_Init+0x128>)
 8000bc4:	f043 0302 	orr.w	r3, r3, #2
 8000bc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bca:	4b23      	ldr	r3, [pc, #140]	@ (8000c58 <MX_GPIO_Init+0x128>)
 8000bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bce:	f003 0302 	and.w	r3, r3, #2
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2170      	movs	r1, #112	@ 0x70
 8000bda:	4820      	ldr	r0, [pc, #128]	@ (8000c5c <MX_GPIO_Init+0x12c>)
 8000bdc:	f001 f86a 	bl	8001cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000be0:	2201      	movs	r2, #1
 8000be2:	2108      	movs	r1, #8
 8000be4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000be8:	f001 f864 	bl	8001cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8000bec:	2201      	movs	r2, #1
 8000bee:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000bf2:	481a      	ldr	r0, [pc, #104]	@ (8000c5c <MX_GPIO_Init+0x12c>)
 8000bf4:	f001 f85e 	bl	8001cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE4 PE5 PE6 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_11;
 8000bf8:	f44f 6307 	mov.w	r3, #2160	@ 0x870
 8000bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c0a:	f107 031c 	add.w	r3, r7, #28
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4812      	ldr	r0, [pc, #72]	@ (8000c5c <MX_GPIO_Init+0x12c>)
 8000c12:	f000 feb5 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c16:	2308      	movs	r3, #8
 8000c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	2300      	movs	r3, #0
 8000c24:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c26:	f107 031c 	add.w	r3, r7, #28
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c30:	f000 fea6 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : LS2_DRV1_NO_Pin LS1_DRV1_NO_Pin */
  GPIO_InitStruct.Pin = LS2_DRV1_NO_Pin|LS1_DRV1_NO_Pin;
 8000c34:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8000c38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c42:	f107 031c 	add.w	r3, r7, #28
 8000c46:	4619      	mov	r1, r3
 8000c48:	4805      	ldr	r0, [pc, #20]	@ (8000c60 <MX_GPIO_Init+0x130>)
 8000c4a:	f000 fe99 	bl	8001980 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c4e:	bf00      	nop
 8000c50:	3730      	adds	r7, #48	@ 0x30
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40021000 	.word	0x40021000
 8000c5c:	48001000 	.word	0x48001000
 8000c60:	48000c00 	.word	0x48000c00

08000c64 <fill_the_buffer>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void fill_the_buffer(void)
{
 8000c64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c68:	b085      	sub	sp, #20
 8000c6a:	af00      	add	r7, sp, #0
    uint8_t RXindex = 0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	73fb      	strb	r3, [r7, #15]

    while(1)
    {

    // Read initial pin state
    pinstate = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 8000c70:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c78:	f001 f804 	bl	8001c84 <HAL_GPIO_ReadPin>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	73bb      	strb	r3, [r7, #14]
    if (!pinstate)
 8000c80:	7bbb      	ldrb	r3, [r7, #14]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d15b      	bne.n	8000d3e <fill_the_buffer+0xda>
    {
        // Clear the buffer if pin is low
        memset(buffer, 0, sizeof(buffer));
 8000c86:	2220      	movs	r2, #32
 8000c88:	2100      	movs	r1, #0
 8000c8a:	483f      	ldr	r0, [pc, #252]	@ (8000d88 <fill_the_buffer+0x124>)
 8000c8c:	f005 fda0 	bl	80067d0 <memset>
    }

    while (!pinstate)
 8000c90:	e055      	b.n	8000d3e <fill_the_buffer+0xda>
    {
        // Receive data from SPI
        HAL_SPI_Receive(&hspi1, &receivedData, 1, HAL_MAX_DELAY);
 8000c92:	1cf9      	adds	r1, r7, #3
 8000c94:	f04f 33ff 	mov.w	r3, #4294967295
 8000c98:	2201      	movs	r2, #1
 8000c9a:	483c      	ldr	r0, [pc, #240]	@ (8000d8c <fill_the_buffer+0x128>)
 8000c9c:	f002 f8fd 	bl	8002e9a <HAL_SPI_Receive>

        // Check for buffer overflow
        if (RXindex < MAX_BUFFER_SIZE)
 8000ca0:	7bfb      	ldrb	r3, [r7, #15]
 8000ca2:	2b1f      	cmp	r3, #31
 8000ca4:	d843      	bhi.n	8000d2e <fill_the_buffer+0xca>
        {
            // Store received data in buffer
            buffer[RXindex++] = (char)receivedData;
 8000ca6:	7bfb      	ldrb	r3, [r7, #15]
 8000ca8:	1c5a      	adds	r2, r3, #1
 8000caa:	73fa      	strb	r2, [r7, #15]
 8000cac:	461a      	mov	r2, r3
 8000cae:	78f9      	ldrb	r1, [r7, #3]
 8000cb0:	4b35      	ldr	r3, [pc, #212]	@ (8000d88 <fill_the_buffer+0x124>)
 8000cb2:	5499      	strb	r1, [r3, r2]

            // Check if end of message
            if ((char)receivedData == '$')
 8000cb4:	78fb      	ldrb	r3, [r7, #3]
 8000cb6:	2b24      	cmp	r3, #36	@ 0x24
 8000cb8:	d139      	bne.n	8000d2e <fill_the_buffer+0xca>
            {
 8000cba:	466b      	mov	r3, sp
 8000cbc:	461e      	mov	r6, r3
            	HAL_UART_Transmit(&huart5, (uint8_t *)buffer, RXindex, HAL_MAX_DELAY);
 8000cbe:	7bfb      	ldrb	r3, [r7, #15]
 8000cc0:	b29a      	uxth	r2, r3
 8000cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc6:	4930      	ldr	r1, [pc, #192]	@ (8000d88 <fill_the_buffer+0x124>)
 8000cc8:	4831      	ldr	r0, [pc, #196]	@ (8000d90 <fill_the_buffer+0x12c>)
 8000cca:	f004 fb05 	bl	80052d8 <HAL_UART_Transmit>
            	char command[RXindex];
 8000cce:	7bf9      	ldrb	r1, [r7, #15]
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	60bb      	str	r3, [r7, #8]
 8000cd6:	b2cb      	uxtb	r3, r1
 8000cd8:	2200      	movs	r2, #0
 8000cda:	461c      	mov	r4, r3
 8000cdc:	4615      	mov	r5, r2
 8000cde:	f04f 0200 	mov.w	r2, #0
 8000ce2:	f04f 0300 	mov.w	r3, #0
 8000ce6:	00eb      	lsls	r3, r5, #3
 8000ce8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000cec:	00e2      	lsls	r2, r4, #3
 8000cee:	b2cb      	uxtb	r3, r1
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	4698      	mov	r8, r3
 8000cf4:	4691      	mov	r9, r2
 8000cf6:	f04f 0200 	mov.w	r2, #0
 8000cfa:	f04f 0300 	mov.w	r3, #0
 8000cfe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000d02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000d06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	3307      	adds	r3, #7
 8000d0e:	08db      	lsrs	r3, r3, #3
 8000d10:	00db      	lsls	r3, r3, #3
 8000d12:	ebad 0d03 	sub.w	sp, sp, r3
 8000d16:	466b      	mov	r3, sp
 8000d18:	3300      	adds	r3, #0
 8000d1a:	607b      	str	r3, [r7, #4]
            	strncpy(command, buffer, RXindex);
 8000d1c:	7bfb      	ldrb	r3, [r7, #15]
 8000d1e:	461a      	mov	r2, r3
 8000d20:	4919      	ldr	r1, [pc, #100]	@ (8000d88 <fill_the_buffer+0x124>)
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f005 fd6e 	bl	8006804 <strncpy>


                RXindex = 0; // Reset buffer index
 8000d28:	2300      	movs	r3, #0
 8000d2a:	73fb      	strb	r3, [r7, #15]
 8000d2c:	46b5      	mov	sp, r6
            }
            */
        }

        // Update pin state
        pinstate = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 8000d2e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d36:	f000 ffa5 	bl	8001c84 <HAL_GPIO_ReadPin>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	73bb      	strb	r3, [r7, #14]
    while (!pinstate)
 8000d3e:	7bbb      	ldrb	r3, [r7, #14]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d0a6      	beq.n	8000c92 <fill_the_buffer+0x2e>
    }
    if(strncmp(buffer, "ROTANG", 6) == 0)
 8000d44:	2206      	movs	r2, #6
 8000d46:	4913      	ldr	r1, [pc, #76]	@ (8000d94 <fill_the_buffer+0x130>)
 8000d48:	480f      	ldr	r0, [pc, #60]	@ (8000d88 <fill_the_buffer+0x124>)
 8000d4a:	f005 fd49 	bl	80067e0 <strncmp>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d107      	bne.n	8000d64 <fill_the_buffer+0x100>
              {
            	rotang(extractValueFromCommand(buffer));
 8000d54:	480c      	ldr	r0, [pc, #48]	@ (8000d88 <fill_the_buffer+0x124>)
 8000d56:	f000 f8ab 	bl	8000eb0 <extractValueFromCommand>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f000 f849 	bl	8000df4 <rotang>
 8000d62:	e785      	b.n	8000c70 <fill_the_buffer+0xc>
                  //else if(buffer[4]=='1'){rot(1);}
                 // else{rot(0);}

               }

    else if(strncmp(buffer, "ROT", 3) == 0)
 8000d64:	2203      	movs	r2, #3
 8000d66:	490c      	ldr	r1, [pc, #48]	@ (8000d98 <fill_the_buffer+0x134>)
 8000d68:	4807      	ldr	r0, [pc, #28]	@ (8000d88 <fill_the_buffer+0x124>)
 8000d6a:	f005 fd39 	bl	80067e0 <strncmp>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	f47f af7d 	bne.w	8000c70 <fill_the_buffer+0xc>
      {
    	rot(extractValueFromCommand(buffer));
 8000d76:	4804      	ldr	r0, [pc, #16]	@ (8000d88 <fill_the_buffer+0x124>)
 8000d78:	f000 f89a 	bl	8000eb0 <extractValueFromCommand>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 f80c 	bl	8000d9c <rot>
    pinstate = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 8000d84:	e774      	b.n	8000c70 <fill_the_buffer+0xc>
 8000d86:	bf00      	nop
 8000d88:	20000078 	.word	0x20000078
 8000d8c:	20000098 	.word	0x20000098
 8000d90:	20000274 	.word	0x20000274
 8000d94:	08007428 	.word	0x08007428
 8000d98:	08007430 	.word	0x08007430

08000d9c <rot>:


}

void rot(int32_t motor_speed)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
    // Ustawienie odpowiednich wartości wypełnienia PWM
    // aby obrócić silnik zgodnie z ruchem wskazówek zegara


	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000da4:	2108      	movs	r1, #8
 8000da6:	4810      	ldr	r0, [pc, #64]	@ (8000de8 <rot+0x4c>)
 8000da8:	f002 fe44 	bl	8003a34 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000dac:	210c      	movs	r1, #12
 8000dae:	480e      	ldr	r0, [pc, #56]	@ (8000de8 <rot+0x4c>)
 8000db0:	f002 fe40 	bl	8003a34 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000db4:	213c      	movs	r1, #60	@ 0x3c
 8000db6:	480d      	ldr	r0, [pc, #52]	@ (8000dec <rot+0x50>)
 8000db8:	f002 fff4 	bl	8003da4 <HAL_TIM_Encoder_Start>





	if(motor_speed >= 0)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	db06      	blt.n	8000dd0 <rot+0x34>
	{

		TIM1->CCR3 = motor_speed;
 8000dc2:	4a0b      	ldr	r2, [pc, #44]	@ (8000df0 <rot+0x54>)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	63d3      	str	r3, [r2, #60]	@ 0x3c
		TIM1->CCR4 = 0;
 8000dc8:	4b09      	ldr	r3, [pc, #36]	@ (8000df0 <rot+0x54>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	641a      	str	r2, [r3, #64]	@ 0x40





}
 8000dce:	e006      	b.n	8000dde <rot+0x42>
		TIM1->CCR3 = 0;
 8000dd0:	4b07      	ldr	r3, [pc, #28]	@ (8000df0 <rot+0x54>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM1->CCR4 = -motor_speed;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	425a      	negs	r2, r3
 8000dda:	4b05      	ldr	r3, [pc, #20]	@ (8000df0 <rot+0x54>)
 8000ddc:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	200000fc 	.word	0x200000fc
 8000dec:	20000148 	.word	0x20000148
 8000df0:	40012c00 	.word	0x40012c00

08000df4 <rotang>:

void rotang(int32_t angle)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4826      	ldr	r0, [pc, #152]	@ (8000e98 <rotang+0xa4>)
 8000e00:	f002 fe18 	bl	8003a34 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000e04:	2104      	movs	r1, #4
 8000e06:	4824      	ldr	r0, [pc, #144]	@ (8000e98 <rotang+0xa4>)
 8000e08:	f002 fe14 	bl	8003a34 <HAL_TIM_PWM_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000e0c:	213c      	movs	r1, #60	@ 0x3c
 8000e0e:	4823      	ldr	r0, [pc, #140]	@ (8000e9c <rotang+0xa8>)
 8000e10:	f002 ffc8 	bl	8003da4 <HAL_TIM_Encoder_Start>

    float kp = 0.1;
 8000e14:	4b22      	ldr	r3, [pc, #136]	@ (8000ea0 <rotang+0xac>)
 8000e16:	617b      	str	r3, [r7, #20]

    while (1) {
        int32_t encoderValue = TIM4->CNT;
 8000e18:	4b22      	ldr	r3, [pc, #136]	@ (8000ea4 <rotang+0xb0>)
 8000e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e1c:	613b      	str	r3, [r7, #16]
        int32_t error = angle - encoderValue;
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	1ad3      	subs	r3, r2, r3
 8000e24:	60fb      	str	r3, [r7, #12]

        int32_t pwm_value = (int32_t)(kp * error);
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	ee07 3a90 	vmov	s15, r3
 8000e2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e30:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e3c:	ee17 3a90 	vmov	r3, s15
 8000e40:	60bb      	str	r3, [r7, #8]

        if (error > 0)
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	dd06      	ble.n	8000e56 <rotang+0x62>
        {
            TIM1->CCR1 = pwm_value;
 8000e48:	4a17      	ldr	r2, [pc, #92]	@ (8000ea8 <rotang+0xb4>)
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	6353      	str	r3, [r2, #52]	@ 0x34
            TIM1->CCR2 = 0;
 8000e4e:	4b16      	ldr	r3, [pc, #88]	@ (8000ea8 <rotang+0xb4>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	639a      	str	r2, [r3, #56]	@ 0x38
 8000e54:	e006      	b.n	8000e64 <rotang+0x70>
        } else {
            TIM1->CCR1 = 0;
 8000e56:	4b14      	ldr	r3, [pc, #80]	@ (8000ea8 <rotang+0xb4>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	635a      	str	r2, [r3, #52]	@ 0x34
            TIM1->CCR2 = -pwm_value;
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	425a      	negs	r2, r3
 8000e60:	4b11      	ldr	r3, [pc, #68]	@ (8000ea8 <rotang+0xb4>)
 8000e62:	639a      	str	r2, [r3, #56]	@ 0x38
        }

        //GPIO_PinState pinState = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12);
        if (abs(error) <= 60 ) { //|| pinState == GPIO_PIN_RESET
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	f113 0f3c 	cmn.w	r3, #60	@ 0x3c
 8000e6a:	dbd5      	blt.n	8000e18 <rotang+0x24>
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	2b3c      	cmp	r3, #60	@ 0x3c
 8000e70:	dcd2      	bgt.n	8000e18 <rotang+0x24>
            // Stop the motor
            TIM1->CCR1 = 0;
 8000e72:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea8 <rotang+0xb4>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	635a      	str	r2, [r3, #52]	@ 0x34
            TIM1->CCR2 = 0;
 8000e78:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea8 <rotang+0xb4>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	639a      	str	r2, [r3, #56]	@ 0x38
            error = 0 ;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60fb      	str	r3, [r7, #12]
            memset(buffer, 0, sizeof(buffer));
 8000e82:	2220      	movs	r2, #32
 8000e84:	2100      	movs	r1, #0
 8000e86:	4809      	ldr	r0, [pc, #36]	@ (8000eac <rotang+0xb8>)
 8000e88:	f005 fca2 	bl	80067d0 <memset>
            break;
 8000e8c:	bf00      	nop
        }
    }
}
 8000e8e:	bf00      	nop
 8000e90:	3718      	adds	r7, #24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	200000fc 	.word	0x200000fc
 8000e9c:	20000194 	.word	0x20000194
 8000ea0:	3dcccccd 	.word	0x3dcccccd
 8000ea4:	40000800 	.word	0x40000800
 8000ea8:	40012c00 	.word	0x40012c00
 8000eac:	20000078 	.word	0x20000078

08000eb0 <extractValueFromCommand>:
int32_t extractValueFromCommand(const char* command)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
    int32_t value;
    if (sscanf(command, "ROTANG#%d#$", &value) == 1)
 8000eb8:	f107 030c 	add.w	r3, r7, #12
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4907      	ldr	r1, [pc, #28]	@ (8000edc <extractValueFromCommand+0x2c>)
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f005 fc59 	bl	8006778 <siscanf>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d101      	bne.n	8000ed0 <extractValueFromCommand+0x20>
    {
        return value;
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	e000      	b.n	8000ed2 <extractValueFromCommand+0x22>
    }
    else
    {
        // Handle the case where the command format is incorrect

        return 0; // or some other error indicator
 8000ed0:	2300      	movs	r3, #0
    }
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	08007434 	.word	0x08007434

08000ee0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee4:	b672      	cpsid	i
}
 8000ee6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee8:	bf00      	nop
 8000eea:	e7fd      	b.n	8000ee8 <Error_Handler+0x8>

08000eec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef2:	4b0f      	ldr	r3, [pc, #60]	@ (8000f30 <HAL_MspInit+0x44>)
 8000ef4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ef6:	4a0e      	ldr	r2, [pc, #56]	@ (8000f30 <HAL_MspInit+0x44>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000efe:	4b0c      	ldr	r3, [pc, #48]	@ (8000f30 <HAL_MspInit+0x44>)
 8000f00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f0a:	4b09      	ldr	r3, [pc, #36]	@ (8000f30 <HAL_MspInit+0x44>)
 8000f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f0e:	4a08      	ldr	r2, [pc, #32]	@ (8000f30 <HAL_MspInit+0x44>)
 8000f10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f14:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f16:	4b06      	ldr	r3, [pc, #24]	@ (8000f30 <HAL_MspInit+0x44>)
 8000f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f1e:	603b      	str	r3, [r7, #0]
 8000f20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000f22:	f000 ff83 	bl	8001e2c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40021000 	.word	0x40021000

08000f34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08a      	sub	sp, #40	@ 0x28
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a26      	ldr	r2, [pc, #152]	@ (8000fec <HAL_SPI_MspInit+0xb8>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d145      	bne.n	8000fe2 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f56:	4b26      	ldr	r3, [pc, #152]	@ (8000ff0 <HAL_SPI_MspInit+0xbc>)
 8000f58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f5a:	4a25      	ldr	r2, [pc, #148]	@ (8000ff0 <HAL_SPI_MspInit+0xbc>)
 8000f5c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f60:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f62:	4b23      	ldr	r3, [pc, #140]	@ (8000ff0 <HAL_SPI_MspInit+0xbc>)
 8000f64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f66:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6e:	4b20      	ldr	r3, [pc, #128]	@ (8000ff0 <HAL_SPI_MspInit+0xbc>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f72:	4a1f      	ldr	r2, [pc, #124]	@ (8000ff0 <HAL_SPI_MspInit+0xbc>)
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f7a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ff0 <HAL_SPI_MspInit+0xbc>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f86:	4b1a      	ldr	r3, [pc, #104]	@ (8000ff0 <HAL_SPI_MspInit+0xbc>)
 8000f88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f8a:	4a19      	ldr	r2, [pc, #100]	@ (8000ff0 <HAL_SPI_MspInit+0xbc>)
 8000f8c:	f043 0302 	orr.w	r3, r3, #2
 8000f90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f92:	4b17      	ldr	r3, [pc, #92]	@ (8000ff0 <HAL_SPI_MspInit+0xbc>)
 8000f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f96:	f003 0302 	and.w	r3, r3, #2
 8000f9a:	60bb      	str	r3, [r7, #8]
 8000f9c:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000fa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fac:	2303      	movs	r3, #3
 8000fae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fb0:	2305      	movs	r3, #5
 8000fb2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb4:	f107 0314 	add.w	r3, r7, #20
 8000fb8:	4619      	mov	r1, r3
 8000fba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fbe:	f000 fcdf 	bl	8001980 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000fc2:	2338      	movs	r3, #56	@ 0x38
 8000fc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fd2:	2305      	movs	r3, #5
 8000fd4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd6:	f107 0314 	add.w	r3, r7, #20
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4805      	ldr	r0, [pc, #20]	@ (8000ff4 <HAL_SPI_MspInit+0xc0>)
 8000fde:	f000 fccf 	bl	8001980 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000fe2:	bf00      	nop
 8000fe4:	3728      	adds	r7, #40	@ 0x28
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40013000 	.word	0x40013000
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	48000400 	.word	0x48000400

08000ff8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a0a      	ldr	r2, [pc, #40]	@ (8001030 <HAL_TIM_Base_MspInit+0x38>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d10b      	bne.n	8001022 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800100a:	4b0a      	ldr	r3, [pc, #40]	@ (8001034 <HAL_TIM_Base_MspInit+0x3c>)
 800100c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800100e:	4a09      	ldr	r2, [pc, #36]	@ (8001034 <HAL_TIM_Base_MspInit+0x3c>)
 8001010:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001014:	6613      	str	r3, [r2, #96]	@ 0x60
 8001016:	4b07      	ldr	r3, [pc, #28]	@ (8001034 <HAL_TIM_Base_MspInit+0x3c>)
 8001018:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800101a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001022:	bf00      	nop
 8001024:	3714      	adds	r7, #20
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	40012c00 	.word	0x40012c00
 8001034:	40021000 	.word	0x40021000

08001038 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08c      	sub	sp, #48	@ 0x30
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001040:	f107 031c 	add.w	r3, r7, #28
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a33      	ldr	r2, [pc, #204]	@ (8001124 <HAL_TIM_Encoder_MspInit+0xec>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d128      	bne.n	80010ac <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800105a:	4b33      	ldr	r3, [pc, #204]	@ (8001128 <HAL_TIM_Encoder_MspInit+0xf0>)
 800105c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800105e:	4a32      	ldr	r2, [pc, #200]	@ (8001128 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001060:	f043 0302 	orr.w	r3, r3, #2
 8001064:	6593      	str	r3, [r2, #88]	@ 0x58
 8001066:	4b30      	ldr	r3, [pc, #192]	@ (8001128 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	61bb      	str	r3, [r7, #24]
 8001070:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001072:	4b2d      	ldr	r3, [pc, #180]	@ (8001128 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001076:	4a2c      	ldr	r2, [pc, #176]	@ (8001128 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001078:	f043 0304 	orr.w	r3, r3, #4
 800107c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800107e:	4b2a      	ldr	r3, [pc, #168]	@ (8001128 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001082:	f003 0304 	and.w	r3, r3, #4
 8001086:	617b      	str	r3, [r7, #20]
 8001088:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Motor_B_EN_CH1_Pin|Motor_B_EN_CH2_Pin;
 800108a:	23c0      	movs	r3, #192	@ 0xc0
 800108c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108e:	2302      	movs	r3, #2
 8001090:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001096:	2300      	movs	r3, #0
 8001098:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800109a:	2302      	movs	r3, #2
 800109c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800109e:	f107 031c 	add.w	r3, r7, #28
 80010a2:	4619      	mov	r1, r3
 80010a4:	4821      	ldr	r0, [pc, #132]	@ (800112c <HAL_TIM_Encoder_MspInit+0xf4>)
 80010a6:	f000 fc6b 	bl	8001980 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80010aa:	e036      	b.n	800111a <HAL_TIM_Encoder_MspInit+0xe2>
  else if(htim_encoder->Instance==TIM4)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a1f      	ldr	r2, [pc, #124]	@ (8001130 <HAL_TIM_Encoder_MspInit+0xf8>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d131      	bne.n	800111a <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80010b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001128 <HAL_TIM_Encoder_MspInit+0xf0>)
 80010b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ba:	4a1b      	ldr	r2, [pc, #108]	@ (8001128 <HAL_TIM_Encoder_MspInit+0xf0>)
 80010bc:	f043 0304 	orr.w	r3, r3, #4
 80010c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80010c2:	4b19      	ldr	r3, [pc, #100]	@ (8001128 <HAL_TIM_Encoder_MspInit+0xf0>)
 80010c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010c6:	f003 0304 	and.w	r3, r3, #4
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ce:	4b16      	ldr	r3, [pc, #88]	@ (8001128 <HAL_TIM_Encoder_MspInit+0xf0>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d2:	4a15      	ldr	r2, [pc, #84]	@ (8001128 <HAL_TIM_Encoder_MspInit+0xf0>)
 80010d4:	f043 0301 	orr.w	r3, r3, #1
 80010d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010da:	4b13      	ldr	r3, [pc, #76]	@ (8001128 <HAL_TIM_Encoder_MspInit+0xf0>)
 80010dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Motor_A_EN_CH2_Pin|Motor_A_EN_CH1_Pin;
 80010e6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80010ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ec:	2302      	movs	r3, #2
 80010ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f4:	2300      	movs	r3, #0
 80010f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80010f8:	230a      	movs	r3, #10
 80010fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fc:	f107 031c 	add.w	r3, r7, #28
 8001100:	4619      	mov	r1, r3
 8001102:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001106:	f000 fc3b 	bl	8001980 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800110a:	2200      	movs	r2, #0
 800110c:	2100      	movs	r1, #0
 800110e:	201e      	movs	r0, #30
 8001110:	f000 fb41 	bl	8001796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001114:	201e      	movs	r0, #30
 8001116:	f000 fb58 	bl	80017ca <HAL_NVIC_EnableIRQ>
}
 800111a:	bf00      	nop
 800111c:	3730      	adds	r7, #48	@ 0x30
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40000400 	.word	0x40000400
 8001128:	40021000 	.word	0x40021000
 800112c:	48000800 	.word	0x48000800
 8001130:	40000800 	.word	0x40000800

08001134 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b088      	sub	sp, #32
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	f107 030c 	add.w	r3, r7, #12
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a11      	ldr	r2, [pc, #68]	@ (8001198 <HAL_TIM_MspPostInit+0x64>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d11b      	bne.n	800118e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001156:	4b11      	ldr	r3, [pc, #68]	@ (800119c <HAL_TIM_MspPostInit+0x68>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800115a:	4a10      	ldr	r2, [pc, #64]	@ (800119c <HAL_TIM_MspPostInit+0x68>)
 800115c:	f043 0304 	orr.w	r3, r3, #4
 8001160:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001162:	4b0e      	ldr	r3, [pc, #56]	@ (800119c <HAL_TIM_MspPostInit+0x68>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001166:	f003 0304 	and.w	r3, r3, #4
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Motor_A_CH1_Pin|Motor_A_CH2_Pin|Motor_B_CH3_Pin|Motor_A_CH4_Pin;
 800116e:	230f      	movs	r3, #15
 8001170:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001172:	2302      	movs	r3, #2
 8001174:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117a:	2300      	movs	r3, #0
 800117c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800117e:	2302      	movs	r3, #2
 8001180:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001182:	f107 030c 	add.w	r3, r7, #12
 8001186:	4619      	mov	r1, r3
 8001188:	4805      	ldr	r0, [pc, #20]	@ (80011a0 <HAL_TIM_MspPostInit+0x6c>)
 800118a:	f000 fbf9 	bl	8001980 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800118e:	bf00      	nop
 8001190:	3720      	adds	r7, #32
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40012c00 	.word	0x40012c00
 800119c:	40021000 	.word	0x40021000
 80011a0:	48000800 	.word	0x48000800

080011a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b0a2      	sub	sp, #136	@ 0x88
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011bc:	f107 0320 	add.w	r3, r7, #32
 80011c0:	2254      	movs	r2, #84	@ 0x54
 80011c2:	2100      	movs	r1, #0
 80011c4:	4618      	mov	r0, r3
 80011c6:	f005 fb03 	bl	80067d0 <memset>
  if(huart->Instance==UART4)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a56      	ldr	r2, [pc, #344]	@ (8001328 <HAL_UART_MspInit+0x184>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d141      	bne.n	8001258 <HAL_UART_MspInit+0xb4>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80011d4:	2308      	movs	r3, #8
 80011d6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80011d8:	2300      	movs	r3, #0
 80011da:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011dc:	f107 0320 	add.w	r3, r7, #32
 80011e0:	4618      	mov	r0, r3
 80011e2:	f001 fb61 	bl	80028a8 <HAL_RCCEx_PeriphCLKConfig>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011ec:	f7ff fe78 	bl	8000ee0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80011f0:	4b4e      	ldr	r3, [pc, #312]	@ (800132c <HAL_UART_MspInit+0x188>)
 80011f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011f4:	4a4d      	ldr	r2, [pc, #308]	@ (800132c <HAL_UART_MspInit+0x188>)
 80011f6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80011fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80011fc:	4b4b      	ldr	r3, [pc, #300]	@ (800132c <HAL_UART_MspInit+0x188>)
 80011fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001200:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001204:	61fb      	str	r3, [r7, #28]
 8001206:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001208:	4b48      	ldr	r3, [pc, #288]	@ (800132c <HAL_UART_MspInit+0x188>)
 800120a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800120c:	4a47      	ldr	r2, [pc, #284]	@ (800132c <HAL_UART_MspInit+0x188>)
 800120e:	f043 0304 	orr.w	r3, r3, #4
 8001212:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001214:	4b45      	ldr	r3, [pc, #276]	@ (800132c <HAL_UART_MspInit+0x188>)
 8001216:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001218:	f003 0304 	and.w	r3, r3, #4
 800121c:	61bb      	str	r3, [r7, #24]
 800121e:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001220:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001224:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001226:	2302      	movs	r3, #2
 8001228:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122e:	2300      	movs	r3, #0
 8001230:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8001234:	2305      	movs	r3, #5
 8001236:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800123a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800123e:	4619      	mov	r1, r3
 8001240:	483b      	ldr	r0, [pc, #236]	@ (8001330 <HAL_UART_MspInit+0x18c>)
 8001242:	f000 fb9d 	bl	8001980 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	2100      	movs	r1, #0
 800124a:	2034      	movs	r0, #52	@ 0x34
 800124c:	f000 faa3 	bl	8001796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001250:	2034      	movs	r0, #52	@ 0x34
 8001252:	f000 faba 	bl	80017ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8001256:	e063      	b.n	8001320 <HAL_UART_MspInit+0x17c>
  else if(huart->Instance==UART5)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a35      	ldr	r2, [pc, #212]	@ (8001334 <HAL_UART_MspInit+0x190>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d15e      	bne.n	8001320 <HAL_UART_MspInit+0x17c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001262:	2310      	movs	r3, #16
 8001264:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001266:	2300      	movs	r3, #0
 8001268:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800126a:	f107 0320 	add.w	r3, r7, #32
 800126e:	4618      	mov	r0, r3
 8001270:	f001 fb1a 	bl	80028a8 <HAL_RCCEx_PeriphCLKConfig>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <HAL_UART_MspInit+0xda>
      Error_Handler();
 800127a:	f7ff fe31 	bl	8000ee0 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 800127e:	4b2b      	ldr	r3, [pc, #172]	@ (800132c <HAL_UART_MspInit+0x188>)
 8001280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001282:	4a2a      	ldr	r2, [pc, #168]	@ (800132c <HAL_UART_MspInit+0x188>)
 8001284:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001288:	6593      	str	r3, [r2, #88]	@ 0x58
 800128a:	4b28      	ldr	r3, [pc, #160]	@ (800132c <HAL_UART_MspInit+0x188>)
 800128c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800128e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001292:	617b      	str	r3, [r7, #20]
 8001294:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001296:	4b25      	ldr	r3, [pc, #148]	@ (800132c <HAL_UART_MspInit+0x188>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800129a:	4a24      	ldr	r2, [pc, #144]	@ (800132c <HAL_UART_MspInit+0x188>)
 800129c:	f043 0304 	orr.w	r3, r3, #4
 80012a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012a2:	4b22      	ldr	r3, [pc, #136]	@ (800132c <HAL_UART_MspInit+0x188>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a6:	f003 0304 	and.w	r3, r3, #4
 80012aa:	613b      	str	r3, [r7, #16]
 80012ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ae:	4b1f      	ldr	r3, [pc, #124]	@ (800132c <HAL_UART_MspInit+0x188>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b2:	4a1e      	ldr	r2, [pc, #120]	@ (800132c <HAL_UART_MspInit+0x188>)
 80012b4:	f043 0308 	orr.w	r3, r3, #8
 80012b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ba:	4b1c      	ldr	r3, [pc, #112]	@ (800132c <HAL_UART_MspInit+0x188>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012be:	f003 0308 	and.w	r3, r3, #8
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80012c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012ca:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012cc:	2302      	movs	r3, #2
 80012ce:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	2300      	movs	r3, #0
 80012d6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80012da:	2305      	movs	r3, #5
 80012dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80012e4:	4619      	mov	r1, r3
 80012e6:	4812      	ldr	r0, [pc, #72]	@ (8001330 <HAL_UART_MspInit+0x18c>)
 80012e8:	f000 fb4a 	bl	8001980 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012ec:	2304      	movs	r3, #4
 80012ee:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f0:	2302      	movs	r3, #2
 80012f2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f8:	2300      	movs	r3, #0
 80012fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80012fe:	2305      	movs	r3, #5
 8001300:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001304:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001308:	4619      	mov	r1, r3
 800130a:	480b      	ldr	r0, [pc, #44]	@ (8001338 <HAL_UART_MspInit+0x194>)
 800130c:	f000 fb38 	bl	8001980 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001310:	2200      	movs	r2, #0
 8001312:	2100      	movs	r1, #0
 8001314:	2035      	movs	r0, #53	@ 0x35
 8001316:	f000 fa3e 	bl	8001796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800131a:	2035      	movs	r0, #53	@ 0x35
 800131c:	f000 fa55 	bl	80017ca <HAL_NVIC_EnableIRQ>
}
 8001320:	bf00      	nop
 8001322:	3788      	adds	r7, #136	@ 0x88
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40004c00 	.word	0x40004c00
 800132c:	40021000 	.word	0x40021000
 8001330:	48000800 	.word	0x48000800
 8001334:	40005000 	.word	0x40005000
 8001338:	48000c00 	.word	0x48000c00

0800133c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001340:	bf00      	nop
 8001342:	e7fd      	b.n	8001340 <NMI_Handler+0x4>

08001344 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001348:	bf00      	nop
 800134a:	e7fd      	b.n	8001348 <HardFault_Handler+0x4>

0800134c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001350:	bf00      	nop
 8001352:	e7fd      	b.n	8001350 <MemManage_Handler+0x4>

08001354 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001358:	bf00      	nop
 800135a:	e7fd      	b.n	8001358 <BusFault_Handler+0x4>

0800135c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001360:	bf00      	nop
 8001362:	e7fd      	b.n	8001360 <UsageFault_Handler+0x4>

08001364 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001392:	f000 f8e5 	bl	8001560 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
	...

0800139c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80013a0:	4802      	ldr	r0, [pc, #8]	@ (80013ac <TIM4_IRQHandler+0x10>)
 80013a2:	f002 fd8d 	bl	8003ec0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000194 	.word	0x20000194

080013b0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80013b4:	4802      	ldr	r0, [pc, #8]	@ (80013c0 <UART4_IRQHandler+0x10>)
 80013b6:	f004 f81d 	bl	80053f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	200001e0 	.word	0x200001e0

080013c4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt / UART5 wake-up interrupt through EXTI line 35.
  */
void UART5_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80013c8:	4802      	ldr	r0, [pc, #8]	@ (80013d4 <UART5_IRQHandler+0x10>)
 80013ca:	f004 f813 	bl	80053f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000274 	.word	0x20000274

080013d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013e0:	4a14      	ldr	r2, [pc, #80]	@ (8001434 <_sbrk+0x5c>)
 80013e2:	4b15      	ldr	r3, [pc, #84]	@ (8001438 <_sbrk+0x60>)
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013ec:	4b13      	ldr	r3, [pc, #76]	@ (800143c <_sbrk+0x64>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d102      	bne.n	80013fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013f4:	4b11      	ldr	r3, [pc, #68]	@ (800143c <_sbrk+0x64>)
 80013f6:	4a12      	ldr	r2, [pc, #72]	@ (8001440 <_sbrk+0x68>)
 80013f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013fa:	4b10      	ldr	r3, [pc, #64]	@ (800143c <_sbrk+0x64>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4413      	add	r3, r2
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	429a      	cmp	r2, r3
 8001406:	d207      	bcs.n	8001418 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001408:	f005 fa10 	bl	800682c <__errno>
 800140c:	4603      	mov	r3, r0
 800140e:	220c      	movs	r2, #12
 8001410:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001412:	f04f 33ff 	mov.w	r3, #4294967295
 8001416:	e009      	b.n	800142c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001418:	4b08      	ldr	r3, [pc, #32]	@ (800143c <_sbrk+0x64>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800141e:	4b07      	ldr	r3, [pc, #28]	@ (800143c <_sbrk+0x64>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4413      	add	r3, r2
 8001426:	4a05      	ldr	r2, [pc, #20]	@ (800143c <_sbrk+0x64>)
 8001428:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800142a:	68fb      	ldr	r3, [r7, #12]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3718      	adds	r7, #24
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20020000 	.word	0x20020000
 8001438:	00000400 	.word	0x00000400
 800143c:	20000308 	.word	0x20000308
 8001440:	20000458 	.word	0x20000458

08001444 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001448:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <SystemInit+0x20>)
 800144a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800144e:	4a05      	ldr	r2, [pc, #20]	@ (8001464 <SystemInit+0x20>)
 8001450:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001454:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001468:	480d      	ldr	r0, [pc, #52]	@ (80014a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800146a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800146c:	f7ff ffea 	bl	8001444 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001470:	480c      	ldr	r0, [pc, #48]	@ (80014a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001472:	490d      	ldr	r1, [pc, #52]	@ (80014a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001474:	4a0d      	ldr	r2, [pc, #52]	@ (80014ac <LoopForever+0xe>)
  movs r3, #0
 8001476:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001478:	e002      	b.n	8001480 <LoopCopyDataInit>

0800147a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800147a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800147c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800147e:	3304      	adds	r3, #4

08001480 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001480:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001482:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001484:	d3f9      	bcc.n	800147a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001486:	4a0a      	ldr	r2, [pc, #40]	@ (80014b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001488:	4c0a      	ldr	r4, [pc, #40]	@ (80014b4 <LoopForever+0x16>)
  movs r3, #0
 800148a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800148c:	e001      	b.n	8001492 <LoopFillZerobss>

0800148e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800148e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001490:	3204      	adds	r2, #4

08001492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001492:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001494:	d3fb      	bcc.n	800148e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001496:	f005 f9cf 	bl	8006838 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800149a:	f7ff f891 	bl	80005c0 <main>

0800149e <LoopForever>:

LoopForever:
    b LoopForever
 800149e:	e7fe      	b.n	800149e <LoopForever>
  ldr   r0, =_estack
 80014a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014a8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80014ac:	080075bc 	.word	0x080075bc
  ldr r2, =_sbss
 80014b0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80014b4:	20000458 	.word	0x20000458

080014b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014b8:	e7fe      	b.n	80014b8 <ADC1_2_IRQHandler>

080014ba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b082      	sub	sp, #8
 80014be:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014c0:	2300      	movs	r3, #0
 80014c2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014c4:	2003      	movs	r0, #3
 80014c6:	f000 f95b 	bl	8001780 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014ca:	200f      	movs	r0, #15
 80014cc:	f000 f80e 	bl	80014ec <HAL_InitTick>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d002      	beq.n	80014dc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	71fb      	strb	r3, [r7, #7]
 80014da:	e001      	b.n	80014e0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014dc:	f7ff fd06 	bl	8000eec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014e0:	79fb      	ldrb	r3, [r7, #7]

}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
	...

080014ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014f4:	2300      	movs	r3, #0
 80014f6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80014f8:	4b16      	ldr	r3, [pc, #88]	@ (8001554 <HAL_InitTick+0x68>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d022      	beq.n	8001546 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001500:	4b15      	ldr	r3, [pc, #84]	@ (8001558 <HAL_InitTick+0x6c>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	4b13      	ldr	r3, [pc, #76]	@ (8001554 <HAL_InitTick+0x68>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800150c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001510:	fbb2 f3f3 	udiv	r3, r2, r3
 8001514:	4618      	mov	r0, r3
 8001516:	f000 f966 	bl	80017e6 <HAL_SYSTICK_Config>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d10f      	bne.n	8001540 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b0f      	cmp	r3, #15
 8001524:	d809      	bhi.n	800153a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001526:	2200      	movs	r2, #0
 8001528:	6879      	ldr	r1, [r7, #4]
 800152a:	f04f 30ff 	mov.w	r0, #4294967295
 800152e:	f000 f932 	bl	8001796 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001532:	4a0a      	ldr	r2, [pc, #40]	@ (800155c <HAL_InitTick+0x70>)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6013      	str	r3, [r2, #0]
 8001538:	e007      	b.n	800154a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	73fb      	strb	r3, [r7, #15]
 800153e:	e004      	b.n	800154a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	73fb      	strb	r3, [r7, #15]
 8001544:	e001      	b.n	800154a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800154a:	7bfb      	ldrb	r3, [r7, #15]
}
 800154c:	4618      	mov	r0, r3
 800154e:	3710      	adds	r7, #16
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000008 	.word	0x20000008
 8001558:	20000000 	.word	0x20000000
 800155c:	20000004 	.word	0x20000004

08001560 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001564:	4b05      	ldr	r3, [pc, #20]	@ (800157c <HAL_IncTick+0x1c>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	4b05      	ldr	r3, [pc, #20]	@ (8001580 <HAL_IncTick+0x20>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4413      	add	r3, r2
 800156e:	4a03      	ldr	r2, [pc, #12]	@ (800157c <HAL_IncTick+0x1c>)
 8001570:	6013      	str	r3, [r2, #0]
}
 8001572:	bf00      	nop
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	2000030c 	.word	0x2000030c
 8001580:	20000008 	.word	0x20000008

08001584 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return uwTick;
 8001588:	4b03      	ldr	r3, [pc, #12]	@ (8001598 <HAL_GetTick+0x14>)
 800158a:	681b      	ldr	r3, [r3, #0]
}
 800158c:	4618      	mov	r0, r3
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	2000030c 	.word	0x2000030c

0800159c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015a4:	f7ff ffee 	bl	8001584 <HAL_GetTick>
 80015a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015b4:	d004      	beq.n	80015c0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80015b6:	4b09      	ldr	r3, [pc, #36]	@ (80015dc <HAL_Delay+0x40>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	4413      	add	r3, r2
 80015be:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015c0:	bf00      	nop
 80015c2:	f7ff ffdf 	bl	8001584 <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	68fa      	ldr	r2, [r7, #12]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d8f7      	bhi.n	80015c2 <HAL_Delay+0x26>
  {
  }
}
 80015d2:	bf00      	nop
 80015d4:	bf00      	nop
 80015d6:	3710      	adds	r7, #16
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000008 	.word	0x20000008

080015e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001624 <__NVIC_SetPriorityGrouping+0x44>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015f6:	68ba      	ldr	r2, [r7, #8]
 80015f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015fc:	4013      	ands	r3, r2
 80015fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001608:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800160c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001612:	4a04      	ldr	r2, [pc, #16]	@ (8001624 <__NVIC_SetPriorityGrouping+0x44>)
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	60d3      	str	r3, [r2, #12]
}
 8001618:	bf00      	nop
 800161a:	3714      	adds	r7, #20
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800162c:	4b04      	ldr	r3, [pc, #16]	@ (8001640 <__NVIC_GetPriorityGrouping+0x18>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	0a1b      	lsrs	r3, r3, #8
 8001632:	f003 0307 	and.w	r3, r3, #7
}
 8001636:	4618      	mov	r0, r3
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	2b00      	cmp	r3, #0
 8001654:	db0b      	blt.n	800166e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	f003 021f 	and.w	r2, r3, #31
 800165c:	4907      	ldr	r1, [pc, #28]	@ (800167c <__NVIC_EnableIRQ+0x38>)
 800165e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001662:	095b      	lsrs	r3, r3, #5
 8001664:	2001      	movs	r0, #1
 8001666:	fa00 f202 	lsl.w	r2, r0, r2
 800166a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	e000e100 	.word	0xe000e100

08001680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	6039      	str	r1, [r7, #0]
 800168a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800168c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001690:	2b00      	cmp	r3, #0
 8001692:	db0a      	blt.n	80016aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	b2da      	uxtb	r2, r3
 8001698:	490c      	ldr	r1, [pc, #48]	@ (80016cc <__NVIC_SetPriority+0x4c>)
 800169a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169e:	0112      	lsls	r2, r2, #4
 80016a0:	b2d2      	uxtb	r2, r2
 80016a2:	440b      	add	r3, r1
 80016a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016a8:	e00a      	b.n	80016c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	4908      	ldr	r1, [pc, #32]	@ (80016d0 <__NVIC_SetPriority+0x50>)
 80016b0:	79fb      	ldrb	r3, [r7, #7]
 80016b2:	f003 030f 	and.w	r3, r3, #15
 80016b6:	3b04      	subs	r3, #4
 80016b8:	0112      	lsls	r2, r2, #4
 80016ba:	b2d2      	uxtb	r2, r2
 80016bc:	440b      	add	r3, r1
 80016be:	761a      	strb	r2, [r3, #24]
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	e000e100 	.word	0xe000e100
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b089      	sub	sp, #36	@ 0x24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	f1c3 0307 	rsb	r3, r3, #7
 80016ee:	2b04      	cmp	r3, #4
 80016f0:	bf28      	it	cs
 80016f2:	2304      	movcs	r3, #4
 80016f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	3304      	adds	r3, #4
 80016fa:	2b06      	cmp	r3, #6
 80016fc:	d902      	bls.n	8001704 <NVIC_EncodePriority+0x30>
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	3b03      	subs	r3, #3
 8001702:	e000      	b.n	8001706 <NVIC_EncodePriority+0x32>
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001708:	f04f 32ff 	mov.w	r2, #4294967295
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43da      	mvns	r2, r3
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	401a      	ands	r2, r3
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800171c:	f04f 31ff 	mov.w	r1, #4294967295
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	fa01 f303 	lsl.w	r3, r1, r3
 8001726:	43d9      	mvns	r1, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800172c:	4313      	orrs	r3, r2
         );
}
 800172e:	4618      	mov	r0, r3
 8001730:	3724      	adds	r7, #36	@ 0x24
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
	...

0800173c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	3b01      	subs	r3, #1
 8001748:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800174c:	d301      	bcc.n	8001752 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800174e:	2301      	movs	r3, #1
 8001750:	e00f      	b.n	8001772 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001752:	4a0a      	ldr	r2, [pc, #40]	@ (800177c <SysTick_Config+0x40>)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3b01      	subs	r3, #1
 8001758:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800175a:	210f      	movs	r1, #15
 800175c:	f04f 30ff 	mov.w	r0, #4294967295
 8001760:	f7ff ff8e 	bl	8001680 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001764:	4b05      	ldr	r3, [pc, #20]	@ (800177c <SysTick_Config+0x40>)
 8001766:	2200      	movs	r2, #0
 8001768:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800176a:	4b04      	ldr	r3, [pc, #16]	@ (800177c <SysTick_Config+0x40>)
 800176c:	2207      	movs	r2, #7
 800176e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	e000e010 	.word	0xe000e010

08001780 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f7ff ff29 	bl	80015e0 <__NVIC_SetPriorityGrouping>
}
 800178e:	bf00      	nop
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b086      	sub	sp, #24
 800179a:	af00      	add	r7, sp, #0
 800179c:	4603      	mov	r3, r0
 800179e:	60b9      	str	r1, [r7, #8]
 80017a0:	607a      	str	r2, [r7, #4]
 80017a2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017a4:	f7ff ff40 	bl	8001628 <__NVIC_GetPriorityGrouping>
 80017a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	68b9      	ldr	r1, [r7, #8]
 80017ae:	6978      	ldr	r0, [r7, #20]
 80017b0:	f7ff ff90 	bl	80016d4 <NVIC_EncodePriority>
 80017b4:	4602      	mov	r2, r0
 80017b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ba:	4611      	mov	r1, r2
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff ff5f 	bl	8001680 <__NVIC_SetPriority>
}
 80017c2:	bf00      	nop
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b082      	sub	sp, #8
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	4603      	mov	r3, r0
 80017d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff ff33 	bl	8001644 <__NVIC_EnableIRQ>
}
 80017de:	bf00      	nop
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b082      	sub	sp, #8
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7ff ffa4 	bl	800173c <SysTick_Config>
 80017f4:	4603      	mov	r3, r0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017fe:	b480      	push	{r7}
 8001800:	b085      	sub	sp, #20
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001806:	2300      	movs	r3, #0
 8001808:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d005      	beq.n	8001822 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2204      	movs	r2, #4
 800181a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	73fb      	strb	r3, [r7, #15]
 8001820:	e037      	b.n	8001892 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f022 020e 	bic.w	r2, r2, #14
 8001830:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800183c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001840:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f022 0201 	bic.w	r2, r2, #1
 8001850:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001856:	f003 021f 	and.w	r2, r3, #31
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185e:	2101      	movs	r1, #1
 8001860:	fa01 f202 	lsl.w	r2, r1, r2
 8001864:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800186e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001874:	2b00      	cmp	r3, #0
 8001876:	d00c      	beq.n	8001892 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001882:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001886:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001890:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2201      	movs	r2, #1
 8001896:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3714      	adds	r7, #20
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018b8:	2300      	movs	r3, #0
 80018ba:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d00d      	beq.n	80018e4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2204      	movs	r2, #4
 80018cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2201      	movs	r2, #1
 80018d2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	73fb      	strb	r3, [r7, #15]
 80018e2:	e047      	b.n	8001974 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f022 020e 	bic.w	r2, r2, #14
 80018f2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f022 0201 	bic.w	r2, r2, #1
 8001902:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800190e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001912:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001918:	f003 021f 	and.w	r2, r3, #31
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001920:	2101      	movs	r1, #1
 8001922:	fa01 f202 	lsl.w	r2, r1, r2
 8001926:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001930:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001936:	2b00      	cmp	r3, #0
 8001938:	d00c      	beq.n	8001954 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001944:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001948:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001952:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001968:	2b00      	cmp	r3, #0
 800196a:	d003      	beq.n	8001974 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	4798      	blx	r3
    }
  }
  return status;
 8001974:	7bfb      	ldrb	r3, [r7, #15]
}
 8001976:	4618      	mov	r0, r3
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
	...

08001980 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001980:	b480      	push	{r7}
 8001982:	b087      	sub	sp, #28
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800198e:	e15a      	b.n	8001c46 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	2101      	movs	r1, #1
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	fa01 f303 	lsl.w	r3, r1, r3
 800199c:	4013      	ands	r3, r2
 800199e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f000 814c 	beq.w	8001c40 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 0303 	and.w	r3, r3, #3
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d005      	beq.n	80019c0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d130      	bne.n	8001a22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	2203      	movs	r2, #3
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	43db      	mvns	r3, r3
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	4013      	ands	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	68da      	ldr	r2, [r3, #12]
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019f6:	2201      	movs	r2, #1
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	43db      	mvns	r3, r3
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	4013      	ands	r3, r2
 8001a04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	091b      	lsrs	r3, r3, #4
 8001a0c:	f003 0201 	and.w	r2, r3, #1
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f003 0303 	and.w	r3, r3, #3
 8001a2a:	2b03      	cmp	r3, #3
 8001a2c:	d017      	beq.n	8001a5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	2203      	movs	r2, #3
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	4013      	ands	r3, r2
 8001a44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	689a      	ldr	r2, [r3, #8]
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f003 0303 	and.w	r3, r3, #3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d123      	bne.n	8001ab2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	08da      	lsrs	r2, r3, #3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	3208      	adds	r2, #8
 8001a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	f003 0307 	and.w	r3, r3, #7
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	220f      	movs	r2, #15
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	43db      	mvns	r3, r3
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	691a      	ldr	r2, [r3, #16]
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	f003 0307 	and.w	r3, r3, #7
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	08da      	lsrs	r2, r3, #3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3208      	adds	r2, #8
 8001aac:	6939      	ldr	r1, [r7, #16]
 8001aae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	2203      	movs	r2, #3
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f003 0203 	and.w	r2, r3, #3
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f000 80a6 	beq.w	8001c40 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af4:	4b5b      	ldr	r3, [pc, #364]	@ (8001c64 <HAL_GPIO_Init+0x2e4>)
 8001af6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001af8:	4a5a      	ldr	r2, [pc, #360]	@ (8001c64 <HAL_GPIO_Init+0x2e4>)
 8001afa:	f043 0301 	orr.w	r3, r3, #1
 8001afe:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b00:	4b58      	ldr	r3, [pc, #352]	@ (8001c64 <HAL_GPIO_Init+0x2e4>)
 8001b02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	60bb      	str	r3, [r7, #8]
 8001b0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b0c:	4a56      	ldr	r2, [pc, #344]	@ (8001c68 <HAL_GPIO_Init+0x2e8>)
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	089b      	lsrs	r3, r3, #2
 8001b12:	3302      	adds	r3, #2
 8001b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	f003 0303 	and.w	r3, r3, #3
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	220f      	movs	r2, #15
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001b36:	d01f      	beq.n	8001b78 <HAL_GPIO_Init+0x1f8>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4a4c      	ldr	r2, [pc, #304]	@ (8001c6c <HAL_GPIO_Init+0x2ec>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d019      	beq.n	8001b74 <HAL_GPIO_Init+0x1f4>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4a4b      	ldr	r2, [pc, #300]	@ (8001c70 <HAL_GPIO_Init+0x2f0>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d013      	beq.n	8001b70 <HAL_GPIO_Init+0x1f0>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4a4a      	ldr	r2, [pc, #296]	@ (8001c74 <HAL_GPIO_Init+0x2f4>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d00d      	beq.n	8001b6c <HAL_GPIO_Init+0x1ec>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4a49      	ldr	r2, [pc, #292]	@ (8001c78 <HAL_GPIO_Init+0x2f8>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d007      	beq.n	8001b68 <HAL_GPIO_Init+0x1e8>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4a48      	ldr	r2, [pc, #288]	@ (8001c7c <HAL_GPIO_Init+0x2fc>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d101      	bne.n	8001b64 <HAL_GPIO_Init+0x1e4>
 8001b60:	2305      	movs	r3, #5
 8001b62:	e00a      	b.n	8001b7a <HAL_GPIO_Init+0x1fa>
 8001b64:	2306      	movs	r3, #6
 8001b66:	e008      	b.n	8001b7a <HAL_GPIO_Init+0x1fa>
 8001b68:	2304      	movs	r3, #4
 8001b6a:	e006      	b.n	8001b7a <HAL_GPIO_Init+0x1fa>
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e004      	b.n	8001b7a <HAL_GPIO_Init+0x1fa>
 8001b70:	2302      	movs	r3, #2
 8001b72:	e002      	b.n	8001b7a <HAL_GPIO_Init+0x1fa>
 8001b74:	2301      	movs	r3, #1
 8001b76:	e000      	b.n	8001b7a <HAL_GPIO_Init+0x1fa>
 8001b78:	2300      	movs	r3, #0
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	f002 0203 	and.w	r2, r2, #3
 8001b80:	0092      	lsls	r2, r2, #2
 8001b82:	4093      	lsls	r3, r2
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b8a:	4937      	ldr	r1, [pc, #220]	@ (8001c68 <HAL_GPIO_Init+0x2e8>)
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	089b      	lsrs	r3, r3, #2
 8001b90:	3302      	adds	r3, #2
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b98:	4b39      	ldr	r3, [pc, #228]	@ (8001c80 <HAL_GPIO_Init+0x300>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d003      	beq.n	8001bbc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001bbc:	4a30      	ldr	r2, [pc, #192]	@ (8001c80 <HAL_GPIO_Init+0x300>)
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001bc2:	4b2f      	ldr	r3, [pc, #188]	@ (8001c80 <HAL_GPIO_Init+0x300>)
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001be6:	4a26      	ldr	r2, [pc, #152]	@ (8001c80 <HAL_GPIO_Init+0x300>)
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001bec:	4b24      	ldr	r3, [pc, #144]	@ (8001c80 <HAL_GPIO_Init+0x300>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d003      	beq.n	8001c10 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c10:	4a1b      	ldr	r2, [pc, #108]	@ (8001c80 <HAL_GPIO_Init+0x300>)
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001c16:	4b1a      	ldr	r3, [pc, #104]	@ (8001c80 <HAL_GPIO_Init+0x300>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	4013      	ands	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c3a:	4a11      	ldr	r2, [pc, #68]	@ (8001c80 <HAL_GPIO_Init+0x300>)
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	3301      	adds	r3, #1
 8001c44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f47f ae9d 	bne.w	8001990 <HAL_GPIO_Init+0x10>
  }
}
 8001c56:	bf00      	nop
 8001c58:	bf00      	nop
 8001c5a:	371c      	adds	r7, #28
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	40021000 	.word	0x40021000
 8001c68:	40010000 	.word	0x40010000
 8001c6c:	48000400 	.word	0x48000400
 8001c70:	48000800 	.word	0x48000800
 8001c74:	48000c00 	.word	0x48000c00
 8001c78:	48001000 	.word	0x48001000
 8001c7c:	48001400 	.word	0x48001400
 8001c80:	40010400 	.word	0x40010400

08001c84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	691a      	ldr	r2, [r3, #16]
 8001c94:	887b      	ldrh	r3, [r7, #2]
 8001c96:	4013      	ands	r3, r2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d002      	beq.n	8001ca2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	73fb      	strb	r3, [r7, #15]
 8001ca0:	e001      	b.n	8001ca6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3714      	adds	r7, #20
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	807b      	strh	r3, [r7, #2]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cc4:	787b      	ldrb	r3, [r7, #1]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cca:	887a      	ldrh	r2, [r7, #2]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001cd0:	e002      	b.n	8001cd8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cd2:	887a      	ldrh	r2, [r7, #2]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d141      	bne.n	8001d76 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001cf2:	4b4b      	ldr	r3, [pc, #300]	@ (8001e20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001cfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cfe:	d131      	bne.n	8001d64 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d00:	4b47      	ldr	r3, [pc, #284]	@ (8001e20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d06:	4a46      	ldr	r2, [pc, #280]	@ (8001e20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d0c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d10:	4b43      	ldr	r3, [pc, #268]	@ (8001e20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d18:	4a41      	ldr	r2, [pc, #260]	@ (8001e20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d1e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d20:	4b40      	ldr	r3, [pc, #256]	@ (8001e24 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2232      	movs	r2, #50	@ 0x32
 8001d26:	fb02 f303 	mul.w	r3, r2, r3
 8001d2a:	4a3f      	ldr	r2, [pc, #252]	@ (8001e28 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d30:	0c9b      	lsrs	r3, r3, #18
 8001d32:	3301      	adds	r3, #1
 8001d34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d36:	e002      	b.n	8001d3e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d3e:	4b38      	ldr	r3, [pc, #224]	@ (8001e20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d40:	695b      	ldr	r3, [r3, #20]
 8001d42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d4a:	d102      	bne.n	8001d52 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1f2      	bne.n	8001d38 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d52:	4b33      	ldr	r3, [pc, #204]	@ (8001e20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d5e:	d158      	bne.n	8001e12 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e057      	b.n	8001e14 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d64:	4b2e      	ldr	r3, [pc, #184]	@ (8001e20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d6a:	4a2d      	ldr	r2, [pc, #180]	@ (8001e20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d70:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001d74:	e04d      	b.n	8001e12 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d7c:	d141      	bne.n	8001e02 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d7e:	4b28      	ldr	r3, [pc, #160]	@ (8001e20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001d86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d8a:	d131      	bne.n	8001df0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d8c:	4b24      	ldr	r3, [pc, #144]	@ (8001e20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d92:	4a23      	ldr	r2, [pc, #140]	@ (8001e20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d98:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d9c:	4b20      	ldr	r3, [pc, #128]	@ (8001e20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001da4:	4a1e      	ldr	r2, [pc, #120]	@ (8001e20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001da6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001daa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001dac:	4b1d      	ldr	r3, [pc, #116]	@ (8001e24 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2232      	movs	r2, #50	@ 0x32
 8001db2:	fb02 f303 	mul.w	r3, r2, r3
 8001db6:	4a1c      	ldr	r2, [pc, #112]	@ (8001e28 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001db8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dbc:	0c9b      	lsrs	r3, r3, #18
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dc2:	e002      	b.n	8001dca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dca:	4b15      	ldr	r3, [pc, #84]	@ (8001e20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dcc:	695b      	ldr	r3, [r3, #20]
 8001dce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dd6:	d102      	bne.n	8001dde <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1f2      	bne.n	8001dc4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001dde:	4b10      	ldr	r3, [pc, #64]	@ (8001e20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001de6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dea:	d112      	bne.n	8001e12 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e011      	b.n	8001e14 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001df0:	4b0b      	ldr	r3, [pc, #44]	@ (8001e20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001df2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001df6:	4a0a      	ldr	r2, [pc, #40]	@ (8001e20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001df8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dfc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001e00:	e007      	b.n	8001e12 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e02:	4b07      	ldr	r3, [pc, #28]	@ (8001e20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e0a:	4a05      	ldr	r2, [pc, #20]	@ (8001e20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e0c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e10:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3714      	adds	r7, #20
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	40007000 	.word	0x40007000
 8001e24:	20000000 	.word	0x20000000
 8001e28:	431bde83 	.word	0x431bde83

08001e2c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001e30:	4b05      	ldr	r3, [pc, #20]	@ (8001e48 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	4a04      	ldr	r2, [pc, #16]	@ (8001e48 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001e36:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e3a:	6093      	str	r3, [r2, #8]
}
 8001e3c:	bf00      	nop
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	40007000 	.word	0x40007000

08001e4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b088      	sub	sp, #32
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e2fe      	b.n	800245c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d075      	beq.n	8001f56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e6a:	4b97      	ldr	r3, [pc, #604]	@ (80020c8 <HAL_RCC_OscConfig+0x27c>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f003 030c 	and.w	r3, r3, #12
 8001e72:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e74:	4b94      	ldr	r3, [pc, #592]	@ (80020c8 <HAL_RCC_OscConfig+0x27c>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	f003 0303 	and.w	r3, r3, #3
 8001e7c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	2b0c      	cmp	r3, #12
 8001e82:	d102      	bne.n	8001e8a <HAL_RCC_OscConfig+0x3e>
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	2b03      	cmp	r3, #3
 8001e88:	d002      	beq.n	8001e90 <HAL_RCC_OscConfig+0x44>
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	2b08      	cmp	r3, #8
 8001e8e:	d10b      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e90:	4b8d      	ldr	r3, [pc, #564]	@ (80020c8 <HAL_RCC_OscConfig+0x27c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d05b      	beq.n	8001f54 <HAL_RCC_OscConfig+0x108>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d157      	bne.n	8001f54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e2d9      	b.n	800245c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001eb0:	d106      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x74>
 8001eb2:	4b85      	ldr	r3, [pc, #532]	@ (80020c8 <HAL_RCC_OscConfig+0x27c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a84      	ldr	r2, [pc, #528]	@ (80020c8 <HAL_RCC_OscConfig+0x27c>)
 8001eb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ebc:	6013      	str	r3, [r2, #0]
 8001ebe:	e01d      	b.n	8001efc <HAL_RCC_OscConfig+0xb0>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ec8:	d10c      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x98>
 8001eca:	4b7f      	ldr	r3, [pc, #508]	@ (80020c8 <HAL_RCC_OscConfig+0x27c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a7e      	ldr	r2, [pc, #504]	@ (80020c8 <HAL_RCC_OscConfig+0x27c>)
 8001ed0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ed4:	6013      	str	r3, [r2, #0]
 8001ed6:	4b7c      	ldr	r3, [pc, #496]	@ (80020c8 <HAL_RCC_OscConfig+0x27c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a7b      	ldr	r2, [pc, #492]	@ (80020c8 <HAL_RCC_OscConfig+0x27c>)
 8001edc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ee0:	6013      	str	r3, [r2, #0]
 8001ee2:	e00b      	b.n	8001efc <HAL_RCC_OscConfig+0xb0>
 8001ee4:	4b78      	ldr	r3, [pc, #480]	@ (80020c8 <HAL_RCC_OscConfig+0x27c>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a77      	ldr	r2, [pc, #476]	@ (80020c8 <HAL_RCC_OscConfig+0x27c>)
 8001eea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001eee:	6013      	str	r3, [r2, #0]
 8001ef0:	4b75      	ldr	r3, [pc, #468]	@ (80020c8 <HAL_RCC_OscConfig+0x27c>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a74      	ldr	r2, [pc, #464]	@ (80020c8 <HAL_RCC_OscConfig+0x27c>)
 8001ef6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001efa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d013      	beq.n	8001f2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f04:	f7ff fb3e 	bl	8001584 <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f0c:	f7ff fb3a 	bl	8001584 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b64      	cmp	r3, #100	@ 0x64
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e29e      	b.n	800245c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f1e:	4b6a      	ldr	r3, [pc, #424]	@ (80020c8 <HAL_RCC_OscConfig+0x27c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d0f0      	beq.n	8001f0c <HAL_RCC_OscConfig+0xc0>
 8001f2a:	e014      	b.n	8001f56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f2c:	f7ff fb2a 	bl	8001584 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f34:	f7ff fb26 	bl	8001584 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b64      	cmp	r3, #100	@ 0x64
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e28a      	b.n	800245c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f46:	4b60      	ldr	r3, [pc, #384]	@ (80020c8 <HAL_RCC_OscConfig+0x27c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1f0      	bne.n	8001f34 <HAL_RCC_OscConfig+0xe8>
 8001f52:	e000      	b.n	8001f56 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d075      	beq.n	800204e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f62:	4b59      	ldr	r3, [pc, #356]	@ (80020c8 <HAL_RCC_OscConfig+0x27c>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f003 030c 	and.w	r3, r3, #12
 8001f6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f6c:	4b56      	ldr	r3, [pc, #344]	@ (80020c8 <HAL_RCC_OscConfig+0x27c>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	f003 0303 	and.w	r3, r3, #3
 8001f74:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	2b0c      	cmp	r3, #12
 8001f7a:	d102      	bne.n	8001f82 <HAL_RCC_OscConfig+0x136>
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d002      	beq.n	8001f88 <HAL_RCC_OscConfig+0x13c>
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	2b04      	cmp	r3, #4
 8001f86:	d11f      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f88:	4b4f      	ldr	r3, [pc, #316]	@ (80020c8 <HAL_RCC_OscConfig+0x27c>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d005      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x154>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d101      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e25d      	b.n	800245c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa0:	4b49      	ldr	r3, [pc, #292]	@ (80020c8 <HAL_RCC_OscConfig+0x27c>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	061b      	lsls	r3, r3, #24
 8001fae:	4946      	ldr	r1, [pc, #280]	@ (80020c8 <HAL_RCC_OscConfig+0x27c>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001fb4:	4b45      	ldr	r3, [pc, #276]	@ (80020cc <HAL_RCC_OscConfig+0x280>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff fa97 	bl	80014ec <HAL_InitTick>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d043      	beq.n	800204c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e249      	b.n	800245c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d023      	beq.n	8002018 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fd0:	4b3d      	ldr	r3, [pc, #244]	@ (80020c8 <HAL_RCC_OscConfig+0x27c>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a3c      	ldr	r2, [pc, #240]	@ (80020c8 <HAL_RCC_OscConfig+0x27c>)
 8001fd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fdc:	f7ff fad2 	bl	8001584 <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fe4:	f7ff face 	bl	8001584 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e232      	b.n	800245c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ff6:	4b34      	ldr	r3, [pc, #208]	@ (80020c8 <HAL_RCC_OscConfig+0x27c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d0f0      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002002:	4b31      	ldr	r3, [pc, #196]	@ (80020c8 <HAL_RCC_OscConfig+0x27c>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	061b      	lsls	r3, r3, #24
 8002010:	492d      	ldr	r1, [pc, #180]	@ (80020c8 <HAL_RCC_OscConfig+0x27c>)
 8002012:	4313      	orrs	r3, r2
 8002014:	604b      	str	r3, [r1, #4]
 8002016:	e01a      	b.n	800204e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002018:	4b2b      	ldr	r3, [pc, #172]	@ (80020c8 <HAL_RCC_OscConfig+0x27c>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a2a      	ldr	r2, [pc, #168]	@ (80020c8 <HAL_RCC_OscConfig+0x27c>)
 800201e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002022:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002024:	f7ff faae 	bl	8001584 <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800202c:	f7ff faaa 	bl	8001584 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e20e      	b.n	800245c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800203e:	4b22      	ldr	r3, [pc, #136]	@ (80020c8 <HAL_RCC_OscConfig+0x27c>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1f0      	bne.n	800202c <HAL_RCC_OscConfig+0x1e0>
 800204a:	e000      	b.n	800204e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800204c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0308 	and.w	r3, r3, #8
 8002056:	2b00      	cmp	r3, #0
 8002058:	d041      	beq.n	80020de <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d01c      	beq.n	800209c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002062:	4b19      	ldr	r3, [pc, #100]	@ (80020c8 <HAL_RCC_OscConfig+0x27c>)
 8002064:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002068:	4a17      	ldr	r2, [pc, #92]	@ (80020c8 <HAL_RCC_OscConfig+0x27c>)
 800206a:	f043 0301 	orr.w	r3, r3, #1
 800206e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002072:	f7ff fa87 	bl	8001584 <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002078:	e008      	b.n	800208c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800207a:	f7ff fa83 	bl	8001584 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e1e7      	b.n	800245c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800208c:	4b0e      	ldr	r3, [pc, #56]	@ (80020c8 <HAL_RCC_OscConfig+0x27c>)
 800208e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d0ef      	beq.n	800207a <HAL_RCC_OscConfig+0x22e>
 800209a:	e020      	b.n	80020de <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800209c:	4b0a      	ldr	r3, [pc, #40]	@ (80020c8 <HAL_RCC_OscConfig+0x27c>)
 800209e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020a2:	4a09      	ldr	r2, [pc, #36]	@ (80020c8 <HAL_RCC_OscConfig+0x27c>)
 80020a4:	f023 0301 	bic.w	r3, r3, #1
 80020a8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ac:	f7ff fa6a 	bl	8001584 <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020b2:	e00d      	b.n	80020d0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020b4:	f7ff fa66 	bl	8001584 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d906      	bls.n	80020d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e1ca      	b.n	800245c <HAL_RCC_OscConfig+0x610>
 80020c6:	bf00      	nop
 80020c8:	40021000 	.word	0x40021000
 80020cc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020d0:	4b8c      	ldr	r3, [pc, #560]	@ (8002304 <HAL_RCC_OscConfig+0x4b8>)
 80020d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1ea      	bne.n	80020b4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0304 	and.w	r3, r3, #4
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f000 80a6 	beq.w	8002238 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ec:	2300      	movs	r3, #0
 80020ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020f0:	4b84      	ldr	r3, [pc, #528]	@ (8002304 <HAL_RCC_OscConfig+0x4b8>)
 80020f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d101      	bne.n	8002100 <HAL_RCC_OscConfig+0x2b4>
 80020fc:	2301      	movs	r3, #1
 80020fe:	e000      	b.n	8002102 <HAL_RCC_OscConfig+0x2b6>
 8002100:	2300      	movs	r3, #0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00d      	beq.n	8002122 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002106:	4b7f      	ldr	r3, [pc, #508]	@ (8002304 <HAL_RCC_OscConfig+0x4b8>)
 8002108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800210a:	4a7e      	ldr	r2, [pc, #504]	@ (8002304 <HAL_RCC_OscConfig+0x4b8>)
 800210c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002110:	6593      	str	r3, [r2, #88]	@ 0x58
 8002112:	4b7c      	ldr	r3, [pc, #496]	@ (8002304 <HAL_RCC_OscConfig+0x4b8>)
 8002114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002116:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800211e:	2301      	movs	r3, #1
 8002120:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002122:	4b79      	ldr	r3, [pc, #484]	@ (8002308 <HAL_RCC_OscConfig+0x4bc>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800212a:	2b00      	cmp	r3, #0
 800212c:	d118      	bne.n	8002160 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800212e:	4b76      	ldr	r3, [pc, #472]	@ (8002308 <HAL_RCC_OscConfig+0x4bc>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a75      	ldr	r2, [pc, #468]	@ (8002308 <HAL_RCC_OscConfig+0x4bc>)
 8002134:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002138:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800213a:	f7ff fa23 	bl	8001584 <HAL_GetTick>
 800213e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002140:	e008      	b.n	8002154 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002142:	f7ff fa1f 	bl	8001584 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d901      	bls.n	8002154 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e183      	b.n	800245c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002154:	4b6c      	ldr	r3, [pc, #432]	@ (8002308 <HAL_RCC_OscConfig+0x4bc>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800215c:	2b00      	cmp	r3, #0
 800215e:	d0f0      	beq.n	8002142 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d108      	bne.n	800217a <HAL_RCC_OscConfig+0x32e>
 8002168:	4b66      	ldr	r3, [pc, #408]	@ (8002304 <HAL_RCC_OscConfig+0x4b8>)
 800216a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800216e:	4a65      	ldr	r2, [pc, #404]	@ (8002304 <HAL_RCC_OscConfig+0x4b8>)
 8002170:	f043 0301 	orr.w	r3, r3, #1
 8002174:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002178:	e024      	b.n	80021c4 <HAL_RCC_OscConfig+0x378>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	2b05      	cmp	r3, #5
 8002180:	d110      	bne.n	80021a4 <HAL_RCC_OscConfig+0x358>
 8002182:	4b60      	ldr	r3, [pc, #384]	@ (8002304 <HAL_RCC_OscConfig+0x4b8>)
 8002184:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002188:	4a5e      	ldr	r2, [pc, #376]	@ (8002304 <HAL_RCC_OscConfig+0x4b8>)
 800218a:	f043 0304 	orr.w	r3, r3, #4
 800218e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002192:	4b5c      	ldr	r3, [pc, #368]	@ (8002304 <HAL_RCC_OscConfig+0x4b8>)
 8002194:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002198:	4a5a      	ldr	r2, [pc, #360]	@ (8002304 <HAL_RCC_OscConfig+0x4b8>)
 800219a:	f043 0301 	orr.w	r3, r3, #1
 800219e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021a2:	e00f      	b.n	80021c4 <HAL_RCC_OscConfig+0x378>
 80021a4:	4b57      	ldr	r3, [pc, #348]	@ (8002304 <HAL_RCC_OscConfig+0x4b8>)
 80021a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021aa:	4a56      	ldr	r2, [pc, #344]	@ (8002304 <HAL_RCC_OscConfig+0x4b8>)
 80021ac:	f023 0301 	bic.w	r3, r3, #1
 80021b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021b4:	4b53      	ldr	r3, [pc, #332]	@ (8002304 <HAL_RCC_OscConfig+0x4b8>)
 80021b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ba:	4a52      	ldr	r2, [pc, #328]	@ (8002304 <HAL_RCC_OscConfig+0x4b8>)
 80021bc:	f023 0304 	bic.w	r3, r3, #4
 80021c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d016      	beq.n	80021fa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021cc:	f7ff f9da 	bl	8001584 <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021d2:	e00a      	b.n	80021ea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021d4:	f7ff f9d6 	bl	8001584 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e138      	b.n	800245c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021ea:	4b46      	ldr	r3, [pc, #280]	@ (8002304 <HAL_RCC_OscConfig+0x4b8>)
 80021ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d0ed      	beq.n	80021d4 <HAL_RCC_OscConfig+0x388>
 80021f8:	e015      	b.n	8002226 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021fa:	f7ff f9c3 	bl	8001584 <HAL_GetTick>
 80021fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002200:	e00a      	b.n	8002218 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002202:	f7ff f9bf 	bl	8001584 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002210:	4293      	cmp	r3, r2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e121      	b.n	800245c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002218:	4b3a      	ldr	r3, [pc, #232]	@ (8002304 <HAL_RCC_OscConfig+0x4b8>)
 800221a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1ed      	bne.n	8002202 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002226:	7ffb      	ldrb	r3, [r7, #31]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d105      	bne.n	8002238 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800222c:	4b35      	ldr	r3, [pc, #212]	@ (8002304 <HAL_RCC_OscConfig+0x4b8>)
 800222e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002230:	4a34      	ldr	r2, [pc, #208]	@ (8002304 <HAL_RCC_OscConfig+0x4b8>)
 8002232:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002236:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0320 	and.w	r3, r3, #32
 8002240:	2b00      	cmp	r3, #0
 8002242:	d03c      	beq.n	80022be <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d01c      	beq.n	8002286 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800224c:	4b2d      	ldr	r3, [pc, #180]	@ (8002304 <HAL_RCC_OscConfig+0x4b8>)
 800224e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002252:	4a2c      	ldr	r2, [pc, #176]	@ (8002304 <HAL_RCC_OscConfig+0x4b8>)
 8002254:	f043 0301 	orr.w	r3, r3, #1
 8002258:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800225c:	f7ff f992 	bl	8001584 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002264:	f7ff f98e 	bl	8001584 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e0f2      	b.n	800245c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002276:	4b23      	ldr	r3, [pc, #140]	@ (8002304 <HAL_RCC_OscConfig+0x4b8>)
 8002278:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0ef      	beq.n	8002264 <HAL_RCC_OscConfig+0x418>
 8002284:	e01b      	b.n	80022be <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002286:	4b1f      	ldr	r3, [pc, #124]	@ (8002304 <HAL_RCC_OscConfig+0x4b8>)
 8002288:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800228c:	4a1d      	ldr	r2, [pc, #116]	@ (8002304 <HAL_RCC_OscConfig+0x4b8>)
 800228e:	f023 0301 	bic.w	r3, r3, #1
 8002292:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002296:	f7ff f975 	bl	8001584 <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800229c:	e008      	b.n	80022b0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800229e:	f7ff f971 	bl	8001584 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e0d5      	b.n	800245c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022b0:	4b14      	ldr	r3, [pc, #80]	@ (8002304 <HAL_RCC_OscConfig+0x4b8>)
 80022b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1ef      	bne.n	800229e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	69db      	ldr	r3, [r3, #28]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f000 80c9 	beq.w	800245a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022c8:	4b0e      	ldr	r3, [pc, #56]	@ (8002304 <HAL_RCC_OscConfig+0x4b8>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f003 030c 	and.w	r3, r3, #12
 80022d0:	2b0c      	cmp	r3, #12
 80022d2:	f000 8083 	beq.w	80023dc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	69db      	ldr	r3, [r3, #28]
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d15e      	bne.n	800239c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022de:	4b09      	ldr	r3, [pc, #36]	@ (8002304 <HAL_RCC_OscConfig+0x4b8>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a08      	ldr	r2, [pc, #32]	@ (8002304 <HAL_RCC_OscConfig+0x4b8>)
 80022e4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ea:	f7ff f94b 	bl	8001584 <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022f0:	e00c      	b.n	800230c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f2:	f7ff f947 	bl	8001584 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d905      	bls.n	800230c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e0ab      	b.n	800245c <HAL_RCC_OscConfig+0x610>
 8002304:	40021000 	.word	0x40021000
 8002308:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800230c:	4b55      	ldr	r3, [pc, #340]	@ (8002464 <HAL_RCC_OscConfig+0x618>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d1ec      	bne.n	80022f2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002318:	4b52      	ldr	r3, [pc, #328]	@ (8002464 <HAL_RCC_OscConfig+0x618>)
 800231a:	68da      	ldr	r2, [r3, #12]
 800231c:	4b52      	ldr	r3, [pc, #328]	@ (8002468 <HAL_RCC_OscConfig+0x61c>)
 800231e:	4013      	ands	r3, r2
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	6a11      	ldr	r1, [r2, #32]
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002328:	3a01      	subs	r2, #1
 800232a:	0112      	lsls	r2, r2, #4
 800232c:	4311      	orrs	r1, r2
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002332:	0212      	lsls	r2, r2, #8
 8002334:	4311      	orrs	r1, r2
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800233a:	0852      	lsrs	r2, r2, #1
 800233c:	3a01      	subs	r2, #1
 800233e:	0552      	lsls	r2, r2, #21
 8002340:	4311      	orrs	r1, r2
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002346:	0852      	lsrs	r2, r2, #1
 8002348:	3a01      	subs	r2, #1
 800234a:	0652      	lsls	r2, r2, #25
 800234c:	4311      	orrs	r1, r2
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002352:	06d2      	lsls	r2, r2, #27
 8002354:	430a      	orrs	r2, r1
 8002356:	4943      	ldr	r1, [pc, #268]	@ (8002464 <HAL_RCC_OscConfig+0x618>)
 8002358:	4313      	orrs	r3, r2
 800235a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800235c:	4b41      	ldr	r3, [pc, #260]	@ (8002464 <HAL_RCC_OscConfig+0x618>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a40      	ldr	r2, [pc, #256]	@ (8002464 <HAL_RCC_OscConfig+0x618>)
 8002362:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002366:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002368:	4b3e      	ldr	r3, [pc, #248]	@ (8002464 <HAL_RCC_OscConfig+0x618>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	4a3d      	ldr	r2, [pc, #244]	@ (8002464 <HAL_RCC_OscConfig+0x618>)
 800236e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002372:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002374:	f7ff f906 	bl	8001584 <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800237c:	f7ff f902 	bl	8001584 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e066      	b.n	800245c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800238e:	4b35      	ldr	r3, [pc, #212]	@ (8002464 <HAL_RCC_OscConfig+0x618>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d0f0      	beq.n	800237c <HAL_RCC_OscConfig+0x530>
 800239a:	e05e      	b.n	800245a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800239c:	4b31      	ldr	r3, [pc, #196]	@ (8002464 <HAL_RCC_OscConfig+0x618>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a30      	ldr	r2, [pc, #192]	@ (8002464 <HAL_RCC_OscConfig+0x618>)
 80023a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a8:	f7ff f8ec 	bl	8001584 <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b0:	f7ff f8e8 	bl	8001584 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e04c      	b.n	800245c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023c2:	4b28      	ldr	r3, [pc, #160]	@ (8002464 <HAL_RCC_OscConfig+0x618>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1f0      	bne.n	80023b0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80023ce:	4b25      	ldr	r3, [pc, #148]	@ (8002464 <HAL_RCC_OscConfig+0x618>)
 80023d0:	68da      	ldr	r2, [r3, #12]
 80023d2:	4924      	ldr	r1, [pc, #144]	@ (8002464 <HAL_RCC_OscConfig+0x618>)
 80023d4:	4b25      	ldr	r3, [pc, #148]	@ (800246c <HAL_RCC_OscConfig+0x620>)
 80023d6:	4013      	ands	r3, r2
 80023d8:	60cb      	str	r3, [r1, #12]
 80023da:	e03e      	b.n	800245a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	69db      	ldr	r3, [r3, #28]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d101      	bne.n	80023e8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e039      	b.n	800245c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80023e8:	4b1e      	ldr	r3, [pc, #120]	@ (8002464 <HAL_RCC_OscConfig+0x618>)
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	f003 0203 	and.w	r2, r3, #3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d12c      	bne.n	8002456 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002406:	3b01      	subs	r3, #1
 8002408:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800240a:	429a      	cmp	r2, r3
 800240c:	d123      	bne.n	8002456 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002418:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800241a:	429a      	cmp	r2, r3
 800241c:	d11b      	bne.n	8002456 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002428:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800242a:	429a      	cmp	r2, r3
 800242c:	d113      	bne.n	8002456 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002438:	085b      	lsrs	r3, r3, #1
 800243a:	3b01      	subs	r3, #1
 800243c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800243e:	429a      	cmp	r2, r3
 8002440:	d109      	bne.n	8002456 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800244c:	085b      	lsrs	r3, r3, #1
 800244e:	3b01      	subs	r3, #1
 8002450:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002452:	429a      	cmp	r2, r3
 8002454:	d001      	beq.n	800245a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e000      	b.n	800245c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3720      	adds	r7, #32
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40021000 	.word	0x40021000
 8002468:	019f800c 	.word	0x019f800c
 800246c:	feeefffc 	.word	0xfeeefffc

08002470 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800247a:	2300      	movs	r3, #0
 800247c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d101      	bne.n	8002488 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e11e      	b.n	80026c6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002488:	4b91      	ldr	r3, [pc, #580]	@ (80026d0 <HAL_RCC_ClockConfig+0x260>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 030f 	and.w	r3, r3, #15
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	429a      	cmp	r2, r3
 8002494:	d910      	bls.n	80024b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002496:	4b8e      	ldr	r3, [pc, #568]	@ (80026d0 <HAL_RCC_ClockConfig+0x260>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f023 020f 	bic.w	r2, r3, #15
 800249e:	498c      	ldr	r1, [pc, #560]	@ (80026d0 <HAL_RCC_ClockConfig+0x260>)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024a6:	4b8a      	ldr	r3, [pc, #552]	@ (80026d0 <HAL_RCC_ClockConfig+0x260>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d001      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e106      	b.n	80026c6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d073      	beq.n	80025ac <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	2b03      	cmp	r3, #3
 80024ca:	d129      	bne.n	8002520 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024cc:	4b81      	ldr	r3, [pc, #516]	@ (80026d4 <HAL_RCC_ClockConfig+0x264>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e0f4      	b.n	80026c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80024dc:	f000 f99e 	bl	800281c <RCC_GetSysClockFreqFromPLLSource>
 80024e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	4a7c      	ldr	r2, [pc, #496]	@ (80026d8 <HAL_RCC_ClockConfig+0x268>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d93f      	bls.n	800256a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80024ea:	4b7a      	ldr	r3, [pc, #488]	@ (80026d4 <HAL_RCC_ClockConfig+0x264>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d009      	beq.n	800250a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d033      	beq.n	800256a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002506:	2b00      	cmp	r3, #0
 8002508:	d12f      	bne.n	800256a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800250a:	4b72      	ldr	r3, [pc, #456]	@ (80026d4 <HAL_RCC_ClockConfig+0x264>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002512:	4a70      	ldr	r2, [pc, #448]	@ (80026d4 <HAL_RCC_ClockConfig+0x264>)
 8002514:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002518:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800251a:	2380      	movs	r3, #128	@ 0x80
 800251c:	617b      	str	r3, [r7, #20]
 800251e:	e024      	b.n	800256a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	2b02      	cmp	r3, #2
 8002526:	d107      	bne.n	8002538 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002528:	4b6a      	ldr	r3, [pc, #424]	@ (80026d4 <HAL_RCC_ClockConfig+0x264>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d109      	bne.n	8002548 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e0c6      	b.n	80026c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002538:	4b66      	ldr	r3, [pc, #408]	@ (80026d4 <HAL_RCC_ClockConfig+0x264>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002540:	2b00      	cmp	r3, #0
 8002542:	d101      	bne.n	8002548 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e0be      	b.n	80026c6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002548:	f000 f8ce 	bl	80026e8 <HAL_RCC_GetSysClockFreq>
 800254c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	4a61      	ldr	r2, [pc, #388]	@ (80026d8 <HAL_RCC_ClockConfig+0x268>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d909      	bls.n	800256a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002556:	4b5f      	ldr	r3, [pc, #380]	@ (80026d4 <HAL_RCC_ClockConfig+0x264>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800255e:	4a5d      	ldr	r2, [pc, #372]	@ (80026d4 <HAL_RCC_ClockConfig+0x264>)
 8002560:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002564:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002566:	2380      	movs	r3, #128	@ 0x80
 8002568:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800256a:	4b5a      	ldr	r3, [pc, #360]	@ (80026d4 <HAL_RCC_ClockConfig+0x264>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f023 0203 	bic.w	r2, r3, #3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	4957      	ldr	r1, [pc, #348]	@ (80026d4 <HAL_RCC_ClockConfig+0x264>)
 8002578:	4313      	orrs	r3, r2
 800257a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800257c:	f7ff f802 	bl	8001584 <HAL_GetTick>
 8002580:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002582:	e00a      	b.n	800259a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002584:	f7fe fffe 	bl	8001584 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002592:	4293      	cmp	r3, r2
 8002594:	d901      	bls.n	800259a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e095      	b.n	80026c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800259a:	4b4e      	ldr	r3, [pc, #312]	@ (80026d4 <HAL_RCC_ClockConfig+0x264>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f003 020c 	and.w	r2, r3, #12
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d1eb      	bne.n	8002584 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d023      	beq.n	8002600 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0304 	and.w	r3, r3, #4
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d005      	beq.n	80025d0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025c4:	4b43      	ldr	r3, [pc, #268]	@ (80026d4 <HAL_RCC_ClockConfig+0x264>)
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	4a42      	ldr	r2, [pc, #264]	@ (80026d4 <HAL_RCC_ClockConfig+0x264>)
 80025ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80025ce:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0308 	and.w	r3, r3, #8
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d007      	beq.n	80025ec <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80025dc:	4b3d      	ldr	r3, [pc, #244]	@ (80026d4 <HAL_RCC_ClockConfig+0x264>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80025e4:	4a3b      	ldr	r2, [pc, #236]	@ (80026d4 <HAL_RCC_ClockConfig+0x264>)
 80025e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80025ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025ec:	4b39      	ldr	r3, [pc, #228]	@ (80026d4 <HAL_RCC_ClockConfig+0x264>)
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	4936      	ldr	r1, [pc, #216]	@ (80026d4 <HAL_RCC_ClockConfig+0x264>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	608b      	str	r3, [r1, #8]
 80025fe:	e008      	b.n	8002612 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	2b80      	cmp	r3, #128	@ 0x80
 8002604:	d105      	bne.n	8002612 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002606:	4b33      	ldr	r3, [pc, #204]	@ (80026d4 <HAL_RCC_ClockConfig+0x264>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	4a32      	ldr	r2, [pc, #200]	@ (80026d4 <HAL_RCC_ClockConfig+0x264>)
 800260c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002610:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002612:	4b2f      	ldr	r3, [pc, #188]	@ (80026d0 <HAL_RCC_ClockConfig+0x260>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 030f 	and.w	r3, r3, #15
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	429a      	cmp	r2, r3
 800261e:	d21d      	bcs.n	800265c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002620:	4b2b      	ldr	r3, [pc, #172]	@ (80026d0 <HAL_RCC_ClockConfig+0x260>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f023 020f 	bic.w	r2, r3, #15
 8002628:	4929      	ldr	r1, [pc, #164]	@ (80026d0 <HAL_RCC_ClockConfig+0x260>)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	4313      	orrs	r3, r2
 800262e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002630:	f7fe ffa8 	bl	8001584 <HAL_GetTick>
 8002634:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002636:	e00a      	b.n	800264e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002638:	f7fe ffa4 	bl	8001584 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002646:	4293      	cmp	r3, r2
 8002648:	d901      	bls.n	800264e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e03b      	b.n	80026c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800264e:	4b20      	ldr	r3, [pc, #128]	@ (80026d0 <HAL_RCC_ClockConfig+0x260>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 030f 	and.w	r3, r3, #15
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	429a      	cmp	r2, r3
 800265a:	d1ed      	bne.n	8002638 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	2b00      	cmp	r3, #0
 8002666:	d008      	beq.n	800267a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002668:	4b1a      	ldr	r3, [pc, #104]	@ (80026d4 <HAL_RCC_ClockConfig+0x264>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	4917      	ldr	r1, [pc, #92]	@ (80026d4 <HAL_RCC_ClockConfig+0x264>)
 8002676:	4313      	orrs	r3, r2
 8002678:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	2b00      	cmp	r3, #0
 8002684:	d009      	beq.n	800269a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002686:	4b13      	ldr	r3, [pc, #76]	@ (80026d4 <HAL_RCC_ClockConfig+0x264>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	490f      	ldr	r1, [pc, #60]	@ (80026d4 <HAL_RCC_ClockConfig+0x264>)
 8002696:	4313      	orrs	r3, r2
 8002698:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800269a:	f000 f825 	bl	80026e8 <HAL_RCC_GetSysClockFreq>
 800269e:	4602      	mov	r2, r0
 80026a0:	4b0c      	ldr	r3, [pc, #48]	@ (80026d4 <HAL_RCC_ClockConfig+0x264>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	091b      	lsrs	r3, r3, #4
 80026a6:	f003 030f 	and.w	r3, r3, #15
 80026aa:	490c      	ldr	r1, [pc, #48]	@ (80026dc <HAL_RCC_ClockConfig+0x26c>)
 80026ac:	5ccb      	ldrb	r3, [r1, r3]
 80026ae:	f003 031f 	and.w	r3, r3, #31
 80026b2:	fa22 f303 	lsr.w	r3, r2, r3
 80026b6:	4a0a      	ldr	r2, [pc, #40]	@ (80026e0 <HAL_RCC_ClockConfig+0x270>)
 80026b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80026ba:	4b0a      	ldr	r3, [pc, #40]	@ (80026e4 <HAL_RCC_ClockConfig+0x274>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7fe ff14 	bl	80014ec <HAL_InitTick>
 80026c4:	4603      	mov	r3, r0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3718      	adds	r7, #24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40022000 	.word	0x40022000
 80026d4:	40021000 	.word	0x40021000
 80026d8:	04c4b400 	.word	0x04c4b400
 80026dc:	0800744c 	.word	0x0800744c
 80026e0:	20000000 	.word	0x20000000
 80026e4:	20000004 	.word	0x20000004

080026e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b087      	sub	sp, #28
 80026ec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80026ee:	4b2c      	ldr	r3, [pc, #176]	@ (80027a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 030c 	and.w	r3, r3, #12
 80026f6:	2b04      	cmp	r3, #4
 80026f8:	d102      	bne.n	8002700 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80026fa:	4b2a      	ldr	r3, [pc, #168]	@ (80027a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80026fc:	613b      	str	r3, [r7, #16]
 80026fe:	e047      	b.n	8002790 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002700:	4b27      	ldr	r3, [pc, #156]	@ (80027a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f003 030c 	and.w	r3, r3, #12
 8002708:	2b08      	cmp	r3, #8
 800270a:	d102      	bne.n	8002712 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800270c:	4b26      	ldr	r3, [pc, #152]	@ (80027a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800270e:	613b      	str	r3, [r7, #16]
 8002710:	e03e      	b.n	8002790 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002712:	4b23      	ldr	r3, [pc, #140]	@ (80027a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 030c 	and.w	r3, r3, #12
 800271a:	2b0c      	cmp	r3, #12
 800271c:	d136      	bne.n	800278c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800271e:	4b20      	ldr	r3, [pc, #128]	@ (80027a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	f003 0303 	and.w	r3, r3, #3
 8002726:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002728:	4b1d      	ldr	r3, [pc, #116]	@ (80027a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	091b      	lsrs	r3, r3, #4
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	3301      	adds	r3, #1
 8002734:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2b03      	cmp	r3, #3
 800273a:	d10c      	bne.n	8002756 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800273c:	4a1a      	ldr	r2, [pc, #104]	@ (80027a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	fbb2 f3f3 	udiv	r3, r2, r3
 8002744:	4a16      	ldr	r2, [pc, #88]	@ (80027a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002746:	68d2      	ldr	r2, [r2, #12]
 8002748:	0a12      	lsrs	r2, r2, #8
 800274a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800274e:	fb02 f303 	mul.w	r3, r2, r3
 8002752:	617b      	str	r3, [r7, #20]
      break;
 8002754:	e00c      	b.n	8002770 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002756:	4a13      	ldr	r2, [pc, #76]	@ (80027a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	fbb2 f3f3 	udiv	r3, r2, r3
 800275e:	4a10      	ldr	r2, [pc, #64]	@ (80027a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002760:	68d2      	ldr	r2, [r2, #12]
 8002762:	0a12      	lsrs	r2, r2, #8
 8002764:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002768:	fb02 f303 	mul.w	r3, r2, r3
 800276c:	617b      	str	r3, [r7, #20]
      break;
 800276e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002770:	4b0b      	ldr	r3, [pc, #44]	@ (80027a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	0e5b      	lsrs	r3, r3, #25
 8002776:	f003 0303 	and.w	r3, r3, #3
 800277a:	3301      	adds	r3, #1
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002780:	697a      	ldr	r2, [r7, #20]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	fbb2 f3f3 	udiv	r3, r2, r3
 8002788:	613b      	str	r3, [r7, #16]
 800278a:	e001      	b.n	8002790 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800278c:	2300      	movs	r3, #0
 800278e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002790:	693b      	ldr	r3, [r7, #16]
}
 8002792:	4618      	mov	r0, r3
 8002794:	371c      	adds	r7, #28
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	40021000 	.word	0x40021000
 80027a4:	00f42400 	.word	0x00f42400
 80027a8:	016e3600 	.word	0x016e3600

080027ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027b0:	4b03      	ldr	r3, [pc, #12]	@ (80027c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80027b2:	681b      	ldr	r3, [r3, #0]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	20000000 	.word	0x20000000

080027c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80027c8:	f7ff fff0 	bl	80027ac <HAL_RCC_GetHCLKFreq>
 80027cc:	4602      	mov	r2, r0
 80027ce:	4b06      	ldr	r3, [pc, #24]	@ (80027e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	0a1b      	lsrs	r3, r3, #8
 80027d4:	f003 0307 	and.w	r3, r3, #7
 80027d8:	4904      	ldr	r1, [pc, #16]	@ (80027ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80027da:	5ccb      	ldrb	r3, [r1, r3]
 80027dc:	f003 031f 	and.w	r3, r3, #31
 80027e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40021000 	.word	0x40021000
 80027ec:	0800745c 	.word	0x0800745c

080027f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80027f4:	f7ff ffda 	bl	80027ac <HAL_RCC_GetHCLKFreq>
 80027f8:	4602      	mov	r2, r0
 80027fa:	4b06      	ldr	r3, [pc, #24]	@ (8002814 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	0adb      	lsrs	r3, r3, #11
 8002800:	f003 0307 	and.w	r3, r3, #7
 8002804:	4904      	ldr	r1, [pc, #16]	@ (8002818 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002806:	5ccb      	ldrb	r3, [r1, r3]
 8002808:	f003 031f 	and.w	r3, r3, #31
 800280c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002810:	4618      	mov	r0, r3
 8002812:	bd80      	pop	{r7, pc}
 8002814:	40021000 	.word	0x40021000
 8002818:	0800745c 	.word	0x0800745c

0800281c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800281c:	b480      	push	{r7}
 800281e:	b087      	sub	sp, #28
 8002820:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002822:	4b1e      	ldr	r3, [pc, #120]	@ (800289c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	f003 0303 	and.w	r3, r3, #3
 800282a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800282c:	4b1b      	ldr	r3, [pc, #108]	@ (800289c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	091b      	lsrs	r3, r3, #4
 8002832:	f003 030f 	and.w	r3, r3, #15
 8002836:	3301      	adds	r3, #1
 8002838:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	2b03      	cmp	r3, #3
 800283e:	d10c      	bne.n	800285a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002840:	4a17      	ldr	r2, [pc, #92]	@ (80028a0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	fbb2 f3f3 	udiv	r3, r2, r3
 8002848:	4a14      	ldr	r2, [pc, #80]	@ (800289c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800284a:	68d2      	ldr	r2, [r2, #12]
 800284c:	0a12      	lsrs	r2, r2, #8
 800284e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002852:	fb02 f303 	mul.w	r3, r2, r3
 8002856:	617b      	str	r3, [r7, #20]
    break;
 8002858:	e00c      	b.n	8002874 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800285a:	4a12      	ldr	r2, [pc, #72]	@ (80028a4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002862:	4a0e      	ldr	r2, [pc, #56]	@ (800289c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002864:	68d2      	ldr	r2, [r2, #12]
 8002866:	0a12      	lsrs	r2, r2, #8
 8002868:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800286c:	fb02 f303 	mul.w	r3, r2, r3
 8002870:	617b      	str	r3, [r7, #20]
    break;
 8002872:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002874:	4b09      	ldr	r3, [pc, #36]	@ (800289c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	0e5b      	lsrs	r3, r3, #25
 800287a:	f003 0303 	and.w	r3, r3, #3
 800287e:	3301      	adds	r3, #1
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002884:	697a      	ldr	r2, [r7, #20]
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	fbb2 f3f3 	udiv	r3, r2, r3
 800288c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800288e:	687b      	ldr	r3, [r7, #4]
}
 8002890:	4618      	mov	r0, r3
 8002892:	371c      	adds	r7, #28
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	40021000 	.word	0x40021000
 80028a0:	016e3600 	.word	0x016e3600
 80028a4:	00f42400 	.word	0x00f42400

080028a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028b0:	2300      	movs	r3, #0
 80028b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028b4:	2300      	movs	r3, #0
 80028b6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f000 8098 	beq.w	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028c6:	2300      	movs	r3, #0
 80028c8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ca:	4b43      	ldr	r3, [pc, #268]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d10d      	bne.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028d6:	4b40      	ldr	r3, [pc, #256]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028da:	4a3f      	ldr	r2, [pc, #252]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80028e2:	4b3d      	ldr	r3, [pc, #244]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ea:	60bb      	str	r3, [r7, #8]
 80028ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028ee:	2301      	movs	r3, #1
 80028f0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028f2:	4b3a      	ldr	r3, [pc, #232]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a39      	ldr	r2, [pc, #228]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80028f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028fe:	f7fe fe41 	bl	8001584 <HAL_GetTick>
 8002902:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002904:	e009      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002906:	f7fe fe3d 	bl	8001584 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d902      	bls.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	74fb      	strb	r3, [r7, #19]
        break;
 8002918:	e005      	b.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800291a:	4b30      	ldr	r3, [pc, #192]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002922:	2b00      	cmp	r3, #0
 8002924:	d0ef      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002926:	7cfb      	ldrb	r3, [r7, #19]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d159      	bne.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800292c:	4b2a      	ldr	r3, [pc, #168]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800292e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002932:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002936:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d01e      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	429a      	cmp	r2, r3
 8002946:	d019      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002948:	4b23      	ldr	r3, [pc, #140]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800294a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800294e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002952:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002954:	4b20      	ldr	r3, [pc, #128]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002956:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800295a:	4a1f      	ldr	r2, [pc, #124]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800295c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002960:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002964:	4b1c      	ldr	r3, [pc, #112]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002966:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800296a:	4a1b      	ldr	r2, [pc, #108]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800296c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002970:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002974:	4a18      	ldr	r2, [pc, #96]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	2b00      	cmp	r3, #0
 8002984:	d016      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002986:	f7fe fdfd 	bl	8001584 <HAL_GetTick>
 800298a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800298c:	e00b      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800298e:	f7fe fdf9 	bl	8001584 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	f241 3288 	movw	r2, #5000	@ 0x1388
 800299c:	4293      	cmp	r3, r2
 800299e:	d902      	bls.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	74fb      	strb	r3, [r7, #19]
            break;
 80029a4:	e006      	b.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029a6:	4b0c      	ldr	r3, [pc, #48]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d0ec      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80029b4:	7cfb      	ldrb	r3, [r7, #19]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10b      	bne.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029ba:	4b07      	ldr	r3, [pc, #28]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029c8:	4903      	ldr	r1, [pc, #12]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80029d0:	e008      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029d2:	7cfb      	ldrb	r3, [r7, #19]
 80029d4:	74bb      	strb	r3, [r7, #18]
 80029d6:	e005      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80029d8:	40021000 	.word	0x40021000
 80029dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029e0:	7cfb      	ldrb	r3, [r7, #19]
 80029e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029e4:	7c7b      	ldrb	r3, [r7, #17]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d105      	bne.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029ea:	4ba7      	ldr	r3, [pc, #668]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ee:	4aa6      	ldr	r2, [pc, #664]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029f4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00a      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a02:	4ba1      	ldr	r3, [pc, #644]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a08:	f023 0203 	bic.w	r2, r3, #3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	499d      	ldr	r1, [pc, #628]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00a      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a24:	4b98      	ldr	r3, [pc, #608]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a2a:	f023 020c 	bic.w	r2, r3, #12
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	4995      	ldr	r1, [pc, #596]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0304 	and.w	r3, r3, #4
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00a      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a46:	4b90      	ldr	r3, [pc, #576]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a4c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	498c      	ldr	r1, [pc, #560]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0308 	and.w	r3, r3, #8
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00a      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a68:	4b87      	ldr	r3, [pc, #540]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a6e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	4984      	ldr	r1, [pc, #528]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0310 	and.w	r3, r3, #16
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00a      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a8a:	4b7f      	ldr	r3, [pc, #508]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a90:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	695b      	ldr	r3, [r3, #20]
 8002a98:	497b      	ldr	r1, [pc, #492]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0320 	and.w	r3, r3, #32
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d00a      	beq.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002aac:	4b76      	ldr	r3, [pc, #472]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ab2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	4973      	ldr	r1, [pc, #460]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00a      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ace:	4b6e      	ldr	r3, [pc, #440]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ad4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	69db      	ldr	r3, [r3, #28]
 8002adc:	496a      	ldr	r1, [pc, #424]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00a      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002af0:	4b65      	ldr	r3, [pc, #404]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002af6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	4962      	ldr	r1, [pc, #392]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00a      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b12:	4b5d      	ldr	r3, [pc, #372]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b18:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b20:	4959      	ldr	r1, [pc, #356]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00a      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b34:	4b54      	ldr	r3, [pc, #336]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b36:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002b3a:	f023 0203 	bic.w	r2, r3, #3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b42:	4951      	ldr	r1, [pc, #324]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00a      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b56:	4b4c      	ldr	r3, [pc, #304]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b5c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b64:	4948      	ldr	r1, [pc, #288]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d015      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b78:	4b43      	ldr	r3, [pc, #268]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b7e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b86:	4940      	ldr	r1, [pc, #256]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b96:	d105      	bne.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b98:	4b3b      	ldr	r3, [pc, #236]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	4a3a      	ldr	r2, [pc, #232]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ba2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d015      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002bb0:	4b35      	ldr	r3, [pc, #212]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bb6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bbe:	4932      	ldr	r1, [pc, #200]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bce:	d105      	bne.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bd0:	4b2d      	ldr	r3, [pc, #180]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	4a2c      	ldr	r2, [pc, #176]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bd6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002bda:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d015      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002be8:	4b27      	ldr	r3, [pc, #156]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bee:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bf6:	4924      	ldr	r1, [pc, #144]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c02:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c06:	d105      	bne.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c08:	4b1f      	ldr	r3, [pc, #124]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	4a1e      	ldr	r2, [pc, #120]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c12:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d015      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c20:	4b19      	ldr	r3, [pc, #100]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c26:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c2e:	4916      	ldr	r1, [pc, #88]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c3a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c3e:	d105      	bne.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c40:	4b11      	ldr	r3, [pc, #68]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	4a10      	ldr	r2, [pc, #64]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c4a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d019      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c58:	4b0b      	ldr	r3, [pc, #44]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c5e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c66:	4908      	ldr	r1, [pc, #32]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c76:	d109      	bne.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c78:	4b03      	ldr	r3, [pc, #12]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	4a02      	ldr	r2, [pc, #8]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c82:	60d3      	str	r3, [r2, #12]
 8002c84:	e002      	b.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002c86:	bf00      	nop
 8002c88:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d015      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002c98:	4b29      	ldr	r3, [pc, #164]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c9e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ca6:	4926      	ldr	r1, [pc, #152]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cb2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002cb6:	d105      	bne.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002cb8:	4b21      	ldr	r3, [pc, #132]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	4a20      	ldr	r2, [pc, #128]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002cbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cc2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d015      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002cd0:	4b1b      	ldr	r3, [pc, #108]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cd6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cde:	4918      	ldr	r1, [pc, #96]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cee:	d105      	bne.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002cf0:	4b13      	ldr	r3, [pc, #76]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	4a12      	ldr	r2, [pc, #72]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002cf6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cfa:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d015      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002d08:	4b0d      	ldr	r3, [pc, #52]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002d0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002d0e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d16:	490a      	ldr	r1, [pc, #40]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d22:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002d26:	d105      	bne.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d28:	4b05      	ldr	r3, [pc, #20]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	4a04      	ldr	r2, [pc, #16]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002d2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d32:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002d34:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3718      	adds	r7, #24
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	40021000 	.word	0x40021000

08002d44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e09d      	b.n	8002e92 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d108      	bne.n	8002d70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d66:	d009      	beq.n	8002d7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	61da      	str	r2, [r3, #28]
 8002d6e:	e005      	b.n	8002d7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d106      	bne.n	8002d9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f7fe f8cc 	bl	8000f34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2202      	movs	r2, #2
 8002da0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002db2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002dbc:	d902      	bls.n	8002dc4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	60fb      	str	r3, [r7, #12]
 8002dc2:	e002      	b.n	8002dca <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002dc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002dc8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002dd2:	d007      	beq.n	8002de4 <HAL_SPI_Init+0xa0>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002ddc:	d002      	beq.n	8002de4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002df4:	431a      	orrs	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	695b      	ldr	r3, [r3, #20]
 8002e04:	f003 0301 	and.w	r3, r3, #1
 8002e08:	431a      	orrs	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e12:	431a      	orrs	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	69db      	ldr	r3, [r3, #28]
 8002e18:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e26:	ea42 0103 	orr.w	r1, r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e2e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	430a      	orrs	r2, r1
 8002e38:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	0c1b      	lsrs	r3, r3, #16
 8002e40:	f003 0204 	and.w	r2, r3, #4
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e48:	f003 0310 	and.w	r3, r3, #16
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e52:	f003 0308 	and.w	r3, r3, #8
 8002e56:	431a      	orrs	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002e60:	ea42 0103 	orr.w	r1, r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	69da      	ldr	r2, [r3, #28]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e80:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b088      	sub	sp, #32
 8002e9e:	af02      	add	r7, sp, #8
 8002ea0:	60f8      	str	r0, [r7, #12]
 8002ea2:	60b9      	str	r1, [r7, #8]
 8002ea4:	603b      	str	r3, [r7, #0]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d002      	beq.n	8002ec0 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8002eba:	2302      	movs	r3, #2
 8002ebc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002ebe:	e11a      	b.n	80030f6 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ec8:	d112      	bne.n	8002ef0 <HAL_SPI_Receive+0x56>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d10e      	bne.n	8002ef0 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2204      	movs	r2, #4
 8002ed6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002eda:	88fa      	ldrh	r2, [r7, #6]
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	68ba      	ldr	r2, [r7, #8]
 8002ee4:	68b9      	ldr	r1, [r7, #8]
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f000 f90e 	bl	8003108 <HAL_SPI_TransmitReceive>
 8002eec:	4603      	mov	r3, r0
 8002eee:	e107      	b.n	8003100 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d101      	bne.n	8002efe <HAL_SPI_Receive+0x64>
 8002efa:	2302      	movs	r3, #2
 8002efc:	e100      	b.n	8003100 <HAL_SPI_Receive+0x266>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f06:	f7fe fb3d 	bl	8001584 <HAL_GetTick>
 8002f0a:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d002      	beq.n	8002f18 <HAL_SPI_Receive+0x7e>
 8002f12:	88fb      	ldrh	r3, [r7, #6]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d102      	bne.n	8002f1e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002f1c:	e0eb      	b.n	80030f6 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2204      	movs	r2, #4
 8002f22:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	68ba      	ldr	r2, [r7, #8]
 8002f30:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	88fa      	ldrh	r2, [r7, #6]
 8002f36:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	88fa      	ldrh	r2, [r7, #6]
 8002f3e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f68:	d908      	bls.n	8002f7c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	685a      	ldr	r2, [r3, #4]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002f78:	605a      	str	r2, [r3, #4]
 8002f7a:	e007      	b.n	8002f8c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	685a      	ldr	r2, [r3, #4]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002f8a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f94:	d10f      	bne.n	8002fb6 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002fa4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002fb4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fc0:	2b40      	cmp	r3, #64	@ 0x40
 8002fc2:	d007      	beq.n	8002fd4 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002fd2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002fdc:	d86f      	bhi.n	80030be <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002fde:	e034      	b.n	800304a <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d117      	bne.n	800301e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f103 020c 	add.w	r2, r3, #12
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffa:	7812      	ldrb	r2, [r2, #0]
 8002ffc:	b2d2      	uxtb	r2, r2
 8002ffe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003004:	1c5a      	adds	r2, r3, #1
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003010:	b29b      	uxth	r3, r3
 8003012:	3b01      	subs	r3, #1
 8003014:	b29a      	uxth	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800301c:	e015      	b.n	800304a <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800301e:	f7fe fab1 	bl	8001584 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	683a      	ldr	r2, [r7, #0]
 800302a:	429a      	cmp	r2, r3
 800302c:	d803      	bhi.n	8003036 <HAL_SPI_Receive+0x19c>
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003034:	d102      	bne.n	800303c <HAL_SPI_Receive+0x1a2>
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d106      	bne.n	800304a <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003048:	e055      	b.n	80030f6 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003050:	b29b      	uxth	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1c4      	bne.n	8002fe0 <HAL_SPI_Receive+0x146>
 8003056:	e038      	b.n	80030ca <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	2b01      	cmp	r3, #1
 8003064:	d115      	bne.n	8003092 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68da      	ldr	r2, [r3, #12]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003070:	b292      	uxth	r2, r2
 8003072:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003078:	1c9a      	adds	r2, r3, #2
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003084:	b29b      	uxth	r3, r3
 8003086:	3b01      	subs	r3, #1
 8003088:	b29a      	uxth	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003090:	e015      	b.n	80030be <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003092:	f7fe fa77 	bl	8001584 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d803      	bhi.n	80030aa <HAL_SPI_Receive+0x210>
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a8:	d102      	bne.n	80030b0 <HAL_SPI_Receive+0x216>
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d106      	bne.n	80030be <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80030bc:	e01b      	b.n	80030f6 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1c6      	bne.n	8003058 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	6839      	ldr	r1, [r7, #0]
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f000 fb5a 	bl	8003788 <SPI_EndRxTransaction>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d002      	beq.n	80030e0 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2220      	movs	r2, #32
 80030de:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d002      	beq.n	80030ee <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	75fb      	strb	r3, [r7, #23]
 80030ec:	e003      	b.n	80030f6 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80030fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003100:	4618      	mov	r0, r3
 8003102:	3718      	adds	r7, #24
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b08a      	sub	sp, #40	@ 0x28
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
 8003114:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003116:	2301      	movs	r3, #1
 8003118:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800311a:	2300      	movs	r3, #0
 800311c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003126:	2b01      	cmp	r3, #1
 8003128:	d101      	bne.n	800312e <HAL_SPI_TransmitReceive+0x26>
 800312a:	2302      	movs	r3, #2
 800312c:	e20a      	b.n	8003544 <HAL_SPI_TransmitReceive+0x43c>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003136:	f7fe fa25 	bl	8001584 <HAL_GetTick>
 800313a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003142:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800314a:	887b      	ldrh	r3, [r7, #2]
 800314c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800314e:	887b      	ldrh	r3, [r7, #2]
 8003150:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003152:	7efb      	ldrb	r3, [r7, #27]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d00e      	beq.n	8003176 <HAL_SPI_TransmitReceive+0x6e>
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800315e:	d106      	bne.n	800316e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d102      	bne.n	800316e <HAL_SPI_TransmitReceive+0x66>
 8003168:	7efb      	ldrb	r3, [r7, #27]
 800316a:	2b04      	cmp	r3, #4
 800316c:	d003      	beq.n	8003176 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800316e:	2302      	movs	r3, #2
 8003170:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003174:	e1e0      	b.n	8003538 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d005      	beq.n	8003188 <HAL_SPI_TransmitReceive+0x80>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d002      	beq.n	8003188 <HAL_SPI_TransmitReceive+0x80>
 8003182:	887b      	ldrh	r3, [r7, #2]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d103      	bne.n	8003190 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800318e:	e1d3      	b.n	8003538 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003196:	b2db      	uxtb	r3, r3
 8003198:	2b04      	cmp	r3, #4
 800319a:	d003      	beq.n	80031a4 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2205      	movs	r2, #5
 80031a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	887a      	ldrh	r2, [r7, #2]
 80031b4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	887a      	ldrh	r2, [r7, #2]
 80031bc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	68ba      	ldr	r2, [r7, #8]
 80031c4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	887a      	ldrh	r2, [r7, #2]
 80031ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	887a      	ldrh	r2, [r7, #2]
 80031d0:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80031e6:	d802      	bhi.n	80031ee <HAL_SPI_TransmitReceive+0xe6>
 80031e8:	8a3b      	ldrh	r3, [r7, #16]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d908      	bls.n	8003200 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	685a      	ldr	r2, [r3, #4]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80031fc:	605a      	str	r2, [r3, #4]
 80031fe:	e007      	b.n	8003210 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800320e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800321a:	2b40      	cmp	r3, #64	@ 0x40
 800321c:	d007      	beq.n	800322e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800322c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003236:	f240 8081 	bls.w	800333c <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d002      	beq.n	8003248 <HAL_SPI_TransmitReceive+0x140>
 8003242:	8a7b      	ldrh	r3, [r7, #18]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d16d      	bne.n	8003324 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800324c:	881a      	ldrh	r2, [r3, #0]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003258:	1c9a      	adds	r2, r3, #2
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003262:	b29b      	uxth	r3, r3
 8003264:	3b01      	subs	r3, #1
 8003266:	b29a      	uxth	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800326c:	e05a      	b.n	8003324 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b02      	cmp	r3, #2
 800327a:	d11b      	bne.n	80032b4 <HAL_SPI_TransmitReceive+0x1ac>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003280:	b29b      	uxth	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d016      	beq.n	80032b4 <HAL_SPI_TransmitReceive+0x1ac>
 8003286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003288:	2b01      	cmp	r3, #1
 800328a:	d113      	bne.n	80032b4 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003290:	881a      	ldrh	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800329c:	1c9a      	adds	r2, r3, #2
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032b0:	2300      	movs	r3, #0
 80032b2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d11c      	bne.n	80032fc <HAL_SPI_TransmitReceive+0x1f4>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d016      	beq.n	80032fc <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68da      	ldr	r2, [r3, #12]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d8:	b292      	uxth	r2, r2
 80032da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e0:	1c9a      	adds	r2, r3, #2
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	3b01      	subs	r3, #1
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80032f8:	2301      	movs	r3, #1
 80032fa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80032fc:	f7fe f942 	bl	8001584 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003308:	429a      	cmp	r2, r3
 800330a:	d80b      	bhi.n	8003324 <HAL_SPI_TransmitReceive+0x21c>
 800330c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800330e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003312:	d007      	beq.n	8003324 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003322:	e109      	b.n	8003538 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003328:	b29b      	uxth	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d19f      	bne.n	800326e <HAL_SPI_TransmitReceive+0x166>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003334:	b29b      	uxth	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d199      	bne.n	800326e <HAL_SPI_TransmitReceive+0x166>
 800333a:	e0e3      	b.n	8003504 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d003      	beq.n	800334c <HAL_SPI_TransmitReceive+0x244>
 8003344:	8a7b      	ldrh	r3, [r7, #18]
 8003346:	2b01      	cmp	r3, #1
 8003348:	f040 80cf 	bne.w	80034ea <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003350:	b29b      	uxth	r3, r3
 8003352:	2b01      	cmp	r3, #1
 8003354:	d912      	bls.n	800337c <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800335a:	881a      	ldrh	r2, [r3, #0]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003366:	1c9a      	adds	r2, r3, #2
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003370:	b29b      	uxth	r3, r3
 8003372:	3b02      	subs	r3, #2
 8003374:	b29a      	uxth	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800337a:	e0b6      	b.n	80034ea <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	330c      	adds	r3, #12
 8003386:	7812      	ldrb	r2, [r2, #0]
 8003388:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800338e:	1c5a      	adds	r2, r3, #1
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003398:	b29b      	uxth	r3, r3
 800339a:	3b01      	subs	r3, #1
 800339c:	b29a      	uxth	r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033a2:	e0a2      	b.n	80034ea <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d134      	bne.n	800341c <HAL_SPI_TransmitReceive+0x314>
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d02f      	beq.n	800341c <HAL_SPI_TransmitReceive+0x314>
 80033bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d12c      	bne.n	800341c <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d912      	bls.n	80033f2 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033d0:	881a      	ldrh	r2, [r3, #0]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033dc:	1c9a      	adds	r2, r3, #2
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	3b02      	subs	r3, #2
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80033f0:	e012      	b.n	8003418 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	330c      	adds	r3, #12
 80033fc:	7812      	ldrb	r2, [r2, #0]
 80033fe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003404:	1c5a      	adds	r2, r3, #1
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800340e:	b29b      	uxth	r3, r3
 8003410:	3b01      	subs	r3, #1
 8003412:	b29a      	uxth	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003418:	2300      	movs	r3, #0
 800341a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b01      	cmp	r3, #1
 8003428:	d148      	bne.n	80034bc <HAL_SPI_TransmitReceive+0x3b4>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003430:	b29b      	uxth	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d042      	beq.n	80034bc <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800343c:	b29b      	uxth	r3, r3
 800343e:	2b01      	cmp	r3, #1
 8003440:	d923      	bls.n	800348a <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68da      	ldr	r2, [r3, #12]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800344c:	b292      	uxth	r2, r2
 800344e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003454:	1c9a      	adds	r2, r3, #2
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003460:	b29b      	uxth	r3, r3
 8003462:	3b02      	subs	r3, #2
 8003464:	b29a      	uxth	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003472:	b29b      	uxth	r3, r3
 8003474:	2b01      	cmp	r3, #1
 8003476:	d81f      	bhi.n	80034b8 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	685a      	ldr	r2, [r3, #4]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003486:	605a      	str	r2, [r3, #4]
 8003488:	e016      	b.n	80034b8 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f103 020c 	add.w	r2, r3, #12
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003496:	7812      	ldrb	r2, [r2, #0]
 8003498:	b2d2      	uxtb	r2, r2
 800349a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a0:	1c5a      	adds	r2, r3, #1
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	3b01      	subs	r3, #1
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80034b8:	2301      	movs	r3, #1
 80034ba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80034bc:	f7fe f862 	bl	8001584 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d803      	bhi.n	80034d4 <HAL_SPI_TransmitReceive+0x3cc>
 80034cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d2:	d102      	bne.n	80034da <HAL_SPI_TransmitReceive+0x3d2>
 80034d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d107      	bne.n	80034ea <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80034e8:	e026      	b.n	8003538 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f47f af57 	bne.w	80033a4 <HAL_SPI_TransmitReceive+0x29c>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	f47f af50 	bne.w	80033a4 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003504:	69fa      	ldr	r2, [r7, #28]
 8003506:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f000 f995 	bl	8003838 <SPI_EndRxTxTransaction>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d005      	beq.n	8003520 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2220      	movs	r2, #32
 800351e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003524:	2b00      	cmp	r3, #0
 8003526:	d003      	beq.n	8003530 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800352e:	e003      	b.n	8003538 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003540:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003544:	4618      	mov	r0, r3
 8003546:	3728      	adds	r7, #40	@ 0x28
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b088      	sub	sp, #32
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	603b      	str	r3, [r7, #0]
 8003558:	4613      	mov	r3, r2
 800355a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800355c:	f7fe f812 	bl	8001584 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003564:	1a9b      	subs	r3, r3, r2
 8003566:	683a      	ldr	r2, [r7, #0]
 8003568:	4413      	add	r3, r2
 800356a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800356c:	f7fe f80a 	bl	8001584 <HAL_GetTick>
 8003570:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003572:	4b39      	ldr	r3, [pc, #228]	@ (8003658 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	015b      	lsls	r3, r3, #5
 8003578:	0d1b      	lsrs	r3, r3, #20
 800357a:	69fa      	ldr	r2, [r7, #28]
 800357c:	fb02 f303 	mul.w	r3, r2, r3
 8003580:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003582:	e054      	b.n	800362e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800358a:	d050      	beq.n	800362e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800358c:	f7fd fffa 	bl	8001584 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	69fa      	ldr	r2, [r7, #28]
 8003598:	429a      	cmp	r2, r3
 800359a:	d902      	bls.n	80035a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d13d      	bne.n	800361e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	685a      	ldr	r2, [r3, #4]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80035b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035ba:	d111      	bne.n	80035e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035c4:	d004      	beq.n	80035d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035ce:	d107      	bne.n	80035e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035e8:	d10f      	bne.n	800360a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80035f8:	601a      	str	r2, [r3, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003608:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e017      	b.n	800364e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d101      	bne.n	8003628 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003624:	2300      	movs	r3, #0
 8003626:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	3b01      	subs	r3, #1
 800362c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	689a      	ldr	r2, [r3, #8]
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	4013      	ands	r3, r2
 8003638:	68ba      	ldr	r2, [r7, #8]
 800363a:	429a      	cmp	r2, r3
 800363c:	bf0c      	ite	eq
 800363e:	2301      	moveq	r3, #1
 8003640:	2300      	movne	r3, #0
 8003642:	b2db      	uxtb	r3, r3
 8003644:	461a      	mov	r2, r3
 8003646:	79fb      	ldrb	r3, [r7, #7]
 8003648:	429a      	cmp	r2, r3
 800364a:	d19b      	bne.n	8003584 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3720      	adds	r7, #32
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	20000000 	.word	0x20000000

0800365c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b08a      	sub	sp, #40	@ 0x28
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
 8003668:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800366a:	2300      	movs	r3, #0
 800366c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800366e:	f7fd ff89 	bl	8001584 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003676:	1a9b      	subs	r3, r3, r2
 8003678:	683a      	ldr	r2, [r7, #0]
 800367a:	4413      	add	r3, r2
 800367c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800367e:	f7fd ff81 	bl	8001584 <HAL_GetTick>
 8003682:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	330c      	adds	r3, #12
 800368a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800368c:	4b3d      	ldr	r3, [pc, #244]	@ (8003784 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	4613      	mov	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	4413      	add	r3, r2
 8003696:	00da      	lsls	r2, r3, #3
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	0d1b      	lsrs	r3, r3, #20
 800369c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800369e:	fb02 f303 	mul.w	r3, r2, r3
 80036a2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80036a4:	e060      	b.n	8003768 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80036ac:	d107      	bne.n	80036be <SPI_WaitFifoStateUntilTimeout+0x62>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d104      	bne.n	80036be <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80036bc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c4:	d050      	beq.n	8003768 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80036c6:	f7fd ff5d 	bl	8001584 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	6a3b      	ldr	r3, [r7, #32]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d902      	bls.n	80036dc <SPI_WaitFifoStateUntilTimeout+0x80>
 80036d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d13d      	bne.n	8003758 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	685a      	ldr	r2, [r3, #4]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80036ea:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036f4:	d111      	bne.n	800371a <SPI_WaitFifoStateUntilTimeout+0xbe>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036fe:	d004      	beq.n	800370a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003708:	d107      	bne.n	800371a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003718:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800371e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003722:	d10f      	bne.n	8003744 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003742:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e010      	b.n	800377a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800375e:	2300      	movs	r3, #0
 8003760:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	3b01      	subs	r3, #1
 8003766:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689a      	ldr	r2, [r3, #8]
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	4013      	ands	r3, r2
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	429a      	cmp	r2, r3
 8003776:	d196      	bne.n	80036a6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3728      	adds	r7, #40	@ 0x28
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	20000000 	.word	0x20000000

08003788 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b086      	sub	sp, #24
 800378c:	af02      	add	r7, sp, #8
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800379c:	d111      	bne.n	80037c2 <SPI_EndRxTransaction+0x3a>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037a6:	d004      	beq.n	80037b2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037b0:	d107      	bne.n	80037c2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037c0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	9300      	str	r3, [sp, #0]
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	2200      	movs	r2, #0
 80037ca:	2180      	movs	r1, #128	@ 0x80
 80037cc:	68f8      	ldr	r0, [r7, #12]
 80037ce:	f7ff febd 	bl	800354c <SPI_WaitFlagStateUntilTimeout>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d007      	beq.n	80037e8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037dc:	f043 0220 	orr.w	r2, r3, #32
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e023      	b.n	8003830 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037f0:	d11d      	bne.n	800382e <SPI_EndRxTransaction+0xa6>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037fa:	d004      	beq.n	8003806 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003804:	d113      	bne.n	800382e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	9300      	str	r3, [sp, #0]
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	2200      	movs	r2, #0
 800380e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003812:	68f8      	ldr	r0, [r7, #12]
 8003814:	f7ff ff22 	bl	800365c <SPI_WaitFifoStateUntilTimeout>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d007      	beq.n	800382e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003822:	f043 0220 	orr.w	r2, r3, #32
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e000      	b.n	8003830 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3710      	adds	r7, #16
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af02      	add	r7, sp, #8
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	9300      	str	r3, [sp, #0]
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	2200      	movs	r2, #0
 800384c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	f7ff ff03 	bl	800365c <SPI_WaitFifoStateUntilTimeout>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d007      	beq.n	800386c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003860:	f043 0220 	orr.w	r2, r3, #32
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e027      	b.n	80038bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	9300      	str	r3, [sp, #0]
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	2200      	movs	r2, #0
 8003874:	2180      	movs	r1, #128	@ 0x80
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f7ff fe68 	bl	800354c <SPI_WaitFlagStateUntilTimeout>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d007      	beq.n	8003892 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003886:	f043 0220 	orr.w	r2, r3, #32
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e014      	b.n	80038bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	2200      	movs	r2, #0
 800389a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800389e:	68f8      	ldr	r0, [r7, #12]
 80038a0:	f7ff fedc 	bl	800365c <SPI_WaitFifoStateUntilTimeout>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d007      	beq.n	80038ba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038ae:	f043 0220 	orr.w	r2, r3, #32
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e000      	b.n	80038bc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3710      	adds	r7, #16
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e049      	b.n	800396a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d106      	bne.n	80038f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7fd fb84 	bl	8000ff8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2202      	movs	r2, #2
 80038f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	3304      	adds	r3, #4
 8003900:	4619      	mov	r1, r3
 8003902:	4610      	mov	r0, r2
 8003904:	f000 fe88 	bl	8004618 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3708      	adds	r7, #8
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003972:	b580      	push	{r7, lr}
 8003974:	b082      	sub	sp, #8
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d101      	bne.n	8003984 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e049      	b.n	8003a18 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800398a:	b2db      	uxtb	r3, r3
 800398c:	2b00      	cmp	r3, #0
 800398e:	d106      	bne.n	800399e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 f841 	bl	8003a20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2202      	movs	r2, #2
 80039a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	3304      	adds	r3, #4
 80039ae:	4619      	mov	r1, r3
 80039b0:	4610      	mov	r0, r2
 80039b2:	f000 fe31 	bl	8004618 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2201      	movs	r2, #1
 80039e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2201      	movs	r2, #1
 8003a12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3708      	adds	r7, #8
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d109      	bne.n	8003a58 <HAL_TIM_PWM_Start+0x24>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	bf14      	ite	ne
 8003a50:	2301      	movne	r3, #1
 8003a52:	2300      	moveq	r3, #0
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	e03c      	b.n	8003ad2 <HAL_TIM_PWM_Start+0x9e>
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	d109      	bne.n	8003a72 <HAL_TIM_PWM_Start+0x3e>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	bf14      	ite	ne
 8003a6a:	2301      	movne	r3, #1
 8003a6c:	2300      	moveq	r3, #0
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	e02f      	b.n	8003ad2 <HAL_TIM_PWM_Start+0x9e>
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	2b08      	cmp	r3, #8
 8003a76:	d109      	bne.n	8003a8c <HAL_TIM_PWM_Start+0x58>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	bf14      	ite	ne
 8003a84:	2301      	movne	r3, #1
 8003a86:	2300      	moveq	r3, #0
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	e022      	b.n	8003ad2 <HAL_TIM_PWM_Start+0x9e>
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	2b0c      	cmp	r3, #12
 8003a90:	d109      	bne.n	8003aa6 <HAL_TIM_PWM_Start+0x72>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	bf14      	ite	ne
 8003a9e:	2301      	movne	r3, #1
 8003aa0:	2300      	moveq	r3, #0
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	e015      	b.n	8003ad2 <HAL_TIM_PWM_Start+0x9e>
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	2b10      	cmp	r3, #16
 8003aaa:	d109      	bne.n	8003ac0 <HAL_TIM_PWM_Start+0x8c>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	bf14      	ite	ne
 8003ab8:	2301      	movne	r3, #1
 8003aba:	2300      	moveq	r3, #0
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	e008      	b.n	8003ad2 <HAL_TIM_PWM_Start+0x9e>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	bf14      	ite	ne
 8003acc:	2301      	movne	r3, #1
 8003ace:	2300      	moveq	r3, #0
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e0a6      	b.n	8003c28 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d104      	bne.n	8003aea <HAL_TIM_PWM_Start+0xb6>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ae8:	e023      	b.n	8003b32 <HAL_TIM_PWM_Start+0xfe>
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	2b04      	cmp	r3, #4
 8003aee:	d104      	bne.n	8003afa <HAL_TIM_PWM_Start+0xc6>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2202      	movs	r2, #2
 8003af4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003af8:	e01b      	b.n	8003b32 <HAL_TIM_PWM_Start+0xfe>
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	2b08      	cmp	r3, #8
 8003afe:	d104      	bne.n	8003b0a <HAL_TIM_PWM_Start+0xd6>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2202      	movs	r2, #2
 8003b04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b08:	e013      	b.n	8003b32 <HAL_TIM_PWM_Start+0xfe>
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	2b0c      	cmp	r3, #12
 8003b0e:	d104      	bne.n	8003b1a <HAL_TIM_PWM_Start+0xe6>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2202      	movs	r2, #2
 8003b14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003b18:	e00b      	b.n	8003b32 <HAL_TIM_PWM_Start+0xfe>
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	2b10      	cmp	r3, #16
 8003b1e:	d104      	bne.n	8003b2a <HAL_TIM_PWM_Start+0xf6>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2202      	movs	r2, #2
 8003b24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b28:	e003      	b.n	8003b32 <HAL_TIM_PWM_Start+0xfe>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2202      	movs	r2, #2
 8003b2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2201      	movs	r2, #1
 8003b38:	6839      	ldr	r1, [r7, #0]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f001 f9e6 	bl	8004f0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a3a      	ldr	r2, [pc, #232]	@ (8003c30 <HAL_TIM_PWM_Start+0x1fc>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d018      	beq.n	8003b7c <HAL_TIM_PWM_Start+0x148>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a39      	ldr	r2, [pc, #228]	@ (8003c34 <HAL_TIM_PWM_Start+0x200>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d013      	beq.n	8003b7c <HAL_TIM_PWM_Start+0x148>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a37      	ldr	r2, [pc, #220]	@ (8003c38 <HAL_TIM_PWM_Start+0x204>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d00e      	beq.n	8003b7c <HAL_TIM_PWM_Start+0x148>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a36      	ldr	r2, [pc, #216]	@ (8003c3c <HAL_TIM_PWM_Start+0x208>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d009      	beq.n	8003b7c <HAL_TIM_PWM_Start+0x148>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a34      	ldr	r2, [pc, #208]	@ (8003c40 <HAL_TIM_PWM_Start+0x20c>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d004      	beq.n	8003b7c <HAL_TIM_PWM_Start+0x148>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a33      	ldr	r2, [pc, #204]	@ (8003c44 <HAL_TIM_PWM_Start+0x210>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d101      	bne.n	8003b80 <HAL_TIM_PWM_Start+0x14c>
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e000      	b.n	8003b82 <HAL_TIM_PWM_Start+0x14e>
 8003b80:	2300      	movs	r3, #0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d007      	beq.n	8003b96 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b94:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a25      	ldr	r2, [pc, #148]	@ (8003c30 <HAL_TIM_PWM_Start+0x1fc>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d022      	beq.n	8003be6 <HAL_TIM_PWM_Start+0x1b2>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ba8:	d01d      	beq.n	8003be6 <HAL_TIM_PWM_Start+0x1b2>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a26      	ldr	r2, [pc, #152]	@ (8003c48 <HAL_TIM_PWM_Start+0x214>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d018      	beq.n	8003be6 <HAL_TIM_PWM_Start+0x1b2>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a24      	ldr	r2, [pc, #144]	@ (8003c4c <HAL_TIM_PWM_Start+0x218>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d013      	beq.n	8003be6 <HAL_TIM_PWM_Start+0x1b2>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a23      	ldr	r2, [pc, #140]	@ (8003c50 <HAL_TIM_PWM_Start+0x21c>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d00e      	beq.n	8003be6 <HAL_TIM_PWM_Start+0x1b2>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a19      	ldr	r2, [pc, #100]	@ (8003c34 <HAL_TIM_PWM_Start+0x200>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d009      	beq.n	8003be6 <HAL_TIM_PWM_Start+0x1b2>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a18      	ldr	r2, [pc, #96]	@ (8003c38 <HAL_TIM_PWM_Start+0x204>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d004      	beq.n	8003be6 <HAL_TIM_PWM_Start+0x1b2>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a18      	ldr	r2, [pc, #96]	@ (8003c44 <HAL_TIM_PWM_Start+0x210>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d115      	bne.n	8003c12 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	689a      	ldr	r2, [r3, #8]
 8003bec:	4b19      	ldr	r3, [pc, #100]	@ (8003c54 <HAL_TIM_PWM_Start+0x220>)
 8003bee:	4013      	ands	r3, r2
 8003bf0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2b06      	cmp	r3, #6
 8003bf6:	d015      	beq.n	8003c24 <HAL_TIM_PWM_Start+0x1f0>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bfe:	d011      	beq.n	8003c24 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f042 0201 	orr.w	r2, r2, #1
 8003c0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c10:	e008      	b.n	8003c24 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f042 0201 	orr.w	r2, r2, #1
 8003c20:	601a      	str	r2, [r3, #0]
 8003c22:	e000      	b.n	8003c26 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c24:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	40012c00 	.word	0x40012c00
 8003c34:	40013400 	.word	0x40013400
 8003c38:	40014000 	.word	0x40014000
 8003c3c:	40014400 	.word	0x40014400
 8003c40:	40014800 	.word	0x40014800
 8003c44:	40015000 	.word	0x40015000
 8003c48:	40000400 	.word	0x40000400
 8003c4c:	40000800 	.word	0x40000800
 8003c50:	40000c00 	.word	0x40000c00
 8003c54:	00010007 	.word	0x00010007

08003c58 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d101      	bne.n	8003c6c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e097      	b.n	8003d9c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d106      	bne.n	8003c86 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f7fd f9d9 	bl	8001038 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2202      	movs	r2, #2
 8003c8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	6812      	ldr	r2, [r2, #0]
 8003c98:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8003c9c:	f023 0307 	bic.w	r3, r3, #7
 8003ca0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	3304      	adds	r3, #4
 8003caa:	4619      	mov	r1, r3
 8003cac:	4610      	mov	r0, r2
 8003cae:	f000 fcb3 	bl	8004618 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	6a1b      	ldr	r3, [r3, #32]
 8003cc8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cda:	f023 0303 	bic.w	r3, r3, #3
 8003cde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	689a      	ldr	r2, [r3, #8]
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	021b      	lsls	r3, r3, #8
 8003cea:	4313      	orrs	r3, r2
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003cf8:	f023 030c 	bic.w	r3, r3, #12
 8003cfc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003d04:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	68da      	ldr	r2, [r3, #12]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	69db      	ldr	r3, [r3, #28]
 8003d12:	021b      	lsls	r3, r3, #8
 8003d14:	4313      	orrs	r3, r2
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	011a      	lsls	r2, r3, #4
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	031b      	lsls	r3, r3, #12
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003d36:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003d3e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685a      	ldr	r2, [r3, #4]
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	695b      	ldr	r3, [r3, #20]
 8003d48:	011b      	lsls	r3, r3, #4
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	697a      	ldr	r2, [r7, #20]
 8003d58:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2201      	movs	r2, #1
 8003d96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3718      	adds	r7, #24
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003db4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003dbc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003dc4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003dcc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d110      	bne.n	8003df6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003dd4:	7bfb      	ldrb	r3, [r7, #15]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d102      	bne.n	8003de0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003dda:	7b7b      	ldrb	r3, [r7, #13]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d001      	beq.n	8003de4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e069      	b.n	8003eb8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2202      	movs	r2, #2
 8003de8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2202      	movs	r2, #2
 8003df0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003df4:	e031      	b.n	8003e5a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	2b04      	cmp	r3, #4
 8003dfa:	d110      	bne.n	8003e1e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003dfc:	7bbb      	ldrb	r3, [r7, #14]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d102      	bne.n	8003e08 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e02:	7b3b      	ldrb	r3, [r7, #12]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d001      	beq.n	8003e0c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e055      	b.n	8003eb8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2202      	movs	r2, #2
 8003e10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2202      	movs	r2, #2
 8003e18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e1c:	e01d      	b.n	8003e5a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e1e:	7bfb      	ldrb	r3, [r7, #15]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d108      	bne.n	8003e36 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e24:	7bbb      	ldrb	r3, [r7, #14]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d105      	bne.n	8003e36 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e2a:	7b7b      	ldrb	r3, [r7, #13]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d102      	bne.n	8003e36 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e30:	7b3b      	ldrb	r3, [r7, #12]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d001      	beq.n	8003e3a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e03e      	b.n	8003eb8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2202      	movs	r2, #2
 8003e3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2202      	movs	r2, #2
 8003e46:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2202      	movs	r2, #2
 8003e4e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2202      	movs	r2, #2
 8003e56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d003      	beq.n	8003e68 <HAL_TIM_Encoder_Start+0xc4>
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	2b04      	cmp	r3, #4
 8003e64:	d008      	beq.n	8003e78 <HAL_TIM_Encoder_Start+0xd4>
 8003e66:	e00f      	b.n	8003e88 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	2100      	movs	r1, #0
 8003e70:	4618      	mov	r0, r3
 8003e72:	f001 f84b 	bl	8004f0c <TIM_CCxChannelCmd>
      break;
 8003e76:	e016      	b.n	8003ea6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	2104      	movs	r1, #4
 8003e80:	4618      	mov	r0, r3
 8003e82:	f001 f843 	bl	8004f0c <TIM_CCxChannelCmd>
      break;
 8003e86:	e00e      	b.n	8003ea6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	2100      	movs	r1, #0
 8003e90:	4618      	mov	r0, r3
 8003e92:	f001 f83b 	bl	8004f0c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	2104      	movs	r1, #4
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f001 f834 	bl	8004f0c <TIM_CCxChannelCmd>
      break;
 8003ea4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f042 0201 	orr.w	r2, r2, #1
 8003eb4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d020      	beq.n	8003f24 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f003 0302 	and.w	r3, r3, #2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d01b      	beq.n	8003f24 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f06f 0202 	mvn.w	r2, #2
 8003ef4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	f003 0303 	and.w	r3, r3, #3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d003      	beq.n	8003f12 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 fb66 	bl	80045dc <HAL_TIM_IC_CaptureCallback>
 8003f10:	e005      	b.n	8003f1e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 fb58 	bl	80045c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 fb69 	bl	80045f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	f003 0304 	and.w	r3, r3, #4
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d020      	beq.n	8003f70 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f003 0304 	and.w	r3, r3, #4
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d01b      	beq.n	8003f70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f06f 0204 	mvn.w	r2, #4
 8003f40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2202      	movs	r2, #2
 8003f46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d003      	beq.n	8003f5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 fb40 	bl	80045dc <HAL_TIM_IC_CaptureCallback>
 8003f5c:	e005      	b.n	8003f6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 fb32 	bl	80045c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 fb43 	bl	80045f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	f003 0308 	and.w	r3, r3, #8
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d020      	beq.n	8003fbc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f003 0308 	and.w	r3, r3, #8
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d01b      	beq.n	8003fbc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f06f 0208 	mvn.w	r2, #8
 8003f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2204      	movs	r2, #4
 8003f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	69db      	ldr	r3, [r3, #28]
 8003f9a:	f003 0303 	and.w	r3, r3, #3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d003      	beq.n	8003faa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 fb1a 	bl	80045dc <HAL_TIM_IC_CaptureCallback>
 8003fa8:	e005      	b.n	8003fb6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 fb0c 	bl	80045c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 fb1d 	bl	80045f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	f003 0310 	and.w	r3, r3, #16
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d020      	beq.n	8004008 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f003 0310 	and.w	r3, r3, #16
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d01b      	beq.n	8004008 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f06f 0210 	mvn.w	r2, #16
 8003fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2208      	movs	r2, #8
 8003fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	69db      	ldr	r3, [r3, #28]
 8003fe6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d003      	beq.n	8003ff6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 faf4 	bl	80045dc <HAL_TIM_IC_CaptureCallback>
 8003ff4:	e005      	b.n	8004002 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 fae6 	bl	80045c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 faf7 	bl	80045f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00c      	beq.n	800402c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f003 0301 	and.w	r3, r3, #1
 8004018:	2b00      	cmp	r3, #0
 800401a:	d007      	beq.n	800402c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f06f 0201 	mvn.w	r2, #1
 8004024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 fac4 	bl	80045b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004032:	2b00      	cmp	r3, #0
 8004034:	d104      	bne.n	8004040 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00c      	beq.n	800405a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004046:	2b00      	cmp	r3, #0
 8004048:	d007      	beq.n	800405a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004052:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f001 f8b3 	bl	80051c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00c      	beq.n	800407e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800406a:	2b00      	cmp	r3, #0
 800406c:	d007      	beq.n	800407e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004076:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f001 f8ab 	bl	80051d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00c      	beq.n	80040a2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800408e:	2b00      	cmp	r3, #0
 8004090:	d007      	beq.n	80040a2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800409a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 fab1 	bl	8004604 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	f003 0320 	and.w	r3, r3, #32
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00c      	beq.n	80040c6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f003 0320 	and.w	r3, r3, #32
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d007      	beq.n	80040c6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f06f 0220 	mvn.w	r2, #32
 80040be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f001 f873 	bl	80051ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00c      	beq.n	80040ea <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d007      	beq.n	80040ea <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80040e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f001 f87f 	bl	80051e8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00c      	beq.n	800410e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d007      	beq.n	800410e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004106:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f001 f877 	bl	80051fc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00c      	beq.n	8004132 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d007      	beq.n	8004132 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800412a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f001 f86f 	bl	8005210 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00c      	beq.n	8004156 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d007      	beq.n	8004156 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800414e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f001 f867 	bl	8005224 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004156:	bf00      	nop
 8004158:	3710      	adds	r7, #16
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
	...

08004160 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b086      	sub	sp, #24
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800416c:	2300      	movs	r3, #0
 800416e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004176:	2b01      	cmp	r3, #1
 8004178:	d101      	bne.n	800417e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800417a:	2302      	movs	r3, #2
 800417c:	e0ff      	b.n	800437e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2201      	movs	r2, #1
 8004182:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2b14      	cmp	r3, #20
 800418a:	f200 80f0 	bhi.w	800436e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800418e:	a201      	add	r2, pc, #4	@ (adr r2, 8004194 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004194:	080041e9 	.word	0x080041e9
 8004198:	0800436f 	.word	0x0800436f
 800419c:	0800436f 	.word	0x0800436f
 80041a0:	0800436f 	.word	0x0800436f
 80041a4:	08004229 	.word	0x08004229
 80041a8:	0800436f 	.word	0x0800436f
 80041ac:	0800436f 	.word	0x0800436f
 80041b0:	0800436f 	.word	0x0800436f
 80041b4:	0800426b 	.word	0x0800426b
 80041b8:	0800436f 	.word	0x0800436f
 80041bc:	0800436f 	.word	0x0800436f
 80041c0:	0800436f 	.word	0x0800436f
 80041c4:	080042ab 	.word	0x080042ab
 80041c8:	0800436f 	.word	0x0800436f
 80041cc:	0800436f 	.word	0x0800436f
 80041d0:	0800436f 	.word	0x0800436f
 80041d4:	080042ed 	.word	0x080042ed
 80041d8:	0800436f 	.word	0x0800436f
 80041dc:	0800436f 	.word	0x0800436f
 80041e0:	0800436f 	.word	0x0800436f
 80041e4:	0800432d 	.word	0x0800432d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68b9      	ldr	r1, [r7, #8]
 80041ee:	4618      	mov	r0, r3
 80041f0:	f000 fac6 	bl	8004780 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	699a      	ldr	r2, [r3, #24]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f042 0208 	orr.w	r2, r2, #8
 8004202:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	699a      	ldr	r2, [r3, #24]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f022 0204 	bic.w	r2, r2, #4
 8004212:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	6999      	ldr	r1, [r3, #24]
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	691a      	ldr	r2, [r3, #16]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	430a      	orrs	r2, r1
 8004224:	619a      	str	r2, [r3, #24]
      break;
 8004226:	e0a5      	b.n	8004374 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68b9      	ldr	r1, [r7, #8]
 800422e:	4618      	mov	r0, r3
 8004230:	f000 fb40 	bl	80048b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	699a      	ldr	r2, [r3, #24]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004242:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	699a      	ldr	r2, [r3, #24]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004252:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	6999      	ldr	r1, [r3, #24]
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	021a      	lsls	r2, r3, #8
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	430a      	orrs	r2, r1
 8004266:	619a      	str	r2, [r3, #24]
      break;
 8004268:	e084      	b.n	8004374 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68b9      	ldr	r1, [r7, #8]
 8004270:	4618      	mov	r0, r3
 8004272:	f000 fbb3 	bl	80049dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	69da      	ldr	r2, [r3, #28]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f042 0208 	orr.w	r2, r2, #8
 8004284:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	69da      	ldr	r2, [r3, #28]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f022 0204 	bic.w	r2, r2, #4
 8004294:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	69d9      	ldr	r1, [r3, #28]
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	691a      	ldr	r2, [r3, #16]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	430a      	orrs	r2, r1
 80042a6:	61da      	str	r2, [r3, #28]
      break;
 80042a8:	e064      	b.n	8004374 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68b9      	ldr	r1, [r7, #8]
 80042b0:	4618      	mov	r0, r3
 80042b2:	f000 fc25 	bl	8004b00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	69da      	ldr	r2, [r3, #28]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	69da      	ldr	r2, [r3, #28]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	69d9      	ldr	r1, [r3, #28]
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	021a      	lsls	r2, r3, #8
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	61da      	str	r2, [r3, #28]
      break;
 80042ea:	e043      	b.n	8004374 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68b9      	ldr	r1, [r7, #8]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 fc98 	bl	8004c28 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f042 0208 	orr.w	r2, r2, #8
 8004306:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f022 0204 	bic.w	r2, r2, #4
 8004316:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	691a      	ldr	r2, [r3, #16]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	430a      	orrs	r2, r1
 8004328:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800432a:	e023      	b.n	8004374 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68b9      	ldr	r1, [r7, #8]
 8004332:	4618      	mov	r0, r3
 8004334:	f000 fce2 	bl	8004cfc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004346:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004356:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	021a      	lsls	r2, r3, #8
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	430a      	orrs	r2, r1
 800436a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800436c:	e002      	b.n	8004374 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	75fb      	strb	r3, [r7, #23]
      break;
 8004372:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800437c:	7dfb      	ldrb	r3, [r7, #23]
}
 800437e:	4618      	mov	r0, r3
 8004380:	3718      	adds	r7, #24
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop

08004388 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004392:	2300      	movs	r3, #0
 8004394:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800439c:	2b01      	cmp	r3, #1
 800439e:	d101      	bne.n	80043a4 <HAL_TIM_ConfigClockSource+0x1c>
 80043a0:	2302      	movs	r3, #2
 80043a2:	e0f6      	b.n	8004592 <HAL_TIM_ConfigClockSource+0x20a>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2202      	movs	r2, #2
 80043b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80043c2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80043c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80043ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68ba      	ldr	r2, [r7, #8]
 80043d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a6f      	ldr	r2, [pc, #444]	@ (800459c <HAL_TIM_ConfigClockSource+0x214>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	f000 80c1 	beq.w	8004566 <HAL_TIM_ConfigClockSource+0x1de>
 80043e4:	4a6d      	ldr	r2, [pc, #436]	@ (800459c <HAL_TIM_ConfigClockSource+0x214>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	f200 80c6 	bhi.w	8004578 <HAL_TIM_ConfigClockSource+0x1f0>
 80043ec:	4a6c      	ldr	r2, [pc, #432]	@ (80045a0 <HAL_TIM_ConfigClockSource+0x218>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	f000 80b9 	beq.w	8004566 <HAL_TIM_ConfigClockSource+0x1de>
 80043f4:	4a6a      	ldr	r2, [pc, #424]	@ (80045a0 <HAL_TIM_ConfigClockSource+0x218>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	f200 80be 	bhi.w	8004578 <HAL_TIM_ConfigClockSource+0x1f0>
 80043fc:	4a69      	ldr	r2, [pc, #420]	@ (80045a4 <HAL_TIM_ConfigClockSource+0x21c>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	f000 80b1 	beq.w	8004566 <HAL_TIM_ConfigClockSource+0x1de>
 8004404:	4a67      	ldr	r2, [pc, #412]	@ (80045a4 <HAL_TIM_ConfigClockSource+0x21c>)
 8004406:	4293      	cmp	r3, r2
 8004408:	f200 80b6 	bhi.w	8004578 <HAL_TIM_ConfigClockSource+0x1f0>
 800440c:	4a66      	ldr	r2, [pc, #408]	@ (80045a8 <HAL_TIM_ConfigClockSource+0x220>)
 800440e:	4293      	cmp	r3, r2
 8004410:	f000 80a9 	beq.w	8004566 <HAL_TIM_ConfigClockSource+0x1de>
 8004414:	4a64      	ldr	r2, [pc, #400]	@ (80045a8 <HAL_TIM_ConfigClockSource+0x220>)
 8004416:	4293      	cmp	r3, r2
 8004418:	f200 80ae 	bhi.w	8004578 <HAL_TIM_ConfigClockSource+0x1f0>
 800441c:	4a63      	ldr	r2, [pc, #396]	@ (80045ac <HAL_TIM_ConfigClockSource+0x224>)
 800441e:	4293      	cmp	r3, r2
 8004420:	f000 80a1 	beq.w	8004566 <HAL_TIM_ConfigClockSource+0x1de>
 8004424:	4a61      	ldr	r2, [pc, #388]	@ (80045ac <HAL_TIM_ConfigClockSource+0x224>)
 8004426:	4293      	cmp	r3, r2
 8004428:	f200 80a6 	bhi.w	8004578 <HAL_TIM_ConfigClockSource+0x1f0>
 800442c:	4a60      	ldr	r2, [pc, #384]	@ (80045b0 <HAL_TIM_ConfigClockSource+0x228>)
 800442e:	4293      	cmp	r3, r2
 8004430:	f000 8099 	beq.w	8004566 <HAL_TIM_ConfigClockSource+0x1de>
 8004434:	4a5e      	ldr	r2, [pc, #376]	@ (80045b0 <HAL_TIM_ConfigClockSource+0x228>)
 8004436:	4293      	cmp	r3, r2
 8004438:	f200 809e 	bhi.w	8004578 <HAL_TIM_ConfigClockSource+0x1f0>
 800443c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004440:	f000 8091 	beq.w	8004566 <HAL_TIM_ConfigClockSource+0x1de>
 8004444:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004448:	f200 8096 	bhi.w	8004578 <HAL_TIM_ConfigClockSource+0x1f0>
 800444c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004450:	f000 8089 	beq.w	8004566 <HAL_TIM_ConfigClockSource+0x1de>
 8004454:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004458:	f200 808e 	bhi.w	8004578 <HAL_TIM_ConfigClockSource+0x1f0>
 800445c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004460:	d03e      	beq.n	80044e0 <HAL_TIM_ConfigClockSource+0x158>
 8004462:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004466:	f200 8087 	bhi.w	8004578 <HAL_TIM_ConfigClockSource+0x1f0>
 800446a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800446e:	f000 8086 	beq.w	800457e <HAL_TIM_ConfigClockSource+0x1f6>
 8004472:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004476:	d87f      	bhi.n	8004578 <HAL_TIM_ConfigClockSource+0x1f0>
 8004478:	2b70      	cmp	r3, #112	@ 0x70
 800447a:	d01a      	beq.n	80044b2 <HAL_TIM_ConfigClockSource+0x12a>
 800447c:	2b70      	cmp	r3, #112	@ 0x70
 800447e:	d87b      	bhi.n	8004578 <HAL_TIM_ConfigClockSource+0x1f0>
 8004480:	2b60      	cmp	r3, #96	@ 0x60
 8004482:	d050      	beq.n	8004526 <HAL_TIM_ConfigClockSource+0x19e>
 8004484:	2b60      	cmp	r3, #96	@ 0x60
 8004486:	d877      	bhi.n	8004578 <HAL_TIM_ConfigClockSource+0x1f0>
 8004488:	2b50      	cmp	r3, #80	@ 0x50
 800448a:	d03c      	beq.n	8004506 <HAL_TIM_ConfigClockSource+0x17e>
 800448c:	2b50      	cmp	r3, #80	@ 0x50
 800448e:	d873      	bhi.n	8004578 <HAL_TIM_ConfigClockSource+0x1f0>
 8004490:	2b40      	cmp	r3, #64	@ 0x40
 8004492:	d058      	beq.n	8004546 <HAL_TIM_ConfigClockSource+0x1be>
 8004494:	2b40      	cmp	r3, #64	@ 0x40
 8004496:	d86f      	bhi.n	8004578 <HAL_TIM_ConfigClockSource+0x1f0>
 8004498:	2b30      	cmp	r3, #48	@ 0x30
 800449a:	d064      	beq.n	8004566 <HAL_TIM_ConfigClockSource+0x1de>
 800449c:	2b30      	cmp	r3, #48	@ 0x30
 800449e:	d86b      	bhi.n	8004578 <HAL_TIM_ConfigClockSource+0x1f0>
 80044a0:	2b20      	cmp	r3, #32
 80044a2:	d060      	beq.n	8004566 <HAL_TIM_ConfigClockSource+0x1de>
 80044a4:	2b20      	cmp	r3, #32
 80044a6:	d867      	bhi.n	8004578 <HAL_TIM_ConfigClockSource+0x1f0>
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d05c      	beq.n	8004566 <HAL_TIM_ConfigClockSource+0x1de>
 80044ac:	2b10      	cmp	r3, #16
 80044ae:	d05a      	beq.n	8004566 <HAL_TIM_ConfigClockSource+0x1de>
 80044b0:	e062      	b.n	8004578 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044c2:	f000 fd03 	bl	8004ecc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80044d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68ba      	ldr	r2, [r7, #8]
 80044dc:	609a      	str	r2, [r3, #8]
      break;
 80044de:	e04f      	b.n	8004580 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044f0:	f000 fcec 	bl	8004ecc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	689a      	ldr	r2, [r3, #8]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004502:	609a      	str	r2, [r3, #8]
      break;
 8004504:	e03c      	b.n	8004580 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004512:	461a      	mov	r2, r3
 8004514:	f000 fc5e 	bl	8004dd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2150      	movs	r1, #80	@ 0x50
 800451e:	4618      	mov	r0, r3
 8004520:	f000 fcb7 	bl	8004e92 <TIM_ITRx_SetConfig>
      break;
 8004524:	e02c      	b.n	8004580 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004532:	461a      	mov	r2, r3
 8004534:	f000 fc7d 	bl	8004e32 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2160      	movs	r1, #96	@ 0x60
 800453e:	4618      	mov	r0, r3
 8004540:	f000 fca7 	bl	8004e92 <TIM_ITRx_SetConfig>
      break;
 8004544:	e01c      	b.n	8004580 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004552:	461a      	mov	r2, r3
 8004554:	f000 fc3e 	bl	8004dd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2140      	movs	r1, #64	@ 0x40
 800455e:	4618      	mov	r0, r3
 8004560:	f000 fc97 	bl	8004e92 <TIM_ITRx_SetConfig>
      break;
 8004564:	e00c      	b.n	8004580 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4619      	mov	r1, r3
 8004570:	4610      	mov	r0, r2
 8004572:	f000 fc8e 	bl	8004e92 <TIM_ITRx_SetConfig>
      break;
 8004576:	e003      	b.n	8004580 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	73fb      	strb	r3, [r7, #15]
      break;
 800457c:	e000      	b.n	8004580 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800457e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004590:	7bfb      	ldrb	r3, [r7, #15]
}
 8004592:	4618      	mov	r0, r3
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	00100070 	.word	0x00100070
 80045a0:	00100060 	.word	0x00100060
 80045a4:	00100050 	.word	0x00100050
 80045a8:	00100040 	.word	0x00100040
 80045ac:	00100030 	.word	0x00100030
 80045b0:	00100020 	.word	0x00100020

080045b4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80045bc:	bf00      	nop
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045f8:	bf00      	nop
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800460c:	bf00      	nop
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004618:	b480      	push	{r7}
 800461a:	b085      	sub	sp, #20
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a4c      	ldr	r2, [pc, #304]	@ (800475c <TIM_Base_SetConfig+0x144>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d017      	beq.n	8004660 <TIM_Base_SetConfig+0x48>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004636:	d013      	beq.n	8004660 <TIM_Base_SetConfig+0x48>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a49      	ldr	r2, [pc, #292]	@ (8004760 <TIM_Base_SetConfig+0x148>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d00f      	beq.n	8004660 <TIM_Base_SetConfig+0x48>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a48      	ldr	r2, [pc, #288]	@ (8004764 <TIM_Base_SetConfig+0x14c>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d00b      	beq.n	8004660 <TIM_Base_SetConfig+0x48>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a47      	ldr	r2, [pc, #284]	@ (8004768 <TIM_Base_SetConfig+0x150>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d007      	beq.n	8004660 <TIM_Base_SetConfig+0x48>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a46      	ldr	r2, [pc, #280]	@ (800476c <TIM_Base_SetConfig+0x154>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d003      	beq.n	8004660 <TIM_Base_SetConfig+0x48>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a45      	ldr	r2, [pc, #276]	@ (8004770 <TIM_Base_SetConfig+0x158>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d108      	bne.n	8004672 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004666:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	4313      	orrs	r3, r2
 8004670:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a39      	ldr	r2, [pc, #228]	@ (800475c <TIM_Base_SetConfig+0x144>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d023      	beq.n	80046c2 <TIM_Base_SetConfig+0xaa>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004680:	d01f      	beq.n	80046c2 <TIM_Base_SetConfig+0xaa>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a36      	ldr	r2, [pc, #216]	@ (8004760 <TIM_Base_SetConfig+0x148>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d01b      	beq.n	80046c2 <TIM_Base_SetConfig+0xaa>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a35      	ldr	r2, [pc, #212]	@ (8004764 <TIM_Base_SetConfig+0x14c>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d017      	beq.n	80046c2 <TIM_Base_SetConfig+0xaa>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a34      	ldr	r2, [pc, #208]	@ (8004768 <TIM_Base_SetConfig+0x150>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d013      	beq.n	80046c2 <TIM_Base_SetConfig+0xaa>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a33      	ldr	r2, [pc, #204]	@ (800476c <TIM_Base_SetConfig+0x154>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d00f      	beq.n	80046c2 <TIM_Base_SetConfig+0xaa>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a33      	ldr	r2, [pc, #204]	@ (8004774 <TIM_Base_SetConfig+0x15c>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d00b      	beq.n	80046c2 <TIM_Base_SetConfig+0xaa>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a32      	ldr	r2, [pc, #200]	@ (8004778 <TIM_Base_SetConfig+0x160>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d007      	beq.n	80046c2 <TIM_Base_SetConfig+0xaa>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a31      	ldr	r2, [pc, #196]	@ (800477c <TIM_Base_SetConfig+0x164>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d003      	beq.n	80046c2 <TIM_Base_SetConfig+0xaa>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a2c      	ldr	r2, [pc, #176]	@ (8004770 <TIM_Base_SetConfig+0x158>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d108      	bne.n	80046d4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	4313      	orrs	r3, r2
 80046e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	689a      	ldr	r2, [r3, #8]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a18      	ldr	r2, [pc, #96]	@ (800475c <TIM_Base_SetConfig+0x144>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d013      	beq.n	8004728 <TIM_Base_SetConfig+0x110>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a1a      	ldr	r2, [pc, #104]	@ (800476c <TIM_Base_SetConfig+0x154>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d00f      	beq.n	8004728 <TIM_Base_SetConfig+0x110>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a1a      	ldr	r2, [pc, #104]	@ (8004774 <TIM_Base_SetConfig+0x15c>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d00b      	beq.n	8004728 <TIM_Base_SetConfig+0x110>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a19      	ldr	r2, [pc, #100]	@ (8004778 <TIM_Base_SetConfig+0x160>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d007      	beq.n	8004728 <TIM_Base_SetConfig+0x110>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a18      	ldr	r2, [pc, #96]	@ (800477c <TIM_Base_SetConfig+0x164>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d003      	beq.n	8004728 <TIM_Base_SetConfig+0x110>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a13      	ldr	r2, [pc, #76]	@ (8004770 <TIM_Base_SetConfig+0x158>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d103      	bne.n	8004730 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	691a      	ldr	r2, [r3, #16]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	2b01      	cmp	r3, #1
 8004740:	d105      	bne.n	800474e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	f023 0201 	bic.w	r2, r3, #1
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	611a      	str	r2, [r3, #16]
  }
}
 800474e:	bf00      	nop
 8004750:	3714      	adds	r7, #20
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	40012c00 	.word	0x40012c00
 8004760:	40000400 	.word	0x40000400
 8004764:	40000800 	.word	0x40000800
 8004768:	40000c00 	.word	0x40000c00
 800476c:	40013400 	.word	0x40013400
 8004770:	40015000 	.word	0x40015000
 8004774:	40014000 	.word	0x40014000
 8004778:	40014400 	.word	0x40014400
 800477c:	40014800 	.word	0x40014800

08004780 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004780:	b480      	push	{r7}
 8004782:	b087      	sub	sp, #28
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	f023 0201 	bic.w	r2, r3, #1
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f023 0303 	bic.w	r3, r3, #3
 80047ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	f023 0302 	bic.w	r3, r3, #2
 80047cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	697a      	ldr	r2, [r7, #20]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a30      	ldr	r2, [pc, #192]	@ (800489c <TIM_OC1_SetConfig+0x11c>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d013      	beq.n	8004808 <TIM_OC1_SetConfig+0x88>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a2f      	ldr	r2, [pc, #188]	@ (80048a0 <TIM_OC1_SetConfig+0x120>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d00f      	beq.n	8004808 <TIM_OC1_SetConfig+0x88>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a2e      	ldr	r2, [pc, #184]	@ (80048a4 <TIM_OC1_SetConfig+0x124>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d00b      	beq.n	8004808 <TIM_OC1_SetConfig+0x88>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a2d      	ldr	r2, [pc, #180]	@ (80048a8 <TIM_OC1_SetConfig+0x128>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d007      	beq.n	8004808 <TIM_OC1_SetConfig+0x88>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a2c      	ldr	r2, [pc, #176]	@ (80048ac <TIM_OC1_SetConfig+0x12c>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d003      	beq.n	8004808 <TIM_OC1_SetConfig+0x88>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a2b      	ldr	r2, [pc, #172]	@ (80048b0 <TIM_OC1_SetConfig+0x130>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d10c      	bne.n	8004822 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	f023 0308 	bic.w	r3, r3, #8
 800480e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	4313      	orrs	r3, r2
 8004818:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	f023 0304 	bic.w	r3, r3, #4
 8004820:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a1d      	ldr	r2, [pc, #116]	@ (800489c <TIM_OC1_SetConfig+0x11c>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d013      	beq.n	8004852 <TIM_OC1_SetConfig+0xd2>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a1c      	ldr	r2, [pc, #112]	@ (80048a0 <TIM_OC1_SetConfig+0x120>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d00f      	beq.n	8004852 <TIM_OC1_SetConfig+0xd2>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a1b      	ldr	r2, [pc, #108]	@ (80048a4 <TIM_OC1_SetConfig+0x124>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d00b      	beq.n	8004852 <TIM_OC1_SetConfig+0xd2>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a1a      	ldr	r2, [pc, #104]	@ (80048a8 <TIM_OC1_SetConfig+0x128>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d007      	beq.n	8004852 <TIM_OC1_SetConfig+0xd2>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a19      	ldr	r2, [pc, #100]	@ (80048ac <TIM_OC1_SetConfig+0x12c>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d003      	beq.n	8004852 <TIM_OC1_SetConfig+0xd2>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a18      	ldr	r2, [pc, #96]	@ (80048b0 <TIM_OC1_SetConfig+0x130>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d111      	bne.n	8004876 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004858:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004860:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	695b      	ldr	r3, [r3, #20]
 8004866:	693a      	ldr	r2, [r7, #16]
 8004868:	4313      	orrs	r3, r2
 800486a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	693a      	ldr	r2, [r7, #16]
 8004872:	4313      	orrs	r3, r2
 8004874:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	685a      	ldr	r2, [r3, #4]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	621a      	str	r2, [r3, #32]
}
 8004890:	bf00      	nop
 8004892:	371c      	adds	r7, #28
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr
 800489c:	40012c00 	.word	0x40012c00
 80048a0:	40013400 	.word	0x40013400
 80048a4:	40014000 	.word	0x40014000
 80048a8:	40014400 	.word	0x40014400
 80048ac:	40014800 	.word	0x40014800
 80048b0:	40015000 	.word	0x40015000

080048b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b087      	sub	sp, #28
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a1b      	ldr	r3, [r3, #32]
 80048c8:	f023 0210 	bic.w	r2, r3, #16
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	021b      	lsls	r3, r3, #8
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	f023 0320 	bic.w	r3, r3, #32
 8004902:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	011b      	lsls	r3, r3, #4
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	4313      	orrs	r3, r2
 800490e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a2c      	ldr	r2, [pc, #176]	@ (80049c4 <TIM_OC2_SetConfig+0x110>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d007      	beq.n	8004928 <TIM_OC2_SetConfig+0x74>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a2b      	ldr	r2, [pc, #172]	@ (80049c8 <TIM_OC2_SetConfig+0x114>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d003      	beq.n	8004928 <TIM_OC2_SetConfig+0x74>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a2a      	ldr	r2, [pc, #168]	@ (80049cc <TIM_OC2_SetConfig+0x118>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d10d      	bne.n	8004944 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800492e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	011b      	lsls	r3, r3, #4
 8004936:	697a      	ldr	r2, [r7, #20]
 8004938:	4313      	orrs	r3, r2
 800493a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004942:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a1f      	ldr	r2, [pc, #124]	@ (80049c4 <TIM_OC2_SetConfig+0x110>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d013      	beq.n	8004974 <TIM_OC2_SetConfig+0xc0>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a1e      	ldr	r2, [pc, #120]	@ (80049c8 <TIM_OC2_SetConfig+0x114>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d00f      	beq.n	8004974 <TIM_OC2_SetConfig+0xc0>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a1e      	ldr	r2, [pc, #120]	@ (80049d0 <TIM_OC2_SetConfig+0x11c>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d00b      	beq.n	8004974 <TIM_OC2_SetConfig+0xc0>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a1d      	ldr	r2, [pc, #116]	@ (80049d4 <TIM_OC2_SetConfig+0x120>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d007      	beq.n	8004974 <TIM_OC2_SetConfig+0xc0>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a1c      	ldr	r2, [pc, #112]	@ (80049d8 <TIM_OC2_SetConfig+0x124>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d003      	beq.n	8004974 <TIM_OC2_SetConfig+0xc0>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a17      	ldr	r2, [pc, #92]	@ (80049cc <TIM_OC2_SetConfig+0x118>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d113      	bne.n	800499c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800497a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004982:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	695b      	ldr	r3, [r3, #20]
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	693a      	ldr	r2, [r7, #16]
 800498c:	4313      	orrs	r3, r2
 800498e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	4313      	orrs	r3, r2
 800499a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	693a      	ldr	r2, [r7, #16]
 80049a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	685a      	ldr	r2, [r3, #4]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	697a      	ldr	r2, [r7, #20]
 80049b4:	621a      	str	r2, [r3, #32]
}
 80049b6:	bf00      	nop
 80049b8:	371c      	adds	r7, #28
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	40012c00 	.word	0x40012c00
 80049c8:	40013400 	.word	0x40013400
 80049cc:	40015000 	.word	0x40015000
 80049d0:	40014000 	.word	0x40014000
 80049d4:	40014400 	.word	0x40014400
 80049d8:	40014800 	.word	0x40014800

080049dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049dc:	b480      	push	{r7}
 80049de:	b087      	sub	sp, #28
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a1b      	ldr	r3, [r3, #32]
 80049ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a1b      	ldr	r3, [r3, #32]
 80049f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	69db      	ldr	r3, [r3, #28]
 8004a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f023 0303 	bic.w	r3, r3, #3
 8004a16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	021b      	lsls	r3, r3, #8
 8004a30:	697a      	ldr	r2, [r7, #20]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a2b      	ldr	r2, [pc, #172]	@ (8004ae8 <TIM_OC3_SetConfig+0x10c>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d007      	beq.n	8004a4e <TIM_OC3_SetConfig+0x72>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a2a      	ldr	r2, [pc, #168]	@ (8004aec <TIM_OC3_SetConfig+0x110>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d003      	beq.n	8004a4e <TIM_OC3_SetConfig+0x72>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a29      	ldr	r2, [pc, #164]	@ (8004af0 <TIM_OC3_SetConfig+0x114>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d10d      	bne.n	8004a6a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	021b      	lsls	r3, r3, #8
 8004a5c:	697a      	ldr	r2, [r7, #20]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a1e      	ldr	r2, [pc, #120]	@ (8004ae8 <TIM_OC3_SetConfig+0x10c>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d013      	beq.n	8004a9a <TIM_OC3_SetConfig+0xbe>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a1d      	ldr	r2, [pc, #116]	@ (8004aec <TIM_OC3_SetConfig+0x110>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d00f      	beq.n	8004a9a <TIM_OC3_SetConfig+0xbe>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a1d      	ldr	r2, [pc, #116]	@ (8004af4 <TIM_OC3_SetConfig+0x118>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d00b      	beq.n	8004a9a <TIM_OC3_SetConfig+0xbe>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a1c      	ldr	r2, [pc, #112]	@ (8004af8 <TIM_OC3_SetConfig+0x11c>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d007      	beq.n	8004a9a <TIM_OC3_SetConfig+0xbe>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a1b      	ldr	r2, [pc, #108]	@ (8004afc <TIM_OC3_SetConfig+0x120>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d003      	beq.n	8004a9a <TIM_OC3_SetConfig+0xbe>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a16      	ldr	r2, [pc, #88]	@ (8004af0 <TIM_OC3_SetConfig+0x114>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d113      	bne.n	8004ac2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004aa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004aa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	011b      	lsls	r3, r3, #4
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	011b      	lsls	r3, r3, #4
 8004abc:	693a      	ldr	r2, [r7, #16]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	685a      	ldr	r2, [r3, #4]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	621a      	str	r2, [r3, #32]
}
 8004adc:	bf00      	nop
 8004ade:	371c      	adds	r7, #28
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr
 8004ae8:	40012c00 	.word	0x40012c00
 8004aec:	40013400 	.word	0x40013400
 8004af0:	40015000 	.word	0x40015000
 8004af4:	40014000 	.word	0x40014000
 8004af8:	40014400 	.word	0x40014400
 8004afc:	40014800 	.word	0x40014800

08004b00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b087      	sub	sp, #28
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a1b      	ldr	r3, [r3, #32]
 8004b14:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	69db      	ldr	r3, [r3, #28]
 8004b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	021b      	lsls	r3, r3, #8
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004b4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	031b      	lsls	r3, r3, #12
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a2c      	ldr	r2, [pc, #176]	@ (8004c10 <TIM_OC4_SetConfig+0x110>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d007      	beq.n	8004b74 <TIM_OC4_SetConfig+0x74>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a2b      	ldr	r2, [pc, #172]	@ (8004c14 <TIM_OC4_SetConfig+0x114>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d003      	beq.n	8004b74 <TIM_OC4_SetConfig+0x74>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a2a      	ldr	r2, [pc, #168]	@ (8004c18 <TIM_OC4_SetConfig+0x118>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d10d      	bne.n	8004b90 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004b7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	031b      	lsls	r3, r3, #12
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b8e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a1f      	ldr	r2, [pc, #124]	@ (8004c10 <TIM_OC4_SetConfig+0x110>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d013      	beq.n	8004bc0 <TIM_OC4_SetConfig+0xc0>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a1e      	ldr	r2, [pc, #120]	@ (8004c14 <TIM_OC4_SetConfig+0x114>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d00f      	beq.n	8004bc0 <TIM_OC4_SetConfig+0xc0>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a1e      	ldr	r2, [pc, #120]	@ (8004c1c <TIM_OC4_SetConfig+0x11c>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d00b      	beq.n	8004bc0 <TIM_OC4_SetConfig+0xc0>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a1d      	ldr	r2, [pc, #116]	@ (8004c20 <TIM_OC4_SetConfig+0x120>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d007      	beq.n	8004bc0 <TIM_OC4_SetConfig+0xc0>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a1c      	ldr	r2, [pc, #112]	@ (8004c24 <TIM_OC4_SetConfig+0x124>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d003      	beq.n	8004bc0 <TIM_OC4_SetConfig+0xc0>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a17      	ldr	r2, [pc, #92]	@ (8004c18 <TIM_OC4_SetConfig+0x118>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d113      	bne.n	8004be8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004bc6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004bce:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	695b      	ldr	r3, [r3, #20]
 8004bd4:	019b      	lsls	r3, r3, #6
 8004bd6:	693a      	ldr	r2, [r7, #16]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	019b      	lsls	r3, r3, #6
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	693a      	ldr	r2, [r7, #16]
 8004bec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685a      	ldr	r2, [r3, #4]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	697a      	ldr	r2, [r7, #20]
 8004c00:	621a      	str	r2, [r3, #32]
}
 8004c02:	bf00      	nop
 8004c04:	371c      	adds	r7, #28
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr
 8004c0e:	bf00      	nop
 8004c10:	40012c00 	.word	0x40012c00
 8004c14:	40013400 	.word	0x40013400
 8004c18:	40015000 	.word	0x40015000
 8004c1c:	40014000 	.word	0x40014000
 8004c20:	40014400 	.word	0x40014400
 8004c24:	40014800 	.word	0x40014800

08004c28 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b087      	sub	sp, #28
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a1b      	ldr	r3, [r3, #32]
 8004c3c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004c6c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	041b      	lsls	r3, r3, #16
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a19      	ldr	r2, [pc, #100]	@ (8004ce4 <TIM_OC5_SetConfig+0xbc>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d013      	beq.n	8004caa <TIM_OC5_SetConfig+0x82>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a18      	ldr	r2, [pc, #96]	@ (8004ce8 <TIM_OC5_SetConfig+0xc0>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d00f      	beq.n	8004caa <TIM_OC5_SetConfig+0x82>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a17      	ldr	r2, [pc, #92]	@ (8004cec <TIM_OC5_SetConfig+0xc4>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d00b      	beq.n	8004caa <TIM_OC5_SetConfig+0x82>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a16      	ldr	r2, [pc, #88]	@ (8004cf0 <TIM_OC5_SetConfig+0xc8>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d007      	beq.n	8004caa <TIM_OC5_SetConfig+0x82>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a15      	ldr	r2, [pc, #84]	@ (8004cf4 <TIM_OC5_SetConfig+0xcc>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d003      	beq.n	8004caa <TIM_OC5_SetConfig+0x82>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a14      	ldr	r2, [pc, #80]	@ (8004cf8 <TIM_OC5_SetConfig+0xd0>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d109      	bne.n	8004cbe <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cb0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	021b      	lsls	r3, r3, #8
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	685a      	ldr	r2, [r3, #4]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	621a      	str	r2, [r3, #32]
}
 8004cd8:	bf00      	nop
 8004cda:	371c      	adds	r7, #28
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr
 8004ce4:	40012c00 	.word	0x40012c00
 8004ce8:	40013400 	.word	0x40013400
 8004cec:	40014000 	.word	0x40014000
 8004cf0:	40014400 	.word	0x40014400
 8004cf4:	40014800 	.word	0x40014800
 8004cf8:	40015000 	.word	0x40015000

08004cfc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b087      	sub	sp, #28
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a1b      	ldr	r3, [r3, #32]
 8004d10:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	021b      	lsls	r3, r3, #8
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004d42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	051b      	lsls	r3, r3, #20
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a1a      	ldr	r2, [pc, #104]	@ (8004dbc <TIM_OC6_SetConfig+0xc0>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d013      	beq.n	8004d80 <TIM_OC6_SetConfig+0x84>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4a19      	ldr	r2, [pc, #100]	@ (8004dc0 <TIM_OC6_SetConfig+0xc4>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d00f      	beq.n	8004d80 <TIM_OC6_SetConfig+0x84>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a18      	ldr	r2, [pc, #96]	@ (8004dc4 <TIM_OC6_SetConfig+0xc8>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d00b      	beq.n	8004d80 <TIM_OC6_SetConfig+0x84>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4a17      	ldr	r2, [pc, #92]	@ (8004dc8 <TIM_OC6_SetConfig+0xcc>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d007      	beq.n	8004d80 <TIM_OC6_SetConfig+0x84>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a16      	ldr	r2, [pc, #88]	@ (8004dcc <TIM_OC6_SetConfig+0xd0>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d003      	beq.n	8004d80 <TIM_OC6_SetConfig+0x84>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a15      	ldr	r2, [pc, #84]	@ (8004dd0 <TIM_OC6_SetConfig+0xd4>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d109      	bne.n	8004d94 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d86:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	695b      	ldr	r3, [r3, #20]
 8004d8c:	029b      	lsls	r3, r3, #10
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	697a      	ldr	r2, [r7, #20]
 8004d98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	685a      	ldr	r2, [r3, #4]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	621a      	str	r2, [r3, #32]
}
 8004dae:	bf00      	nop
 8004db0:	371c      	adds	r7, #28
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	40012c00 	.word	0x40012c00
 8004dc0:	40013400 	.word	0x40013400
 8004dc4:	40014000 	.word	0x40014000
 8004dc8:	40014400 	.word	0x40014400
 8004dcc:	40014800 	.word	0x40014800
 8004dd0:	40015000 	.word	0x40015000

08004dd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b087      	sub	sp, #28
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6a1b      	ldr	r3, [r3, #32]
 8004de4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6a1b      	ldr	r3, [r3, #32]
 8004dea:	f023 0201 	bic.w	r2, r3, #1
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004dfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	011b      	lsls	r3, r3, #4
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	f023 030a 	bic.w	r3, r3, #10
 8004e10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e12:	697a      	ldr	r2, [r7, #20]
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	621a      	str	r2, [r3, #32]
}
 8004e26:	bf00      	nop
 8004e28:	371c      	adds	r7, #28
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr

08004e32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e32:	b480      	push	{r7}
 8004e34:	b087      	sub	sp, #28
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	60f8      	str	r0, [r7, #12]
 8004e3a:	60b9      	str	r1, [r7, #8]
 8004e3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6a1b      	ldr	r3, [r3, #32]
 8004e48:	f023 0210 	bic.w	r2, r3, #16
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004e5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	031b      	lsls	r3, r3, #12
 8004e62:	693a      	ldr	r2, [r7, #16]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004e6e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	011b      	lsls	r3, r3, #4
 8004e74:	697a      	ldr	r2, [r7, #20]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	621a      	str	r2, [r3, #32]
}
 8004e86:	bf00      	nop
 8004e88:	371c      	adds	r7, #28
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr

08004e92 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e92:	b480      	push	{r7}
 8004e94:	b085      	sub	sp, #20
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
 8004e9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004ea8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004eae:	683a      	ldr	r2, [r7, #0]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	f043 0307 	orr.w	r3, r3, #7
 8004eb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	609a      	str	r2, [r3, #8]
}
 8004ec0:	bf00      	nop
 8004ec2:	3714      	adds	r7, #20
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b087      	sub	sp, #28
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
 8004ed8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ee6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	021a      	lsls	r2, r3, #8
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	431a      	orrs	r2, r3
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	697a      	ldr	r2, [r7, #20]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	697a      	ldr	r2, [r7, #20]
 8004efe:	609a      	str	r2, [r3, #8]
}
 8004f00:	bf00      	nop
 8004f02:	371c      	adds	r7, #28
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b087      	sub	sp, #28
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	f003 031f 	and.w	r3, r3, #31
 8004f1e:	2201      	movs	r2, #1
 8004f20:	fa02 f303 	lsl.w	r3, r2, r3
 8004f24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6a1a      	ldr	r2, [r3, #32]
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	43db      	mvns	r3, r3
 8004f2e:	401a      	ands	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6a1a      	ldr	r2, [r3, #32]
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	f003 031f 	and.w	r3, r3, #31
 8004f3e:	6879      	ldr	r1, [r7, #4]
 8004f40:	fa01 f303 	lsl.w	r3, r1, r3
 8004f44:	431a      	orrs	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	621a      	str	r2, [r3, #32]
}
 8004f4a:	bf00      	nop
 8004f4c:	371c      	adds	r7, #28
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr
	...

08004f58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d101      	bne.n	8004f70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f6c:	2302      	movs	r3, #2
 8004f6e:	e074      	b.n	800505a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a34      	ldr	r2, [pc, #208]	@ (8005068 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d009      	beq.n	8004fae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a33      	ldr	r2, [pc, #204]	@ (800506c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d004      	beq.n	8004fae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a31      	ldr	r2, [pc, #196]	@ (8005070 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d108      	bne.n	8004fc0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004fb4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004fc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a21      	ldr	r2, [pc, #132]	@ (8005068 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d022      	beq.n	800502e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ff0:	d01d      	beq.n	800502e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a1f      	ldr	r2, [pc, #124]	@ (8005074 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d018      	beq.n	800502e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a1d      	ldr	r2, [pc, #116]	@ (8005078 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d013      	beq.n	800502e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a1c      	ldr	r2, [pc, #112]	@ (800507c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d00e      	beq.n	800502e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a15      	ldr	r2, [pc, #84]	@ (800506c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d009      	beq.n	800502e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a18      	ldr	r2, [pc, #96]	@ (8005080 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d004      	beq.n	800502e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a11      	ldr	r2, [pc, #68]	@ (8005070 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d10c      	bne.n	8005048 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005034:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	68ba      	ldr	r2, [r7, #8]
 800503c:	4313      	orrs	r3, r2
 800503e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68ba      	ldr	r2, [r7, #8]
 8005046:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3714      	adds	r7, #20
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop
 8005068:	40012c00 	.word	0x40012c00
 800506c:	40013400 	.word	0x40013400
 8005070:	40015000 	.word	0x40015000
 8005074:	40000400 	.word	0x40000400
 8005078:	40000800 	.word	0x40000800
 800507c:	40000c00 	.word	0x40000c00
 8005080:	40014000 	.word	0x40014000

08005084 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005084:	b480      	push	{r7}
 8005086:	b085      	sub	sp, #20
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800508e:	2300      	movs	r3, #0
 8005090:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005098:	2b01      	cmp	r3, #1
 800509a:	d101      	bne.n	80050a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800509c:	2302      	movs	r3, #2
 800509e:	e078      	b.n	8005192 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4313      	orrs	r3, r2
 80050de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	695b      	ldr	r3, [r3, #20]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005106:	4313      	orrs	r3, r2
 8005108:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	699b      	ldr	r3, [r3, #24]
 8005114:	041b      	lsls	r3, r3, #16
 8005116:	4313      	orrs	r3, r2
 8005118:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	69db      	ldr	r3, [r3, #28]
 8005124:	4313      	orrs	r3, r2
 8005126:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a1c      	ldr	r2, [pc, #112]	@ (80051a0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d009      	beq.n	8005146 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a1b      	ldr	r2, [pc, #108]	@ (80051a4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d004      	beq.n	8005146 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a19      	ldr	r2, [pc, #100]	@ (80051a8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d11c      	bne.n	8005180 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005150:	051b      	lsls	r3, r3, #20
 8005152:	4313      	orrs	r3, r2
 8005154:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	6a1b      	ldr	r3, [r3, #32]
 8005160:	4313      	orrs	r3, r2
 8005162:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800516e:	4313      	orrs	r3, r2
 8005170:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800517c:	4313      	orrs	r3, r2
 800517e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3714      	adds	r7, #20
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
 800519e:	bf00      	nop
 80051a0:	40012c00 	.word	0x40012c00
 80051a4:	40013400 	.word	0x40013400
 80051a8:	40015000 	.word	0x40015000

080051ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051b4:	bf00      	nop
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051c8:	bf00      	nop
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80051dc:	bf00      	nop
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80051f0:	bf00      	nop
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005204:	bf00      	nop
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005218:	bf00      	nop
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800522c:	bf00      	nop
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d101      	bne.n	800524a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e042      	b.n	80052d0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005250:	2b00      	cmp	r3, #0
 8005252:	d106      	bne.n	8005262 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f7fb ffa1 	bl	80011a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2224      	movs	r2, #36	@ 0x24
 8005266:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f022 0201 	bic.w	r2, r2, #1
 8005278:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800527e:	2b00      	cmp	r3, #0
 8005280:	d002      	beq.n	8005288 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 fef6 	bl	8006074 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f000 fbf7 	bl	8005a7c <UART_SetConfig>
 800528e:	4603      	mov	r3, r0
 8005290:	2b01      	cmp	r3, #1
 8005292:	d101      	bne.n	8005298 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e01b      	b.n	80052d0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	685a      	ldr	r2, [r3, #4]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80052a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	689a      	ldr	r2, [r3, #8]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80052b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f042 0201 	orr.w	r2, r2, #1
 80052c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 ff75 	bl	80061b8 <UART_CheckIdleState>
 80052ce:	4603      	mov	r3, r0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3708      	adds	r7, #8
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b08a      	sub	sp, #40	@ 0x28
 80052dc:	af02      	add	r7, sp, #8
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	603b      	str	r3, [r7, #0]
 80052e4:	4613      	mov	r3, r2
 80052e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ee:	2b20      	cmp	r3, #32
 80052f0:	d17b      	bne.n	80053ea <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d002      	beq.n	80052fe <HAL_UART_Transmit+0x26>
 80052f8:	88fb      	ldrh	r3, [r7, #6]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d101      	bne.n	8005302 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e074      	b.n	80053ec <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2200      	movs	r2, #0
 8005306:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2221      	movs	r2, #33	@ 0x21
 800530e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005312:	f7fc f937 	bl	8001584 <HAL_GetTick>
 8005316:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	88fa      	ldrh	r2, [r7, #6]
 800531c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	88fa      	ldrh	r2, [r7, #6]
 8005324:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005330:	d108      	bne.n	8005344 <HAL_UART_Transmit+0x6c>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d104      	bne.n	8005344 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800533a:	2300      	movs	r3, #0
 800533c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	61bb      	str	r3, [r7, #24]
 8005342:	e003      	b.n	800534c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005348:	2300      	movs	r3, #0
 800534a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800534c:	e030      	b.n	80053b0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	9300      	str	r3, [sp, #0]
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	2200      	movs	r2, #0
 8005356:	2180      	movs	r1, #128	@ 0x80
 8005358:	68f8      	ldr	r0, [r7, #12]
 800535a:	f000 ffd7 	bl	800630c <UART_WaitOnFlagUntilTimeout>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d005      	beq.n	8005370 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2220      	movs	r2, #32
 8005368:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800536c:	2303      	movs	r3, #3
 800536e:	e03d      	b.n	80053ec <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d10b      	bne.n	800538e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	881b      	ldrh	r3, [r3, #0]
 800537a:	461a      	mov	r2, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005384:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	3302      	adds	r3, #2
 800538a:	61bb      	str	r3, [r7, #24]
 800538c:	e007      	b.n	800539e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	781a      	ldrb	r2, [r3, #0]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	3301      	adds	r3, #1
 800539c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	3b01      	subs	r3, #1
 80053a8:	b29a      	uxth	r2, r3
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1c8      	bne.n	800534e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	9300      	str	r3, [sp, #0]
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	2200      	movs	r2, #0
 80053c4:	2140      	movs	r1, #64	@ 0x40
 80053c6:	68f8      	ldr	r0, [r7, #12]
 80053c8:	f000 ffa0 	bl	800630c <UART_WaitOnFlagUntilTimeout>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d005      	beq.n	80053de <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2220      	movs	r2, #32
 80053d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e006      	b.n	80053ec <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2220      	movs	r2, #32
 80053e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80053e6:	2300      	movs	r3, #0
 80053e8:	e000      	b.n	80053ec <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80053ea:	2302      	movs	r3, #2
  }
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3720      	adds	r7, #32
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b0ba      	sub	sp, #232	@ 0xe8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	69db      	ldr	r3, [r3, #28]
 8005402:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800541a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800541e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005422:	4013      	ands	r3, r2
 8005424:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005428:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800542c:	2b00      	cmp	r3, #0
 800542e:	d11b      	bne.n	8005468 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005430:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005434:	f003 0320 	and.w	r3, r3, #32
 8005438:	2b00      	cmp	r3, #0
 800543a:	d015      	beq.n	8005468 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800543c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005440:	f003 0320 	and.w	r3, r3, #32
 8005444:	2b00      	cmp	r3, #0
 8005446:	d105      	bne.n	8005454 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005448:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800544c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005450:	2b00      	cmp	r3, #0
 8005452:	d009      	beq.n	8005468 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005458:	2b00      	cmp	r3, #0
 800545a:	f000 82e3 	beq.w	8005a24 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	4798      	blx	r3
      }
      return;
 8005466:	e2dd      	b.n	8005a24 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005468:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800546c:	2b00      	cmp	r3, #0
 800546e:	f000 8123 	beq.w	80056b8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005472:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005476:	4b8d      	ldr	r3, [pc, #564]	@ (80056ac <HAL_UART_IRQHandler+0x2b8>)
 8005478:	4013      	ands	r3, r2
 800547a:	2b00      	cmp	r3, #0
 800547c:	d106      	bne.n	800548c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800547e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005482:	4b8b      	ldr	r3, [pc, #556]	@ (80056b0 <HAL_UART_IRQHandler+0x2bc>)
 8005484:	4013      	ands	r3, r2
 8005486:	2b00      	cmp	r3, #0
 8005488:	f000 8116 	beq.w	80056b8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800548c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005490:	f003 0301 	and.w	r3, r3, #1
 8005494:	2b00      	cmp	r3, #0
 8005496:	d011      	beq.n	80054bc <HAL_UART_IRQHandler+0xc8>
 8005498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800549c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d00b      	beq.n	80054bc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2201      	movs	r2, #1
 80054aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054b2:	f043 0201 	orr.w	r2, r3, #1
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80054bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054c0:	f003 0302 	and.w	r3, r3, #2
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d011      	beq.n	80054ec <HAL_UART_IRQHandler+0xf8>
 80054c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054cc:	f003 0301 	and.w	r3, r3, #1
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d00b      	beq.n	80054ec <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2202      	movs	r2, #2
 80054da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054e2:	f043 0204 	orr.w	r2, r3, #4
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80054ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054f0:	f003 0304 	and.w	r3, r3, #4
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d011      	beq.n	800551c <HAL_UART_IRQHandler+0x128>
 80054f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054fc:	f003 0301 	and.w	r3, r3, #1
 8005500:	2b00      	cmp	r3, #0
 8005502:	d00b      	beq.n	800551c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2204      	movs	r2, #4
 800550a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005512:	f043 0202 	orr.w	r2, r3, #2
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800551c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005520:	f003 0308 	and.w	r3, r3, #8
 8005524:	2b00      	cmp	r3, #0
 8005526:	d017      	beq.n	8005558 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800552c:	f003 0320 	and.w	r3, r3, #32
 8005530:	2b00      	cmp	r3, #0
 8005532:	d105      	bne.n	8005540 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005534:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005538:	4b5c      	ldr	r3, [pc, #368]	@ (80056ac <HAL_UART_IRQHandler+0x2b8>)
 800553a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00b      	beq.n	8005558 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2208      	movs	r2, #8
 8005546:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800554e:	f043 0208 	orr.w	r2, r3, #8
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800555c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005560:	2b00      	cmp	r3, #0
 8005562:	d012      	beq.n	800558a <HAL_UART_IRQHandler+0x196>
 8005564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005568:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800556c:	2b00      	cmp	r3, #0
 800556e:	d00c      	beq.n	800558a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005578:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005580:	f043 0220 	orr.w	r2, r3, #32
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005590:	2b00      	cmp	r3, #0
 8005592:	f000 8249 	beq.w	8005a28 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800559a:	f003 0320 	and.w	r3, r3, #32
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d013      	beq.n	80055ca <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80055a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055a6:	f003 0320 	and.w	r3, r3, #32
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d105      	bne.n	80055ba <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80055ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d007      	beq.n	80055ca <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d003      	beq.n	80055ca <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055d0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055de:	2b40      	cmp	r3, #64	@ 0x40
 80055e0:	d005      	beq.n	80055ee <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80055e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055e6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d054      	beq.n	8005698 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 fef9 	bl	80063e6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055fe:	2b40      	cmp	r3, #64	@ 0x40
 8005600:	d146      	bne.n	8005690 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	3308      	adds	r3, #8
 8005608:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005610:	e853 3f00 	ldrex	r3, [r3]
 8005614:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005618:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800561c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005620:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	3308      	adds	r3, #8
 800562a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800562e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005632:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005636:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800563a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800563e:	e841 2300 	strex	r3, r2, [r1]
 8005642:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005646:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1d9      	bne.n	8005602 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005654:	2b00      	cmp	r3, #0
 8005656:	d017      	beq.n	8005688 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800565e:	4a15      	ldr	r2, [pc, #84]	@ (80056b4 <HAL_UART_IRQHandler+0x2c0>)
 8005660:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005668:	4618      	mov	r0, r3
 800566a:	f7fc f921 	bl	80018b0 <HAL_DMA_Abort_IT>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d019      	beq.n	80056a8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800567a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005682:	4610      	mov	r0, r2
 8005684:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005686:	e00f      	b.n	80056a8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 f9e1 	bl	8005a50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800568e:	e00b      	b.n	80056a8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 f9dd 	bl	8005a50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005696:	e007      	b.n	80056a8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f000 f9d9 	bl	8005a50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80056a6:	e1bf      	b.n	8005a28 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056a8:	bf00      	nop
    return;
 80056aa:	e1bd      	b.n	8005a28 <HAL_UART_IRQHandler+0x634>
 80056ac:	10000001 	.word	0x10000001
 80056b0:	04000120 	.word	0x04000120
 80056b4:	080064b3 	.word	0x080064b3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056bc:	2b01      	cmp	r3, #1
 80056be:	f040 8153 	bne.w	8005968 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80056c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056c6:	f003 0310 	and.w	r3, r3, #16
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	f000 814c 	beq.w	8005968 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80056d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056d4:	f003 0310 	and.w	r3, r3, #16
 80056d8:	2b00      	cmp	r3, #0
 80056da:	f000 8145 	beq.w	8005968 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2210      	movs	r2, #16
 80056e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056f0:	2b40      	cmp	r3, #64	@ 0x40
 80056f2:	f040 80bb 	bne.w	800586c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005704:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005708:	2b00      	cmp	r3, #0
 800570a:	f000 818f 	beq.w	8005a2c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005714:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005718:	429a      	cmp	r2, r3
 800571a:	f080 8187 	bcs.w	8005a2c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005724:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 0320 	and.w	r3, r3, #32
 8005736:	2b00      	cmp	r3, #0
 8005738:	f040 8087 	bne.w	800584a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005744:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005748:	e853 3f00 	ldrex	r3, [r3]
 800574c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005750:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005754:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005758:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	461a      	mov	r2, r3
 8005762:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005766:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800576a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800576e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005772:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005776:	e841 2300 	strex	r3, r2, [r1]
 800577a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800577e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1da      	bne.n	800573c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	3308      	adds	r3, #8
 800578c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800578e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005790:	e853 3f00 	ldrex	r3, [r3]
 8005794:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005796:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005798:	f023 0301 	bic.w	r3, r3, #1
 800579c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	3308      	adds	r3, #8
 80057a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80057aa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80057ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80057b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80057b6:	e841 2300 	strex	r3, r2, [r1]
 80057ba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80057bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d1e1      	bne.n	8005786 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	3308      	adds	r3, #8
 80057c8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80057cc:	e853 3f00 	ldrex	r3, [r3]
 80057d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80057d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80057d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	3308      	adds	r3, #8
 80057e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80057e6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80057e8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80057ec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80057ee:	e841 2300 	strex	r3, r2, [r1]
 80057f2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80057f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d1e3      	bne.n	80057c2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2220      	movs	r2, #32
 80057fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800580e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005810:	e853 3f00 	ldrex	r3, [r3]
 8005814:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005816:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005818:	f023 0310 	bic.w	r3, r3, #16
 800581c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	461a      	mov	r2, r3
 8005826:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800582a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800582c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800582e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005830:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005832:	e841 2300 	strex	r3, r2, [r1]
 8005836:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005838:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1e4      	bne.n	8005808 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005844:	4618      	mov	r0, r3
 8005846:	f7fb ffda 	bl	80017fe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2202      	movs	r2, #2
 800584e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800585c:	b29b      	uxth	r3, r3
 800585e:	1ad3      	subs	r3, r2, r3
 8005860:	b29b      	uxth	r3, r3
 8005862:	4619      	mov	r1, r3
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f000 f8fd 	bl	8005a64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800586a:	e0df      	b.n	8005a2c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005878:	b29b      	uxth	r3, r3
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005886:	b29b      	uxth	r3, r3
 8005888:	2b00      	cmp	r3, #0
 800588a:	f000 80d1 	beq.w	8005a30 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800588e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005892:	2b00      	cmp	r3, #0
 8005894:	f000 80cc 	beq.w	8005a30 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800589e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058a0:	e853 3f00 	ldrex	r3, [r3]
 80058a4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80058a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	461a      	mov	r2, r3
 80058b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80058ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80058bc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058be:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80058c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058c2:	e841 2300 	strex	r3, r2, [r1]
 80058c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80058c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d1e4      	bne.n	8005898 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	3308      	adds	r3, #8
 80058d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d8:	e853 3f00 	ldrex	r3, [r3]
 80058dc:	623b      	str	r3, [r7, #32]
   return(result);
 80058de:	6a3b      	ldr	r3, [r7, #32]
 80058e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058e4:	f023 0301 	bic.w	r3, r3, #1
 80058e8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	3308      	adds	r3, #8
 80058f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80058f6:	633a      	str	r2, [r7, #48]	@ 0x30
 80058f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80058fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058fe:	e841 2300 	strex	r3, r2, [r1]
 8005902:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1e1      	bne.n	80058ce <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2220      	movs	r2, #32
 800590e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	e853 3f00 	ldrex	r3, [r3]
 800592a:	60fb      	str	r3, [r7, #12]
   return(result);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f023 0310 	bic.w	r3, r3, #16
 8005932:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	461a      	mov	r2, r3
 800593c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005940:	61fb      	str	r3, [r7, #28]
 8005942:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005944:	69b9      	ldr	r1, [r7, #24]
 8005946:	69fa      	ldr	r2, [r7, #28]
 8005948:	e841 2300 	strex	r3, r2, [r1]
 800594c:	617b      	str	r3, [r7, #20]
   return(result);
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d1e4      	bne.n	800591e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2202      	movs	r2, #2
 8005958:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800595a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800595e:	4619      	mov	r1, r3
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 f87f 	bl	8005a64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005966:	e063      	b.n	8005a30 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800596c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00e      	beq.n	8005992 <HAL_UART_IRQHandler+0x59e>
 8005974:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005978:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800597c:	2b00      	cmp	r3, #0
 800597e:	d008      	beq.n	8005992 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005988:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 fdd2 	bl	8006534 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005990:	e051      	b.n	8005a36 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005996:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800599a:	2b00      	cmp	r3, #0
 800599c:	d014      	beq.n	80059c8 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800599e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d105      	bne.n	80059b6 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80059aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d008      	beq.n	80059c8 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d03a      	beq.n	8005a34 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	4798      	blx	r3
    }
    return;
 80059c6:	e035      	b.n	8005a34 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80059c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d009      	beq.n	80059e8 <HAL_UART_IRQHandler+0x5f4>
 80059d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d003      	beq.n	80059e8 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f000 fd7c 	bl	80064de <UART_EndTransmit_IT>
    return;
 80059e6:	e026      	b.n	8005a36 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80059e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d009      	beq.n	8005a08 <HAL_UART_IRQHandler+0x614>
 80059f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059f8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d003      	beq.n	8005a08 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 fdab 	bl	800655c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005a06:	e016      	b.n	8005a36 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005a08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a0c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d010      	beq.n	8005a36 <HAL_UART_IRQHandler+0x642>
 8005a14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	da0c      	bge.n	8005a36 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 fd93 	bl	8006548 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005a22:	e008      	b.n	8005a36 <HAL_UART_IRQHandler+0x642>
      return;
 8005a24:	bf00      	nop
 8005a26:	e006      	b.n	8005a36 <HAL_UART_IRQHandler+0x642>
    return;
 8005a28:	bf00      	nop
 8005a2a:	e004      	b.n	8005a36 <HAL_UART_IRQHandler+0x642>
      return;
 8005a2c:	bf00      	nop
 8005a2e:	e002      	b.n	8005a36 <HAL_UART_IRQHandler+0x642>
      return;
 8005a30:	bf00      	nop
 8005a32:	e000      	b.n	8005a36 <HAL_UART_IRQHandler+0x642>
    return;
 8005a34:	bf00      	nop
  }
}
 8005a36:	37e8      	adds	r7, #232	@ 0xe8
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005a44:	bf00      	nop
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005a58:	bf00      	nop
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a80:	b08c      	sub	sp, #48	@ 0x30
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a86:	2300      	movs	r3, #0
 8005a88:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	689a      	ldr	r2, [r3, #8]
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	431a      	orrs	r2, r3
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	695b      	ldr	r3, [r3, #20]
 8005a9a:	431a      	orrs	r2, r3
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	69db      	ldr	r3, [r3, #28]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	4baa      	ldr	r3, [pc, #680]	@ (8005d54 <UART_SetConfig+0x2d8>)
 8005aac:	4013      	ands	r3, r2
 8005aae:	697a      	ldr	r2, [r7, #20]
 8005ab0:	6812      	ldr	r2, [r2, #0]
 8005ab2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ab4:	430b      	orrs	r3, r1
 8005ab6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	68da      	ldr	r2, [r3, #12]
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	430a      	orrs	r2, r1
 8005acc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	699b      	ldr	r3, [r3, #24]
 8005ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a9f      	ldr	r2, [pc, #636]	@ (8005d58 <UART_SetConfig+0x2dc>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d004      	beq.n	8005ae8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	6a1b      	ldr	r3, [r3, #32]
 8005ae2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005af2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	6812      	ldr	r2, [r2, #0]
 8005afa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005afc:	430b      	orrs	r3, r1
 8005afe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b06:	f023 010f 	bic.w	r1, r3, #15
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	430a      	orrs	r2, r1
 8005b14:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a90      	ldr	r2, [pc, #576]	@ (8005d5c <UART_SetConfig+0x2e0>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d125      	bne.n	8005b6c <UART_SetConfig+0xf0>
 8005b20:	4b8f      	ldr	r3, [pc, #572]	@ (8005d60 <UART_SetConfig+0x2e4>)
 8005b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b26:	f003 0303 	and.w	r3, r3, #3
 8005b2a:	2b03      	cmp	r3, #3
 8005b2c:	d81a      	bhi.n	8005b64 <UART_SetConfig+0xe8>
 8005b2e:	a201      	add	r2, pc, #4	@ (adr r2, 8005b34 <UART_SetConfig+0xb8>)
 8005b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b34:	08005b45 	.word	0x08005b45
 8005b38:	08005b55 	.word	0x08005b55
 8005b3c:	08005b4d 	.word	0x08005b4d
 8005b40:	08005b5d 	.word	0x08005b5d
 8005b44:	2301      	movs	r3, #1
 8005b46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b4a:	e116      	b.n	8005d7a <UART_SetConfig+0x2fe>
 8005b4c:	2302      	movs	r3, #2
 8005b4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b52:	e112      	b.n	8005d7a <UART_SetConfig+0x2fe>
 8005b54:	2304      	movs	r3, #4
 8005b56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b5a:	e10e      	b.n	8005d7a <UART_SetConfig+0x2fe>
 8005b5c:	2308      	movs	r3, #8
 8005b5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b62:	e10a      	b.n	8005d7a <UART_SetConfig+0x2fe>
 8005b64:	2310      	movs	r3, #16
 8005b66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b6a:	e106      	b.n	8005d7a <UART_SetConfig+0x2fe>
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a7c      	ldr	r2, [pc, #496]	@ (8005d64 <UART_SetConfig+0x2e8>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d138      	bne.n	8005be8 <UART_SetConfig+0x16c>
 8005b76:	4b7a      	ldr	r3, [pc, #488]	@ (8005d60 <UART_SetConfig+0x2e4>)
 8005b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b7c:	f003 030c 	and.w	r3, r3, #12
 8005b80:	2b0c      	cmp	r3, #12
 8005b82:	d82d      	bhi.n	8005be0 <UART_SetConfig+0x164>
 8005b84:	a201      	add	r2, pc, #4	@ (adr r2, 8005b8c <UART_SetConfig+0x110>)
 8005b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b8a:	bf00      	nop
 8005b8c:	08005bc1 	.word	0x08005bc1
 8005b90:	08005be1 	.word	0x08005be1
 8005b94:	08005be1 	.word	0x08005be1
 8005b98:	08005be1 	.word	0x08005be1
 8005b9c:	08005bd1 	.word	0x08005bd1
 8005ba0:	08005be1 	.word	0x08005be1
 8005ba4:	08005be1 	.word	0x08005be1
 8005ba8:	08005be1 	.word	0x08005be1
 8005bac:	08005bc9 	.word	0x08005bc9
 8005bb0:	08005be1 	.word	0x08005be1
 8005bb4:	08005be1 	.word	0x08005be1
 8005bb8:	08005be1 	.word	0x08005be1
 8005bbc:	08005bd9 	.word	0x08005bd9
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bc6:	e0d8      	b.n	8005d7a <UART_SetConfig+0x2fe>
 8005bc8:	2302      	movs	r3, #2
 8005bca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bce:	e0d4      	b.n	8005d7a <UART_SetConfig+0x2fe>
 8005bd0:	2304      	movs	r3, #4
 8005bd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bd6:	e0d0      	b.n	8005d7a <UART_SetConfig+0x2fe>
 8005bd8:	2308      	movs	r3, #8
 8005bda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bde:	e0cc      	b.n	8005d7a <UART_SetConfig+0x2fe>
 8005be0:	2310      	movs	r3, #16
 8005be2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005be6:	e0c8      	b.n	8005d7a <UART_SetConfig+0x2fe>
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a5e      	ldr	r2, [pc, #376]	@ (8005d68 <UART_SetConfig+0x2ec>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d125      	bne.n	8005c3e <UART_SetConfig+0x1c2>
 8005bf2:	4b5b      	ldr	r3, [pc, #364]	@ (8005d60 <UART_SetConfig+0x2e4>)
 8005bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bf8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005bfc:	2b30      	cmp	r3, #48	@ 0x30
 8005bfe:	d016      	beq.n	8005c2e <UART_SetConfig+0x1b2>
 8005c00:	2b30      	cmp	r3, #48	@ 0x30
 8005c02:	d818      	bhi.n	8005c36 <UART_SetConfig+0x1ba>
 8005c04:	2b20      	cmp	r3, #32
 8005c06:	d00a      	beq.n	8005c1e <UART_SetConfig+0x1a2>
 8005c08:	2b20      	cmp	r3, #32
 8005c0a:	d814      	bhi.n	8005c36 <UART_SetConfig+0x1ba>
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d002      	beq.n	8005c16 <UART_SetConfig+0x19a>
 8005c10:	2b10      	cmp	r3, #16
 8005c12:	d008      	beq.n	8005c26 <UART_SetConfig+0x1aa>
 8005c14:	e00f      	b.n	8005c36 <UART_SetConfig+0x1ba>
 8005c16:	2300      	movs	r3, #0
 8005c18:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c1c:	e0ad      	b.n	8005d7a <UART_SetConfig+0x2fe>
 8005c1e:	2302      	movs	r3, #2
 8005c20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c24:	e0a9      	b.n	8005d7a <UART_SetConfig+0x2fe>
 8005c26:	2304      	movs	r3, #4
 8005c28:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c2c:	e0a5      	b.n	8005d7a <UART_SetConfig+0x2fe>
 8005c2e:	2308      	movs	r3, #8
 8005c30:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c34:	e0a1      	b.n	8005d7a <UART_SetConfig+0x2fe>
 8005c36:	2310      	movs	r3, #16
 8005c38:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c3c:	e09d      	b.n	8005d7a <UART_SetConfig+0x2fe>
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a4a      	ldr	r2, [pc, #296]	@ (8005d6c <UART_SetConfig+0x2f0>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d125      	bne.n	8005c94 <UART_SetConfig+0x218>
 8005c48:	4b45      	ldr	r3, [pc, #276]	@ (8005d60 <UART_SetConfig+0x2e4>)
 8005c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c4e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005c52:	2bc0      	cmp	r3, #192	@ 0xc0
 8005c54:	d016      	beq.n	8005c84 <UART_SetConfig+0x208>
 8005c56:	2bc0      	cmp	r3, #192	@ 0xc0
 8005c58:	d818      	bhi.n	8005c8c <UART_SetConfig+0x210>
 8005c5a:	2b80      	cmp	r3, #128	@ 0x80
 8005c5c:	d00a      	beq.n	8005c74 <UART_SetConfig+0x1f8>
 8005c5e:	2b80      	cmp	r3, #128	@ 0x80
 8005c60:	d814      	bhi.n	8005c8c <UART_SetConfig+0x210>
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d002      	beq.n	8005c6c <UART_SetConfig+0x1f0>
 8005c66:	2b40      	cmp	r3, #64	@ 0x40
 8005c68:	d008      	beq.n	8005c7c <UART_SetConfig+0x200>
 8005c6a:	e00f      	b.n	8005c8c <UART_SetConfig+0x210>
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c72:	e082      	b.n	8005d7a <UART_SetConfig+0x2fe>
 8005c74:	2302      	movs	r3, #2
 8005c76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c7a:	e07e      	b.n	8005d7a <UART_SetConfig+0x2fe>
 8005c7c:	2304      	movs	r3, #4
 8005c7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c82:	e07a      	b.n	8005d7a <UART_SetConfig+0x2fe>
 8005c84:	2308      	movs	r3, #8
 8005c86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c8a:	e076      	b.n	8005d7a <UART_SetConfig+0x2fe>
 8005c8c:	2310      	movs	r3, #16
 8005c8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c92:	e072      	b.n	8005d7a <UART_SetConfig+0x2fe>
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a35      	ldr	r2, [pc, #212]	@ (8005d70 <UART_SetConfig+0x2f4>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d12a      	bne.n	8005cf4 <UART_SetConfig+0x278>
 8005c9e:	4b30      	ldr	r3, [pc, #192]	@ (8005d60 <UART_SetConfig+0x2e4>)
 8005ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ca4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ca8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005cac:	d01a      	beq.n	8005ce4 <UART_SetConfig+0x268>
 8005cae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005cb2:	d81b      	bhi.n	8005cec <UART_SetConfig+0x270>
 8005cb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005cb8:	d00c      	beq.n	8005cd4 <UART_SetConfig+0x258>
 8005cba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005cbe:	d815      	bhi.n	8005cec <UART_SetConfig+0x270>
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d003      	beq.n	8005ccc <UART_SetConfig+0x250>
 8005cc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cc8:	d008      	beq.n	8005cdc <UART_SetConfig+0x260>
 8005cca:	e00f      	b.n	8005cec <UART_SetConfig+0x270>
 8005ccc:	2300      	movs	r3, #0
 8005cce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cd2:	e052      	b.n	8005d7a <UART_SetConfig+0x2fe>
 8005cd4:	2302      	movs	r3, #2
 8005cd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cda:	e04e      	b.n	8005d7a <UART_SetConfig+0x2fe>
 8005cdc:	2304      	movs	r3, #4
 8005cde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ce2:	e04a      	b.n	8005d7a <UART_SetConfig+0x2fe>
 8005ce4:	2308      	movs	r3, #8
 8005ce6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cea:	e046      	b.n	8005d7a <UART_SetConfig+0x2fe>
 8005cec:	2310      	movs	r3, #16
 8005cee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cf2:	e042      	b.n	8005d7a <UART_SetConfig+0x2fe>
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a17      	ldr	r2, [pc, #92]	@ (8005d58 <UART_SetConfig+0x2dc>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d13a      	bne.n	8005d74 <UART_SetConfig+0x2f8>
 8005cfe:	4b18      	ldr	r3, [pc, #96]	@ (8005d60 <UART_SetConfig+0x2e4>)
 8005d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d04:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005d08:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005d0c:	d01a      	beq.n	8005d44 <UART_SetConfig+0x2c8>
 8005d0e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005d12:	d81b      	bhi.n	8005d4c <UART_SetConfig+0x2d0>
 8005d14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d18:	d00c      	beq.n	8005d34 <UART_SetConfig+0x2b8>
 8005d1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d1e:	d815      	bhi.n	8005d4c <UART_SetConfig+0x2d0>
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d003      	beq.n	8005d2c <UART_SetConfig+0x2b0>
 8005d24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d28:	d008      	beq.n	8005d3c <UART_SetConfig+0x2c0>
 8005d2a:	e00f      	b.n	8005d4c <UART_SetConfig+0x2d0>
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d32:	e022      	b.n	8005d7a <UART_SetConfig+0x2fe>
 8005d34:	2302      	movs	r3, #2
 8005d36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d3a:	e01e      	b.n	8005d7a <UART_SetConfig+0x2fe>
 8005d3c:	2304      	movs	r3, #4
 8005d3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d42:	e01a      	b.n	8005d7a <UART_SetConfig+0x2fe>
 8005d44:	2308      	movs	r3, #8
 8005d46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d4a:	e016      	b.n	8005d7a <UART_SetConfig+0x2fe>
 8005d4c:	2310      	movs	r3, #16
 8005d4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d52:	e012      	b.n	8005d7a <UART_SetConfig+0x2fe>
 8005d54:	cfff69f3 	.word	0xcfff69f3
 8005d58:	40008000 	.word	0x40008000
 8005d5c:	40013800 	.word	0x40013800
 8005d60:	40021000 	.word	0x40021000
 8005d64:	40004400 	.word	0x40004400
 8005d68:	40004800 	.word	0x40004800
 8005d6c:	40004c00 	.word	0x40004c00
 8005d70:	40005000 	.word	0x40005000
 8005d74:	2310      	movs	r3, #16
 8005d76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4aae      	ldr	r2, [pc, #696]	@ (8006038 <UART_SetConfig+0x5bc>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	f040 8097 	bne.w	8005eb4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005d86:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005d8a:	2b08      	cmp	r3, #8
 8005d8c:	d823      	bhi.n	8005dd6 <UART_SetConfig+0x35a>
 8005d8e:	a201      	add	r2, pc, #4	@ (adr r2, 8005d94 <UART_SetConfig+0x318>)
 8005d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d94:	08005db9 	.word	0x08005db9
 8005d98:	08005dd7 	.word	0x08005dd7
 8005d9c:	08005dc1 	.word	0x08005dc1
 8005da0:	08005dd7 	.word	0x08005dd7
 8005da4:	08005dc7 	.word	0x08005dc7
 8005da8:	08005dd7 	.word	0x08005dd7
 8005dac:	08005dd7 	.word	0x08005dd7
 8005db0:	08005dd7 	.word	0x08005dd7
 8005db4:	08005dcf 	.word	0x08005dcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005db8:	f7fc fd04 	bl	80027c4 <HAL_RCC_GetPCLK1Freq>
 8005dbc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005dbe:	e010      	b.n	8005de2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005dc0:	4b9e      	ldr	r3, [pc, #632]	@ (800603c <UART_SetConfig+0x5c0>)
 8005dc2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005dc4:	e00d      	b.n	8005de2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dc6:	f7fc fc8f 	bl	80026e8 <HAL_RCC_GetSysClockFreq>
 8005dca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005dcc:	e009      	b.n	8005de2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005dd2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005dd4:	e005      	b.n	8005de2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005de0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	f000 8130 	beq.w	800604a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dee:	4a94      	ldr	r2, [pc, #592]	@ (8006040 <UART_SetConfig+0x5c4>)
 8005df0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005df4:	461a      	mov	r2, r3
 8005df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005dfc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	685a      	ldr	r2, [r3, #4]
 8005e02:	4613      	mov	r3, r2
 8005e04:	005b      	lsls	r3, r3, #1
 8005e06:	4413      	add	r3, r2
 8005e08:	69ba      	ldr	r2, [r7, #24]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d305      	bcc.n	8005e1a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e14:	69ba      	ldr	r2, [r7, #24]
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d903      	bls.n	8005e22 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005e20:	e113      	b.n	800604a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e24:	2200      	movs	r2, #0
 8005e26:	60bb      	str	r3, [r7, #8]
 8005e28:	60fa      	str	r2, [r7, #12]
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e2e:	4a84      	ldr	r2, [pc, #528]	@ (8006040 <UART_SetConfig+0x5c4>)
 8005e30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	2200      	movs	r2, #0
 8005e38:	603b      	str	r3, [r7, #0]
 8005e3a:	607a      	str	r2, [r7, #4]
 8005e3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e40:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005e44:	f7fa fa44 	bl	80002d0 <__aeabi_uldivmod>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	460b      	mov	r3, r1
 8005e4c:	4610      	mov	r0, r2
 8005e4e:	4619      	mov	r1, r3
 8005e50:	f04f 0200 	mov.w	r2, #0
 8005e54:	f04f 0300 	mov.w	r3, #0
 8005e58:	020b      	lsls	r3, r1, #8
 8005e5a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005e5e:	0202      	lsls	r2, r0, #8
 8005e60:	6979      	ldr	r1, [r7, #20]
 8005e62:	6849      	ldr	r1, [r1, #4]
 8005e64:	0849      	lsrs	r1, r1, #1
 8005e66:	2000      	movs	r0, #0
 8005e68:	460c      	mov	r4, r1
 8005e6a:	4605      	mov	r5, r0
 8005e6c:	eb12 0804 	adds.w	r8, r2, r4
 8005e70:	eb43 0905 	adc.w	r9, r3, r5
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	469a      	mov	sl, r3
 8005e7c:	4693      	mov	fp, r2
 8005e7e:	4652      	mov	r2, sl
 8005e80:	465b      	mov	r3, fp
 8005e82:	4640      	mov	r0, r8
 8005e84:	4649      	mov	r1, r9
 8005e86:	f7fa fa23 	bl	80002d0 <__aeabi_uldivmod>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	4613      	mov	r3, r2
 8005e90:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e92:	6a3b      	ldr	r3, [r7, #32]
 8005e94:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e98:	d308      	bcc.n	8005eac <UART_SetConfig+0x430>
 8005e9a:	6a3b      	ldr	r3, [r7, #32]
 8005e9c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ea0:	d204      	bcs.n	8005eac <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	6a3a      	ldr	r2, [r7, #32]
 8005ea8:	60da      	str	r2, [r3, #12]
 8005eaa:	e0ce      	b.n	800604a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005eb2:	e0ca      	b.n	800604a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	69db      	ldr	r3, [r3, #28]
 8005eb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ebc:	d166      	bne.n	8005f8c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005ebe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005ec2:	2b08      	cmp	r3, #8
 8005ec4:	d827      	bhi.n	8005f16 <UART_SetConfig+0x49a>
 8005ec6:	a201      	add	r2, pc, #4	@ (adr r2, 8005ecc <UART_SetConfig+0x450>)
 8005ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ecc:	08005ef1 	.word	0x08005ef1
 8005ed0:	08005ef9 	.word	0x08005ef9
 8005ed4:	08005f01 	.word	0x08005f01
 8005ed8:	08005f17 	.word	0x08005f17
 8005edc:	08005f07 	.word	0x08005f07
 8005ee0:	08005f17 	.word	0x08005f17
 8005ee4:	08005f17 	.word	0x08005f17
 8005ee8:	08005f17 	.word	0x08005f17
 8005eec:	08005f0f 	.word	0x08005f0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ef0:	f7fc fc68 	bl	80027c4 <HAL_RCC_GetPCLK1Freq>
 8005ef4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ef6:	e014      	b.n	8005f22 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ef8:	f7fc fc7a 	bl	80027f0 <HAL_RCC_GetPCLK2Freq>
 8005efc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005efe:	e010      	b.n	8005f22 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f00:	4b4e      	ldr	r3, [pc, #312]	@ (800603c <UART_SetConfig+0x5c0>)
 8005f02:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005f04:	e00d      	b.n	8005f22 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f06:	f7fc fbef 	bl	80026e8 <HAL_RCC_GetSysClockFreq>
 8005f0a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005f0c:	e009      	b.n	8005f22 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f12:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005f14:	e005      	b.n	8005f22 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005f16:	2300      	movs	r3, #0
 8005f18:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005f20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	f000 8090 	beq.w	800604a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f2e:	4a44      	ldr	r2, [pc, #272]	@ (8006040 <UART_SetConfig+0x5c4>)
 8005f30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f34:	461a      	mov	r2, r3
 8005f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f38:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f3c:	005a      	lsls	r2, r3, #1
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	085b      	lsrs	r3, r3, #1
 8005f44:	441a      	add	r2, r3
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f4e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f50:	6a3b      	ldr	r3, [r7, #32]
 8005f52:	2b0f      	cmp	r3, #15
 8005f54:	d916      	bls.n	8005f84 <UART_SetConfig+0x508>
 8005f56:	6a3b      	ldr	r3, [r7, #32]
 8005f58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f5c:	d212      	bcs.n	8005f84 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f5e:	6a3b      	ldr	r3, [r7, #32]
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	f023 030f 	bic.w	r3, r3, #15
 8005f66:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f68:	6a3b      	ldr	r3, [r7, #32]
 8005f6a:	085b      	lsrs	r3, r3, #1
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	f003 0307 	and.w	r3, r3, #7
 8005f72:	b29a      	uxth	r2, r3
 8005f74:	8bfb      	ldrh	r3, [r7, #30]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	8bfa      	ldrh	r2, [r7, #30]
 8005f80:	60da      	str	r2, [r3, #12]
 8005f82:	e062      	b.n	800604a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005f8a:	e05e      	b.n	800604a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f8c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005f90:	2b08      	cmp	r3, #8
 8005f92:	d828      	bhi.n	8005fe6 <UART_SetConfig+0x56a>
 8005f94:	a201      	add	r2, pc, #4	@ (adr r2, 8005f9c <UART_SetConfig+0x520>)
 8005f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f9a:	bf00      	nop
 8005f9c:	08005fc1 	.word	0x08005fc1
 8005fa0:	08005fc9 	.word	0x08005fc9
 8005fa4:	08005fd1 	.word	0x08005fd1
 8005fa8:	08005fe7 	.word	0x08005fe7
 8005fac:	08005fd7 	.word	0x08005fd7
 8005fb0:	08005fe7 	.word	0x08005fe7
 8005fb4:	08005fe7 	.word	0x08005fe7
 8005fb8:	08005fe7 	.word	0x08005fe7
 8005fbc:	08005fdf 	.word	0x08005fdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fc0:	f7fc fc00 	bl	80027c4 <HAL_RCC_GetPCLK1Freq>
 8005fc4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005fc6:	e014      	b.n	8005ff2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fc8:	f7fc fc12 	bl	80027f0 <HAL_RCC_GetPCLK2Freq>
 8005fcc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005fce:	e010      	b.n	8005ff2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fd0:	4b1a      	ldr	r3, [pc, #104]	@ (800603c <UART_SetConfig+0x5c0>)
 8005fd2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005fd4:	e00d      	b.n	8005ff2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fd6:	f7fc fb87 	bl	80026e8 <HAL_RCC_GetSysClockFreq>
 8005fda:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005fdc:	e009      	b.n	8005ff2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fe2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005fe4:	e005      	b.n	8005ff2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005ff0:	bf00      	nop
    }

    if (pclk != 0U)
 8005ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d028      	beq.n	800604a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ffc:	4a10      	ldr	r2, [pc, #64]	@ (8006040 <UART_SetConfig+0x5c4>)
 8005ffe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006002:	461a      	mov	r2, r3
 8006004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006006:	fbb3 f2f2 	udiv	r2, r3, r2
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	085b      	lsrs	r3, r3, #1
 8006010:	441a      	add	r2, r3
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	fbb2 f3f3 	udiv	r3, r2, r3
 800601a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800601c:	6a3b      	ldr	r3, [r7, #32]
 800601e:	2b0f      	cmp	r3, #15
 8006020:	d910      	bls.n	8006044 <UART_SetConfig+0x5c8>
 8006022:	6a3b      	ldr	r3, [r7, #32]
 8006024:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006028:	d20c      	bcs.n	8006044 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800602a:	6a3b      	ldr	r3, [r7, #32]
 800602c:	b29a      	uxth	r2, r3
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	60da      	str	r2, [r3, #12]
 8006034:	e009      	b.n	800604a <UART_SetConfig+0x5ce>
 8006036:	bf00      	nop
 8006038:	40008000 	.word	0x40008000
 800603c:	00f42400 	.word	0x00f42400
 8006040:	08007464 	.word	0x08007464
      }
      else
      {
        ret = HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	2201      	movs	r2, #1
 800604e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	2201      	movs	r2, #1
 8006056:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	2200      	movs	r2, #0
 800605e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	2200      	movs	r2, #0
 8006064:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006066:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800606a:	4618      	mov	r0, r3
 800606c:	3730      	adds	r7, #48	@ 0x30
 800606e:	46bd      	mov	sp, r7
 8006070:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006074 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006080:	f003 0308 	and.w	r3, r3, #8
 8006084:	2b00      	cmp	r3, #0
 8006086:	d00a      	beq.n	800609e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	430a      	orrs	r2, r1
 800609c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060a2:	f003 0301 	and.w	r3, r3, #1
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00a      	beq.n	80060c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	430a      	orrs	r2, r1
 80060be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060c4:	f003 0302 	and.w	r3, r3, #2
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d00a      	beq.n	80060e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	430a      	orrs	r2, r1
 80060e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060e6:	f003 0304 	and.w	r3, r3, #4
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00a      	beq.n	8006104 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	430a      	orrs	r2, r1
 8006102:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006108:	f003 0310 	and.w	r3, r3, #16
 800610c:	2b00      	cmp	r3, #0
 800610e:	d00a      	beq.n	8006126 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	430a      	orrs	r2, r1
 8006124:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800612a:	f003 0320 	and.w	r3, r3, #32
 800612e:	2b00      	cmp	r3, #0
 8006130:	d00a      	beq.n	8006148 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	430a      	orrs	r2, r1
 8006146:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800614c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006150:	2b00      	cmp	r3, #0
 8006152:	d01a      	beq.n	800618a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	430a      	orrs	r2, r1
 8006168:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800616e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006172:	d10a      	bne.n	800618a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	430a      	orrs	r2, r1
 8006188:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800618e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00a      	beq.n	80061ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	430a      	orrs	r2, r1
 80061aa:	605a      	str	r2, [r3, #4]
  }
}
 80061ac:	bf00      	nop
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b098      	sub	sp, #96	@ 0x60
 80061bc:	af02      	add	r7, sp, #8
 80061be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80061c8:	f7fb f9dc 	bl	8001584 <HAL_GetTick>
 80061cc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0308 	and.w	r3, r3, #8
 80061d8:	2b08      	cmp	r3, #8
 80061da:	d12f      	bne.n	800623c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80061e0:	9300      	str	r3, [sp, #0]
 80061e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061e4:	2200      	movs	r2, #0
 80061e6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 f88e 	bl	800630c <UART_WaitOnFlagUntilTimeout>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d022      	beq.n	800623c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061fe:	e853 3f00 	ldrex	r3, [r3]
 8006202:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006204:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006206:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800620a:	653b      	str	r3, [r7, #80]	@ 0x50
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	461a      	mov	r2, r3
 8006212:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006214:	647b      	str	r3, [r7, #68]	@ 0x44
 8006216:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006218:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800621a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800621c:	e841 2300 	strex	r3, r2, [r1]
 8006220:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006222:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006224:	2b00      	cmp	r3, #0
 8006226:	d1e6      	bne.n	80061f6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2220      	movs	r2, #32
 800622c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006238:	2303      	movs	r3, #3
 800623a:	e063      	b.n	8006304 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0304 	and.w	r3, r3, #4
 8006246:	2b04      	cmp	r3, #4
 8006248:	d149      	bne.n	80062de <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800624a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800624e:	9300      	str	r3, [sp, #0]
 8006250:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006252:	2200      	movs	r2, #0
 8006254:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 f857 	bl	800630c <UART_WaitOnFlagUntilTimeout>
 800625e:	4603      	mov	r3, r0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d03c      	beq.n	80062de <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800626a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800626c:	e853 3f00 	ldrex	r3, [r3]
 8006270:	623b      	str	r3, [r7, #32]
   return(result);
 8006272:	6a3b      	ldr	r3, [r7, #32]
 8006274:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006278:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	461a      	mov	r2, r3
 8006280:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006282:	633b      	str	r3, [r7, #48]	@ 0x30
 8006284:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006286:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006288:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800628a:	e841 2300 	strex	r3, r2, [r1]
 800628e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006292:	2b00      	cmp	r3, #0
 8006294:	d1e6      	bne.n	8006264 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	3308      	adds	r3, #8
 800629c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	e853 3f00 	ldrex	r3, [r3]
 80062a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f023 0301 	bic.w	r3, r3, #1
 80062ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	3308      	adds	r3, #8
 80062b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80062b6:	61fa      	str	r2, [r7, #28]
 80062b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ba:	69b9      	ldr	r1, [r7, #24]
 80062bc:	69fa      	ldr	r2, [r7, #28]
 80062be:	e841 2300 	strex	r3, r2, [r1]
 80062c2:	617b      	str	r3, [r7, #20]
   return(result);
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d1e5      	bne.n	8006296 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2220      	movs	r2, #32
 80062ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062da:	2303      	movs	r3, #3
 80062dc:	e012      	b.n	8006304 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2220      	movs	r2, #32
 80062e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2220      	movs	r2, #32
 80062ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3758      	adds	r7, #88	@ 0x58
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	603b      	str	r3, [r7, #0]
 8006318:	4613      	mov	r3, r2
 800631a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800631c:	e04f      	b.n	80063be <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006324:	d04b      	beq.n	80063be <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006326:	f7fb f92d 	bl	8001584 <HAL_GetTick>
 800632a:	4602      	mov	r2, r0
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	1ad3      	subs	r3, r2, r3
 8006330:	69ba      	ldr	r2, [r7, #24]
 8006332:	429a      	cmp	r2, r3
 8006334:	d302      	bcc.n	800633c <UART_WaitOnFlagUntilTimeout+0x30>
 8006336:	69bb      	ldr	r3, [r7, #24]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d101      	bne.n	8006340 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800633c:	2303      	movs	r3, #3
 800633e:	e04e      	b.n	80063de <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 0304 	and.w	r3, r3, #4
 800634a:	2b00      	cmp	r3, #0
 800634c:	d037      	beq.n	80063be <UART_WaitOnFlagUntilTimeout+0xb2>
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	2b80      	cmp	r3, #128	@ 0x80
 8006352:	d034      	beq.n	80063be <UART_WaitOnFlagUntilTimeout+0xb2>
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	2b40      	cmp	r3, #64	@ 0x40
 8006358:	d031      	beq.n	80063be <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	69db      	ldr	r3, [r3, #28]
 8006360:	f003 0308 	and.w	r3, r3, #8
 8006364:	2b08      	cmp	r3, #8
 8006366:	d110      	bne.n	800638a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	2208      	movs	r2, #8
 800636e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006370:	68f8      	ldr	r0, [r7, #12]
 8006372:	f000 f838 	bl	80063e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2208      	movs	r2, #8
 800637a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2200      	movs	r2, #0
 8006382:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	e029      	b.n	80063de <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	69db      	ldr	r3, [r3, #28]
 8006390:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006394:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006398:	d111      	bne.n	80063be <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80063a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	f000 f81e 	bl	80063e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2220      	movs	r2, #32
 80063ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80063ba:	2303      	movs	r3, #3
 80063bc:	e00f      	b.n	80063de <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	69da      	ldr	r2, [r3, #28]
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	4013      	ands	r3, r2
 80063c8:	68ba      	ldr	r2, [r7, #8]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	bf0c      	ite	eq
 80063ce:	2301      	moveq	r3, #1
 80063d0:	2300      	movne	r3, #0
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	461a      	mov	r2, r3
 80063d6:	79fb      	ldrb	r3, [r7, #7]
 80063d8:	429a      	cmp	r2, r3
 80063da:	d0a0      	beq.n	800631e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3710      	adds	r7, #16
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}

080063e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063e6:	b480      	push	{r7}
 80063e8:	b095      	sub	sp, #84	@ 0x54
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063f6:	e853 3f00 	ldrex	r3, [r3]
 80063fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80063fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006402:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	461a      	mov	r2, r3
 800640a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800640c:	643b      	str	r3, [r7, #64]	@ 0x40
 800640e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006410:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006412:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006414:	e841 2300 	strex	r3, r2, [r1]
 8006418:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800641a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800641c:	2b00      	cmp	r3, #0
 800641e:	d1e6      	bne.n	80063ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	3308      	adds	r3, #8
 8006426:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006428:	6a3b      	ldr	r3, [r7, #32]
 800642a:	e853 3f00 	ldrex	r3, [r3]
 800642e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006436:	f023 0301 	bic.w	r3, r3, #1
 800643a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	3308      	adds	r3, #8
 8006442:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006444:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006446:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006448:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800644a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800644c:	e841 2300 	strex	r3, r2, [r1]
 8006450:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006454:	2b00      	cmp	r3, #0
 8006456:	d1e3      	bne.n	8006420 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800645c:	2b01      	cmp	r3, #1
 800645e:	d118      	bne.n	8006492 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	e853 3f00 	ldrex	r3, [r3]
 800646c:	60bb      	str	r3, [r7, #8]
   return(result);
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	f023 0310 	bic.w	r3, r3, #16
 8006474:	647b      	str	r3, [r7, #68]	@ 0x44
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	461a      	mov	r2, r3
 800647c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800647e:	61bb      	str	r3, [r7, #24]
 8006480:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006482:	6979      	ldr	r1, [r7, #20]
 8006484:	69ba      	ldr	r2, [r7, #24]
 8006486:	e841 2300 	strex	r3, r2, [r1]
 800648a:	613b      	str	r3, [r7, #16]
   return(result);
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d1e6      	bne.n	8006460 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2220      	movs	r2, #32
 8006496:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80064a6:	bf00      	nop
 80064a8:	3754      	adds	r7, #84	@ 0x54
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr

080064b2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80064b2:	b580      	push	{r7, lr}
 80064b4:	b084      	sub	sp, #16
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80064d0:	68f8      	ldr	r0, [r7, #12]
 80064d2:	f7ff fabd 	bl	8005a50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064d6:	bf00      	nop
 80064d8:	3710      	adds	r7, #16
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}

080064de <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80064de:	b580      	push	{r7, lr}
 80064e0:	b088      	sub	sp, #32
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	e853 3f00 	ldrex	r3, [r3]
 80064f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064fa:	61fb      	str	r3, [r7, #28]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	461a      	mov	r2, r3
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	61bb      	str	r3, [r7, #24]
 8006506:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006508:	6979      	ldr	r1, [r7, #20]
 800650a:	69ba      	ldr	r2, [r7, #24]
 800650c:	e841 2300 	strex	r3, r2, [r1]
 8006510:	613b      	str	r3, [r7, #16]
   return(result);
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d1e6      	bne.n	80064e6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2220      	movs	r2, #32
 800651c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f7ff fa88 	bl	8005a3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800652c:	bf00      	nop
 800652e:	3720      	adds	r7, #32
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}

08006534 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800653c:	bf00      	nop
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006550:	bf00      	nop
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006564:	bf00      	nop
 8006566:	370c      	adds	r7, #12
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006570:	b480      	push	{r7}
 8006572:	b085      	sub	sp, #20
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800657e:	2b01      	cmp	r3, #1
 8006580:	d101      	bne.n	8006586 <HAL_UARTEx_DisableFifoMode+0x16>
 8006582:	2302      	movs	r3, #2
 8006584:	e027      	b.n	80065d6 <HAL_UARTEx_DisableFifoMode+0x66>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2201      	movs	r2, #1
 800658a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2224      	movs	r2, #36	@ 0x24
 8006592:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f022 0201 	bic.w	r2, r2, #1
 80065ac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80065b4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	68fa      	ldr	r2, [r7, #12]
 80065c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2220      	movs	r2, #32
 80065c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80065d4:	2300      	movs	r3, #0
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3714      	adds	r7, #20
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr

080065e2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80065e2:	b580      	push	{r7, lr}
 80065e4:	b084      	sub	sp, #16
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
 80065ea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d101      	bne.n	80065fa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80065f6:	2302      	movs	r3, #2
 80065f8:	e02d      	b.n	8006656 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2201      	movs	r2, #1
 80065fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2224      	movs	r2, #36	@ 0x24
 8006606:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f022 0201 	bic.w	r2, r2, #1
 8006620:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	683a      	ldr	r2, [r7, #0]
 8006632:	430a      	orrs	r2, r1
 8006634:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 f850 	bl	80066dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2220      	movs	r2, #32
 8006648:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006654:	2300      	movs	r3, #0
}
 8006656:	4618      	mov	r0, r3
 8006658:	3710      	adds	r7, #16
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}

0800665e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800665e:	b580      	push	{r7, lr}
 8006660:	b084      	sub	sp, #16
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
 8006666:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800666e:	2b01      	cmp	r3, #1
 8006670:	d101      	bne.n	8006676 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006672:	2302      	movs	r3, #2
 8006674:	e02d      	b.n	80066d2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2201      	movs	r2, #1
 800667a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2224      	movs	r2, #36	@ 0x24
 8006682:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f022 0201 	bic.w	r2, r2, #1
 800669c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	683a      	ldr	r2, [r7, #0]
 80066ae:	430a      	orrs	r2, r1
 80066b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 f812 	bl	80066dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2220      	movs	r2, #32
 80066c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3710      	adds	r7, #16
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
	...

080066dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80066dc:	b480      	push	{r7}
 80066de:	b085      	sub	sp, #20
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d108      	bne.n	80066fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80066fc:	e031      	b.n	8006762 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80066fe:	2308      	movs	r3, #8
 8006700:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006702:	2308      	movs	r3, #8
 8006704:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	0e5b      	lsrs	r3, r3, #25
 800670e:	b2db      	uxtb	r3, r3
 8006710:	f003 0307 	and.w	r3, r3, #7
 8006714:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	0f5b      	lsrs	r3, r3, #29
 800671e:	b2db      	uxtb	r3, r3
 8006720:	f003 0307 	and.w	r3, r3, #7
 8006724:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006726:	7bbb      	ldrb	r3, [r7, #14]
 8006728:	7b3a      	ldrb	r2, [r7, #12]
 800672a:	4911      	ldr	r1, [pc, #68]	@ (8006770 <UARTEx_SetNbDataToProcess+0x94>)
 800672c:	5c8a      	ldrb	r2, [r1, r2]
 800672e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006732:	7b3a      	ldrb	r2, [r7, #12]
 8006734:	490f      	ldr	r1, [pc, #60]	@ (8006774 <UARTEx_SetNbDataToProcess+0x98>)
 8006736:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006738:	fb93 f3f2 	sdiv	r3, r3, r2
 800673c:	b29a      	uxth	r2, r3
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006744:	7bfb      	ldrb	r3, [r7, #15]
 8006746:	7b7a      	ldrb	r2, [r7, #13]
 8006748:	4909      	ldr	r1, [pc, #36]	@ (8006770 <UARTEx_SetNbDataToProcess+0x94>)
 800674a:	5c8a      	ldrb	r2, [r1, r2]
 800674c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006750:	7b7a      	ldrb	r2, [r7, #13]
 8006752:	4908      	ldr	r1, [pc, #32]	@ (8006774 <UARTEx_SetNbDataToProcess+0x98>)
 8006754:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006756:	fb93 f3f2 	sdiv	r3, r3, r2
 800675a:	b29a      	uxth	r2, r3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006762:	bf00      	nop
 8006764:	3714      	adds	r7, #20
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr
 800676e:	bf00      	nop
 8006770:	0800747c 	.word	0x0800747c
 8006774:	08007484 	.word	0x08007484

08006778 <siscanf>:
 8006778:	b40e      	push	{r1, r2, r3}
 800677a:	b530      	push	{r4, r5, lr}
 800677c:	b09c      	sub	sp, #112	@ 0x70
 800677e:	ac1f      	add	r4, sp, #124	@ 0x7c
 8006780:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8006784:	f854 5b04 	ldr.w	r5, [r4], #4
 8006788:	f8ad 2014 	strh.w	r2, [sp, #20]
 800678c:	9002      	str	r0, [sp, #8]
 800678e:	9006      	str	r0, [sp, #24]
 8006790:	f7f9 fd46 	bl	8000220 <strlen>
 8006794:	4b0b      	ldr	r3, [pc, #44]	@ (80067c4 <siscanf+0x4c>)
 8006796:	9003      	str	r0, [sp, #12]
 8006798:	9007      	str	r0, [sp, #28]
 800679a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800679c:	480a      	ldr	r0, [pc, #40]	@ (80067c8 <siscanf+0x50>)
 800679e:	9401      	str	r4, [sp, #4]
 80067a0:	2300      	movs	r3, #0
 80067a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80067a4:	9314      	str	r3, [sp, #80]	@ 0x50
 80067a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80067aa:	f8ad 3016 	strh.w	r3, [sp, #22]
 80067ae:	462a      	mov	r2, r5
 80067b0:	4623      	mov	r3, r4
 80067b2:	a902      	add	r1, sp, #8
 80067b4:	6800      	ldr	r0, [r0, #0]
 80067b6:	f000 f9b5 	bl	8006b24 <__ssvfiscanf_r>
 80067ba:	b01c      	add	sp, #112	@ 0x70
 80067bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80067c0:	b003      	add	sp, #12
 80067c2:	4770      	bx	lr
 80067c4:	080067cd 	.word	0x080067cd
 80067c8:	2000000c 	.word	0x2000000c

080067cc <__seofread>:
 80067cc:	2000      	movs	r0, #0
 80067ce:	4770      	bx	lr

080067d0 <memset>:
 80067d0:	4402      	add	r2, r0
 80067d2:	4603      	mov	r3, r0
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d100      	bne.n	80067da <memset+0xa>
 80067d8:	4770      	bx	lr
 80067da:	f803 1b01 	strb.w	r1, [r3], #1
 80067de:	e7f9      	b.n	80067d4 <memset+0x4>

080067e0 <strncmp>:
 80067e0:	b510      	push	{r4, lr}
 80067e2:	b16a      	cbz	r2, 8006800 <strncmp+0x20>
 80067e4:	3901      	subs	r1, #1
 80067e6:	1884      	adds	r4, r0, r2
 80067e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067ec:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d103      	bne.n	80067fc <strncmp+0x1c>
 80067f4:	42a0      	cmp	r0, r4
 80067f6:	d001      	beq.n	80067fc <strncmp+0x1c>
 80067f8:	2a00      	cmp	r2, #0
 80067fa:	d1f5      	bne.n	80067e8 <strncmp+0x8>
 80067fc:	1ad0      	subs	r0, r2, r3
 80067fe:	bd10      	pop	{r4, pc}
 8006800:	4610      	mov	r0, r2
 8006802:	e7fc      	b.n	80067fe <strncmp+0x1e>

08006804 <strncpy>:
 8006804:	b510      	push	{r4, lr}
 8006806:	3901      	subs	r1, #1
 8006808:	4603      	mov	r3, r0
 800680a:	b132      	cbz	r2, 800681a <strncpy+0x16>
 800680c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006810:	f803 4b01 	strb.w	r4, [r3], #1
 8006814:	3a01      	subs	r2, #1
 8006816:	2c00      	cmp	r4, #0
 8006818:	d1f7      	bne.n	800680a <strncpy+0x6>
 800681a:	441a      	add	r2, r3
 800681c:	2100      	movs	r1, #0
 800681e:	4293      	cmp	r3, r2
 8006820:	d100      	bne.n	8006824 <strncpy+0x20>
 8006822:	bd10      	pop	{r4, pc}
 8006824:	f803 1b01 	strb.w	r1, [r3], #1
 8006828:	e7f9      	b.n	800681e <strncpy+0x1a>
	...

0800682c <__errno>:
 800682c:	4b01      	ldr	r3, [pc, #4]	@ (8006834 <__errno+0x8>)
 800682e:	6818      	ldr	r0, [r3, #0]
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	2000000c 	.word	0x2000000c

08006838 <__libc_init_array>:
 8006838:	b570      	push	{r4, r5, r6, lr}
 800683a:	4d0d      	ldr	r5, [pc, #52]	@ (8006870 <__libc_init_array+0x38>)
 800683c:	4c0d      	ldr	r4, [pc, #52]	@ (8006874 <__libc_init_array+0x3c>)
 800683e:	1b64      	subs	r4, r4, r5
 8006840:	10a4      	asrs	r4, r4, #2
 8006842:	2600      	movs	r6, #0
 8006844:	42a6      	cmp	r6, r4
 8006846:	d109      	bne.n	800685c <__libc_init_array+0x24>
 8006848:	4d0b      	ldr	r5, [pc, #44]	@ (8006878 <__libc_init_array+0x40>)
 800684a:	4c0c      	ldr	r4, [pc, #48]	@ (800687c <__libc_init_array+0x44>)
 800684c:	f000 fde0 	bl	8007410 <_init>
 8006850:	1b64      	subs	r4, r4, r5
 8006852:	10a4      	asrs	r4, r4, #2
 8006854:	2600      	movs	r6, #0
 8006856:	42a6      	cmp	r6, r4
 8006858:	d105      	bne.n	8006866 <__libc_init_array+0x2e>
 800685a:	bd70      	pop	{r4, r5, r6, pc}
 800685c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006860:	4798      	blx	r3
 8006862:	3601      	adds	r6, #1
 8006864:	e7ee      	b.n	8006844 <__libc_init_array+0xc>
 8006866:	f855 3b04 	ldr.w	r3, [r5], #4
 800686a:	4798      	blx	r3
 800686c:	3601      	adds	r6, #1
 800686e:	e7f2      	b.n	8006856 <__libc_init_array+0x1e>
 8006870:	080075b4 	.word	0x080075b4
 8006874:	080075b4 	.word	0x080075b4
 8006878:	080075b4 	.word	0x080075b4
 800687c:	080075b8 	.word	0x080075b8

08006880 <__retarget_lock_acquire_recursive>:
 8006880:	4770      	bx	lr

08006882 <__retarget_lock_release_recursive>:
 8006882:	4770      	bx	lr

08006884 <_free_r>:
 8006884:	b538      	push	{r3, r4, r5, lr}
 8006886:	4605      	mov	r5, r0
 8006888:	2900      	cmp	r1, #0
 800688a:	d041      	beq.n	8006910 <_free_r+0x8c>
 800688c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006890:	1f0c      	subs	r4, r1, #4
 8006892:	2b00      	cmp	r3, #0
 8006894:	bfb8      	it	lt
 8006896:	18e4      	addlt	r4, r4, r3
 8006898:	f000 f8e0 	bl	8006a5c <__malloc_lock>
 800689c:	4a1d      	ldr	r2, [pc, #116]	@ (8006914 <_free_r+0x90>)
 800689e:	6813      	ldr	r3, [r2, #0]
 80068a0:	b933      	cbnz	r3, 80068b0 <_free_r+0x2c>
 80068a2:	6063      	str	r3, [r4, #4]
 80068a4:	6014      	str	r4, [r2, #0]
 80068a6:	4628      	mov	r0, r5
 80068a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068ac:	f000 b8dc 	b.w	8006a68 <__malloc_unlock>
 80068b0:	42a3      	cmp	r3, r4
 80068b2:	d908      	bls.n	80068c6 <_free_r+0x42>
 80068b4:	6820      	ldr	r0, [r4, #0]
 80068b6:	1821      	adds	r1, r4, r0
 80068b8:	428b      	cmp	r3, r1
 80068ba:	bf01      	itttt	eq
 80068bc:	6819      	ldreq	r1, [r3, #0]
 80068be:	685b      	ldreq	r3, [r3, #4]
 80068c0:	1809      	addeq	r1, r1, r0
 80068c2:	6021      	streq	r1, [r4, #0]
 80068c4:	e7ed      	b.n	80068a2 <_free_r+0x1e>
 80068c6:	461a      	mov	r2, r3
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	b10b      	cbz	r3, 80068d0 <_free_r+0x4c>
 80068cc:	42a3      	cmp	r3, r4
 80068ce:	d9fa      	bls.n	80068c6 <_free_r+0x42>
 80068d0:	6811      	ldr	r1, [r2, #0]
 80068d2:	1850      	adds	r0, r2, r1
 80068d4:	42a0      	cmp	r0, r4
 80068d6:	d10b      	bne.n	80068f0 <_free_r+0x6c>
 80068d8:	6820      	ldr	r0, [r4, #0]
 80068da:	4401      	add	r1, r0
 80068dc:	1850      	adds	r0, r2, r1
 80068de:	4283      	cmp	r3, r0
 80068e0:	6011      	str	r1, [r2, #0]
 80068e2:	d1e0      	bne.n	80068a6 <_free_r+0x22>
 80068e4:	6818      	ldr	r0, [r3, #0]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	6053      	str	r3, [r2, #4]
 80068ea:	4408      	add	r0, r1
 80068ec:	6010      	str	r0, [r2, #0]
 80068ee:	e7da      	b.n	80068a6 <_free_r+0x22>
 80068f0:	d902      	bls.n	80068f8 <_free_r+0x74>
 80068f2:	230c      	movs	r3, #12
 80068f4:	602b      	str	r3, [r5, #0]
 80068f6:	e7d6      	b.n	80068a6 <_free_r+0x22>
 80068f8:	6820      	ldr	r0, [r4, #0]
 80068fa:	1821      	adds	r1, r4, r0
 80068fc:	428b      	cmp	r3, r1
 80068fe:	bf04      	itt	eq
 8006900:	6819      	ldreq	r1, [r3, #0]
 8006902:	685b      	ldreq	r3, [r3, #4]
 8006904:	6063      	str	r3, [r4, #4]
 8006906:	bf04      	itt	eq
 8006908:	1809      	addeq	r1, r1, r0
 800690a:	6021      	streq	r1, [r4, #0]
 800690c:	6054      	str	r4, [r2, #4]
 800690e:	e7ca      	b.n	80068a6 <_free_r+0x22>
 8006910:	bd38      	pop	{r3, r4, r5, pc}
 8006912:	bf00      	nop
 8006914:	20000454 	.word	0x20000454

08006918 <sbrk_aligned>:
 8006918:	b570      	push	{r4, r5, r6, lr}
 800691a:	4e0f      	ldr	r6, [pc, #60]	@ (8006958 <sbrk_aligned+0x40>)
 800691c:	460c      	mov	r4, r1
 800691e:	6831      	ldr	r1, [r6, #0]
 8006920:	4605      	mov	r5, r0
 8006922:	b911      	cbnz	r1, 800692a <sbrk_aligned+0x12>
 8006924:	f000 fc34 	bl	8007190 <_sbrk_r>
 8006928:	6030      	str	r0, [r6, #0]
 800692a:	4621      	mov	r1, r4
 800692c:	4628      	mov	r0, r5
 800692e:	f000 fc2f 	bl	8007190 <_sbrk_r>
 8006932:	1c43      	adds	r3, r0, #1
 8006934:	d103      	bne.n	800693e <sbrk_aligned+0x26>
 8006936:	f04f 34ff 	mov.w	r4, #4294967295
 800693a:	4620      	mov	r0, r4
 800693c:	bd70      	pop	{r4, r5, r6, pc}
 800693e:	1cc4      	adds	r4, r0, #3
 8006940:	f024 0403 	bic.w	r4, r4, #3
 8006944:	42a0      	cmp	r0, r4
 8006946:	d0f8      	beq.n	800693a <sbrk_aligned+0x22>
 8006948:	1a21      	subs	r1, r4, r0
 800694a:	4628      	mov	r0, r5
 800694c:	f000 fc20 	bl	8007190 <_sbrk_r>
 8006950:	3001      	adds	r0, #1
 8006952:	d1f2      	bne.n	800693a <sbrk_aligned+0x22>
 8006954:	e7ef      	b.n	8006936 <sbrk_aligned+0x1e>
 8006956:	bf00      	nop
 8006958:	20000450 	.word	0x20000450

0800695c <_malloc_r>:
 800695c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006960:	1ccd      	adds	r5, r1, #3
 8006962:	f025 0503 	bic.w	r5, r5, #3
 8006966:	3508      	adds	r5, #8
 8006968:	2d0c      	cmp	r5, #12
 800696a:	bf38      	it	cc
 800696c:	250c      	movcc	r5, #12
 800696e:	2d00      	cmp	r5, #0
 8006970:	4606      	mov	r6, r0
 8006972:	db01      	blt.n	8006978 <_malloc_r+0x1c>
 8006974:	42a9      	cmp	r1, r5
 8006976:	d904      	bls.n	8006982 <_malloc_r+0x26>
 8006978:	230c      	movs	r3, #12
 800697a:	6033      	str	r3, [r6, #0]
 800697c:	2000      	movs	r0, #0
 800697e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006982:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006a58 <_malloc_r+0xfc>
 8006986:	f000 f869 	bl	8006a5c <__malloc_lock>
 800698a:	f8d8 3000 	ldr.w	r3, [r8]
 800698e:	461c      	mov	r4, r3
 8006990:	bb44      	cbnz	r4, 80069e4 <_malloc_r+0x88>
 8006992:	4629      	mov	r1, r5
 8006994:	4630      	mov	r0, r6
 8006996:	f7ff ffbf 	bl	8006918 <sbrk_aligned>
 800699a:	1c43      	adds	r3, r0, #1
 800699c:	4604      	mov	r4, r0
 800699e:	d158      	bne.n	8006a52 <_malloc_r+0xf6>
 80069a0:	f8d8 4000 	ldr.w	r4, [r8]
 80069a4:	4627      	mov	r7, r4
 80069a6:	2f00      	cmp	r7, #0
 80069a8:	d143      	bne.n	8006a32 <_malloc_r+0xd6>
 80069aa:	2c00      	cmp	r4, #0
 80069ac:	d04b      	beq.n	8006a46 <_malloc_r+0xea>
 80069ae:	6823      	ldr	r3, [r4, #0]
 80069b0:	4639      	mov	r1, r7
 80069b2:	4630      	mov	r0, r6
 80069b4:	eb04 0903 	add.w	r9, r4, r3
 80069b8:	f000 fbea 	bl	8007190 <_sbrk_r>
 80069bc:	4581      	cmp	r9, r0
 80069be:	d142      	bne.n	8006a46 <_malloc_r+0xea>
 80069c0:	6821      	ldr	r1, [r4, #0]
 80069c2:	1a6d      	subs	r5, r5, r1
 80069c4:	4629      	mov	r1, r5
 80069c6:	4630      	mov	r0, r6
 80069c8:	f7ff ffa6 	bl	8006918 <sbrk_aligned>
 80069cc:	3001      	adds	r0, #1
 80069ce:	d03a      	beq.n	8006a46 <_malloc_r+0xea>
 80069d0:	6823      	ldr	r3, [r4, #0]
 80069d2:	442b      	add	r3, r5
 80069d4:	6023      	str	r3, [r4, #0]
 80069d6:	f8d8 3000 	ldr.w	r3, [r8]
 80069da:	685a      	ldr	r2, [r3, #4]
 80069dc:	bb62      	cbnz	r2, 8006a38 <_malloc_r+0xdc>
 80069de:	f8c8 7000 	str.w	r7, [r8]
 80069e2:	e00f      	b.n	8006a04 <_malloc_r+0xa8>
 80069e4:	6822      	ldr	r2, [r4, #0]
 80069e6:	1b52      	subs	r2, r2, r5
 80069e8:	d420      	bmi.n	8006a2c <_malloc_r+0xd0>
 80069ea:	2a0b      	cmp	r2, #11
 80069ec:	d917      	bls.n	8006a1e <_malloc_r+0xc2>
 80069ee:	1961      	adds	r1, r4, r5
 80069f0:	42a3      	cmp	r3, r4
 80069f2:	6025      	str	r5, [r4, #0]
 80069f4:	bf18      	it	ne
 80069f6:	6059      	strne	r1, [r3, #4]
 80069f8:	6863      	ldr	r3, [r4, #4]
 80069fa:	bf08      	it	eq
 80069fc:	f8c8 1000 	streq.w	r1, [r8]
 8006a00:	5162      	str	r2, [r4, r5]
 8006a02:	604b      	str	r3, [r1, #4]
 8006a04:	4630      	mov	r0, r6
 8006a06:	f000 f82f 	bl	8006a68 <__malloc_unlock>
 8006a0a:	f104 000b 	add.w	r0, r4, #11
 8006a0e:	1d23      	adds	r3, r4, #4
 8006a10:	f020 0007 	bic.w	r0, r0, #7
 8006a14:	1ac2      	subs	r2, r0, r3
 8006a16:	bf1c      	itt	ne
 8006a18:	1a1b      	subne	r3, r3, r0
 8006a1a:	50a3      	strne	r3, [r4, r2]
 8006a1c:	e7af      	b.n	800697e <_malloc_r+0x22>
 8006a1e:	6862      	ldr	r2, [r4, #4]
 8006a20:	42a3      	cmp	r3, r4
 8006a22:	bf0c      	ite	eq
 8006a24:	f8c8 2000 	streq.w	r2, [r8]
 8006a28:	605a      	strne	r2, [r3, #4]
 8006a2a:	e7eb      	b.n	8006a04 <_malloc_r+0xa8>
 8006a2c:	4623      	mov	r3, r4
 8006a2e:	6864      	ldr	r4, [r4, #4]
 8006a30:	e7ae      	b.n	8006990 <_malloc_r+0x34>
 8006a32:	463c      	mov	r4, r7
 8006a34:	687f      	ldr	r7, [r7, #4]
 8006a36:	e7b6      	b.n	80069a6 <_malloc_r+0x4a>
 8006a38:	461a      	mov	r2, r3
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	42a3      	cmp	r3, r4
 8006a3e:	d1fb      	bne.n	8006a38 <_malloc_r+0xdc>
 8006a40:	2300      	movs	r3, #0
 8006a42:	6053      	str	r3, [r2, #4]
 8006a44:	e7de      	b.n	8006a04 <_malloc_r+0xa8>
 8006a46:	230c      	movs	r3, #12
 8006a48:	6033      	str	r3, [r6, #0]
 8006a4a:	4630      	mov	r0, r6
 8006a4c:	f000 f80c 	bl	8006a68 <__malloc_unlock>
 8006a50:	e794      	b.n	800697c <_malloc_r+0x20>
 8006a52:	6005      	str	r5, [r0, #0]
 8006a54:	e7d6      	b.n	8006a04 <_malloc_r+0xa8>
 8006a56:	bf00      	nop
 8006a58:	20000454 	.word	0x20000454

08006a5c <__malloc_lock>:
 8006a5c:	4801      	ldr	r0, [pc, #4]	@ (8006a64 <__malloc_lock+0x8>)
 8006a5e:	f7ff bf0f 	b.w	8006880 <__retarget_lock_acquire_recursive>
 8006a62:	bf00      	nop
 8006a64:	2000044c 	.word	0x2000044c

08006a68 <__malloc_unlock>:
 8006a68:	4801      	ldr	r0, [pc, #4]	@ (8006a70 <__malloc_unlock+0x8>)
 8006a6a:	f7ff bf0a 	b.w	8006882 <__retarget_lock_release_recursive>
 8006a6e:	bf00      	nop
 8006a70:	2000044c 	.word	0x2000044c

08006a74 <_sungetc_r>:
 8006a74:	b538      	push	{r3, r4, r5, lr}
 8006a76:	1c4b      	adds	r3, r1, #1
 8006a78:	4614      	mov	r4, r2
 8006a7a:	d103      	bne.n	8006a84 <_sungetc_r+0x10>
 8006a7c:	f04f 35ff 	mov.w	r5, #4294967295
 8006a80:	4628      	mov	r0, r5
 8006a82:	bd38      	pop	{r3, r4, r5, pc}
 8006a84:	8993      	ldrh	r3, [r2, #12]
 8006a86:	f023 0320 	bic.w	r3, r3, #32
 8006a8a:	8193      	strh	r3, [r2, #12]
 8006a8c:	6853      	ldr	r3, [r2, #4]
 8006a8e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006a90:	b2cd      	uxtb	r5, r1
 8006a92:	b18a      	cbz	r2, 8006ab8 <_sungetc_r+0x44>
 8006a94:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006a96:	429a      	cmp	r2, r3
 8006a98:	dd08      	ble.n	8006aac <_sungetc_r+0x38>
 8006a9a:	6823      	ldr	r3, [r4, #0]
 8006a9c:	1e5a      	subs	r2, r3, #1
 8006a9e:	6022      	str	r2, [r4, #0]
 8006aa0:	f803 5c01 	strb.w	r5, [r3, #-1]
 8006aa4:	6863      	ldr	r3, [r4, #4]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	6063      	str	r3, [r4, #4]
 8006aaa:	e7e9      	b.n	8006a80 <_sungetc_r+0xc>
 8006aac:	4621      	mov	r1, r4
 8006aae:	f000 fb34 	bl	800711a <__submore>
 8006ab2:	2800      	cmp	r0, #0
 8006ab4:	d0f1      	beq.n	8006a9a <_sungetc_r+0x26>
 8006ab6:	e7e1      	b.n	8006a7c <_sungetc_r+0x8>
 8006ab8:	6921      	ldr	r1, [r4, #16]
 8006aba:	6822      	ldr	r2, [r4, #0]
 8006abc:	b141      	cbz	r1, 8006ad0 <_sungetc_r+0x5c>
 8006abe:	4291      	cmp	r1, r2
 8006ac0:	d206      	bcs.n	8006ad0 <_sungetc_r+0x5c>
 8006ac2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8006ac6:	42a9      	cmp	r1, r5
 8006ac8:	d102      	bne.n	8006ad0 <_sungetc_r+0x5c>
 8006aca:	3a01      	subs	r2, #1
 8006acc:	6022      	str	r2, [r4, #0]
 8006ace:	e7ea      	b.n	8006aa6 <_sungetc_r+0x32>
 8006ad0:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8006ad4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006ad8:	6363      	str	r3, [r4, #52]	@ 0x34
 8006ada:	2303      	movs	r3, #3
 8006adc:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006ade:	4623      	mov	r3, r4
 8006ae0:	f803 5f46 	strb.w	r5, [r3, #70]!
 8006ae4:	6023      	str	r3, [r4, #0]
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e7de      	b.n	8006aa8 <_sungetc_r+0x34>

08006aea <__ssrefill_r>:
 8006aea:	b510      	push	{r4, lr}
 8006aec:	460c      	mov	r4, r1
 8006aee:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8006af0:	b169      	cbz	r1, 8006b0e <__ssrefill_r+0x24>
 8006af2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006af6:	4299      	cmp	r1, r3
 8006af8:	d001      	beq.n	8006afe <__ssrefill_r+0x14>
 8006afa:	f7ff fec3 	bl	8006884 <_free_r>
 8006afe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006b00:	6063      	str	r3, [r4, #4]
 8006b02:	2000      	movs	r0, #0
 8006b04:	6360      	str	r0, [r4, #52]	@ 0x34
 8006b06:	b113      	cbz	r3, 8006b0e <__ssrefill_r+0x24>
 8006b08:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006b0a:	6023      	str	r3, [r4, #0]
 8006b0c:	bd10      	pop	{r4, pc}
 8006b0e:	6923      	ldr	r3, [r4, #16]
 8006b10:	6023      	str	r3, [r4, #0]
 8006b12:	2300      	movs	r3, #0
 8006b14:	6063      	str	r3, [r4, #4]
 8006b16:	89a3      	ldrh	r3, [r4, #12]
 8006b18:	f043 0320 	orr.w	r3, r3, #32
 8006b1c:	81a3      	strh	r3, [r4, #12]
 8006b1e:	f04f 30ff 	mov.w	r0, #4294967295
 8006b22:	e7f3      	b.n	8006b0c <__ssrefill_r+0x22>

08006b24 <__ssvfiscanf_r>:
 8006b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b28:	460c      	mov	r4, r1
 8006b2a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8006b2e:	2100      	movs	r1, #0
 8006b30:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8006b34:	49a5      	ldr	r1, [pc, #660]	@ (8006dcc <__ssvfiscanf_r+0x2a8>)
 8006b36:	91a0      	str	r1, [sp, #640]	@ 0x280
 8006b38:	f10d 0804 	add.w	r8, sp, #4
 8006b3c:	49a4      	ldr	r1, [pc, #656]	@ (8006dd0 <__ssvfiscanf_r+0x2ac>)
 8006b3e:	4fa5      	ldr	r7, [pc, #660]	@ (8006dd4 <__ssvfiscanf_r+0x2b0>)
 8006b40:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8006b44:	4606      	mov	r6, r0
 8006b46:	91a1      	str	r1, [sp, #644]	@ 0x284
 8006b48:	9300      	str	r3, [sp, #0]
 8006b4a:	7813      	ldrb	r3, [r2, #0]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	f000 8158 	beq.w	8006e02 <__ssvfiscanf_r+0x2de>
 8006b52:	5cf9      	ldrb	r1, [r7, r3]
 8006b54:	f011 0108 	ands.w	r1, r1, #8
 8006b58:	f102 0501 	add.w	r5, r2, #1
 8006b5c:	d019      	beq.n	8006b92 <__ssvfiscanf_r+0x6e>
 8006b5e:	6863      	ldr	r3, [r4, #4]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	dd0f      	ble.n	8006b84 <__ssvfiscanf_r+0x60>
 8006b64:	6823      	ldr	r3, [r4, #0]
 8006b66:	781a      	ldrb	r2, [r3, #0]
 8006b68:	5cba      	ldrb	r2, [r7, r2]
 8006b6a:	0712      	lsls	r2, r2, #28
 8006b6c:	d401      	bmi.n	8006b72 <__ssvfiscanf_r+0x4e>
 8006b6e:	462a      	mov	r2, r5
 8006b70:	e7eb      	b.n	8006b4a <__ssvfiscanf_r+0x26>
 8006b72:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8006b74:	3201      	adds	r2, #1
 8006b76:	9245      	str	r2, [sp, #276]	@ 0x114
 8006b78:	6862      	ldr	r2, [r4, #4]
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	3a01      	subs	r2, #1
 8006b7e:	6062      	str	r2, [r4, #4]
 8006b80:	6023      	str	r3, [r4, #0]
 8006b82:	e7ec      	b.n	8006b5e <__ssvfiscanf_r+0x3a>
 8006b84:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006b86:	4621      	mov	r1, r4
 8006b88:	4630      	mov	r0, r6
 8006b8a:	4798      	blx	r3
 8006b8c:	2800      	cmp	r0, #0
 8006b8e:	d0e9      	beq.n	8006b64 <__ssvfiscanf_r+0x40>
 8006b90:	e7ed      	b.n	8006b6e <__ssvfiscanf_r+0x4a>
 8006b92:	2b25      	cmp	r3, #37	@ 0x25
 8006b94:	d012      	beq.n	8006bbc <__ssvfiscanf_r+0x98>
 8006b96:	4699      	mov	r9, r3
 8006b98:	6863      	ldr	r3, [r4, #4]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	f340 8093 	ble.w	8006cc6 <__ssvfiscanf_r+0x1a2>
 8006ba0:	6822      	ldr	r2, [r4, #0]
 8006ba2:	7813      	ldrb	r3, [r2, #0]
 8006ba4:	454b      	cmp	r3, r9
 8006ba6:	f040 812c 	bne.w	8006e02 <__ssvfiscanf_r+0x2de>
 8006baa:	6863      	ldr	r3, [r4, #4]
 8006bac:	3b01      	subs	r3, #1
 8006bae:	6063      	str	r3, [r4, #4]
 8006bb0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8006bb2:	3201      	adds	r2, #1
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	6022      	str	r2, [r4, #0]
 8006bb8:	9345      	str	r3, [sp, #276]	@ 0x114
 8006bba:	e7d8      	b.n	8006b6e <__ssvfiscanf_r+0x4a>
 8006bbc:	9141      	str	r1, [sp, #260]	@ 0x104
 8006bbe:	9143      	str	r1, [sp, #268]	@ 0x10c
 8006bc0:	7853      	ldrb	r3, [r2, #1]
 8006bc2:	2b2a      	cmp	r3, #42	@ 0x2a
 8006bc4:	bf02      	ittt	eq
 8006bc6:	2310      	moveq	r3, #16
 8006bc8:	1c95      	addeq	r5, r2, #2
 8006bca:	9341      	streq	r3, [sp, #260]	@ 0x104
 8006bcc:	220a      	movs	r2, #10
 8006bce:	46a9      	mov	r9, r5
 8006bd0:	f819 1b01 	ldrb.w	r1, [r9], #1
 8006bd4:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8006bd8:	2b09      	cmp	r3, #9
 8006bda:	d91e      	bls.n	8006c1a <__ssvfiscanf_r+0xf6>
 8006bdc:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8006dd8 <__ssvfiscanf_r+0x2b4>
 8006be0:	2203      	movs	r2, #3
 8006be2:	4650      	mov	r0, sl
 8006be4:	f7f9 fb24 	bl	8000230 <memchr>
 8006be8:	b138      	cbz	r0, 8006bfa <__ssvfiscanf_r+0xd6>
 8006bea:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8006bec:	eba0 000a 	sub.w	r0, r0, sl
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	4083      	lsls	r3, r0
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	9341      	str	r3, [sp, #260]	@ 0x104
 8006bf8:	464d      	mov	r5, r9
 8006bfa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006bfe:	2b78      	cmp	r3, #120	@ 0x78
 8006c00:	d806      	bhi.n	8006c10 <__ssvfiscanf_r+0xec>
 8006c02:	2b57      	cmp	r3, #87	@ 0x57
 8006c04:	d810      	bhi.n	8006c28 <__ssvfiscanf_r+0x104>
 8006c06:	2b25      	cmp	r3, #37	@ 0x25
 8006c08:	d0c5      	beq.n	8006b96 <__ssvfiscanf_r+0x72>
 8006c0a:	d857      	bhi.n	8006cbc <__ssvfiscanf_r+0x198>
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d065      	beq.n	8006cdc <__ssvfiscanf_r+0x1b8>
 8006c10:	2303      	movs	r3, #3
 8006c12:	9347      	str	r3, [sp, #284]	@ 0x11c
 8006c14:	230a      	movs	r3, #10
 8006c16:	9342      	str	r3, [sp, #264]	@ 0x108
 8006c18:	e078      	b.n	8006d0c <__ssvfiscanf_r+0x1e8>
 8006c1a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8006c1c:	fb02 1103 	mla	r1, r2, r3, r1
 8006c20:	3930      	subs	r1, #48	@ 0x30
 8006c22:	9143      	str	r1, [sp, #268]	@ 0x10c
 8006c24:	464d      	mov	r5, r9
 8006c26:	e7d2      	b.n	8006bce <__ssvfiscanf_r+0xaa>
 8006c28:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8006c2c:	2a20      	cmp	r2, #32
 8006c2e:	d8ef      	bhi.n	8006c10 <__ssvfiscanf_r+0xec>
 8006c30:	a101      	add	r1, pc, #4	@ (adr r1, 8006c38 <__ssvfiscanf_r+0x114>)
 8006c32:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006c36:	bf00      	nop
 8006c38:	08006ceb 	.word	0x08006ceb
 8006c3c:	08006c11 	.word	0x08006c11
 8006c40:	08006c11 	.word	0x08006c11
 8006c44:	08006d45 	.word	0x08006d45
 8006c48:	08006c11 	.word	0x08006c11
 8006c4c:	08006c11 	.word	0x08006c11
 8006c50:	08006c11 	.word	0x08006c11
 8006c54:	08006c11 	.word	0x08006c11
 8006c58:	08006c11 	.word	0x08006c11
 8006c5c:	08006c11 	.word	0x08006c11
 8006c60:	08006c11 	.word	0x08006c11
 8006c64:	08006d5b 	.word	0x08006d5b
 8006c68:	08006d41 	.word	0x08006d41
 8006c6c:	08006cc3 	.word	0x08006cc3
 8006c70:	08006cc3 	.word	0x08006cc3
 8006c74:	08006cc3 	.word	0x08006cc3
 8006c78:	08006c11 	.word	0x08006c11
 8006c7c:	08006cfd 	.word	0x08006cfd
 8006c80:	08006c11 	.word	0x08006c11
 8006c84:	08006c11 	.word	0x08006c11
 8006c88:	08006c11 	.word	0x08006c11
 8006c8c:	08006c11 	.word	0x08006c11
 8006c90:	08006d6b 	.word	0x08006d6b
 8006c94:	08006d05 	.word	0x08006d05
 8006c98:	08006ce3 	.word	0x08006ce3
 8006c9c:	08006c11 	.word	0x08006c11
 8006ca0:	08006c11 	.word	0x08006c11
 8006ca4:	08006d67 	.word	0x08006d67
 8006ca8:	08006c11 	.word	0x08006c11
 8006cac:	08006d41 	.word	0x08006d41
 8006cb0:	08006c11 	.word	0x08006c11
 8006cb4:	08006c11 	.word	0x08006c11
 8006cb8:	08006ceb 	.word	0x08006ceb
 8006cbc:	3b45      	subs	r3, #69	@ 0x45
 8006cbe:	2b02      	cmp	r3, #2
 8006cc0:	d8a6      	bhi.n	8006c10 <__ssvfiscanf_r+0xec>
 8006cc2:	2305      	movs	r3, #5
 8006cc4:	e021      	b.n	8006d0a <__ssvfiscanf_r+0x1e6>
 8006cc6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006cc8:	4621      	mov	r1, r4
 8006cca:	4630      	mov	r0, r6
 8006ccc:	4798      	blx	r3
 8006cce:	2800      	cmp	r0, #0
 8006cd0:	f43f af66 	beq.w	8006ba0 <__ssvfiscanf_r+0x7c>
 8006cd4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8006cd6:	2800      	cmp	r0, #0
 8006cd8:	f040 808b 	bne.w	8006df2 <__ssvfiscanf_r+0x2ce>
 8006cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ce0:	e08b      	b.n	8006dfa <__ssvfiscanf_r+0x2d6>
 8006ce2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8006ce4:	f042 0220 	orr.w	r2, r2, #32
 8006ce8:	9241      	str	r2, [sp, #260]	@ 0x104
 8006cea:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8006cec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006cf0:	9241      	str	r2, [sp, #260]	@ 0x104
 8006cf2:	2210      	movs	r2, #16
 8006cf4:	2b6e      	cmp	r3, #110	@ 0x6e
 8006cf6:	9242      	str	r2, [sp, #264]	@ 0x108
 8006cf8:	d902      	bls.n	8006d00 <__ssvfiscanf_r+0x1dc>
 8006cfa:	e005      	b.n	8006d08 <__ssvfiscanf_r+0x1e4>
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	9342      	str	r3, [sp, #264]	@ 0x108
 8006d00:	2303      	movs	r3, #3
 8006d02:	e002      	b.n	8006d0a <__ssvfiscanf_r+0x1e6>
 8006d04:	2308      	movs	r3, #8
 8006d06:	9342      	str	r3, [sp, #264]	@ 0x108
 8006d08:	2304      	movs	r3, #4
 8006d0a:	9347      	str	r3, [sp, #284]	@ 0x11c
 8006d0c:	6863      	ldr	r3, [r4, #4]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	dd39      	ble.n	8006d86 <__ssvfiscanf_r+0x262>
 8006d12:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8006d14:	0659      	lsls	r1, r3, #25
 8006d16:	d404      	bmi.n	8006d22 <__ssvfiscanf_r+0x1fe>
 8006d18:	6823      	ldr	r3, [r4, #0]
 8006d1a:	781a      	ldrb	r2, [r3, #0]
 8006d1c:	5cba      	ldrb	r2, [r7, r2]
 8006d1e:	0712      	lsls	r2, r2, #28
 8006d20:	d438      	bmi.n	8006d94 <__ssvfiscanf_r+0x270>
 8006d22:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8006d24:	2b02      	cmp	r3, #2
 8006d26:	dc47      	bgt.n	8006db8 <__ssvfiscanf_r+0x294>
 8006d28:	466b      	mov	r3, sp
 8006d2a:	4622      	mov	r2, r4
 8006d2c:	a941      	add	r1, sp, #260	@ 0x104
 8006d2e:	4630      	mov	r0, r6
 8006d30:	f000 f86c 	bl	8006e0c <_scanf_chars>
 8006d34:	2801      	cmp	r0, #1
 8006d36:	d064      	beq.n	8006e02 <__ssvfiscanf_r+0x2de>
 8006d38:	2802      	cmp	r0, #2
 8006d3a:	f47f af18 	bne.w	8006b6e <__ssvfiscanf_r+0x4a>
 8006d3e:	e7c9      	b.n	8006cd4 <__ssvfiscanf_r+0x1b0>
 8006d40:	220a      	movs	r2, #10
 8006d42:	e7d7      	b.n	8006cf4 <__ssvfiscanf_r+0x1d0>
 8006d44:	4629      	mov	r1, r5
 8006d46:	4640      	mov	r0, r8
 8006d48:	f000 f9ae 	bl	80070a8 <__sccl>
 8006d4c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8006d4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d52:	9341      	str	r3, [sp, #260]	@ 0x104
 8006d54:	4605      	mov	r5, r0
 8006d56:	2301      	movs	r3, #1
 8006d58:	e7d7      	b.n	8006d0a <__ssvfiscanf_r+0x1e6>
 8006d5a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8006d5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d60:	9341      	str	r3, [sp, #260]	@ 0x104
 8006d62:	2300      	movs	r3, #0
 8006d64:	e7d1      	b.n	8006d0a <__ssvfiscanf_r+0x1e6>
 8006d66:	2302      	movs	r3, #2
 8006d68:	e7cf      	b.n	8006d0a <__ssvfiscanf_r+0x1e6>
 8006d6a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8006d6c:	06c3      	lsls	r3, r0, #27
 8006d6e:	f53f aefe 	bmi.w	8006b6e <__ssvfiscanf_r+0x4a>
 8006d72:	9b00      	ldr	r3, [sp, #0]
 8006d74:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8006d76:	1d19      	adds	r1, r3, #4
 8006d78:	9100      	str	r1, [sp, #0]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	07c0      	lsls	r0, r0, #31
 8006d7e:	bf4c      	ite	mi
 8006d80:	801a      	strhmi	r2, [r3, #0]
 8006d82:	601a      	strpl	r2, [r3, #0]
 8006d84:	e6f3      	b.n	8006b6e <__ssvfiscanf_r+0x4a>
 8006d86:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006d88:	4621      	mov	r1, r4
 8006d8a:	4630      	mov	r0, r6
 8006d8c:	4798      	blx	r3
 8006d8e:	2800      	cmp	r0, #0
 8006d90:	d0bf      	beq.n	8006d12 <__ssvfiscanf_r+0x1ee>
 8006d92:	e79f      	b.n	8006cd4 <__ssvfiscanf_r+0x1b0>
 8006d94:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8006d96:	3201      	adds	r2, #1
 8006d98:	9245      	str	r2, [sp, #276]	@ 0x114
 8006d9a:	6862      	ldr	r2, [r4, #4]
 8006d9c:	3a01      	subs	r2, #1
 8006d9e:	2a00      	cmp	r2, #0
 8006da0:	6062      	str	r2, [r4, #4]
 8006da2:	dd02      	ble.n	8006daa <__ssvfiscanf_r+0x286>
 8006da4:	3301      	adds	r3, #1
 8006da6:	6023      	str	r3, [r4, #0]
 8006da8:	e7b6      	b.n	8006d18 <__ssvfiscanf_r+0x1f4>
 8006daa:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006dac:	4621      	mov	r1, r4
 8006dae:	4630      	mov	r0, r6
 8006db0:	4798      	blx	r3
 8006db2:	2800      	cmp	r0, #0
 8006db4:	d0b0      	beq.n	8006d18 <__ssvfiscanf_r+0x1f4>
 8006db6:	e78d      	b.n	8006cd4 <__ssvfiscanf_r+0x1b0>
 8006db8:	2b04      	cmp	r3, #4
 8006dba:	dc0f      	bgt.n	8006ddc <__ssvfiscanf_r+0x2b8>
 8006dbc:	466b      	mov	r3, sp
 8006dbe:	4622      	mov	r2, r4
 8006dc0:	a941      	add	r1, sp, #260	@ 0x104
 8006dc2:	4630      	mov	r0, r6
 8006dc4:	f000 f87c 	bl	8006ec0 <_scanf_i>
 8006dc8:	e7b4      	b.n	8006d34 <__ssvfiscanf_r+0x210>
 8006dca:	bf00      	nop
 8006dcc:	08006a75 	.word	0x08006a75
 8006dd0:	08006aeb 	.word	0x08006aeb
 8006dd4:	080074ac 	.word	0x080074ac
 8006dd8:	0800748c 	.word	0x0800748c
 8006ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8006e08 <__ssvfiscanf_r+0x2e4>)
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	f43f aec5 	beq.w	8006b6e <__ssvfiscanf_r+0x4a>
 8006de4:	466b      	mov	r3, sp
 8006de6:	4622      	mov	r2, r4
 8006de8:	a941      	add	r1, sp, #260	@ 0x104
 8006dea:	4630      	mov	r0, r6
 8006dec:	f3af 8000 	nop.w
 8006df0:	e7a0      	b.n	8006d34 <__ssvfiscanf_r+0x210>
 8006df2:	89a3      	ldrh	r3, [r4, #12]
 8006df4:	065b      	lsls	r3, r3, #25
 8006df6:	f53f af71 	bmi.w	8006cdc <__ssvfiscanf_r+0x1b8>
 8006dfa:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8006dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e02:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8006e04:	e7f9      	b.n	8006dfa <__ssvfiscanf_r+0x2d6>
 8006e06:	bf00      	nop
 8006e08:	00000000 	.word	0x00000000

08006e0c <_scanf_chars>:
 8006e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e10:	4615      	mov	r5, r2
 8006e12:	688a      	ldr	r2, [r1, #8]
 8006e14:	4680      	mov	r8, r0
 8006e16:	460c      	mov	r4, r1
 8006e18:	b932      	cbnz	r2, 8006e28 <_scanf_chars+0x1c>
 8006e1a:	698a      	ldr	r2, [r1, #24]
 8006e1c:	2a00      	cmp	r2, #0
 8006e1e:	bf14      	ite	ne
 8006e20:	f04f 32ff 	movne.w	r2, #4294967295
 8006e24:	2201      	moveq	r2, #1
 8006e26:	608a      	str	r2, [r1, #8]
 8006e28:	6822      	ldr	r2, [r4, #0]
 8006e2a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8006ebc <_scanf_chars+0xb0>
 8006e2e:	06d1      	lsls	r1, r2, #27
 8006e30:	bf5f      	itttt	pl
 8006e32:	681a      	ldrpl	r2, [r3, #0]
 8006e34:	1d11      	addpl	r1, r2, #4
 8006e36:	6019      	strpl	r1, [r3, #0]
 8006e38:	6816      	ldrpl	r6, [r2, #0]
 8006e3a:	2700      	movs	r7, #0
 8006e3c:	69a0      	ldr	r0, [r4, #24]
 8006e3e:	b188      	cbz	r0, 8006e64 <_scanf_chars+0x58>
 8006e40:	2801      	cmp	r0, #1
 8006e42:	d107      	bne.n	8006e54 <_scanf_chars+0x48>
 8006e44:	682b      	ldr	r3, [r5, #0]
 8006e46:	781a      	ldrb	r2, [r3, #0]
 8006e48:	6963      	ldr	r3, [r4, #20]
 8006e4a:	5c9b      	ldrb	r3, [r3, r2]
 8006e4c:	b953      	cbnz	r3, 8006e64 <_scanf_chars+0x58>
 8006e4e:	2f00      	cmp	r7, #0
 8006e50:	d031      	beq.n	8006eb6 <_scanf_chars+0xaa>
 8006e52:	e022      	b.n	8006e9a <_scanf_chars+0x8e>
 8006e54:	2802      	cmp	r0, #2
 8006e56:	d120      	bne.n	8006e9a <_scanf_chars+0x8e>
 8006e58:	682b      	ldr	r3, [r5, #0]
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8006e60:	071b      	lsls	r3, r3, #28
 8006e62:	d41a      	bmi.n	8006e9a <_scanf_chars+0x8e>
 8006e64:	6823      	ldr	r3, [r4, #0]
 8006e66:	06da      	lsls	r2, r3, #27
 8006e68:	bf5e      	ittt	pl
 8006e6a:	682b      	ldrpl	r3, [r5, #0]
 8006e6c:	781b      	ldrbpl	r3, [r3, #0]
 8006e6e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8006e72:	682a      	ldr	r2, [r5, #0]
 8006e74:	686b      	ldr	r3, [r5, #4]
 8006e76:	3201      	adds	r2, #1
 8006e78:	602a      	str	r2, [r5, #0]
 8006e7a:	68a2      	ldr	r2, [r4, #8]
 8006e7c:	3b01      	subs	r3, #1
 8006e7e:	3a01      	subs	r2, #1
 8006e80:	606b      	str	r3, [r5, #4]
 8006e82:	3701      	adds	r7, #1
 8006e84:	60a2      	str	r2, [r4, #8]
 8006e86:	b142      	cbz	r2, 8006e9a <_scanf_chars+0x8e>
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	dcd7      	bgt.n	8006e3c <_scanf_chars+0x30>
 8006e8c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006e90:	4629      	mov	r1, r5
 8006e92:	4640      	mov	r0, r8
 8006e94:	4798      	blx	r3
 8006e96:	2800      	cmp	r0, #0
 8006e98:	d0d0      	beq.n	8006e3c <_scanf_chars+0x30>
 8006e9a:	6823      	ldr	r3, [r4, #0]
 8006e9c:	f013 0310 	ands.w	r3, r3, #16
 8006ea0:	d105      	bne.n	8006eae <_scanf_chars+0xa2>
 8006ea2:	68e2      	ldr	r2, [r4, #12]
 8006ea4:	3201      	adds	r2, #1
 8006ea6:	60e2      	str	r2, [r4, #12]
 8006ea8:	69a2      	ldr	r2, [r4, #24]
 8006eaa:	b102      	cbz	r2, 8006eae <_scanf_chars+0xa2>
 8006eac:	7033      	strb	r3, [r6, #0]
 8006eae:	6923      	ldr	r3, [r4, #16]
 8006eb0:	443b      	add	r3, r7
 8006eb2:	6123      	str	r3, [r4, #16]
 8006eb4:	2000      	movs	r0, #0
 8006eb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006eba:	bf00      	nop
 8006ebc:	080074ac 	.word	0x080074ac

08006ec0 <_scanf_i>:
 8006ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ec4:	4698      	mov	r8, r3
 8006ec6:	4b74      	ldr	r3, [pc, #464]	@ (8007098 <_scanf_i+0x1d8>)
 8006ec8:	460c      	mov	r4, r1
 8006eca:	4682      	mov	sl, r0
 8006ecc:	4616      	mov	r6, r2
 8006ece:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006ed2:	b087      	sub	sp, #28
 8006ed4:	ab03      	add	r3, sp, #12
 8006ed6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006eda:	4b70      	ldr	r3, [pc, #448]	@ (800709c <_scanf_i+0x1dc>)
 8006edc:	69a1      	ldr	r1, [r4, #24]
 8006ede:	4a70      	ldr	r2, [pc, #448]	@ (80070a0 <_scanf_i+0x1e0>)
 8006ee0:	2903      	cmp	r1, #3
 8006ee2:	bf08      	it	eq
 8006ee4:	461a      	moveq	r2, r3
 8006ee6:	68a3      	ldr	r3, [r4, #8]
 8006ee8:	9201      	str	r2, [sp, #4]
 8006eea:	1e5a      	subs	r2, r3, #1
 8006eec:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006ef0:	bf88      	it	hi
 8006ef2:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006ef6:	4627      	mov	r7, r4
 8006ef8:	bf82      	ittt	hi
 8006efa:	eb03 0905 	addhi.w	r9, r3, r5
 8006efe:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006f02:	60a3      	strhi	r3, [r4, #8]
 8006f04:	f857 3b1c 	ldr.w	r3, [r7], #28
 8006f08:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8006f0c:	bf98      	it	ls
 8006f0e:	f04f 0900 	movls.w	r9, #0
 8006f12:	6023      	str	r3, [r4, #0]
 8006f14:	463d      	mov	r5, r7
 8006f16:	f04f 0b00 	mov.w	fp, #0
 8006f1a:	6831      	ldr	r1, [r6, #0]
 8006f1c:	ab03      	add	r3, sp, #12
 8006f1e:	7809      	ldrb	r1, [r1, #0]
 8006f20:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8006f24:	2202      	movs	r2, #2
 8006f26:	f7f9 f983 	bl	8000230 <memchr>
 8006f2a:	b328      	cbz	r0, 8006f78 <_scanf_i+0xb8>
 8006f2c:	f1bb 0f01 	cmp.w	fp, #1
 8006f30:	d159      	bne.n	8006fe6 <_scanf_i+0x126>
 8006f32:	6862      	ldr	r2, [r4, #4]
 8006f34:	b92a      	cbnz	r2, 8006f42 <_scanf_i+0x82>
 8006f36:	6822      	ldr	r2, [r4, #0]
 8006f38:	2108      	movs	r1, #8
 8006f3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f3e:	6061      	str	r1, [r4, #4]
 8006f40:	6022      	str	r2, [r4, #0]
 8006f42:	6822      	ldr	r2, [r4, #0]
 8006f44:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8006f48:	6022      	str	r2, [r4, #0]
 8006f4a:	68a2      	ldr	r2, [r4, #8]
 8006f4c:	1e51      	subs	r1, r2, #1
 8006f4e:	60a1      	str	r1, [r4, #8]
 8006f50:	b192      	cbz	r2, 8006f78 <_scanf_i+0xb8>
 8006f52:	6832      	ldr	r2, [r6, #0]
 8006f54:	1c51      	adds	r1, r2, #1
 8006f56:	6031      	str	r1, [r6, #0]
 8006f58:	7812      	ldrb	r2, [r2, #0]
 8006f5a:	f805 2b01 	strb.w	r2, [r5], #1
 8006f5e:	6872      	ldr	r2, [r6, #4]
 8006f60:	3a01      	subs	r2, #1
 8006f62:	2a00      	cmp	r2, #0
 8006f64:	6072      	str	r2, [r6, #4]
 8006f66:	dc07      	bgt.n	8006f78 <_scanf_i+0xb8>
 8006f68:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8006f6c:	4631      	mov	r1, r6
 8006f6e:	4650      	mov	r0, sl
 8006f70:	4790      	blx	r2
 8006f72:	2800      	cmp	r0, #0
 8006f74:	f040 8085 	bne.w	8007082 <_scanf_i+0x1c2>
 8006f78:	f10b 0b01 	add.w	fp, fp, #1
 8006f7c:	f1bb 0f03 	cmp.w	fp, #3
 8006f80:	d1cb      	bne.n	8006f1a <_scanf_i+0x5a>
 8006f82:	6863      	ldr	r3, [r4, #4]
 8006f84:	b90b      	cbnz	r3, 8006f8a <_scanf_i+0xca>
 8006f86:	230a      	movs	r3, #10
 8006f88:	6063      	str	r3, [r4, #4]
 8006f8a:	6863      	ldr	r3, [r4, #4]
 8006f8c:	4945      	ldr	r1, [pc, #276]	@ (80070a4 <_scanf_i+0x1e4>)
 8006f8e:	6960      	ldr	r0, [r4, #20]
 8006f90:	1ac9      	subs	r1, r1, r3
 8006f92:	f000 f889 	bl	80070a8 <__sccl>
 8006f96:	f04f 0b00 	mov.w	fp, #0
 8006f9a:	68a3      	ldr	r3, [r4, #8]
 8006f9c:	6822      	ldr	r2, [r4, #0]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d03d      	beq.n	800701e <_scanf_i+0x15e>
 8006fa2:	6831      	ldr	r1, [r6, #0]
 8006fa4:	6960      	ldr	r0, [r4, #20]
 8006fa6:	f891 c000 	ldrb.w	ip, [r1]
 8006faa:	f810 000c 	ldrb.w	r0, [r0, ip]
 8006fae:	2800      	cmp	r0, #0
 8006fb0:	d035      	beq.n	800701e <_scanf_i+0x15e>
 8006fb2:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8006fb6:	d124      	bne.n	8007002 <_scanf_i+0x142>
 8006fb8:	0510      	lsls	r0, r2, #20
 8006fba:	d522      	bpl.n	8007002 <_scanf_i+0x142>
 8006fbc:	f10b 0b01 	add.w	fp, fp, #1
 8006fc0:	f1b9 0f00 	cmp.w	r9, #0
 8006fc4:	d003      	beq.n	8006fce <_scanf_i+0x10e>
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	f109 39ff 	add.w	r9, r9, #4294967295
 8006fcc:	60a3      	str	r3, [r4, #8]
 8006fce:	6873      	ldr	r3, [r6, #4]
 8006fd0:	3b01      	subs	r3, #1
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	6073      	str	r3, [r6, #4]
 8006fd6:	dd1b      	ble.n	8007010 <_scanf_i+0x150>
 8006fd8:	6833      	ldr	r3, [r6, #0]
 8006fda:	3301      	adds	r3, #1
 8006fdc:	6033      	str	r3, [r6, #0]
 8006fde:	68a3      	ldr	r3, [r4, #8]
 8006fe0:	3b01      	subs	r3, #1
 8006fe2:	60a3      	str	r3, [r4, #8]
 8006fe4:	e7d9      	b.n	8006f9a <_scanf_i+0xda>
 8006fe6:	f1bb 0f02 	cmp.w	fp, #2
 8006fea:	d1ae      	bne.n	8006f4a <_scanf_i+0x8a>
 8006fec:	6822      	ldr	r2, [r4, #0]
 8006fee:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8006ff2:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8006ff6:	d1bf      	bne.n	8006f78 <_scanf_i+0xb8>
 8006ff8:	2110      	movs	r1, #16
 8006ffa:	6061      	str	r1, [r4, #4]
 8006ffc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007000:	e7a2      	b.n	8006f48 <_scanf_i+0x88>
 8007002:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8007006:	6022      	str	r2, [r4, #0]
 8007008:	780b      	ldrb	r3, [r1, #0]
 800700a:	f805 3b01 	strb.w	r3, [r5], #1
 800700e:	e7de      	b.n	8006fce <_scanf_i+0x10e>
 8007010:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007014:	4631      	mov	r1, r6
 8007016:	4650      	mov	r0, sl
 8007018:	4798      	blx	r3
 800701a:	2800      	cmp	r0, #0
 800701c:	d0df      	beq.n	8006fde <_scanf_i+0x11e>
 800701e:	6823      	ldr	r3, [r4, #0]
 8007020:	05d9      	lsls	r1, r3, #23
 8007022:	d50d      	bpl.n	8007040 <_scanf_i+0x180>
 8007024:	42bd      	cmp	r5, r7
 8007026:	d909      	bls.n	800703c <_scanf_i+0x17c>
 8007028:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800702c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007030:	4632      	mov	r2, r6
 8007032:	4650      	mov	r0, sl
 8007034:	4798      	blx	r3
 8007036:	f105 39ff 	add.w	r9, r5, #4294967295
 800703a:	464d      	mov	r5, r9
 800703c:	42bd      	cmp	r5, r7
 800703e:	d028      	beq.n	8007092 <_scanf_i+0x1d2>
 8007040:	6822      	ldr	r2, [r4, #0]
 8007042:	f012 0210 	ands.w	r2, r2, #16
 8007046:	d113      	bne.n	8007070 <_scanf_i+0x1b0>
 8007048:	702a      	strb	r2, [r5, #0]
 800704a:	6863      	ldr	r3, [r4, #4]
 800704c:	9e01      	ldr	r6, [sp, #4]
 800704e:	4639      	mov	r1, r7
 8007050:	4650      	mov	r0, sl
 8007052:	47b0      	blx	r6
 8007054:	f8d8 3000 	ldr.w	r3, [r8]
 8007058:	6821      	ldr	r1, [r4, #0]
 800705a:	1d1a      	adds	r2, r3, #4
 800705c:	f8c8 2000 	str.w	r2, [r8]
 8007060:	f011 0f20 	tst.w	r1, #32
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	d00f      	beq.n	8007088 <_scanf_i+0x1c8>
 8007068:	6018      	str	r0, [r3, #0]
 800706a:	68e3      	ldr	r3, [r4, #12]
 800706c:	3301      	adds	r3, #1
 800706e:	60e3      	str	r3, [r4, #12]
 8007070:	6923      	ldr	r3, [r4, #16]
 8007072:	1bed      	subs	r5, r5, r7
 8007074:	445d      	add	r5, fp
 8007076:	442b      	add	r3, r5
 8007078:	6123      	str	r3, [r4, #16]
 800707a:	2000      	movs	r0, #0
 800707c:	b007      	add	sp, #28
 800707e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007082:	f04f 0b00 	mov.w	fp, #0
 8007086:	e7ca      	b.n	800701e <_scanf_i+0x15e>
 8007088:	07ca      	lsls	r2, r1, #31
 800708a:	bf4c      	ite	mi
 800708c:	8018      	strhmi	r0, [r3, #0]
 800708e:	6018      	strpl	r0, [r3, #0]
 8007090:	e7eb      	b.n	800706a <_scanf_i+0x1aa>
 8007092:	2001      	movs	r0, #1
 8007094:	e7f2      	b.n	800707c <_scanf_i+0x1bc>
 8007096:	bf00      	nop
 8007098:	08007440 	.word	0x08007440
 800709c:	0800731d 	.word	0x0800731d
 80070a0:	080073fd 	.word	0x080073fd
 80070a4:	080074a0 	.word	0x080074a0

080070a8 <__sccl>:
 80070a8:	b570      	push	{r4, r5, r6, lr}
 80070aa:	780b      	ldrb	r3, [r1, #0]
 80070ac:	4604      	mov	r4, r0
 80070ae:	2b5e      	cmp	r3, #94	@ 0x5e
 80070b0:	bf0b      	itete	eq
 80070b2:	784b      	ldrbeq	r3, [r1, #1]
 80070b4:	1c4a      	addne	r2, r1, #1
 80070b6:	1c8a      	addeq	r2, r1, #2
 80070b8:	2100      	movne	r1, #0
 80070ba:	bf08      	it	eq
 80070bc:	2101      	moveq	r1, #1
 80070be:	3801      	subs	r0, #1
 80070c0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80070c4:	f800 1f01 	strb.w	r1, [r0, #1]!
 80070c8:	42a8      	cmp	r0, r5
 80070ca:	d1fb      	bne.n	80070c4 <__sccl+0x1c>
 80070cc:	b90b      	cbnz	r3, 80070d2 <__sccl+0x2a>
 80070ce:	1e50      	subs	r0, r2, #1
 80070d0:	bd70      	pop	{r4, r5, r6, pc}
 80070d2:	f081 0101 	eor.w	r1, r1, #1
 80070d6:	54e1      	strb	r1, [r4, r3]
 80070d8:	4610      	mov	r0, r2
 80070da:	4602      	mov	r2, r0
 80070dc:	f812 5b01 	ldrb.w	r5, [r2], #1
 80070e0:	2d2d      	cmp	r5, #45	@ 0x2d
 80070e2:	d005      	beq.n	80070f0 <__sccl+0x48>
 80070e4:	2d5d      	cmp	r5, #93	@ 0x5d
 80070e6:	d016      	beq.n	8007116 <__sccl+0x6e>
 80070e8:	2d00      	cmp	r5, #0
 80070ea:	d0f1      	beq.n	80070d0 <__sccl+0x28>
 80070ec:	462b      	mov	r3, r5
 80070ee:	e7f2      	b.n	80070d6 <__sccl+0x2e>
 80070f0:	7846      	ldrb	r6, [r0, #1]
 80070f2:	2e5d      	cmp	r6, #93	@ 0x5d
 80070f4:	d0fa      	beq.n	80070ec <__sccl+0x44>
 80070f6:	42b3      	cmp	r3, r6
 80070f8:	dcf8      	bgt.n	80070ec <__sccl+0x44>
 80070fa:	3002      	adds	r0, #2
 80070fc:	461a      	mov	r2, r3
 80070fe:	3201      	adds	r2, #1
 8007100:	4296      	cmp	r6, r2
 8007102:	54a1      	strb	r1, [r4, r2]
 8007104:	dcfb      	bgt.n	80070fe <__sccl+0x56>
 8007106:	1af2      	subs	r2, r6, r3
 8007108:	3a01      	subs	r2, #1
 800710a:	1c5d      	adds	r5, r3, #1
 800710c:	42b3      	cmp	r3, r6
 800710e:	bfa8      	it	ge
 8007110:	2200      	movge	r2, #0
 8007112:	18ab      	adds	r3, r5, r2
 8007114:	e7e1      	b.n	80070da <__sccl+0x32>
 8007116:	4610      	mov	r0, r2
 8007118:	e7da      	b.n	80070d0 <__sccl+0x28>

0800711a <__submore>:
 800711a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800711e:	460c      	mov	r4, r1
 8007120:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8007122:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007126:	4299      	cmp	r1, r3
 8007128:	d11d      	bne.n	8007166 <__submore+0x4c>
 800712a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800712e:	f7ff fc15 	bl	800695c <_malloc_r>
 8007132:	b918      	cbnz	r0, 800713c <__submore+0x22>
 8007134:	f04f 30ff 	mov.w	r0, #4294967295
 8007138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800713c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007140:	63a3      	str	r3, [r4, #56]	@ 0x38
 8007142:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8007146:	6360      	str	r0, [r4, #52]	@ 0x34
 8007148:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800714c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007150:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8007154:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007158:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800715c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8007160:	6020      	str	r0, [r4, #0]
 8007162:	2000      	movs	r0, #0
 8007164:	e7e8      	b.n	8007138 <__submore+0x1e>
 8007166:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8007168:	0077      	lsls	r7, r6, #1
 800716a:	463a      	mov	r2, r7
 800716c:	f000 f82e 	bl	80071cc <_realloc_r>
 8007170:	4605      	mov	r5, r0
 8007172:	2800      	cmp	r0, #0
 8007174:	d0de      	beq.n	8007134 <__submore+0x1a>
 8007176:	eb00 0806 	add.w	r8, r0, r6
 800717a:	4601      	mov	r1, r0
 800717c:	4632      	mov	r2, r6
 800717e:	4640      	mov	r0, r8
 8007180:	f000 f816 	bl	80071b0 <memcpy>
 8007184:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8007188:	f8c4 8000 	str.w	r8, [r4]
 800718c:	e7e9      	b.n	8007162 <__submore+0x48>
	...

08007190 <_sbrk_r>:
 8007190:	b538      	push	{r3, r4, r5, lr}
 8007192:	4d06      	ldr	r5, [pc, #24]	@ (80071ac <_sbrk_r+0x1c>)
 8007194:	2300      	movs	r3, #0
 8007196:	4604      	mov	r4, r0
 8007198:	4608      	mov	r0, r1
 800719a:	602b      	str	r3, [r5, #0]
 800719c:	f7fa f91c 	bl	80013d8 <_sbrk>
 80071a0:	1c43      	adds	r3, r0, #1
 80071a2:	d102      	bne.n	80071aa <_sbrk_r+0x1a>
 80071a4:	682b      	ldr	r3, [r5, #0]
 80071a6:	b103      	cbz	r3, 80071aa <_sbrk_r+0x1a>
 80071a8:	6023      	str	r3, [r4, #0]
 80071aa:	bd38      	pop	{r3, r4, r5, pc}
 80071ac:	20000448 	.word	0x20000448

080071b0 <memcpy>:
 80071b0:	440a      	add	r2, r1
 80071b2:	4291      	cmp	r1, r2
 80071b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80071b8:	d100      	bne.n	80071bc <memcpy+0xc>
 80071ba:	4770      	bx	lr
 80071bc:	b510      	push	{r4, lr}
 80071be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071c6:	4291      	cmp	r1, r2
 80071c8:	d1f9      	bne.n	80071be <memcpy+0xe>
 80071ca:	bd10      	pop	{r4, pc}

080071cc <_realloc_r>:
 80071cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071d0:	4680      	mov	r8, r0
 80071d2:	4615      	mov	r5, r2
 80071d4:	460c      	mov	r4, r1
 80071d6:	b921      	cbnz	r1, 80071e2 <_realloc_r+0x16>
 80071d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071dc:	4611      	mov	r1, r2
 80071de:	f7ff bbbd 	b.w	800695c <_malloc_r>
 80071e2:	b92a      	cbnz	r2, 80071f0 <_realloc_r+0x24>
 80071e4:	f7ff fb4e 	bl	8006884 <_free_r>
 80071e8:	2400      	movs	r4, #0
 80071ea:	4620      	mov	r0, r4
 80071ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071f0:	f000 f906 	bl	8007400 <_malloc_usable_size_r>
 80071f4:	4285      	cmp	r5, r0
 80071f6:	4606      	mov	r6, r0
 80071f8:	d802      	bhi.n	8007200 <_realloc_r+0x34>
 80071fa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80071fe:	d8f4      	bhi.n	80071ea <_realloc_r+0x1e>
 8007200:	4629      	mov	r1, r5
 8007202:	4640      	mov	r0, r8
 8007204:	f7ff fbaa 	bl	800695c <_malloc_r>
 8007208:	4607      	mov	r7, r0
 800720a:	2800      	cmp	r0, #0
 800720c:	d0ec      	beq.n	80071e8 <_realloc_r+0x1c>
 800720e:	42b5      	cmp	r5, r6
 8007210:	462a      	mov	r2, r5
 8007212:	4621      	mov	r1, r4
 8007214:	bf28      	it	cs
 8007216:	4632      	movcs	r2, r6
 8007218:	f7ff ffca 	bl	80071b0 <memcpy>
 800721c:	4621      	mov	r1, r4
 800721e:	4640      	mov	r0, r8
 8007220:	f7ff fb30 	bl	8006884 <_free_r>
 8007224:	463c      	mov	r4, r7
 8007226:	e7e0      	b.n	80071ea <_realloc_r+0x1e>

08007228 <_strtol_l.constprop.0>:
 8007228:	2b24      	cmp	r3, #36	@ 0x24
 800722a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800722e:	4686      	mov	lr, r0
 8007230:	4690      	mov	r8, r2
 8007232:	d801      	bhi.n	8007238 <_strtol_l.constprop.0+0x10>
 8007234:	2b01      	cmp	r3, #1
 8007236:	d106      	bne.n	8007246 <_strtol_l.constprop.0+0x1e>
 8007238:	f7ff faf8 	bl	800682c <__errno>
 800723c:	2316      	movs	r3, #22
 800723e:	6003      	str	r3, [r0, #0]
 8007240:	2000      	movs	r0, #0
 8007242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007246:	4834      	ldr	r0, [pc, #208]	@ (8007318 <_strtol_l.constprop.0+0xf0>)
 8007248:	460d      	mov	r5, r1
 800724a:	462a      	mov	r2, r5
 800724c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007250:	5d06      	ldrb	r6, [r0, r4]
 8007252:	f016 0608 	ands.w	r6, r6, #8
 8007256:	d1f8      	bne.n	800724a <_strtol_l.constprop.0+0x22>
 8007258:	2c2d      	cmp	r4, #45	@ 0x2d
 800725a:	d12d      	bne.n	80072b8 <_strtol_l.constprop.0+0x90>
 800725c:	782c      	ldrb	r4, [r5, #0]
 800725e:	2601      	movs	r6, #1
 8007260:	1c95      	adds	r5, r2, #2
 8007262:	f033 0210 	bics.w	r2, r3, #16
 8007266:	d109      	bne.n	800727c <_strtol_l.constprop.0+0x54>
 8007268:	2c30      	cmp	r4, #48	@ 0x30
 800726a:	d12a      	bne.n	80072c2 <_strtol_l.constprop.0+0x9a>
 800726c:	782a      	ldrb	r2, [r5, #0]
 800726e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007272:	2a58      	cmp	r2, #88	@ 0x58
 8007274:	d125      	bne.n	80072c2 <_strtol_l.constprop.0+0x9a>
 8007276:	786c      	ldrb	r4, [r5, #1]
 8007278:	2310      	movs	r3, #16
 800727a:	3502      	adds	r5, #2
 800727c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007280:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007284:	2200      	movs	r2, #0
 8007286:	fbbc f9f3 	udiv	r9, ip, r3
 800728a:	4610      	mov	r0, r2
 800728c:	fb03 ca19 	mls	sl, r3, r9, ip
 8007290:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007294:	2f09      	cmp	r7, #9
 8007296:	d81b      	bhi.n	80072d0 <_strtol_l.constprop.0+0xa8>
 8007298:	463c      	mov	r4, r7
 800729a:	42a3      	cmp	r3, r4
 800729c:	dd27      	ble.n	80072ee <_strtol_l.constprop.0+0xc6>
 800729e:	1c57      	adds	r7, r2, #1
 80072a0:	d007      	beq.n	80072b2 <_strtol_l.constprop.0+0x8a>
 80072a2:	4581      	cmp	r9, r0
 80072a4:	d320      	bcc.n	80072e8 <_strtol_l.constprop.0+0xc0>
 80072a6:	d101      	bne.n	80072ac <_strtol_l.constprop.0+0x84>
 80072a8:	45a2      	cmp	sl, r4
 80072aa:	db1d      	blt.n	80072e8 <_strtol_l.constprop.0+0xc0>
 80072ac:	fb00 4003 	mla	r0, r0, r3, r4
 80072b0:	2201      	movs	r2, #1
 80072b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80072b6:	e7eb      	b.n	8007290 <_strtol_l.constprop.0+0x68>
 80072b8:	2c2b      	cmp	r4, #43	@ 0x2b
 80072ba:	bf04      	itt	eq
 80072bc:	782c      	ldrbeq	r4, [r5, #0]
 80072be:	1c95      	addeq	r5, r2, #2
 80072c0:	e7cf      	b.n	8007262 <_strtol_l.constprop.0+0x3a>
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1da      	bne.n	800727c <_strtol_l.constprop.0+0x54>
 80072c6:	2c30      	cmp	r4, #48	@ 0x30
 80072c8:	bf0c      	ite	eq
 80072ca:	2308      	moveq	r3, #8
 80072cc:	230a      	movne	r3, #10
 80072ce:	e7d5      	b.n	800727c <_strtol_l.constprop.0+0x54>
 80072d0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80072d4:	2f19      	cmp	r7, #25
 80072d6:	d801      	bhi.n	80072dc <_strtol_l.constprop.0+0xb4>
 80072d8:	3c37      	subs	r4, #55	@ 0x37
 80072da:	e7de      	b.n	800729a <_strtol_l.constprop.0+0x72>
 80072dc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80072e0:	2f19      	cmp	r7, #25
 80072e2:	d804      	bhi.n	80072ee <_strtol_l.constprop.0+0xc6>
 80072e4:	3c57      	subs	r4, #87	@ 0x57
 80072e6:	e7d8      	b.n	800729a <_strtol_l.constprop.0+0x72>
 80072e8:	f04f 32ff 	mov.w	r2, #4294967295
 80072ec:	e7e1      	b.n	80072b2 <_strtol_l.constprop.0+0x8a>
 80072ee:	1c53      	adds	r3, r2, #1
 80072f0:	d108      	bne.n	8007304 <_strtol_l.constprop.0+0xdc>
 80072f2:	2322      	movs	r3, #34	@ 0x22
 80072f4:	f8ce 3000 	str.w	r3, [lr]
 80072f8:	4660      	mov	r0, ip
 80072fa:	f1b8 0f00 	cmp.w	r8, #0
 80072fe:	d0a0      	beq.n	8007242 <_strtol_l.constprop.0+0x1a>
 8007300:	1e69      	subs	r1, r5, #1
 8007302:	e006      	b.n	8007312 <_strtol_l.constprop.0+0xea>
 8007304:	b106      	cbz	r6, 8007308 <_strtol_l.constprop.0+0xe0>
 8007306:	4240      	negs	r0, r0
 8007308:	f1b8 0f00 	cmp.w	r8, #0
 800730c:	d099      	beq.n	8007242 <_strtol_l.constprop.0+0x1a>
 800730e:	2a00      	cmp	r2, #0
 8007310:	d1f6      	bne.n	8007300 <_strtol_l.constprop.0+0xd8>
 8007312:	f8c8 1000 	str.w	r1, [r8]
 8007316:	e794      	b.n	8007242 <_strtol_l.constprop.0+0x1a>
 8007318:	080074ac 	.word	0x080074ac

0800731c <_strtol_r>:
 800731c:	f7ff bf84 	b.w	8007228 <_strtol_l.constprop.0>

08007320 <_strtoul_l.constprop.0>:
 8007320:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007324:	4e34      	ldr	r6, [pc, #208]	@ (80073f8 <_strtoul_l.constprop.0+0xd8>)
 8007326:	4686      	mov	lr, r0
 8007328:	460d      	mov	r5, r1
 800732a:	4628      	mov	r0, r5
 800732c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007330:	5d37      	ldrb	r7, [r6, r4]
 8007332:	f017 0708 	ands.w	r7, r7, #8
 8007336:	d1f8      	bne.n	800732a <_strtoul_l.constprop.0+0xa>
 8007338:	2c2d      	cmp	r4, #45	@ 0x2d
 800733a:	d12f      	bne.n	800739c <_strtoul_l.constprop.0+0x7c>
 800733c:	782c      	ldrb	r4, [r5, #0]
 800733e:	2701      	movs	r7, #1
 8007340:	1c85      	adds	r5, r0, #2
 8007342:	f033 0010 	bics.w	r0, r3, #16
 8007346:	d109      	bne.n	800735c <_strtoul_l.constprop.0+0x3c>
 8007348:	2c30      	cmp	r4, #48	@ 0x30
 800734a:	d12c      	bne.n	80073a6 <_strtoul_l.constprop.0+0x86>
 800734c:	7828      	ldrb	r0, [r5, #0]
 800734e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8007352:	2858      	cmp	r0, #88	@ 0x58
 8007354:	d127      	bne.n	80073a6 <_strtoul_l.constprop.0+0x86>
 8007356:	786c      	ldrb	r4, [r5, #1]
 8007358:	2310      	movs	r3, #16
 800735a:	3502      	adds	r5, #2
 800735c:	f04f 38ff 	mov.w	r8, #4294967295
 8007360:	2600      	movs	r6, #0
 8007362:	fbb8 f8f3 	udiv	r8, r8, r3
 8007366:	fb03 f908 	mul.w	r9, r3, r8
 800736a:	ea6f 0909 	mvn.w	r9, r9
 800736e:	4630      	mov	r0, r6
 8007370:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8007374:	f1bc 0f09 	cmp.w	ip, #9
 8007378:	d81c      	bhi.n	80073b4 <_strtoul_l.constprop.0+0x94>
 800737a:	4664      	mov	r4, ip
 800737c:	42a3      	cmp	r3, r4
 800737e:	dd2a      	ble.n	80073d6 <_strtoul_l.constprop.0+0xb6>
 8007380:	f1b6 3fff 	cmp.w	r6, #4294967295
 8007384:	d007      	beq.n	8007396 <_strtoul_l.constprop.0+0x76>
 8007386:	4580      	cmp	r8, r0
 8007388:	d322      	bcc.n	80073d0 <_strtoul_l.constprop.0+0xb0>
 800738a:	d101      	bne.n	8007390 <_strtoul_l.constprop.0+0x70>
 800738c:	45a1      	cmp	r9, r4
 800738e:	db1f      	blt.n	80073d0 <_strtoul_l.constprop.0+0xb0>
 8007390:	fb00 4003 	mla	r0, r0, r3, r4
 8007394:	2601      	movs	r6, #1
 8007396:	f815 4b01 	ldrb.w	r4, [r5], #1
 800739a:	e7e9      	b.n	8007370 <_strtoul_l.constprop.0+0x50>
 800739c:	2c2b      	cmp	r4, #43	@ 0x2b
 800739e:	bf04      	itt	eq
 80073a0:	782c      	ldrbeq	r4, [r5, #0]
 80073a2:	1c85      	addeq	r5, r0, #2
 80073a4:	e7cd      	b.n	8007342 <_strtoul_l.constprop.0+0x22>
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d1d8      	bne.n	800735c <_strtoul_l.constprop.0+0x3c>
 80073aa:	2c30      	cmp	r4, #48	@ 0x30
 80073ac:	bf0c      	ite	eq
 80073ae:	2308      	moveq	r3, #8
 80073b0:	230a      	movne	r3, #10
 80073b2:	e7d3      	b.n	800735c <_strtoul_l.constprop.0+0x3c>
 80073b4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80073b8:	f1bc 0f19 	cmp.w	ip, #25
 80073bc:	d801      	bhi.n	80073c2 <_strtoul_l.constprop.0+0xa2>
 80073be:	3c37      	subs	r4, #55	@ 0x37
 80073c0:	e7dc      	b.n	800737c <_strtoul_l.constprop.0+0x5c>
 80073c2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80073c6:	f1bc 0f19 	cmp.w	ip, #25
 80073ca:	d804      	bhi.n	80073d6 <_strtoul_l.constprop.0+0xb6>
 80073cc:	3c57      	subs	r4, #87	@ 0x57
 80073ce:	e7d5      	b.n	800737c <_strtoul_l.constprop.0+0x5c>
 80073d0:	f04f 36ff 	mov.w	r6, #4294967295
 80073d4:	e7df      	b.n	8007396 <_strtoul_l.constprop.0+0x76>
 80073d6:	1c73      	adds	r3, r6, #1
 80073d8:	d106      	bne.n	80073e8 <_strtoul_l.constprop.0+0xc8>
 80073da:	2322      	movs	r3, #34	@ 0x22
 80073dc:	f8ce 3000 	str.w	r3, [lr]
 80073e0:	4630      	mov	r0, r6
 80073e2:	b932      	cbnz	r2, 80073f2 <_strtoul_l.constprop.0+0xd2>
 80073e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80073e8:	b107      	cbz	r7, 80073ec <_strtoul_l.constprop.0+0xcc>
 80073ea:	4240      	negs	r0, r0
 80073ec:	2a00      	cmp	r2, #0
 80073ee:	d0f9      	beq.n	80073e4 <_strtoul_l.constprop.0+0xc4>
 80073f0:	b106      	cbz	r6, 80073f4 <_strtoul_l.constprop.0+0xd4>
 80073f2:	1e69      	subs	r1, r5, #1
 80073f4:	6011      	str	r1, [r2, #0]
 80073f6:	e7f5      	b.n	80073e4 <_strtoul_l.constprop.0+0xc4>
 80073f8:	080074ac 	.word	0x080074ac

080073fc <_strtoul_r>:
 80073fc:	f7ff bf90 	b.w	8007320 <_strtoul_l.constprop.0>

08007400 <_malloc_usable_size_r>:
 8007400:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007404:	1f18      	subs	r0, r3, #4
 8007406:	2b00      	cmp	r3, #0
 8007408:	bfbc      	itt	lt
 800740a:	580b      	ldrlt	r3, [r1, r0]
 800740c:	18c0      	addlt	r0, r0, r3
 800740e:	4770      	bx	lr

08007410 <_init>:
 8007410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007412:	bf00      	nop
 8007414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007416:	bc08      	pop	{r3}
 8007418:	469e      	mov	lr, r3
 800741a:	4770      	bx	lr

0800741c <_fini>:
 800741c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800741e:	bf00      	nop
 8007420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007422:	bc08      	pop	{r3}
 8007424:	469e      	mov	lr, r3
 8007426:	4770      	bx	lr
