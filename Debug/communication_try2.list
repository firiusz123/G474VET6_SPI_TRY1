
communication_try2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007970  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  08007b50  08007b50  00008b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d0c  08007d0c  0000907c  2**0
                  CONTENTS
  4 .ARM          00000008  08007d0c  08007d0c  00008d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d14  08007d14  0000907c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d14  08007d14  00008d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007d18  08007d18  00008d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08007d1c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000404  2000007c  08007d98  0000907c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000480  08007d98  00009480  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000907c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016605  00000000  00000000  000090ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002da3  00000000  00000000  0001f6b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001308  00000000  00000000  00022458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000edc  00000000  00000000  00023760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002750a  00000000  00000000  0002463c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000177a3  00000000  00000000  0004bb46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe22b  00000000  00000000  000632e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00161514  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000579c  00000000  00000000  00161558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00166cf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000007c 	.word	0x2000007c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007b38 	.word	0x08007b38

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000080 	.word	0x20000080
 800021c:	08007b38 	.word	0x08007b38

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <command_checker>:

int8_t posABS = 0;


char* command_checker(uint8_t* buffer)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
    int8_t ending_condition = 1;
 80005e8:	2301      	movs	r3, #1
 80005ea:	73fb      	strb	r3, [r7, #15]
    int8_t index = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	73bb      	strb	r3, [r7, #14]

    while (ending_condition)
 80005f0:	e00f      	b.n	8000612 <command_checker+0x32>
    {
        if (buffer[index] == '#')
 80005f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005f6:	687a      	ldr	r2, [r7, #4]
 80005f8:	4413      	add	r3, r2
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b23      	cmp	r3, #35	@ 0x23
 80005fe:	d102      	bne.n	8000606 <command_checker+0x26>
        {
            ending_condition = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	73fb      	strb	r3, [r7, #15]
 8000604:	e005      	b.n	8000612 <command_checker+0x32>
        }
        else
        {
            index++;
 8000606:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800060a:	b2db      	uxtb	r3, r3
 800060c:	3301      	adds	r3, #1
 800060e:	b2db      	uxtb	r3, r3
 8000610:	73bb      	strb	r3, [r7, #14]
    while (ending_condition)
 8000612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d1eb      	bne.n	80005f2 <command_checker+0x12>
        }

    }

    // Allocate memory for the command string with an extra byte for the null terminator
    char* command = (char*)malloc(index + 1);
 800061a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800061e:	3301      	adds	r3, #1
 8000620:	4618      	mov	r0, r3
 8000622:	f006 fc3f 	bl	8006ea4 <malloc>
 8000626:	4603      	mov	r3, r0
 8000628:	60bb      	str	r3, [r7, #8]
    if (command == NULL)
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d101      	bne.n	8000634 <command_checker+0x54>
    {
        return NULL;  // Allocation failed
 8000630:	2300      	movs	r3, #0
 8000632:	e00d      	b.n	8000650 <command_checker+0x70>
    }

    // Copy the command part from buffer to the newly allocated string
    strncpy(command, (char*)buffer, index);
 8000634:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000638:	461a      	mov	r2, r3
 800063a:	6879      	ldr	r1, [r7, #4]
 800063c:	68b8      	ldr	r0, [r7, #8]
 800063e:	f006 fd23 	bl	8007088 <strncpy>
    command[index] = '\0';  // Null-terminate the string
 8000642:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000646:	68ba      	ldr	r2, [r7, #8]
 8000648:	4413      	add	r3, r2
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]

    return command;
 800064e:	68bb      	ldr	r3, [r7, #8]
}
 8000650:	4618      	mov	r0, r3
 8000652:	3710      	adds	r7, #16
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <Uart_getter>:

char* Uart_getter(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
	int8_t ending_condition = 1 ;
 800065e:	2301      	movs	r3, #1
 8000660:	73fb      	strb	r3, [r7, #15]
	uint8_t recieved_letter ;
	int8_t index ;
	char* charbuffer = (char*)malloc(32);
 8000662:	2020      	movs	r0, #32
 8000664:	f006 fc1e 	bl	8006ea4 <malloc>
 8000668:	4603      	mov	r3, r0
 800066a:	60bb      	str	r3, [r7, #8]
	while(ending_condition)
 800066c:	e01e      	b.n	80006ac <Uart_getter+0x54>
	{
		HAL_UART_Receive(&huart4, &recieved_letter, 1,1000);
 800066e:	1df9      	adds	r1, r7, #7
 8000670:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000674:	2201      	movs	r2, #1
 8000676:	4812      	ldr	r0, [pc, #72]	@ (80006c0 <Uart_getter+0x68>)
 8000678:	f005 f98a 	bl	8005990 <HAL_UART_Receive>
		charbuffer[index]=(char)recieved_letter;
 800067c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000680:	68ba      	ldr	r2, [r7, #8]
 8000682:	4413      	add	r3, r2
 8000684:	79fa      	ldrb	r2, [r7, #7]
 8000686:	701a      	strb	r2, [r3, #0]
		if((char)recieved_letter =='$'){ending_condition = 0 ;}
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	2b24      	cmp	r3, #36	@ 0x24
 800068c:	d102      	bne.n	8000694 <Uart_getter+0x3c>
 800068e:	2300      	movs	r3, #0
 8000690:	73fb      	strb	r3, [r7, #15]
 8000692:	e005      	b.n	80006a0 <Uart_getter+0x48>
		else{index++;}
 8000694:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000698:	b2db      	uxtb	r3, r3
 800069a:	3301      	adds	r3, #1
 800069c:	b2db      	uxtb	r3, r3
 800069e:	73bb      	strb	r3, [r7, #14]
		if(index > 32-1){ending_condition = 0;}
 80006a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006a4:	2b1f      	cmp	r3, #31
 80006a6:	dd01      	ble.n	80006ac <Uart_getter+0x54>
 80006a8:	2300      	movs	r3, #0
 80006aa:	73fb      	strb	r3, [r7, #15]
	while(ending_condition)
 80006ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d1dc      	bne.n	800066e <Uart_getter+0x16>


	}

	return charbuffer;
 80006b4:	68bb      	ldr	r3, [r7, #8]





}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3710      	adds	r7, #16
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000204 	.word	0x20000204

080006c4 <SPI_Communication>:
void SPI_Communication(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b088      	sub	sp, #32
 80006c8:	af00      	add	r7, sp, #0
    int8_t index = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	77fb      	strb	r3, [r7, #31]
    uint8_t receivedData;
    uint8_t pinstate = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 80006ce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006d6:	f001 fc2d 	bl	8001f34 <HAL_GPIO_ReadPin>
 80006da:	4603      	mov	r3, r0
 80006dc:	77bb      	strb	r3, [r7, #30]


    if (!pinstate) {memset(RxBuffer, 0, sizeof(RxBuffer));}
 80006de:	7fbb      	ldrb	r3, [r7, #30]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	f040 80cb 	bne.w	800087c <SPI_Communication+0x1b8>
 80006e6:	2220      	movs	r2, #32
 80006e8:	2100      	movs	r1, #0
 80006ea:	4869      	ldr	r0, [pc, #420]	@ (8000890 <SPI_Communication+0x1cc>)
 80006ec:	f006 fcc4 	bl	8007078 <memset>

    while (!pinstate) {
 80006f0:	e0c4      	b.n	800087c <SPI_Communication+0x1b8>
        // Receive data from SPI
        HAL_SPI_Receive(&hspi1, &receivedData, 1, HAL_MAX_DELAY);
 80006f2:	f107 010f 	add.w	r1, r7, #15
 80006f6:	f04f 33ff 	mov.w	r3, #4294967295
 80006fa:	2201      	movs	r2, #1
 80006fc:	4865      	ldr	r0, [pc, #404]	@ (8000894 <SPI_Communication+0x1d0>)
 80006fe:	f002 fe99 	bl	8003434 <HAL_SPI_Receive>

        // Check for buffer overflow
        if (index < MAX_BUFFER_SIZE)
 8000702:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000706:	2b1f      	cmp	r3, #31
 8000708:	f300 80b0 	bgt.w	800086c <SPI_Communication+0x1a8>
        {
            // Store received data in buffer
            RxBuffer[index++] = (char)receivedData;
 800070c:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8000710:	b2d3      	uxtb	r3, r2
 8000712:	3301      	adds	r3, #1
 8000714:	b2db      	uxtb	r3, r3
 8000716:	77fb      	strb	r3, [r7, #31]
 8000718:	7bf9      	ldrb	r1, [r7, #15]
 800071a:	4b5d      	ldr	r3, [pc, #372]	@ (8000890 <SPI_Communication+0x1cc>)
 800071c:	5499      	strb	r1, [r3, r2]

            // Check if end of message
            if ((char)receivedData == END_OF_MESSAGE)
 800071e:	7bfb      	ldrb	r3, [r7, #15]
 8000720:	2b24      	cmp	r3, #36	@ 0x24
 8000722:	f040 80a3 	bne.w	800086c <SPI_Communication+0x1a8>
            {
            	char* command = command_checker(RxBuffer);
 8000726:	485a      	ldr	r0, [pc, #360]	@ (8000890 <SPI_Communication+0x1cc>)
 8000728:	f7ff ff5a 	bl	80005e0 <command_checker>
 800072c:	61b8      	str	r0, [r7, #24]

            	if(command == NULL){command = "MEM#ERR";}
 800072e:	69bb      	ldr	r3, [r7, #24]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d102      	bne.n	800073a <SPI_Communication+0x76>
 8000734:	4b58      	ldr	r3, [pc, #352]	@ (8000898 <SPI_Communication+0x1d4>)
 8000736:	61bb      	str	r3, [r7, #24]
 8000738:	e087      	b.n	800084a <SPI_Communication+0x186>

            	else if(strcmp(command, "HEAD") == 0)
 800073a:	4958      	ldr	r1, [pc, #352]	@ (800089c <SPI_Communication+0x1d8>)
 800073c:	69b8      	ldr	r0, [r7, #24]
 800073e:	f7ff fd6f 	bl	8000220 <strcmp>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d119      	bne.n	800077c <SPI_Communication+0xb8>
            	{
            		HAL_UART_Transmit(&huart5, (uint8_t *)RxBuffer, index, HAL_MAX_DELAY);
 8000748:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800074c:	b29a      	uxth	r2, r3
 800074e:	f04f 33ff 	mov.w	r3, #4294967295
 8000752:	494f      	ldr	r1, [pc, #316]	@ (8000890 <SPI_Communication+0x1cc>)
 8000754:	4852      	ldr	r0, [pc, #328]	@ (80008a0 <SPI_Communication+0x1dc>)
 8000756:	f005 f88d 	bl	8005874 <HAL_UART_Transmit>
            		memset(TxBuffer, '\0', sizeof(TxBuffer));
 800075a:	2220      	movs	r2, #32
 800075c:	2100      	movs	r1, #0
 800075e:	4851      	ldr	r0, [pc, #324]	@ (80008a4 <SPI_Communication+0x1e0>)
 8000760:	f006 fc8a 	bl	8007078 <memset>
            		command = Uart_getter();
 8000764:	f7ff ff78 	bl	8000658 <Uart_getter>
 8000768:	61b8      	str	r0, [r7, #24]

            		strncpy(TxBuffer, command, sizeof(TxBuffer) - 1);
 800076a:	221f      	movs	r2, #31
 800076c:	69b9      	ldr	r1, [r7, #24]
 800076e:	484d      	ldr	r0, [pc, #308]	@ (80008a4 <SPI_Communication+0x1e0>)
 8000770:	f006 fc8a 	bl	8007088 <strncpy>
            		free(command);
 8000774:	69b8      	ldr	r0, [r7, #24]
 8000776:	f006 fb9d 	bl	8006eb4 <free>
 800077a:	e066      	b.n	800084a <SPI_Communication+0x186>

            	}
            	else if(strcmp(command, "MAGNET") == 0)
 800077c:	494a      	ldr	r1, [pc, #296]	@ (80008a8 <SPI_Communication+0x1e4>)
 800077e:	69b8      	ldr	r0, [r7, #24]
 8000780:	f7ff fd4e 	bl	8000220 <strcmp>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d117      	bne.n	80007ba <SPI_Communication+0xf6>
            	{

            		HAL_UART_Transmit(&huart5, (uint8_t *)RxBuffer, strlen(RxBuffer), HAL_MAX_DELAY);
 800078a:	4841      	ldr	r0, [pc, #260]	@ (8000890 <SPI_Communication+0x1cc>)
 800078c:	f7ff fd52 	bl	8000234 <strlen>
 8000790:	4603      	mov	r3, r0
 8000792:	b29a      	uxth	r2, r3
 8000794:	f04f 33ff 	mov.w	r3, #4294967295
 8000798:	493d      	ldr	r1, [pc, #244]	@ (8000890 <SPI_Communication+0x1cc>)
 800079a:	4841      	ldr	r0, [pc, #260]	@ (80008a0 <SPI_Communication+0x1dc>)
 800079c:	f005 f86a 	bl	8005874 <HAL_UART_Transmit>
            		memset(TxBuffer, '\0', sizeof(TxBuffer));
 80007a0:	2220      	movs	r2, #32
 80007a2:	2100      	movs	r1, #0
 80007a4:	483f      	ldr	r0, [pc, #252]	@ (80008a4 <SPI_Communication+0x1e0>)
 80007a6:	f006 fc67 	bl	8007078 <memset>
            		char *str = "MAG#OK$";
 80007aa:	4b40      	ldr	r3, [pc, #256]	@ (80008ac <SPI_Communication+0x1e8>)
 80007ac:	613b      	str	r3, [r7, #16]
            		strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
 80007ae:	221f      	movs	r2, #31
 80007b0:	6939      	ldr	r1, [r7, #16]
 80007b2:	483c      	ldr	r0, [pc, #240]	@ (80008a4 <SPI_Communication+0x1e0>)
 80007b4:	f006 fc68 	bl	8007088 <strncpy>
 80007b8:	e047      	b.n	800084a <SPI_Communication+0x186>
            	}


            	else if(strcmp(command,"ROT")==0)
 80007ba:	493d      	ldr	r1, [pc, #244]	@ (80008b0 <SPI_Communication+0x1ec>)
 80007bc:	69b8      	ldr	r0, [r7, #24]
 80007be:	f7ff fd2f 	bl	8000220 <strcmp>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d118      	bne.n	80007fa <SPI_Communication+0x136>
            	{
            		    int number;
            		    sscanf(RxBuffer, "ROT#%d$", &number);
 80007c8:	f107 0308 	add.w	r3, r7, #8
 80007cc:	461a      	mov	r2, r3
 80007ce:	4939      	ldr	r1, [pc, #228]	@ (80008b4 <SPI_Communication+0x1f0>)
 80007d0:	482f      	ldr	r0, [pc, #188]	@ (8000890 <SPI_Communication+0x1cc>)
 80007d2:	f006 fc25 	bl	8007020 <siscanf>
            		    Motor_Steer(number);
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	b25b      	sxtb	r3, r3
 80007da:	4618      	mov	r0, r3
 80007dc:	f000 fbde 	bl	8000f9c <Motor_Steer>
            		memset(TxBuffer, '\0', sizeof(TxBuffer));
 80007e0:	2220      	movs	r2, #32
 80007e2:	2100      	movs	r1, #0
 80007e4:	482f      	ldr	r0, [pc, #188]	@ (80008a4 <SPI_Communication+0x1e0>)
 80007e6:	f006 fc47 	bl	8007078 <memset>
            		char *str = "ROT#OK$";
 80007ea:	4b33      	ldr	r3, [pc, #204]	@ (80008b8 <SPI_Communication+0x1f4>)
 80007ec:	617b      	str	r3, [r7, #20]
            		strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
 80007ee:	221f      	movs	r2, #31
 80007f0:	6979      	ldr	r1, [r7, #20]
 80007f2:	482c      	ldr	r0, [pc, #176]	@ (80008a4 <SPI_Communication+0x1e0>)
 80007f4:	f006 fc48 	bl	8007088 <strncpy>
 80007f8:	e027      	b.n	800084a <SPI_Communication+0x186>

            	}



            	else if(strcmp(command,"RA")==0)
 80007fa:	4930      	ldr	r1, [pc, #192]	@ (80008bc <SPI_Communication+0x1f8>)
 80007fc:	69b8      	ldr	r0, [r7, #24]
 80007fe:	f7ff fd0f 	bl	8000220 <strcmp>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d117      	bne.n	8000838 <SPI_Communication+0x174>
            	{
            		memset(TxBuffer, '\0', sizeof(TxBuffer));
 8000808:	2220      	movs	r2, #32
 800080a:	2100      	movs	r1, #0
 800080c:	4825      	ldr	r0, [pc, #148]	@ (80008a4 <SPI_Communication+0x1e0>)
 800080e:	f006 fc33 	bl	8007078 <memset>
            		 int number;
            		 sscanf(RxBuffer, "RA#%d$", &number);
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	461a      	mov	r2, r3
 8000816:	492a      	ldr	r1, [pc, #168]	@ (80008c0 <SPI_Communication+0x1fc>)
 8000818:	481d      	ldr	r0, [pc, #116]	@ (8000890 <SPI_Communication+0x1cc>)
 800081a:	f006 fc01 	bl	8007020 <siscanf>


            		 ABSRotateHead(number);
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	b25b      	sxtb	r3, r3
 8000822:	4618      	mov	r0, r3
 8000824:	f000 fc0c 	bl	8001040 <ABSRotateHead>

            		 //memset(TxBuffer, '\0', sizeof(TxBuffer));
            		 //char *str = "ROT#OK$";
            		 //strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);

            		 HAL_SPI_Transmit(&hspi1, "h$", 2, HAL_MAX_DELAY);
 8000828:	f04f 33ff 	mov.w	r3, #4294967295
 800082c:	2202      	movs	r2, #2
 800082e:	4925      	ldr	r1, [pc, #148]	@ (80008c4 <SPI_Communication+0x200>)
 8000830:	4818      	ldr	r0, [pc, #96]	@ (8000894 <SPI_Communication+0x1d0>)
 8000832:	f002 fc8a 	bl	800314a <HAL_SPI_Transmit>
 8000836:	e008      	b.n	800084a <SPI_Communication+0x186>


            	}

            	else if(strcmp(command,"TILEBASE")==0){HeadBase();}
 8000838:	4923      	ldr	r1, [pc, #140]	@ (80008c8 <SPI_Communication+0x204>)
 800083a:	69b8      	ldr	r0, [r7, #24]
 800083c:	f7ff fcf0 	bl	8000220 <strcmp>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d101      	bne.n	800084a <SPI_Communication+0x186>
 8000846:	f000 fc33 	bl	80010b0 <HeadBase>

            	free(command);
 800084a:	69b8      	ldr	r0, [r7, #24]
 800084c:	f006 fb32 	bl	8006eb4 <free>
            	command = NULL;
 8000850:	2300      	movs	r3, #0
 8000852:	61bb      	str	r3, [r7, #24]
            	memset(TxBuffer, '\0', sizeof(TxBuffer));
 8000854:	2220      	movs	r2, #32
 8000856:	2100      	movs	r1, #0
 8000858:	4812      	ldr	r0, [pc, #72]	@ (80008a4 <SPI_Communication+0x1e0>)
 800085a:	f006 fc0d 	bl	8007078 <memset>
            	memset(RxBuffer, '\0', sizeof(RxBuffer));
 800085e:	2220      	movs	r2, #32
 8000860:	2100      	movs	r1, #0
 8000862:	480b      	ldr	r0, [pc, #44]	@ (8000890 <SPI_Communication+0x1cc>)
 8000864:	f006 fc08 	bl	8007078 <memset>

                //HAL_SPI_Transmit(&hspi1, (uint8_t *)TxBuffer, strlen(TxBuffer), HAL_MAX_DELAY);
                index = 0; // Reset buffer index
 8000868:	2300      	movs	r3, #0
 800086a:	77fb      	strb	r3, [r7, #31]

            }
        }

        // Update pin state
        pinstate = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 800086c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000870:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000874:	f001 fb5e 	bl	8001f34 <HAL_GPIO_ReadPin>
 8000878:	4603      	mov	r3, r0
 800087a:	77bb      	strb	r3, [r7, #30]
    while (!pinstate) {
 800087c:	7fbb      	ldrb	r3, [r7, #30]
 800087e:	2b00      	cmp	r3, #0
 8000880:	f43f af37 	beq.w	80006f2 <SPI_Communication+0x2e>
    }
}
 8000884:	bf00      	nop
 8000886:	bf00      	nop
 8000888:	3720      	adds	r7, #32
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000098 	.word	0x20000098
 8000894:	200000bc 	.word	0x200000bc
 8000898:	08007b50 	.word	0x08007b50
 800089c:	08007b58 	.word	0x08007b58
 80008a0:	20000298 	.word	0x20000298
 80008a4:	20000000 	.word	0x20000000
 80008a8:	08007b60 	.word	0x08007b60
 80008ac:	08007b68 	.word	0x08007b68
 80008b0:	08007b70 	.word	0x08007b70
 80008b4:	08007b74 	.word	0x08007b74
 80008b8:	08007b7c 	.word	0x08007b7c
 80008bc:	08007b84 	.word	0x08007b84
 80008c0:	08007b88 	.word	0x08007b88
 80008c4:	08007b90 	.word	0x08007b90
 80008c8:	08007b94 	.word	0x08007b94

080008cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d0:	f000 ff4b 	bl	800176a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008d4:	f000 f811 	bl	80008fa <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008d8:	f000 faac 	bl	8000e34 <MX_GPIO_Init>
  MX_SPI1_Init();
 80008dc:	f000 f85a 	bl	8000994 <MX_SPI1_Init>
  MX_UART5_Init();
 80008e0:	f000 fa5c 	bl	8000d9c <MX_UART5_Init>
  MX_UART4_Init();
 80008e4:	f000 fa0e 	bl	8000d04 <MX_UART4_Init>
  MX_TIM1_Init();
 80008e8:	f000 f88c 	bl	8000a04 <MX_TIM1_Init>
  MX_TIM3_Init();
 80008ec:	f000 f95e 	bl	8000bac <MX_TIM3_Init>
  MX_TIM4_Init();
 80008f0:	f000 f9b2 	bl	8000c58 <MX_TIM4_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  SPI_Communication();
 80008f4:	f7ff fee6 	bl	80006c4 <SPI_Communication>
 80008f8:	e7fc      	b.n	80008f4 <main+0x28>

080008fa <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b094      	sub	sp, #80	@ 0x50
 80008fe:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000900:	f107 0318 	add.w	r3, r7, #24
 8000904:	2238      	movs	r2, #56	@ 0x38
 8000906:	2100      	movs	r1, #0
 8000908:	4618      	mov	r0, r3
 800090a:	f006 fbb5 	bl	8007078 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800091c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000920:	f001 fb38 	bl	8001f94 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000924:	2302      	movs	r3, #2
 8000926:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000928:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800092c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800092e:	2340      	movs	r3, #64	@ 0x40
 8000930:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000932:	2302      	movs	r3, #2
 8000934:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000936:	2302      	movs	r3, #2
 8000938:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800093a:	2301      	movs	r3, #1
 800093c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 800093e:	2308      	movs	r3, #8
 8000940:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000942:	2302      	movs	r3, #2
 8000944:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000946:	2302      	movs	r3, #2
 8000948:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800094a:	2302      	movs	r3, #2
 800094c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800094e:	f107 0318 	add.w	r3, r7, #24
 8000952:	4618      	mov	r0, r3
 8000954:	f001 fbd2 	bl	80020fc <HAL_RCC_OscConfig>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800095e:	f000 fb03 	bl	8000f68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000962:	230f      	movs	r3, #15
 8000964:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000966:	2303      	movs	r3, #3
 8000968:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 800096a:	2390      	movs	r3, #144	@ 0x90
 800096c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800096e:	2300      	movs	r3, #0
 8000970:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000972:	2300      	movs	r3, #0
 8000974:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	2100      	movs	r1, #0
 800097a:	4618      	mov	r0, r3
 800097c:	f001 fed0 	bl	8002720 <HAL_RCC_ClockConfig>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000986:	f000 faef 	bl	8000f68 <Error_Handler>
  }
}
 800098a:	bf00      	nop
 800098c:	3750      	adds	r7, #80	@ 0x50
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
	...

08000994 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000998:	4b18      	ldr	r3, [pc, #96]	@ (80009fc <MX_SPI1_Init+0x68>)
 800099a:	4a19      	ldr	r2, [pc, #100]	@ (8000a00 <MX_SPI1_Init+0x6c>)
 800099c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800099e:	4b17      	ldr	r3, [pc, #92]	@ (80009fc <MX_SPI1_Init+0x68>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009a4:	4b15      	ldr	r3, [pc, #84]	@ (80009fc <MX_SPI1_Init+0x68>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009aa:	4b14      	ldr	r3, [pc, #80]	@ (80009fc <MX_SPI1_Init+0x68>)
 80009ac:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80009b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009b2:	4b12      	ldr	r3, [pc, #72]	@ (80009fc <MX_SPI1_Init+0x68>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009b8:	4b10      	ldr	r3, [pc, #64]	@ (80009fc <MX_SPI1_Init+0x68>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80009be:	4b0f      	ldr	r3, [pc, #60]	@ (80009fc <MX_SPI1_Init+0x68>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009c4:	4b0d      	ldr	r3, [pc, #52]	@ (80009fc <MX_SPI1_Init+0x68>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009ca:	4b0c      	ldr	r3, [pc, #48]	@ (80009fc <MX_SPI1_Init+0x68>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009d0:	4b0a      	ldr	r3, [pc, #40]	@ (80009fc <MX_SPI1_Init+0x68>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009d6:	4b09      	ldr	r3, [pc, #36]	@ (80009fc <MX_SPI1_Init+0x68>)
 80009d8:	2207      	movs	r2, #7
 80009da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009dc:	4b07      	ldr	r3, [pc, #28]	@ (80009fc <MX_SPI1_Init+0x68>)
 80009de:	2200      	movs	r2, #0
 80009e0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80009e2:	4b06      	ldr	r3, [pc, #24]	@ (80009fc <MX_SPI1_Init+0x68>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009e8:	4804      	ldr	r0, [pc, #16]	@ (80009fc <MX_SPI1_Init+0x68>)
 80009ea:	f002 fb03 	bl	8002ff4 <HAL_SPI_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 80009f4:	f000 fab8 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	200000bc 	.word	0x200000bc
 8000a00:	40013000 	.word	0x40013000

08000a04 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b09c      	sub	sp, #112	@ 0x70
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a0a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
 8000a16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a18:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a24:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]
 8000a34:	615a      	str	r2, [r3, #20]
 8000a36:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	2234      	movs	r2, #52	@ 0x34
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f006 fb1a 	bl	8007078 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a44:	4b57      	ldr	r3, [pc, #348]	@ (8000ba4 <MX_TIM1_Init+0x1a0>)
 8000a46:	4a58      	ldr	r2, [pc, #352]	@ (8000ba8 <MX_TIM1_Init+0x1a4>)
 8000a48:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a4a:	4b56      	ldr	r3, [pc, #344]	@ (8000ba4 <MX_TIM1_Init+0x1a0>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a50:	4b54      	ldr	r3, [pc, #336]	@ (8000ba4 <MX_TIM1_Init+0x1a0>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 399;
 8000a56:	4b53      	ldr	r3, [pc, #332]	@ (8000ba4 <MX_TIM1_Init+0x1a0>)
 8000a58:	f240 128f 	movw	r2, #399	@ 0x18f
 8000a5c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a5e:	4b51      	ldr	r3, [pc, #324]	@ (8000ba4 <MX_TIM1_Init+0x1a0>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a64:	4b4f      	ldr	r3, [pc, #316]	@ (8000ba4 <MX_TIM1_Init+0x1a0>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a6a:	4b4e      	ldr	r3, [pc, #312]	@ (8000ba4 <MX_TIM1_Init+0x1a0>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a70:	484c      	ldr	r0, [pc, #304]	@ (8000ba4 <MX_TIM1_Init+0x1a0>)
 8000a72:	f003 f9f5 	bl	8003e60 <HAL_TIM_Base_Init>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000a7c:	f000 fa74 	bl	8000f68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a84:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a86:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4845      	ldr	r0, [pc, #276]	@ (8000ba4 <MX_TIM1_Init+0x1a0>)
 8000a8e:	f003 ff49 	bl	8004924 <HAL_TIM_ConfigClockSource>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000a98:	f000 fa66 	bl	8000f68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a9c:	4841      	ldr	r0, [pc, #260]	@ (8000ba4 <MX_TIM1_Init+0x1a0>)
 8000a9e:	f003 fa36 	bl	8003f0e <HAL_TIM_PWM_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000aa8:	f000 fa5e 	bl	8000f68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aac:	2300      	movs	r3, #0
 8000aae:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ab8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000abc:	4619      	mov	r1, r3
 8000abe:	4839      	ldr	r0, [pc, #228]	@ (8000ba4 <MX_TIM1_Init+0x1a0>)
 8000ac0:	f004 fd18 	bl	80054f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000aca:	f000 fa4d 	bl	8000f68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ace:	2360      	movs	r3, #96	@ 0x60
 8000ad0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ada:	2300      	movs	r3, #0
 8000adc:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aea:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000aee:	2200      	movs	r2, #0
 8000af0:	4619      	mov	r1, r3
 8000af2:	482c      	ldr	r0, [pc, #176]	@ (8000ba4 <MX_TIM1_Init+0x1a0>)
 8000af4:	f003 fe02 	bl	80046fc <HAL_TIM_PWM_ConfigChannel>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000afe:	f000 fa33 	bl	8000f68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b02:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b06:	2204      	movs	r2, #4
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4826      	ldr	r0, [pc, #152]	@ (8000ba4 <MX_TIM1_Init+0x1a0>)
 8000b0c:	f003 fdf6 	bl	80046fc <HAL_TIM_PWM_ConfigChannel>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000b16:	f000 fa27 	bl	8000f68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b1a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b1e:	2208      	movs	r2, #8
 8000b20:	4619      	mov	r1, r3
 8000b22:	4820      	ldr	r0, [pc, #128]	@ (8000ba4 <MX_TIM1_Init+0x1a0>)
 8000b24:	f003 fdea 	bl	80046fc <HAL_TIM_PWM_ConfigChannel>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000b2e:	f000 fa1b 	bl	8000f68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b32:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b36:	220c      	movs	r2, #12
 8000b38:	4619      	mov	r1, r3
 8000b3a:	481a      	ldr	r0, [pc, #104]	@ (8000ba4 <MX_TIM1_Init+0x1a0>)
 8000b3c:	f003 fdde 	bl	80046fc <HAL_TIM_PWM_ConfigChannel>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8000b46:	f000 fa0f 	bl	8000f68 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b5e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b62:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b70:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000b74:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b82:	1d3b      	adds	r3, r7, #4
 8000b84:	4619      	mov	r1, r3
 8000b86:	4807      	ldr	r0, [pc, #28]	@ (8000ba4 <MX_TIM1_Init+0x1a0>)
 8000b88:	f004 fd4a 	bl	8005620 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_TIM1_Init+0x192>
  {
    Error_Handler();
 8000b92:	f000 f9e9 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b96:	4803      	ldr	r0, [pc, #12]	@ (8000ba4 <MX_TIM1_Init+0x1a0>)
 8000b98:	f000 fc24 	bl	80013e4 <HAL_TIM_MspPostInit>

}
 8000b9c:	bf00      	nop
 8000b9e:	3770      	adds	r7, #112	@ 0x70
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20000120 	.word	0x20000120
 8000ba8:	40012c00 	.word	0x40012c00

08000bac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08c      	sub	sp, #48	@ 0x30
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000bb2:	f107 030c 	add.w	r3, r7, #12
 8000bb6:	2224      	movs	r2, #36	@ 0x24
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f006 fa5c 	bl	8007078 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc0:	463b      	mov	r3, r7
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bca:	4b21      	ldr	r3, [pc, #132]	@ (8000c50 <MX_TIM3_Init+0xa4>)
 8000bcc:	4a21      	ldr	r2, [pc, #132]	@ (8000c54 <MX_TIM3_Init+0xa8>)
 8000bce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000bd0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c50 <MX_TIM3_Init+0xa4>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd6:	4b1e      	ldr	r3, [pc, #120]	@ (8000c50 <MX_TIM3_Init+0xa4>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000bdc:	4b1c      	ldr	r3, [pc, #112]	@ (8000c50 <MX_TIM3_Init+0xa4>)
 8000bde:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000be2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c50 <MX_TIM3_Init+0xa4>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bea:	4b19      	ldr	r3, [pc, #100]	@ (8000c50 <MX_TIM3_Init+0xa4>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c04:	2300      	movs	r3, #0
 8000c06:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000c10:	2300      	movs	r3, #0
 8000c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000c14:	f107 030c 	add.w	r3, r7, #12
 8000c18:	4619      	mov	r1, r3
 8000c1a:	480d      	ldr	r0, [pc, #52]	@ (8000c50 <MX_TIM3_Init+0xa4>)
 8000c1c:	f003 faea 	bl	80041f4 <HAL_TIM_Encoder_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000c26:	f000 f99f 	bl	8000f68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c32:	463b      	mov	r3, r7
 8000c34:	4619      	mov	r1, r3
 8000c36:	4806      	ldr	r0, [pc, #24]	@ (8000c50 <MX_TIM3_Init+0xa4>)
 8000c38:	f004 fc5c 	bl	80054f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000c42:	f000 f991 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c46:	bf00      	nop
 8000c48:	3730      	adds	r7, #48	@ 0x30
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	2000016c 	.word	0x2000016c
 8000c54:	40000400 	.word	0x40000400

08000c58 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08c      	sub	sp, #48	@ 0x30
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c5e:	f107 030c 	add.w	r3, r7, #12
 8000c62:	2224      	movs	r2, #36	@ 0x24
 8000c64:	2100      	movs	r1, #0
 8000c66:	4618      	mov	r0, r3
 8000c68:	f006 fa06 	bl	8007078 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c6c:	463b      	mov	r3, r7
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c76:	4b21      	ldr	r3, [pc, #132]	@ (8000cfc <MX_TIM4_Init+0xa4>)
 8000c78:	4a21      	ldr	r2, [pc, #132]	@ (8000d00 <MX_TIM4_Init+0xa8>)
 8000c7a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 8000c7c:	4b1f      	ldr	r3, [pc, #124]	@ (8000cfc <MX_TIM4_Init+0xa4>)
 8000c7e:	2201      	movs	r2, #1
 8000c80:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c82:	4b1e      	ldr	r3, [pc, #120]	@ (8000cfc <MX_TIM4_Init+0xa4>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000c88:	4b1c      	ldr	r3, [pc, #112]	@ (8000cfc <MX_TIM4_Init+0xa4>)
 8000c8a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c8e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c90:	4b1a      	ldr	r3, [pc, #104]	@ (8000cfc <MX_TIM4_Init+0xa4>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c96:	4b19      	ldr	r3, [pc, #100]	@ (8000cfc <MX_TIM4_Init+0xa4>)
 8000c98:	2280      	movs	r2, #128	@ 0x80
 8000c9a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 8000cac:	2301      	movs	r3, #1
 8000cae:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 1;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000cc0:	f107 030c 	add.w	r3, r7, #12
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	480d      	ldr	r0, [pc, #52]	@ (8000cfc <MX_TIM4_Init+0xa4>)
 8000cc8:	f003 fa94 	bl	80041f4 <HAL_TIM_Encoder_Init>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000cd2:	f000 f949 	bl	8000f68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000cde:	463b      	mov	r3, r7
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4806      	ldr	r0, [pc, #24]	@ (8000cfc <MX_TIM4_Init+0xa4>)
 8000ce4:	f004 fc06 	bl	80054f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000cee:	f000 f93b 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000cf2:	bf00      	nop
 8000cf4:	3730      	adds	r7, #48	@ 0x30
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	200001b8 	.word	0x200001b8
 8000d00:	40000800 	.word	0x40000800

08000d04 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000d08:	4b22      	ldr	r3, [pc, #136]	@ (8000d94 <MX_UART4_Init+0x90>)
 8000d0a:	4a23      	ldr	r2, [pc, #140]	@ (8000d98 <MX_UART4_Init+0x94>)
 8000d0c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000d0e:	4b21      	ldr	r3, [pc, #132]	@ (8000d94 <MX_UART4_Init+0x90>)
 8000d10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d14:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000d16:	4b1f      	ldr	r3, [pc, #124]	@ (8000d94 <MX_UART4_Init+0x90>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000d1c:	4b1d      	ldr	r3, [pc, #116]	@ (8000d94 <MX_UART4_Init+0x90>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000d22:	4b1c      	ldr	r3, [pc, #112]	@ (8000d94 <MX_UART4_Init+0x90>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000d28:	4b1a      	ldr	r3, [pc, #104]	@ (8000d94 <MX_UART4_Init+0x90>)
 8000d2a:	220c      	movs	r2, #12
 8000d2c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d2e:	4b19      	ldr	r3, [pc, #100]	@ (8000d94 <MX_UART4_Init+0x90>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d34:	4b17      	ldr	r3, [pc, #92]	@ (8000d94 <MX_UART4_Init+0x90>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d3a:	4b16      	ldr	r3, [pc, #88]	@ (8000d94 <MX_UART4_Init+0x90>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d40:	4b14      	ldr	r3, [pc, #80]	@ (8000d94 <MX_UART4_Init+0x90>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d46:	4b13      	ldr	r3, [pc, #76]	@ (8000d94 <MX_UART4_Init+0x90>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000d4c:	4811      	ldr	r0, [pc, #68]	@ (8000d94 <MX_UART4_Init+0x90>)
 8000d4e:	f004 fd41 	bl	80057d4 <HAL_UART_Init>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000d58:	f000 f906 	bl	8000f68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	480d      	ldr	r0, [pc, #52]	@ (8000d94 <MX_UART4_Init+0x90>)
 8000d60:	f005 ffd5 	bl	8006d0e <HAL_UARTEx_SetTxFifoThreshold>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000d6a:	f000 f8fd 	bl	8000f68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d6e:	2100      	movs	r1, #0
 8000d70:	4808      	ldr	r0, [pc, #32]	@ (8000d94 <MX_UART4_Init+0x90>)
 8000d72:	f006 f80a 	bl	8006d8a <HAL_UARTEx_SetRxFifoThreshold>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000d7c:	f000 f8f4 	bl	8000f68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000d80:	4804      	ldr	r0, [pc, #16]	@ (8000d94 <MX_UART4_Init+0x90>)
 8000d82:	f005 ff8b 	bl	8006c9c <HAL_UARTEx_DisableFifoMode>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000d8c:	f000 f8ec 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000204 	.word	0x20000204
 8000d98:	40004c00 	.word	0x40004c00

08000d9c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000da0:	4b22      	ldr	r3, [pc, #136]	@ (8000e2c <MX_UART5_Init+0x90>)
 8000da2:	4a23      	ldr	r2, [pc, #140]	@ (8000e30 <MX_UART5_Init+0x94>)
 8000da4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000da6:	4b21      	ldr	r3, [pc, #132]	@ (8000e2c <MX_UART5_Init+0x90>)
 8000da8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000dac:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000dae:	4b1f      	ldr	r3, [pc, #124]	@ (8000e2c <MX_UART5_Init+0x90>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000db4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e2c <MX_UART5_Init+0x90>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000dba:	4b1c      	ldr	r3, [pc, #112]	@ (8000e2c <MX_UART5_Init+0x90>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000dc0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e2c <MX_UART5_Init+0x90>)
 8000dc2:	220c      	movs	r2, #12
 8000dc4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dc6:	4b19      	ldr	r3, [pc, #100]	@ (8000e2c <MX_UART5_Init+0x90>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dcc:	4b17      	ldr	r3, [pc, #92]	@ (8000e2c <MX_UART5_Init+0x90>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dd2:	4b16      	ldr	r3, [pc, #88]	@ (8000e2c <MX_UART5_Init+0x90>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000dd8:	4b14      	ldr	r3, [pc, #80]	@ (8000e2c <MX_UART5_Init+0x90>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dde:	4b13      	ldr	r3, [pc, #76]	@ (8000e2c <MX_UART5_Init+0x90>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000de4:	4811      	ldr	r0, [pc, #68]	@ (8000e2c <MX_UART5_Init+0x90>)
 8000de6:	f004 fcf5 	bl	80057d4 <HAL_UART_Init>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8000df0:	f000 f8ba 	bl	8000f68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000df4:	2100      	movs	r1, #0
 8000df6:	480d      	ldr	r0, [pc, #52]	@ (8000e2c <MX_UART5_Init+0x90>)
 8000df8:	f005 ff89 	bl	8006d0e <HAL_UARTEx_SetTxFifoThreshold>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8000e02:	f000 f8b1 	bl	8000f68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e06:	2100      	movs	r1, #0
 8000e08:	4808      	ldr	r0, [pc, #32]	@ (8000e2c <MX_UART5_Init+0x90>)
 8000e0a:	f005 ffbe 	bl	8006d8a <HAL_UARTEx_SetRxFifoThreshold>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8000e14:	f000 f8a8 	bl	8000f68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8000e18:	4804      	ldr	r0, [pc, #16]	@ (8000e2c <MX_UART5_Init+0x90>)
 8000e1a:	f005 ff3f 	bl	8006c9c <HAL_UARTEx_DisableFifoMode>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8000e24:	f000 f8a0 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20000298 	.word	0x20000298
 8000e30:	40005000 	.word	0x40005000

08000e34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08c      	sub	sp, #48	@ 0x30
 8000e38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3a:	f107 031c 	add.w	r3, r7, #28
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	609a      	str	r2, [r3, #8]
 8000e46:	60da      	str	r2, [r3, #12]
 8000e48:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e4a:	4b44      	ldr	r3, [pc, #272]	@ (8000f5c <MX_GPIO_Init+0x128>)
 8000e4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e4e:	4a43      	ldr	r2, [pc, #268]	@ (8000f5c <MX_GPIO_Init+0x128>)
 8000e50:	f043 0310 	orr.w	r3, r3, #16
 8000e54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e56:	4b41      	ldr	r3, [pc, #260]	@ (8000f5c <MX_GPIO_Init+0x128>)
 8000e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e5a:	f003 0310 	and.w	r3, r3, #16
 8000e5e:	61bb      	str	r3, [r7, #24]
 8000e60:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e62:	4b3e      	ldr	r3, [pc, #248]	@ (8000f5c <MX_GPIO_Init+0x128>)
 8000e64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e66:	4a3d      	ldr	r2, [pc, #244]	@ (8000f5c <MX_GPIO_Init+0x128>)
 8000e68:	f043 0320 	orr.w	r3, r3, #32
 8000e6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e6e:	4b3b      	ldr	r3, [pc, #236]	@ (8000f5c <MX_GPIO_Init+0x128>)
 8000e70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e72:	f003 0320 	and.w	r3, r3, #32
 8000e76:	617b      	str	r3, [r7, #20]
 8000e78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e7a:	4b38      	ldr	r3, [pc, #224]	@ (8000f5c <MX_GPIO_Init+0x128>)
 8000e7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e7e:	4a37      	ldr	r2, [pc, #220]	@ (8000f5c <MX_GPIO_Init+0x128>)
 8000e80:	f043 0304 	orr.w	r3, r3, #4
 8000e84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e86:	4b35      	ldr	r3, [pc, #212]	@ (8000f5c <MX_GPIO_Init+0x128>)
 8000e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e8a:	f003 0304 	and.w	r3, r3, #4
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e92:	4b32      	ldr	r3, [pc, #200]	@ (8000f5c <MX_GPIO_Init+0x128>)
 8000e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e96:	4a31      	ldr	r2, [pc, #196]	@ (8000f5c <MX_GPIO_Init+0x128>)
 8000e98:	f043 0301 	orr.w	r3, r3, #1
 8000e9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e9e:	4b2f      	ldr	r3, [pc, #188]	@ (8000f5c <MX_GPIO_Init+0x128>)
 8000ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eaa:	4b2c      	ldr	r3, [pc, #176]	@ (8000f5c <MX_GPIO_Init+0x128>)
 8000eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eae:	4a2b      	ldr	r2, [pc, #172]	@ (8000f5c <MX_GPIO_Init+0x128>)
 8000eb0:	f043 0308 	orr.w	r3, r3, #8
 8000eb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eb6:	4b29      	ldr	r3, [pc, #164]	@ (8000f5c <MX_GPIO_Init+0x128>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eba:	f003 0308 	and.w	r3, r3, #8
 8000ebe:	60bb      	str	r3, [r7, #8]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec2:	4b26      	ldr	r3, [pc, #152]	@ (8000f5c <MX_GPIO_Init+0x128>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec6:	4a25      	ldr	r2, [pc, #148]	@ (8000f5c <MX_GPIO_Init+0x128>)
 8000ec8:	f043 0302 	orr.w	r3, r3, #2
 8000ecc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ece:	4b23      	ldr	r3, [pc, #140]	@ (8000f5c <MX_GPIO_Init+0x128>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed2:	f003 0302 	and.w	r3, r3, #2
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2170      	movs	r1, #112	@ 0x70
 8000ede:	4820      	ldr	r0, [pc, #128]	@ (8000f60 <MX_GPIO_Init+0x12c>)
 8000ee0:	f001 f840 	bl	8001f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	2108      	movs	r1, #8
 8000ee8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eec:	f001 f83a 	bl	8001f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ef6:	481a      	ldr	r0, [pc, #104]	@ (8000f60 <MX_GPIO_Init+0x12c>)
 8000ef8:	f001 f834 	bl	8001f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE4 PE5 PE6 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_11;
 8000efc:	f44f 6307 	mov.w	r3, #2160	@ 0x870
 8000f00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f02:	2301      	movs	r3, #1
 8000f04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f0e:	f107 031c 	add.w	r3, r7, #28
 8000f12:	4619      	mov	r1, r3
 8000f14:	4812      	ldr	r0, [pc, #72]	@ (8000f60 <MX_GPIO_Init+0x12c>)
 8000f16:	f000 fe8b 	bl	8001c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f1a:	2308      	movs	r3, #8
 8000f1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f26:	2300      	movs	r3, #0
 8000f28:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2a:	f107 031c 	add.w	r3, r7, #28
 8000f2e:	4619      	mov	r1, r3
 8000f30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f34:	f000 fe7c 	bl	8001c30 <HAL_GPIO_Init>

  /*Configure GPIO pins : Limiter_switch_j19_Pin LS2_DRV1_NO_Pin LS1_DRV1_NO_Pin */
  GPIO_InitStruct.Pin = Limiter_switch_j19_Pin|LS2_DRV1_NO_Pin|LS1_DRV1_NO_Pin;
 8000f38:	f44f 43a2 	mov.w	r3, #20736	@ 0x5100
 8000f3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f46:	f107 031c 	add.w	r3, r7, #28
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4805      	ldr	r0, [pc, #20]	@ (8000f64 <MX_GPIO_Init+0x130>)
 8000f4e:	f000 fe6f 	bl	8001c30 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f52:	bf00      	nop
 8000f54:	3730      	adds	r7, #48	@ 0x30
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	48001000 	.word	0x48001000
 8000f64:	48000c00 	.word	0x48000c00

08000f68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f6c:	b672      	cpsid	i
}
 8000f6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <Error_Handler+0x8>

08000f74 <Motor_Init>:

extern TIM_HandleTypeDef htim1; // Assuming htim1 is your timer handle
extern TIM_HandleTypeDef htim4;
extern int8_t posABS;

void Motor_Init(void) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000f78:	2108      	movs	r1, #8
 8000f7a:	4806      	ldr	r0, [pc, #24]	@ (8000f94 <Motor_Init+0x20>)
 8000f7c:	f003 f828 	bl	8003fd0 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000f80:	210c      	movs	r1, #12
 8000f82:	4804      	ldr	r0, [pc, #16]	@ (8000f94 <Motor_Init+0x20>)
 8000f84:	f003 f824 	bl	8003fd0 <HAL_TIM_PWM_Start>
	  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000f88:	213c      	movs	r1, #60	@ 0x3c
 8000f8a:	4803      	ldr	r0, [pc, #12]	@ (8000f98 <Motor_Init+0x24>)
 8000f8c:	f003 f9d8 	bl	8004340 <HAL_TIM_Encoder_Start>
    // Initialize motor control here (if any initialization is needed)
}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000120 	.word	0x20000120
 8000f98:	200001b8 	.word	0x200001b8

08000f9c <Motor_Steer>:

void Motor_Steer(int8_t target)
{	SlotSensor_Init();
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	71fb      	strb	r3, [r7, #7]
 8000fa6:	f000 f8b9 	bl	800111c <SlotSensor_Init>
	Motor_Init();
 8000faa:	f7ff ffe3 	bl	8000f74 <Motor_Init>
	int8_t count = 0 ;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	73fb      	strb	r3, [r7, #15]

	if(target > 0)
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	dd1b      	ble.n	8000ff2 <Motor_Steer+0x56>
	{
		while(count < target)
 8000fba:	e00b      	b.n	8000fd4 <Motor_Steer+0x38>
		{	  count = SlotSensor_Update();
 8000fbc:	f000 f8c4 	bl	8001148 <SlotSensor_Update>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	73fb      	strb	r3, [r7, #15]
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 219-1);
 8000fc4:	4b1d      	ldr	r3, [pc, #116]	@ (800103c <Motor_Steer+0xa0>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	22da      	movs	r2, #218	@ 0xda
 8000fca:	63da      	str	r2, [r3, #60]	@ 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8000fcc:	4b1b      	ldr	r3, [pc, #108]	@ (800103c <Motor_Steer+0xa0>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	641a      	str	r2, [r3, #64]	@ 0x40
		while(count < target)
 8000fd4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	dbed      	blt.n	8000fbc <Motor_Steer+0x20>
		}
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8000fe0:	4b16      	ldr	r3, [pc, #88]	@ (800103c <Motor_Steer+0xa0>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	63da      	str	r2, [r3, #60]	@ 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8000fe8:	4b14      	ldr	r3, [pc, #80]	@ (800103c <Motor_Steer+0xa0>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2200      	movs	r2, #0
 8000fee:	641a      	str	r2, [r3, #64]	@ 0x40
				}
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
	}

}
 8000ff0:	e01f      	b.n	8001032 <Motor_Steer+0x96>
	else if(target< 0)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	da1b      	bge.n	8001032 <Motor_Steer+0x96>
		while(count < -target)
 8000ffa:	e00b      	b.n	8001014 <Motor_Steer+0x78>
				{	  count = SlotSensor_Update();
 8000ffc:	f000 f8a4 	bl	8001148 <SlotSensor_Update>
 8001000:	4603      	mov	r3, r0
 8001002:	73fb      	strb	r3, [r7, #15]
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001004:	4b0d      	ldr	r3, [pc, #52]	@ (800103c <Motor_Steer+0xa0>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2200      	movs	r2, #0
 800100a:	63da      	str	r2, [r3, #60]	@ 0x3c
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 219-1);
 800100c:	4b0b      	ldr	r3, [pc, #44]	@ (800103c <Motor_Steer+0xa0>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	22da      	movs	r2, #218	@ 0xda
 8001012:	641a      	str	r2, [r3, #64]	@ 0x40
		while(count < -target)
 8001014:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101c:	425b      	negs	r3, r3
 800101e:	429a      	cmp	r2, r3
 8001020:	dbec      	blt.n	8000ffc <Motor_Steer+0x60>
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001022:	4b06      	ldr	r3, [pc, #24]	@ (800103c <Motor_Steer+0xa0>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2200      	movs	r2, #0
 8001028:	63da      	str	r2, [r3, #60]	@ 0x3c
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 800102a:	4b04      	ldr	r3, [pc, #16]	@ (800103c <Motor_Steer+0xa0>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2200      	movs	r2, #0
 8001030:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001032:	bf00      	nop
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000120 	.word	0x20000120

08001040 <ABSRotateHead>:
	Motor_Steer(target_position);


}
int8_t ABSRotateHead(int8_t target_position)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	71fb      	strb	r3, [r7, #7]

	int8_t absolute_target_position = target_position*5 - posABS;
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	461a      	mov	r2, r3
 800104e:	0092      	lsls	r2, r2, #2
 8001050:	4413      	add	r3, r2
 8001052:	b2da      	uxtb	r2, r3
 8001054:	4b14      	ldr	r3, [pc, #80]	@ (80010a8 <ABSRotateHead+0x68>)
 8001056:	f993 3000 	ldrsb.w	r3, [r3]
 800105a:	b2db      	uxtb	r3, r3
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	b2db      	uxtb	r3, r3
 8001060:	73fb      	strb	r3, [r7, #15]

	Motor_Steer(absolute_target_position);
 8001062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff ff98 	bl	8000f9c <Motor_Steer>
	if(target_position*5 != posABS){posABS = target_position*5;}
 800106c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001070:	4613      	mov	r3, r2
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	4413      	add	r3, r2
 8001076:	4a0c      	ldr	r2, [pc, #48]	@ (80010a8 <ABSRotateHead+0x68>)
 8001078:	f992 2000 	ldrsb.w	r2, [r2]
 800107c:	4293      	cmp	r3, r2
 800107e:	d008      	beq.n	8001092 <ABSRotateHead+0x52>
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	461a      	mov	r2, r3
 8001084:	0092      	lsls	r2, r2, #2
 8001086:	4413      	add	r3, r2
 8001088:	b2db      	uxtb	r3, r3
 800108a:	b25a      	sxtb	r2, r3
 800108c:	4b06      	ldr	r3, [pc, #24]	@ (80010a8 <ABSRotateHead+0x68>)
 800108e:	701a      	strb	r2, [r3, #0]
 8001090:	e004      	b.n	800109c <ABSRotateHead+0x5c>
	else{HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);}
 8001092:	2200      	movs	r2, #0
 8001094:	2110      	movs	r1, #16
 8001096:	4805      	ldr	r0, [pc, #20]	@ (80010ac <ABSRotateHead+0x6c>)
 8001098:	f000 ff64 	bl	8001f64 <HAL_GPIO_WritePin>
return 1;
 800109c:	2301      	movs	r3, #1


}
 800109e:	4618      	mov	r0, r3
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	200000b8 	.word	0x200000b8
 80010ac:	48000400 	.word	0x48000400

080010b0 <HeadBase>:
void HeadBase(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0

	Motor_Init();
 80010b6:	f7ff ff5d 	bl	8000f74 <Motor_Init>
	uint8_t pinstate1;
	pinstate1 = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8);
 80010ba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010be:	4815      	ldr	r0, [pc, #84]	@ (8001114 <HeadBase+0x64>)
 80010c0:	f000 ff38 	bl	8001f34 <HAL_GPIO_ReadPin>
 80010c4:	4603      	mov	r3, r0
 80010c6:	71fb      	strb	r3, [r7, #7]

	while(pinstate1)
 80010c8:	e00e      	b.n	80010e8 <HeadBase+0x38>
	{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80010ca:	4b13      	ldr	r3, [pc, #76]	@ (8001118 <HeadBase+0x68>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2200      	movs	r2, #0
 80010d0:	63da      	str	r2, [r3, #60]	@ 0x3c
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 190-1);
 80010d2:	4b11      	ldr	r3, [pc, #68]	@ (8001118 <HeadBase+0x68>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	22bd      	movs	r2, #189	@ 0xbd
 80010d8:	641a      	str	r2, [r3, #64]	@ 0x40

		pinstate1 = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8);
 80010da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010de:	480d      	ldr	r0, [pc, #52]	@ (8001114 <HeadBase+0x64>)
 80010e0:	f000 ff28 	bl	8001f34 <HAL_GPIO_ReadPin>
 80010e4:	4603      	mov	r3, r0
 80010e6:	71fb      	strb	r3, [r7, #7]
	while(pinstate1)
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d1ed      	bne.n	80010ca <HeadBase+0x1a>

	}

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80010ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001118 <HeadBase+0x68>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2200      	movs	r2, #0
 80010f4:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 80010f6:	4b08      	ldr	r3, [pc, #32]	@ (8001118 <HeadBase+0x68>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2200      	movs	r2, #0
 80010fc:	641a      	str	r2, [r3, #64]	@ 0x40
	HAL_Delay(2000);
 80010fe:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001102:	f000 fba3 	bl	800184c <HAL_Delay>
	Motor_Steer(3);
 8001106:	2003      	movs	r0, #3
 8001108:	f7ff ff48 	bl	8000f9c <Motor_Steer>

}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	48000c00 	.word	0x48000c00
 8001118:	20000120 	.word	0x20000120

0800111c <SlotSensor_Init>:

// Counter for slot sensor
static GPIO_PinState last_state = GPIO_PIN_RESET; // Last state of the sensor
int8_t counter = 0;

void SlotSensor_Init(void) {
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
	counter = 0;
 8001120:	4b06      	ldr	r3, [pc, #24]	@ (800113c <SlotSensor_Init+0x20>)
 8001122:	2200      	movs	r2, #0
 8001124:	701a      	strb	r2, [r3, #0]
    // Initialize the last state
    last_state = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4);
 8001126:	2110      	movs	r1, #16
 8001128:	4805      	ldr	r0, [pc, #20]	@ (8001140 <SlotSensor_Init+0x24>)
 800112a:	f000 ff03 	bl	8001f34 <HAL_GPIO_ReadPin>
 800112e:	4603      	mov	r3, r0
 8001130:	461a      	mov	r2, r3
 8001132:	4b04      	ldr	r3, [pc, #16]	@ (8001144 <SlotSensor_Init+0x28>)
 8001134:	701a      	strb	r2, [r3, #0]
}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	2000032d 	.word	0x2000032d
 8001140:	48001000 	.word	0x48001000
 8001144:	2000032c 	.word	0x2000032c

08001148 <SlotSensor_Update>:

int SlotSensor_Update(void) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
    GPIO_PinState current_state = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4); // Read pin state
 800114e:	2110      	movs	r1, #16
 8001150:	480f      	ldr	r0, [pc, #60]	@ (8001190 <SlotSensor_Update+0x48>)
 8001152:	f000 feef 	bl	8001f34 <HAL_GPIO_ReadPin>
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]

    // Check for a change in state
    if (current_state == GPIO_PIN_SET && last_state == GPIO_PIN_RESET) {
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d10c      	bne.n	800117a <SlotSensor_Update+0x32>
 8001160:	4b0c      	ldr	r3, [pc, #48]	@ (8001194 <SlotSensor_Update+0x4c>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d108      	bne.n	800117a <SlotSensor_Update+0x32>
        counter++; // Increment counter on state change
 8001168:	4b0b      	ldr	r3, [pc, #44]	@ (8001198 <SlotSensor_Update+0x50>)
 800116a:	f993 3000 	ldrsb.w	r3, [r3]
 800116e:	b2db      	uxtb	r3, r3
 8001170:	3301      	adds	r3, #1
 8001172:	b2db      	uxtb	r3, r3
 8001174:	b25a      	sxtb	r2, r3
 8001176:	4b08      	ldr	r3, [pc, #32]	@ (8001198 <SlotSensor_Update+0x50>)
 8001178:	701a      	strb	r2, [r3, #0]
         // Update last state
    }
    last_state = current_state;
 800117a:	4a06      	ldr	r2, [pc, #24]	@ (8001194 <SlotSensor_Update+0x4c>)
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	7013      	strb	r3, [r2, #0]
    return counter ;
 8001180:	4b05      	ldr	r3, [pc, #20]	@ (8001198 <SlotSensor_Update+0x50>)
 8001182:	f993 3000 	ldrsb.w	r3, [r3]
}
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	48001000 	.word	0x48001000
 8001194:	2000032c 	.word	0x2000032c
 8001198:	2000032d 	.word	0x2000032d

0800119c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a2:	4b0f      	ldr	r3, [pc, #60]	@ (80011e0 <HAL_MspInit+0x44>)
 80011a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011a6:	4a0e      	ldr	r2, [pc, #56]	@ (80011e0 <HAL_MspInit+0x44>)
 80011a8:	f043 0301 	orr.w	r3, r3, #1
 80011ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80011ae:	4b0c      	ldr	r3, [pc, #48]	@ (80011e0 <HAL_MspInit+0x44>)
 80011b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	607b      	str	r3, [r7, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ba:	4b09      	ldr	r3, [pc, #36]	@ (80011e0 <HAL_MspInit+0x44>)
 80011bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011be:	4a08      	ldr	r2, [pc, #32]	@ (80011e0 <HAL_MspInit+0x44>)
 80011c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80011c6:	4b06      	ldr	r3, [pc, #24]	@ (80011e0 <HAL_MspInit+0x44>)
 80011c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ce:	603b      	str	r3, [r7, #0]
 80011d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80011d2:	f000 ff83 	bl	80020dc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40021000 	.word	0x40021000

080011e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08a      	sub	sp, #40	@ 0x28
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a26      	ldr	r2, [pc, #152]	@ (800129c <HAL_SPI_MspInit+0xb8>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d145      	bne.n	8001292 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001206:	4b26      	ldr	r3, [pc, #152]	@ (80012a0 <HAL_SPI_MspInit+0xbc>)
 8001208:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800120a:	4a25      	ldr	r2, [pc, #148]	@ (80012a0 <HAL_SPI_MspInit+0xbc>)
 800120c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001210:	6613      	str	r3, [r2, #96]	@ 0x60
 8001212:	4b23      	ldr	r3, [pc, #140]	@ (80012a0 <HAL_SPI_MspInit+0xbc>)
 8001214:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001216:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800121e:	4b20      	ldr	r3, [pc, #128]	@ (80012a0 <HAL_SPI_MspInit+0xbc>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001222:	4a1f      	ldr	r2, [pc, #124]	@ (80012a0 <HAL_SPI_MspInit+0xbc>)
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800122a:	4b1d      	ldr	r3, [pc, #116]	@ (80012a0 <HAL_SPI_MspInit+0xbc>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001236:	4b1a      	ldr	r3, [pc, #104]	@ (80012a0 <HAL_SPI_MspInit+0xbc>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800123a:	4a19      	ldr	r2, [pc, #100]	@ (80012a0 <HAL_SPI_MspInit+0xbc>)
 800123c:	f043 0302 	orr.w	r3, r3, #2
 8001240:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001242:	4b17      	ldr	r3, [pc, #92]	@ (80012a0 <HAL_SPI_MspInit+0xbc>)
 8001244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800124e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001252:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	2302      	movs	r3, #2
 8001256:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125c:	2303      	movs	r3, #3
 800125e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001260:	2305      	movs	r3, #5
 8001262:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	4619      	mov	r1, r3
 800126a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800126e:	f000 fcdf 	bl	8001c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001272:	2338      	movs	r3, #56	@ 0x38
 8001274:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001276:	2302      	movs	r3, #2
 8001278:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127a:	2300      	movs	r3, #0
 800127c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127e:	2303      	movs	r3, #3
 8001280:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001282:	2305      	movs	r3, #5
 8001284:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001286:	f107 0314 	add.w	r3, r7, #20
 800128a:	4619      	mov	r1, r3
 800128c:	4805      	ldr	r0, [pc, #20]	@ (80012a4 <HAL_SPI_MspInit+0xc0>)
 800128e:	f000 fccf 	bl	8001c30 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001292:	bf00      	nop
 8001294:	3728      	adds	r7, #40	@ 0x28
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40013000 	.word	0x40013000
 80012a0:	40021000 	.word	0x40021000
 80012a4:	48000400 	.word	0x48000400

080012a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a0a      	ldr	r2, [pc, #40]	@ (80012e0 <HAL_TIM_Base_MspInit+0x38>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d10b      	bne.n	80012d2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012ba:	4b0a      	ldr	r3, [pc, #40]	@ (80012e4 <HAL_TIM_Base_MspInit+0x3c>)
 80012bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012be:	4a09      	ldr	r2, [pc, #36]	@ (80012e4 <HAL_TIM_Base_MspInit+0x3c>)
 80012c0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80012c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80012c6:	4b07      	ldr	r3, [pc, #28]	@ (80012e4 <HAL_TIM_Base_MspInit+0x3c>)
 80012c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80012d2:	bf00      	nop
 80012d4:	3714      	adds	r7, #20
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	40012c00 	.word	0x40012c00
 80012e4:	40021000 	.word	0x40021000

080012e8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08c      	sub	sp, #48	@ 0x30
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f0:	f107 031c 	add.w	r3, r7, #28
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a33      	ldr	r2, [pc, #204]	@ (80013d4 <HAL_TIM_Encoder_MspInit+0xec>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d128      	bne.n	800135c <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800130a:	4b33      	ldr	r3, [pc, #204]	@ (80013d8 <HAL_TIM_Encoder_MspInit+0xf0>)
 800130c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800130e:	4a32      	ldr	r2, [pc, #200]	@ (80013d8 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001310:	f043 0302 	orr.w	r3, r3, #2
 8001314:	6593      	str	r3, [r2, #88]	@ 0x58
 8001316:	4b30      	ldr	r3, [pc, #192]	@ (80013d8 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	61bb      	str	r3, [r7, #24]
 8001320:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001322:	4b2d      	ldr	r3, [pc, #180]	@ (80013d8 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001326:	4a2c      	ldr	r2, [pc, #176]	@ (80013d8 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001328:	f043 0304 	orr.w	r3, r3, #4
 800132c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800132e:	4b2a      	ldr	r3, [pc, #168]	@ (80013d8 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001332:	f003 0304 	and.w	r3, r3, #4
 8001336:	617b      	str	r3, [r7, #20]
 8001338:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Motor_B_EN_CH1_Pin|Motor_B_EN_CH2_Pin;
 800133a:	23c0      	movs	r3, #192	@ 0xc0
 800133c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133e:	2302      	movs	r3, #2
 8001340:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001346:	2300      	movs	r3, #0
 8001348:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800134a:	2302      	movs	r3, #2
 800134c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800134e:	f107 031c 	add.w	r3, r7, #28
 8001352:	4619      	mov	r1, r3
 8001354:	4821      	ldr	r0, [pc, #132]	@ (80013dc <HAL_TIM_Encoder_MspInit+0xf4>)
 8001356:	f000 fc6b 	bl	8001c30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800135a:	e036      	b.n	80013ca <HAL_TIM_Encoder_MspInit+0xe2>
  else if(htim_encoder->Instance==TIM4)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a1f      	ldr	r2, [pc, #124]	@ (80013e0 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d131      	bne.n	80013ca <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001366:	4b1c      	ldr	r3, [pc, #112]	@ (80013d8 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001368:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800136a:	4a1b      	ldr	r2, [pc, #108]	@ (80013d8 <HAL_TIM_Encoder_MspInit+0xf0>)
 800136c:	f043 0304 	orr.w	r3, r3, #4
 8001370:	6593      	str	r3, [r2, #88]	@ 0x58
 8001372:	4b19      	ldr	r3, [pc, #100]	@ (80013d8 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001376:	f003 0304 	and.w	r3, r3, #4
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137e:	4b16      	ldr	r3, [pc, #88]	@ (80013d8 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001382:	4a15      	ldr	r2, [pc, #84]	@ (80013d8 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800138a:	4b13      	ldr	r3, [pc, #76]	@ (80013d8 <HAL_TIM_Encoder_MspInit+0xf0>)
 800138c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Motor_A_EN_CH2_Pin|Motor_A_EN_CH1_Pin;
 8001396:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800139a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139c:	2302      	movs	r3, #2
 800139e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a4:	2300      	movs	r3, #0
 80013a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80013a8:	230a      	movs	r3, #10
 80013aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ac:	f107 031c 	add.w	r3, r7, #28
 80013b0:	4619      	mov	r1, r3
 80013b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013b6:	f000 fc3b 	bl	8001c30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80013ba:	2200      	movs	r2, #0
 80013bc:	2100      	movs	r1, #0
 80013be:	201e      	movs	r0, #30
 80013c0:	f000 fb41 	bl	8001a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80013c4:	201e      	movs	r0, #30
 80013c6:	f000 fb58 	bl	8001a7a <HAL_NVIC_EnableIRQ>
}
 80013ca:	bf00      	nop
 80013cc:	3730      	adds	r7, #48	@ 0x30
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40000400 	.word	0x40000400
 80013d8:	40021000 	.word	0x40021000
 80013dc:	48000800 	.word	0x48000800
 80013e0:	40000800 	.word	0x40000800

080013e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b088      	sub	sp, #32
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ec:	f107 030c 	add.w	r3, r7, #12
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a11      	ldr	r2, [pc, #68]	@ (8001448 <HAL_TIM_MspPostInit+0x64>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d11b      	bne.n	800143e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001406:	4b11      	ldr	r3, [pc, #68]	@ (800144c <HAL_TIM_MspPostInit+0x68>)
 8001408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800140a:	4a10      	ldr	r2, [pc, #64]	@ (800144c <HAL_TIM_MspPostInit+0x68>)
 800140c:	f043 0304 	orr.w	r3, r3, #4
 8001410:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001412:	4b0e      	ldr	r3, [pc, #56]	@ (800144c <HAL_TIM_MspPostInit+0x68>)
 8001414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001416:	f003 0304 	and.w	r3, r3, #4
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Motor_A_CH1_Pin|Motor_A_CH2_Pin|Motor_B_CH3_Pin|Motor_A_CH4_Pin;
 800141e:	230f      	movs	r3, #15
 8001420:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001422:	2302      	movs	r3, #2
 8001424:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142a:	2300      	movs	r3, #0
 800142c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800142e:	2302      	movs	r3, #2
 8001430:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001432:	f107 030c 	add.w	r3, r7, #12
 8001436:	4619      	mov	r1, r3
 8001438:	4805      	ldr	r0, [pc, #20]	@ (8001450 <HAL_TIM_MspPostInit+0x6c>)
 800143a:	f000 fbf9 	bl	8001c30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800143e:	bf00      	nop
 8001440:	3720      	adds	r7, #32
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40012c00 	.word	0x40012c00
 800144c:	40021000 	.word	0x40021000
 8001450:	48000800 	.word	0x48000800

08001454 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b0a2      	sub	sp, #136	@ 0x88
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800146c:	f107 0320 	add.w	r3, r7, #32
 8001470:	2254      	movs	r2, #84	@ 0x54
 8001472:	2100      	movs	r1, #0
 8001474:	4618      	mov	r0, r3
 8001476:	f005 fdff 	bl	8007078 <memset>
  if(huart->Instance==UART4)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a56      	ldr	r2, [pc, #344]	@ (80015d8 <HAL_UART_MspInit+0x184>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d141      	bne.n	8001508 <HAL_UART_MspInit+0xb4>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001484:	2308      	movs	r3, #8
 8001486:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001488:	2300      	movs	r3, #0
 800148a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800148c:	f107 0320 	add.w	r3, r7, #32
 8001490:	4618      	mov	r0, r3
 8001492:	f001 fb61 	bl	8002b58 <HAL_RCCEx_PeriphCLKConfig>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800149c:	f7ff fd64 	bl	8000f68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80014a0:	4b4e      	ldr	r3, [pc, #312]	@ (80015dc <HAL_UART_MspInit+0x188>)
 80014a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014a4:	4a4d      	ldr	r2, [pc, #308]	@ (80015dc <HAL_UART_MspInit+0x188>)
 80014a6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80014aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80014ac:	4b4b      	ldr	r3, [pc, #300]	@ (80015dc <HAL_UART_MspInit+0x188>)
 80014ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014b0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80014b4:	61fb      	str	r3, [r7, #28]
 80014b6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b8:	4b48      	ldr	r3, [pc, #288]	@ (80015dc <HAL_UART_MspInit+0x188>)
 80014ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014bc:	4a47      	ldr	r2, [pc, #284]	@ (80015dc <HAL_UART_MspInit+0x188>)
 80014be:	f043 0304 	orr.w	r3, r3, #4
 80014c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014c4:	4b45      	ldr	r3, [pc, #276]	@ (80015dc <HAL_UART_MspInit+0x188>)
 80014c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014c8:	f003 0304 	and.w	r3, r3, #4
 80014cc:	61bb      	str	r3, [r7, #24]
 80014ce:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80014d0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80014d4:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d6:	2302      	movs	r3, #2
 80014d8:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014de:	2300      	movs	r3, #0
 80014e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 80014e4:	2305      	movs	r3, #5
 80014e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ea:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80014ee:	4619      	mov	r1, r3
 80014f0:	483b      	ldr	r0, [pc, #236]	@ (80015e0 <HAL_UART_MspInit+0x18c>)
 80014f2:	f000 fb9d 	bl	8001c30 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80014f6:	2200      	movs	r2, #0
 80014f8:	2100      	movs	r1, #0
 80014fa:	2034      	movs	r0, #52	@ 0x34
 80014fc:	f000 faa3 	bl	8001a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001500:	2034      	movs	r0, #52	@ 0x34
 8001502:	f000 faba 	bl	8001a7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8001506:	e063      	b.n	80015d0 <HAL_UART_MspInit+0x17c>
  else if(huart->Instance==UART5)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a35      	ldr	r2, [pc, #212]	@ (80015e4 <HAL_UART_MspInit+0x190>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d15e      	bne.n	80015d0 <HAL_UART_MspInit+0x17c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001512:	2310      	movs	r3, #16
 8001514:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001516:	2300      	movs	r3, #0
 8001518:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800151a:	f107 0320 	add.w	r3, r7, #32
 800151e:	4618      	mov	r0, r3
 8001520:	f001 fb1a 	bl	8002b58 <HAL_RCCEx_PeriphCLKConfig>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <HAL_UART_MspInit+0xda>
      Error_Handler();
 800152a:	f7ff fd1d 	bl	8000f68 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 800152e:	4b2b      	ldr	r3, [pc, #172]	@ (80015dc <HAL_UART_MspInit+0x188>)
 8001530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001532:	4a2a      	ldr	r2, [pc, #168]	@ (80015dc <HAL_UART_MspInit+0x188>)
 8001534:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001538:	6593      	str	r3, [r2, #88]	@ 0x58
 800153a:	4b28      	ldr	r3, [pc, #160]	@ (80015dc <HAL_UART_MspInit+0x188>)
 800153c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800153e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001542:	617b      	str	r3, [r7, #20]
 8001544:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001546:	4b25      	ldr	r3, [pc, #148]	@ (80015dc <HAL_UART_MspInit+0x188>)
 8001548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800154a:	4a24      	ldr	r2, [pc, #144]	@ (80015dc <HAL_UART_MspInit+0x188>)
 800154c:	f043 0304 	orr.w	r3, r3, #4
 8001550:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001552:	4b22      	ldr	r3, [pc, #136]	@ (80015dc <HAL_UART_MspInit+0x188>)
 8001554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001556:	f003 0304 	and.w	r3, r3, #4
 800155a:	613b      	str	r3, [r7, #16]
 800155c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800155e:	4b1f      	ldr	r3, [pc, #124]	@ (80015dc <HAL_UART_MspInit+0x188>)
 8001560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001562:	4a1e      	ldr	r2, [pc, #120]	@ (80015dc <HAL_UART_MspInit+0x188>)
 8001564:	f043 0308 	orr.w	r3, r3, #8
 8001568:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800156a:	4b1c      	ldr	r3, [pc, #112]	@ (80015dc <HAL_UART_MspInit+0x188>)
 800156c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800156e:	f003 0308 	and.w	r3, r3, #8
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001576:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800157a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157c:	2302      	movs	r3, #2
 800157e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001584:	2300      	movs	r3, #0
 8001586:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 800158a:	2305      	movs	r3, #5
 800158c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001590:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001594:	4619      	mov	r1, r3
 8001596:	4812      	ldr	r0, [pc, #72]	@ (80015e0 <HAL_UART_MspInit+0x18c>)
 8001598:	f000 fb4a 	bl	8001c30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800159c:	2304      	movs	r3, #4
 800159e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a0:	2302      	movs	r3, #2
 80015a2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a8:	2300      	movs	r3, #0
 80015aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80015ae:	2305      	movs	r3, #5
 80015b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015b4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80015b8:	4619      	mov	r1, r3
 80015ba:	480b      	ldr	r0, [pc, #44]	@ (80015e8 <HAL_UART_MspInit+0x194>)
 80015bc:	f000 fb38 	bl	8001c30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80015c0:	2200      	movs	r2, #0
 80015c2:	2100      	movs	r1, #0
 80015c4:	2035      	movs	r0, #53	@ 0x35
 80015c6:	f000 fa3e 	bl	8001a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80015ca:	2035      	movs	r0, #53	@ 0x35
 80015cc:	f000 fa55 	bl	8001a7a <HAL_NVIC_EnableIRQ>
}
 80015d0:	bf00      	nop
 80015d2:	3788      	adds	r7, #136	@ 0x88
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40004c00 	.word	0x40004c00
 80015dc:	40021000 	.word	0x40021000
 80015e0:	48000800 	.word	0x48000800
 80015e4:	40005000 	.word	0x40005000
 80015e8:	48000c00 	.word	0x48000c00

080015ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015f0:	bf00      	nop
 80015f2:	e7fd      	b.n	80015f0 <NMI_Handler+0x4>

080015f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015f8:	bf00      	nop
 80015fa:	e7fd      	b.n	80015f8 <HardFault_Handler+0x4>

080015fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001600:	bf00      	nop
 8001602:	e7fd      	b.n	8001600 <MemManage_Handler+0x4>

08001604 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001608:	bf00      	nop
 800160a:	e7fd      	b.n	8001608 <BusFault_Handler+0x4>

0800160c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001610:	bf00      	nop
 8001612:	e7fd      	b.n	8001610 <UsageFault_Handler+0x4>

08001614 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001642:	f000 f8e5 	bl	8001810 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
	...

0800164c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001650:	4802      	ldr	r0, [pc, #8]	@ (800165c <TIM4_IRQHandler+0x10>)
 8001652:	f002 ff03 	bl	800445c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	200001b8 	.word	0x200001b8

08001660 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001664:	4802      	ldr	r0, [pc, #8]	@ (8001670 <UART4_IRQHandler+0x10>)
 8001666:	f004 fa5b 	bl	8005b20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000204 	.word	0x20000204

08001674 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt / UART5 wake-up interrupt through EXTI line 35.
  */
void UART5_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001678:	4802      	ldr	r0, [pc, #8]	@ (8001684 <UART5_IRQHandler+0x10>)
 800167a:	f004 fa51 	bl	8005b20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000298 	.word	0x20000298

08001688 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001690:	4a14      	ldr	r2, [pc, #80]	@ (80016e4 <_sbrk+0x5c>)
 8001692:	4b15      	ldr	r3, [pc, #84]	@ (80016e8 <_sbrk+0x60>)
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800169c:	4b13      	ldr	r3, [pc, #76]	@ (80016ec <_sbrk+0x64>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d102      	bne.n	80016aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016a4:	4b11      	ldr	r3, [pc, #68]	@ (80016ec <_sbrk+0x64>)
 80016a6:	4a12      	ldr	r2, [pc, #72]	@ (80016f0 <_sbrk+0x68>)
 80016a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016aa:	4b10      	ldr	r3, [pc, #64]	@ (80016ec <_sbrk+0x64>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4413      	add	r3, r2
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d207      	bcs.n	80016c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016b8:	f005 fd0a 	bl	80070d0 <__errno>
 80016bc:	4603      	mov	r3, r0
 80016be:	220c      	movs	r2, #12
 80016c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016c2:	f04f 33ff 	mov.w	r3, #4294967295
 80016c6:	e009      	b.n	80016dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016c8:	4b08      	ldr	r3, [pc, #32]	@ (80016ec <_sbrk+0x64>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ce:	4b07      	ldr	r3, [pc, #28]	@ (80016ec <_sbrk+0x64>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4413      	add	r3, r2
 80016d6:	4a05      	ldr	r2, [pc, #20]	@ (80016ec <_sbrk+0x64>)
 80016d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016da:	68fb      	ldr	r3, [r7, #12]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3718      	adds	r7, #24
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20020000 	.word	0x20020000
 80016e8:	00000400 	.word	0x00000400
 80016ec:	20000330 	.word	0x20000330
 80016f0:	20000480 	.word	0x20000480

080016f4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016f8:	4b06      	ldr	r3, [pc, #24]	@ (8001714 <SystemInit+0x20>)
 80016fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016fe:	4a05      	ldr	r2, [pc, #20]	@ (8001714 <SystemInit+0x20>)
 8001700:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001704:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001718:	480d      	ldr	r0, [pc, #52]	@ (8001750 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800171a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800171c:	f7ff ffea 	bl	80016f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001720:	480c      	ldr	r0, [pc, #48]	@ (8001754 <LoopForever+0x6>)
  ldr r1, =_edata
 8001722:	490d      	ldr	r1, [pc, #52]	@ (8001758 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001724:	4a0d      	ldr	r2, [pc, #52]	@ (800175c <LoopForever+0xe>)
  movs r3, #0
 8001726:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001728:	e002      	b.n	8001730 <LoopCopyDataInit>

0800172a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800172a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800172c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800172e:	3304      	adds	r3, #4

08001730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001734:	d3f9      	bcc.n	800172a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001736:	4a0a      	ldr	r2, [pc, #40]	@ (8001760 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001738:	4c0a      	ldr	r4, [pc, #40]	@ (8001764 <LoopForever+0x16>)
  movs r3, #0
 800173a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800173c:	e001      	b.n	8001742 <LoopFillZerobss>

0800173e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800173e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001740:	3204      	adds	r2, #4

08001742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001744:	d3fb      	bcc.n	800173e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001746:	f005 fcc9 	bl	80070dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800174a:	f7ff f8bf 	bl	80008cc <main>

0800174e <LoopForever>:

LoopForever:
    b LoopForever
 800174e:	e7fe      	b.n	800174e <LoopForever>
  ldr   r0, =_estack
 8001750:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001754:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001758:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800175c:	08007d1c 	.word	0x08007d1c
  ldr r2, =_sbss
 8001760:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001764:	20000480 	.word	0x20000480

08001768 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001768:	e7fe      	b.n	8001768 <ADC1_2_IRQHandler>

0800176a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b082      	sub	sp, #8
 800176e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001770:	2300      	movs	r3, #0
 8001772:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001774:	2003      	movs	r0, #3
 8001776:	f000 f95b 	bl	8001a30 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800177a:	200f      	movs	r0, #15
 800177c:	f000 f80e 	bl	800179c <HAL_InitTick>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d002      	beq.n	800178c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	71fb      	strb	r3, [r7, #7]
 800178a:	e001      	b.n	8001790 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800178c:	f7ff fd06 	bl	800119c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001790:	79fb      	ldrb	r3, [r7, #7]

}
 8001792:	4618      	mov	r0, r3
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
	...

0800179c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017a4:	2300      	movs	r3, #0
 80017a6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80017a8:	4b16      	ldr	r3, [pc, #88]	@ (8001804 <HAL_InitTick+0x68>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d022      	beq.n	80017f6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80017b0:	4b15      	ldr	r3, [pc, #84]	@ (8001808 <HAL_InitTick+0x6c>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	4b13      	ldr	r3, [pc, #76]	@ (8001804 <HAL_InitTick+0x68>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80017bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80017c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c4:	4618      	mov	r0, r3
 80017c6:	f000 f966 	bl	8001a96 <HAL_SYSTICK_Config>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d10f      	bne.n	80017f0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2b0f      	cmp	r3, #15
 80017d4:	d809      	bhi.n	80017ea <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017d6:	2200      	movs	r2, #0
 80017d8:	6879      	ldr	r1, [r7, #4]
 80017da:	f04f 30ff 	mov.w	r0, #4294967295
 80017de:	f000 f932 	bl	8001a46 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017e2:	4a0a      	ldr	r2, [pc, #40]	@ (800180c <HAL_InitTick+0x70>)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6013      	str	r3, [r2, #0]
 80017e8:	e007      	b.n	80017fa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	73fb      	strb	r3, [r7, #15]
 80017ee:	e004      	b.n	80017fa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	73fb      	strb	r3, [r7, #15]
 80017f4:	e001      	b.n	80017fa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	20000028 	.word	0x20000028
 8001808:	20000020 	.word	0x20000020
 800180c:	20000024 	.word	0x20000024

08001810 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001814:	4b05      	ldr	r3, [pc, #20]	@ (800182c <HAL_IncTick+0x1c>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	4b05      	ldr	r3, [pc, #20]	@ (8001830 <HAL_IncTick+0x20>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4413      	add	r3, r2
 800181e:	4a03      	ldr	r2, [pc, #12]	@ (800182c <HAL_IncTick+0x1c>)
 8001820:	6013      	str	r3, [r2, #0]
}
 8001822:	bf00      	nop
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	20000334 	.word	0x20000334
 8001830:	20000028 	.word	0x20000028

08001834 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  return uwTick;
 8001838:	4b03      	ldr	r3, [pc, #12]	@ (8001848 <HAL_GetTick+0x14>)
 800183a:	681b      	ldr	r3, [r3, #0]
}
 800183c:	4618      	mov	r0, r3
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	20000334 	.word	0x20000334

0800184c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001854:	f7ff ffee 	bl	8001834 <HAL_GetTick>
 8001858:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001864:	d004      	beq.n	8001870 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001866:	4b09      	ldr	r3, [pc, #36]	@ (800188c <HAL_Delay+0x40>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	4413      	add	r3, r2
 800186e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001870:	bf00      	nop
 8001872:	f7ff ffdf 	bl	8001834 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	68fa      	ldr	r2, [r7, #12]
 800187e:	429a      	cmp	r2, r3
 8001880:	d8f7      	bhi.n	8001872 <HAL_Delay+0x26>
  {
  }
}
 8001882:	bf00      	nop
 8001884:	bf00      	nop
 8001886:	3710      	adds	r7, #16
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20000028 	.word	0x20000028

08001890 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018a0:	4b0c      	ldr	r3, [pc, #48]	@ (80018d4 <__NVIC_SetPriorityGrouping+0x44>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018a6:	68ba      	ldr	r2, [r7, #8]
 80018a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018ac:	4013      	ands	r3, r2
 80018ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018c2:	4a04      	ldr	r2, [pc, #16]	@ (80018d4 <__NVIC_SetPriorityGrouping+0x44>)
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	60d3      	str	r3, [r2, #12]
}
 80018c8:	bf00      	nop
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018dc:	4b04      	ldr	r3, [pc, #16]	@ (80018f0 <__NVIC_GetPriorityGrouping+0x18>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	0a1b      	lsrs	r3, r3, #8
 80018e2:	f003 0307 	and.w	r3, r3, #7
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	e000ed00 	.word	0xe000ed00

080018f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001902:	2b00      	cmp	r3, #0
 8001904:	db0b      	blt.n	800191e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	f003 021f 	and.w	r2, r3, #31
 800190c:	4907      	ldr	r1, [pc, #28]	@ (800192c <__NVIC_EnableIRQ+0x38>)
 800190e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001912:	095b      	lsrs	r3, r3, #5
 8001914:	2001      	movs	r0, #1
 8001916:	fa00 f202 	lsl.w	r2, r0, r2
 800191a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800191e:	bf00      	nop
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	e000e100 	.word	0xe000e100

08001930 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	6039      	str	r1, [r7, #0]
 800193a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800193c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001940:	2b00      	cmp	r3, #0
 8001942:	db0a      	blt.n	800195a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	b2da      	uxtb	r2, r3
 8001948:	490c      	ldr	r1, [pc, #48]	@ (800197c <__NVIC_SetPriority+0x4c>)
 800194a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194e:	0112      	lsls	r2, r2, #4
 8001950:	b2d2      	uxtb	r2, r2
 8001952:	440b      	add	r3, r1
 8001954:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001958:	e00a      	b.n	8001970 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	b2da      	uxtb	r2, r3
 800195e:	4908      	ldr	r1, [pc, #32]	@ (8001980 <__NVIC_SetPriority+0x50>)
 8001960:	79fb      	ldrb	r3, [r7, #7]
 8001962:	f003 030f 	and.w	r3, r3, #15
 8001966:	3b04      	subs	r3, #4
 8001968:	0112      	lsls	r2, r2, #4
 800196a:	b2d2      	uxtb	r2, r2
 800196c:	440b      	add	r3, r1
 800196e:	761a      	strb	r2, [r3, #24]
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	e000e100 	.word	0xe000e100
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001984:	b480      	push	{r7}
 8001986:	b089      	sub	sp, #36	@ 0x24
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	f1c3 0307 	rsb	r3, r3, #7
 800199e:	2b04      	cmp	r3, #4
 80019a0:	bf28      	it	cs
 80019a2:	2304      	movcs	r3, #4
 80019a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	3304      	adds	r3, #4
 80019aa:	2b06      	cmp	r3, #6
 80019ac:	d902      	bls.n	80019b4 <NVIC_EncodePriority+0x30>
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	3b03      	subs	r3, #3
 80019b2:	e000      	b.n	80019b6 <NVIC_EncodePriority+0x32>
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b8:	f04f 32ff 	mov.w	r2, #4294967295
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	43da      	mvns	r2, r3
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	401a      	ands	r2, r3
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019cc:	f04f 31ff 	mov.w	r1, #4294967295
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	fa01 f303 	lsl.w	r3, r1, r3
 80019d6:	43d9      	mvns	r1, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019dc:	4313      	orrs	r3, r2
         );
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3724      	adds	r7, #36	@ 0x24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
	...

080019ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019fc:	d301      	bcc.n	8001a02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019fe:	2301      	movs	r3, #1
 8001a00:	e00f      	b.n	8001a22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a02:	4a0a      	ldr	r2, [pc, #40]	@ (8001a2c <SysTick_Config+0x40>)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3b01      	subs	r3, #1
 8001a08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a0a:	210f      	movs	r1, #15
 8001a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a10:	f7ff ff8e 	bl	8001930 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a14:	4b05      	ldr	r3, [pc, #20]	@ (8001a2c <SysTick_Config+0x40>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a1a:	4b04      	ldr	r3, [pc, #16]	@ (8001a2c <SysTick_Config+0x40>)
 8001a1c:	2207      	movs	r2, #7
 8001a1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	e000e010 	.word	0xe000e010

08001a30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7ff ff29 	bl	8001890 <__NVIC_SetPriorityGrouping>
}
 8001a3e:	bf00      	nop
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b086      	sub	sp, #24
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	60b9      	str	r1, [r7, #8]
 8001a50:	607a      	str	r2, [r7, #4]
 8001a52:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a54:	f7ff ff40 	bl	80018d8 <__NVIC_GetPriorityGrouping>
 8001a58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	68b9      	ldr	r1, [r7, #8]
 8001a5e:	6978      	ldr	r0, [r7, #20]
 8001a60:	f7ff ff90 	bl	8001984 <NVIC_EncodePriority>
 8001a64:	4602      	mov	r2, r0
 8001a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a6a:	4611      	mov	r1, r2
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff ff5f 	bl	8001930 <__NVIC_SetPriority>
}
 8001a72:	bf00      	nop
 8001a74:	3718      	adds	r7, #24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b082      	sub	sp, #8
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	4603      	mov	r3, r0
 8001a82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff ff33 	bl	80018f4 <__NVIC_EnableIRQ>
}
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b082      	sub	sp, #8
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7ff ffa4 	bl	80019ec <SysTick_Config>
 8001aa4:	4603      	mov	r3, r0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b085      	sub	sp, #20
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d005      	beq.n	8001ad2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2204      	movs	r2, #4
 8001aca:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	73fb      	strb	r3, [r7, #15]
 8001ad0:	e037      	b.n	8001b42 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f022 020e 	bic.w	r2, r2, #14
 8001ae0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001aec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001af0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f022 0201 	bic.w	r2, r2, #1
 8001b00:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b06:	f003 021f 	and.w	r2, r3, #31
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0e:	2101      	movs	r1, #1
 8001b10:	fa01 f202 	lsl.w	r2, r1, r2
 8001b14:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001b1e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d00c      	beq.n	8001b42 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b32:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b36:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001b40:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2201      	movs	r2, #1
 8001b46:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3714      	adds	r7, #20
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d00d      	beq.n	8001b94 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2204      	movs	r2, #4
 8001b7c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2201      	movs	r2, #1
 8001b82:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	73fb      	strb	r3, [r7, #15]
 8001b92:	e047      	b.n	8001c24 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f022 020e 	bic.w	r2, r2, #14
 8001ba2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f022 0201 	bic.w	r2, r2, #1
 8001bb2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bbe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001bc2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bc8:	f003 021f 	and.w	r2, r3, #31
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	fa01 f202 	lsl.w	r2, r1, r2
 8001bd6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001be0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d00c      	beq.n	8001c04 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bf4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001bf8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001c02:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d003      	beq.n	8001c24 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	4798      	blx	r3
    }
  }
  return status;
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
	...

08001c30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b087      	sub	sp, #28
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001c3e:	e15a      	b.n	8001ef6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	2101      	movs	r1, #1
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f000 814c 	beq.w	8001ef0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f003 0303 	and.w	r3, r3, #3
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d005      	beq.n	8001c70 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d130      	bne.n	8001cd2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	2203      	movs	r2, #3
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	43db      	mvns	r3, r3
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	4013      	ands	r3, r2
 8001c86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	68da      	ldr	r2, [r3, #12]
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	091b      	lsrs	r3, r3, #4
 8001cbc:	f003 0201 	and.w	r2, r3, #1
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f003 0303 	and.w	r3, r3, #3
 8001cda:	2b03      	cmp	r3, #3
 8001cdc:	d017      	beq.n	8001d0e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	2203      	movs	r2, #3
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	689a      	ldr	r2, [r3, #8]
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f003 0303 	and.w	r3, r3, #3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d123      	bne.n	8001d62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	08da      	lsrs	r2, r3, #3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	3208      	adds	r2, #8
 8001d22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	220f      	movs	r2, #15
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43db      	mvns	r3, r3
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	691a      	ldr	r2, [r3, #16]
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	f003 0307 	and.w	r3, r3, #7
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	08da      	lsrs	r2, r3, #3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	3208      	adds	r2, #8
 8001d5c:	6939      	ldr	r1, [r7, #16]
 8001d5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	2203      	movs	r2, #3
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43db      	mvns	r3, r3
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	4013      	ands	r3, r2
 8001d78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f003 0203 	and.w	r2, r3, #3
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f000 80a6 	beq.w	8001ef0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da4:	4b5b      	ldr	r3, [pc, #364]	@ (8001f14 <HAL_GPIO_Init+0x2e4>)
 8001da6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001da8:	4a5a      	ldr	r2, [pc, #360]	@ (8001f14 <HAL_GPIO_Init+0x2e4>)
 8001daa:	f043 0301 	orr.w	r3, r3, #1
 8001dae:	6613      	str	r3, [r2, #96]	@ 0x60
 8001db0:	4b58      	ldr	r3, [pc, #352]	@ (8001f14 <HAL_GPIO_Init+0x2e4>)
 8001db2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	60bb      	str	r3, [r7, #8]
 8001dba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dbc:	4a56      	ldr	r2, [pc, #344]	@ (8001f18 <HAL_GPIO_Init+0x2e8>)
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	089b      	lsrs	r3, r3, #2
 8001dc2:	3302      	adds	r3, #2
 8001dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	f003 0303 	and.w	r3, r3, #3
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	220f      	movs	r2, #15
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001de6:	d01f      	beq.n	8001e28 <HAL_GPIO_Init+0x1f8>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4a4c      	ldr	r2, [pc, #304]	@ (8001f1c <HAL_GPIO_Init+0x2ec>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d019      	beq.n	8001e24 <HAL_GPIO_Init+0x1f4>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a4b      	ldr	r2, [pc, #300]	@ (8001f20 <HAL_GPIO_Init+0x2f0>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d013      	beq.n	8001e20 <HAL_GPIO_Init+0x1f0>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a4a      	ldr	r2, [pc, #296]	@ (8001f24 <HAL_GPIO_Init+0x2f4>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d00d      	beq.n	8001e1c <HAL_GPIO_Init+0x1ec>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a49      	ldr	r2, [pc, #292]	@ (8001f28 <HAL_GPIO_Init+0x2f8>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d007      	beq.n	8001e18 <HAL_GPIO_Init+0x1e8>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a48      	ldr	r2, [pc, #288]	@ (8001f2c <HAL_GPIO_Init+0x2fc>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d101      	bne.n	8001e14 <HAL_GPIO_Init+0x1e4>
 8001e10:	2305      	movs	r3, #5
 8001e12:	e00a      	b.n	8001e2a <HAL_GPIO_Init+0x1fa>
 8001e14:	2306      	movs	r3, #6
 8001e16:	e008      	b.n	8001e2a <HAL_GPIO_Init+0x1fa>
 8001e18:	2304      	movs	r3, #4
 8001e1a:	e006      	b.n	8001e2a <HAL_GPIO_Init+0x1fa>
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e004      	b.n	8001e2a <HAL_GPIO_Init+0x1fa>
 8001e20:	2302      	movs	r3, #2
 8001e22:	e002      	b.n	8001e2a <HAL_GPIO_Init+0x1fa>
 8001e24:	2301      	movs	r3, #1
 8001e26:	e000      	b.n	8001e2a <HAL_GPIO_Init+0x1fa>
 8001e28:	2300      	movs	r3, #0
 8001e2a:	697a      	ldr	r2, [r7, #20]
 8001e2c:	f002 0203 	and.w	r2, r2, #3
 8001e30:	0092      	lsls	r2, r2, #2
 8001e32:	4093      	lsls	r3, r2
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e3a:	4937      	ldr	r1, [pc, #220]	@ (8001f18 <HAL_GPIO_Init+0x2e8>)
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	089b      	lsrs	r3, r3, #2
 8001e40:	3302      	adds	r3, #2
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e48:	4b39      	ldr	r3, [pc, #228]	@ (8001f30 <HAL_GPIO_Init+0x300>)
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	43db      	mvns	r3, r3
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	4013      	ands	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d003      	beq.n	8001e6c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e6c:	4a30      	ldr	r2, [pc, #192]	@ (8001f30 <HAL_GPIO_Init+0x300>)
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e72:	4b2f      	ldr	r3, [pc, #188]	@ (8001f30 <HAL_GPIO_Init+0x300>)
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e96:	4a26      	ldr	r2, [pc, #152]	@ (8001f30 <HAL_GPIO_Init+0x300>)
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001e9c:	4b24      	ldr	r3, [pc, #144]	@ (8001f30 <HAL_GPIO_Init+0x300>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d003      	beq.n	8001ec0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ec0:	4a1b      	ldr	r2, [pc, #108]	@ (8001f30 <HAL_GPIO_Init+0x300>)
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ec6:	4b1a      	ldr	r3, [pc, #104]	@ (8001f30 <HAL_GPIO_Init+0x300>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001eea:	4a11      	ldr	r2, [pc, #68]	@ (8001f30 <HAL_GPIO_Init+0x300>)
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	fa22 f303 	lsr.w	r3, r2, r3
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f47f ae9d 	bne.w	8001c40 <HAL_GPIO_Init+0x10>
  }
}
 8001f06:	bf00      	nop
 8001f08:	bf00      	nop
 8001f0a:	371c      	adds	r7, #28
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	40021000 	.word	0x40021000
 8001f18:	40010000 	.word	0x40010000
 8001f1c:	48000400 	.word	0x48000400
 8001f20:	48000800 	.word	0x48000800
 8001f24:	48000c00 	.word	0x48000c00
 8001f28:	48001000 	.word	0x48001000
 8001f2c:	48001400 	.word	0x48001400
 8001f30:	40010400 	.word	0x40010400

08001f34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	691a      	ldr	r2, [r3, #16]
 8001f44:	887b      	ldrh	r3, [r7, #2]
 8001f46:	4013      	ands	r3, r2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d002      	beq.n	8001f52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	73fb      	strb	r3, [r7, #15]
 8001f50:	e001      	b.n	8001f56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f52:	2300      	movs	r3, #0
 8001f54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3714      	adds	r7, #20
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	807b      	strh	r3, [r7, #2]
 8001f70:	4613      	mov	r3, r2
 8001f72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f74:	787b      	ldrb	r3, [r7, #1]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f7a:	887a      	ldrh	r2, [r7, #2]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f80:	e002      	b.n	8001f88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f82:	887a      	ldrh	r2, [r7, #2]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d141      	bne.n	8002026 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fa2:	4b4b      	ldr	r3, [pc, #300]	@ (80020d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001faa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fae:	d131      	bne.n	8002014 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fb0:	4b47      	ldr	r3, [pc, #284]	@ (80020d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001fb6:	4a46      	ldr	r2, [pc, #280]	@ (80020d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001fbc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fc0:	4b43      	ldr	r3, [pc, #268]	@ (80020d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001fc8:	4a41      	ldr	r2, [pc, #260]	@ (80020d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001fd0:	4b40      	ldr	r3, [pc, #256]	@ (80020d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2232      	movs	r2, #50	@ 0x32
 8001fd6:	fb02 f303 	mul.w	r3, r2, r3
 8001fda:	4a3f      	ldr	r2, [pc, #252]	@ (80020d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe0:	0c9b      	lsrs	r3, r3, #18
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fe6:	e002      	b.n	8001fee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	3b01      	subs	r3, #1
 8001fec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fee:	4b38      	ldr	r3, [pc, #224]	@ (80020d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ff6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ffa:	d102      	bne.n	8002002 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1f2      	bne.n	8001fe8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002002:	4b33      	ldr	r3, [pc, #204]	@ (80020d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800200a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800200e:	d158      	bne.n	80020c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e057      	b.n	80020c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002014:	4b2e      	ldr	r3, [pc, #184]	@ (80020d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002016:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800201a:	4a2d      	ldr	r2, [pc, #180]	@ (80020d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800201c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002020:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002024:	e04d      	b.n	80020c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800202c:	d141      	bne.n	80020b2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800202e:	4b28      	ldr	r3, [pc, #160]	@ (80020d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002036:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800203a:	d131      	bne.n	80020a0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800203c:	4b24      	ldr	r3, [pc, #144]	@ (80020d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800203e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002042:	4a23      	ldr	r2, [pc, #140]	@ (80020d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002044:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002048:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800204c:	4b20      	ldr	r3, [pc, #128]	@ (80020d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002054:	4a1e      	ldr	r2, [pc, #120]	@ (80020d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002056:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800205a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800205c:	4b1d      	ldr	r3, [pc, #116]	@ (80020d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2232      	movs	r2, #50	@ 0x32
 8002062:	fb02 f303 	mul.w	r3, r2, r3
 8002066:	4a1c      	ldr	r2, [pc, #112]	@ (80020d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002068:	fba2 2303 	umull	r2, r3, r2, r3
 800206c:	0c9b      	lsrs	r3, r3, #18
 800206e:	3301      	adds	r3, #1
 8002070:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002072:	e002      	b.n	800207a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	3b01      	subs	r3, #1
 8002078:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800207a:	4b15      	ldr	r3, [pc, #84]	@ (80020d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002082:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002086:	d102      	bne.n	800208e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1f2      	bne.n	8002074 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800208e:	4b10      	ldr	r3, [pc, #64]	@ (80020d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002096:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800209a:	d112      	bne.n	80020c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e011      	b.n	80020c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020a0:	4b0b      	ldr	r3, [pc, #44]	@ (80020d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020a6:	4a0a      	ldr	r2, [pc, #40]	@ (80020d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80020b0:	e007      	b.n	80020c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80020b2:	4b07      	ldr	r3, [pc, #28]	@ (80020d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80020ba:	4a05      	ldr	r2, [pc, #20]	@ (80020d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020bc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020c0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3714      	adds	r7, #20
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	40007000 	.word	0x40007000
 80020d4:	20000020 	.word	0x20000020
 80020d8:	431bde83 	.word	0x431bde83

080020dc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80020e0:	4b05      	ldr	r3, [pc, #20]	@ (80020f8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	4a04      	ldr	r2, [pc, #16]	@ (80020f8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80020e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020ea:	6093      	str	r3, [r2, #8]
}
 80020ec:	bf00      	nop
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	40007000 	.word	0x40007000

080020fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b088      	sub	sp, #32
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e2fe      	b.n	800270c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	2b00      	cmp	r3, #0
 8002118:	d075      	beq.n	8002206 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800211a:	4b97      	ldr	r3, [pc, #604]	@ (8002378 <HAL_RCC_OscConfig+0x27c>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f003 030c 	and.w	r3, r3, #12
 8002122:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002124:	4b94      	ldr	r3, [pc, #592]	@ (8002378 <HAL_RCC_OscConfig+0x27c>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	f003 0303 	and.w	r3, r3, #3
 800212c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	2b0c      	cmp	r3, #12
 8002132:	d102      	bne.n	800213a <HAL_RCC_OscConfig+0x3e>
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	2b03      	cmp	r3, #3
 8002138:	d002      	beq.n	8002140 <HAL_RCC_OscConfig+0x44>
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	2b08      	cmp	r3, #8
 800213e:	d10b      	bne.n	8002158 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002140:	4b8d      	ldr	r3, [pc, #564]	@ (8002378 <HAL_RCC_OscConfig+0x27c>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d05b      	beq.n	8002204 <HAL_RCC_OscConfig+0x108>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d157      	bne.n	8002204 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e2d9      	b.n	800270c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002160:	d106      	bne.n	8002170 <HAL_RCC_OscConfig+0x74>
 8002162:	4b85      	ldr	r3, [pc, #532]	@ (8002378 <HAL_RCC_OscConfig+0x27c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a84      	ldr	r2, [pc, #528]	@ (8002378 <HAL_RCC_OscConfig+0x27c>)
 8002168:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800216c:	6013      	str	r3, [r2, #0]
 800216e:	e01d      	b.n	80021ac <HAL_RCC_OscConfig+0xb0>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002178:	d10c      	bne.n	8002194 <HAL_RCC_OscConfig+0x98>
 800217a:	4b7f      	ldr	r3, [pc, #508]	@ (8002378 <HAL_RCC_OscConfig+0x27c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a7e      	ldr	r2, [pc, #504]	@ (8002378 <HAL_RCC_OscConfig+0x27c>)
 8002180:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002184:	6013      	str	r3, [r2, #0]
 8002186:	4b7c      	ldr	r3, [pc, #496]	@ (8002378 <HAL_RCC_OscConfig+0x27c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a7b      	ldr	r2, [pc, #492]	@ (8002378 <HAL_RCC_OscConfig+0x27c>)
 800218c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002190:	6013      	str	r3, [r2, #0]
 8002192:	e00b      	b.n	80021ac <HAL_RCC_OscConfig+0xb0>
 8002194:	4b78      	ldr	r3, [pc, #480]	@ (8002378 <HAL_RCC_OscConfig+0x27c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a77      	ldr	r2, [pc, #476]	@ (8002378 <HAL_RCC_OscConfig+0x27c>)
 800219a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800219e:	6013      	str	r3, [r2, #0]
 80021a0:	4b75      	ldr	r3, [pc, #468]	@ (8002378 <HAL_RCC_OscConfig+0x27c>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a74      	ldr	r2, [pc, #464]	@ (8002378 <HAL_RCC_OscConfig+0x27c>)
 80021a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d013      	beq.n	80021dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b4:	f7ff fb3e 	bl	8001834 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021bc:	f7ff fb3a 	bl	8001834 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b64      	cmp	r3, #100	@ 0x64
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e29e      	b.n	800270c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021ce:	4b6a      	ldr	r3, [pc, #424]	@ (8002378 <HAL_RCC_OscConfig+0x27c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0f0      	beq.n	80021bc <HAL_RCC_OscConfig+0xc0>
 80021da:	e014      	b.n	8002206 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021dc:	f7ff fb2a 	bl	8001834 <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021e4:	f7ff fb26 	bl	8001834 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b64      	cmp	r3, #100	@ 0x64
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e28a      	b.n	800270c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021f6:	4b60      	ldr	r3, [pc, #384]	@ (8002378 <HAL_RCC_OscConfig+0x27c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1f0      	bne.n	80021e4 <HAL_RCC_OscConfig+0xe8>
 8002202:	e000      	b.n	8002206 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d075      	beq.n	80022fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002212:	4b59      	ldr	r3, [pc, #356]	@ (8002378 <HAL_RCC_OscConfig+0x27c>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f003 030c 	and.w	r3, r3, #12
 800221a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800221c:	4b56      	ldr	r3, [pc, #344]	@ (8002378 <HAL_RCC_OscConfig+0x27c>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	f003 0303 	and.w	r3, r3, #3
 8002224:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	2b0c      	cmp	r3, #12
 800222a:	d102      	bne.n	8002232 <HAL_RCC_OscConfig+0x136>
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	2b02      	cmp	r3, #2
 8002230:	d002      	beq.n	8002238 <HAL_RCC_OscConfig+0x13c>
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	2b04      	cmp	r3, #4
 8002236:	d11f      	bne.n	8002278 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002238:	4b4f      	ldr	r3, [pc, #316]	@ (8002378 <HAL_RCC_OscConfig+0x27c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002240:	2b00      	cmp	r3, #0
 8002242:	d005      	beq.n	8002250 <HAL_RCC_OscConfig+0x154>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d101      	bne.n	8002250 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e25d      	b.n	800270c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002250:	4b49      	ldr	r3, [pc, #292]	@ (8002378 <HAL_RCC_OscConfig+0x27c>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	691b      	ldr	r3, [r3, #16]
 800225c:	061b      	lsls	r3, r3, #24
 800225e:	4946      	ldr	r1, [pc, #280]	@ (8002378 <HAL_RCC_OscConfig+0x27c>)
 8002260:	4313      	orrs	r3, r2
 8002262:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002264:	4b45      	ldr	r3, [pc, #276]	@ (800237c <HAL_RCC_OscConfig+0x280>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff fa97 	bl	800179c <HAL_InitTick>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d043      	beq.n	80022fc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e249      	b.n	800270c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d023      	beq.n	80022c8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002280:	4b3d      	ldr	r3, [pc, #244]	@ (8002378 <HAL_RCC_OscConfig+0x27c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a3c      	ldr	r2, [pc, #240]	@ (8002378 <HAL_RCC_OscConfig+0x27c>)
 8002286:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800228a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228c:	f7ff fad2 	bl	8001834 <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002294:	f7ff face 	bl	8001834 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e232      	b.n	800270c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022a6:	4b34      	ldr	r3, [pc, #208]	@ (8002378 <HAL_RCC_OscConfig+0x27c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d0f0      	beq.n	8002294 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b2:	4b31      	ldr	r3, [pc, #196]	@ (8002378 <HAL_RCC_OscConfig+0x27c>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	061b      	lsls	r3, r3, #24
 80022c0:	492d      	ldr	r1, [pc, #180]	@ (8002378 <HAL_RCC_OscConfig+0x27c>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	604b      	str	r3, [r1, #4]
 80022c6:	e01a      	b.n	80022fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022c8:	4b2b      	ldr	r3, [pc, #172]	@ (8002378 <HAL_RCC_OscConfig+0x27c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a2a      	ldr	r2, [pc, #168]	@ (8002378 <HAL_RCC_OscConfig+0x27c>)
 80022ce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80022d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d4:	f7ff faae 	bl	8001834 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022dc:	f7ff faaa 	bl	8001834 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e20e      	b.n	800270c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022ee:	4b22      	ldr	r3, [pc, #136]	@ (8002378 <HAL_RCC_OscConfig+0x27c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1f0      	bne.n	80022dc <HAL_RCC_OscConfig+0x1e0>
 80022fa:	e000      	b.n	80022fe <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022fc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0308 	and.w	r3, r3, #8
 8002306:	2b00      	cmp	r3, #0
 8002308:	d041      	beq.n	800238e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d01c      	beq.n	800234c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002312:	4b19      	ldr	r3, [pc, #100]	@ (8002378 <HAL_RCC_OscConfig+0x27c>)
 8002314:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002318:	4a17      	ldr	r2, [pc, #92]	@ (8002378 <HAL_RCC_OscConfig+0x27c>)
 800231a:	f043 0301 	orr.w	r3, r3, #1
 800231e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002322:	f7ff fa87 	bl	8001834 <HAL_GetTick>
 8002326:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002328:	e008      	b.n	800233c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800232a:	f7ff fa83 	bl	8001834 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e1e7      	b.n	800270c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800233c:	4b0e      	ldr	r3, [pc, #56]	@ (8002378 <HAL_RCC_OscConfig+0x27c>)
 800233e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d0ef      	beq.n	800232a <HAL_RCC_OscConfig+0x22e>
 800234a:	e020      	b.n	800238e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800234c:	4b0a      	ldr	r3, [pc, #40]	@ (8002378 <HAL_RCC_OscConfig+0x27c>)
 800234e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002352:	4a09      	ldr	r2, [pc, #36]	@ (8002378 <HAL_RCC_OscConfig+0x27c>)
 8002354:	f023 0301 	bic.w	r3, r3, #1
 8002358:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800235c:	f7ff fa6a 	bl	8001834 <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002362:	e00d      	b.n	8002380 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002364:	f7ff fa66 	bl	8001834 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d906      	bls.n	8002380 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e1ca      	b.n	800270c <HAL_RCC_OscConfig+0x610>
 8002376:	bf00      	nop
 8002378:	40021000 	.word	0x40021000
 800237c:	20000024 	.word	0x20000024
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002380:	4b8c      	ldr	r3, [pc, #560]	@ (80025b4 <HAL_RCC_OscConfig+0x4b8>)
 8002382:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1ea      	bne.n	8002364 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0304 	and.w	r3, r3, #4
 8002396:	2b00      	cmp	r3, #0
 8002398:	f000 80a6 	beq.w	80024e8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800239c:	2300      	movs	r3, #0
 800239e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023a0:	4b84      	ldr	r3, [pc, #528]	@ (80025b4 <HAL_RCC_OscConfig+0x4b8>)
 80023a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d101      	bne.n	80023b0 <HAL_RCC_OscConfig+0x2b4>
 80023ac:	2301      	movs	r3, #1
 80023ae:	e000      	b.n	80023b2 <HAL_RCC_OscConfig+0x2b6>
 80023b0:	2300      	movs	r3, #0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00d      	beq.n	80023d2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023b6:	4b7f      	ldr	r3, [pc, #508]	@ (80025b4 <HAL_RCC_OscConfig+0x4b8>)
 80023b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ba:	4a7e      	ldr	r2, [pc, #504]	@ (80025b4 <HAL_RCC_OscConfig+0x4b8>)
 80023bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80023c2:	4b7c      	ldr	r3, [pc, #496]	@ (80025b4 <HAL_RCC_OscConfig+0x4b8>)
 80023c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80023ce:	2301      	movs	r3, #1
 80023d0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023d2:	4b79      	ldr	r3, [pc, #484]	@ (80025b8 <HAL_RCC_OscConfig+0x4bc>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d118      	bne.n	8002410 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023de:	4b76      	ldr	r3, [pc, #472]	@ (80025b8 <HAL_RCC_OscConfig+0x4bc>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a75      	ldr	r2, [pc, #468]	@ (80025b8 <HAL_RCC_OscConfig+0x4bc>)
 80023e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ea:	f7ff fa23 	bl	8001834 <HAL_GetTick>
 80023ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023f0:	e008      	b.n	8002404 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023f2:	f7ff fa1f 	bl	8001834 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e183      	b.n	800270c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002404:	4b6c      	ldr	r3, [pc, #432]	@ (80025b8 <HAL_RCC_OscConfig+0x4bc>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800240c:	2b00      	cmp	r3, #0
 800240e:	d0f0      	beq.n	80023f2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d108      	bne.n	800242a <HAL_RCC_OscConfig+0x32e>
 8002418:	4b66      	ldr	r3, [pc, #408]	@ (80025b4 <HAL_RCC_OscConfig+0x4b8>)
 800241a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800241e:	4a65      	ldr	r2, [pc, #404]	@ (80025b4 <HAL_RCC_OscConfig+0x4b8>)
 8002420:	f043 0301 	orr.w	r3, r3, #1
 8002424:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002428:	e024      	b.n	8002474 <HAL_RCC_OscConfig+0x378>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	2b05      	cmp	r3, #5
 8002430:	d110      	bne.n	8002454 <HAL_RCC_OscConfig+0x358>
 8002432:	4b60      	ldr	r3, [pc, #384]	@ (80025b4 <HAL_RCC_OscConfig+0x4b8>)
 8002434:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002438:	4a5e      	ldr	r2, [pc, #376]	@ (80025b4 <HAL_RCC_OscConfig+0x4b8>)
 800243a:	f043 0304 	orr.w	r3, r3, #4
 800243e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002442:	4b5c      	ldr	r3, [pc, #368]	@ (80025b4 <HAL_RCC_OscConfig+0x4b8>)
 8002444:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002448:	4a5a      	ldr	r2, [pc, #360]	@ (80025b4 <HAL_RCC_OscConfig+0x4b8>)
 800244a:	f043 0301 	orr.w	r3, r3, #1
 800244e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002452:	e00f      	b.n	8002474 <HAL_RCC_OscConfig+0x378>
 8002454:	4b57      	ldr	r3, [pc, #348]	@ (80025b4 <HAL_RCC_OscConfig+0x4b8>)
 8002456:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800245a:	4a56      	ldr	r2, [pc, #344]	@ (80025b4 <HAL_RCC_OscConfig+0x4b8>)
 800245c:	f023 0301 	bic.w	r3, r3, #1
 8002460:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002464:	4b53      	ldr	r3, [pc, #332]	@ (80025b4 <HAL_RCC_OscConfig+0x4b8>)
 8002466:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800246a:	4a52      	ldr	r2, [pc, #328]	@ (80025b4 <HAL_RCC_OscConfig+0x4b8>)
 800246c:	f023 0304 	bic.w	r3, r3, #4
 8002470:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d016      	beq.n	80024aa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800247c:	f7ff f9da 	bl	8001834 <HAL_GetTick>
 8002480:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002482:	e00a      	b.n	800249a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002484:	f7ff f9d6 	bl	8001834 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002492:	4293      	cmp	r3, r2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e138      	b.n	800270c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800249a:	4b46      	ldr	r3, [pc, #280]	@ (80025b4 <HAL_RCC_OscConfig+0x4b8>)
 800249c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d0ed      	beq.n	8002484 <HAL_RCC_OscConfig+0x388>
 80024a8:	e015      	b.n	80024d6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024aa:	f7ff f9c3 	bl	8001834 <HAL_GetTick>
 80024ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024b0:	e00a      	b.n	80024c8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024b2:	f7ff f9bf 	bl	8001834 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e121      	b.n	800270c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024c8:	4b3a      	ldr	r3, [pc, #232]	@ (80025b4 <HAL_RCC_OscConfig+0x4b8>)
 80024ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1ed      	bne.n	80024b2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024d6:	7ffb      	ldrb	r3, [r7, #31]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d105      	bne.n	80024e8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024dc:	4b35      	ldr	r3, [pc, #212]	@ (80025b4 <HAL_RCC_OscConfig+0x4b8>)
 80024de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024e0:	4a34      	ldr	r2, [pc, #208]	@ (80025b4 <HAL_RCC_OscConfig+0x4b8>)
 80024e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024e6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0320 	and.w	r3, r3, #32
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d03c      	beq.n	800256e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d01c      	beq.n	8002536 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80024fc:	4b2d      	ldr	r3, [pc, #180]	@ (80025b4 <HAL_RCC_OscConfig+0x4b8>)
 80024fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002502:	4a2c      	ldr	r2, [pc, #176]	@ (80025b4 <HAL_RCC_OscConfig+0x4b8>)
 8002504:	f043 0301 	orr.w	r3, r3, #1
 8002508:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800250c:	f7ff f992 	bl	8001834 <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002514:	f7ff f98e 	bl	8001834 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e0f2      	b.n	800270c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002526:	4b23      	ldr	r3, [pc, #140]	@ (80025b4 <HAL_RCC_OscConfig+0x4b8>)
 8002528:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d0ef      	beq.n	8002514 <HAL_RCC_OscConfig+0x418>
 8002534:	e01b      	b.n	800256e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002536:	4b1f      	ldr	r3, [pc, #124]	@ (80025b4 <HAL_RCC_OscConfig+0x4b8>)
 8002538:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800253c:	4a1d      	ldr	r2, [pc, #116]	@ (80025b4 <HAL_RCC_OscConfig+0x4b8>)
 800253e:	f023 0301 	bic.w	r3, r3, #1
 8002542:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002546:	f7ff f975 	bl	8001834 <HAL_GetTick>
 800254a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800254c:	e008      	b.n	8002560 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800254e:	f7ff f971 	bl	8001834 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e0d5      	b.n	800270c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002560:	4b14      	ldr	r3, [pc, #80]	@ (80025b4 <HAL_RCC_OscConfig+0x4b8>)
 8002562:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1ef      	bne.n	800254e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	2b00      	cmp	r3, #0
 8002574:	f000 80c9 	beq.w	800270a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002578:	4b0e      	ldr	r3, [pc, #56]	@ (80025b4 <HAL_RCC_OscConfig+0x4b8>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f003 030c 	and.w	r3, r3, #12
 8002580:	2b0c      	cmp	r3, #12
 8002582:	f000 8083 	beq.w	800268c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69db      	ldr	r3, [r3, #28]
 800258a:	2b02      	cmp	r3, #2
 800258c:	d15e      	bne.n	800264c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800258e:	4b09      	ldr	r3, [pc, #36]	@ (80025b4 <HAL_RCC_OscConfig+0x4b8>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a08      	ldr	r2, [pc, #32]	@ (80025b4 <HAL_RCC_OscConfig+0x4b8>)
 8002594:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002598:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259a:	f7ff f94b 	bl	8001834 <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025a0:	e00c      	b.n	80025bc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025a2:	f7ff f947 	bl	8001834 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d905      	bls.n	80025bc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e0ab      	b.n	800270c <HAL_RCC_OscConfig+0x610>
 80025b4:	40021000 	.word	0x40021000
 80025b8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025bc:	4b55      	ldr	r3, [pc, #340]	@ (8002714 <HAL_RCC_OscConfig+0x618>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1ec      	bne.n	80025a2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025c8:	4b52      	ldr	r3, [pc, #328]	@ (8002714 <HAL_RCC_OscConfig+0x618>)
 80025ca:	68da      	ldr	r2, [r3, #12]
 80025cc:	4b52      	ldr	r3, [pc, #328]	@ (8002718 <HAL_RCC_OscConfig+0x61c>)
 80025ce:	4013      	ands	r3, r2
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	6a11      	ldr	r1, [r2, #32]
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80025d8:	3a01      	subs	r2, #1
 80025da:	0112      	lsls	r2, r2, #4
 80025dc:	4311      	orrs	r1, r2
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80025e2:	0212      	lsls	r2, r2, #8
 80025e4:	4311      	orrs	r1, r2
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80025ea:	0852      	lsrs	r2, r2, #1
 80025ec:	3a01      	subs	r2, #1
 80025ee:	0552      	lsls	r2, r2, #21
 80025f0:	4311      	orrs	r1, r2
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80025f6:	0852      	lsrs	r2, r2, #1
 80025f8:	3a01      	subs	r2, #1
 80025fa:	0652      	lsls	r2, r2, #25
 80025fc:	4311      	orrs	r1, r2
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002602:	06d2      	lsls	r2, r2, #27
 8002604:	430a      	orrs	r2, r1
 8002606:	4943      	ldr	r1, [pc, #268]	@ (8002714 <HAL_RCC_OscConfig+0x618>)
 8002608:	4313      	orrs	r3, r2
 800260a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800260c:	4b41      	ldr	r3, [pc, #260]	@ (8002714 <HAL_RCC_OscConfig+0x618>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a40      	ldr	r2, [pc, #256]	@ (8002714 <HAL_RCC_OscConfig+0x618>)
 8002612:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002616:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002618:	4b3e      	ldr	r3, [pc, #248]	@ (8002714 <HAL_RCC_OscConfig+0x618>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	4a3d      	ldr	r2, [pc, #244]	@ (8002714 <HAL_RCC_OscConfig+0x618>)
 800261e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002622:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002624:	f7ff f906 	bl	8001834 <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800262c:	f7ff f902 	bl	8001834 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e066      	b.n	800270c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800263e:	4b35      	ldr	r3, [pc, #212]	@ (8002714 <HAL_RCC_OscConfig+0x618>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d0f0      	beq.n	800262c <HAL_RCC_OscConfig+0x530>
 800264a:	e05e      	b.n	800270a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800264c:	4b31      	ldr	r3, [pc, #196]	@ (8002714 <HAL_RCC_OscConfig+0x618>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a30      	ldr	r2, [pc, #192]	@ (8002714 <HAL_RCC_OscConfig+0x618>)
 8002652:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002656:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002658:	f7ff f8ec 	bl	8001834 <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002660:	f7ff f8e8 	bl	8001834 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e04c      	b.n	800270c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002672:	4b28      	ldr	r3, [pc, #160]	@ (8002714 <HAL_RCC_OscConfig+0x618>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1f0      	bne.n	8002660 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800267e:	4b25      	ldr	r3, [pc, #148]	@ (8002714 <HAL_RCC_OscConfig+0x618>)
 8002680:	68da      	ldr	r2, [r3, #12]
 8002682:	4924      	ldr	r1, [pc, #144]	@ (8002714 <HAL_RCC_OscConfig+0x618>)
 8002684:	4b25      	ldr	r3, [pc, #148]	@ (800271c <HAL_RCC_OscConfig+0x620>)
 8002686:	4013      	ands	r3, r2
 8002688:	60cb      	str	r3, [r1, #12]
 800268a:	e03e      	b.n	800270a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	69db      	ldr	r3, [r3, #28]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d101      	bne.n	8002698 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e039      	b.n	800270c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002698:	4b1e      	ldr	r3, [pc, #120]	@ (8002714 <HAL_RCC_OscConfig+0x618>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	f003 0203 	and.w	r2, r3, #3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d12c      	bne.n	8002706 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b6:	3b01      	subs	r3, #1
 80026b8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d123      	bne.n	8002706 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026c8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d11b      	bne.n	8002706 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80026da:	429a      	cmp	r2, r3
 80026dc:	d113      	bne.n	8002706 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e8:	085b      	lsrs	r3, r3, #1
 80026ea:	3b01      	subs	r3, #1
 80026ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d109      	bne.n	8002706 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026fc:	085b      	lsrs	r3, r3, #1
 80026fe:	3b01      	subs	r3, #1
 8002700:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002702:	429a      	cmp	r2, r3
 8002704:	d001      	beq.n	800270a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e000      	b.n	800270c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	3720      	adds	r7, #32
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40021000 	.word	0x40021000
 8002718:	019f800c 	.word	0x019f800c
 800271c:	feeefffc 	.word	0xfeeefffc

08002720 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800272a:	2300      	movs	r3, #0
 800272c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d101      	bne.n	8002738 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e11e      	b.n	8002976 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002738:	4b91      	ldr	r3, [pc, #580]	@ (8002980 <HAL_RCC_ClockConfig+0x260>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 030f 	and.w	r3, r3, #15
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	429a      	cmp	r2, r3
 8002744:	d910      	bls.n	8002768 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002746:	4b8e      	ldr	r3, [pc, #568]	@ (8002980 <HAL_RCC_ClockConfig+0x260>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f023 020f 	bic.w	r2, r3, #15
 800274e:	498c      	ldr	r1, [pc, #560]	@ (8002980 <HAL_RCC_ClockConfig+0x260>)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	4313      	orrs	r3, r2
 8002754:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002756:	4b8a      	ldr	r3, [pc, #552]	@ (8002980 <HAL_RCC_ClockConfig+0x260>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 030f 	and.w	r3, r3, #15
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	429a      	cmp	r2, r3
 8002762:	d001      	beq.n	8002768 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e106      	b.n	8002976 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	2b00      	cmp	r3, #0
 8002772:	d073      	beq.n	800285c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	2b03      	cmp	r3, #3
 800277a:	d129      	bne.n	80027d0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800277c:	4b81      	ldr	r3, [pc, #516]	@ (8002984 <HAL_RCC_ClockConfig+0x264>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d101      	bne.n	800278c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e0f4      	b.n	8002976 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800278c:	f000 f99e 	bl	8002acc <RCC_GetSysClockFreqFromPLLSource>
 8002790:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	4a7c      	ldr	r2, [pc, #496]	@ (8002988 <HAL_RCC_ClockConfig+0x268>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d93f      	bls.n	800281a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800279a:	4b7a      	ldr	r3, [pc, #488]	@ (8002984 <HAL_RCC_ClockConfig+0x264>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d009      	beq.n	80027ba <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d033      	beq.n	800281a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d12f      	bne.n	800281a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80027ba:	4b72      	ldr	r3, [pc, #456]	@ (8002984 <HAL_RCC_ClockConfig+0x264>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80027c2:	4a70      	ldr	r2, [pc, #448]	@ (8002984 <HAL_RCC_ClockConfig+0x264>)
 80027c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027c8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80027ca:	2380      	movs	r3, #128	@ 0x80
 80027cc:	617b      	str	r3, [r7, #20]
 80027ce:	e024      	b.n	800281a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d107      	bne.n	80027e8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027d8:	4b6a      	ldr	r3, [pc, #424]	@ (8002984 <HAL_RCC_ClockConfig+0x264>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d109      	bne.n	80027f8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e0c6      	b.n	8002976 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027e8:	4b66      	ldr	r3, [pc, #408]	@ (8002984 <HAL_RCC_ClockConfig+0x264>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d101      	bne.n	80027f8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e0be      	b.n	8002976 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80027f8:	f000 f8ce 	bl	8002998 <HAL_RCC_GetSysClockFreq>
 80027fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	4a61      	ldr	r2, [pc, #388]	@ (8002988 <HAL_RCC_ClockConfig+0x268>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d909      	bls.n	800281a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002806:	4b5f      	ldr	r3, [pc, #380]	@ (8002984 <HAL_RCC_ClockConfig+0x264>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800280e:	4a5d      	ldr	r2, [pc, #372]	@ (8002984 <HAL_RCC_ClockConfig+0x264>)
 8002810:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002814:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002816:	2380      	movs	r3, #128	@ 0x80
 8002818:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800281a:	4b5a      	ldr	r3, [pc, #360]	@ (8002984 <HAL_RCC_ClockConfig+0x264>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f023 0203 	bic.w	r2, r3, #3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	4957      	ldr	r1, [pc, #348]	@ (8002984 <HAL_RCC_ClockConfig+0x264>)
 8002828:	4313      	orrs	r3, r2
 800282a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800282c:	f7ff f802 	bl	8001834 <HAL_GetTick>
 8002830:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002832:	e00a      	b.n	800284a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002834:	f7fe fffe 	bl	8001834 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002842:	4293      	cmp	r3, r2
 8002844:	d901      	bls.n	800284a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e095      	b.n	8002976 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800284a:	4b4e      	ldr	r3, [pc, #312]	@ (8002984 <HAL_RCC_ClockConfig+0x264>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 020c 	and.w	r2, r3, #12
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	429a      	cmp	r2, r3
 800285a:	d1eb      	bne.n	8002834 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d023      	beq.n	80028b0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0304 	and.w	r3, r3, #4
 8002870:	2b00      	cmp	r3, #0
 8002872:	d005      	beq.n	8002880 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002874:	4b43      	ldr	r3, [pc, #268]	@ (8002984 <HAL_RCC_ClockConfig+0x264>)
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	4a42      	ldr	r2, [pc, #264]	@ (8002984 <HAL_RCC_ClockConfig+0x264>)
 800287a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800287e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0308 	and.w	r3, r3, #8
 8002888:	2b00      	cmp	r3, #0
 800288a:	d007      	beq.n	800289c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800288c:	4b3d      	ldr	r3, [pc, #244]	@ (8002984 <HAL_RCC_ClockConfig+0x264>)
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002894:	4a3b      	ldr	r2, [pc, #236]	@ (8002984 <HAL_RCC_ClockConfig+0x264>)
 8002896:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800289a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800289c:	4b39      	ldr	r3, [pc, #228]	@ (8002984 <HAL_RCC_ClockConfig+0x264>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	4936      	ldr	r1, [pc, #216]	@ (8002984 <HAL_RCC_ClockConfig+0x264>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	608b      	str	r3, [r1, #8]
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	2b80      	cmp	r3, #128	@ 0x80
 80028b4:	d105      	bne.n	80028c2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80028b6:	4b33      	ldr	r3, [pc, #204]	@ (8002984 <HAL_RCC_ClockConfig+0x264>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	4a32      	ldr	r2, [pc, #200]	@ (8002984 <HAL_RCC_ClockConfig+0x264>)
 80028bc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80028c0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028c2:	4b2f      	ldr	r3, [pc, #188]	@ (8002980 <HAL_RCC_ClockConfig+0x260>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 030f 	and.w	r3, r3, #15
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d21d      	bcs.n	800290c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002980 <HAL_RCC_ClockConfig+0x260>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f023 020f 	bic.w	r2, r3, #15
 80028d8:	4929      	ldr	r1, [pc, #164]	@ (8002980 <HAL_RCC_ClockConfig+0x260>)
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	4313      	orrs	r3, r2
 80028de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80028e0:	f7fe ffa8 	bl	8001834 <HAL_GetTick>
 80028e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028e6:	e00a      	b.n	80028fe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028e8:	f7fe ffa4 	bl	8001834 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e03b      	b.n	8002976 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028fe:	4b20      	ldr	r3, [pc, #128]	@ (8002980 <HAL_RCC_ClockConfig+0x260>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 030f 	and.w	r3, r3, #15
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	429a      	cmp	r2, r3
 800290a:	d1ed      	bne.n	80028e8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	2b00      	cmp	r3, #0
 8002916:	d008      	beq.n	800292a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002918:	4b1a      	ldr	r3, [pc, #104]	@ (8002984 <HAL_RCC_ClockConfig+0x264>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	4917      	ldr	r1, [pc, #92]	@ (8002984 <HAL_RCC_ClockConfig+0x264>)
 8002926:	4313      	orrs	r3, r2
 8002928:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0308 	and.w	r3, r3, #8
 8002932:	2b00      	cmp	r3, #0
 8002934:	d009      	beq.n	800294a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002936:	4b13      	ldr	r3, [pc, #76]	@ (8002984 <HAL_RCC_ClockConfig+0x264>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	490f      	ldr	r1, [pc, #60]	@ (8002984 <HAL_RCC_ClockConfig+0x264>)
 8002946:	4313      	orrs	r3, r2
 8002948:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800294a:	f000 f825 	bl	8002998 <HAL_RCC_GetSysClockFreq>
 800294e:	4602      	mov	r2, r0
 8002950:	4b0c      	ldr	r3, [pc, #48]	@ (8002984 <HAL_RCC_ClockConfig+0x264>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	091b      	lsrs	r3, r3, #4
 8002956:	f003 030f 	and.w	r3, r3, #15
 800295a:	490c      	ldr	r1, [pc, #48]	@ (800298c <HAL_RCC_ClockConfig+0x26c>)
 800295c:	5ccb      	ldrb	r3, [r1, r3]
 800295e:	f003 031f 	and.w	r3, r3, #31
 8002962:	fa22 f303 	lsr.w	r3, r2, r3
 8002966:	4a0a      	ldr	r2, [pc, #40]	@ (8002990 <HAL_RCC_ClockConfig+0x270>)
 8002968:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800296a:	4b0a      	ldr	r3, [pc, #40]	@ (8002994 <HAL_RCC_ClockConfig+0x274>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4618      	mov	r0, r3
 8002970:	f7fe ff14 	bl	800179c <HAL_InitTick>
 8002974:	4603      	mov	r3, r0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3718      	adds	r7, #24
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	40022000 	.word	0x40022000
 8002984:	40021000 	.word	0x40021000
 8002988:	04c4b400 	.word	0x04c4b400
 800298c:	08007bac 	.word	0x08007bac
 8002990:	20000020 	.word	0x20000020
 8002994:	20000024 	.word	0x20000024

08002998 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002998:	b480      	push	{r7}
 800299a:	b087      	sub	sp, #28
 800299c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800299e:	4b2c      	ldr	r3, [pc, #176]	@ (8002a50 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 030c 	and.w	r3, r3, #12
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	d102      	bne.n	80029b0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80029aa:	4b2a      	ldr	r3, [pc, #168]	@ (8002a54 <HAL_RCC_GetSysClockFreq+0xbc>)
 80029ac:	613b      	str	r3, [r7, #16]
 80029ae:	e047      	b.n	8002a40 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80029b0:	4b27      	ldr	r3, [pc, #156]	@ (8002a50 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f003 030c 	and.w	r3, r3, #12
 80029b8:	2b08      	cmp	r3, #8
 80029ba:	d102      	bne.n	80029c2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80029bc:	4b26      	ldr	r3, [pc, #152]	@ (8002a58 <HAL_RCC_GetSysClockFreq+0xc0>)
 80029be:	613b      	str	r3, [r7, #16]
 80029c0:	e03e      	b.n	8002a40 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80029c2:	4b23      	ldr	r3, [pc, #140]	@ (8002a50 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f003 030c 	and.w	r3, r3, #12
 80029ca:	2b0c      	cmp	r3, #12
 80029cc:	d136      	bne.n	8002a3c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029ce:	4b20      	ldr	r3, [pc, #128]	@ (8002a50 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	f003 0303 	and.w	r3, r3, #3
 80029d6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002a50 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	091b      	lsrs	r3, r3, #4
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	3301      	adds	r3, #1
 80029e4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2b03      	cmp	r3, #3
 80029ea:	d10c      	bne.n	8002a06 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029ec:	4a1a      	ldr	r2, [pc, #104]	@ (8002a58 <HAL_RCC_GetSysClockFreq+0xc0>)
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f4:	4a16      	ldr	r2, [pc, #88]	@ (8002a50 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029f6:	68d2      	ldr	r2, [r2, #12]
 80029f8:	0a12      	lsrs	r2, r2, #8
 80029fa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80029fe:	fb02 f303 	mul.w	r3, r2, r3
 8002a02:	617b      	str	r3, [r7, #20]
      break;
 8002a04:	e00c      	b.n	8002a20 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a06:	4a13      	ldr	r2, [pc, #76]	@ (8002a54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a0e:	4a10      	ldr	r2, [pc, #64]	@ (8002a50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a10:	68d2      	ldr	r2, [r2, #12]
 8002a12:	0a12      	lsrs	r2, r2, #8
 8002a14:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a18:	fb02 f303 	mul.w	r3, r2, r3
 8002a1c:	617b      	str	r3, [r7, #20]
      break;
 8002a1e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a20:	4b0b      	ldr	r3, [pc, #44]	@ (8002a50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	0e5b      	lsrs	r3, r3, #25
 8002a26:	f003 0303 	and.w	r3, r3, #3
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a38:	613b      	str	r3, [r7, #16]
 8002a3a:	e001      	b.n	8002a40 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002a40:	693b      	ldr	r3, [r7, #16]
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	371c      	adds	r7, #28
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	40021000 	.word	0x40021000
 8002a54:	00f42400 	.word	0x00f42400
 8002a58:	016e3600 	.word	0x016e3600

08002a5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a60:	4b03      	ldr	r3, [pc, #12]	@ (8002a70 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a62:	681b      	ldr	r3, [r3, #0]
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	20000020 	.word	0x20000020

08002a74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a78:	f7ff fff0 	bl	8002a5c <HAL_RCC_GetHCLKFreq>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	4b06      	ldr	r3, [pc, #24]	@ (8002a98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	0a1b      	lsrs	r3, r3, #8
 8002a84:	f003 0307 	and.w	r3, r3, #7
 8002a88:	4904      	ldr	r1, [pc, #16]	@ (8002a9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a8a:	5ccb      	ldrb	r3, [r1, r3]
 8002a8c:	f003 031f 	and.w	r3, r3, #31
 8002a90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	08007bbc 	.word	0x08007bbc

08002aa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002aa4:	f7ff ffda 	bl	8002a5c <HAL_RCC_GetHCLKFreq>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	4b06      	ldr	r3, [pc, #24]	@ (8002ac4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	0adb      	lsrs	r3, r3, #11
 8002ab0:	f003 0307 	and.w	r3, r3, #7
 8002ab4:	4904      	ldr	r1, [pc, #16]	@ (8002ac8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ab6:	5ccb      	ldrb	r3, [r1, r3]
 8002ab8:	f003 031f 	and.w	r3, r3, #31
 8002abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	08007bbc 	.word	0x08007bbc

08002acc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b087      	sub	sp, #28
 8002ad0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ad2:	4b1e      	ldr	r3, [pc, #120]	@ (8002b4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	f003 0303 	and.w	r3, r3, #3
 8002ada:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002adc:	4b1b      	ldr	r3, [pc, #108]	@ (8002b4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	091b      	lsrs	r3, r3, #4
 8002ae2:	f003 030f 	and.w	r3, r3, #15
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	2b03      	cmp	r3, #3
 8002aee:	d10c      	bne.n	8002b0a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002af0:	4a17      	ldr	r2, [pc, #92]	@ (8002b50 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af8:	4a14      	ldr	r2, [pc, #80]	@ (8002b4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002afa:	68d2      	ldr	r2, [r2, #12]
 8002afc:	0a12      	lsrs	r2, r2, #8
 8002afe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b02:	fb02 f303 	mul.w	r3, r2, r3
 8002b06:	617b      	str	r3, [r7, #20]
    break;
 8002b08:	e00c      	b.n	8002b24 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b0a:	4a12      	ldr	r2, [pc, #72]	@ (8002b54 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b12:	4a0e      	ldr	r2, [pc, #56]	@ (8002b4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b14:	68d2      	ldr	r2, [r2, #12]
 8002b16:	0a12      	lsrs	r2, r2, #8
 8002b18:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b1c:	fb02 f303 	mul.w	r3, r2, r3
 8002b20:	617b      	str	r3, [r7, #20]
    break;
 8002b22:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b24:	4b09      	ldr	r3, [pc, #36]	@ (8002b4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	0e5b      	lsrs	r3, r3, #25
 8002b2a:	f003 0303 	and.w	r3, r3, #3
 8002b2e:	3301      	adds	r3, #1
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b3c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002b3e:	687b      	ldr	r3, [r7, #4]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	371c      	adds	r7, #28
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	016e3600 	.word	0x016e3600
 8002b54:	00f42400 	.word	0x00f42400

08002b58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b60:	2300      	movs	r3, #0
 8002b62:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b64:	2300      	movs	r3, #0
 8002b66:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f000 8098 	beq.w	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b76:	2300      	movs	r3, #0
 8002b78:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b7a:	4b43      	ldr	r3, [pc, #268]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10d      	bne.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b86:	4b40      	ldr	r3, [pc, #256]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b8a:	4a3f      	ldr	r2, [pc, #252]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b90:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b92:	4b3d      	ldr	r3, [pc, #244]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b9a:	60bb      	str	r3, [r7, #8]
 8002b9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ba2:	4b3a      	ldr	r3, [pc, #232]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a39      	ldr	r2, [pc, #228]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ba8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002bae:	f7fe fe41 	bl	8001834 <HAL_GetTick>
 8002bb2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bb4:	e009      	b.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bb6:	f7fe fe3d 	bl	8001834 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d902      	bls.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	74fb      	strb	r3, [r7, #19]
        break;
 8002bc8:	e005      	b.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bca:	4b30      	ldr	r3, [pc, #192]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0ef      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002bd6:	7cfb      	ldrb	r3, [r7, #19]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d159      	bne.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002bdc:	4b2a      	ldr	r3, [pc, #168]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002be2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002be6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d01e      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d019      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002bf8:	4b23      	ldr	r3, [pc, #140]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c02:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c04:	4b20      	ldr	r3, [pc, #128]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c0a:	4a1f      	ldr	r2, [pc, #124]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c14:	4b1c      	ldr	r3, [pc, #112]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c1a:	4a1b      	ldr	r2, [pc, #108]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c24:	4a18      	ldr	r2, [pc, #96]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d016      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c36:	f7fe fdfd 	bl	8001834 <HAL_GetTick>
 8002c3a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c3c:	e00b      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c3e:	f7fe fdf9 	bl	8001834 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d902      	bls.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	74fb      	strb	r3, [r7, #19]
            break;
 8002c54:	e006      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c56:	4b0c      	ldr	r3, [pc, #48]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d0ec      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002c64:	7cfb      	ldrb	r3, [r7, #19]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10b      	bne.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c6a:	4b07      	ldr	r3, [pc, #28]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c78:	4903      	ldr	r1, [pc, #12]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002c80:	e008      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c82:	7cfb      	ldrb	r3, [r7, #19]
 8002c84:	74bb      	strb	r3, [r7, #18]
 8002c86:	e005      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002c88:	40021000 	.word	0x40021000
 8002c8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c90:	7cfb      	ldrb	r3, [r7, #19]
 8002c92:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c94:	7c7b      	ldrb	r3, [r7, #17]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d105      	bne.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c9a:	4ba7      	ldr	r3, [pc, #668]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c9e:	4aa6      	ldr	r2, [pc, #664]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ca0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ca4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00a      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cb2:	4ba1      	ldr	r3, [pc, #644]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cb8:	f023 0203 	bic.w	r2, r3, #3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	499d      	ldr	r1, [pc, #628]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00a      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cd4:	4b98      	ldr	r3, [pc, #608]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cda:	f023 020c 	bic.w	r2, r3, #12
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	4995      	ldr	r1, [pc, #596]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0304 	and.w	r3, r3, #4
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00a      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002cf6:	4b90      	ldr	r3, [pc, #576]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cfc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	498c      	ldr	r1, [pc, #560]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0308 	and.w	r3, r3, #8
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00a      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d18:	4b87      	ldr	r3, [pc, #540]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d1e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	4984      	ldr	r1, [pc, #528]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0310 	and.w	r3, r3, #16
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00a      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d3a:	4b7f      	ldr	r3, [pc, #508]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d40:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	695b      	ldr	r3, [r3, #20]
 8002d48:	497b      	ldr	r1, [pc, #492]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0320 	and.w	r3, r3, #32
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00a      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d5c:	4b76      	ldr	r3, [pc, #472]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d62:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	4973      	ldr	r1, [pc, #460]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00a      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d7e:	4b6e      	ldr	r3, [pc, #440]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d84:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	69db      	ldr	r3, [r3, #28]
 8002d8c:	496a      	ldr	r1, [pc, #424]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00a      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002da0:	4b65      	ldr	r3, [pc, #404]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002da6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	4962      	ldr	r1, [pc, #392]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00a      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002dc2:	4b5d      	ldr	r3, [pc, #372]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dc8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd0:	4959      	ldr	r1, [pc, #356]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00a      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002de4:	4b54      	ldr	r3, [pc, #336]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002de6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002dea:	f023 0203 	bic.w	r2, r3, #3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002df2:	4951      	ldr	r1, [pc, #324]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00a      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e06:	4b4c      	ldr	r3, [pc, #304]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e0c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e14:	4948      	ldr	r1, [pc, #288]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d015      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e28:	4b43      	ldr	r3, [pc, #268]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e2e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e36:	4940      	ldr	r1, [pc, #256]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e46:	d105      	bne.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e48:	4b3b      	ldr	r3, [pc, #236]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	4a3a      	ldr	r2, [pc, #232]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e52:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d015      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e60:	4b35      	ldr	r3, [pc, #212]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e66:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e6e:	4932      	ldr	r1, [pc, #200]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e7e:	d105      	bne.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e80:	4b2d      	ldr	r3, [pc, #180]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	4a2c      	ldr	r2, [pc, #176]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e8a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d015      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002e98:	4b27      	ldr	r3, [pc, #156]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e9e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ea6:	4924      	ldr	r1, [pc, #144]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eb2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002eb6:	d105      	bne.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002eb8:	4b1f      	ldr	r3, [pc, #124]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	4a1e      	ldr	r2, [pc, #120]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ebe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ec2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d015      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ed0:	4b19      	ldr	r3, [pc, #100]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ed6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ede:	4916      	ldr	r1, [pc, #88]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002eee:	d105      	bne.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ef0:	4b11      	ldr	r3, [pc, #68]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	4a10      	ldr	r2, [pc, #64]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ef6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002efa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d019      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f08:	4b0b      	ldr	r3, [pc, #44]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f0e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f16:	4908      	ldr	r1, [pc, #32]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f22:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f26:	d109      	bne.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f28:	4b03      	ldr	r3, [pc, #12]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	4a02      	ldr	r2, [pc, #8]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f32:	60d3      	str	r3, [r2, #12]
 8002f34:	e002      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002f36:	bf00      	nop
 8002f38:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d015      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002f48:	4b29      	ldr	r3, [pc, #164]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f4e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f56:	4926      	ldr	r1, [pc, #152]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f66:	d105      	bne.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002f68:	4b21      	ldr	r3, [pc, #132]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	4a20      	ldr	r2, [pc, #128]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f72:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d015      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002f80:	4b1b      	ldr	r3, [pc, #108]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f86:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f8e:	4918      	ldr	r1, [pc, #96]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f9e:	d105      	bne.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002fa0:	4b13      	ldr	r3, [pc, #76]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	4a12      	ldr	r2, [pc, #72]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fa6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002faa:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d015      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002fb8:	4b0d      	ldr	r3, [pc, #52]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002fbe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fc6:	490a      	ldr	r1, [pc, #40]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fd2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002fd6:	d105      	bne.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fd8:	4b05      	ldr	r3, [pc, #20]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	4a04      	ldr	r2, [pc, #16]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fe2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002fe4:	7cbb      	ldrb	r3, [r7, #18]
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3718      	adds	r7, #24
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	40021000 	.word	0x40021000

08002ff4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e09d      	b.n	8003142 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800300a:	2b00      	cmp	r3, #0
 800300c:	d108      	bne.n	8003020 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003016:	d009      	beq.n	800302c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	61da      	str	r2, [r3, #28]
 800301e:	e005      	b.n	800302c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d106      	bne.n	800304c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f7fe f8cc 	bl	80011e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2202      	movs	r2, #2
 8003050:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003062:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800306c:	d902      	bls.n	8003074 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800306e:	2300      	movs	r3, #0
 8003070:	60fb      	str	r3, [r7, #12]
 8003072:	e002      	b.n	800307a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003074:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003078:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003082:	d007      	beq.n	8003094 <HAL_SPI_Init+0xa0>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800308c:	d002      	beq.n	8003094 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80030a4:	431a      	orrs	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	431a      	orrs	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	f003 0301 	and.w	r3, r3, #1
 80030b8:	431a      	orrs	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030c2:	431a      	orrs	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	69db      	ldr	r3, [r3, #28]
 80030c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80030cc:	431a      	orrs	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030d6:	ea42 0103 	orr.w	r1, r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030de:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	430a      	orrs	r2, r1
 80030e8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	0c1b      	lsrs	r3, r3, #16
 80030f0:	f003 0204 	and.w	r2, r3, #4
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f8:	f003 0310 	and.w	r3, r3, #16
 80030fc:	431a      	orrs	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003102:	f003 0308 	and.w	r3, r3, #8
 8003106:	431a      	orrs	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003110:	ea42 0103 	orr.w	r1, r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	430a      	orrs	r2, r1
 8003120:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	69da      	ldr	r2, [r3, #28]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003130:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b088      	sub	sp, #32
 800314e:	af00      	add	r7, sp, #0
 8003150:	60f8      	str	r0, [r7, #12]
 8003152:	60b9      	str	r1, [r7, #8]
 8003154:	603b      	str	r3, [r7, #0]
 8003156:	4613      	mov	r3, r2
 8003158:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800315a:	2300      	movs	r3, #0
 800315c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003164:	2b01      	cmp	r3, #1
 8003166:	d101      	bne.n	800316c <HAL_SPI_Transmit+0x22>
 8003168:	2302      	movs	r3, #2
 800316a:	e15f      	b.n	800342c <HAL_SPI_Transmit+0x2e2>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003174:	f7fe fb5e 	bl	8001834 <HAL_GetTick>
 8003178:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800317a:	88fb      	ldrh	r3, [r7, #6]
 800317c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b01      	cmp	r3, #1
 8003188:	d002      	beq.n	8003190 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800318a:	2302      	movs	r3, #2
 800318c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800318e:	e148      	b.n	8003422 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d002      	beq.n	800319c <HAL_SPI_Transmit+0x52>
 8003196:	88fb      	ldrh	r3, [r7, #6]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d102      	bne.n	80031a2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031a0:	e13f      	b.n	8003422 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2203      	movs	r2, #3
 80031a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	68ba      	ldr	r2, [r7, #8]
 80031b4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	88fa      	ldrh	r2, [r7, #6]
 80031ba:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	88fa      	ldrh	r2, [r7, #6]
 80031c0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031ec:	d10f      	bne.n	800320e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800320c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003218:	2b40      	cmp	r3, #64	@ 0x40
 800321a:	d007      	beq.n	800322c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800322a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003234:	d94f      	bls.n	80032d6 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d002      	beq.n	8003244 <HAL_SPI_Transmit+0xfa>
 800323e:	8afb      	ldrh	r3, [r7, #22]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d142      	bne.n	80032ca <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003248:	881a      	ldrh	r2, [r3, #0]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003254:	1c9a      	adds	r2, r3, #2
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800325e:	b29b      	uxth	r3, r3
 8003260:	3b01      	subs	r3, #1
 8003262:	b29a      	uxth	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003268:	e02f      	b.n	80032ca <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b02      	cmp	r3, #2
 8003276:	d112      	bne.n	800329e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800327c:	881a      	ldrh	r2, [r3, #0]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003288:	1c9a      	adds	r2, r3, #2
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003292:	b29b      	uxth	r3, r3
 8003294:	3b01      	subs	r3, #1
 8003296:	b29a      	uxth	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800329c:	e015      	b.n	80032ca <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800329e:	f7fe fac9 	bl	8001834 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	683a      	ldr	r2, [r7, #0]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d803      	bhi.n	80032b6 <HAL_SPI_Transmit+0x16c>
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b4:	d102      	bne.n	80032bc <HAL_SPI_Transmit+0x172>
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d106      	bne.n	80032ca <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80032c8:	e0ab      	b.n	8003422 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1ca      	bne.n	800326a <HAL_SPI_Transmit+0x120>
 80032d4:	e080      	b.n	80033d8 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d002      	beq.n	80032e4 <HAL_SPI_Transmit+0x19a>
 80032de:	8afb      	ldrh	r3, [r7, #22]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d174      	bne.n	80033ce <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d912      	bls.n	8003314 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032f2:	881a      	ldrh	r2, [r3, #0]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032fe:	1c9a      	adds	r2, r3, #2
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003308:	b29b      	uxth	r3, r3
 800330a:	3b02      	subs	r3, #2
 800330c:	b29a      	uxth	r2, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003312:	e05c      	b.n	80033ce <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	330c      	adds	r3, #12
 800331e:	7812      	ldrb	r2, [r2, #0]
 8003320:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003326:	1c5a      	adds	r2, r3, #1
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003330:	b29b      	uxth	r3, r3
 8003332:	3b01      	subs	r3, #1
 8003334:	b29a      	uxth	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800333a:	e048      	b.n	80033ce <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b02      	cmp	r3, #2
 8003348:	d12b      	bne.n	80033a2 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800334e:	b29b      	uxth	r3, r3
 8003350:	2b01      	cmp	r3, #1
 8003352:	d912      	bls.n	800337a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003358:	881a      	ldrh	r2, [r3, #0]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003364:	1c9a      	adds	r2, r3, #2
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800336e:	b29b      	uxth	r3, r3
 8003370:	3b02      	subs	r3, #2
 8003372:	b29a      	uxth	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003378:	e029      	b.n	80033ce <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	330c      	adds	r3, #12
 8003384:	7812      	ldrb	r2, [r2, #0]
 8003386:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800338c:	1c5a      	adds	r2, r3, #1
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003396:	b29b      	uxth	r3, r3
 8003398:	3b01      	subs	r3, #1
 800339a:	b29a      	uxth	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80033a0:	e015      	b.n	80033ce <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033a2:	f7fe fa47 	bl	8001834 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d803      	bhi.n	80033ba <HAL_SPI_Transmit+0x270>
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b8:	d102      	bne.n	80033c0 <HAL_SPI_Transmit+0x276>
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d106      	bne.n	80033ce <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80033cc:	e029      	b.n	8003422 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1b1      	bne.n	800333c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	6839      	ldr	r1, [r7, #0]
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	f000 fcf9 	bl	8003dd4 <SPI_EndRxTxTransaction>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d002      	beq.n	80033ee <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2220      	movs	r2, #32
 80033ec:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10a      	bne.n	800340c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033f6:	2300      	movs	r3, #0
 80033f8:	613b      	str	r3, [r7, #16]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	613b      	str	r3, [r7, #16]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	613b      	str	r3, [r7, #16]
 800340a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003410:	2b00      	cmp	r3, #0
 8003412:	d002      	beq.n	800341a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	77fb      	strb	r3, [r7, #31]
 8003418:	e003      	b.n	8003422 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2201      	movs	r2, #1
 800341e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800342a:	7ffb      	ldrb	r3, [r7, #31]
}
 800342c:	4618      	mov	r0, r3
 800342e:	3720      	adds	r7, #32
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b088      	sub	sp, #32
 8003438:	af02      	add	r7, sp, #8
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	603b      	str	r3, [r7, #0]
 8003440:	4613      	mov	r3, r2
 8003442:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003444:	2300      	movs	r3, #0
 8003446:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800344e:	b2db      	uxtb	r3, r3
 8003450:	2b01      	cmp	r3, #1
 8003452:	d002      	beq.n	800345a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003454:	2302      	movs	r3, #2
 8003456:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003458:	e11a      	b.n	8003690 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003462:	d112      	bne.n	800348a <HAL_SPI_Receive+0x56>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d10e      	bne.n	800348a <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2204      	movs	r2, #4
 8003470:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003474:	88fa      	ldrh	r2, [r7, #6]
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	9300      	str	r3, [sp, #0]
 800347a:	4613      	mov	r3, r2
 800347c:	68ba      	ldr	r2, [r7, #8]
 800347e:	68b9      	ldr	r1, [r7, #8]
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f000 f90e 	bl	80036a2 <HAL_SPI_TransmitReceive>
 8003486:	4603      	mov	r3, r0
 8003488:	e107      	b.n	800369a <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003490:	2b01      	cmp	r3, #1
 8003492:	d101      	bne.n	8003498 <HAL_SPI_Receive+0x64>
 8003494:	2302      	movs	r3, #2
 8003496:	e100      	b.n	800369a <HAL_SPI_Receive+0x266>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034a0:	f7fe f9c8 	bl	8001834 <HAL_GetTick>
 80034a4:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d002      	beq.n	80034b2 <HAL_SPI_Receive+0x7e>
 80034ac:	88fb      	ldrh	r3, [r7, #6]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d102      	bne.n	80034b8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80034b6:	e0eb      	b.n	8003690 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2204      	movs	r2, #4
 80034bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	68ba      	ldr	r2, [r7, #8]
 80034ca:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	88fa      	ldrh	r2, [r7, #6]
 80034d0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	88fa      	ldrh	r2, [r7, #6]
 80034d8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003502:	d908      	bls.n	8003516 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685a      	ldr	r2, [r3, #4]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003512:	605a      	str	r2, [r3, #4]
 8003514:	e007      	b.n	8003526 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	685a      	ldr	r2, [r3, #4]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003524:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800352e:	d10f      	bne.n	8003550 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800353e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800354e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800355a:	2b40      	cmp	r3, #64	@ 0x40
 800355c:	d007      	beq.n	800356e <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800356c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003576:	d86f      	bhi.n	8003658 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003578:	e034      	b.n	80035e4 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f003 0301 	and.w	r3, r3, #1
 8003584:	2b01      	cmp	r3, #1
 8003586:	d117      	bne.n	80035b8 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f103 020c 	add.w	r2, r3, #12
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003594:	7812      	ldrb	r2, [r2, #0]
 8003596:	b2d2      	uxtb	r2, r2
 8003598:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800359e:	1c5a      	adds	r2, r3, #1
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	3b01      	subs	r3, #1
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80035b6:	e015      	b.n	80035e4 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035b8:	f7fe f93c 	bl	8001834 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d803      	bhi.n	80035d0 <HAL_SPI_Receive+0x19c>
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ce:	d102      	bne.n	80035d6 <HAL_SPI_Receive+0x1a2>
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d106      	bne.n	80035e4 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80035e2:	e055      	b.n	8003690 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1c4      	bne.n	800357a <HAL_SPI_Receive+0x146>
 80035f0:	e038      	b.n	8003664 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d115      	bne.n	800362c <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68da      	ldr	r2, [r3, #12]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360a:	b292      	uxth	r2, r2
 800360c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003612:	1c9a      	adds	r2, r3, #2
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800361e:	b29b      	uxth	r3, r3
 8003620:	3b01      	subs	r3, #1
 8003622:	b29a      	uxth	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800362a:	e015      	b.n	8003658 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800362c:	f7fe f902 	bl	8001834 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	683a      	ldr	r2, [r7, #0]
 8003638:	429a      	cmp	r2, r3
 800363a:	d803      	bhi.n	8003644 <HAL_SPI_Receive+0x210>
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003642:	d102      	bne.n	800364a <HAL_SPI_Receive+0x216>
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d106      	bne.n	8003658 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003656:	e01b      	b.n	8003690 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800365e:	b29b      	uxth	r3, r3
 8003660:	2b00      	cmp	r3, #0
 8003662:	d1c6      	bne.n	80035f2 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	6839      	ldr	r1, [r7, #0]
 8003668:	68f8      	ldr	r0, [r7, #12]
 800366a:	f000 fb5b 	bl	8003d24 <SPI_EndRxTransaction>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d002      	beq.n	800367a <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2220      	movs	r2, #32
 8003678:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800367e:	2b00      	cmp	r3, #0
 8003680:	d002      	beq.n	8003688 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	75fb      	strb	r3, [r7, #23]
 8003686:	e003      	b.n	8003690 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003698:	7dfb      	ldrb	r3, [r7, #23]
}
 800369a:	4618      	mov	r0, r3
 800369c:	3718      	adds	r7, #24
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b08a      	sub	sp, #40	@ 0x28
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	60f8      	str	r0, [r7, #12]
 80036aa:	60b9      	str	r1, [r7, #8]
 80036ac:	607a      	str	r2, [r7, #4]
 80036ae:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80036b0:	2301      	movs	r3, #1
 80036b2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80036b4:	2300      	movs	r3, #0
 80036b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d101      	bne.n	80036c8 <HAL_SPI_TransmitReceive+0x26>
 80036c4:	2302      	movs	r3, #2
 80036c6:	e20a      	b.n	8003ade <HAL_SPI_TransmitReceive+0x43c>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036d0:	f7fe f8b0 	bl	8001834 <HAL_GetTick>
 80036d4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80036dc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80036e4:	887b      	ldrh	r3, [r7, #2]
 80036e6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80036e8:	887b      	ldrh	r3, [r7, #2]
 80036ea:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80036ec:	7efb      	ldrb	r3, [r7, #27]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d00e      	beq.n	8003710 <HAL_SPI_TransmitReceive+0x6e>
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036f8:	d106      	bne.n	8003708 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d102      	bne.n	8003708 <HAL_SPI_TransmitReceive+0x66>
 8003702:	7efb      	ldrb	r3, [r7, #27]
 8003704:	2b04      	cmp	r3, #4
 8003706:	d003      	beq.n	8003710 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003708:	2302      	movs	r3, #2
 800370a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800370e:	e1e0      	b.n	8003ad2 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d005      	beq.n	8003722 <HAL_SPI_TransmitReceive+0x80>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d002      	beq.n	8003722 <HAL_SPI_TransmitReceive+0x80>
 800371c:	887b      	ldrh	r3, [r7, #2]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d103      	bne.n	800372a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003728:	e1d3      	b.n	8003ad2 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b04      	cmp	r3, #4
 8003734:	d003      	beq.n	800373e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2205      	movs	r2, #5
 800373a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	887a      	ldrh	r2, [r7, #2]
 800374e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	887a      	ldrh	r2, [r7, #2]
 8003756:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	68ba      	ldr	r2, [r7, #8]
 800375e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	887a      	ldrh	r2, [r7, #2]
 8003764:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	887a      	ldrh	r2, [r7, #2]
 800376a:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003780:	d802      	bhi.n	8003788 <HAL_SPI_TransmitReceive+0xe6>
 8003782:	8a3b      	ldrh	r3, [r7, #16]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d908      	bls.n	800379a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003796:	605a      	str	r2, [r3, #4]
 8003798:	e007      	b.n	80037aa <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	685a      	ldr	r2, [r3, #4]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80037a8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037b4:	2b40      	cmp	r3, #64	@ 0x40
 80037b6:	d007      	beq.n	80037c8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80037c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80037d0:	f240 8081 	bls.w	80038d6 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d002      	beq.n	80037e2 <HAL_SPI_TransmitReceive+0x140>
 80037dc:	8a7b      	ldrh	r3, [r7, #18]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d16d      	bne.n	80038be <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037e6:	881a      	ldrh	r2, [r3, #0]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037f2:	1c9a      	adds	r2, r3, #2
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	3b01      	subs	r3, #1
 8003800:	b29a      	uxth	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003806:	e05a      	b.n	80038be <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b02      	cmp	r3, #2
 8003814:	d11b      	bne.n	800384e <HAL_SPI_TransmitReceive+0x1ac>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800381a:	b29b      	uxth	r3, r3
 800381c:	2b00      	cmp	r3, #0
 800381e:	d016      	beq.n	800384e <HAL_SPI_TransmitReceive+0x1ac>
 8003820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003822:	2b01      	cmp	r3, #1
 8003824:	d113      	bne.n	800384e <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800382a:	881a      	ldrh	r2, [r3, #0]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003836:	1c9a      	adds	r2, r3, #2
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003840:	b29b      	uxth	r3, r3
 8003842:	3b01      	subs	r3, #1
 8003844:	b29a      	uxth	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800384a:	2300      	movs	r3, #0
 800384c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	2b01      	cmp	r3, #1
 800385a:	d11c      	bne.n	8003896 <HAL_SPI_TransmitReceive+0x1f4>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003862:	b29b      	uxth	r3, r3
 8003864:	2b00      	cmp	r3, #0
 8003866:	d016      	beq.n	8003896 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68da      	ldr	r2, [r3, #12]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003872:	b292      	uxth	r2, r2
 8003874:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387a:	1c9a      	adds	r2, r3, #2
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003886:	b29b      	uxth	r3, r3
 8003888:	3b01      	subs	r3, #1
 800388a:	b29a      	uxth	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003892:	2301      	movs	r3, #1
 8003894:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003896:	f7fd ffcd 	bl	8001834 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d80b      	bhi.n	80038be <HAL_SPI_TransmitReceive+0x21c>
 80038a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ac:	d007      	beq.n	80038be <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80038bc:	e109      	b.n	8003ad2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d19f      	bne.n	8003808 <HAL_SPI_TransmitReceive+0x166>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d199      	bne.n	8003808 <HAL_SPI_TransmitReceive+0x166>
 80038d4:	e0e3      	b.n	8003a9e <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d003      	beq.n	80038e6 <HAL_SPI_TransmitReceive+0x244>
 80038de:	8a7b      	ldrh	r3, [r7, #18]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	f040 80cf 	bne.w	8003a84 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d912      	bls.n	8003916 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038f4:	881a      	ldrh	r2, [r3, #0]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003900:	1c9a      	adds	r2, r3, #2
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800390a:	b29b      	uxth	r3, r3
 800390c:	3b02      	subs	r3, #2
 800390e:	b29a      	uxth	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003914:	e0b6      	b.n	8003a84 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	330c      	adds	r3, #12
 8003920:	7812      	ldrb	r2, [r2, #0]
 8003922:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003928:	1c5a      	adds	r2, r3, #1
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003932:	b29b      	uxth	r3, r3
 8003934:	3b01      	subs	r3, #1
 8003936:	b29a      	uxth	r2, r3
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800393c:	e0a2      	b.n	8003a84 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f003 0302 	and.w	r3, r3, #2
 8003948:	2b02      	cmp	r3, #2
 800394a:	d134      	bne.n	80039b6 <HAL_SPI_TransmitReceive+0x314>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003950:	b29b      	uxth	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d02f      	beq.n	80039b6 <HAL_SPI_TransmitReceive+0x314>
 8003956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003958:	2b01      	cmp	r3, #1
 800395a:	d12c      	bne.n	80039b6 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003960:	b29b      	uxth	r3, r3
 8003962:	2b01      	cmp	r3, #1
 8003964:	d912      	bls.n	800398c <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800396a:	881a      	ldrh	r2, [r3, #0]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003976:	1c9a      	adds	r2, r3, #2
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003980:	b29b      	uxth	r3, r3
 8003982:	3b02      	subs	r3, #2
 8003984:	b29a      	uxth	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800398a:	e012      	b.n	80039b2 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	330c      	adds	r3, #12
 8003996:	7812      	ldrb	r2, [r2, #0]
 8003998:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800399e:	1c5a      	adds	r2, r3, #1
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	3b01      	subs	r3, #1
 80039ac:	b29a      	uxth	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039b2:	2300      	movs	r3, #0
 80039b4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d148      	bne.n	8003a56 <HAL_SPI_TransmitReceive+0x3b4>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d042      	beq.n	8003a56 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d923      	bls.n	8003a24 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68da      	ldr	r2, [r3, #12]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e6:	b292      	uxth	r2, r2
 80039e8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ee:	1c9a      	adds	r2, r3, #2
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	3b02      	subs	r3, #2
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d81f      	bhi.n	8003a52 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	685a      	ldr	r2, [r3, #4]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003a20:	605a      	str	r2, [r3, #4]
 8003a22:	e016      	b.n	8003a52 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f103 020c 	add.w	r2, r3, #12
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a30:	7812      	ldrb	r2, [r2, #0]
 8003a32:	b2d2      	uxtb	r2, r2
 8003a34:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a3a:	1c5a      	adds	r2, r3, #1
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a52:	2301      	movs	r3, #1
 8003a54:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a56:	f7fd feed 	bl	8001834 <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d803      	bhi.n	8003a6e <HAL_SPI_TransmitReceive+0x3cc>
 8003a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a6c:	d102      	bne.n	8003a74 <HAL_SPI_TransmitReceive+0x3d2>
 8003a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d107      	bne.n	8003a84 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003a82:	e026      	b.n	8003ad2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f47f af57 	bne.w	800393e <HAL_SPI_TransmitReceive+0x29c>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f47f af50 	bne.w	800393e <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a9e:	69fa      	ldr	r2, [r7, #28]
 8003aa0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f000 f996 	bl	8003dd4 <SPI_EndRxTxTransaction>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d005      	beq.n	8003aba <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d003      	beq.n	8003aca <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ac8:	e003      	b.n	8003ad2 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003ada:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3728      	adds	r7, #40	@ 0x28
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
	...

08003ae8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b088      	sub	sp, #32
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	603b      	str	r3, [r7, #0]
 8003af4:	4613      	mov	r3, r2
 8003af6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003af8:	f7fd fe9c 	bl	8001834 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b00:	1a9b      	subs	r3, r3, r2
 8003b02:	683a      	ldr	r2, [r7, #0]
 8003b04:	4413      	add	r3, r2
 8003b06:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b08:	f7fd fe94 	bl	8001834 <HAL_GetTick>
 8003b0c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b0e:	4b39      	ldr	r3, [pc, #228]	@ (8003bf4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	015b      	lsls	r3, r3, #5
 8003b14:	0d1b      	lsrs	r3, r3, #20
 8003b16:	69fa      	ldr	r2, [r7, #28]
 8003b18:	fb02 f303 	mul.w	r3, r2, r3
 8003b1c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b1e:	e054      	b.n	8003bca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b26:	d050      	beq.n	8003bca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b28:	f7fd fe84 	bl	8001834 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	69fa      	ldr	r2, [r7, #28]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d902      	bls.n	8003b3e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d13d      	bne.n	8003bba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	685a      	ldr	r2, [r3, #4]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003b4c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b56:	d111      	bne.n	8003b7c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b60:	d004      	beq.n	8003b6c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b6a:	d107      	bne.n	8003b7c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b84:	d10f      	bne.n	8003ba6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003b94:	601a      	str	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ba4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e017      	b.n	8003bea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d101      	bne.n	8003bc4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	689a      	ldr	r2, [r3, #8]
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	68ba      	ldr	r2, [r7, #8]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	bf0c      	ite	eq
 8003bda:	2301      	moveq	r3, #1
 8003bdc:	2300      	movne	r3, #0
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	461a      	mov	r2, r3
 8003be2:	79fb      	ldrb	r3, [r7, #7]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d19b      	bne.n	8003b20 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3720      	adds	r7, #32
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	20000020 	.word	0x20000020

08003bf8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b08a      	sub	sp, #40	@ 0x28
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
 8003c04:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003c06:	2300      	movs	r3, #0
 8003c08:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003c0a:	f7fd fe13 	bl	8001834 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c12:	1a9b      	subs	r3, r3, r2
 8003c14:	683a      	ldr	r2, [r7, #0]
 8003c16:	4413      	add	r3, r2
 8003c18:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003c1a:	f7fd fe0b 	bl	8001834 <HAL_GetTick>
 8003c1e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	330c      	adds	r3, #12
 8003c26:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003c28:	4b3d      	ldr	r3, [pc, #244]	@ (8003d20 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	4413      	add	r3, r2
 8003c32:	00da      	lsls	r2, r3, #3
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	0d1b      	lsrs	r3, r3, #20
 8003c38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c3a:	fb02 f303 	mul.w	r3, r2, r3
 8003c3e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003c40:	e060      	b.n	8003d04 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003c48:	d107      	bne.n	8003c5a <SPI_WaitFifoStateUntilTimeout+0x62>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d104      	bne.n	8003c5a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003c58:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c60:	d050      	beq.n	8003d04 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c62:	f7fd fde7 	bl	8001834 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	6a3b      	ldr	r3, [r7, #32]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d902      	bls.n	8003c78 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d13d      	bne.n	8003cf4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685a      	ldr	r2, [r3, #4]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003c86:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c90:	d111      	bne.n	8003cb6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c9a:	d004      	beq.n	8003ca6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ca4:	d107      	bne.n	8003cb6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003cb4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cbe:	d10f      	bne.n	8003ce0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003cce:	601a      	str	r2, [r3, #0]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003cde:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e010      	b.n	8003d16 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	3b01      	subs	r3, #1
 8003d02:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689a      	ldr	r2, [r3, #8]
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d196      	bne.n	8003c42 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3728      	adds	r7, #40	@ 0x28
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	20000020 	.word	0x20000020

08003d24 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af02      	add	r7, sp, #8
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d38:	d111      	bne.n	8003d5e <SPI_EndRxTransaction+0x3a>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d42:	d004      	beq.n	8003d4e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d4c:	d107      	bne.n	8003d5e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d5c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	2200      	movs	r2, #0
 8003d66:	2180      	movs	r1, #128	@ 0x80
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f7ff febd 	bl	8003ae8 <SPI_WaitFlagStateUntilTimeout>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d007      	beq.n	8003d84 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d78:	f043 0220 	orr.w	r2, r3, #32
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e023      	b.n	8003dcc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d8c:	d11d      	bne.n	8003dca <SPI_EndRxTransaction+0xa6>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d96:	d004      	beq.n	8003da2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003da0:	d113      	bne.n	8003dca <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	9300      	str	r3, [sp, #0]
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	f7ff ff22 	bl	8003bf8 <SPI_WaitFifoStateUntilTimeout>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d007      	beq.n	8003dca <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dbe:	f043 0220 	orr.w	r2, r3, #32
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e000      	b.n	8003dcc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003dca:	2300      	movs	r3, #0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3710      	adds	r7, #16
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af02      	add	r7, sp, #8
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	9300      	str	r3, [sp, #0]
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003dec:	68f8      	ldr	r0, [r7, #12]
 8003dee:	f7ff ff03 	bl	8003bf8 <SPI_WaitFifoStateUntilTimeout>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d007      	beq.n	8003e08 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dfc:	f043 0220 	orr.w	r2, r3, #32
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e027      	b.n	8003e58 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	9300      	str	r3, [sp, #0]
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	2180      	movs	r1, #128	@ 0x80
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f7ff fe68 	bl	8003ae8 <SPI_WaitFlagStateUntilTimeout>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d007      	beq.n	8003e2e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e22:	f043 0220 	orr.w	r2, r3, #32
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e014      	b.n	8003e58 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003e3a:	68f8      	ldr	r0, [r7, #12]
 8003e3c:	f7ff fedc 	bl	8003bf8 <SPI_WaitFifoStateUntilTimeout>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d007      	beq.n	8003e56 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e4a:	f043 0220 	orr.w	r2, r3, #32
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e000      	b.n	8003e58 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003e56:	2300      	movs	r3, #0
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e049      	b.n	8003f06 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d106      	bne.n	8003e8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f7fd fa0e 	bl	80012a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2202      	movs	r2, #2
 8003e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	3304      	adds	r3, #4
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	4610      	mov	r0, r2
 8003ea0:	f000 fe88 	bl	8004bb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3708      	adds	r7, #8
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b082      	sub	sp, #8
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d101      	bne.n	8003f20 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e049      	b.n	8003fb4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d106      	bne.n	8003f3a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 f841 	bl	8003fbc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2202      	movs	r2, #2
 8003f3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	3304      	adds	r3, #4
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	4610      	mov	r0, r2
 8003f4e:	f000 fe31 	bl	8004bb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2201      	movs	r2, #1
 8003f56:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2201      	movs	r2, #1
 8003f86:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3708      	adds	r7, #8
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d109      	bne.n	8003ff4 <HAL_TIM_PWM_Start+0x24>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	bf14      	ite	ne
 8003fec:	2301      	movne	r3, #1
 8003fee:	2300      	moveq	r3, #0
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	e03c      	b.n	800406e <HAL_TIM_PWM_Start+0x9e>
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	2b04      	cmp	r3, #4
 8003ff8:	d109      	bne.n	800400e <HAL_TIM_PWM_Start+0x3e>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b01      	cmp	r3, #1
 8004004:	bf14      	ite	ne
 8004006:	2301      	movne	r3, #1
 8004008:	2300      	moveq	r3, #0
 800400a:	b2db      	uxtb	r3, r3
 800400c:	e02f      	b.n	800406e <HAL_TIM_PWM_Start+0x9e>
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	2b08      	cmp	r3, #8
 8004012:	d109      	bne.n	8004028 <HAL_TIM_PWM_Start+0x58>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800401a:	b2db      	uxtb	r3, r3
 800401c:	2b01      	cmp	r3, #1
 800401e:	bf14      	ite	ne
 8004020:	2301      	movne	r3, #1
 8004022:	2300      	moveq	r3, #0
 8004024:	b2db      	uxtb	r3, r3
 8004026:	e022      	b.n	800406e <HAL_TIM_PWM_Start+0x9e>
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	2b0c      	cmp	r3, #12
 800402c:	d109      	bne.n	8004042 <HAL_TIM_PWM_Start+0x72>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b01      	cmp	r3, #1
 8004038:	bf14      	ite	ne
 800403a:	2301      	movne	r3, #1
 800403c:	2300      	moveq	r3, #0
 800403e:	b2db      	uxtb	r3, r3
 8004040:	e015      	b.n	800406e <HAL_TIM_PWM_Start+0x9e>
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	2b10      	cmp	r3, #16
 8004046:	d109      	bne.n	800405c <HAL_TIM_PWM_Start+0x8c>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800404e:	b2db      	uxtb	r3, r3
 8004050:	2b01      	cmp	r3, #1
 8004052:	bf14      	ite	ne
 8004054:	2301      	movne	r3, #1
 8004056:	2300      	moveq	r3, #0
 8004058:	b2db      	uxtb	r3, r3
 800405a:	e008      	b.n	800406e <HAL_TIM_PWM_Start+0x9e>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b01      	cmp	r3, #1
 8004066:	bf14      	ite	ne
 8004068:	2301      	movne	r3, #1
 800406a:	2300      	moveq	r3, #0
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e0a6      	b.n	80041c4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d104      	bne.n	8004086 <HAL_TIM_PWM_Start+0xb6>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2202      	movs	r2, #2
 8004080:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004084:	e023      	b.n	80040ce <HAL_TIM_PWM_Start+0xfe>
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	2b04      	cmp	r3, #4
 800408a:	d104      	bne.n	8004096 <HAL_TIM_PWM_Start+0xc6>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2202      	movs	r2, #2
 8004090:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004094:	e01b      	b.n	80040ce <HAL_TIM_PWM_Start+0xfe>
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	2b08      	cmp	r3, #8
 800409a:	d104      	bne.n	80040a6 <HAL_TIM_PWM_Start+0xd6>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2202      	movs	r2, #2
 80040a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040a4:	e013      	b.n	80040ce <HAL_TIM_PWM_Start+0xfe>
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	2b0c      	cmp	r3, #12
 80040aa:	d104      	bne.n	80040b6 <HAL_TIM_PWM_Start+0xe6>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2202      	movs	r2, #2
 80040b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80040b4:	e00b      	b.n	80040ce <HAL_TIM_PWM_Start+0xfe>
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	2b10      	cmp	r3, #16
 80040ba:	d104      	bne.n	80040c6 <HAL_TIM_PWM_Start+0xf6>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2202      	movs	r2, #2
 80040c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040c4:	e003      	b.n	80040ce <HAL_TIM_PWM_Start+0xfe>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2202      	movs	r2, #2
 80040ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2201      	movs	r2, #1
 80040d4:	6839      	ldr	r1, [r7, #0]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f001 f9e6 	bl	80054a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a3a      	ldr	r2, [pc, #232]	@ (80041cc <HAL_TIM_PWM_Start+0x1fc>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d018      	beq.n	8004118 <HAL_TIM_PWM_Start+0x148>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a39      	ldr	r2, [pc, #228]	@ (80041d0 <HAL_TIM_PWM_Start+0x200>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d013      	beq.n	8004118 <HAL_TIM_PWM_Start+0x148>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a37      	ldr	r2, [pc, #220]	@ (80041d4 <HAL_TIM_PWM_Start+0x204>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d00e      	beq.n	8004118 <HAL_TIM_PWM_Start+0x148>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a36      	ldr	r2, [pc, #216]	@ (80041d8 <HAL_TIM_PWM_Start+0x208>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d009      	beq.n	8004118 <HAL_TIM_PWM_Start+0x148>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a34      	ldr	r2, [pc, #208]	@ (80041dc <HAL_TIM_PWM_Start+0x20c>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d004      	beq.n	8004118 <HAL_TIM_PWM_Start+0x148>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a33      	ldr	r2, [pc, #204]	@ (80041e0 <HAL_TIM_PWM_Start+0x210>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d101      	bne.n	800411c <HAL_TIM_PWM_Start+0x14c>
 8004118:	2301      	movs	r3, #1
 800411a:	e000      	b.n	800411e <HAL_TIM_PWM_Start+0x14e>
 800411c:	2300      	movs	r3, #0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d007      	beq.n	8004132 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004130:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a25      	ldr	r2, [pc, #148]	@ (80041cc <HAL_TIM_PWM_Start+0x1fc>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d022      	beq.n	8004182 <HAL_TIM_PWM_Start+0x1b2>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004144:	d01d      	beq.n	8004182 <HAL_TIM_PWM_Start+0x1b2>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a26      	ldr	r2, [pc, #152]	@ (80041e4 <HAL_TIM_PWM_Start+0x214>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d018      	beq.n	8004182 <HAL_TIM_PWM_Start+0x1b2>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a24      	ldr	r2, [pc, #144]	@ (80041e8 <HAL_TIM_PWM_Start+0x218>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d013      	beq.n	8004182 <HAL_TIM_PWM_Start+0x1b2>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a23      	ldr	r2, [pc, #140]	@ (80041ec <HAL_TIM_PWM_Start+0x21c>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d00e      	beq.n	8004182 <HAL_TIM_PWM_Start+0x1b2>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a19      	ldr	r2, [pc, #100]	@ (80041d0 <HAL_TIM_PWM_Start+0x200>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d009      	beq.n	8004182 <HAL_TIM_PWM_Start+0x1b2>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a18      	ldr	r2, [pc, #96]	@ (80041d4 <HAL_TIM_PWM_Start+0x204>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d004      	beq.n	8004182 <HAL_TIM_PWM_Start+0x1b2>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a18      	ldr	r2, [pc, #96]	@ (80041e0 <HAL_TIM_PWM_Start+0x210>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d115      	bne.n	80041ae <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	689a      	ldr	r2, [r3, #8]
 8004188:	4b19      	ldr	r3, [pc, #100]	@ (80041f0 <HAL_TIM_PWM_Start+0x220>)
 800418a:	4013      	ands	r3, r2
 800418c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2b06      	cmp	r3, #6
 8004192:	d015      	beq.n	80041c0 <HAL_TIM_PWM_Start+0x1f0>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800419a:	d011      	beq.n	80041c0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f042 0201 	orr.w	r2, r2, #1
 80041aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041ac:	e008      	b.n	80041c0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f042 0201 	orr.w	r2, r2, #1
 80041bc:	601a      	str	r2, [r3, #0]
 80041be:	e000      	b.n	80041c2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041c0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3710      	adds	r7, #16
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	40012c00 	.word	0x40012c00
 80041d0:	40013400 	.word	0x40013400
 80041d4:	40014000 	.word	0x40014000
 80041d8:	40014400 	.word	0x40014400
 80041dc:	40014800 	.word	0x40014800
 80041e0:	40015000 	.word	0x40015000
 80041e4:	40000400 	.word	0x40000400
 80041e8:	40000800 	.word	0x40000800
 80041ec:	40000c00 	.word	0x40000c00
 80041f0:	00010007 	.word	0x00010007

080041f4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b086      	sub	sp, #24
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d101      	bne.n	8004208 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e097      	b.n	8004338 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800420e:	b2db      	uxtb	r3, r3
 8004210:	2b00      	cmp	r3, #0
 8004212:	d106      	bne.n	8004222 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f7fd f863 	bl	80012e8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2202      	movs	r2, #2
 8004226:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	6812      	ldr	r2, [r2, #0]
 8004234:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8004238:	f023 0307 	bic.w	r3, r3, #7
 800423c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	3304      	adds	r3, #4
 8004246:	4619      	mov	r1, r3
 8004248:	4610      	mov	r0, r2
 800424a:	f000 fcb3 	bl	8004bb4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	6a1b      	ldr	r3, [r3, #32]
 8004264:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	4313      	orrs	r3, r2
 800426e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004276:	f023 0303 	bic.w	r3, r3, #3
 800427a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	689a      	ldr	r2, [r3, #8]
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	021b      	lsls	r3, r3, #8
 8004286:	4313      	orrs	r3, r2
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	4313      	orrs	r3, r2
 800428c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004294:	f023 030c 	bic.w	r3, r3, #12
 8004298:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80042a0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	68da      	ldr	r2, [r3, #12]
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	69db      	ldr	r3, [r3, #28]
 80042ae:	021b      	lsls	r3, r3, #8
 80042b0:	4313      	orrs	r3, r2
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	011a      	lsls	r2, r3, #4
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	031b      	lsls	r3, r3, #12
 80042c4:	4313      	orrs	r3, r2
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80042d2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80042da:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	695b      	ldr	r3, [r3, #20]
 80042e4:	011b      	lsls	r3, r3, #4
 80042e6:	4313      	orrs	r3, r2
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2201      	movs	r2, #1
 800431a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2201      	movs	r2, #1
 8004322:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2201      	movs	r2, #1
 800432a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2201      	movs	r2, #1
 8004332:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	3718      	adds	r7, #24
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004350:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004358:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004360:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004368:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d110      	bne.n	8004392 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004370:	7bfb      	ldrb	r3, [r7, #15]
 8004372:	2b01      	cmp	r3, #1
 8004374:	d102      	bne.n	800437c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004376:	7b7b      	ldrb	r3, [r7, #13]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d001      	beq.n	8004380 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e069      	b.n	8004454 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2202      	movs	r2, #2
 8004384:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2202      	movs	r2, #2
 800438c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004390:	e031      	b.n	80043f6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	2b04      	cmp	r3, #4
 8004396:	d110      	bne.n	80043ba <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004398:	7bbb      	ldrb	r3, [r7, #14]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d102      	bne.n	80043a4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800439e:	7b3b      	ldrb	r3, [r7, #12]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d001      	beq.n	80043a8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e055      	b.n	8004454 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2202      	movs	r2, #2
 80043ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2202      	movs	r2, #2
 80043b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80043b8:	e01d      	b.n	80043f6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80043ba:	7bfb      	ldrb	r3, [r7, #15]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d108      	bne.n	80043d2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80043c0:	7bbb      	ldrb	r3, [r7, #14]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d105      	bne.n	80043d2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80043c6:	7b7b      	ldrb	r3, [r7, #13]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d102      	bne.n	80043d2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80043cc:	7b3b      	ldrb	r3, [r7, #12]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d001      	beq.n	80043d6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e03e      	b.n	8004454 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2202      	movs	r2, #2
 80043da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2202      	movs	r2, #2
 80043e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2202      	movs	r2, #2
 80043ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2202      	movs	r2, #2
 80043f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d003      	beq.n	8004404 <HAL_TIM_Encoder_Start+0xc4>
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	2b04      	cmp	r3, #4
 8004400:	d008      	beq.n	8004414 <HAL_TIM_Encoder_Start+0xd4>
 8004402:	e00f      	b.n	8004424 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2201      	movs	r2, #1
 800440a:	2100      	movs	r1, #0
 800440c:	4618      	mov	r0, r3
 800440e:	f001 f84b 	bl	80054a8 <TIM_CCxChannelCmd>
      break;
 8004412:	e016      	b.n	8004442 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2201      	movs	r2, #1
 800441a:	2104      	movs	r1, #4
 800441c:	4618      	mov	r0, r3
 800441e:	f001 f843 	bl	80054a8 <TIM_CCxChannelCmd>
      break;
 8004422:	e00e      	b.n	8004442 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2201      	movs	r2, #1
 800442a:	2100      	movs	r1, #0
 800442c:	4618      	mov	r0, r3
 800442e:	f001 f83b 	bl	80054a8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2201      	movs	r2, #1
 8004438:	2104      	movs	r1, #4
 800443a:	4618      	mov	r0, r3
 800443c:	f001 f834 	bl	80054a8 <TIM_CCxChannelCmd>
      break;
 8004440:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f042 0201 	orr.w	r2, r2, #1
 8004450:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3710      	adds	r7, #16
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	2b00      	cmp	r3, #0
 800447c:	d020      	beq.n	80044c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f003 0302 	and.w	r3, r3, #2
 8004484:	2b00      	cmp	r3, #0
 8004486:	d01b      	beq.n	80044c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f06f 0202 	mvn.w	r2, #2
 8004490:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2201      	movs	r2, #1
 8004496:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	f003 0303 	and.w	r3, r3, #3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d003      	beq.n	80044ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 fb66 	bl	8004b78 <HAL_TIM_IC_CaptureCallback>
 80044ac:	e005      	b.n	80044ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 fb58 	bl	8004b64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f000 fb69 	bl	8004b8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	f003 0304 	and.w	r3, r3, #4
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d020      	beq.n	800450c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f003 0304 	and.w	r3, r3, #4
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d01b      	beq.n	800450c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f06f 0204 	mvn.w	r2, #4
 80044dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2202      	movs	r2, #2
 80044e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d003      	beq.n	80044fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 fb40 	bl	8004b78 <HAL_TIM_IC_CaptureCallback>
 80044f8:	e005      	b.n	8004506 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 fb32 	bl	8004b64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 fb43 	bl	8004b8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	f003 0308 	and.w	r3, r3, #8
 8004512:	2b00      	cmp	r3, #0
 8004514:	d020      	beq.n	8004558 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f003 0308 	and.w	r3, r3, #8
 800451c:	2b00      	cmp	r3, #0
 800451e:	d01b      	beq.n	8004558 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f06f 0208 	mvn.w	r2, #8
 8004528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2204      	movs	r2, #4
 800452e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	f003 0303 	and.w	r3, r3, #3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d003      	beq.n	8004546 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 fb1a 	bl	8004b78 <HAL_TIM_IC_CaptureCallback>
 8004544:	e005      	b.n	8004552 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 fb0c 	bl	8004b64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 fb1d 	bl	8004b8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	f003 0310 	and.w	r3, r3, #16
 800455e:	2b00      	cmp	r3, #0
 8004560:	d020      	beq.n	80045a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f003 0310 	and.w	r3, r3, #16
 8004568:	2b00      	cmp	r3, #0
 800456a:	d01b      	beq.n	80045a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f06f 0210 	mvn.w	r2, #16
 8004574:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2208      	movs	r2, #8
 800457a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	69db      	ldr	r3, [r3, #28]
 8004582:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004586:	2b00      	cmp	r3, #0
 8004588:	d003      	beq.n	8004592 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 faf4 	bl	8004b78 <HAL_TIM_IC_CaptureCallback>
 8004590:	e005      	b.n	800459e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 fae6 	bl	8004b64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 faf7 	bl	8004b8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00c      	beq.n	80045c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d007      	beq.n	80045c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f06f 0201 	mvn.w	r2, #1
 80045c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 fac4 	bl	8004b50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d104      	bne.n	80045dc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00c      	beq.n	80045f6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d007      	beq.n	80045f6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80045ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f001 f8b3 	bl	800575c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00c      	beq.n	800461a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004606:	2b00      	cmp	r3, #0
 8004608:	d007      	beq.n	800461a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004612:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f001 f8ab 	bl	8005770 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00c      	beq.n	800463e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800462a:	2b00      	cmp	r3, #0
 800462c:	d007      	beq.n	800463e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004636:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f000 fab1 	bl	8004ba0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	f003 0320 	and.w	r3, r3, #32
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00c      	beq.n	8004662 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f003 0320 	and.w	r3, r3, #32
 800464e:	2b00      	cmp	r3, #0
 8004650:	d007      	beq.n	8004662 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f06f 0220 	mvn.w	r2, #32
 800465a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f001 f873 	bl	8005748 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00c      	beq.n	8004686 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d007      	beq.n	8004686 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800467e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f001 f87f 	bl	8005784 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00c      	beq.n	80046aa <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d007      	beq.n	80046aa <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80046a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f001 f877 	bl	8005798 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00c      	beq.n	80046ce <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d007      	beq.n	80046ce <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80046c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f001 f86f 	bl	80057ac <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d00c      	beq.n	80046f2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d007      	beq.n	80046f2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80046ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f001 f867 	bl	80057c0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046f2:	bf00      	nop
 80046f4:	3710      	adds	r7, #16
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
	...

080046fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b086      	sub	sp, #24
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004708:	2300      	movs	r3, #0
 800470a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004712:	2b01      	cmp	r3, #1
 8004714:	d101      	bne.n	800471a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004716:	2302      	movs	r3, #2
 8004718:	e0ff      	b.n	800491a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2201      	movs	r2, #1
 800471e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2b14      	cmp	r3, #20
 8004726:	f200 80f0 	bhi.w	800490a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800472a:	a201      	add	r2, pc, #4	@ (adr r2, 8004730 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800472c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004730:	08004785 	.word	0x08004785
 8004734:	0800490b 	.word	0x0800490b
 8004738:	0800490b 	.word	0x0800490b
 800473c:	0800490b 	.word	0x0800490b
 8004740:	080047c5 	.word	0x080047c5
 8004744:	0800490b 	.word	0x0800490b
 8004748:	0800490b 	.word	0x0800490b
 800474c:	0800490b 	.word	0x0800490b
 8004750:	08004807 	.word	0x08004807
 8004754:	0800490b 	.word	0x0800490b
 8004758:	0800490b 	.word	0x0800490b
 800475c:	0800490b 	.word	0x0800490b
 8004760:	08004847 	.word	0x08004847
 8004764:	0800490b 	.word	0x0800490b
 8004768:	0800490b 	.word	0x0800490b
 800476c:	0800490b 	.word	0x0800490b
 8004770:	08004889 	.word	0x08004889
 8004774:	0800490b 	.word	0x0800490b
 8004778:	0800490b 	.word	0x0800490b
 800477c:	0800490b 	.word	0x0800490b
 8004780:	080048c9 	.word	0x080048c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68b9      	ldr	r1, [r7, #8]
 800478a:	4618      	mov	r0, r3
 800478c:	f000 fac6 	bl	8004d1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	699a      	ldr	r2, [r3, #24]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f042 0208 	orr.w	r2, r2, #8
 800479e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	699a      	ldr	r2, [r3, #24]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f022 0204 	bic.w	r2, r2, #4
 80047ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	6999      	ldr	r1, [r3, #24]
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	691a      	ldr	r2, [r3, #16]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	430a      	orrs	r2, r1
 80047c0:	619a      	str	r2, [r3, #24]
      break;
 80047c2:	e0a5      	b.n	8004910 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68b9      	ldr	r1, [r7, #8]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 fb40 	bl	8004e50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	699a      	ldr	r2, [r3, #24]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	699a      	ldr	r2, [r3, #24]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	6999      	ldr	r1, [r3, #24]
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	021a      	lsls	r2, r3, #8
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	430a      	orrs	r2, r1
 8004802:	619a      	str	r2, [r3, #24]
      break;
 8004804:	e084      	b.n	8004910 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68b9      	ldr	r1, [r7, #8]
 800480c:	4618      	mov	r0, r3
 800480e:	f000 fbb3 	bl	8004f78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	69da      	ldr	r2, [r3, #28]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f042 0208 	orr.w	r2, r2, #8
 8004820:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	69da      	ldr	r2, [r3, #28]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f022 0204 	bic.w	r2, r2, #4
 8004830:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	69d9      	ldr	r1, [r3, #28]
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	691a      	ldr	r2, [r3, #16]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	430a      	orrs	r2, r1
 8004842:	61da      	str	r2, [r3, #28]
      break;
 8004844:	e064      	b.n	8004910 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68b9      	ldr	r1, [r7, #8]
 800484c:	4618      	mov	r0, r3
 800484e:	f000 fc25 	bl	800509c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	69da      	ldr	r2, [r3, #28]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004860:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	69da      	ldr	r2, [r3, #28]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004870:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	69d9      	ldr	r1, [r3, #28]
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	021a      	lsls	r2, r3, #8
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	430a      	orrs	r2, r1
 8004884:	61da      	str	r2, [r3, #28]
      break;
 8004886:	e043      	b.n	8004910 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68b9      	ldr	r1, [r7, #8]
 800488e:	4618      	mov	r0, r3
 8004890:	f000 fc98 	bl	80051c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f042 0208 	orr.w	r2, r2, #8
 80048a2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f022 0204 	bic.w	r2, r2, #4
 80048b2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	691a      	ldr	r2, [r3, #16]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	430a      	orrs	r2, r1
 80048c4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80048c6:	e023      	b.n	8004910 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68b9      	ldr	r1, [r7, #8]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f000 fce2 	bl	8005298 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048e2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048f2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	021a      	lsls	r2, r3, #8
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	430a      	orrs	r2, r1
 8004906:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004908:	e002      	b.n	8004910 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	75fb      	strb	r3, [r7, #23]
      break;
 800490e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004918:	7dfb      	ldrb	r3, [r7, #23]
}
 800491a:	4618      	mov	r0, r3
 800491c:	3718      	adds	r7, #24
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop

08004924 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800492e:	2300      	movs	r3, #0
 8004930:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004938:	2b01      	cmp	r3, #1
 800493a:	d101      	bne.n	8004940 <HAL_TIM_ConfigClockSource+0x1c>
 800493c:	2302      	movs	r3, #2
 800493e:	e0f6      	b.n	8004b2e <HAL_TIM_ConfigClockSource+0x20a>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2202      	movs	r2, #2
 800494c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800495e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004962:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800496a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68ba      	ldr	r2, [r7, #8]
 8004972:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a6f      	ldr	r2, [pc, #444]	@ (8004b38 <HAL_TIM_ConfigClockSource+0x214>)
 800497a:	4293      	cmp	r3, r2
 800497c:	f000 80c1 	beq.w	8004b02 <HAL_TIM_ConfigClockSource+0x1de>
 8004980:	4a6d      	ldr	r2, [pc, #436]	@ (8004b38 <HAL_TIM_ConfigClockSource+0x214>)
 8004982:	4293      	cmp	r3, r2
 8004984:	f200 80c6 	bhi.w	8004b14 <HAL_TIM_ConfigClockSource+0x1f0>
 8004988:	4a6c      	ldr	r2, [pc, #432]	@ (8004b3c <HAL_TIM_ConfigClockSource+0x218>)
 800498a:	4293      	cmp	r3, r2
 800498c:	f000 80b9 	beq.w	8004b02 <HAL_TIM_ConfigClockSource+0x1de>
 8004990:	4a6a      	ldr	r2, [pc, #424]	@ (8004b3c <HAL_TIM_ConfigClockSource+0x218>)
 8004992:	4293      	cmp	r3, r2
 8004994:	f200 80be 	bhi.w	8004b14 <HAL_TIM_ConfigClockSource+0x1f0>
 8004998:	4a69      	ldr	r2, [pc, #420]	@ (8004b40 <HAL_TIM_ConfigClockSource+0x21c>)
 800499a:	4293      	cmp	r3, r2
 800499c:	f000 80b1 	beq.w	8004b02 <HAL_TIM_ConfigClockSource+0x1de>
 80049a0:	4a67      	ldr	r2, [pc, #412]	@ (8004b40 <HAL_TIM_ConfigClockSource+0x21c>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	f200 80b6 	bhi.w	8004b14 <HAL_TIM_ConfigClockSource+0x1f0>
 80049a8:	4a66      	ldr	r2, [pc, #408]	@ (8004b44 <HAL_TIM_ConfigClockSource+0x220>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	f000 80a9 	beq.w	8004b02 <HAL_TIM_ConfigClockSource+0x1de>
 80049b0:	4a64      	ldr	r2, [pc, #400]	@ (8004b44 <HAL_TIM_ConfigClockSource+0x220>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	f200 80ae 	bhi.w	8004b14 <HAL_TIM_ConfigClockSource+0x1f0>
 80049b8:	4a63      	ldr	r2, [pc, #396]	@ (8004b48 <HAL_TIM_ConfigClockSource+0x224>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	f000 80a1 	beq.w	8004b02 <HAL_TIM_ConfigClockSource+0x1de>
 80049c0:	4a61      	ldr	r2, [pc, #388]	@ (8004b48 <HAL_TIM_ConfigClockSource+0x224>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	f200 80a6 	bhi.w	8004b14 <HAL_TIM_ConfigClockSource+0x1f0>
 80049c8:	4a60      	ldr	r2, [pc, #384]	@ (8004b4c <HAL_TIM_ConfigClockSource+0x228>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	f000 8099 	beq.w	8004b02 <HAL_TIM_ConfigClockSource+0x1de>
 80049d0:	4a5e      	ldr	r2, [pc, #376]	@ (8004b4c <HAL_TIM_ConfigClockSource+0x228>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	f200 809e 	bhi.w	8004b14 <HAL_TIM_ConfigClockSource+0x1f0>
 80049d8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80049dc:	f000 8091 	beq.w	8004b02 <HAL_TIM_ConfigClockSource+0x1de>
 80049e0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80049e4:	f200 8096 	bhi.w	8004b14 <HAL_TIM_ConfigClockSource+0x1f0>
 80049e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049ec:	f000 8089 	beq.w	8004b02 <HAL_TIM_ConfigClockSource+0x1de>
 80049f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049f4:	f200 808e 	bhi.w	8004b14 <HAL_TIM_ConfigClockSource+0x1f0>
 80049f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049fc:	d03e      	beq.n	8004a7c <HAL_TIM_ConfigClockSource+0x158>
 80049fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a02:	f200 8087 	bhi.w	8004b14 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a0a:	f000 8086 	beq.w	8004b1a <HAL_TIM_ConfigClockSource+0x1f6>
 8004a0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a12:	d87f      	bhi.n	8004b14 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a14:	2b70      	cmp	r3, #112	@ 0x70
 8004a16:	d01a      	beq.n	8004a4e <HAL_TIM_ConfigClockSource+0x12a>
 8004a18:	2b70      	cmp	r3, #112	@ 0x70
 8004a1a:	d87b      	bhi.n	8004b14 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a1c:	2b60      	cmp	r3, #96	@ 0x60
 8004a1e:	d050      	beq.n	8004ac2 <HAL_TIM_ConfigClockSource+0x19e>
 8004a20:	2b60      	cmp	r3, #96	@ 0x60
 8004a22:	d877      	bhi.n	8004b14 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a24:	2b50      	cmp	r3, #80	@ 0x50
 8004a26:	d03c      	beq.n	8004aa2 <HAL_TIM_ConfigClockSource+0x17e>
 8004a28:	2b50      	cmp	r3, #80	@ 0x50
 8004a2a:	d873      	bhi.n	8004b14 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a2c:	2b40      	cmp	r3, #64	@ 0x40
 8004a2e:	d058      	beq.n	8004ae2 <HAL_TIM_ConfigClockSource+0x1be>
 8004a30:	2b40      	cmp	r3, #64	@ 0x40
 8004a32:	d86f      	bhi.n	8004b14 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a34:	2b30      	cmp	r3, #48	@ 0x30
 8004a36:	d064      	beq.n	8004b02 <HAL_TIM_ConfigClockSource+0x1de>
 8004a38:	2b30      	cmp	r3, #48	@ 0x30
 8004a3a:	d86b      	bhi.n	8004b14 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a3c:	2b20      	cmp	r3, #32
 8004a3e:	d060      	beq.n	8004b02 <HAL_TIM_ConfigClockSource+0x1de>
 8004a40:	2b20      	cmp	r3, #32
 8004a42:	d867      	bhi.n	8004b14 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d05c      	beq.n	8004b02 <HAL_TIM_ConfigClockSource+0x1de>
 8004a48:	2b10      	cmp	r3, #16
 8004a4a:	d05a      	beq.n	8004b02 <HAL_TIM_ConfigClockSource+0x1de>
 8004a4c:	e062      	b.n	8004b14 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a5e:	f000 fd03 	bl	8005468 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004a70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68ba      	ldr	r2, [r7, #8]
 8004a78:	609a      	str	r2, [r3, #8]
      break;
 8004a7a:	e04f      	b.n	8004b1c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a8c:	f000 fcec 	bl	8005468 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	689a      	ldr	r2, [r3, #8]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a9e:	609a      	str	r2, [r3, #8]
      break;
 8004aa0:	e03c      	b.n	8004b1c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aae:	461a      	mov	r2, r3
 8004ab0:	f000 fc5e 	bl	8005370 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2150      	movs	r1, #80	@ 0x50
 8004aba:	4618      	mov	r0, r3
 8004abc:	f000 fcb7 	bl	800542e <TIM_ITRx_SetConfig>
      break;
 8004ac0:	e02c      	b.n	8004b1c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ace:	461a      	mov	r2, r3
 8004ad0:	f000 fc7d 	bl	80053ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2160      	movs	r1, #96	@ 0x60
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 fca7 	bl	800542e <TIM_ITRx_SetConfig>
      break;
 8004ae0:	e01c      	b.n	8004b1c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aee:	461a      	mov	r2, r3
 8004af0:	f000 fc3e 	bl	8005370 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2140      	movs	r1, #64	@ 0x40
 8004afa:	4618      	mov	r0, r3
 8004afc:	f000 fc97 	bl	800542e <TIM_ITRx_SetConfig>
      break;
 8004b00:	e00c      	b.n	8004b1c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	4610      	mov	r0, r2
 8004b0e:	f000 fc8e 	bl	800542e <TIM_ITRx_SetConfig>
      break;
 8004b12:	e003      	b.n	8004b1c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	73fb      	strb	r3, [r7, #15]
      break;
 8004b18:	e000      	b.n	8004b1c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004b1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3710      	adds	r7, #16
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	00100070 	.word	0x00100070
 8004b3c:	00100060 	.word	0x00100060
 8004b40:	00100050 	.word	0x00100050
 8004b44:	00100040 	.word	0x00100040
 8004b48:	00100030 	.word	0x00100030
 8004b4c:	00100020 	.word	0x00100020

08004b50 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b6c:	bf00      	nop
 8004b6e:	370c      	adds	r7, #12
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b80:	bf00      	nop
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b94:	bf00      	nop
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ba8:	bf00      	nop
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b085      	sub	sp, #20
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4a4c      	ldr	r2, [pc, #304]	@ (8004cf8 <TIM_Base_SetConfig+0x144>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d017      	beq.n	8004bfc <TIM_Base_SetConfig+0x48>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bd2:	d013      	beq.n	8004bfc <TIM_Base_SetConfig+0x48>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a49      	ldr	r2, [pc, #292]	@ (8004cfc <TIM_Base_SetConfig+0x148>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d00f      	beq.n	8004bfc <TIM_Base_SetConfig+0x48>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a48      	ldr	r2, [pc, #288]	@ (8004d00 <TIM_Base_SetConfig+0x14c>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d00b      	beq.n	8004bfc <TIM_Base_SetConfig+0x48>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a47      	ldr	r2, [pc, #284]	@ (8004d04 <TIM_Base_SetConfig+0x150>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d007      	beq.n	8004bfc <TIM_Base_SetConfig+0x48>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a46      	ldr	r2, [pc, #280]	@ (8004d08 <TIM_Base_SetConfig+0x154>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d003      	beq.n	8004bfc <TIM_Base_SetConfig+0x48>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a45      	ldr	r2, [pc, #276]	@ (8004d0c <TIM_Base_SetConfig+0x158>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d108      	bne.n	8004c0e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a39      	ldr	r2, [pc, #228]	@ (8004cf8 <TIM_Base_SetConfig+0x144>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d023      	beq.n	8004c5e <TIM_Base_SetConfig+0xaa>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c1c:	d01f      	beq.n	8004c5e <TIM_Base_SetConfig+0xaa>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a36      	ldr	r2, [pc, #216]	@ (8004cfc <TIM_Base_SetConfig+0x148>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d01b      	beq.n	8004c5e <TIM_Base_SetConfig+0xaa>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a35      	ldr	r2, [pc, #212]	@ (8004d00 <TIM_Base_SetConfig+0x14c>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d017      	beq.n	8004c5e <TIM_Base_SetConfig+0xaa>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a34      	ldr	r2, [pc, #208]	@ (8004d04 <TIM_Base_SetConfig+0x150>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d013      	beq.n	8004c5e <TIM_Base_SetConfig+0xaa>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a33      	ldr	r2, [pc, #204]	@ (8004d08 <TIM_Base_SetConfig+0x154>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d00f      	beq.n	8004c5e <TIM_Base_SetConfig+0xaa>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a33      	ldr	r2, [pc, #204]	@ (8004d10 <TIM_Base_SetConfig+0x15c>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d00b      	beq.n	8004c5e <TIM_Base_SetConfig+0xaa>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a32      	ldr	r2, [pc, #200]	@ (8004d14 <TIM_Base_SetConfig+0x160>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d007      	beq.n	8004c5e <TIM_Base_SetConfig+0xaa>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a31      	ldr	r2, [pc, #196]	@ (8004d18 <TIM_Base_SetConfig+0x164>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d003      	beq.n	8004c5e <TIM_Base_SetConfig+0xaa>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a2c      	ldr	r2, [pc, #176]	@ (8004d0c <TIM_Base_SetConfig+0x158>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d108      	bne.n	8004c70 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	689a      	ldr	r2, [r3, #8]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a18      	ldr	r2, [pc, #96]	@ (8004cf8 <TIM_Base_SetConfig+0x144>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d013      	beq.n	8004cc4 <TIM_Base_SetConfig+0x110>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a1a      	ldr	r2, [pc, #104]	@ (8004d08 <TIM_Base_SetConfig+0x154>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d00f      	beq.n	8004cc4 <TIM_Base_SetConfig+0x110>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a1a      	ldr	r2, [pc, #104]	@ (8004d10 <TIM_Base_SetConfig+0x15c>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d00b      	beq.n	8004cc4 <TIM_Base_SetConfig+0x110>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a19      	ldr	r2, [pc, #100]	@ (8004d14 <TIM_Base_SetConfig+0x160>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d007      	beq.n	8004cc4 <TIM_Base_SetConfig+0x110>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a18      	ldr	r2, [pc, #96]	@ (8004d18 <TIM_Base_SetConfig+0x164>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d003      	beq.n	8004cc4 <TIM_Base_SetConfig+0x110>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a13      	ldr	r2, [pc, #76]	@ (8004d0c <TIM_Base_SetConfig+0x158>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d103      	bne.n	8004ccc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	691a      	ldr	r2, [r3, #16]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d105      	bne.n	8004cea <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	f023 0201 	bic.w	r2, r3, #1
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	611a      	str	r2, [r3, #16]
  }
}
 8004cea:	bf00      	nop
 8004cec:	3714      	adds	r7, #20
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	40012c00 	.word	0x40012c00
 8004cfc:	40000400 	.word	0x40000400
 8004d00:	40000800 	.word	0x40000800
 8004d04:	40000c00 	.word	0x40000c00
 8004d08:	40013400 	.word	0x40013400
 8004d0c:	40015000 	.word	0x40015000
 8004d10:	40014000 	.word	0x40014000
 8004d14:	40014400 	.word	0x40014400
 8004d18:	40014800 	.word	0x40014800

08004d1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b087      	sub	sp, #28
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a1b      	ldr	r3, [r3, #32]
 8004d2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a1b      	ldr	r3, [r3, #32]
 8004d30:	f023 0201 	bic.w	r2, r3, #1
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f023 0303 	bic.w	r3, r3, #3
 8004d56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f023 0302 	bic.w	r3, r3, #2
 8004d68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a30      	ldr	r2, [pc, #192]	@ (8004e38 <TIM_OC1_SetConfig+0x11c>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d013      	beq.n	8004da4 <TIM_OC1_SetConfig+0x88>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a2f      	ldr	r2, [pc, #188]	@ (8004e3c <TIM_OC1_SetConfig+0x120>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d00f      	beq.n	8004da4 <TIM_OC1_SetConfig+0x88>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a2e      	ldr	r2, [pc, #184]	@ (8004e40 <TIM_OC1_SetConfig+0x124>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d00b      	beq.n	8004da4 <TIM_OC1_SetConfig+0x88>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a2d      	ldr	r2, [pc, #180]	@ (8004e44 <TIM_OC1_SetConfig+0x128>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d007      	beq.n	8004da4 <TIM_OC1_SetConfig+0x88>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a2c      	ldr	r2, [pc, #176]	@ (8004e48 <TIM_OC1_SetConfig+0x12c>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d003      	beq.n	8004da4 <TIM_OC1_SetConfig+0x88>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a2b      	ldr	r2, [pc, #172]	@ (8004e4c <TIM_OC1_SetConfig+0x130>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d10c      	bne.n	8004dbe <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	f023 0308 	bic.w	r3, r3, #8
 8004daa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	697a      	ldr	r2, [r7, #20]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	f023 0304 	bic.w	r3, r3, #4
 8004dbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a1d      	ldr	r2, [pc, #116]	@ (8004e38 <TIM_OC1_SetConfig+0x11c>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d013      	beq.n	8004dee <TIM_OC1_SetConfig+0xd2>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a1c      	ldr	r2, [pc, #112]	@ (8004e3c <TIM_OC1_SetConfig+0x120>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d00f      	beq.n	8004dee <TIM_OC1_SetConfig+0xd2>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a1b      	ldr	r2, [pc, #108]	@ (8004e40 <TIM_OC1_SetConfig+0x124>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d00b      	beq.n	8004dee <TIM_OC1_SetConfig+0xd2>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a1a      	ldr	r2, [pc, #104]	@ (8004e44 <TIM_OC1_SetConfig+0x128>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d007      	beq.n	8004dee <TIM_OC1_SetConfig+0xd2>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a19      	ldr	r2, [pc, #100]	@ (8004e48 <TIM_OC1_SetConfig+0x12c>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d003      	beq.n	8004dee <TIM_OC1_SetConfig+0xd2>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a18      	ldr	r2, [pc, #96]	@ (8004e4c <TIM_OC1_SetConfig+0x130>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d111      	bne.n	8004e12 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004df4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004dfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	699b      	ldr	r3, [r3, #24]
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	685a      	ldr	r2, [r3, #4]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	697a      	ldr	r2, [r7, #20]
 8004e2a:	621a      	str	r2, [r3, #32]
}
 8004e2c:	bf00      	nop
 8004e2e:	371c      	adds	r7, #28
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr
 8004e38:	40012c00 	.word	0x40012c00
 8004e3c:	40013400 	.word	0x40013400
 8004e40:	40014000 	.word	0x40014000
 8004e44:	40014400 	.word	0x40014400
 8004e48:	40014800 	.word	0x40014800
 8004e4c:	40015000 	.word	0x40015000

08004e50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b087      	sub	sp, #28
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a1b      	ldr	r3, [r3, #32]
 8004e64:	f023 0210 	bic.w	r2, r3, #16
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	021b      	lsls	r3, r3, #8
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	f023 0320 	bic.w	r3, r3, #32
 8004e9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	011b      	lsls	r3, r3, #4
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a2c      	ldr	r2, [pc, #176]	@ (8004f60 <TIM_OC2_SetConfig+0x110>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d007      	beq.n	8004ec4 <TIM_OC2_SetConfig+0x74>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a2b      	ldr	r2, [pc, #172]	@ (8004f64 <TIM_OC2_SetConfig+0x114>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d003      	beq.n	8004ec4 <TIM_OC2_SetConfig+0x74>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a2a      	ldr	r2, [pc, #168]	@ (8004f68 <TIM_OC2_SetConfig+0x118>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d10d      	bne.n	8004ee0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004eca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	011b      	lsls	r3, r3, #4
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ede:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a1f      	ldr	r2, [pc, #124]	@ (8004f60 <TIM_OC2_SetConfig+0x110>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d013      	beq.n	8004f10 <TIM_OC2_SetConfig+0xc0>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a1e      	ldr	r2, [pc, #120]	@ (8004f64 <TIM_OC2_SetConfig+0x114>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d00f      	beq.n	8004f10 <TIM_OC2_SetConfig+0xc0>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a1e      	ldr	r2, [pc, #120]	@ (8004f6c <TIM_OC2_SetConfig+0x11c>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d00b      	beq.n	8004f10 <TIM_OC2_SetConfig+0xc0>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a1d      	ldr	r2, [pc, #116]	@ (8004f70 <TIM_OC2_SetConfig+0x120>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d007      	beq.n	8004f10 <TIM_OC2_SetConfig+0xc0>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a1c      	ldr	r2, [pc, #112]	@ (8004f74 <TIM_OC2_SetConfig+0x124>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d003      	beq.n	8004f10 <TIM_OC2_SetConfig+0xc0>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a17      	ldr	r2, [pc, #92]	@ (8004f68 <TIM_OC2_SetConfig+0x118>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d113      	bne.n	8004f38 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	695b      	ldr	r3, [r3, #20]
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	693a      	ldr	r2, [r7, #16]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	699b      	ldr	r3, [r3, #24]
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	693a      	ldr	r2, [r7, #16]
 8004f3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	685a      	ldr	r2, [r3, #4]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	697a      	ldr	r2, [r7, #20]
 8004f50:	621a      	str	r2, [r3, #32]
}
 8004f52:	bf00      	nop
 8004f54:	371c      	adds	r7, #28
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr
 8004f5e:	bf00      	nop
 8004f60:	40012c00 	.word	0x40012c00
 8004f64:	40013400 	.word	0x40013400
 8004f68:	40015000 	.word	0x40015000
 8004f6c:	40014000 	.word	0x40014000
 8004f70:	40014400 	.word	0x40014400
 8004f74:	40014800 	.word	0x40014800

08004f78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b087      	sub	sp, #28
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a1b      	ldr	r3, [r3, #32]
 8004f86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a1b      	ldr	r3, [r3, #32]
 8004f8c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	69db      	ldr	r3, [r3, #28]
 8004f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004faa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f023 0303 	bic.w	r3, r3, #3
 8004fb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004fc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	021b      	lsls	r3, r3, #8
 8004fcc:	697a      	ldr	r2, [r7, #20]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a2b      	ldr	r2, [pc, #172]	@ (8005084 <TIM_OC3_SetConfig+0x10c>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d007      	beq.n	8004fea <TIM_OC3_SetConfig+0x72>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a2a      	ldr	r2, [pc, #168]	@ (8005088 <TIM_OC3_SetConfig+0x110>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d003      	beq.n	8004fea <TIM_OC3_SetConfig+0x72>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a29      	ldr	r2, [pc, #164]	@ (800508c <TIM_OC3_SetConfig+0x114>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d10d      	bne.n	8005006 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ff0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	021b      	lsls	r3, r3, #8
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005004:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a1e      	ldr	r2, [pc, #120]	@ (8005084 <TIM_OC3_SetConfig+0x10c>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d013      	beq.n	8005036 <TIM_OC3_SetConfig+0xbe>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a1d      	ldr	r2, [pc, #116]	@ (8005088 <TIM_OC3_SetConfig+0x110>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d00f      	beq.n	8005036 <TIM_OC3_SetConfig+0xbe>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a1d      	ldr	r2, [pc, #116]	@ (8005090 <TIM_OC3_SetConfig+0x118>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d00b      	beq.n	8005036 <TIM_OC3_SetConfig+0xbe>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a1c      	ldr	r2, [pc, #112]	@ (8005094 <TIM_OC3_SetConfig+0x11c>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d007      	beq.n	8005036 <TIM_OC3_SetConfig+0xbe>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a1b      	ldr	r2, [pc, #108]	@ (8005098 <TIM_OC3_SetConfig+0x120>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d003      	beq.n	8005036 <TIM_OC3_SetConfig+0xbe>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a16      	ldr	r2, [pc, #88]	@ (800508c <TIM_OC3_SetConfig+0x114>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d113      	bne.n	800505e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800503c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005044:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	011b      	lsls	r3, r3, #4
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	4313      	orrs	r3, r2
 8005050:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	011b      	lsls	r3, r3, #4
 8005058:	693a      	ldr	r2, [r7, #16]
 800505a:	4313      	orrs	r3, r2
 800505c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	693a      	ldr	r2, [r7, #16]
 8005062:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	685a      	ldr	r2, [r3, #4]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	697a      	ldr	r2, [r7, #20]
 8005076:	621a      	str	r2, [r3, #32]
}
 8005078:	bf00      	nop
 800507a:	371c      	adds	r7, #28
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr
 8005084:	40012c00 	.word	0x40012c00
 8005088:	40013400 	.word	0x40013400
 800508c:	40015000 	.word	0x40015000
 8005090:	40014000 	.word	0x40014000
 8005094:	40014400 	.word	0x40014400
 8005098:	40014800 	.word	0x40014800

0800509c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800509c:	b480      	push	{r7}
 800509e:	b087      	sub	sp, #28
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6a1b      	ldr	r3, [r3, #32]
 80050b0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	69db      	ldr	r3, [r3, #28]
 80050c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	021b      	lsls	r3, r3, #8
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80050ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	031b      	lsls	r3, r3, #12
 80050f2:	697a      	ldr	r2, [r7, #20]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a2c      	ldr	r2, [pc, #176]	@ (80051ac <TIM_OC4_SetConfig+0x110>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d007      	beq.n	8005110 <TIM_OC4_SetConfig+0x74>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a2b      	ldr	r2, [pc, #172]	@ (80051b0 <TIM_OC4_SetConfig+0x114>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d003      	beq.n	8005110 <TIM_OC4_SetConfig+0x74>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a2a      	ldr	r2, [pc, #168]	@ (80051b4 <TIM_OC4_SetConfig+0x118>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d10d      	bne.n	800512c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005116:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	031b      	lsls	r3, r3, #12
 800511e:	697a      	ldr	r2, [r7, #20]
 8005120:	4313      	orrs	r3, r2
 8005122:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800512a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a1f      	ldr	r2, [pc, #124]	@ (80051ac <TIM_OC4_SetConfig+0x110>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d013      	beq.n	800515c <TIM_OC4_SetConfig+0xc0>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a1e      	ldr	r2, [pc, #120]	@ (80051b0 <TIM_OC4_SetConfig+0x114>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d00f      	beq.n	800515c <TIM_OC4_SetConfig+0xc0>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a1e      	ldr	r2, [pc, #120]	@ (80051b8 <TIM_OC4_SetConfig+0x11c>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d00b      	beq.n	800515c <TIM_OC4_SetConfig+0xc0>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a1d      	ldr	r2, [pc, #116]	@ (80051bc <TIM_OC4_SetConfig+0x120>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d007      	beq.n	800515c <TIM_OC4_SetConfig+0xc0>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a1c      	ldr	r2, [pc, #112]	@ (80051c0 <TIM_OC4_SetConfig+0x124>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d003      	beq.n	800515c <TIM_OC4_SetConfig+0xc0>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a17      	ldr	r2, [pc, #92]	@ (80051b4 <TIM_OC4_SetConfig+0x118>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d113      	bne.n	8005184 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005162:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800516a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	695b      	ldr	r3, [r3, #20]
 8005170:	019b      	lsls	r3, r3, #6
 8005172:	693a      	ldr	r2, [r7, #16]
 8005174:	4313      	orrs	r3, r2
 8005176:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	019b      	lsls	r3, r3, #6
 800517e:	693a      	ldr	r2, [r7, #16]
 8005180:	4313      	orrs	r3, r2
 8005182:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	693a      	ldr	r2, [r7, #16]
 8005188:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	685a      	ldr	r2, [r3, #4]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	697a      	ldr	r2, [r7, #20]
 800519c:	621a      	str	r2, [r3, #32]
}
 800519e:	bf00      	nop
 80051a0:	371c      	adds	r7, #28
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	40012c00 	.word	0x40012c00
 80051b0:	40013400 	.word	0x40013400
 80051b4:	40015000 	.word	0x40015000
 80051b8:	40014000 	.word	0x40014000
 80051bc:	40014400 	.word	0x40014400
 80051c0:	40014800 	.word	0x40014800

080051c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b087      	sub	sp, #28
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a1b      	ldr	r3, [r3, #32]
 80051d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a1b      	ldr	r3, [r3, #32]
 80051d8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	4313      	orrs	r3, r2
 8005200:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005208:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	041b      	lsls	r3, r3, #16
 8005210:	693a      	ldr	r2, [r7, #16]
 8005212:	4313      	orrs	r3, r2
 8005214:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a19      	ldr	r2, [pc, #100]	@ (8005280 <TIM_OC5_SetConfig+0xbc>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d013      	beq.n	8005246 <TIM_OC5_SetConfig+0x82>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a18      	ldr	r2, [pc, #96]	@ (8005284 <TIM_OC5_SetConfig+0xc0>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d00f      	beq.n	8005246 <TIM_OC5_SetConfig+0x82>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a17      	ldr	r2, [pc, #92]	@ (8005288 <TIM_OC5_SetConfig+0xc4>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d00b      	beq.n	8005246 <TIM_OC5_SetConfig+0x82>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a16      	ldr	r2, [pc, #88]	@ (800528c <TIM_OC5_SetConfig+0xc8>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d007      	beq.n	8005246 <TIM_OC5_SetConfig+0x82>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a15      	ldr	r2, [pc, #84]	@ (8005290 <TIM_OC5_SetConfig+0xcc>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d003      	beq.n	8005246 <TIM_OC5_SetConfig+0x82>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a14      	ldr	r2, [pc, #80]	@ (8005294 <TIM_OC5_SetConfig+0xd0>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d109      	bne.n	800525a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800524c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	695b      	ldr	r3, [r3, #20]
 8005252:	021b      	lsls	r3, r3, #8
 8005254:	697a      	ldr	r2, [r7, #20]
 8005256:	4313      	orrs	r3, r2
 8005258:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	697a      	ldr	r2, [r7, #20]
 800525e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	685a      	ldr	r2, [r3, #4]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	621a      	str	r2, [r3, #32]
}
 8005274:	bf00      	nop
 8005276:	371c      	adds	r7, #28
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr
 8005280:	40012c00 	.word	0x40012c00
 8005284:	40013400 	.word	0x40013400
 8005288:	40014000 	.word	0x40014000
 800528c:	40014400 	.word	0x40014400
 8005290:	40014800 	.word	0x40014800
 8005294:	40015000 	.word	0x40015000

08005298 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005298:	b480      	push	{r7}
 800529a:	b087      	sub	sp, #28
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a1b      	ldr	r3, [r3, #32]
 80052a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a1b      	ldr	r3, [r3, #32]
 80052ac:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	021b      	lsls	r3, r3, #8
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80052de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	051b      	lsls	r3, r3, #20
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a1a      	ldr	r2, [pc, #104]	@ (8005358 <TIM_OC6_SetConfig+0xc0>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d013      	beq.n	800531c <TIM_OC6_SetConfig+0x84>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a19      	ldr	r2, [pc, #100]	@ (800535c <TIM_OC6_SetConfig+0xc4>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d00f      	beq.n	800531c <TIM_OC6_SetConfig+0x84>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a18      	ldr	r2, [pc, #96]	@ (8005360 <TIM_OC6_SetConfig+0xc8>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d00b      	beq.n	800531c <TIM_OC6_SetConfig+0x84>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a17      	ldr	r2, [pc, #92]	@ (8005364 <TIM_OC6_SetConfig+0xcc>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d007      	beq.n	800531c <TIM_OC6_SetConfig+0x84>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a16      	ldr	r2, [pc, #88]	@ (8005368 <TIM_OC6_SetConfig+0xd0>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d003      	beq.n	800531c <TIM_OC6_SetConfig+0x84>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a15      	ldr	r2, [pc, #84]	@ (800536c <TIM_OC6_SetConfig+0xd4>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d109      	bne.n	8005330 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005322:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	695b      	ldr	r3, [r3, #20]
 8005328:	029b      	lsls	r3, r3, #10
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	4313      	orrs	r3, r2
 800532e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	697a      	ldr	r2, [r7, #20]
 8005334:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	685a      	ldr	r2, [r3, #4]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	621a      	str	r2, [r3, #32]
}
 800534a:	bf00      	nop
 800534c:	371c      	adds	r7, #28
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	40012c00 	.word	0x40012c00
 800535c:	40013400 	.word	0x40013400
 8005360:	40014000 	.word	0x40014000
 8005364:	40014400 	.word	0x40014400
 8005368:	40014800 	.word	0x40014800
 800536c:	40015000 	.word	0x40015000

08005370 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005370:	b480      	push	{r7}
 8005372:	b087      	sub	sp, #28
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6a1b      	ldr	r3, [r3, #32]
 8005380:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6a1b      	ldr	r3, [r3, #32]
 8005386:	f023 0201 	bic.w	r2, r3, #1
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800539a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	011b      	lsls	r3, r3, #4
 80053a0:	693a      	ldr	r2, [r7, #16]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	f023 030a 	bic.w	r3, r3, #10
 80053ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053ae:	697a      	ldr	r2, [r7, #20]
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	693a      	ldr	r2, [r7, #16]
 80053ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	697a      	ldr	r2, [r7, #20]
 80053c0:	621a      	str	r2, [r3, #32]
}
 80053c2:	bf00      	nop
 80053c4:	371c      	adds	r7, #28
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr

080053ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053ce:	b480      	push	{r7}
 80053d0:	b087      	sub	sp, #28
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	60f8      	str	r0, [r7, #12]
 80053d6:	60b9      	str	r1, [r7, #8]
 80053d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6a1b      	ldr	r3, [r3, #32]
 80053de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6a1b      	ldr	r3, [r3, #32]
 80053e4:	f023 0210 	bic.w	r2, r3, #16
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	699b      	ldr	r3, [r3, #24]
 80053f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80053f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	031b      	lsls	r3, r3, #12
 80053fe:	693a      	ldr	r2, [r7, #16]
 8005400:	4313      	orrs	r3, r2
 8005402:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800540a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	011b      	lsls	r3, r3, #4
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	4313      	orrs	r3, r2
 8005414:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	697a      	ldr	r2, [r7, #20]
 8005420:	621a      	str	r2, [r3, #32]
}
 8005422:	bf00      	nop
 8005424:	371c      	adds	r7, #28
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr

0800542e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800542e:	b480      	push	{r7}
 8005430:	b085      	sub	sp, #20
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
 8005436:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005444:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005448:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800544a:	683a      	ldr	r2, [r7, #0]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	4313      	orrs	r3, r2
 8005450:	f043 0307 	orr.w	r3, r3, #7
 8005454:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	609a      	str	r2, [r3, #8]
}
 800545c:	bf00      	nop
 800545e:	3714      	adds	r7, #20
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005468:	b480      	push	{r7}
 800546a:	b087      	sub	sp, #28
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]
 8005474:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005482:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	021a      	lsls	r2, r3, #8
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	431a      	orrs	r2, r3
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	4313      	orrs	r3, r2
 8005490:	697a      	ldr	r2, [r7, #20]
 8005492:	4313      	orrs	r3, r2
 8005494:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	697a      	ldr	r2, [r7, #20]
 800549a:	609a      	str	r2, [r3, #8]
}
 800549c:	bf00      	nop
 800549e:	371c      	adds	r7, #28
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b087      	sub	sp, #28
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	f003 031f 	and.w	r3, r3, #31
 80054ba:	2201      	movs	r2, #1
 80054bc:	fa02 f303 	lsl.w	r3, r2, r3
 80054c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6a1a      	ldr	r2, [r3, #32]
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	43db      	mvns	r3, r3
 80054ca:	401a      	ands	r2, r3
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6a1a      	ldr	r2, [r3, #32]
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	f003 031f 	and.w	r3, r3, #31
 80054da:	6879      	ldr	r1, [r7, #4]
 80054dc:	fa01 f303 	lsl.w	r3, r1, r3
 80054e0:	431a      	orrs	r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	621a      	str	r2, [r3, #32]
}
 80054e6:	bf00      	nop
 80054e8:	371c      	adds	r7, #28
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
	...

080054f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005504:	2b01      	cmp	r3, #1
 8005506:	d101      	bne.n	800550c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005508:	2302      	movs	r3, #2
 800550a:	e074      	b.n	80055f6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2202      	movs	r2, #2
 8005518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a34      	ldr	r2, [pc, #208]	@ (8005604 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d009      	beq.n	800554a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a33      	ldr	r2, [pc, #204]	@ (8005608 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d004      	beq.n	800554a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a31      	ldr	r2, [pc, #196]	@ (800560c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d108      	bne.n	800555c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005550:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	4313      	orrs	r3, r2
 800555a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005562:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005566:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	4313      	orrs	r3, r2
 8005570:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a21      	ldr	r2, [pc, #132]	@ (8005604 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d022      	beq.n	80055ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800558c:	d01d      	beq.n	80055ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a1f      	ldr	r2, [pc, #124]	@ (8005610 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d018      	beq.n	80055ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a1d      	ldr	r2, [pc, #116]	@ (8005614 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d013      	beq.n	80055ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a1c      	ldr	r2, [pc, #112]	@ (8005618 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d00e      	beq.n	80055ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a15      	ldr	r2, [pc, #84]	@ (8005608 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d009      	beq.n	80055ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a18      	ldr	r2, [pc, #96]	@ (800561c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d004      	beq.n	80055ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a11      	ldr	r2, [pc, #68]	@ (800560c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d10c      	bne.n	80055e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	68ba      	ldr	r2, [r7, #8]
 80055d8:	4313      	orrs	r3, r2
 80055da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3714      	adds	r7, #20
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	40012c00 	.word	0x40012c00
 8005608:	40013400 	.word	0x40013400
 800560c:	40015000 	.word	0x40015000
 8005610:	40000400 	.word	0x40000400
 8005614:	40000800 	.word	0x40000800
 8005618:	40000c00 	.word	0x40000c00
 800561c:	40014000 	.word	0x40014000

08005620 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800562a:	2300      	movs	r3, #0
 800562c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005634:	2b01      	cmp	r3, #1
 8005636:	d101      	bne.n	800563c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005638:	2302      	movs	r3, #2
 800563a:	e078      	b.n	800572e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	4313      	orrs	r3, r2
 8005650:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	4313      	orrs	r3, r2
 800565e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	4313      	orrs	r3, r2
 800566c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4313      	orrs	r3, r2
 800567a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	4313      	orrs	r3, r2
 8005688:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	695b      	ldr	r3, [r3, #20]
 8005694:	4313      	orrs	r3, r2
 8005696:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056a2:	4313      	orrs	r3, r2
 80056a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	041b      	lsls	r3, r3, #16
 80056b2:	4313      	orrs	r3, r2
 80056b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	69db      	ldr	r3, [r3, #28]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a1c      	ldr	r2, [pc, #112]	@ (800573c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d009      	beq.n	80056e2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a1b      	ldr	r2, [pc, #108]	@ (8005740 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d004      	beq.n	80056e2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a19      	ldr	r2, [pc, #100]	@ (8005744 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d11c      	bne.n	800571c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ec:	051b      	lsls	r3, r3, #20
 80056ee:	4313      	orrs	r3, r2
 80056f0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	6a1b      	ldr	r3, [r3, #32]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800570a:	4313      	orrs	r3, r2
 800570c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005718:	4313      	orrs	r3, r2
 800571a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800572c:	2300      	movs	r3, #0
}
 800572e:	4618      	mov	r0, r3
 8005730:	3714      	adds	r7, #20
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop
 800573c:	40012c00 	.word	0x40012c00
 8005740:	40013400 	.word	0x40013400
 8005744:	40015000 	.word	0x40015000

08005748 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005750:	bf00      	nop
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005764:	bf00      	nop
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005778:	bf00      	nop
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800578c:	bf00      	nop
 800578e:	370c      	adds	r7, #12
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80057a0:	bf00      	nop
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80057b4:	bf00      	nop
 80057b6:	370c      	adds	r7, #12
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80057c8:	bf00      	nop
 80057ca:	370c      	adds	r7, #12
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d101      	bne.n	80057e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e042      	b.n	800586c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d106      	bne.n	80057fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f7fb fe2b 	bl	8001454 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2224      	movs	r2, #36	@ 0x24
 8005802:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f022 0201 	bic.w	r2, r2, #1
 8005814:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800581a:	2b00      	cmp	r3, #0
 800581c:	d002      	beq.n	8005824 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 ffbe 	bl	80067a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f000 fcbf 	bl	80061a8 <UART_SetConfig>
 800582a:	4603      	mov	r3, r0
 800582c:	2b01      	cmp	r3, #1
 800582e:	d101      	bne.n	8005834 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e01b      	b.n	800586c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	685a      	ldr	r2, [r3, #4]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005842:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	689a      	ldr	r2, [r3, #8]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005852:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f042 0201 	orr.w	r2, r2, #1
 8005862:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f001 f83d 	bl	80068e4 <UART_CheckIdleState>
 800586a:	4603      	mov	r3, r0
}
 800586c:	4618      	mov	r0, r3
 800586e:	3708      	adds	r7, #8
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b08a      	sub	sp, #40	@ 0x28
 8005878:	af02      	add	r7, sp, #8
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	60b9      	str	r1, [r7, #8]
 800587e:	603b      	str	r3, [r7, #0]
 8005880:	4613      	mov	r3, r2
 8005882:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800588a:	2b20      	cmp	r3, #32
 800588c:	d17b      	bne.n	8005986 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d002      	beq.n	800589a <HAL_UART_Transmit+0x26>
 8005894:	88fb      	ldrh	r3, [r7, #6]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d101      	bne.n	800589e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e074      	b.n	8005988 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2221      	movs	r2, #33	@ 0x21
 80058aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058ae:	f7fb ffc1 	bl	8001834 <HAL_GetTick>
 80058b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	88fa      	ldrh	r2, [r7, #6]
 80058b8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	88fa      	ldrh	r2, [r7, #6]
 80058c0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058cc:	d108      	bne.n	80058e0 <HAL_UART_Transmit+0x6c>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d104      	bne.n	80058e0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80058d6:	2300      	movs	r3, #0
 80058d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	61bb      	str	r3, [r7, #24]
 80058de:	e003      	b.n	80058e8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058e4:	2300      	movs	r3, #0
 80058e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80058e8:	e030      	b.n	800594c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	9300      	str	r3, [sp, #0]
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	2200      	movs	r2, #0
 80058f2:	2180      	movs	r1, #128	@ 0x80
 80058f4:	68f8      	ldr	r0, [r7, #12]
 80058f6:	f001 f89f 	bl	8006a38 <UART_WaitOnFlagUntilTimeout>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d005      	beq.n	800590c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2220      	movs	r2, #32
 8005904:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	e03d      	b.n	8005988 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d10b      	bne.n	800592a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	881b      	ldrh	r3, [r3, #0]
 8005916:	461a      	mov	r2, r3
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005920:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	3302      	adds	r3, #2
 8005926:	61bb      	str	r3, [r7, #24]
 8005928:	e007      	b.n	800593a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	781a      	ldrb	r2, [r3, #0]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	3301      	adds	r3, #1
 8005938:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005940:	b29b      	uxth	r3, r3
 8005942:	3b01      	subs	r3, #1
 8005944:	b29a      	uxth	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005952:	b29b      	uxth	r3, r3
 8005954:	2b00      	cmp	r3, #0
 8005956:	d1c8      	bne.n	80058ea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	9300      	str	r3, [sp, #0]
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	2200      	movs	r2, #0
 8005960:	2140      	movs	r1, #64	@ 0x40
 8005962:	68f8      	ldr	r0, [r7, #12]
 8005964:	f001 f868 	bl	8006a38 <UART_WaitOnFlagUntilTimeout>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d005      	beq.n	800597a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2220      	movs	r2, #32
 8005972:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e006      	b.n	8005988 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2220      	movs	r2, #32
 800597e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005982:	2300      	movs	r3, #0
 8005984:	e000      	b.n	8005988 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005986:	2302      	movs	r3, #2
  }
}
 8005988:	4618      	mov	r0, r3
 800598a:	3720      	adds	r7, #32
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b08a      	sub	sp, #40	@ 0x28
 8005994:	af02      	add	r7, sp, #8
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	603b      	str	r3, [r7, #0]
 800599c:	4613      	mov	r3, r2
 800599e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80059a6:	2b20      	cmp	r3, #32
 80059a8:	f040 80b5 	bne.w	8005b16 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d002      	beq.n	80059b8 <HAL_UART_Receive+0x28>
 80059b2:	88fb      	ldrh	r3, [r7, #6]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d101      	bne.n	80059bc <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e0ad      	b.n	8005b18 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2200      	movs	r2, #0
 80059c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2222      	movs	r2, #34	@ 0x22
 80059c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059d2:	f7fb ff2f 	bl	8001834 <HAL_GetTick>
 80059d6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	88fa      	ldrh	r2, [r7, #6]
 80059dc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	88fa      	ldrh	r2, [r7, #6]
 80059e4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059f0:	d10e      	bne.n	8005a10 <HAL_UART_Receive+0x80>
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d105      	bne.n	8005a06 <HAL_UART_Receive+0x76>
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005a00:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005a04:	e02d      	b.n	8005a62 <HAL_UART_Receive+0xd2>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	22ff      	movs	r2, #255	@ 0xff
 8005a0a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005a0e:	e028      	b.n	8005a62 <HAL_UART_Receive+0xd2>
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d10d      	bne.n	8005a34 <HAL_UART_Receive+0xa4>
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	691b      	ldr	r3, [r3, #16]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d104      	bne.n	8005a2a <HAL_UART_Receive+0x9a>
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	22ff      	movs	r2, #255	@ 0xff
 8005a24:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005a28:	e01b      	b.n	8005a62 <HAL_UART_Receive+0xd2>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	227f      	movs	r2, #127	@ 0x7f
 8005a2e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005a32:	e016      	b.n	8005a62 <HAL_UART_Receive+0xd2>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a3c:	d10d      	bne.n	8005a5a <HAL_UART_Receive+0xca>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d104      	bne.n	8005a50 <HAL_UART_Receive+0xc0>
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	227f      	movs	r2, #127	@ 0x7f
 8005a4a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005a4e:	e008      	b.n	8005a62 <HAL_UART_Receive+0xd2>
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	223f      	movs	r2, #63	@ 0x3f
 8005a54:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005a58:	e003      	b.n	8005a62 <HAL_UART_Receive+0xd2>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005a68:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a72:	d108      	bne.n	8005a86 <HAL_UART_Receive+0xf6>
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d104      	bne.n	8005a86 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	61bb      	str	r3, [r7, #24]
 8005a84:	e003      	b.n	8005a8e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005a8e:	e036      	b.n	8005afe <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	9300      	str	r3, [sp, #0]
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	2200      	movs	r2, #0
 8005a98:	2120      	movs	r1, #32
 8005a9a:	68f8      	ldr	r0, [r7, #12]
 8005a9c:	f000 ffcc 	bl	8006a38 <UART_WaitOnFlagUntilTimeout>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d005      	beq.n	8005ab2 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2220      	movs	r2, #32
 8005aaa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e032      	b.n	8005b18 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d10c      	bne.n	8005ad2 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005abe:	b29a      	uxth	r2, r3
 8005ac0:	8a7b      	ldrh	r3, [r7, #18]
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	b29a      	uxth	r2, r3
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	3302      	adds	r3, #2
 8005ace:	61bb      	str	r3, [r7, #24]
 8005ad0:	e00c      	b.n	8005aec <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad8:	b2da      	uxtb	r2, r3
 8005ada:	8a7b      	ldrh	r3, [r7, #18]
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	4013      	ands	r3, r2
 8005ae0:	b2da      	uxtb	r2, r3
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	3301      	adds	r3, #1
 8005aea:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	3b01      	subs	r3, #1
 8005af6:	b29a      	uxth	r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1c2      	bne.n	8005a90 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2220      	movs	r2, #32
 8005b0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8005b12:	2300      	movs	r3, #0
 8005b14:	e000      	b.n	8005b18 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8005b16:	2302      	movs	r3, #2
  }
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3720      	adds	r7, #32
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b0ba      	sub	sp, #232	@ 0xe8
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	69db      	ldr	r3, [r3, #28]
 8005b2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005b46:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005b4a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005b4e:	4013      	ands	r3, r2
 8005b50:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005b54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d11b      	bne.n	8005b94 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b60:	f003 0320 	and.w	r3, r3, #32
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d015      	beq.n	8005b94 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b6c:	f003 0320 	and.w	r3, r3, #32
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d105      	bne.n	8005b80 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005b74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d009      	beq.n	8005b94 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f000 82e3 	beq.w	8006150 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	4798      	blx	r3
      }
      return;
 8005b92:	e2dd      	b.n	8006150 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005b94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	f000 8123 	beq.w	8005de4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005b9e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005ba2:	4b8d      	ldr	r3, [pc, #564]	@ (8005dd8 <HAL_UART_IRQHandler+0x2b8>)
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d106      	bne.n	8005bb8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005baa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005bae:	4b8b      	ldr	r3, [pc, #556]	@ (8005ddc <HAL_UART_IRQHandler+0x2bc>)
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	f000 8116 	beq.w	8005de4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005bb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bbc:	f003 0301 	and.w	r3, r3, #1
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d011      	beq.n	8005be8 <HAL_UART_IRQHandler+0xc8>
 8005bc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d00b      	beq.n	8005be8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bde:	f043 0201 	orr.w	r2, r3, #1
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005be8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bec:	f003 0302 	and.w	r3, r3, #2
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d011      	beq.n	8005c18 <HAL_UART_IRQHandler+0xf8>
 8005bf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bf8:	f003 0301 	and.w	r3, r3, #1
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d00b      	beq.n	8005c18 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2202      	movs	r2, #2
 8005c06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c0e:	f043 0204 	orr.w	r2, r3, #4
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c1c:	f003 0304 	and.w	r3, r3, #4
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d011      	beq.n	8005c48 <HAL_UART_IRQHandler+0x128>
 8005c24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c28:	f003 0301 	and.w	r3, r3, #1
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d00b      	beq.n	8005c48 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2204      	movs	r2, #4
 8005c36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c3e:	f043 0202 	orr.w	r2, r3, #2
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005c48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c4c:	f003 0308 	and.w	r3, r3, #8
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d017      	beq.n	8005c84 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c58:	f003 0320 	and.w	r3, r3, #32
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d105      	bne.n	8005c6c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005c60:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005c64:	4b5c      	ldr	r3, [pc, #368]	@ (8005dd8 <HAL_UART_IRQHandler+0x2b8>)
 8005c66:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d00b      	beq.n	8005c84 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2208      	movs	r2, #8
 8005c72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c7a:	f043 0208 	orr.w	r2, r3, #8
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005c84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d012      	beq.n	8005cb6 <HAL_UART_IRQHandler+0x196>
 8005c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c94:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d00c      	beq.n	8005cb6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005ca4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cac:	f043 0220 	orr.w	r2, r3, #32
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	f000 8249 	beq.w	8006154 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005cc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cc6:	f003 0320 	and.w	r3, r3, #32
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d013      	beq.n	8005cf6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005cce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cd2:	f003 0320 	and.w	r3, r3, #32
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d105      	bne.n	8005ce6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005cda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005cde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d007      	beq.n	8005cf6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d003      	beq.n	8005cf6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cfc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d0a:	2b40      	cmp	r3, #64	@ 0x40
 8005d0c:	d005      	beq.n	8005d1a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005d0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d12:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d054      	beq.n	8005dc4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 fef9 	bl	8006b12 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d2a:	2b40      	cmp	r3, #64	@ 0x40
 8005d2c:	d146      	bne.n	8005dbc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	3308      	adds	r3, #8
 8005d34:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d38:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005d3c:	e853 3f00 	ldrex	r3, [r3]
 8005d40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005d44:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	3308      	adds	r3, #8
 8005d56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005d5a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005d5e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005d66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005d6a:	e841 2300 	strex	r3, r2, [r1]
 8005d6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005d72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d1d9      	bne.n	8005d2e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d017      	beq.n	8005db4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d8a:	4a15      	ldr	r2, [pc, #84]	@ (8005de0 <HAL_UART_IRQHandler+0x2c0>)
 8005d8c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d94:	4618      	mov	r0, r3
 8005d96:	f7fb fee3 	bl	8001b60 <HAL_DMA_Abort_IT>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d019      	beq.n	8005dd4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005dae:	4610      	mov	r0, r2
 8005db0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005db2:	e00f      	b.n	8005dd4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 f9e1 	bl	800617c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dba:	e00b      	b.n	8005dd4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 f9dd 	bl	800617c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dc2:	e007      	b.n	8005dd4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 f9d9 	bl	800617c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005dd2:	e1bf      	b.n	8006154 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dd4:	bf00      	nop
    return;
 8005dd6:	e1bd      	b.n	8006154 <HAL_UART_IRQHandler+0x634>
 8005dd8:	10000001 	.word	0x10000001
 8005ddc:	04000120 	.word	0x04000120
 8005de0:	08006bdf 	.word	0x08006bdf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	f040 8153 	bne.w	8006094 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005df2:	f003 0310 	and.w	r3, r3, #16
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	f000 814c 	beq.w	8006094 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005dfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e00:	f003 0310 	and.w	r3, r3, #16
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	f000 8145 	beq.w	8006094 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2210      	movs	r2, #16
 8005e10:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e1c:	2b40      	cmp	r3, #64	@ 0x40
 8005e1e:	f040 80bb 	bne.w	8005f98 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e30:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	f000 818f 	beq.w	8006158 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005e40:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005e44:	429a      	cmp	r2, r3
 8005e46:	f080 8187 	bcs.w	8006158 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005e50:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 0320 	and.w	r3, r3, #32
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	f040 8087 	bne.w	8005f76 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e70:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005e74:	e853 3f00 	ldrex	r3, [r3]
 8005e78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005e7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005e80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005e92:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005e96:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005e9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005ea2:	e841 2300 	strex	r3, r2, [r1]
 8005ea6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005eaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d1da      	bne.n	8005e68 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	3308      	adds	r3, #8
 8005eb8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ebc:	e853 3f00 	ldrex	r3, [r3]
 8005ec0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005ec2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005ec4:	f023 0301 	bic.w	r3, r3, #1
 8005ec8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	3308      	adds	r3, #8
 8005ed2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005ed6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005eda:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005edc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005ede:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005ee2:	e841 2300 	strex	r3, r2, [r1]
 8005ee6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005ee8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1e1      	bne.n	8005eb2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	3308      	adds	r3, #8
 8005ef4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005ef8:	e853 3f00 	ldrex	r3, [r3]
 8005efc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005efe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	3308      	adds	r3, #8
 8005f0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005f12:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005f14:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f16:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005f18:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005f1a:	e841 2300 	strex	r3, r2, [r1]
 8005f1e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005f20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d1e3      	bne.n	8005eee <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2220      	movs	r2, #32
 8005f2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f3c:	e853 3f00 	ldrex	r3, [r3]
 8005f40:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005f42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f44:	f023 0310 	bic.w	r3, r3, #16
 8005f48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	461a      	mov	r2, r3
 8005f52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005f56:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005f58:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005f5c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005f5e:	e841 2300 	strex	r3, r2, [r1]
 8005f62:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005f64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d1e4      	bne.n	8005f34 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7fb fd9c 	bl	8001aae <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2202      	movs	r2, #2
 8005f7a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	1ad3      	subs	r3, r2, r3
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	4619      	mov	r1, r3
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 f8fd 	bl	8006190 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005f96:	e0df      	b.n	8006158 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	1ad3      	subs	r3, r2, r3
 8005fa8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	f000 80d1 	beq.w	800615c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8005fba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	f000 80cc 	beq.w	800615c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fcc:	e853 3f00 	ldrex	r3, [r3]
 8005fd0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005fd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005fd8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005fe6:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fe8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005fec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005fee:	e841 2300 	strex	r3, r2, [r1]
 8005ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ff4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1e4      	bne.n	8005fc4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	3308      	adds	r3, #8
 8006000:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006004:	e853 3f00 	ldrex	r3, [r3]
 8006008:	623b      	str	r3, [r7, #32]
   return(result);
 800600a:	6a3b      	ldr	r3, [r7, #32]
 800600c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006010:	f023 0301 	bic.w	r3, r3, #1
 8006014:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	3308      	adds	r3, #8
 800601e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006022:	633a      	str	r2, [r7, #48]	@ 0x30
 8006024:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006026:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006028:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800602a:	e841 2300 	strex	r3, r2, [r1]
 800602e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006032:	2b00      	cmp	r3, #0
 8006034:	d1e1      	bne.n	8005ffa <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2220      	movs	r2, #32
 800603a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	e853 3f00 	ldrex	r3, [r3]
 8006056:	60fb      	str	r3, [r7, #12]
   return(result);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f023 0310 	bic.w	r3, r3, #16
 800605e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	461a      	mov	r2, r3
 8006068:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800606c:	61fb      	str	r3, [r7, #28]
 800606e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006070:	69b9      	ldr	r1, [r7, #24]
 8006072:	69fa      	ldr	r2, [r7, #28]
 8006074:	e841 2300 	strex	r3, r2, [r1]
 8006078:	617b      	str	r3, [r7, #20]
   return(result);
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d1e4      	bne.n	800604a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2202      	movs	r2, #2
 8006084:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006086:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800608a:	4619      	mov	r1, r3
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 f87f 	bl	8006190 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006092:	e063      	b.n	800615c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006098:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800609c:	2b00      	cmp	r3, #0
 800609e:	d00e      	beq.n	80060be <HAL_UART_IRQHandler+0x59e>
 80060a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d008      	beq.n	80060be <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80060b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 fdd2 	bl	8006c60 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80060bc:	e051      	b.n	8006162 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80060be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d014      	beq.n	80060f4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80060ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d105      	bne.n	80060e2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80060d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d008      	beq.n	80060f4 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d03a      	beq.n	8006160 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	4798      	blx	r3
    }
    return;
 80060f2:	e035      	b.n	8006160 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80060f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d009      	beq.n	8006114 <HAL_UART_IRQHandler+0x5f4>
 8006100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006104:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006108:	2b00      	cmp	r3, #0
 800610a:	d003      	beq.n	8006114 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 fd7c 	bl	8006c0a <UART_EndTransmit_IT>
    return;
 8006112:	e026      	b.n	8006162 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006118:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800611c:	2b00      	cmp	r3, #0
 800611e:	d009      	beq.n	8006134 <HAL_UART_IRQHandler+0x614>
 8006120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006124:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006128:	2b00      	cmp	r3, #0
 800612a:	d003      	beq.n	8006134 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 fdab 	bl	8006c88 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006132:	e016      	b.n	8006162 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006138:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800613c:	2b00      	cmp	r3, #0
 800613e:	d010      	beq.n	8006162 <HAL_UART_IRQHandler+0x642>
 8006140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006144:	2b00      	cmp	r3, #0
 8006146:	da0c      	bge.n	8006162 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f000 fd93 	bl	8006c74 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800614e:	e008      	b.n	8006162 <HAL_UART_IRQHandler+0x642>
      return;
 8006150:	bf00      	nop
 8006152:	e006      	b.n	8006162 <HAL_UART_IRQHandler+0x642>
    return;
 8006154:	bf00      	nop
 8006156:	e004      	b.n	8006162 <HAL_UART_IRQHandler+0x642>
      return;
 8006158:	bf00      	nop
 800615a:	e002      	b.n	8006162 <HAL_UART_IRQHandler+0x642>
      return;
 800615c:	bf00      	nop
 800615e:	e000      	b.n	8006162 <HAL_UART_IRQHandler+0x642>
    return;
 8006160:	bf00      	nop
  }
}
 8006162:	37e8      	adds	r7, #232	@ 0xe8
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006170:	bf00      	nop
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006184:	bf00      	nop
 8006186:	370c      	adds	r7, #12
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006190:	b480      	push	{r7}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	460b      	mov	r3, r1
 800619a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800619c:	bf00      	nop
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061ac:	b08c      	sub	sp, #48	@ 0x30
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80061b2:	2300      	movs	r3, #0
 80061b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	689a      	ldr	r2, [r3, #8]
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	431a      	orrs	r2, r3
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	695b      	ldr	r3, [r3, #20]
 80061c6:	431a      	orrs	r2, r3
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	69db      	ldr	r3, [r3, #28]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	4baa      	ldr	r3, [pc, #680]	@ (8006480 <UART_SetConfig+0x2d8>)
 80061d8:	4013      	ands	r3, r2
 80061da:	697a      	ldr	r2, [r7, #20]
 80061dc:	6812      	ldr	r2, [r2, #0]
 80061de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80061e0:	430b      	orrs	r3, r1
 80061e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	68da      	ldr	r2, [r3, #12]
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	430a      	orrs	r2, r1
 80061f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	699b      	ldr	r3, [r3, #24]
 80061fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a9f      	ldr	r2, [pc, #636]	@ (8006484 <UART_SetConfig+0x2dc>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d004      	beq.n	8006214 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	6a1b      	ldr	r3, [r3, #32]
 800620e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006210:	4313      	orrs	r3, r2
 8006212:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800621e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006222:	697a      	ldr	r2, [r7, #20]
 8006224:	6812      	ldr	r2, [r2, #0]
 8006226:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006228:	430b      	orrs	r3, r1
 800622a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006232:	f023 010f 	bic.w	r1, r3, #15
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	430a      	orrs	r2, r1
 8006240:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a90      	ldr	r2, [pc, #576]	@ (8006488 <UART_SetConfig+0x2e0>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d125      	bne.n	8006298 <UART_SetConfig+0xf0>
 800624c:	4b8f      	ldr	r3, [pc, #572]	@ (800648c <UART_SetConfig+0x2e4>)
 800624e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006252:	f003 0303 	and.w	r3, r3, #3
 8006256:	2b03      	cmp	r3, #3
 8006258:	d81a      	bhi.n	8006290 <UART_SetConfig+0xe8>
 800625a:	a201      	add	r2, pc, #4	@ (adr r2, 8006260 <UART_SetConfig+0xb8>)
 800625c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006260:	08006271 	.word	0x08006271
 8006264:	08006281 	.word	0x08006281
 8006268:	08006279 	.word	0x08006279
 800626c:	08006289 	.word	0x08006289
 8006270:	2301      	movs	r3, #1
 8006272:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006276:	e116      	b.n	80064a6 <UART_SetConfig+0x2fe>
 8006278:	2302      	movs	r3, #2
 800627a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800627e:	e112      	b.n	80064a6 <UART_SetConfig+0x2fe>
 8006280:	2304      	movs	r3, #4
 8006282:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006286:	e10e      	b.n	80064a6 <UART_SetConfig+0x2fe>
 8006288:	2308      	movs	r3, #8
 800628a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800628e:	e10a      	b.n	80064a6 <UART_SetConfig+0x2fe>
 8006290:	2310      	movs	r3, #16
 8006292:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006296:	e106      	b.n	80064a6 <UART_SetConfig+0x2fe>
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a7c      	ldr	r2, [pc, #496]	@ (8006490 <UART_SetConfig+0x2e8>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d138      	bne.n	8006314 <UART_SetConfig+0x16c>
 80062a2:	4b7a      	ldr	r3, [pc, #488]	@ (800648c <UART_SetConfig+0x2e4>)
 80062a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062a8:	f003 030c 	and.w	r3, r3, #12
 80062ac:	2b0c      	cmp	r3, #12
 80062ae:	d82d      	bhi.n	800630c <UART_SetConfig+0x164>
 80062b0:	a201      	add	r2, pc, #4	@ (adr r2, 80062b8 <UART_SetConfig+0x110>)
 80062b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b6:	bf00      	nop
 80062b8:	080062ed 	.word	0x080062ed
 80062bc:	0800630d 	.word	0x0800630d
 80062c0:	0800630d 	.word	0x0800630d
 80062c4:	0800630d 	.word	0x0800630d
 80062c8:	080062fd 	.word	0x080062fd
 80062cc:	0800630d 	.word	0x0800630d
 80062d0:	0800630d 	.word	0x0800630d
 80062d4:	0800630d 	.word	0x0800630d
 80062d8:	080062f5 	.word	0x080062f5
 80062dc:	0800630d 	.word	0x0800630d
 80062e0:	0800630d 	.word	0x0800630d
 80062e4:	0800630d 	.word	0x0800630d
 80062e8:	08006305 	.word	0x08006305
 80062ec:	2300      	movs	r3, #0
 80062ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062f2:	e0d8      	b.n	80064a6 <UART_SetConfig+0x2fe>
 80062f4:	2302      	movs	r3, #2
 80062f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062fa:	e0d4      	b.n	80064a6 <UART_SetConfig+0x2fe>
 80062fc:	2304      	movs	r3, #4
 80062fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006302:	e0d0      	b.n	80064a6 <UART_SetConfig+0x2fe>
 8006304:	2308      	movs	r3, #8
 8006306:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800630a:	e0cc      	b.n	80064a6 <UART_SetConfig+0x2fe>
 800630c:	2310      	movs	r3, #16
 800630e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006312:	e0c8      	b.n	80064a6 <UART_SetConfig+0x2fe>
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a5e      	ldr	r2, [pc, #376]	@ (8006494 <UART_SetConfig+0x2ec>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d125      	bne.n	800636a <UART_SetConfig+0x1c2>
 800631e:	4b5b      	ldr	r3, [pc, #364]	@ (800648c <UART_SetConfig+0x2e4>)
 8006320:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006324:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006328:	2b30      	cmp	r3, #48	@ 0x30
 800632a:	d016      	beq.n	800635a <UART_SetConfig+0x1b2>
 800632c:	2b30      	cmp	r3, #48	@ 0x30
 800632e:	d818      	bhi.n	8006362 <UART_SetConfig+0x1ba>
 8006330:	2b20      	cmp	r3, #32
 8006332:	d00a      	beq.n	800634a <UART_SetConfig+0x1a2>
 8006334:	2b20      	cmp	r3, #32
 8006336:	d814      	bhi.n	8006362 <UART_SetConfig+0x1ba>
 8006338:	2b00      	cmp	r3, #0
 800633a:	d002      	beq.n	8006342 <UART_SetConfig+0x19a>
 800633c:	2b10      	cmp	r3, #16
 800633e:	d008      	beq.n	8006352 <UART_SetConfig+0x1aa>
 8006340:	e00f      	b.n	8006362 <UART_SetConfig+0x1ba>
 8006342:	2300      	movs	r3, #0
 8006344:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006348:	e0ad      	b.n	80064a6 <UART_SetConfig+0x2fe>
 800634a:	2302      	movs	r3, #2
 800634c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006350:	e0a9      	b.n	80064a6 <UART_SetConfig+0x2fe>
 8006352:	2304      	movs	r3, #4
 8006354:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006358:	e0a5      	b.n	80064a6 <UART_SetConfig+0x2fe>
 800635a:	2308      	movs	r3, #8
 800635c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006360:	e0a1      	b.n	80064a6 <UART_SetConfig+0x2fe>
 8006362:	2310      	movs	r3, #16
 8006364:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006368:	e09d      	b.n	80064a6 <UART_SetConfig+0x2fe>
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a4a      	ldr	r2, [pc, #296]	@ (8006498 <UART_SetConfig+0x2f0>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d125      	bne.n	80063c0 <UART_SetConfig+0x218>
 8006374:	4b45      	ldr	r3, [pc, #276]	@ (800648c <UART_SetConfig+0x2e4>)
 8006376:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800637a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800637e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006380:	d016      	beq.n	80063b0 <UART_SetConfig+0x208>
 8006382:	2bc0      	cmp	r3, #192	@ 0xc0
 8006384:	d818      	bhi.n	80063b8 <UART_SetConfig+0x210>
 8006386:	2b80      	cmp	r3, #128	@ 0x80
 8006388:	d00a      	beq.n	80063a0 <UART_SetConfig+0x1f8>
 800638a:	2b80      	cmp	r3, #128	@ 0x80
 800638c:	d814      	bhi.n	80063b8 <UART_SetConfig+0x210>
 800638e:	2b00      	cmp	r3, #0
 8006390:	d002      	beq.n	8006398 <UART_SetConfig+0x1f0>
 8006392:	2b40      	cmp	r3, #64	@ 0x40
 8006394:	d008      	beq.n	80063a8 <UART_SetConfig+0x200>
 8006396:	e00f      	b.n	80063b8 <UART_SetConfig+0x210>
 8006398:	2300      	movs	r3, #0
 800639a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800639e:	e082      	b.n	80064a6 <UART_SetConfig+0x2fe>
 80063a0:	2302      	movs	r3, #2
 80063a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063a6:	e07e      	b.n	80064a6 <UART_SetConfig+0x2fe>
 80063a8:	2304      	movs	r3, #4
 80063aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063ae:	e07a      	b.n	80064a6 <UART_SetConfig+0x2fe>
 80063b0:	2308      	movs	r3, #8
 80063b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063b6:	e076      	b.n	80064a6 <UART_SetConfig+0x2fe>
 80063b8:	2310      	movs	r3, #16
 80063ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063be:	e072      	b.n	80064a6 <UART_SetConfig+0x2fe>
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a35      	ldr	r2, [pc, #212]	@ (800649c <UART_SetConfig+0x2f4>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d12a      	bne.n	8006420 <UART_SetConfig+0x278>
 80063ca:	4b30      	ldr	r3, [pc, #192]	@ (800648c <UART_SetConfig+0x2e4>)
 80063cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063d8:	d01a      	beq.n	8006410 <UART_SetConfig+0x268>
 80063da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063de:	d81b      	bhi.n	8006418 <UART_SetConfig+0x270>
 80063e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063e4:	d00c      	beq.n	8006400 <UART_SetConfig+0x258>
 80063e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063ea:	d815      	bhi.n	8006418 <UART_SetConfig+0x270>
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d003      	beq.n	80063f8 <UART_SetConfig+0x250>
 80063f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063f4:	d008      	beq.n	8006408 <UART_SetConfig+0x260>
 80063f6:	e00f      	b.n	8006418 <UART_SetConfig+0x270>
 80063f8:	2300      	movs	r3, #0
 80063fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063fe:	e052      	b.n	80064a6 <UART_SetConfig+0x2fe>
 8006400:	2302      	movs	r3, #2
 8006402:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006406:	e04e      	b.n	80064a6 <UART_SetConfig+0x2fe>
 8006408:	2304      	movs	r3, #4
 800640a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800640e:	e04a      	b.n	80064a6 <UART_SetConfig+0x2fe>
 8006410:	2308      	movs	r3, #8
 8006412:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006416:	e046      	b.n	80064a6 <UART_SetConfig+0x2fe>
 8006418:	2310      	movs	r3, #16
 800641a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800641e:	e042      	b.n	80064a6 <UART_SetConfig+0x2fe>
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a17      	ldr	r2, [pc, #92]	@ (8006484 <UART_SetConfig+0x2dc>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d13a      	bne.n	80064a0 <UART_SetConfig+0x2f8>
 800642a:	4b18      	ldr	r3, [pc, #96]	@ (800648c <UART_SetConfig+0x2e4>)
 800642c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006430:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006434:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006438:	d01a      	beq.n	8006470 <UART_SetConfig+0x2c8>
 800643a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800643e:	d81b      	bhi.n	8006478 <UART_SetConfig+0x2d0>
 8006440:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006444:	d00c      	beq.n	8006460 <UART_SetConfig+0x2b8>
 8006446:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800644a:	d815      	bhi.n	8006478 <UART_SetConfig+0x2d0>
 800644c:	2b00      	cmp	r3, #0
 800644e:	d003      	beq.n	8006458 <UART_SetConfig+0x2b0>
 8006450:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006454:	d008      	beq.n	8006468 <UART_SetConfig+0x2c0>
 8006456:	e00f      	b.n	8006478 <UART_SetConfig+0x2d0>
 8006458:	2300      	movs	r3, #0
 800645a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800645e:	e022      	b.n	80064a6 <UART_SetConfig+0x2fe>
 8006460:	2302      	movs	r3, #2
 8006462:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006466:	e01e      	b.n	80064a6 <UART_SetConfig+0x2fe>
 8006468:	2304      	movs	r3, #4
 800646a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800646e:	e01a      	b.n	80064a6 <UART_SetConfig+0x2fe>
 8006470:	2308      	movs	r3, #8
 8006472:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006476:	e016      	b.n	80064a6 <UART_SetConfig+0x2fe>
 8006478:	2310      	movs	r3, #16
 800647a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800647e:	e012      	b.n	80064a6 <UART_SetConfig+0x2fe>
 8006480:	cfff69f3 	.word	0xcfff69f3
 8006484:	40008000 	.word	0x40008000
 8006488:	40013800 	.word	0x40013800
 800648c:	40021000 	.word	0x40021000
 8006490:	40004400 	.word	0x40004400
 8006494:	40004800 	.word	0x40004800
 8006498:	40004c00 	.word	0x40004c00
 800649c:	40005000 	.word	0x40005000
 80064a0:	2310      	movs	r3, #16
 80064a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4aae      	ldr	r2, [pc, #696]	@ (8006764 <UART_SetConfig+0x5bc>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	f040 8097 	bne.w	80065e0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80064b2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80064b6:	2b08      	cmp	r3, #8
 80064b8:	d823      	bhi.n	8006502 <UART_SetConfig+0x35a>
 80064ba:	a201      	add	r2, pc, #4	@ (adr r2, 80064c0 <UART_SetConfig+0x318>)
 80064bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c0:	080064e5 	.word	0x080064e5
 80064c4:	08006503 	.word	0x08006503
 80064c8:	080064ed 	.word	0x080064ed
 80064cc:	08006503 	.word	0x08006503
 80064d0:	080064f3 	.word	0x080064f3
 80064d4:	08006503 	.word	0x08006503
 80064d8:	08006503 	.word	0x08006503
 80064dc:	08006503 	.word	0x08006503
 80064e0:	080064fb 	.word	0x080064fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064e4:	f7fc fac6 	bl	8002a74 <HAL_RCC_GetPCLK1Freq>
 80064e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80064ea:	e010      	b.n	800650e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064ec:	4b9e      	ldr	r3, [pc, #632]	@ (8006768 <UART_SetConfig+0x5c0>)
 80064ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80064f0:	e00d      	b.n	800650e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064f2:	f7fc fa51 	bl	8002998 <HAL_RCC_GetSysClockFreq>
 80064f6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80064f8:	e009      	b.n	800650e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006500:	e005      	b.n	800650e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006502:	2300      	movs	r3, #0
 8006504:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800650c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800650e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006510:	2b00      	cmp	r3, #0
 8006512:	f000 8130 	beq.w	8006776 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800651a:	4a94      	ldr	r2, [pc, #592]	@ (800676c <UART_SetConfig+0x5c4>)
 800651c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006520:	461a      	mov	r2, r3
 8006522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006524:	fbb3 f3f2 	udiv	r3, r3, r2
 8006528:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	685a      	ldr	r2, [r3, #4]
 800652e:	4613      	mov	r3, r2
 8006530:	005b      	lsls	r3, r3, #1
 8006532:	4413      	add	r3, r2
 8006534:	69ba      	ldr	r2, [r7, #24]
 8006536:	429a      	cmp	r2, r3
 8006538:	d305      	bcc.n	8006546 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006540:	69ba      	ldr	r2, [r7, #24]
 8006542:	429a      	cmp	r2, r3
 8006544:	d903      	bls.n	800654e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800654c:	e113      	b.n	8006776 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800654e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006550:	2200      	movs	r2, #0
 8006552:	60bb      	str	r3, [r7, #8]
 8006554:	60fa      	str	r2, [r7, #12]
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800655a:	4a84      	ldr	r2, [pc, #528]	@ (800676c <UART_SetConfig+0x5c4>)
 800655c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006560:	b29b      	uxth	r3, r3
 8006562:	2200      	movs	r2, #0
 8006564:	603b      	str	r3, [r7, #0]
 8006566:	607a      	str	r2, [r7, #4]
 8006568:	e9d7 2300 	ldrd	r2, r3, [r7]
 800656c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006570:	f7f9 febe 	bl	80002f0 <__aeabi_uldivmod>
 8006574:	4602      	mov	r2, r0
 8006576:	460b      	mov	r3, r1
 8006578:	4610      	mov	r0, r2
 800657a:	4619      	mov	r1, r3
 800657c:	f04f 0200 	mov.w	r2, #0
 8006580:	f04f 0300 	mov.w	r3, #0
 8006584:	020b      	lsls	r3, r1, #8
 8006586:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800658a:	0202      	lsls	r2, r0, #8
 800658c:	6979      	ldr	r1, [r7, #20]
 800658e:	6849      	ldr	r1, [r1, #4]
 8006590:	0849      	lsrs	r1, r1, #1
 8006592:	2000      	movs	r0, #0
 8006594:	460c      	mov	r4, r1
 8006596:	4605      	mov	r5, r0
 8006598:	eb12 0804 	adds.w	r8, r2, r4
 800659c:	eb43 0905 	adc.w	r9, r3, r5
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	469a      	mov	sl, r3
 80065a8:	4693      	mov	fp, r2
 80065aa:	4652      	mov	r2, sl
 80065ac:	465b      	mov	r3, fp
 80065ae:	4640      	mov	r0, r8
 80065b0:	4649      	mov	r1, r9
 80065b2:	f7f9 fe9d 	bl	80002f0 <__aeabi_uldivmod>
 80065b6:	4602      	mov	r2, r0
 80065b8:	460b      	mov	r3, r1
 80065ba:	4613      	mov	r3, r2
 80065bc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80065be:	6a3b      	ldr	r3, [r7, #32]
 80065c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065c4:	d308      	bcc.n	80065d8 <UART_SetConfig+0x430>
 80065c6:	6a3b      	ldr	r3, [r7, #32]
 80065c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80065cc:	d204      	bcs.n	80065d8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	6a3a      	ldr	r2, [r7, #32]
 80065d4:	60da      	str	r2, [r3, #12]
 80065d6:	e0ce      	b.n	8006776 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80065de:	e0ca      	b.n	8006776 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	69db      	ldr	r3, [r3, #28]
 80065e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065e8:	d166      	bne.n	80066b8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80065ea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80065ee:	2b08      	cmp	r3, #8
 80065f0:	d827      	bhi.n	8006642 <UART_SetConfig+0x49a>
 80065f2:	a201      	add	r2, pc, #4	@ (adr r2, 80065f8 <UART_SetConfig+0x450>)
 80065f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f8:	0800661d 	.word	0x0800661d
 80065fc:	08006625 	.word	0x08006625
 8006600:	0800662d 	.word	0x0800662d
 8006604:	08006643 	.word	0x08006643
 8006608:	08006633 	.word	0x08006633
 800660c:	08006643 	.word	0x08006643
 8006610:	08006643 	.word	0x08006643
 8006614:	08006643 	.word	0x08006643
 8006618:	0800663b 	.word	0x0800663b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800661c:	f7fc fa2a 	bl	8002a74 <HAL_RCC_GetPCLK1Freq>
 8006620:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006622:	e014      	b.n	800664e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006624:	f7fc fa3c 	bl	8002aa0 <HAL_RCC_GetPCLK2Freq>
 8006628:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800662a:	e010      	b.n	800664e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800662c:	4b4e      	ldr	r3, [pc, #312]	@ (8006768 <UART_SetConfig+0x5c0>)
 800662e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006630:	e00d      	b.n	800664e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006632:	f7fc f9b1 	bl	8002998 <HAL_RCC_GetSysClockFreq>
 8006636:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006638:	e009      	b.n	800664e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800663a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800663e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006640:	e005      	b.n	800664e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006642:	2300      	movs	r3, #0
 8006644:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800664c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800664e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006650:	2b00      	cmp	r3, #0
 8006652:	f000 8090 	beq.w	8006776 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800665a:	4a44      	ldr	r2, [pc, #272]	@ (800676c <UART_SetConfig+0x5c4>)
 800665c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006660:	461a      	mov	r2, r3
 8006662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006664:	fbb3 f3f2 	udiv	r3, r3, r2
 8006668:	005a      	lsls	r2, r3, #1
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	085b      	lsrs	r3, r3, #1
 8006670:	441a      	add	r2, r3
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	fbb2 f3f3 	udiv	r3, r2, r3
 800667a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800667c:	6a3b      	ldr	r3, [r7, #32]
 800667e:	2b0f      	cmp	r3, #15
 8006680:	d916      	bls.n	80066b0 <UART_SetConfig+0x508>
 8006682:	6a3b      	ldr	r3, [r7, #32]
 8006684:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006688:	d212      	bcs.n	80066b0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800668a:	6a3b      	ldr	r3, [r7, #32]
 800668c:	b29b      	uxth	r3, r3
 800668e:	f023 030f 	bic.w	r3, r3, #15
 8006692:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006694:	6a3b      	ldr	r3, [r7, #32]
 8006696:	085b      	lsrs	r3, r3, #1
 8006698:	b29b      	uxth	r3, r3
 800669a:	f003 0307 	and.w	r3, r3, #7
 800669e:	b29a      	uxth	r2, r3
 80066a0:	8bfb      	ldrh	r3, [r7, #30]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	8bfa      	ldrh	r2, [r7, #30]
 80066ac:	60da      	str	r2, [r3, #12]
 80066ae:	e062      	b.n	8006776 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80066b6:	e05e      	b.n	8006776 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80066b8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80066bc:	2b08      	cmp	r3, #8
 80066be:	d828      	bhi.n	8006712 <UART_SetConfig+0x56a>
 80066c0:	a201      	add	r2, pc, #4	@ (adr r2, 80066c8 <UART_SetConfig+0x520>)
 80066c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c6:	bf00      	nop
 80066c8:	080066ed 	.word	0x080066ed
 80066cc:	080066f5 	.word	0x080066f5
 80066d0:	080066fd 	.word	0x080066fd
 80066d4:	08006713 	.word	0x08006713
 80066d8:	08006703 	.word	0x08006703
 80066dc:	08006713 	.word	0x08006713
 80066e0:	08006713 	.word	0x08006713
 80066e4:	08006713 	.word	0x08006713
 80066e8:	0800670b 	.word	0x0800670b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066ec:	f7fc f9c2 	bl	8002a74 <HAL_RCC_GetPCLK1Freq>
 80066f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80066f2:	e014      	b.n	800671e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066f4:	f7fc f9d4 	bl	8002aa0 <HAL_RCC_GetPCLK2Freq>
 80066f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80066fa:	e010      	b.n	800671e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066fc:	4b1a      	ldr	r3, [pc, #104]	@ (8006768 <UART_SetConfig+0x5c0>)
 80066fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006700:	e00d      	b.n	800671e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006702:	f7fc f949 	bl	8002998 <HAL_RCC_GetSysClockFreq>
 8006706:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006708:	e009      	b.n	800671e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800670a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800670e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006710:	e005      	b.n	800671e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006712:	2300      	movs	r3, #0
 8006714:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800671c:	bf00      	nop
    }

    if (pclk != 0U)
 800671e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006720:	2b00      	cmp	r3, #0
 8006722:	d028      	beq.n	8006776 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006728:	4a10      	ldr	r2, [pc, #64]	@ (800676c <UART_SetConfig+0x5c4>)
 800672a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800672e:	461a      	mov	r2, r3
 8006730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006732:	fbb3 f2f2 	udiv	r2, r3, r2
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	085b      	lsrs	r3, r3, #1
 800673c:	441a      	add	r2, r3
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	fbb2 f3f3 	udiv	r3, r2, r3
 8006746:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006748:	6a3b      	ldr	r3, [r7, #32]
 800674a:	2b0f      	cmp	r3, #15
 800674c:	d910      	bls.n	8006770 <UART_SetConfig+0x5c8>
 800674e:	6a3b      	ldr	r3, [r7, #32]
 8006750:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006754:	d20c      	bcs.n	8006770 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006756:	6a3b      	ldr	r3, [r7, #32]
 8006758:	b29a      	uxth	r2, r3
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	60da      	str	r2, [r3, #12]
 8006760:	e009      	b.n	8006776 <UART_SetConfig+0x5ce>
 8006762:	bf00      	nop
 8006764:	40008000 	.word	0x40008000
 8006768:	00f42400 	.word	0x00f42400
 800676c:	08007bc4 	.word	0x08007bc4
      }
      else
      {
        ret = HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	2201      	movs	r2, #1
 800677a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	2201      	movs	r2, #1
 8006782:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	2200      	movs	r2, #0
 800678a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	2200      	movs	r2, #0
 8006790:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006792:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006796:	4618      	mov	r0, r3
 8006798:	3730      	adds	r7, #48	@ 0x30
 800679a:	46bd      	mov	sp, r7
 800679c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080067a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ac:	f003 0308 	and.w	r3, r3, #8
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d00a      	beq.n	80067ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	430a      	orrs	r2, r1
 80067c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ce:	f003 0301 	and.w	r3, r3, #1
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d00a      	beq.n	80067ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	430a      	orrs	r2, r1
 80067ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067f0:	f003 0302 	and.w	r3, r3, #2
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d00a      	beq.n	800680e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	430a      	orrs	r2, r1
 800680c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006812:	f003 0304 	and.w	r3, r3, #4
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00a      	beq.n	8006830 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	430a      	orrs	r2, r1
 800682e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006834:	f003 0310 	and.w	r3, r3, #16
 8006838:	2b00      	cmp	r3, #0
 800683a:	d00a      	beq.n	8006852 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	430a      	orrs	r2, r1
 8006850:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006856:	f003 0320 	and.w	r3, r3, #32
 800685a:	2b00      	cmp	r3, #0
 800685c:	d00a      	beq.n	8006874 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	430a      	orrs	r2, r1
 8006872:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800687c:	2b00      	cmp	r3, #0
 800687e:	d01a      	beq.n	80068b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	430a      	orrs	r2, r1
 8006894:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800689a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800689e:	d10a      	bne.n	80068b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	430a      	orrs	r2, r1
 80068b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d00a      	beq.n	80068d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	430a      	orrs	r2, r1
 80068d6:	605a      	str	r2, [r3, #4]
  }
}
 80068d8:	bf00      	nop
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b098      	sub	sp, #96	@ 0x60
 80068e8:	af02      	add	r7, sp, #8
 80068ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80068f4:	f7fa ff9e 	bl	8001834 <HAL_GetTick>
 80068f8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 0308 	and.w	r3, r3, #8
 8006904:	2b08      	cmp	r3, #8
 8006906:	d12f      	bne.n	8006968 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006908:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800690c:	9300      	str	r3, [sp, #0]
 800690e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006910:	2200      	movs	r2, #0
 8006912:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 f88e 	bl	8006a38 <UART_WaitOnFlagUntilTimeout>
 800691c:	4603      	mov	r3, r0
 800691e:	2b00      	cmp	r3, #0
 8006920:	d022      	beq.n	8006968 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800692a:	e853 3f00 	ldrex	r3, [r3]
 800692e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006930:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006932:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006936:	653b      	str	r3, [r7, #80]	@ 0x50
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	461a      	mov	r2, r3
 800693e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006940:	647b      	str	r3, [r7, #68]	@ 0x44
 8006942:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006944:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006946:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006948:	e841 2300 	strex	r3, r2, [r1]
 800694c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800694e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006950:	2b00      	cmp	r3, #0
 8006952:	d1e6      	bne.n	8006922 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2220      	movs	r2, #32
 8006958:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006964:	2303      	movs	r3, #3
 8006966:	e063      	b.n	8006a30 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f003 0304 	and.w	r3, r3, #4
 8006972:	2b04      	cmp	r3, #4
 8006974:	d149      	bne.n	8006a0a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006976:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800697a:	9300      	str	r3, [sp, #0]
 800697c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800697e:	2200      	movs	r2, #0
 8006980:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 f857 	bl	8006a38 <UART_WaitOnFlagUntilTimeout>
 800698a:	4603      	mov	r3, r0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d03c      	beq.n	8006a0a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006998:	e853 3f00 	ldrex	r3, [r3]
 800699c:	623b      	str	r3, [r7, #32]
   return(result);
 800699e:	6a3b      	ldr	r3, [r7, #32]
 80069a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80069a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	461a      	mov	r2, r3
 80069ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80069b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069b6:	e841 2300 	strex	r3, r2, [r1]
 80069ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80069bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d1e6      	bne.n	8006990 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	3308      	adds	r3, #8
 80069c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	e853 3f00 	ldrex	r3, [r3]
 80069d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f023 0301 	bic.w	r3, r3, #1
 80069d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	3308      	adds	r3, #8
 80069e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069e2:	61fa      	str	r2, [r7, #28]
 80069e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e6:	69b9      	ldr	r1, [r7, #24]
 80069e8:	69fa      	ldr	r2, [r7, #28]
 80069ea:	e841 2300 	strex	r3, r2, [r1]
 80069ee:	617b      	str	r3, [r7, #20]
   return(result);
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d1e5      	bne.n	80069c2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2220      	movs	r2, #32
 80069fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a06:	2303      	movs	r3, #3
 8006a08:	e012      	b.n	8006a30 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2220      	movs	r2, #32
 8006a0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2220      	movs	r2, #32
 8006a16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006a2e:	2300      	movs	r3, #0
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3758      	adds	r7, #88	@ 0x58
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	603b      	str	r3, [r7, #0]
 8006a44:	4613      	mov	r3, r2
 8006a46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a48:	e04f      	b.n	8006aea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a4a:	69bb      	ldr	r3, [r7, #24]
 8006a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a50:	d04b      	beq.n	8006aea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a52:	f7fa feef 	bl	8001834 <HAL_GetTick>
 8006a56:	4602      	mov	r2, r0
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	1ad3      	subs	r3, r2, r3
 8006a5c:	69ba      	ldr	r2, [r7, #24]
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d302      	bcc.n	8006a68 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d101      	bne.n	8006a6c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006a68:	2303      	movs	r3, #3
 8006a6a:	e04e      	b.n	8006b0a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 0304 	and.w	r3, r3, #4
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d037      	beq.n	8006aea <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	2b80      	cmp	r3, #128	@ 0x80
 8006a7e:	d034      	beq.n	8006aea <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	2b40      	cmp	r3, #64	@ 0x40
 8006a84:	d031      	beq.n	8006aea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	69db      	ldr	r3, [r3, #28]
 8006a8c:	f003 0308 	and.w	r3, r3, #8
 8006a90:	2b08      	cmp	r3, #8
 8006a92:	d110      	bne.n	8006ab6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	2208      	movs	r2, #8
 8006a9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a9c:	68f8      	ldr	r0, [r7, #12]
 8006a9e:	f000 f838 	bl	8006b12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2208      	movs	r2, #8
 8006aa6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e029      	b.n	8006b0a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	69db      	ldr	r3, [r3, #28]
 8006abc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ac0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ac4:	d111      	bne.n	8006aea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006ace:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ad0:	68f8      	ldr	r0, [r7, #12]
 8006ad2:	f000 f81e 	bl	8006b12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2220      	movs	r2, #32
 8006ada:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	e00f      	b.n	8006b0a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	69da      	ldr	r2, [r3, #28]
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	4013      	ands	r3, r2
 8006af4:	68ba      	ldr	r2, [r7, #8]
 8006af6:	429a      	cmp	r2, r3
 8006af8:	bf0c      	ite	eq
 8006afa:	2301      	moveq	r3, #1
 8006afc:	2300      	movne	r3, #0
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	461a      	mov	r2, r3
 8006b02:	79fb      	ldrb	r3, [r7, #7]
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d0a0      	beq.n	8006a4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b08:	2300      	movs	r3, #0
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3710      	adds	r7, #16
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}

08006b12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b12:	b480      	push	{r7}
 8006b14:	b095      	sub	sp, #84	@ 0x54
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b22:	e853 3f00 	ldrex	r3, [r3]
 8006b26:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b2a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	461a      	mov	r2, r3
 8006b36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b38:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b3a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b3c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006b3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b40:	e841 2300 	strex	r3, r2, [r1]
 8006b44:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d1e6      	bne.n	8006b1a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	3308      	adds	r3, #8
 8006b52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b54:	6a3b      	ldr	r3, [r7, #32]
 8006b56:	e853 3f00 	ldrex	r3, [r3]
 8006b5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b62:	f023 0301 	bic.w	r3, r3, #1
 8006b66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	3308      	adds	r3, #8
 8006b6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b70:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b78:	e841 2300 	strex	r3, r2, [r1]
 8006b7c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d1e3      	bne.n	8006b4c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d118      	bne.n	8006bbe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	e853 3f00 	ldrex	r3, [r3]
 8006b98:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	f023 0310 	bic.w	r3, r3, #16
 8006ba0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006baa:	61bb      	str	r3, [r7, #24]
 8006bac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bae:	6979      	ldr	r1, [r7, #20]
 8006bb0:	69ba      	ldr	r2, [r7, #24]
 8006bb2:	e841 2300 	strex	r3, r2, [r1]
 8006bb6:	613b      	str	r3, [r7, #16]
   return(result);
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1e6      	bne.n	8006b8c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2220      	movs	r2, #32
 8006bc2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006bd2:	bf00      	nop
 8006bd4:	3754      	adds	r7, #84	@ 0x54
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr

08006bde <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006bde:	b580      	push	{r7, lr}
 8006be0:	b084      	sub	sp, #16
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006bfc:	68f8      	ldr	r0, [r7, #12]
 8006bfe:	f7ff fabd 	bl	800617c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c02:	bf00      	nop
 8006c04:	3710      	adds	r7, #16
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b088      	sub	sp, #32
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	e853 3f00 	ldrex	r3, [r3]
 8006c1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c26:	61fb      	str	r3, [r7, #28]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	61bb      	str	r3, [r7, #24]
 8006c32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c34:	6979      	ldr	r1, [r7, #20]
 8006c36:	69ba      	ldr	r2, [r7, #24]
 8006c38:	e841 2300 	strex	r3, r2, [r1]
 8006c3c:	613b      	str	r3, [r7, #16]
   return(result);
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d1e6      	bne.n	8006c12 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2220      	movs	r2, #32
 8006c48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f7ff fa88 	bl	8006168 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c58:	bf00      	nop
 8006c5a:	3720      	adds	r7, #32
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b083      	sub	sp, #12
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006c68:	bf00      	nop
 8006c6a:	370c      	adds	r7, #12
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006c7c:	bf00      	nop
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006c90:	bf00      	nop
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b085      	sub	sp, #20
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d101      	bne.n	8006cb2 <HAL_UARTEx_DisableFifoMode+0x16>
 8006cae:	2302      	movs	r3, #2
 8006cb0:	e027      	b.n	8006d02 <HAL_UARTEx_DisableFifoMode+0x66>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2224      	movs	r2, #36	@ 0x24
 8006cbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f022 0201 	bic.w	r2, r2, #1
 8006cd8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006ce0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	68fa      	ldr	r2, [r7, #12]
 8006cee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2220      	movs	r2, #32
 8006cf4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006d00:	2300      	movs	r3, #0
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3714      	adds	r7, #20
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr

08006d0e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d0e:	b580      	push	{r7, lr}
 8006d10:	b084      	sub	sp, #16
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]
 8006d16:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d101      	bne.n	8006d26 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006d22:	2302      	movs	r3, #2
 8006d24:	e02d      	b.n	8006d82 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2224      	movs	r2, #36	@ 0x24
 8006d32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f022 0201 	bic.w	r2, r2, #1
 8006d4c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	683a      	ldr	r2, [r7, #0]
 8006d5e:	430a      	orrs	r2, r1
 8006d60:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 f850 	bl	8006e08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2220      	movs	r2, #32
 8006d74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006d80:	2300      	movs	r3, #0
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3710      	adds	r7, #16
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}

08006d8a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d8a:	b580      	push	{r7, lr}
 8006d8c:	b084      	sub	sp, #16
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
 8006d92:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d101      	bne.n	8006da2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006d9e:	2302      	movs	r3, #2
 8006da0:	e02d      	b.n	8006dfe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2201      	movs	r2, #1
 8006da6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2224      	movs	r2, #36	@ 0x24
 8006dae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f022 0201 	bic.w	r2, r2, #1
 8006dc8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	683a      	ldr	r2, [r7, #0]
 8006dda:	430a      	orrs	r2, r1
 8006ddc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 f812 	bl	8006e08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	68fa      	ldr	r2, [r7, #12]
 8006dea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2220      	movs	r2, #32
 8006df0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006dfc:	2300      	movs	r3, #0
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3710      	adds	r7, #16
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
	...

08006e08 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d108      	bne.n	8006e2a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006e28:	e031      	b.n	8006e8e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006e2a:	2308      	movs	r3, #8
 8006e2c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006e2e:	2308      	movs	r3, #8
 8006e30:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	0e5b      	lsrs	r3, r3, #25
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	f003 0307 	and.w	r3, r3, #7
 8006e40:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	0f5b      	lsrs	r3, r3, #29
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	f003 0307 	and.w	r3, r3, #7
 8006e50:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e52:	7bbb      	ldrb	r3, [r7, #14]
 8006e54:	7b3a      	ldrb	r2, [r7, #12]
 8006e56:	4911      	ldr	r1, [pc, #68]	@ (8006e9c <UARTEx_SetNbDataToProcess+0x94>)
 8006e58:	5c8a      	ldrb	r2, [r1, r2]
 8006e5a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006e5e:	7b3a      	ldrb	r2, [r7, #12]
 8006e60:	490f      	ldr	r1, [pc, #60]	@ (8006ea0 <UARTEx_SetNbDataToProcess+0x98>)
 8006e62:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e64:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e68:	b29a      	uxth	r2, r3
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e70:	7bfb      	ldrb	r3, [r7, #15]
 8006e72:	7b7a      	ldrb	r2, [r7, #13]
 8006e74:	4909      	ldr	r1, [pc, #36]	@ (8006e9c <UARTEx_SetNbDataToProcess+0x94>)
 8006e76:	5c8a      	ldrb	r2, [r1, r2]
 8006e78:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006e7c:	7b7a      	ldrb	r2, [r7, #13]
 8006e7e:	4908      	ldr	r1, [pc, #32]	@ (8006ea0 <UARTEx_SetNbDataToProcess+0x98>)
 8006e80:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e82:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e86:	b29a      	uxth	r2, r3
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006e8e:	bf00      	nop
 8006e90:	3714      	adds	r7, #20
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr
 8006e9a:	bf00      	nop
 8006e9c:	08007bdc 	.word	0x08007bdc
 8006ea0:	08007be4 	.word	0x08007be4

08006ea4 <malloc>:
 8006ea4:	4b02      	ldr	r3, [pc, #8]	@ (8006eb0 <malloc+0xc>)
 8006ea6:	4601      	mov	r1, r0
 8006ea8:	6818      	ldr	r0, [r3, #0]
 8006eaa:	f000 b82d 	b.w	8006f08 <_malloc_r>
 8006eae:	bf00      	nop
 8006eb0:	2000002c 	.word	0x2000002c

08006eb4 <free>:
 8006eb4:	4b02      	ldr	r3, [pc, #8]	@ (8006ec0 <free+0xc>)
 8006eb6:	4601      	mov	r1, r0
 8006eb8:	6818      	ldr	r0, [r3, #0]
 8006eba:	f000 b935 	b.w	8007128 <_free_r>
 8006ebe:	bf00      	nop
 8006ec0:	2000002c 	.word	0x2000002c

08006ec4 <sbrk_aligned>:
 8006ec4:	b570      	push	{r4, r5, r6, lr}
 8006ec6:	4e0f      	ldr	r6, [pc, #60]	@ (8006f04 <sbrk_aligned+0x40>)
 8006ec8:	460c      	mov	r4, r1
 8006eca:	6831      	ldr	r1, [r6, #0]
 8006ecc:	4605      	mov	r5, r0
 8006ece:	b911      	cbnz	r1, 8006ed6 <sbrk_aligned+0x12>
 8006ed0:	f000 f8ee 	bl	80070b0 <_sbrk_r>
 8006ed4:	6030      	str	r0, [r6, #0]
 8006ed6:	4621      	mov	r1, r4
 8006ed8:	4628      	mov	r0, r5
 8006eda:	f000 f8e9 	bl	80070b0 <_sbrk_r>
 8006ede:	1c43      	adds	r3, r0, #1
 8006ee0:	d103      	bne.n	8006eea <sbrk_aligned+0x26>
 8006ee2:	f04f 34ff 	mov.w	r4, #4294967295
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	bd70      	pop	{r4, r5, r6, pc}
 8006eea:	1cc4      	adds	r4, r0, #3
 8006eec:	f024 0403 	bic.w	r4, r4, #3
 8006ef0:	42a0      	cmp	r0, r4
 8006ef2:	d0f8      	beq.n	8006ee6 <sbrk_aligned+0x22>
 8006ef4:	1a21      	subs	r1, r4, r0
 8006ef6:	4628      	mov	r0, r5
 8006ef8:	f000 f8da 	bl	80070b0 <_sbrk_r>
 8006efc:	3001      	adds	r0, #1
 8006efe:	d1f2      	bne.n	8006ee6 <sbrk_aligned+0x22>
 8006f00:	e7ef      	b.n	8006ee2 <sbrk_aligned+0x1e>
 8006f02:	bf00      	nop
 8006f04:	20000338 	.word	0x20000338

08006f08 <_malloc_r>:
 8006f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f0c:	1ccd      	adds	r5, r1, #3
 8006f0e:	f025 0503 	bic.w	r5, r5, #3
 8006f12:	3508      	adds	r5, #8
 8006f14:	2d0c      	cmp	r5, #12
 8006f16:	bf38      	it	cc
 8006f18:	250c      	movcc	r5, #12
 8006f1a:	2d00      	cmp	r5, #0
 8006f1c:	4606      	mov	r6, r0
 8006f1e:	db01      	blt.n	8006f24 <_malloc_r+0x1c>
 8006f20:	42a9      	cmp	r1, r5
 8006f22:	d904      	bls.n	8006f2e <_malloc_r+0x26>
 8006f24:	230c      	movs	r3, #12
 8006f26:	6033      	str	r3, [r6, #0]
 8006f28:	2000      	movs	r0, #0
 8006f2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007004 <_malloc_r+0xfc>
 8006f32:	f000 f869 	bl	8007008 <__malloc_lock>
 8006f36:	f8d8 3000 	ldr.w	r3, [r8]
 8006f3a:	461c      	mov	r4, r3
 8006f3c:	bb44      	cbnz	r4, 8006f90 <_malloc_r+0x88>
 8006f3e:	4629      	mov	r1, r5
 8006f40:	4630      	mov	r0, r6
 8006f42:	f7ff ffbf 	bl	8006ec4 <sbrk_aligned>
 8006f46:	1c43      	adds	r3, r0, #1
 8006f48:	4604      	mov	r4, r0
 8006f4a:	d158      	bne.n	8006ffe <_malloc_r+0xf6>
 8006f4c:	f8d8 4000 	ldr.w	r4, [r8]
 8006f50:	4627      	mov	r7, r4
 8006f52:	2f00      	cmp	r7, #0
 8006f54:	d143      	bne.n	8006fde <_malloc_r+0xd6>
 8006f56:	2c00      	cmp	r4, #0
 8006f58:	d04b      	beq.n	8006ff2 <_malloc_r+0xea>
 8006f5a:	6823      	ldr	r3, [r4, #0]
 8006f5c:	4639      	mov	r1, r7
 8006f5e:	4630      	mov	r0, r6
 8006f60:	eb04 0903 	add.w	r9, r4, r3
 8006f64:	f000 f8a4 	bl	80070b0 <_sbrk_r>
 8006f68:	4581      	cmp	r9, r0
 8006f6a:	d142      	bne.n	8006ff2 <_malloc_r+0xea>
 8006f6c:	6821      	ldr	r1, [r4, #0]
 8006f6e:	1a6d      	subs	r5, r5, r1
 8006f70:	4629      	mov	r1, r5
 8006f72:	4630      	mov	r0, r6
 8006f74:	f7ff ffa6 	bl	8006ec4 <sbrk_aligned>
 8006f78:	3001      	adds	r0, #1
 8006f7a:	d03a      	beq.n	8006ff2 <_malloc_r+0xea>
 8006f7c:	6823      	ldr	r3, [r4, #0]
 8006f7e:	442b      	add	r3, r5
 8006f80:	6023      	str	r3, [r4, #0]
 8006f82:	f8d8 3000 	ldr.w	r3, [r8]
 8006f86:	685a      	ldr	r2, [r3, #4]
 8006f88:	bb62      	cbnz	r2, 8006fe4 <_malloc_r+0xdc>
 8006f8a:	f8c8 7000 	str.w	r7, [r8]
 8006f8e:	e00f      	b.n	8006fb0 <_malloc_r+0xa8>
 8006f90:	6822      	ldr	r2, [r4, #0]
 8006f92:	1b52      	subs	r2, r2, r5
 8006f94:	d420      	bmi.n	8006fd8 <_malloc_r+0xd0>
 8006f96:	2a0b      	cmp	r2, #11
 8006f98:	d917      	bls.n	8006fca <_malloc_r+0xc2>
 8006f9a:	1961      	adds	r1, r4, r5
 8006f9c:	42a3      	cmp	r3, r4
 8006f9e:	6025      	str	r5, [r4, #0]
 8006fa0:	bf18      	it	ne
 8006fa2:	6059      	strne	r1, [r3, #4]
 8006fa4:	6863      	ldr	r3, [r4, #4]
 8006fa6:	bf08      	it	eq
 8006fa8:	f8c8 1000 	streq.w	r1, [r8]
 8006fac:	5162      	str	r2, [r4, r5]
 8006fae:	604b      	str	r3, [r1, #4]
 8006fb0:	4630      	mov	r0, r6
 8006fb2:	f000 f82f 	bl	8007014 <__malloc_unlock>
 8006fb6:	f104 000b 	add.w	r0, r4, #11
 8006fba:	1d23      	adds	r3, r4, #4
 8006fbc:	f020 0007 	bic.w	r0, r0, #7
 8006fc0:	1ac2      	subs	r2, r0, r3
 8006fc2:	bf1c      	itt	ne
 8006fc4:	1a1b      	subne	r3, r3, r0
 8006fc6:	50a3      	strne	r3, [r4, r2]
 8006fc8:	e7af      	b.n	8006f2a <_malloc_r+0x22>
 8006fca:	6862      	ldr	r2, [r4, #4]
 8006fcc:	42a3      	cmp	r3, r4
 8006fce:	bf0c      	ite	eq
 8006fd0:	f8c8 2000 	streq.w	r2, [r8]
 8006fd4:	605a      	strne	r2, [r3, #4]
 8006fd6:	e7eb      	b.n	8006fb0 <_malloc_r+0xa8>
 8006fd8:	4623      	mov	r3, r4
 8006fda:	6864      	ldr	r4, [r4, #4]
 8006fdc:	e7ae      	b.n	8006f3c <_malloc_r+0x34>
 8006fde:	463c      	mov	r4, r7
 8006fe0:	687f      	ldr	r7, [r7, #4]
 8006fe2:	e7b6      	b.n	8006f52 <_malloc_r+0x4a>
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	42a3      	cmp	r3, r4
 8006fea:	d1fb      	bne.n	8006fe4 <_malloc_r+0xdc>
 8006fec:	2300      	movs	r3, #0
 8006fee:	6053      	str	r3, [r2, #4]
 8006ff0:	e7de      	b.n	8006fb0 <_malloc_r+0xa8>
 8006ff2:	230c      	movs	r3, #12
 8006ff4:	6033      	str	r3, [r6, #0]
 8006ff6:	4630      	mov	r0, r6
 8006ff8:	f000 f80c 	bl	8007014 <__malloc_unlock>
 8006ffc:	e794      	b.n	8006f28 <_malloc_r+0x20>
 8006ffe:	6005      	str	r5, [r0, #0]
 8007000:	e7d6      	b.n	8006fb0 <_malloc_r+0xa8>
 8007002:	bf00      	nop
 8007004:	2000033c 	.word	0x2000033c

08007008 <__malloc_lock>:
 8007008:	4801      	ldr	r0, [pc, #4]	@ (8007010 <__malloc_lock+0x8>)
 800700a:	f000 b88b 	b.w	8007124 <__retarget_lock_acquire_recursive>
 800700e:	bf00      	nop
 8007010:	2000047c 	.word	0x2000047c

08007014 <__malloc_unlock>:
 8007014:	4801      	ldr	r0, [pc, #4]	@ (800701c <__malloc_unlock+0x8>)
 8007016:	f000 b886 	b.w	8007126 <__retarget_lock_release_recursive>
 800701a:	bf00      	nop
 800701c:	2000047c 	.word	0x2000047c

08007020 <siscanf>:
 8007020:	b40e      	push	{r1, r2, r3}
 8007022:	b530      	push	{r4, r5, lr}
 8007024:	b09c      	sub	sp, #112	@ 0x70
 8007026:	ac1f      	add	r4, sp, #124	@ 0x7c
 8007028:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800702c:	f854 5b04 	ldr.w	r5, [r4], #4
 8007030:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007034:	9002      	str	r0, [sp, #8]
 8007036:	9006      	str	r0, [sp, #24]
 8007038:	f7f9 f8fc 	bl	8000234 <strlen>
 800703c:	4b0b      	ldr	r3, [pc, #44]	@ (800706c <siscanf+0x4c>)
 800703e:	9003      	str	r0, [sp, #12]
 8007040:	9007      	str	r0, [sp, #28]
 8007042:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007044:	480a      	ldr	r0, [pc, #40]	@ (8007070 <siscanf+0x50>)
 8007046:	9401      	str	r4, [sp, #4]
 8007048:	2300      	movs	r3, #0
 800704a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800704c:	9314      	str	r3, [sp, #80]	@ 0x50
 800704e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007052:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007056:	462a      	mov	r2, r5
 8007058:	4623      	mov	r3, r4
 800705a:	a902      	add	r1, sp, #8
 800705c:	6800      	ldr	r0, [r0, #0]
 800705e:	f000 f905 	bl	800726c <__ssvfiscanf_r>
 8007062:	b01c      	add	sp, #112	@ 0x70
 8007064:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007068:	b003      	add	sp, #12
 800706a:	4770      	bx	lr
 800706c:	08007075 	.word	0x08007075
 8007070:	2000002c 	.word	0x2000002c

08007074 <__seofread>:
 8007074:	2000      	movs	r0, #0
 8007076:	4770      	bx	lr

08007078 <memset>:
 8007078:	4402      	add	r2, r0
 800707a:	4603      	mov	r3, r0
 800707c:	4293      	cmp	r3, r2
 800707e:	d100      	bne.n	8007082 <memset+0xa>
 8007080:	4770      	bx	lr
 8007082:	f803 1b01 	strb.w	r1, [r3], #1
 8007086:	e7f9      	b.n	800707c <memset+0x4>

08007088 <strncpy>:
 8007088:	b510      	push	{r4, lr}
 800708a:	3901      	subs	r1, #1
 800708c:	4603      	mov	r3, r0
 800708e:	b132      	cbz	r2, 800709e <strncpy+0x16>
 8007090:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007094:	f803 4b01 	strb.w	r4, [r3], #1
 8007098:	3a01      	subs	r2, #1
 800709a:	2c00      	cmp	r4, #0
 800709c:	d1f7      	bne.n	800708e <strncpy+0x6>
 800709e:	441a      	add	r2, r3
 80070a0:	2100      	movs	r1, #0
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d100      	bne.n	80070a8 <strncpy+0x20>
 80070a6:	bd10      	pop	{r4, pc}
 80070a8:	f803 1b01 	strb.w	r1, [r3], #1
 80070ac:	e7f9      	b.n	80070a2 <strncpy+0x1a>
	...

080070b0 <_sbrk_r>:
 80070b0:	b538      	push	{r3, r4, r5, lr}
 80070b2:	4d06      	ldr	r5, [pc, #24]	@ (80070cc <_sbrk_r+0x1c>)
 80070b4:	2300      	movs	r3, #0
 80070b6:	4604      	mov	r4, r0
 80070b8:	4608      	mov	r0, r1
 80070ba:	602b      	str	r3, [r5, #0]
 80070bc:	f7fa fae4 	bl	8001688 <_sbrk>
 80070c0:	1c43      	adds	r3, r0, #1
 80070c2:	d102      	bne.n	80070ca <_sbrk_r+0x1a>
 80070c4:	682b      	ldr	r3, [r5, #0]
 80070c6:	b103      	cbz	r3, 80070ca <_sbrk_r+0x1a>
 80070c8:	6023      	str	r3, [r4, #0]
 80070ca:	bd38      	pop	{r3, r4, r5, pc}
 80070cc:	20000478 	.word	0x20000478

080070d0 <__errno>:
 80070d0:	4b01      	ldr	r3, [pc, #4]	@ (80070d8 <__errno+0x8>)
 80070d2:	6818      	ldr	r0, [r3, #0]
 80070d4:	4770      	bx	lr
 80070d6:	bf00      	nop
 80070d8:	2000002c 	.word	0x2000002c

080070dc <__libc_init_array>:
 80070dc:	b570      	push	{r4, r5, r6, lr}
 80070de:	4d0d      	ldr	r5, [pc, #52]	@ (8007114 <__libc_init_array+0x38>)
 80070e0:	4c0d      	ldr	r4, [pc, #52]	@ (8007118 <__libc_init_array+0x3c>)
 80070e2:	1b64      	subs	r4, r4, r5
 80070e4:	10a4      	asrs	r4, r4, #2
 80070e6:	2600      	movs	r6, #0
 80070e8:	42a6      	cmp	r6, r4
 80070ea:	d109      	bne.n	8007100 <__libc_init_array+0x24>
 80070ec:	4d0b      	ldr	r5, [pc, #44]	@ (800711c <__libc_init_array+0x40>)
 80070ee:	4c0c      	ldr	r4, [pc, #48]	@ (8007120 <__libc_init_array+0x44>)
 80070f0:	f000 fd22 	bl	8007b38 <_init>
 80070f4:	1b64      	subs	r4, r4, r5
 80070f6:	10a4      	asrs	r4, r4, #2
 80070f8:	2600      	movs	r6, #0
 80070fa:	42a6      	cmp	r6, r4
 80070fc:	d105      	bne.n	800710a <__libc_init_array+0x2e>
 80070fe:	bd70      	pop	{r4, r5, r6, pc}
 8007100:	f855 3b04 	ldr.w	r3, [r5], #4
 8007104:	4798      	blx	r3
 8007106:	3601      	adds	r6, #1
 8007108:	e7ee      	b.n	80070e8 <__libc_init_array+0xc>
 800710a:	f855 3b04 	ldr.w	r3, [r5], #4
 800710e:	4798      	blx	r3
 8007110:	3601      	adds	r6, #1
 8007112:	e7f2      	b.n	80070fa <__libc_init_array+0x1e>
 8007114:	08007d14 	.word	0x08007d14
 8007118:	08007d14 	.word	0x08007d14
 800711c:	08007d14 	.word	0x08007d14
 8007120:	08007d18 	.word	0x08007d18

08007124 <__retarget_lock_acquire_recursive>:
 8007124:	4770      	bx	lr

08007126 <__retarget_lock_release_recursive>:
 8007126:	4770      	bx	lr

08007128 <_free_r>:
 8007128:	b538      	push	{r3, r4, r5, lr}
 800712a:	4605      	mov	r5, r0
 800712c:	2900      	cmp	r1, #0
 800712e:	d041      	beq.n	80071b4 <_free_r+0x8c>
 8007130:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007134:	1f0c      	subs	r4, r1, #4
 8007136:	2b00      	cmp	r3, #0
 8007138:	bfb8      	it	lt
 800713a:	18e4      	addlt	r4, r4, r3
 800713c:	f7ff ff64 	bl	8007008 <__malloc_lock>
 8007140:	4a1d      	ldr	r2, [pc, #116]	@ (80071b8 <_free_r+0x90>)
 8007142:	6813      	ldr	r3, [r2, #0]
 8007144:	b933      	cbnz	r3, 8007154 <_free_r+0x2c>
 8007146:	6063      	str	r3, [r4, #4]
 8007148:	6014      	str	r4, [r2, #0]
 800714a:	4628      	mov	r0, r5
 800714c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007150:	f7ff bf60 	b.w	8007014 <__malloc_unlock>
 8007154:	42a3      	cmp	r3, r4
 8007156:	d908      	bls.n	800716a <_free_r+0x42>
 8007158:	6820      	ldr	r0, [r4, #0]
 800715a:	1821      	adds	r1, r4, r0
 800715c:	428b      	cmp	r3, r1
 800715e:	bf01      	itttt	eq
 8007160:	6819      	ldreq	r1, [r3, #0]
 8007162:	685b      	ldreq	r3, [r3, #4]
 8007164:	1809      	addeq	r1, r1, r0
 8007166:	6021      	streq	r1, [r4, #0]
 8007168:	e7ed      	b.n	8007146 <_free_r+0x1e>
 800716a:	461a      	mov	r2, r3
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	b10b      	cbz	r3, 8007174 <_free_r+0x4c>
 8007170:	42a3      	cmp	r3, r4
 8007172:	d9fa      	bls.n	800716a <_free_r+0x42>
 8007174:	6811      	ldr	r1, [r2, #0]
 8007176:	1850      	adds	r0, r2, r1
 8007178:	42a0      	cmp	r0, r4
 800717a:	d10b      	bne.n	8007194 <_free_r+0x6c>
 800717c:	6820      	ldr	r0, [r4, #0]
 800717e:	4401      	add	r1, r0
 8007180:	1850      	adds	r0, r2, r1
 8007182:	4283      	cmp	r3, r0
 8007184:	6011      	str	r1, [r2, #0]
 8007186:	d1e0      	bne.n	800714a <_free_r+0x22>
 8007188:	6818      	ldr	r0, [r3, #0]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	6053      	str	r3, [r2, #4]
 800718e:	4408      	add	r0, r1
 8007190:	6010      	str	r0, [r2, #0]
 8007192:	e7da      	b.n	800714a <_free_r+0x22>
 8007194:	d902      	bls.n	800719c <_free_r+0x74>
 8007196:	230c      	movs	r3, #12
 8007198:	602b      	str	r3, [r5, #0]
 800719a:	e7d6      	b.n	800714a <_free_r+0x22>
 800719c:	6820      	ldr	r0, [r4, #0]
 800719e:	1821      	adds	r1, r4, r0
 80071a0:	428b      	cmp	r3, r1
 80071a2:	bf04      	itt	eq
 80071a4:	6819      	ldreq	r1, [r3, #0]
 80071a6:	685b      	ldreq	r3, [r3, #4]
 80071a8:	6063      	str	r3, [r4, #4]
 80071aa:	bf04      	itt	eq
 80071ac:	1809      	addeq	r1, r1, r0
 80071ae:	6021      	streq	r1, [r4, #0]
 80071b0:	6054      	str	r4, [r2, #4]
 80071b2:	e7ca      	b.n	800714a <_free_r+0x22>
 80071b4:	bd38      	pop	{r3, r4, r5, pc}
 80071b6:	bf00      	nop
 80071b8:	2000033c 	.word	0x2000033c

080071bc <_sungetc_r>:
 80071bc:	b538      	push	{r3, r4, r5, lr}
 80071be:	1c4b      	adds	r3, r1, #1
 80071c0:	4614      	mov	r4, r2
 80071c2:	d103      	bne.n	80071cc <_sungetc_r+0x10>
 80071c4:	f04f 35ff 	mov.w	r5, #4294967295
 80071c8:	4628      	mov	r0, r5
 80071ca:	bd38      	pop	{r3, r4, r5, pc}
 80071cc:	8993      	ldrh	r3, [r2, #12]
 80071ce:	f023 0320 	bic.w	r3, r3, #32
 80071d2:	8193      	strh	r3, [r2, #12]
 80071d4:	6853      	ldr	r3, [r2, #4]
 80071d6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80071d8:	b2cd      	uxtb	r5, r1
 80071da:	b18a      	cbz	r2, 8007200 <_sungetc_r+0x44>
 80071dc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80071de:	429a      	cmp	r2, r3
 80071e0:	dd08      	ble.n	80071f4 <_sungetc_r+0x38>
 80071e2:	6823      	ldr	r3, [r4, #0]
 80071e4:	1e5a      	subs	r2, r3, #1
 80071e6:	6022      	str	r2, [r4, #0]
 80071e8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80071ec:	6863      	ldr	r3, [r4, #4]
 80071ee:	3301      	adds	r3, #1
 80071f0:	6063      	str	r3, [r4, #4]
 80071f2:	e7e9      	b.n	80071c8 <_sungetc_r+0xc>
 80071f4:	4621      	mov	r1, r4
 80071f6:	f000 fb34 	bl	8007862 <__submore>
 80071fa:	2800      	cmp	r0, #0
 80071fc:	d0f1      	beq.n	80071e2 <_sungetc_r+0x26>
 80071fe:	e7e1      	b.n	80071c4 <_sungetc_r+0x8>
 8007200:	6921      	ldr	r1, [r4, #16]
 8007202:	6822      	ldr	r2, [r4, #0]
 8007204:	b141      	cbz	r1, 8007218 <_sungetc_r+0x5c>
 8007206:	4291      	cmp	r1, r2
 8007208:	d206      	bcs.n	8007218 <_sungetc_r+0x5c>
 800720a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800720e:	42a9      	cmp	r1, r5
 8007210:	d102      	bne.n	8007218 <_sungetc_r+0x5c>
 8007212:	3a01      	subs	r2, #1
 8007214:	6022      	str	r2, [r4, #0]
 8007216:	e7ea      	b.n	80071ee <_sungetc_r+0x32>
 8007218:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800721c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007220:	6363      	str	r3, [r4, #52]	@ 0x34
 8007222:	2303      	movs	r3, #3
 8007224:	63a3      	str	r3, [r4, #56]	@ 0x38
 8007226:	4623      	mov	r3, r4
 8007228:	f803 5f46 	strb.w	r5, [r3, #70]!
 800722c:	6023      	str	r3, [r4, #0]
 800722e:	2301      	movs	r3, #1
 8007230:	e7de      	b.n	80071f0 <_sungetc_r+0x34>

08007232 <__ssrefill_r>:
 8007232:	b510      	push	{r4, lr}
 8007234:	460c      	mov	r4, r1
 8007236:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8007238:	b169      	cbz	r1, 8007256 <__ssrefill_r+0x24>
 800723a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800723e:	4299      	cmp	r1, r3
 8007240:	d001      	beq.n	8007246 <__ssrefill_r+0x14>
 8007242:	f7ff ff71 	bl	8007128 <_free_r>
 8007246:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007248:	6063      	str	r3, [r4, #4]
 800724a:	2000      	movs	r0, #0
 800724c:	6360      	str	r0, [r4, #52]	@ 0x34
 800724e:	b113      	cbz	r3, 8007256 <__ssrefill_r+0x24>
 8007250:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007252:	6023      	str	r3, [r4, #0]
 8007254:	bd10      	pop	{r4, pc}
 8007256:	6923      	ldr	r3, [r4, #16]
 8007258:	6023      	str	r3, [r4, #0]
 800725a:	2300      	movs	r3, #0
 800725c:	6063      	str	r3, [r4, #4]
 800725e:	89a3      	ldrh	r3, [r4, #12]
 8007260:	f043 0320 	orr.w	r3, r3, #32
 8007264:	81a3      	strh	r3, [r4, #12]
 8007266:	f04f 30ff 	mov.w	r0, #4294967295
 800726a:	e7f3      	b.n	8007254 <__ssrefill_r+0x22>

0800726c <__ssvfiscanf_r>:
 800726c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007270:	460c      	mov	r4, r1
 8007272:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8007276:	2100      	movs	r1, #0
 8007278:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800727c:	49a5      	ldr	r1, [pc, #660]	@ (8007514 <__ssvfiscanf_r+0x2a8>)
 800727e:	91a0      	str	r1, [sp, #640]	@ 0x280
 8007280:	f10d 0804 	add.w	r8, sp, #4
 8007284:	49a4      	ldr	r1, [pc, #656]	@ (8007518 <__ssvfiscanf_r+0x2ac>)
 8007286:	4fa5      	ldr	r7, [pc, #660]	@ (800751c <__ssvfiscanf_r+0x2b0>)
 8007288:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800728c:	4606      	mov	r6, r0
 800728e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8007290:	9300      	str	r3, [sp, #0]
 8007292:	7813      	ldrb	r3, [r2, #0]
 8007294:	2b00      	cmp	r3, #0
 8007296:	f000 8158 	beq.w	800754a <__ssvfiscanf_r+0x2de>
 800729a:	5cf9      	ldrb	r1, [r7, r3]
 800729c:	f011 0108 	ands.w	r1, r1, #8
 80072a0:	f102 0501 	add.w	r5, r2, #1
 80072a4:	d019      	beq.n	80072da <__ssvfiscanf_r+0x6e>
 80072a6:	6863      	ldr	r3, [r4, #4]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	dd0f      	ble.n	80072cc <__ssvfiscanf_r+0x60>
 80072ac:	6823      	ldr	r3, [r4, #0]
 80072ae:	781a      	ldrb	r2, [r3, #0]
 80072b0:	5cba      	ldrb	r2, [r7, r2]
 80072b2:	0712      	lsls	r2, r2, #28
 80072b4:	d401      	bmi.n	80072ba <__ssvfiscanf_r+0x4e>
 80072b6:	462a      	mov	r2, r5
 80072b8:	e7eb      	b.n	8007292 <__ssvfiscanf_r+0x26>
 80072ba:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80072bc:	3201      	adds	r2, #1
 80072be:	9245      	str	r2, [sp, #276]	@ 0x114
 80072c0:	6862      	ldr	r2, [r4, #4]
 80072c2:	3301      	adds	r3, #1
 80072c4:	3a01      	subs	r2, #1
 80072c6:	6062      	str	r2, [r4, #4]
 80072c8:	6023      	str	r3, [r4, #0]
 80072ca:	e7ec      	b.n	80072a6 <__ssvfiscanf_r+0x3a>
 80072cc:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80072ce:	4621      	mov	r1, r4
 80072d0:	4630      	mov	r0, r6
 80072d2:	4798      	blx	r3
 80072d4:	2800      	cmp	r0, #0
 80072d6:	d0e9      	beq.n	80072ac <__ssvfiscanf_r+0x40>
 80072d8:	e7ed      	b.n	80072b6 <__ssvfiscanf_r+0x4a>
 80072da:	2b25      	cmp	r3, #37	@ 0x25
 80072dc:	d012      	beq.n	8007304 <__ssvfiscanf_r+0x98>
 80072de:	4699      	mov	r9, r3
 80072e0:	6863      	ldr	r3, [r4, #4]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	f340 8093 	ble.w	800740e <__ssvfiscanf_r+0x1a2>
 80072e8:	6822      	ldr	r2, [r4, #0]
 80072ea:	7813      	ldrb	r3, [r2, #0]
 80072ec:	454b      	cmp	r3, r9
 80072ee:	f040 812c 	bne.w	800754a <__ssvfiscanf_r+0x2de>
 80072f2:	6863      	ldr	r3, [r4, #4]
 80072f4:	3b01      	subs	r3, #1
 80072f6:	6063      	str	r3, [r4, #4]
 80072f8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80072fa:	3201      	adds	r2, #1
 80072fc:	3301      	adds	r3, #1
 80072fe:	6022      	str	r2, [r4, #0]
 8007300:	9345      	str	r3, [sp, #276]	@ 0x114
 8007302:	e7d8      	b.n	80072b6 <__ssvfiscanf_r+0x4a>
 8007304:	9141      	str	r1, [sp, #260]	@ 0x104
 8007306:	9143      	str	r1, [sp, #268]	@ 0x10c
 8007308:	7853      	ldrb	r3, [r2, #1]
 800730a:	2b2a      	cmp	r3, #42	@ 0x2a
 800730c:	bf02      	ittt	eq
 800730e:	2310      	moveq	r3, #16
 8007310:	1c95      	addeq	r5, r2, #2
 8007312:	9341      	streq	r3, [sp, #260]	@ 0x104
 8007314:	220a      	movs	r2, #10
 8007316:	46a9      	mov	r9, r5
 8007318:	f819 1b01 	ldrb.w	r1, [r9], #1
 800731c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8007320:	2b09      	cmp	r3, #9
 8007322:	d91e      	bls.n	8007362 <__ssvfiscanf_r+0xf6>
 8007324:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8007520 <__ssvfiscanf_r+0x2b4>
 8007328:	2203      	movs	r2, #3
 800732a:	4650      	mov	r0, sl
 800732c:	f7f8 ff90 	bl	8000250 <memchr>
 8007330:	b138      	cbz	r0, 8007342 <__ssvfiscanf_r+0xd6>
 8007332:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8007334:	eba0 000a 	sub.w	r0, r0, sl
 8007338:	2301      	movs	r3, #1
 800733a:	4083      	lsls	r3, r0
 800733c:	4313      	orrs	r3, r2
 800733e:	9341      	str	r3, [sp, #260]	@ 0x104
 8007340:	464d      	mov	r5, r9
 8007342:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007346:	2b78      	cmp	r3, #120	@ 0x78
 8007348:	d806      	bhi.n	8007358 <__ssvfiscanf_r+0xec>
 800734a:	2b57      	cmp	r3, #87	@ 0x57
 800734c:	d810      	bhi.n	8007370 <__ssvfiscanf_r+0x104>
 800734e:	2b25      	cmp	r3, #37	@ 0x25
 8007350:	d0c5      	beq.n	80072de <__ssvfiscanf_r+0x72>
 8007352:	d857      	bhi.n	8007404 <__ssvfiscanf_r+0x198>
 8007354:	2b00      	cmp	r3, #0
 8007356:	d065      	beq.n	8007424 <__ssvfiscanf_r+0x1b8>
 8007358:	2303      	movs	r3, #3
 800735a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800735c:	230a      	movs	r3, #10
 800735e:	9342      	str	r3, [sp, #264]	@ 0x108
 8007360:	e078      	b.n	8007454 <__ssvfiscanf_r+0x1e8>
 8007362:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8007364:	fb02 1103 	mla	r1, r2, r3, r1
 8007368:	3930      	subs	r1, #48	@ 0x30
 800736a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800736c:	464d      	mov	r5, r9
 800736e:	e7d2      	b.n	8007316 <__ssvfiscanf_r+0xaa>
 8007370:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8007374:	2a20      	cmp	r2, #32
 8007376:	d8ef      	bhi.n	8007358 <__ssvfiscanf_r+0xec>
 8007378:	a101      	add	r1, pc, #4	@ (adr r1, 8007380 <__ssvfiscanf_r+0x114>)
 800737a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800737e:	bf00      	nop
 8007380:	08007433 	.word	0x08007433
 8007384:	08007359 	.word	0x08007359
 8007388:	08007359 	.word	0x08007359
 800738c:	0800748d 	.word	0x0800748d
 8007390:	08007359 	.word	0x08007359
 8007394:	08007359 	.word	0x08007359
 8007398:	08007359 	.word	0x08007359
 800739c:	08007359 	.word	0x08007359
 80073a0:	08007359 	.word	0x08007359
 80073a4:	08007359 	.word	0x08007359
 80073a8:	08007359 	.word	0x08007359
 80073ac:	080074a3 	.word	0x080074a3
 80073b0:	08007489 	.word	0x08007489
 80073b4:	0800740b 	.word	0x0800740b
 80073b8:	0800740b 	.word	0x0800740b
 80073bc:	0800740b 	.word	0x0800740b
 80073c0:	08007359 	.word	0x08007359
 80073c4:	08007445 	.word	0x08007445
 80073c8:	08007359 	.word	0x08007359
 80073cc:	08007359 	.word	0x08007359
 80073d0:	08007359 	.word	0x08007359
 80073d4:	08007359 	.word	0x08007359
 80073d8:	080074b3 	.word	0x080074b3
 80073dc:	0800744d 	.word	0x0800744d
 80073e0:	0800742b 	.word	0x0800742b
 80073e4:	08007359 	.word	0x08007359
 80073e8:	08007359 	.word	0x08007359
 80073ec:	080074af 	.word	0x080074af
 80073f0:	08007359 	.word	0x08007359
 80073f4:	08007489 	.word	0x08007489
 80073f8:	08007359 	.word	0x08007359
 80073fc:	08007359 	.word	0x08007359
 8007400:	08007433 	.word	0x08007433
 8007404:	3b45      	subs	r3, #69	@ 0x45
 8007406:	2b02      	cmp	r3, #2
 8007408:	d8a6      	bhi.n	8007358 <__ssvfiscanf_r+0xec>
 800740a:	2305      	movs	r3, #5
 800740c:	e021      	b.n	8007452 <__ssvfiscanf_r+0x1e6>
 800740e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007410:	4621      	mov	r1, r4
 8007412:	4630      	mov	r0, r6
 8007414:	4798      	blx	r3
 8007416:	2800      	cmp	r0, #0
 8007418:	f43f af66 	beq.w	80072e8 <__ssvfiscanf_r+0x7c>
 800741c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800741e:	2800      	cmp	r0, #0
 8007420:	f040 808b 	bne.w	800753a <__ssvfiscanf_r+0x2ce>
 8007424:	f04f 30ff 	mov.w	r0, #4294967295
 8007428:	e08b      	b.n	8007542 <__ssvfiscanf_r+0x2d6>
 800742a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800742c:	f042 0220 	orr.w	r2, r2, #32
 8007430:	9241      	str	r2, [sp, #260]	@ 0x104
 8007432:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8007434:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007438:	9241      	str	r2, [sp, #260]	@ 0x104
 800743a:	2210      	movs	r2, #16
 800743c:	2b6e      	cmp	r3, #110	@ 0x6e
 800743e:	9242      	str	r2, [sp, #264]	@ 0x108
 8007440:	d902      	bls.n	8007448 <__ssvfiscanf_r+0x1dc>
 8007442:	e005      	b.n	8007450 <__ssvfiscanf_r+0x1e4>
 8007444:	2300      	movs	r3, #0
 8007446:	9342      	str	r3, [sp, #264]	@ 0x108
 8007448:	2303      	movs	r3, #3
 800744a:	e002      	b.n	8007452 <__ssvfiscanf_r+0x1e6>
 800744c:	2308      	movs	r3, #8
 800744e:	9342      	str	r3, [sp, #264]	@ 0x108
 8007450:	2304      	movs	r3, #4
 8007452:	9347      	str	r3, [sp, #284]	@ 0x11c
 8007454:	6863      	ldr	r3, [r4, #4]
 8007456:	2b00      	cmp	r3, #0
 8007458:	dd39      	ble.n	80074ce <__ssvfiscanf_r+0x262>
 800745a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800745c:	0659      	lsls	r1, r3, #25
 800745e:	d404      	bmi.n	800746a <__ssvfiscanf_r+0x1fe>
 8007460:	6823      	ldr	r3, [r4, #0]
 8007462:	781a      	ldrb	r2, [r3, #0]
 8007464:	5cba      	ldrb	r2, [r7, r2]
 8007466:	0712      	lsls	r2, r2, #28
 8007468:	d438      	bmi.n	80074dc <__ssvfiscanf_r+0x270>
 800746a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800746c:	2b02      	cmp	r3, #2
 800746e:	dc47      	bgt.n	8007500 <__ssvfiscanf_r+0x294>
 8007470:	466b      	mov	r3, sp
 8007472:	4622      	mov	r2, r4
 8007474:	a941      	add	r1, sp, #260	@ 0x104
 8007476:	4630      	mov	r0, r6
 8007478:	f000 f86c 	bl	8007554 <_scanf_chars>
 800747c:	2801      	cmp	r0, #1
 800747e:	d064      	beq.n	800754a <__ssvfiscanf_r+0x2de>
 8007480:	2802      	cmp	r0, #2
 8007482:	f47f af18 	bne.w	80072b6 <__ssvfiscanf_r+0x4a>
 8007486:	e7c9      	b.n	800741c <__ssvfiscanf_r+0x1b0>
 8007488:	220a      	movs	r2, #10
 800748a:	e7d7      	b.n	800743c <__ssvfiscanf_r+0x1d0>
 800748c:	4629      	mov	r1, r5
 800748e:	4640      	mov	r0, r8
 8007490:	f000 f9ae 	bl	80077f0 <__sccl>
 8007494:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8007496:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800749a:	9341      	str	r3, [sp, #260]	@ 0x104
 800749c:	4605      	mov	r5, r0
 800749e:	2301      	movs	r3, #1
 80074a0:	e7d7      	b.n	8007452 <__ssvfiscanf_r+0x1e6>
 80074a2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80074a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074a8:	9341      	str	r3, [sp, #260]	@ 0x104
 80074aa:	2300      	movs	r3, #0
 80074ac:	e7d1      	b.n	8007452 <__ssvfiscanf_r+0x1e6>
 80074ae:	2302      	movs	r3, #2
 80074b0:	e7cf      	b.n	8007452 <__ssvfiscanf_r+0x1e6>
 80074b2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80074b4:	06c3      	lsls	r3, r0, #27
 80074b6:	f53f aefe 	bmi.w	80072b6 <__ssvfiscanf_r+0x4a>
 80074ba:	9b00      	ldr	r3, [sp, #0]
 80074bc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80074be:	1d19      	adds	r1, r3, #4
 80074c0:	9100      	str	r1, [sp, #0]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	07c0      	lsls	r0, r0, #31
 80074c6:	bf4c      	ite	mi
 80074c8:	801a      	strhmi	r2, [r3, #0]
 80074ca:	601a      	strpl	r2, [r3, #0]
 80074cc:	e6f3      	b.n	80072b6 <__ssvfiscanf_r+0x4a>
 80074ce:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80074d0:	4621      	mov	r1, r4
 80074d2:	4630      	mov	r0, r6
 80074d4:	4798      	blx	r3
 80074d6:	2800      	cmp	r0, #0
 80074d8:	d0bf      	beq.n	800745a <__ssvfiscanf_r+0x1ee>
 80074da:	e79f      	b.n	800741c <__ssvfiscanf_r+0x1b0>
 80074dc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80074de:	3201      	adds	r2, #1
 80074e0:	9245      	str	r2, [sp, #276]	@ 0x114
 80074e2:	6862      	ldr	r2, [r4, #4]
 80074e4:	3a01      	subs	r2, #1
 80074e6:	2a00      	cmp	r2, #0
 80074e8:	6062      	str	r2, [r4, #4]
 80074ea:	dd02      	ble.n	80074f2 <__ssvfiscanf_r+0x286>
 80074ec:	3301      	adds	r3, #1
 80074ee:	6023      	str	r3, [r4, #0]
 80074f0:	e7b6      	b.n	8007460 <__ssvfiscanf_r+0x1f4>
 80074f2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80074f4:	4621      	mov	r1, r4
 80074f6:	4630      	mov	r0, r6
 80074f8:	4798      	blx	r3
 80074fa:	2800      	cmp	r0, #0
 80074fc:	d0b0      	beq.n	8007460 <__ssvfiscanf_r+0x1f4>
 80074fe:	e78d      	b.n	800741c <__ssvfiscanf_r+0x1b0>
 8007500:	2b04      	cmp	r3, #4
 8007502:	dc0f      	bgt.n	8007524 <__ssvfiscanf_r+0x2b8>
 8007504:	466b      	mov	r3, sp
 8007506:	4622      	mov	r2, r4
 8007508:	a941      	add	r1, sp, #260	@ 0x104
 800750a:	4630      	mov	r0, r6
 800750c:	f000 f87c 	bl	8007608 <_scanf_i>
 8007510:	e7b4      	b.n	800747c <__ssvfiscanf_r+0x210>
 8007512:	bf00      	nop
 8007514:	080071bd 	.word	0x080071bd
 8007518:	08007233 	.word	0x08007233
 800751c:	08007c0c 	.word	0x08007c0c
 8007520:	08007bec 	.word	0x08007bec
 8007524:	4b0a      	ldr	r3, [pc, #40]	@ (8007550 <__ssvfiscanf_r+0x2e4>)
 8007526:	2b00      	cmp	r3, #0
 8007528:	f43f aec5 	beq.w	80072b6 <__ssvfiscanf_r+0x4a>
 800752c:	466b      	mov	r3, sp
 800752e:	4622      	mov	r2, r4
 8007530:	a941      	add	r1, sp, #260	@ 0x104
 8007532:	4630      	mov	r0, r6
 8007534:	f3af 8000 	nop.w
 8007538:	e7a0      	b.n	800747c <__ssvfiscanf_r+0x210>
 800753a:	89a3      	ldrh	r3, [r4, #12]
 800753c:	065b      	lsls	r3, r3, #25
 800753e:	f53f af71 	bmi.w	8007424 <__ssvfiscanf_r+0x1b8>
 8007542:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8007546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800754a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800754c:	e7f9      	b.n	8007542 <__ssvfiscanf_r+0x2d6>
 800754e:	bf00      	nop
 8007550:	00000000 	.word	0x00000000

08007554 <_scanf_chars>:
 8007554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007558:	4615      	mov	r5, r2
 800755a:	688a      	ldr	r2, [r1, #8]
 800755c:	4680      	mov	r8, r0
 800755e:	460c      	mov	r4, r1
 8007560:	b932      	cbnz	r2, 8007570 <_scanf_chars+0x1c>
 8007562:	698a      	ldr	r2, [r1, #24]
 8007564:	2a00      	cmp	r2, #0
 8007566:	bf14      	ite	ne
 8007568:	f04f 32ff 	movne.w	r2, #4294967295
 800756c:	2201      	moveq	r2, #1
 800756e:	608a      	str	r2, [r1, #8]
 8007570:	6822      	ldr	r2, [r4, #0]
 8007572:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8007604 <_scanf_chars+0xb0>
 8007576:	06d1      	lsls	r1, r2, #27
 8007578:	bf5f      	itttt	pl
 800757a:	681a      	ldrpl	r2, [r3, #0]
 800757c:	1d11      	addpl	r1, r2, #4
 800757e:	6019      	strpl	r1, [r3, #0]
 8007580:	6816      	ldrpl	r6, [r2, #0]
 8007582:	2700      	movs	r7, #0
 8007584:	69a0      	ldr	r0, [r4, #24]
 8007586:	b188      	cbz	r0, 80075ac <_scanf_chars+0x58>
 8007588:	2801      	cmp	r0, #1
 800758a:	d107      	bne.n	800759c <_scanf_chars+0x48>
 800758c:	682b      	ldr	r3, [r5, #0]
 800758e:	781a      	ldrb	r2, [r3, #0]
 8007590:	6963      	ldr	r3, [r4, #20]
 8007592:	5c9b      	ldrb	r3, [r3, r2]
 8007594:	b953      	cbnz	r3, 80075ac <_scanf_chars+0x58>
 8007596:	2f00      	cmp	r7, #0
 8007598:	d031      	beq.n	80075fe <_scanf_chars+0xaa>
 800759a:	e022      	b.n	80075e2 <_scanf_chars+0x8e>
 800759c:	2802      	cmp	r0, #2
 800759e:	d120      	bne.n	80075e2 <_scanf_chars+0x8e>
 80075a0:	682b      	ldr	r3, [r5, #0]
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	f819 3003 	ldrb.w	r3, [r9, r3]
 80075a8:	071b      	lsls	r3, r3, #28
 80075aa:	d41a      	bmi.n	80075e2 <_scanf_chars+0x8e>
 80075ac:	6823      	ldr	r3, [r4, #0]
 80075ae:	06da      	lsls	r2, r3, #27
 80075b0:	bf5e      	ittt	pl
 80075b2:	682b      	ldrpl	r3, [r5, #0]
 80075b4:	781b      	ldrbpl	r3, [r3, #0]
 80075b6:	f806 3b01 	strbpl.w	r3, [r6], #1
 80075ba:	682a      	ldr	r2, [r5, #0]
 80075bc:	686b      	ldr	r3, [r5, #4]
 80075be:	3201      	adds	r2, #1
 80075c0:	602a      	str	r2, [r5, #0]
 80075c2:	68a2      	ldr	r2, [r4, #8]
 80075c4:	3b01      	subs	r3, #1
 80075c6:	3a01      	subs	r2, #1
 80075c8:	606b      	str	r3, [r5, #4]
 80075ca:	3701      	adds	r7, #1
 80075cc:	60a2      	str	r2, [r4, #8]
 80075ce:	b142      	cbz	r2, 80075e2 <_scanf_chars+0x8e>
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	dcd7      	bgt.n	8007584 <_scanf_chars+0x30>
 80075d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80075d8:	4629      	mov	r1, r5
 80075da:	4640      	mov	r0, r8
 80075dc:	4798      	blx	r3
 80075de:	2800      	cmp	r0, #0
 80075e0:	d0d0      	beq.n	8007584 <_scanf_chars+0x30>
 80075e2:	6823      	ldr	r3, [r4, #0]
 80075e4:	f013 0310 	ands.w	r3, r3, #16
 80075e8:	d105      	bne.n	80075f6 <_scanf_chars+0xa2>
 80075ea:	68e2      	ldr	r2, [r4, #12]
 80075ec:	3201      	adds	r2, #1
 80075ee:	60e2      	str	r2, [r4, #12]
 80075f0:	69a2      	ldr	r2, [r4, #24]
 80075f2:	b102      	cbz	r2, 80075f6 <_scanf_chars+0xa2>
 80075f4:	7033      	strb	r3, [r6, #0]
 80075f6:	6923      	ldr	r3, [r4, #16]
 80075f8:	443b      	add	r3, r7
 80075fa:	6123      	str	r3, [r4, #16]
 80075fc:	2000      	movs	r0, #0
 80075fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007602:	bf00      	nop
 8007604:	08007c0c 	.word	0x08007c0c

08007608 <_scanf_i>:
 8007608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800760c:	4698      	mov	r8, r3
 800760e:	4b74      	ldr	r3, [pc, #464]	@ (80077e0 <_scanf_i+0x1d8>)
 8007610:	460c      	mov	r4, r1
 8007612:	4682      	mov	sl, r0
 8007614:	4616      	mov	r6, r2
 8007616:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800761a:	b087      	sub	sp, #28
 800761c:	ab03      	add	r3, sp, #12
 800761e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007622:	4b70      	ldr	r3, [pc, #448]	@ (80077e4 <_scanf_i+0x1dc>)
 8007624:	69a1      	ldr	r1, [r4, #24]
 8007626:	4a70      	ldr	r2, [pc, #448]	@ (80077e8 <_scanf_i+0x1e0>)
 8007628:	2903      	cmp	r1, #3
 800762a:	bf08      	it	eq
 800762c:	461a      	moveq	r2, r3
 800762e:	68a3      	ldr	r3, [r4, #8]
 8007630:	9201      	str	r2, [sp, #4]
 8007632:	1e5a      	subs	r2, r3, #1
 8007634:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007638:	bf88      	it	hi
 800763a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800763e:	4627      	mov	r7, r4
 8007640:	bf82      	ittt	hi
 8007642:	eb03 0905 	addhi.w	r9, r3, r5
 8007646:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800764a:	60a3      	strhi	r3, [r4, #8]
 800764c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8007650:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8007654:	bf98      	it	ls
 8007656:	f04f 0900 	movls.w	r9, #0
 800765a:	6023      	str	r3, [r4, #0]
 800765c:	463d      	mov	r5, r7
 800765e:	f04f 0b00 	mov.w	fp, #0
 8007662:	6831      	ldr	r1, [r6, #0]
 8007664:	ab03      	add	r3, sp, #12
 8007666:	7809      	ldrb	r1, [r1, #0]
 8007668:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800766c:	2202      	movs	r2, #2
 800766e:	f7f8 fdef 	bl	8000250 <memchr>
 8007672:	b328      	cbz	r0, 80076c0 <_scanf_i+0xb8>
 8007674:	f1bb 0f01 	cmp.w	fp, #1
 8007678:	d159      	bne.n	800772e <_scanf_i+0x126>
 800767a:	6862      	ldr	r2, [r4, #4]
 800767c:	b92a      	cbnz	r2, 800768a <_scanf_i+0x82>
 800767e:	6822      	ldr	r2, [r4, #0]
 8007680:	2108      	movs	r1, #8
 8007682:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007686:	6061      	str	r1, [r4, #4]
 8007688:	6022      	str	r2, [r4, #0]
 800768a:	6822      	ldr	r2, [r4, #0]
 800768c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8007690:	6022      	str	r2, [r4, #0]
 8007692:	68a2      	ldr	r2, [r4, #8]
 8007694:	1e51      	subs	r1, r2, #1
 8007696:	60a1      	str	r1, [r4, #8]
 8007698:	b192      	cbz	r2, 80076c0 <_scanf_i+0xb8>
 800769a:	6832      	ldr	r2, [r6, #0]
 800769c:	1c51      	adds	r1, r2, #1
 800769e:	6031      	str	r1, [r6, #0]
 80076a0:	7812      	ldrb	r2, [r2, #0]
 80076a2:	f805 2b01 	strb.w	r2, [r5], #1
 80076a6:	6872      	ldr	r2, [r6, #4]
 80076a8:	3a01      	subs	r2, #1
 80076aa:	2a00      	cmp	r2, #0
 80076ac:	6072      	str	r2, [r6, #4]
 80076ae:	dc07      	bgt.n	80076c0 <_scanf_i+0xb8>
 80076b0:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80076b4:	4631      	mov	r1, r6
 80076b6:	4650      	mov	r0, sl
 80076b8:	4790      	blx	r2
 80076ba:	2800      	cmp	r0, #0
 80076bc:	f040 8085 	bne.w	80077ca <_scanf_i+0x1c2>
 80076c0:	f10b 0b01 	add.w	fp, fp, #1
 80076c4:	f1bb 0f03 	cmp.w	fp, #3
 80076c8:	d1cb      	bne.n	8007662 <_scanf_i+0x5a>
 80076ca:	6863      	ldr	r3, [r4, #4]
 80076cc:	b90b      	cbnz	r3, 80076d2 <_scanf_i+0xca>
 80076ce:	230a      	movs	r3, #10
 80076d0:	6063      	str	r3, [r4, #4]
 80076d2:	6863      	ldr	r3, [r4, #4]
 80076d4:	4945      	ldr	r1, [pc, #276]	@ (80077ec <_scanf_i+0x1e4>)
 80076d6:	6960      	ldr	r0, [r4, #20]
 80076d8:	1ac9      	subs	r1, r1, r3
 80076da:	f000 f889 	bl	80077f0 <__sccl>
 80076de:	f04f 0b00 	mov.w	fp, #0
 80076e2:	68a3      	ldr	r3, [r4, #8]
 80076e4:	6822      	ldr	r2, [r4, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d03d      	beq.n	8007766 <_scanf_i+0x15e>
 80076ea:	6831      	ldr	r1, [r6, #0]
 80076ec:	6960      	ldr	r0, [r4, #20]
 80076ee:	f891 c000 	ldrb.w	ip, [r1]
 80076f2:	f810 000c 	ldrb.w	r0, [r0, ip]
 80076f6:	2800      	cmp	r0, #0
 80076f8:	d035      	beq.n	8007766 <_scanf_i+0x15e>
 80076fa:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80076fe:	d124      	bne.n	800774a <_scanf_i+0x142>
 8007700:	0510      	lsls	r0, r2, #20
 8007702:	d522      	bpl.n	800774a <_scanf_i+0x142>
 8007704:	f10b 0b01 	add.w	fp, fp, #1
 8007708:	f1b9 0f00 	cmp.w	r9, #0
 800770c:	d003      	beq.n	8007716 <_scanf_i+0x10e>
 800770e:	3301      	adds	r3, #1
 8007710:	f109 39ff 	add.w	r9, r9, #4294967295
 8007714:	60a3      	str	r3, [r4, #8]
 8007716:	6873      	ldr	r3, [r6, #4]
 8007718:	3b01      	subs	r3, #1
 800771a:	2b00      	cmp	r3, #0
 800771c:	6073      	str	r3, [r6, #4]
 800771e:	dd1b      	ble.n	8007758 <_scanf_i+0x150>
 8007720:	6833      	ldr	r3, [r6, #0]
 8007722:	3301      	adds	r3, #1
 8007724:	6033      	str	r3, [r6, #0]
 8007726:	68a3      	ldr	r3, [r4, #8]
 8007728:	3b01      	subs	r3, #1
 800772a:	60a3      	str	r3, [r4, #8]
 800772c:	e7d9      	b.n	80076e2 <_scanf_i+0xda>
 800772e:	f1bb 0f02 	cmp.w	fp, #2
 8007732:	d1ae      	bne.n	8007692 <_scanf_i+0x8a>
 8007734:	6822      	ldr	r2, [r4, #0]
 8007736:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800773a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800773e:	d1bf      	bne.n	80076c0 <_scanf_i+0xb8>
 8007740:	2110      	movs	r1, #16
 8007742:	6061      	str	r1, [r4, #4]
 8007744:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007748:	e7a2      	b.n	8007690 <_scanf_i+0x88>
 800774a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800774e:	6022      	str	r2, [r4, #0]
 8007750:	780b      	ldrb	r3, [r1, #0]
 8007752:	f805 3b01 	strb.w	r3, [r5], #1
 8007756:	e7de      	b.n	8007716 <_scanf_i+0x10e>
 8007758:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800775c:	4631      	mov	r1, r6
 800775e:	4650      	mov	r0, sl
 8007760:	4798      	blx	r3
 8007762:	2800      	cmp	r0, #0
 8007764:	d0df      	beq.n	8007726 <_scanf_i+0x11e>
 8007766:	6823      	ldr	r3, [r4, #0]
 8007768:	05d9      	lsls	r1, r3, #23
 800776a:	d50d      	bpl.n	8007788 <_scanf_i+0x180>
 800776c:	42bd      	cmp	r5, r7
 800776e:	d909      	bls.n	8007784 <_scanf_i+0x17c>
 8007770:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007774:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007778:	4632      	mov	r2, r6
 800777a:	4650      	mov	r0, sl
 800777c:	4798      	blx	r3
 800777e:	f105 39ff 	add.w	r9, r5, #4294967295
 8007782:	464d      	mov	r5, r9
 8007784:	42bd      	cmp	r5, r7
 8007786:	d028      	beq.n	80077da <_scanf_i+0x1d2>
 8007788:	6822      	ldr	r2, [r4, #0]
 800778a:	f012 0210 	ands.w	r2, r2, #16
 800778e:	d113      	bne.n	80077b8 <_scanf_i+0x1b0>
 8007790:	702a      	strb	r2, [r5, #0]
 8007792:	6863      	ldr	r3, [r4, #4]
 8007794:	9e01      	ldr	r6, [sp, #4]
 8007796:	4639      	mov	r1, r7
 8007798:	4650      	mov	r0, sl
 800779a:	47b0      	blx	r6
 800779c:	f8d8 3000 	ldr.w	r3, [r8]
 80077a0:	6821      	ldr	r1, [r4, #0]
 80077a2:	1d1a      	adds	r2, r3, #4
 80077a4:	f8c8 2000 	str.w	r2, [r8]
 80077a8:	f011 0f20 	tst.w	r1, #32
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	d00f      	beq.n	80077d0 <_scanf_i+0x1c8>
 80077b0:	6018      	str	r0, [r3, #0]
 80077b2:	68e3      	ldr	r3, [r4, #12]
 80077b4:	3301      	adds	r3, #1
 80077b6:	60e3      	str	r3, [r4, #12]
 80077b8:	6923      	ldr	r3, [r4, #16]
 80077ba:	1bed      	subs	r5, r5, r7
 80077bc:	445d      	add	r5, fp
 80077be:	442b      	add	r3, r5
 80077c0:	6123      	str	r3, [r4, #16]
 80077c2:	2000      	movs	r0, #0
 80077c4:	b007      	add	sp, #28
 80077c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077ca:	f04f 0b00 	mov.w	fp, #0
 80077ce:	e7ca      	b.n	8007766 <_scanf_i+0x15e>
 80077d0:	07ca      	lsls	r2, r1, #31
 80077d2:	bf4c      	ite	mi
 80077d4:	8018      	strhmi	r0, [r3, #0]
 80077d6:	6018      	strpl	r0, [r3, #0]
 80077d8:	e7eb      	b.n	80077b2 <_scanf_i+0x1aa>
 80077da:	2001      	movs	r0, #1
 80077dc:	e7f2      	b.n	80077c4 <_scanf_i+0x1bc>
 80077de:	bf00      	nop
 80077e0:	08007ba0 	.word	0x08007ba0
 80077e4:	08007a45 	.word	0x08007a45
 80077e8:	08007b25 	.word	0x08007b25
 80077ec:	08007c00 	.word	0x08007c00

080077f0 <__sccl>:
 80077f0:	b570      	push	{r4, r5, r6, lr}
 80077f2:	780b      	ldrb	r3, [r1, #0]
 80077f4:	4604      	mov	r4, r0
 80077f6:	2b5e      	cmp	r3, #94	@ 0x5e
 80077f8:	bf0b      	itete	eq
 80077fa:	784b      	ldrbeq	r3, [r1, #1]
 80077fc:	1c4a      	addne	r2, r1, #1
 80077fe:	1c8a      	addeq	r2, r1, #2
 8007800:	2100      	movne	r1, #0
 8007802:	bf08      	it	eq
 8007804:	2101      	moveq	r1, #1
 8007806:	3801      	subs	r0, #1
 8007808:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800780c:	f800 1f01 	strb.w	r1, [r0, #1]!
 8007810:	42a8      	cmp	r0, r5
 8007812:	d1fb      	bne.n	800780c <__sccl+0x1c>
 8007814:	b90b      	cbnz	r3, 800781a <__sccl+0x2a>
 8007816:	1e50      	subs	r0, r2, #1
 8007818:	bd70      	pop	{r4, r5, r6, pc}
 800781a:	f081 0101 	eor.w	r1, r1, #1
 800781e:	54e1      	strb	r1, [r4, r3]
 8007820:	4610      	mov	r0, r2
 8007822:	4602      	mov	r2, r0
 8007824:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007828:	2d2d      	cmp	r5, #45	@ 0x2d
 800782a:	d005      	beq.n	8007838 <__sccl+0x48>
 800782c:	2d5d      	cmp	r5, #93	@ 0x5d
 800782e:	d016      	beq.n	800785e <__sccl+0x6e>
 8007830:	2d00      	cmp	r5, #0
 8007832:	d0f1      	beq.n	8007818 <__sccl+0x28>
 8007834:	462b      	mov	r3, r5
 8007836:	e7f2      	b.n	800781e <__sccl+0x2e>
 8007838:	7846      	ldrb	r6, [r0, #1]
 800783a:	2e5d      	cmp	r6, #93	@ 0x5d
 800783c:	d0fa      	beq.n	8007834 <__sccl+0x44>
 800783e:	42b3      	cmp	r3, r6
 8007840:	dcf8      	bgt.n	8007834 <__sccl+0x44>
 8007842:	3002      	adds	r0, #2
 8007844:	461a      	mov	r2, r3
 8007846:	3201      	adds	r2, #1
 8007848:	4296      	cmp	r6, r2
 800784a:	54a1      	strb	r1, [r4, r2]
 800784c:	dcfb      	bgt.n	8007846 <__sccl+0x56>
 800784e:	1af2      	subs	r2, r6, r3
 8007850:	3a01      	subs	r2, #1
 8007852:	1c5d      	adds	r5, r3, #1
 8007854:	42b3      	cmp	r3, r6
 8007856:	bfa8      	it	ge
 8007858:	2200      	movge	r2, #0
 800785a:	18ab      	adds	r3, r5, r2
 800785c:	e7e1      	b.n	8007822 <__sccl+0x32>
 800785e:	4610      	mov	r0, r2
 8007860:	e7da      	b.n	8007818 <__sccl+0x28>

08007862 <__submore>:
 8007862:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007866:	460c      	mov	r4, r1
 8007868:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800786a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800786e:	4299      	cmp	r1, r3
 8007870:	d11d      	bne.n	80078ae <__submore+0x4c>
 8007872:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007876:	f7ff fb47 	bl	8006f08 <_malloc_r>
 800787a:	b918      	cbnz	r0, 8007884 <__submore+0x22>
 800787c:	f04f 30ff 	mov.w	r0, #4294967295
 8007880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007884:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007888:	63a3      	str	r3, [r4, #56]	@ 0x38
 800788a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800788e:	6360      	str	r0, [r4, #52]	@ 0x34
 8007890:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8007894:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007898:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800789c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80078a0:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80078a4:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80078a8:	6020      	str	r0, [r4, #0]
 80078aa:	2000      	movs	r0, #0
 80078ac:	e7e8      	b.n	8007880 <__submore+0x1e>
 80078ae:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80078b0:	0077      	lsls	r7, r6, #1
 80078b2:	463a      	mov	r2, r7
 80078b4:	f000 f81d 	bl	80078f2 <_realloc_r>
 80078b8:	4605      	mov	r5, r0
 80078ba:	2800      	cmp	r0, #0
 80078bc:	d0de      	beq.n	800787c <__submore+0x1a>
 80078be:	eb00 0806 	add.w	r8, r0, r6
 80078c2:	4601      	mov	r1, r0
 80078c4:	4632      	mov	r2, r6
 80078c6:	4640      	mov	r0, r8
 80078c8:	f000 f805 	bl	80078d6 <memcpy>
 80078cc:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80078d0:	f8c4 8000 	str.w	r8, [r4]
 80078d4:	e7e9      	b.n	80078aa <__submore+0x48>

080078d6 <memcpy>:
 80078d6:	440a      	add	r2, r1
 80078d8:	4291      	cmp	r1, r2
 80078da:	f100 33ff 	add.w	r3, r0, #4294967295
 80078de:	d100      	bne.n	80078e2 <memcpy+0xc>
 80078e0:	4770      	bx	lr
 80078e2:	b510      	push	{r4, lr}
 80078e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078ec:	4291      	cmp	r1, r2
 80078ee:	d1f9      	bne.n	80078e4 <memcpy+0xe>
 80078f0:	bd10      	pop	{r4, pc}

080078f2 <_realloc_r>:
 80078f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078f6:	4680      	mov	r8, r0
 80078f8:	4615      	mov	r5, r2
 80078fa:	460c      	mov	r4, r1
 80078fc:	b921      	cbnz	r1, 8007908 <_realloc_r+0x16>
 80078fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007902:	4611      	mov	r1, r2
 8007904:	f7ff bb00 	b.w	8006f08 <_malloc_r>
 8007908:	b92a      	cbnz	r2, 8007916 <_realloc_r+0x24>
 800790a:	f7ff fc0d 	bl	8007128 <_free_r>
 800790e:	2400      	movs	r4, #0
 8007910:	4620      	mov	r0, r4
 8007912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007916:	f000 f907 	bl	8007b28 <_malloc_usable_size_r>
 800791a:	4285      	cmp	r5, r0
 800791c:	4606      	mov	r6, r0
 800791e:	d802      	bhi.n	8007926 <_realloc_r+0x34>
 8007920:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007924:	d8f4      	bhi.n	8007910 <_realloc_r+0x1e>
 8007926:	4629      	mov	r1, r5
 8007928:	4640      	mov	r0, r8
 800792a:	f7ff faed 	bl	8006f08 <_malloc_r>
 800792e:	4607      	mov	r7, r0
 8007930:	2800      	cmp	r0, #0
 8007932:	d0ec      	beq.n	800790e <_realloc_r+0x1c>
 8007934:	42b5      	cmp	r5, r6
 8007936:	462a      	mov	r2, r5
 8007938:	4621      	mov	r1, r4
 800793a:	bf28      	it	cs
 800793c:	4632      	movcs	r2, r6
 800793e:	f7ff ffca 	bl	80078d6 <memcpy>
 8007942:	4621      	mov	r1, r4
 8007944:	4640      	mov	r0, r8
 8007946:	f7ff fbef 	bl	8007128 <_free_r>
 800794a:	463c      	mov	r4, r7
 800794c:	e7e0      	b.n	8007910 <_realloc_r+0x1e>
	...

08007950 <_strtol_l.constprop.0>:
 8007950:	2b24      	cmp	r3, #36	@ 0x24
 8007952:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007956:	4686      	mov	lr, r0
 8007958:	4690      	mov	r8, r2
 800795a:	d801      	bhi.n	8007960 <_strtol_l.constprop.0+0x10>
 800795c:	2b01      	cmp	r3, #1
 800795e:	d106      	bne.n	800796e <_strtol_l.constprop.0+0x1e>
 8007960:	f7ff fbb6 	bl	80070d0 <__errno>
 8007964:	2316      	movs	r3, #22
 8007966:	6003      	str	r3, [r0, #0]
 8007968:	2000      	movs	r0, #0
 800796a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800796e:	4834      	ldr	r0, [pc, #208]	@ (8007a40 <_strtol_l.constprop.0+0xf0>)
 8007970:	460d      	mov	r5, r1
 8007972:	462a      	mov	r2, r5
 8007974:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007978:	5d06      	ldrb	r6, [r0, r4]
 800797a:	f016 0608 	ands.w	r6, r6, #8
 800797e:	d1f8      	bne.n	8007972 <_strtol_l.constprop.0+0x22>
 8007980:	2c2d      	cmp	r4, #45	@ 0x2d
 8007982:	d12d      	bne.n	80079e0 <_strtol_l.constprop.0+0x90>
 8007984:	782c      	ldrb	r4, [r5, #0]
 8007986:	2601      	movs	r6, #1
 8007988:	1c95      	adds	r5, r2, #2
 800798a:	f033 0210 	bics.w	r2, r3, #16
 800798e:	d109      	bne.n	80079a4 <_strtol_l.constprop.0+0x54>
 8007990:	2c30      	cmp	r4, #48	@ 0x30
 8007992:	d12a      	bne.n	80079ea <_strtol_l.constprop.0+0x9a>
 8007994:	782a      	ldrb	r2, [r5, #0]
 8007996:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800799a:	2a58      	cmp	r2, #88	@ 0x58
 800799c:	d125      	bne.n	80079ea <_strtol_l.constprop.0+0x9a>
 800799e:	786c      	ldrb	r4, [r5, #1]
 80079a0:	2310      	movs	r3, #16
 80079a2:	3502      	adds	r5, #2
 80079a4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80079a8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80079ac:	2200      	movs	r2, #0
 80079ae:	fbbc f9f3 	udiv	r9, ip, r3
 80079b2:	4610      	mov	r0, r2
 80079b4:	fb03 ca19 	mls	sl, r3, r9, ip
 80079b8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80079bc:	2f09      	cmp	r7, #9
 80079be:	d81b      	bhi.n	80079f8 <_strtol_l.constprop.0+0xa8>
 80079c0:	463c      	mov	r4, r7
 80079c2:	42a3      	cmp	r3, r4
 80079c4:	dd27      	ble.n	8007a16 <_strtol_l.constprop.0+0xc6>
 80079c6:	1c57      	adds	r7, r2, #1
 80079c8:	d007      	beq.n	80079da <_strtol_l.constprop.0+0x8a>
 80079ca:	4581      	cmp	r9, r0
 80079cc:	d320      	bcc.n	8007a10 <_strtol_l.constprop.0+0xc0>
 80079ce:	d101      	bne.n	80079d4 <_strtol_l.constprop.0+0x84>
 80079d0:	45a2      	cmp	sl, r4
 80079d2:	db1d      	blt.n	8007a10 <_strtol_l.constprop.0+0xc0>
 80079d4:	fb00 4003 	mla	r0, r0, r3, r4
 80079d8:	2201      	movs	r2, #1
 80079da:	f815 4b01 	ldrb.w	r4, [r5], #1
 80079de:	e7eb      	b.n	80079b8 <_strtol_l.constprop.0+0x68>
 80079e0:	2c2b      	cmp	r4, #43	@ 0x2b
 80079e2:	bf04      	itt	eq
 80079e4:	782c      	ldrbeq	r4, [r5, #0]
 80079e6:	1c95      	addeq	r5, r2, #2
 80079e8:	e7cf      	b.n	800798a <_strtol_l.constprop.0+0x3a>
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d1da      	bne.n	80079a4 <_strtol_l.constprop.0+0x54>
 80079ee:	2c30      	cmp	r4, #48	@ 0x30
 80079f0:	bf0c      	ite	eq
 80079f2:	2308      	moveq	r3, #8
 80079f4:	230a      	movne	r3, #10
 80079f6:	e7d5      	b.n	80079a4 <_strtol_l.constprop.0+0x54>
 80079f8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80079fc:	2f19      	cmp	r7, #25
 80079fe:	d801      	bhi.n	8007a04 <_strtol_l.constprop.0+0xb4>
 8007a00:	3c37      	subs	r4, #55	@ 0x37
 8007a02:	e7de      	b.n	80079c2 <_strtol_l.constprop.0+0x72>
 8007a04:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007a08:	2f19      	cmp	r7, #25
 8007a0a:	d804      	bhi.n	8007a16 <_strtol_l.constprop.0+0xc6>
 8007a0c:	3c57      	subs	r4, #87	@ 0x57
 8007a0e:	e7d8      	b.n	80079c2 <_strtol_l.constprop.0+0x72>
 8007a10:	f04f 32ff 	mov.w	r2, #4294967295
 8007a14:	e7e1      	b.n	80079da <_strtol_l.constprop.0+0x8a>
 8007a16:	1c53      	adds	r3, r2, #1
 8007a18:	d108      	bne.n	8007a2c <_strtol_l.constprop.0+0xdc>
 8007a1a:	2322      	movs	r3, #34	@ 0x22
 8007a1c:	f8ce 3000 	str.w	r3, [lr]
 8007a20:	4660      	mov	r0, ip
 8007a22:	f1b8 0f00 	cmp.w	r8, #0
 8007a26:	d0a0      	beq.n	800796a <_strtol_l.constprop.0+0x1a>
 8007a28:	1e69      	subs	r1, r5, #1
 8007a2a:	e006      	b.n	8007a3a <_strtol_l.constprop.0+0xea>
 8007a2c:	b106      	cbz	r6, 8007a30 <_strtol_l.constprop.0+0xe0>
 8007a2e:	4240      	negs	r0, r0
 8007a30:	f1b8 0f00 	cmp.w	r8, #0
 8007a34:	d099      	beq.n	800796a <_strtol_l.constprop.0+0x1a>
 8007a36:	2a00      	cmp	r2, #0
 8007a38:	d1f6      	bne.n	8007a28 <_strtol_l.constprop.0+0xd8>
 8007a3a:	f8c8 1000 	str.w	r1, [r8]
 8007a3e:	e794      	b.n	800796a <_strtol_l.constprop.0+0x1a>
 8007a40:	08007c0c 	.word	0x08007c0c

08007a44 <_strtol_r>:
 8007a44:	f7ff bf84 	b.w	8007950 <_strtol_l.constprop.0>

08007a48 <_strtoul_l.constprop.0>:
 8007a48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007a4c:	4e34      	ldr	r6, [pc, #208]	@ (8007b20 <_strtoul_l.constprop.0+0xd8>)
 8007a4e:	4686      	mov	lr, r0
 8007a50:	460d      	mov	r5, r1
 8007a52:	4628      	mov	r0, r5
 8007a54:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007a58:	5d37      	ldrb	r7, [r6, r4]
 8007a5a:	f017 0708 	ands.w	r7, r7, #8
 8007a5e:	d1f8      	bne.n	8007a52 <_strtoul_l.constprop.0+0xa>
 8007a60:	2c2d      	cmp	r4, #45	@ 0x2d
 8007a62:	d12f      	bne.n	8007ac4 <_strtoul_l.constprop.0+0x7c>
 8007a64:	782c      	ldrb	r4, [r5, #0]
 8007a66:	2701      	movs	r7, #1
 8007a68:	1c85      	adds	r5, r0, #2
 8007a6a:	f033 0010 	bics.w	r0, r3, #16
 8007a6e:	d109      	bne.n	8007a84 <_strtoul_l.constprop.0+0x3c>
 8007a70:	2c30      	cmp	r4, #48	@ 0x30
 8007a72:	d12c      	bne.n	8007ace <_strtoul_l.constprop.0+0x86>
 8007a74:	7828      	ldrb	r0, [r5, #0]
 8007a76:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8007a7a:	2858      	cmp	r0, #88	@ 0x58
 8007a7c:	d127      	bne.n	8007ace <_strtoul_l.constprop.0+0x86>
 8007a7e:	786c      	ldrb	r4, [r5, #1]
 8007a80:	2310      	movs	r3, #16
 8007a82:	3502      	adds	r5, #2
 8007a84:	f04f 38ff 	mov.w	r8, #4294967295
 8007a88:	2600      	movs	r6, #0
 8007a8a:	fbb8 f8f3 	udiv	r8, r8, r3
 8007a8e:	fb03 f908 	mul.w	r9, r3, r8
 8007a92:	ea6f 0909 	mvn.w	r9, r9
 8007a96:	4630      	mov	r0, r6
 8007a98:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8007a9c:	f1bc 0f09 	cmp.w	ip, #9
 8007aa0:	d81c      	bhi.n	8007adc <_strtoul_l.constprop.0+0x94>
 8007aa2:	4664      	mov	r4, ip
 8007aa4:	42a3      	cmp	r3, r4
 8007aa6:	dd2a      	ble.n	8007afe <_strtoul_l.constprop.0+0xb6>
 8007aa8:	f1b6 3fff 	cmp.w	r6, #4294967295
 8007aac:	d007      	beq.n	8007abe <_strtoul_l.constprop.0+0x76>
 8007aae:	4580      	cmp	r8, r0
 8007ab0:	d322      	bcc.n	8007af8 <_strtoul_l.constprop.0+0xb0>
 8007ab2:	d101      	bne.n	8007ab8 <_strtoul_l.constprop.0+0x70>
 8007ab4:	45a1      	cmp	r9, r4
 8007ab6:	db1f      	blt.n	8007af8 <_strtoul_l.constprop.0+0xb0>
 8007ab8:	fb00 4003 	mla	r0, r0, r3, r4
 8007abc:	2601      	movs	r6, #1
 8007abe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007ac2:	e7e9      	b.n	8007a98 <_strtoul_l.constprop.0+0x50>
 8007ac4:	2c2b      	cmp	r4, #43	@ 0x2b
 8007ac6:	bf04      	itt	eq
 8007ac8:	782c      	ldrbeq	r4, [r5, #0]
 8007aca:	1c85      	addeq	r5, r0, #2
 8007acc:	e7cd      	b.n	8007a6a <_strtoul_l.constprop.0+0x22>
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d1d8      	bne.n	8007a84 <_strtoul_l.constprop.0+0x3c>
 8007ad2:	2c30      	cmp	r4, #48	@ 0x30
 8007ad4:	bf0c      	ite	eq
 8007ad6:	2308      	moveq	r3, #8
 8007ad8:	230a      	movne	r3, #10
 8007ada:	e7d3      	b.n	8007a84 <_strtoul_l.constprop.0+0x3c>
 8007adc:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8007ae0:	f1bc 0f19 	cmp.w	ip, #25
 8007ae4:	d801      	bhi.n	8007aea <_strtoul_l.constprop.0+0xa2>
 8007ae6:	3c37      	subs	r4, #55	@ 0x37
 8007ae8:	e7dc      	b.n	8007aa4 <_strtoul_l.constprop.0+0x5c>
 8007aea:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8007aee:	f1bc 0f19 	cmp.w	ip, #25
 8007af2:	d804      	bhi.n	8007afe <_strtoul_l.constprop.0+0xb6>
 8007af4:	3c57      	subs	r4, #87	@ 0x57
 8007af6:	e7d5      	b.n	8007aa4 <_strtoul_l.constprop.0+0x5c>
 8007af8:	f04f 36ff 	mov.w	r6, #4294967295
 8007afc:	e7df      	b.n	8007abe <_strtoul_l.constprop.0+0x76>
 8007afe:	1c73      	adds	r3, r6, #1
 8007b00:	d106      	bne.n	8007b10 <_strtoul_l.constprop.0+0xc8>
 8007b02:	2322      	movs	r3, #34	@ 0x22
 8007b04:	f8ce 3000 	str.w	r3, [lr]
 8007b08:	4630      	mov	r0, r6
 8007b0a:	b932      	cbnz	r2, 8007b1a <_strtoul_l.constprop.0+0xd2>
 8007b0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b10:	b107      	cbz	r7, 8007b14 <_strtoul_l.constprop.0+0xcc>
 8007b12:	4240      	negs	r0, r0
 8007b14:	2a00      	cmp	r2, #0
 8007b16:	d0f9      	beq.n	8007b0c <_strtoul_l.constprop.0+0xc4>
 8007b18:	b106      	cbz	r6, 8007b1c <_strtoul_l.constprop.0+0xd4>
 8007b1a:	1e69      	subs	r1, r5, #1
 8007b1c:	6011      	str	r1, [r2, #0]
 8007b1e:	e7f5      	b.n	8007b0c <_strtoul_l.constprop.0+0xc4>
 8007b20:	08007c0c 	.word	0x08007c0c

08007b24 <_strtoul_r>:
 8007b24:	f7ff bf90 	b.w	8007a48 <_strtoul_l.constprop.0>

08007b28 <_malloc_usable_size_r>:
 8007b28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b2c:	1f18      	subs	r0, r3, #4
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	bfbc      	itt	lt
 8007b32:	580b      	ldrlt	r3, [r1, r0]
 8007b34:	18c0      	addlt	r0, r0, r3
 8007b36:	4770      	bx	lr

08007b38 <_init>:
 8007b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b3a:	bf00      	nop
 8007b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b3e:	bc08      	pop	{r3}
 8007b40:	469e      	mov	lr, r3
 8007b42:	4770      	bx	lr

08007b44 <_fini>:
 8007b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b46:	bf00      	nop
 8007b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b4a:	bc08      	pop	{r3}
 8007b4c:	469e      	mov	lr, r3
 8007b4e:	4770      	bx	lr
