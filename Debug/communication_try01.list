
communication_try01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cb8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  08007e98  08007e98  00008e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008070  08008070  0000a07c  2**0
                  CONTENTS
  4 .ARM          00000008  08008070  08008070  00009070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008078  08008078  0000a07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008078  08008078  00009078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800807c  0800807c  0000907c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08008080  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000424  2000007c  080080fc  0000a07c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a0  080080fc  0000a4a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a07c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000171e4  00000000  00000000  0000a0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f47  00000000  00000000  00021290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001330  00000000  00000000  000241d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ef5  00000000  00000000  00025508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027986  00000000  00000000  000263fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018189  00000000  00000000  0004dd83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe2e4  00000000  00000000  00065f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001641f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057ec  00000000  00000000  00164234  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00169a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000007c 	.word	0x2000007c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007e80 	.word	0x08007e80

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000080 	.word	0x20000080
 800021c:	08007e80 	.word	0x08007e80

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <command_checker>:
int8_t posABS = 0;
int8_t TileON = 0;


char* command_checker(uint8_t* buffer)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
    int8_t ending_condition = 1;
 80005e8:	2301      	movs	r3, #1
 80005ea:	73fb      	strb	r3, [r7, #15]
    int8_t index = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	73bb      	strb	r3, [r7, #14]

    while (ending_condition)
 80005f0:	e00f      	b.n	8000612 <command_checker+0x32>
    {
        if (buffer[index] == '#')
 80005f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005f6:	687a      	ldr	r2, [r7, #4]
 80005f8:	4413      	add	r3, r2
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b23      	cmp	r3, #35	@ 0x23
 80005fe:	d102      	bne.n	8000606 <command_checker+0x26>
        {
            ending_condition = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	73fb      	strb	r3, [r7, #15]
 8000604:	e005      	b.n	8000612 <command_checker+0x32>
        }
        else
        {
            index++;
 8000606:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800060a:	b2db      	uxtb	r3, r3
 800060c:	3301      	adds	r3, #1
 800060e:	b2db      	uxtb	r3, r3
 8000610:	73bb      	strb	r3, [r7, #14]
    while (ending_condition)
 8000612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d1eb      	bne.n	80005f2 <command_checker+0x12>
        }

    }

    // Allocate memory for the command string with an extra byte for the null terminator
    char* command = (char*)malloc(index + 1);
 800061a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800061e:	3301      	adds	r3, #1
 8000620:	4618      	mov	r0, r3
 8000622:	f006 fde3 	bl	80071ec <malloc>
 8000626:	4603      	mov	r3, r0
 8000628:	60bb      	str	r3, [r7, #8]
    if (command == NULL)
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d101      	bne.n	8000634 <command_checker+0x54>
    {
        return NULL;  // Allocation failed
 8000630:	2300      	movs	r3, #0
 8000632:	e00d      	b.n	8000650 <command_checker+0x70>
    }

    // Copy the command part from buffer to the newly allocated string
    strncpy(command, (char*)buffer, index);
 8000634:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000638:	461a      	mov	r2, r3
 800063a:	6879      	ldr	r1, [r7, #4]
 800063c:	68b8      	ldr	r0, [r7, #8]
 800063e:	f006 fec7 	bl	80073d0 <strncpy>
    command[index] = '\0';  // Null-terminate the string
 8000642:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000646:	68ba      	ldr	r2, [r7, #8]
 8000648:	4413      	add	r3, r2
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]

    return command;
 800064e:	68bb      	ldr	r3, [r7, #8]
}
 8000650:	4618      	mov	r0, r3
 8000652:	3710      	adds	r7, #16
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <SPI_Communication>:



}
void SPI_Communication(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08a      	sub	sp, #40	@ 0x28
 800065c:	af00      	add	r7, sp, #0

    int8_t index = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint8_t receivedData;
    uint8_t pinstate = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 8000664:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000668:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800066c:	f001 fcf2 	bl	8002054 <HAL_GPIO_ReadPin>
 8000670:	4603      	mov	r3, r0
 8000672:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26


    if (!pinstate) {memset(RxBuffer, 0, sizeof(RxBuffer));}
 8000676:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800067a:	2b00      	cmp	r3, #0
 800067c:	f040 80e6 	bne.w	800084c <SPI_Communication+0x1f4>
 8000680:	2220      	movs	r2, #32
 8000682:	2100      	movs	r1, #0
 8000684:	4876      	ldr	r0, [pc, #472]	@ (8000860 <SPI_Communication+0x208>)
 8000686:	f006 fe9b 	bl	80073c0 <memset>

    while (!pinstate) {
 800068a:	e0df      	b.n	800084c <SPI_Communication+0x1f4>
        // Receive data from SPI
        HAL_SPI_Receive(&hspi1, &receivedData, 1, HAL_MAX_DELAY);
 800068c:	f107 010f 	add.w	r1, r7, #15
 8000690:	f04f 33ff 	mov.w	r3, #4294967295
 8000694:	2201      	movs	r2, #1
 8000696:	4873      	ldr	r0, [pc, #460]	@ (8000864 <SPI_Communication+0x20c>)
 8000698:	f002 ff5c 	bl	8003554 <HAL_SPI_Receive>

        // Check for buffer overflow
        if (index < MAX_BUFFER_SIZE)
 800069c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80006a0:	2b1f      	cmp	r3, #31
 80006a2:	f300 80ca 	bgt.w	800083a <SPI_Communication+0x1e2>
        {
            // Store received data in buffer
            RxBuffer[index++] = (char)receivedData;
 80006a6:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 80006aa:	b2d3      	uxtb	r3, r2
 80006ac:	3301      	adds	r3, #1
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80006b4:	7bf9      	ldrb	r1, [r7, #15]
 80006b6:	4b6a      	ldr	r3, [pc, #424]	@ (8000860 <SPI_Communication+0x208>)
 80006b8:	5499      	strb	r1, [r3, r2]

            // Check if end of message
            if ((char)receivedData == END_OF_MESSAGE)
 80006ba:	7bfb      	ldrb	r3, [r7, #15]
 80006bc:	2b24      	cmp	r3, #36	@ 0x24
 80006be:	f040 80bc 	bne.w	800083a <SPI_Communication+0x1e2>
            {
            	char* command = command_checker(RxBuffer);
 80006c2:	4867      	ldr	r0, [pc, #412]	@ (8000860 <SPI_Communication+0x208>)
 80006c4:	f7ff ff8c 	bl	80005e0 <command_checker>
 80006c8:	6238      	str	r0, [r7, #32]
            	if(command == NULL){command = "MEM#ERR";}
 80006ca:	6a3b      	ldr	r3, [r7, #32]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d102      	bne.n	80006d6 <SPI_Communication+0x7e>
 80006d0:	4b65      	ldr	r3, [pc, #404]	@ (8000868 <SPI_Communication+0x210>)
 80006d2:	623b      	str	r3, [r7, #32]
 80006d4:	e09e      	b.n	8000814 <SPI_Communication+0x1bc>
////////////////////////////////////////////////////////////////////////////////////////////////////////////
            	else if(strcmp(command, "HEAD") == 0)
 80006d6:	4965      	ldr	r1, [pc, #404]	@ (800086c <SPI_Communication+0x214>)
 80006d8:	6a38      	ldr	r0, [r7, #32]
 80006da:	f7ff fda1 	bl	8000220 <strcmp>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d11b      	bne.n	800071c <SPI_Communication+0xc4>
            	{

            		HAL_UART_Transmit(&huart5, (uint8_t *)RxBuffer, strlen(RxBuffer), HAL_MAX_DELAY);
 80006e4:	485e      	ldr	r0, [pc, #376]	@ (8000860 <SPI_Communication+0x208>)
 80006e6:	f7ff fda5 	bl	8000234 <strlen>
 80006ea:	4603      	mov	r3, r0
 80006ec:	b29a      	uxth	r2, r3
 80006ee:	f04f 33ff 	mov.w	r3, #4294967295
 80006f2:	495b      	ldr	r1, [pc, #364]	@ (8000860 <SPI_Communication+0x208>)
 80006f4:	485e      	ldr	r0, [pc, #376]	@ (8000870 <SPI_Communication+0x218>)
 80006f6:	f005 fa61 	bl	8005bbc <HAL_UART_Transmit>
            		HAL_Delay(20);
 80006fa:	2014      	movs	r0, #20
 80006fc:	f001 f936 	bl	800196c <HAL_Delay>

            		char* received_data = head_control();
 8000700:	f000 f8d0 	bl	80008a4 <head_control>
 8000704:	6138      	str	r0, [r7, #16]
            		memset(TxBuffer, '\0', sizeof(TxBuffer));
 8000706:	2220      	movs	r2, #32
 8000708:	2100      	movs	r1, #0
 800070a:	485a      	ldr	r0, [pc, #360]	@ (8000874 <SPI_Communication+0x21c>)
 800070c:	f006 fe58 	bl	80073c0 <memset>
            		strncpy(TxBuffer, received_data, sizeof(TxBuffer) - 1);
 8000710:	221f      	movs	r2, #31
 8000712:	6939      	ldr	r1, [r7, #16]
 8000714:	4857      	ldr	r0, [pc, #348]	@ (8000874 <SPI_Communication+0x21c>)
 8000716:	f006 fe5b 	bl	80073d0 <strncpy>
 800071a:	e07b      	b.n	8000814 <SPI_Communication+0x1bc>


            	 }
///////////////////////////////////////////////////////////////////////////////////////////////////////////
            	else if(strcmp(command, "MAGNET") == 0)
 800071c:	4956      	ldr	r1, [pc, #344]	@ (8000878 <SPI_Communication+0x220>)
 800071e:	6a38      	ldr	r0, [r7, #32]
 8000720:	f7ff fd7e 	bl	8000220 <strcmp>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d12c      	bne.n	8000784 <SPI_Communication+0x12c>
            	{


            		int8_t MagState;
            		HAL_UART_Transmit(&huart5, (uint8_t *)RxBuffer, strlen(RxBuffer), HAL_MAX_DELAY);
 800072a:	484d      	ldr	r0, [pc, #308]	@ (8000860 <SPI_Communication+0x208>)
 800072c:	f7ff fd82 	bl	8000234 <strlen>
 8000730:	4603      	mov	r3, r0
 8000732:	b29a      	uxth	r2, r3
 8000734:	f04f 33ff 	mov.w	r3, #4294967295
 8000738:	4949      	ldr	r1, [pc, #292]	@ (8000860 <SPI_Communication+0x208>)
 800073a:	484d      	ldr	r0, [pc, #308]	@ (8000870 <SPI_Communication+0x218>)
 800073c:	f005 fa3e 	bl	8005bbc <HAL_UART_Transmit>
            		memset(TxBuffer, '\0', sizeof(TxBuffer));
 8000740:	2220      	movs	r2, #32
 8000742:	2100      	movs	r1, #0
 8000744:	484b      	ldr	r0, [pc, #300]	@ (8000874 <SPI_Communication+0x21c>)
 8000746:	f006 fe3b 	bl	80073c0 <memset>
					sscanf(RxBuffer, "MAGNET#%d$", &MagState);
 800074a:	f107 030e 	add.w	r3, r7, #14
 800074e:	461a      	mov	r2, r3
 8000750:	494a      	ldr	r1, [pc, #296]	@ (800087c <SPI_Communication+0x224>)
 8000752:	4843      	ldr	r0, [pc, #268]	@ (8000860 <SPI_Communication+0x208>)
 8000754:	f006 fe08 	bl	8007368 <siscanf>
					if(MagState != 0){TileON = 1 ;}
 8000758:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d003      	beq.n	8000768 <SPI_Communication+0x110>
 8000760:	4b47      	ldr	r3, [pc, #284]	@ (8000880 <SPI_Communication+0x228>)
 8000762:	2201      	movs	r2, #1
 8000764:	701a      	strb	r2, [r3, #0]
 8000766:	e002      	b.n	800076e <SPI_Communication+0x116>
					else{TileON = 0 ;}
 8000768:	4b45      	ldr	r3, [pc, #276]	@ (8000880 <SPI_Communication+0x228>)
 800076a:	2200      	movs	r2, #0
 800076c:	701a      	strb	r2, [r3, #0]
            		char *str = "MAG#OK$";
 800076e:	4b45      	ldr	r3, [pc, #276]	@ (8000884 <SPI_Communication+0x22c>)
 8000770:	617b      	str	r3, [r7, #20]
            		HAL_Delay(200);
 8000772:	20c8      	movs	r0, #200	@ 0xc8
 8000774:	f001 f8fa 	bl	800196c <HAL_Delay>
            		strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
 8000778:	221f      	movs	r2, #31
 800077a:	6979      	ldr	r1, [r7, #20]
 800077c:	483d      	ldr	r0, [pc, #244]	@ (8000874 <SPI_Communication+0x21c>)
 800077e:	f006 fe27 	bl	80073d0 <strncpy>
 8000782:	e047      	b.n	8000814 <SPI_Communication+0x1bc>


            	}
///////////////////////////////////////////////////////////////////////////////////////////////////////////
            	else if(strcmp(command,"ROT")==0)
 8000784:	4940      	ldr	r1, [pc, #256]	@ (8000888 <SPI_Communication+0x230>)
 8000786:	6a38      	ldr	r0, [r7, #32]
 8000788:	f7ff fd4a 	bl	8000220 <strcmp>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d118      	bne.n	80007c4 <SPI_Communication+0x16c>
            	{
            		    int number;
            		    sscanf(RxBuffer, "ROT#%d$", &number);
 8000792:	f107 0308 	add.w	r3, r7, #8
 8000796:	461a      	mov	r2, r3
 8000798:	493c      	ldr	r1, [pc, #240]	@ (800088c <SPI_Communication+0x234>)
 800079a:	4831      	ldr	r0, [pc, #196]	@ (8000860 <SPI_Communication+0x208>)
 800079c:	f006 fde4 	bl	8007368 <siscanf>
            		    Motor_Steer(number);
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	b25b      	sxtb	r3, r3
 80007a4:	4618      	mov	r0, r3
 80007a6:	f000 fc23 	bl	8000ff0 <Motor_Steer>
            		memset(TxBuffer, '\0', sizeof(TxBuffer));
 80007aa:	2220      	movs	r2, #32
 80007ac:	2100      	movs	r1, #0
 80007ae:	4831      	ldr	r0, [pc, #196]	@ (8000874 <SPI_Communication+0x21c>)
 80007b0:	f006 fe06 	bl	80073c0 <memset>
            		char *str = "ROT#OK$";
 80007b4:	4b36      	ldr	r3, [pc, #216]	@ (8000890 <SPI_Communication+0x238>)
 80007b6:	61bb      	str	r3, [r7, #24]
            		strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
 80007b8:	221f      	movs	r2, #31
 80007ba:	69b9      	ldr	r1, [r7, #24]
 80007bc:	482d      	ldr	r0, [pc, #180]	@ (8000874 <SPI_Communication+0x21c>)
 80007be:	f006 fe07 	bl	80073d0 <strncpy>
 80007c2:	e027      	b.n	8000814 <SPI_Communication+0x1bc>
            	}
/////////////////////////////////////////////////////////////////////////////////////////////////////////
            	else if(strcmp(command,"AROT")==0)
 80007c4:	4933      	ldr	r1, [pc, #204]	@ (8000894 <SPI_Communication+0x23c>)
 80007c6:	6a38      	ldr	r0, [r7, #32]
 80007c8:	f7ff fd2a 	bl	8000220 <strcmp>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d117      	bne.n	8000802 <SPI_Communication+0x1aa>
            	{

            		 int number;
            		 sscanf(RxBuffer, "AROT#%d$", &number);
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	461a      	mov	r2, r3
 80007d6:	4930      	ldr	r1, [pc, #192]	@ (8000898 <SPI_Communication+0x240>)
 80007d8:	4821      	ldr	r0, [pc, #132]	@ (8000860 <SPI_Communication+0x208>)
 80007da:	f006 fdc5 	bl	8007368 <siscanf>


            		 ABSRotateHead(number);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	b25b      	sxtb	r3, r3
 80007e2:	4618      	mov	r0, r3
 80007e4:	f000 fca6 	bl	8001134 <ABSRotateHead>

            		 memset(TxBuffer, '\0', sizeof(TxBuffer));
 80007e8:	2220      	movs	r2, #32
 80007ea:	2100      	movs	r1, #0
 80007ec:	4821      	ldr	r0, [pc, #132]	@ (8000874 <SPI_Communication+0x21c>)
 80007ee:	f006 fde7 	bl	80073c0 <memset>
            		 char *str = "AROT#OK$";
 80007f2:	4b2a      	ldr	r3, [pc, #168]	@ (800089c <SPI_Communication+0x244>)
 80007f4:	61fb      	str	r3, [r7, #28]
            		 strncpy(TxBuffer, str, sizeof(TxBuffer) - 1);
 80007f6:	221f      	movs	r2, #31
 80007f8:	69f9      	ldr	r1, [r7, #28]
 80007fa:	481e      	ldr	r0, [pc, #120]	@ (8000874 <SPI_Communication+0x21c>)
 80007fc:	f006 fde8 	bl	80073d0 <strncpy>
 8000800:	e008      	b.n	8000814 <SPI_Communication+0x1bc>
            	}
/////////////////////////////////////////////////////////////////////////////////////////////////////////
            	else if(strcmp(command,"TILEBASE")==0)
 8000802:	4927      	ldr	r1, [pc, #156]	@ (80008a0 <SPI_Communication+0x248>)
 8000804:	6a38      	ldr	r0, [r7, #32]
 8000806:	f7ff fd0b 	bl	8000220 <strcmp>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d101      	bne.n	8000814 <SPI_Communication+0x1bc>
            	{
            		HeadBase();
 8000810:	f000 fcc8 	bl	80011a4 <HeadBase>
            	}
////////////////////////////////////////////////////////////////////////////////////////////////////////

            	free(command);
 8000814:	6a38      	ldr	r0, [r7, #32]
 8000816:	f006 fcf1 	bl	80071fc <free>
            	command = NULL;
 800081a:	2300      	movs	r3, #0
 800081c:	623b      	str	r3, [r7, #32]
                HAL_SPI_Transmit(&hspi1, (uint8_t *)TxBuffer, strlen(TxBuffer), HAL_MAX_DELAY);
 800081e:	4815      	ldr	r0, [pc, #84]	@ (8000874 <SPI_Communication+0x21c>)
 8000820:	f7ff fd08 	bl	8000234 <strlen>
 8000824:	4603      	mov	r3, r0
 8000826:	b29a      	uxth	r2, r3
 8000828:	f04f 33ff 	mov.w	r3, #4294967295
 800082c:	4911      	ldr	r1, [pc, #68]	@ (8000874 <SPI_Communication+0x21c>)
 800082e:	480d      	ldr	r0, [pc, #52]	@ (8000864 <SPI_Communication+0x20c>)
 8000830:	f002 fd1b 	bl	800326a <HAL_SPI_Transmit>
                index = 0; // Reset buffer index
 8000834:	2300      	movs	r3, #0
 8000836:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

            }
        }

        // Update pin state
        pinstate = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 800083a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800083e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000842:	f001 fc07 	bl	8002054 <HAL_GPIO_ReadPin>
 8000846:	4603      	mov	r3, r0
 8000848:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    while (!pinstate) {
 800084c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000850:	2b00      	cmp	r3, #0
 8000852:	f43f af1b 	beq.w	800068c <SPI_Communication+0x34>
    }
}
 8000856:	bf00      	nop
 8000858:	bf00      	nop
 800085a:	3728      	adds	r7, #40	@ 0x28
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000098 	.word	0x20000098
 8000864:	200000dc 	.word	0x200000dc
 8000868:	08007e98 	.word	0x08007e98
 800086c:	08007ea0 	.word	0x08007ea0
 8000870:	200002b8 	.word	0x200002b8
 8000874:	20000000 	.word	0x20000000
 8000878:	08007ea8 	.word	0x08007ea8
 800087c:	08007eb0 	.word	0x08007eb0
 8000880:	200000b9 	.word	0x200000b9
 8000884:	08007ebc 	.word	0x08007ebc
 8000888:	08007ec4 	.word	0x08007ec4
 800088c:	08007ec8 	.word	0x08007ec8
 8000890:	08007ed0 	.word	0x08007ed0
 8000894:	08007ed8 	.word	0x08007ed8
 8000898:	08007ee0 	.word	0x08007ee0
 800089c:	08007eec 	.word	0x08007eec
 80008a0:	08007ef8 	.word	0x08007ef8

080008a4 <head_control>:

#define RX_BUFFER_SIZE 32 // Define an appropriate size for your buffer



char* head_control(void) {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
    static char RxBuffer[RX_BUFFER_SIZE];
    memset(RxBuffer, '\0', sizeof(RxBuffer)); // Clear the buffer
 80008aa:	2220      	movs	r2, #32
 80008ac:	2100      	movs	r1, #0
 80008ae:	4817      	ldr	r0, [pc, #92]	@ (800090c <head_control+0x68>)
 80008b0:	f006 fd86 	bl	80073c0 <memset>

    char received_char;
    int8_t index = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	71fb      	strb	r3, [r7, #7]

    // Continue to receive characters until the character '$' is found
    while (1) {
        // Receive one character at a time
        if (HAL_UART_Receive(&huart5, (uint8_t*)&received_char, 1, HAL_MAX_DELAY) == HAL_OK) {
 80008b8:	1db9      	adds	r1, r7, #6
 80008ba:	f04f 33ff 	mov.w	r3, #4294967295
 80008be:	2201      	movs	r2, #1
 80008c0:	4813      	ldr	r0, [pc, #76]	@ (8000910 <head_control+0x6c>)
 80008c2:	f005 fa09 	bl	8005cd8 <HAL_UART_Receive>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d1f5      	bne.n	80008b8 <head_control+0x14>
            // Skip adding to buffer if the received character is '\0'
            if (received_char == '\0') {
 80008cc:	79bb      	ldrb	r3, [r7, #6]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d010      	beq.n	80008f4 <head_control+0x50>
                continue;
            }

            RxBuffer[index++] = received_char;
 80008d2:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80008d6:	b2d3      	uxtb	r3, r2
 80008d8:	3301      	adds	r3, #1
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	71fb      	strb	r3, [r7, #7]
 80008de:	79b9      	ldrb	r1, [r7, #6]
 80008e0:	4b0a      	ldr	r3, [pc, #40]	@ (800090c <head_control+0x68>)
 80008e2:	5499      	strb	r1, [r3, r2]

            // Break the loop if the end of the buffer is reached or if '$' is received
            if (index >= RX_BUFFER_SIZE || received_char == '$') {
 80008e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e8:	2b1f      	cmp	r3, #31
 80008ea:	dc05      	bgt.n	80008f8 <head_control+0x54>
 80008ec:	79bb      	ldrb	r3, [r7, #6]
 80008ee:	2b24      	cmp	r3, #36	@ 0x24
 80008f0:	d002      	beq.n	80008f8 <head_control+0x54>
 80008f2:	e7e1      	b.n	80008b8 <head_control+0x14>
                continue;
 80008f4:	bf00      	nop
        if (HAL_UART_Receive(&huart5, (uint8_t*)&received_char, 1, HAL_MAX_DELAY) == HAL_OK) {
 80008f6:	e7df      	b.n	80008b8 <head_control+0x14>
            }
        }
    }

    // Null-terminate the string
    RxBuffer[index] = '\0';
 80008f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fc:	4a03      	ldr	r2, [pc, #12]	@ (800090c <head_control+0x68>)
 80008fe:	2100      	movs	r1, #0
 8000900:	54d1      	strb	r1, [r2, r3]

    return RxBuffer;
 8000902:	4b02      	ldr	r3, [pc, #8]	@ (800090c <head_control+0x68>)
}
 8000904:	4618      	mov	r0, r3
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	200000bc 	.word	0x200000bc
 8000910:	200002b8 	.word	0x200002b8

08000914 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000918:	f000 ffb7 	bl	800188a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800091c:	f000 f811 	bl	8000942 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000920:	f000 faac 	bl	8000e7c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000924:	f000 f85a 	bl	80009dc <MX_SPI1_Init>
  MX_UART5_Init();
 8000928:	f000 fa5c 	bl	8000de4 <MX_UART5_Init>
  MX_UART4_Init();
 800092c:	f000 fa0e 	bl	8000d4c <MX_UART4_Init>
  MX_TIM1_Init();
 8000930:	f000 f88c 	bl	8000a4c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000934:	f000 f95e 	bl	8000bf4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000938:	f000 f9b2 	bl	8000ca0 <MX_TIM4_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  SPI_Communication();
 800093c:	f7ff fe8c 	bl	8000658 <SPI_Communication>
 8000940:	e7fc      	b.n	800093c <main+0x28>

08000942 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	b094      	sub	sp, #80	@ 0x50
 8000946:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000948:	f107 0318 	add.w	r3, r7, #24
 800094c:	2238      	movs	r2, #56	@ 0x38
 800094e:	2100      	movs	r1, #0
 8000950:	4618      	mov	r0, r3
 8000952:	f006 fd35 	bl	80073c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000964:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000968:	f001 fba4 	bl	80020b4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800096c:	2302      	movs	r3, #2
 800096e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000970:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000974:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000976:	2340      	movs	r3, #64	@ 0x40
 8000978:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800097a:	2302      	movs	r3, #2
 800097c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800097e:	2302      	movs	r3, #2
 8000980:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000982:	2301      	movs	r3, #1
 8000984:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000986:	2308      	movs	r3, #8
 8000988:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800098a:	2302      	movs	r3, #2
 800098c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800098e:	2302      	movs	r3, #2
 8000990:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000992:	2302      	movs	r3, #2
 8000994:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000996:	f107 0318 	add.w	r3, r7, #24
 800099a:	4618      	mov	r0, r3
 800099c:	f001 fc3e 	bl	800221c <HAL_RCC_OscConfig>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <SystemClock_Config+0x68>
  {
    Error_Handler();
 80009a6:	f000 fb09 	bl	8000fbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009aa:	230f      	movs	r3, #15
 80009ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ae:	2303      	movs	r3, #3
 80009b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80009b2:	2380      	movs	r3, #128	@ 0x80
 80009b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009b6:	2300      	movs	r3, #0
 80009b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ba:	2300      	movs	r3, #0
 80009bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009be:	1d3b      	adds	r3, r7, #4
 80009c0:	2101      	movs	r1, #1
 80009c2:	4618      	mov	r0, r3
 80009c4:	f001 ff3c 	bl	8002840 <HAL_RCC_ClockConfig>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80009ce:	f000 faf5 	bl	8000fbc <Error_Handler>
  }
}
 80009d2:	bf00      	nop
 80009d4:	3750      	adds	r7, #80	@ 0x50
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
	...

080009dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009e0:	4b18      	ldr	r3, [pc, #96]	@ (8000a44 <MX_SPI1_Init+0x68>)
 80009e2:	4a19      	ldr	r2, [pc, #100]	@ (8000a48 <MX_SPI1_Init+0x6c>)
 80009e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80009e6:	4b17      	ldr	r3, [pc, #92]	@ (8000a44 <MX_SPI1_Init+0x68>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009ec:	4b15      	ldr	r3, [pc, #84]	@ (8000a44 <MX_SPI1_Init+0x68>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009f2:	4b14      	ldr	r3, [pc, #80]	@ (8000a44 <MX_SPI1_Init+0x68>)
 80009f4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80009f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009fa:	4b12      	ldr	r3, [pc, #72]	@ (8000a44 <MX_SPI1_Init+0x68>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a00:	4b10      	ldr	r3, [pc, #64]	@ (8000a44 <MX_SPI1_Init+0x68>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000a06:	4b0f      	ldr	r3, [pc, #60]	@ (8000a44 <MX_SPI1_Init+0x68>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a0c:	4b0d      	ldr	r3, [pc, #52]	@ (8000a44 <MX_SPI1_Init+0x68>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a12:	4b0c      	ldr	r3, [pc, #48]	@ (8000a44 <MX_SPI1_Init+0x68>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a18:	4b0a      	ldr	r3, [pc, #40]	@ (8000a44 <MX_SPI1_Init+0x68>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a1e:	4b09      	ldr	r3, [pc, #36]	@ (8000a44 <MX_SPI1_Init+0x68>)
 8000a20:	2207      	movs	r2, #7
 8000a22:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a24:	4b07      	ldr	r3, [pc, #28]	@ (8000a44 <MX_SPI1_Init+0x68>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000a2a:	4b06      	ldr	r3, [pc, #24]	@ (8000a44 <MX_SPI1_Init+0x68>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a30:	4804      	ldr	r0, [pc, #16]	@ (8000a44 <MX_SPI1_Init+0x68>)
 8000a32:	f002 fb6f 	bl	8003114 <HAL_SPI_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8000a3c:	f000 fabe 	bl	8000fbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	200000dc 	.word	0x200000dc
 8000a48:	40013000 	.word	0x40013000

08000a4c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b09c      	sub	sp, #112	@ 0x70
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a52:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a60:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a6c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
 8000a7a:	611a      	str	r2, [r3, #16]
 8000a7c:	615a      	str	r2, [r3, #20]
 8000a7e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a80:	1d3b      	adds	r3, r7, #4
 8000a82:	2234      	movs	r2, #52	@ 0x34
 8000a84:	2100      	movs	r1, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f006 fc9a 	bl	80073c0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a8c:	4b57      	ldr	r3, [pc, #348]	@ (8000bec <MX_TIM1_Init+0x1a0>)
 8000a8e:	4a58      	ldr	r2, [pc, #352]	@ (8000bf0 <MX_TIM1_Init+0x1a4>)
 8000a90:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a92:	4b56      	ldr	r3, [pc, #344]	@ (8000bec <MX_TIM1_Init+0x1a0>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a98:	4b54      	ldr	r3, [pc, #336]	@ (8000bec <MX_TIM1_Init+0x1a0>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 399;
 8000a9e:	4b53      	ldr	r3, [pc, #332]	@ (8000bec <MX_TIM1_Init+0x1a0>)
 8000aa0:	f240 128f 	movw	r2, #399	@ 0x18f
 8000aa4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa6:	4b51      	ldr	r3, [pc, #324]	@ (8000bec <MX_TIM1_Init+0x1a0>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000aac:	4b4f      	ldr	r3, [pc, #316]	@ (8000bec <MX_TIM1_Init+0x1a0>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab2:	4b4e      	ldr	r3, [pc, #312]	@ (8000bec <MX_TIM1_Init+0x1a0>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ab8:	484c      	ldr	r0, [pc, #304]	@ (8000bec <MX_TIM1_Init+0x1a0>)
 8000aba:	f003 fb75 	bl	80041a8 <HAL_TIM_Base_Init>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000ac4:	f000 fa7a 	bl	8000fbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ac8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000acc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ace:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4845      	ldr	r0, [pc, #276]	@ (8000bec <MX_TIM1_Init+0x1a0>)
 8000ad6:	f004 f8c9 	bl	8004c6c <HAL_TIM_ConfigClockSource>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000ae0:	f000 fa6c 	bl	8000fbc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ae4:	4841      	ldr	r0, [pc, #260]	@ (8000bec <MX_TIM1_Init+0x1a0>)
 8000ae6:	f003 fbb6 	bl	8004256 <HAL_TIM_PWM_Init>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000af0:	f000 fa64 	bl	8000fbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af4:	2300      	movs	r3, #0
 8000af6:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000af8:	2300      	movs	r3, #0
 8000afa:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000afc:	2300      	movs	r3, #0
 8000afe:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b00:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000b04:	4619      	mov	r1, r3
 8000b06:	4839      	ldr	r0, [pc, #228]	@ (8000bec <MX_TIM1_Init+0x1a0>)
 8000b08:	f004 fe98 	bl	800583c <HAL_TIMEx_MasterConfigSynchronization>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000b12:	f000 fa53 	bl	8000fbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b16:	2360      	movs	r3, #96	@ 0x60
 8000b18:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b22:	2300      	movs	r3, #0
 8000b24:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b26:	2300      	movs	r3, #0
 8000b28:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b32:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b36:	2200      	movs	r2, #0
 8000b38:	4619      	mov	r1, r3
 8000b3a:	482c      	ldr	r0, [pc, #176]	@ (8000bec <MX_TIM1_Init+0x1a0>)
 8000b3c:	f003 ff82 	bl	8004a44 <HAL_TIM_PWM_ConfigChannel>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000b46:	f000 fa39 	bl	8000fbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b4a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b4e:	2204      	movs	r2, #4
 8000b50:	4619      	mov	r1, r3
 8000b52:	4826      	ldr	r0, [pc, #152]	@ (8000bec <MX_TIM1_Init+0x1a0>)
 8000b54:	f003 ff76 	bl	8004a44 <HAL_TIM_PWM_ConfigChannel>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000b5e:	f000 fa2d 	bl	8000fbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b62:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b66:	2208      	movs	r2, #8
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4820      	ldr	r0, [pc, #128]	@ (8000bec <MX_TIM1_Init+0x1a0>)
 8000b6c:	f003 ff6a 	bl	8004a44 <HAL_TIM_PWM_ConfigChannel>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000b76:	f000 fa21 	bl	8000fbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b7a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b7e:	220c      	movs	r2, #12
 8000b80:	4619      	mov	r1, r3
 8000b82:	481a      	ldr	r0, [pc, #104]	@ (8000bec <MX_TIM1_Init+0x1a0>)
 8000b84:	f003 ff5e 	bl	8004a44 <HAL_TIM_PWM_ConfigChannel>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8000b8e:	f000 fa15 	bl	8000fbc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b92:	2300      	movs	r3, #0
 8000b94:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b96:	2300      	movs	r3, #0
 8000b98:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ba6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000baa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000bb8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4807      	ldr	r0, [pc, #28]	@ (8000bec <MX_TIM1_Init+0x1a0>)
 8000bd0:	f004 feca 	bl	8005968 <HAL_TIMEx_ConfigBreakDeadTime>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_TIM1_Init+0x192>
  {
    Error_Handler();
 8000bda:	f000 f9ef 	bl	8000fbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000bde:	4803      	ldr	r0, [pc, #12]	@ (8000bec <MX_TIM1_Init+0x1a0>)
 8000be0:	f000 fc86 	bl	80014f0 <HAL_TIM_MspPostInit>

}
 8000be4:	bf00      	nop
 8000be6:	3770      	adds	r7, #112	@ 0x70
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000140 	.word	0x20000140
 8000bf0:	40012c00 	.word	0x40012c00

08000bf4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08c      	sub	sp, #48	@ 0x30
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000bfa:	f107 030c 	add.w	r3, r7, #12
 8000bfe:	2224      	movs	r2, #36	@ 0x24
 8000c00:	2100      	movs	r1, #0
 8000c02:	4618      	mov	r0, r3
 8000c04:	f006 fbdc 	bl	80073c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c08:	463b      	mov	r3, r7
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c12:	4b21      	ldr	r3, [pc, #132]	@ (8000c98 <MX_TIM3_Init+0xa4>)
 8000c14:	4a21      	ldr	r2, [pc, #132]	@ (8000c9c <MX_TIM3_Init+0xa8>)
 8000c16:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c18:	4b1f      	ldr	r3, [pc, #124]	@ (8000c98 <MX_TIM3_Init+0xa4>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c1e:	4b1e      	ldr	r3, [pc, #120]	@ (8000c98 <MX_TIM3_Init+0xa4>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000c24:	4b1c      	ldr	r3, [pc, #112]	@ (8000c98 <MX_TIM3_Init+0xa4>)
 8000c26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c2a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000c98 <MX_TIM3_Init+0xa4>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c32:	4b19      	ldr	r3, [pc, #100]	@ (8000c98 <MX_TIM3_Init+0xa4>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c38:	2303      	movs	r3, #3
 8000c3a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c40:	2301      	movs	r3, #1
 8000c42:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c50:	2301      	movs	r3, #1
 8000c52:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c54:	2300      	movs	r3, #0
 8000c56:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000c5c:	f107 030c 	add.w	r3, r7, #12
 8000c60:	4619      	mov	r1, r3
 8000c62:	480d      	ldr	r0, [pc, #52]	@ (8000c98 <MX_TIM3_Init+0xa4>)
 8000c64:	f003 fc6a 	bl	800453c <HAL_TIM_Encoder_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000c6e:	f000 f9a5 	bl	8000fbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c72:	2300      	movs	r3, #0
 8000c74:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c76:	2300      	movs	r3, #0
 8000c78:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c7a:	463b      	mov	r3, r7
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4806      	ldr	r0, [pc, #24]	@ (8000c98 <MX_TIM3_Init+0xa4>)
 8000c80:	f004 fddc 	bl	800583c <HAL_TIMEx_MasterConfigSynchronization>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000c8a:	f000 f997 	bl	8000fbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c8e:	bf00      	nop
 8000c90:	3730      	adds	r7, #48	@ 0x30
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	2000018c 	.word	0x2000018c
 8000c9c:	40000400 	.word	0x40000400

08000ca0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08c      	sub	sp, #48	@ 0x30
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ca6:	f107 030c 	add.w	r3, r7, #12
 8000caa:	2224      	movs	r2, #36	@ 0x24
 8000cac:	2100      	movs	r1, #0
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f006 fb86 	bl	80073c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cb4:	463b      	mov	r3, r7
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	605a      	str	r2, [r3, #4]
 8000cbc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cbe:	4b21      	ldr	r3, [pc, #132]	@ (8000d44 <MX_TIM4_Init+0xa4>)
 8000cc0:	4a21      	ldr	r2, [pc, #132]	@ (8000d48 <MX_TIM4_Init+0xa8>)
 8000cc2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 8000cc4:	4b1f      	ldr	r3, [pc, #124]	@ (8000d44 <MX_TIM4_Init+0xa4>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cca:	4b1e      	ldr	r3, [pc, #120]	@ (8000d44 <MX_TIM4_Init+0xa4>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000cd0:	4b1c      	ldr	r3, [pc, #112]	@ (8000d44 <MX_TIM4_Init+0xa4>)
 8000cd2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cd6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cd8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d44 <MX_TIM4_Init+0xa4>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cde:	4b19      	ldr	r3, [pc, #100]	@ (8000d44 <MX_TIM4_Init+0xa4>)
 8000ce0:	2280      	movs	r2, #128	@ 0x80
 8000ce2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000cec:	2301      	movs	r3, #1
 8000cee:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d00:	2300      	movs	r3, #0
 8000d02:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 1;
 8000d04:	2301      	movs	r3, #1
 8000d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000d08:	f107 030c 	add.w	r3, r7, #12
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	480d      	ldr	r0, [pc, #52]	@ (8000d44 <MX_TIM4_Init+0xa4>)
 8000d10:	f003 fc14 	bl	800453c <HAL_TIM_Encoder_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000d1a:	f000 f94f 	bl	8000fbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d22:	2300      	movs	r3, #0
 8000d24:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d26:	463b      	mov	r3, r7
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4806      	ldr	r0, [pc, #24]	@ (8000d44 <MX_TIM4_Init+0xa4>)
 8000d2c:	f004 fd86 	bl	800583c <HAL_TIMEx_MasterConfigSynchronization>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000d36:	f000 f941 	bl	8000fbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d3a:	bf00      	nop
 8000d3c:	3730      	adds	r7, #48	@ 0x30
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	200001d8 	.word	0x200001d8
 8000d48:	40000800 	.word	0x40000800

08000d4c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000d50:	4b22      	ldr	r3, [pc, #136]	@ (8000ddc <MX_UART4_Init+0x90>)
 8000d52:	4a23      	ldr	r2, [pc, #140]	@ (8000de0 <MX_UART4_Init+0x94>)
 8000d54:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000d56:	4b21      	ldr	r3, [pc, #132]	@ (8000ddc <MX_UART4_Init+0x90>)
 8000d58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d5c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000d5e:	4b1f      	ldr	r3, [pc, #124]	@ (8000ddc <MX_UART4_Init+0x90>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000d64:	4b1d      	ldr	r3, [pc, #116]	@ (8000ddc <MX_UART4_Init+0x90>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000d6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ddc <MX_UART4_Init+0x90>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000d70:	4b1a      	ldr	r3, [pc, #104]	@ (8000ddc <MX_UART4_Init+0x90>)
 8000d72:	220c      	movs	r2, #12
 8000d74:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d76:	4b19      	ldr	r3, [pc, #100]	@ (8000ddc <MX_UART4_Init+0x90>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d7c:	4b17      	ldr	r3, [pc, #92]	@ (8000ddc <MX_UART4_Init+0x90>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d82:	4b16      	ldr	r3, [pc, #88]	@ (8000ddc <MX_UART4_Init+0x90>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d88:	4b14      	ldr	r3, [pc, #80]	@ (8000ddc <MX_UART4_Init+0x90>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d8e:	4b13      	ldr	r3, [pc, #76]	@ (8000ddc <MX_UART4_Init+0x90>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000d94:	4811      	ldr	r0, [pc, #68]	@ (8000ddc <MX_UART4_Init+0x90>)
 8000d96:	f004 fec1 	bl	8005b1c <HAL_UART_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000da0:	f000 f90c 	bl	8000fbc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000da4:	2100      	movs	r1, #0
 8000da6:	480d      	ldr	r0, [pc, #52]	@ (8000ddc <MX_UART4_Init+0x90>)
 8000da8:	f006 f955 	bl	8007056 <HAL_UARTEx_SetTxFifoThreshold>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000db2:	f000 f903 	bl	8000fbc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000db6:	2100      	movs	r1, #0
 8000db8:	4808      	ldr	r0, [pc, #32]	@ (8000ddc <MX_UART4_Init+0x90>)
 8000dba:	f006 f98a 	bl	80070d2 <HAL_UARTEx_SetRxFifoThreshold>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000dc4:	f000 f8fa 	bl	8000fbc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000dc8:	4804      	ldr	r0, [pc, #16]	@ (8000ddc <MX_UART4_Init+0x90>)
 8000dca:	f006 f90b 	bl	8006fe4 <HAL_UARTEx_DisableFifoMode>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000dd4:	f000 f8f2 	bl	8000fbc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20000224 	.word	0x20000224
 8000de0:	40004c00 	.word	0x40004c00

08000de4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000de8:	4b22      	ldr	r3, [pc, #136]	@ (8000e74 <MX_UART5_Init+0x90>)
 8000dea:	4a23      	ldr	r2, [pc, #140]	@ (8000e78 <MX_UART5_Init+0x94>)
 8000dec:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000dee:	4b21      	ldr	r3, [pc, #132]	@ (8000e74 <MX_UART5_Init+0x90>)
 8000df0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000df4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000df6:	4b1f      	ldr	r3, [pc, #124]	@ (8000e74 <MX_UART5_Init+0x90>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000dfc:	4b1d      	ldr	r3, [pc, #116]	@ (8000e74 <MX_UART5_Init+0x90>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000e02:	4b1c      	ldr	r3, [pc, #112]	@ (8000e74 <MX_UART5_Init+0x90>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000e08:	4b1a      	ldr	r3, [pc, #104]	@ (8000e74 <MX_UART5_Init+0x90>)
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e0e:	4b19      	ldr	r3, [pc, #100]	@ (8000e74 <MX_UART5_Init+0x90>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e14:	4b17      	ldr	r3, [pc, #92]	@ (8000e74 <MX_UART5_Init+0x90>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e1a:	4b16      	ldr	r3, [pc, #88]	@ (8000e74 <MX_UART5_Init+0x90>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e20:	4b14      	ldr	r3, [pc, #80]	@ (8000e74 <MX_UART5_Init+0x90>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e26:	4b13      	ldr	r3, [pc, #76]	@ (8000e74 <MX_UART5_Init+0x90>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000e2c:	4811      	ldr	r0, [pc, #68]	@ (8000e74 <MX_UART5_Init+0x90>)
 8000e2e:	f004 fe75 	bl	8005b1c <HAL_UART_Init>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8000e38:	f000 f8c0 	bl	8000fbc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	480d      	ldr	r0, [pc, #52]	@ (8000e74 <MX_UART5_Init+0x90>)
 8000e40:	f006 f909 	bl	8007056 <HAL_UARTEx_SetTxFifoThreshold>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8000e4a:	f000 f8b7 	bl	8000fbc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e4e:	2100      	movs	r1, #0
 8000e50:	4808      	ldr	r0, [pc, #32]	@ (8000e74 <MX_UART5_Init+0x90>)
 8000e52:	f006 f93e 	bl	80070d2 <HAL_UARTEx_SetRxFifoThreshold>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8000e5c:	f000 f8ae 	bl	8000fbc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8000e60:	4804      	ldr	r0, [pc, #16]	@ (8000e74 <MX_UART5_Init+0x90>)
 8000e62:	f006 f8bf 	bl	8006fe4 <HAL_UARTEx_DisableFifoMode>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8000e6c:	f000 f8a6 	bl	8000fbc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000e70:	bf00      	nop
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	200002b8 	.word	0x200002b8
 8000e78:	40005000 	.word	0x40005000

08000e7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08c      	sub	sp, #48	@ 0x30
 8000e80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e82:	f107 031c 	add.w	r3, r7, #28
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]
 8000e8c:	609a      	str	r2, [r3, #8]
 8000e8e:	60da      	str	r2, [r3, #12]
 8000e90:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e92:	4b47      	ldr	r3, [pc, #284]	@ (8000fb0 <MX_GPIO_Init+0x134>)
 8000e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e96:	4a46      	ldr	r2, [pc, #280]	@ (8000fb0 <MX_GPIO_Init+0x134>)
 8000e98:	f043 0310 	orr.w	r3, r3, #16
 8000e9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e9e:	4b44      	ldr	r3, [pc, #272]	@ (8000fb0 <MX_GPIO_Init+0x134>)
 8000ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea2:	f003 0310 	and.w	r3, r3, #16
 8000ea6:	61bb      	str	r3, [r7, #24]
 8000ea8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000eaa:	4b41      	ldr	r3, [pc, #260]	@ (8000fb0 <MX_GPIO_Init+0x134>)
 8000eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eae:	4a40      	ldr	r2, [pc, #256]	@ (8000fb0 <MX_GPIO_Init+0x134>)
 8000eb0:	f043 0320 	orr.w	r3, r3, #32
 8000eb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eb6:	4b3e      	ldr	r3, [pc, #248]	@ (8000fb0 <MX_GPIO_Init+0x134>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eba:	f003 0320 	and.w	r3, r3, #32
 8000ebe:	617b      	str	r3, [r7, #20]
 8000ec0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec2:	4b3b      	ldr	r3, [pc, #236]	@ (8000fb0 <MX_GPIO_Init+0x134>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec6:	4a3a      	ldr	r2, [pc, #232]	@ (8000fb0 <MX_GPIO_Init+0x134>)
 8000ec8:	f043 0304 	orr.w	r3, r3, #4
 8000ecc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ece:	4b38      	ldr	r3, [pc, #224]	@ (8000fb0 <MX_GPIO_Init+0x134>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed2:	f003 0304 	and.w	r3, r3, #4
 8000ed6:	613b      	str	r3, [r7, #16]
 8000ed8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eda:	4b35      	ldr	r3, [pc, #212]	@ (8000fb0 <MX_GPIO_Init+0x134>)
 8000edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ede:	4a34      	ldr	r2, [pc, #208]	@ (8000fb0 <MX_GPIO_Init+0x134>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ee6:	4b32      	ldr	r3, [pc, #200]	@ (8000fb0 <MX_GPIO_Init+0x134>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ef2:	4b2f      	ldr	r3, [pc, #188]	@ (8000fb0 <MX_GPIO_Init+0x134>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ef6:	4a2e      	ldr	r2, [pc, #184]	@ (8000fb0 <MX_GPIO_Init+0x134>)
 8000ef8:	f043 0308 	orr.w	r3, r3, #8
 8000efc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000efe:	4b2c      	ldr	r3, [pc, #176]	@ (8000fb0 <MX_GPIO_Init+0x134>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f02:	f003 0308 	and.w	r3, r3, #8
 8000f06:	60bb      	str	r3, [r7, #8]
 8000f08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0a:	4b29      	ldr	r3, [pc, #164]	@ (8000fb0 <MX_GPIO_Init+0x134>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f0e:	4a28      	ldr	r2, [pc, #160]	@ (8000fb0 <MX_GPIO_Init+0x134>)
 8000f10:	f043 0302 	orr.w	r3, r3, #2
 8000f14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f16:	4b26      	ldr	r3, [pc, #152]	@ (8000fb0 <MX_GPIO_Init+0x134>)
 8000f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f1a:	f003 0302 	and.w	r3, r3, #2
 8000f1e:	607b      	str	r3, [r7, #4]
 8000f20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000f22:	2201      	movs	r2, #1
 8000f24:	2108      	movs	r1, #8
 8000f26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f2a:	f001 f8ab 	bl	8002084 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8000f2e:	2201      	movs	r2, #1
 8000f30:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f34:	481f      	ldr	r0, [pc, #124]	@ (8000fb4 <MX_GPIO_Init+0x138>)
 8000f36:	f001 f8a5 	bl	8002084 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000f3a:	23ff      	movs	r3, #255	@ 0xff
 8000f3c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f46:	f107 031c 	add.w	r3, r7, #28
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4819      	ldr	r0, [pc, #100]	@ (8000fb4 <MX_GPIO_Init+0x138>)
 8000f4e:	f000 feff 	bl	8001d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f52:	2308      	movs	r3, #8
 8000f54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f56:	2301      	movs	r3, #1
 8000f58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f62:	f107 031c 	add.w	r3, r7, #28
 8000f66:	4619      	mov	r1, r3
 8000f68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f6c:	f000 fef0 	bl	8001d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f70:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000f74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f76:	2301      	movs	r3, #1
 8000f78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f82:	f107 031c 	add.w	r3, r7, #28
 8000f86:	4619      	mov	r1, r3
 8000f88:	480a      	ldr	r0, [pc, #40]	@ (8000fb4 <MX_GPIO_Init+0x138>)
 8000f8a:	f000 fee1 	bl	8001d50 <HAL_GPIO_Init>

  /*Configure GPIO pins : Limiter_switch_j19_Pin LS2_DRV1_NO_Pin LS1_DRV1_NO_Pin */
  GPIO_InitStruct.Pin = Limiter_switch_j19_Pin|LS2_DRV1_NO_Pin|LS1_DRV1_NO_Pin;
 8000f8e:	f44f 43a2 	mov.w	r3, #20736	@ 0x5100
 8000f92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f94:	2300      	movs	r3, #0
 8000f96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f9c:	f107 031c 	add.w	r3, r7, #28
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4805      	ldr	r0, [pc, #20]	@ (8000fb8 <MX_GPIO_Init+0x13c>)
 8000fa4:	f000 fed4 	bl	8001d50 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fa8:	bf00      	nop
 8000faa:	3730      	adds	r7, #48	@ 0x30
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	48001000 	.word	0x48001000
 8000fb8:	48000c00 	.word	0x48000c00

08000fbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc0:	b672      	cpsid	i
}
 8000fc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fc4:	bf00      	nop
 8000fc6:	e7fd      	b.n	8000fc4 <Error_Handler+0x8>

08000fc8 <Motor_Init>:
extern int8_t TileON;

#define MOTOR_SPEED_TILE_ON 250
#define MOTOR_SPEED_TILE_OFF 180

void Motor_Init(void) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000fcc:	2108      	movs	r1, #8
 8000fce:	4806      	ldr	r0, [pc, #24]	@ (8000fe8 <Motor_Init+0x20>)
 8000fd0:	f003 f9a2 	bl	8004318 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000fd4:	210c      	movs	r1, #12
 8000fd6:	4804      	ldr	r0, [pc, #16]	@ (8000fe8 <Motor_Init+0x20>)
 8000fd8:	f003 f99e 	bl	8004318 <HAL_TIM_PWM_Start>
	  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000fdc:	213c      	movs	r1, #60	@ 0x3c
 8000fde:	4803      	ldr	r0, [pc, #12]	@ (8000fec <Motor_Init+0x24>)
 8000fe0:	f003 fb52 	bl	8004688 <HAL_TIM_Encoder_Start>
    // Initialize motor control here (if any initialization is needed)
}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000140 	.word	0x20000140
 8000fec:	200001d8 	.word	0x200001d8

08000ff0 <Motor_Steer>:

void Motor_Steer(int8_t target)
{	SlotSensor_Init();
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	71fb      	strb	r3, [r7, #7]
 8000ffa:	f000 f90d 	bl	8001218 <SlotSensor_Init>
	Motor_Init();
 8000ffe:	f7ff ffe3 	bl	8000fc8 <Motor_Init>
	int8_t count = 0 ;
 8001002:	2300      	movs	r3, #0
 8001004:	73fb      	strb	r3, [r7, #15]
	int16_t Motorspeed;

	if(TileON)
 8001006:	4b49      	ldr	r3, [pc, #292]	@ (800112c <Motor_Steer+0x13c>)
 8001008:	f993 3000 	ldrsb.w	r3, [r3]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d044      	beq.n	800109a <Motor_Steer+0xaa>
	{

		Motorspeed = MOTOR_SPEED_TILE_ON - 1 ;
 8001010:	23f9      	movs	r3, #249	@ 0xf9
 8001012:	81bb      	strh	r3, [r7, #12]
		if(target > 0)
 8001014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001018:	2b00      	cmp	r3, #0
 800101a:	dd1c      	ble.n	8001056 <Motor_Steer+0x66>
		{

			while(count < target)
 800101c:	e00c      	b.n	8001038 <Motor_Steer+0x48>
			{	  count = SlotSensor_Update();
 800101e:	f000 f911 	bl	8001244 <SlotSensor_Update>
 8001022:	4603      	mov	r3, r0
 8001024:	73fb      	strb	r3, [r7, #15]
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, Motorspeed);
 8001026:	4b42      	ldr	r3, [pc, #264]	@ (8001130 <Motor_Steer+0x140>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800102e:	63da      	str	r2, [r3, #60]	@ 0x3c
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001030:	4b3f      	ldr	r3, [pc, #252]	@ (8001130 <Motor_Steer+0x140>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2200      	movs	r2, #0
 8001036:	641a      	str	r2, [r3, #64]	@ 0x40
			while(count < target)
 8001038:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800103c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001040:	429a      	cmp	r2, r3
 8001042:	dbec      	blt.n	800101e <Motor_Steer+0x2e>
			}
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001044:	4b3a      	ldr	r3, [pc, #232]	@ (8001130 <Motor_Steer+0x140>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2200      	movs	r2, #0
 800104a:	63da      	str	r2, [r3, #60]	@ 0x3c
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 800104c:	4b38      	ldr	r3, [pc, #224]	@ (8001130 <Motor_Steer+0x140>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2200      	movs	r2, #0
 8001052:	641a      	str	r2, [r3, #64]	@ 0x40
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
		}

	}

}
 8001054:	e065      	b.n	8001122 <Motor_Steer+0x132>
		else if(target< 0)
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	2b00      	cmp	r3, #0
 800105c:	da61      	bge.n	8001122 <Motor_Steer+0x132>
			while(count < -target)
 800105e:	e00c      	b.n	800107a <Motor_Steer+0x8a>
					{	  count = SlotSensor_Update();
 8001060:	f000 f8f0 	bl	8001244 <SlotSensor_Update>
 8001064:	4603      	mov	r3, r0
 8001066:	73fb      	strb	r3, [r7, #15]
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001068:	4b31      	ldr	r3, [pc, #196]	@ (8001130 <Motor_Steer+0x140>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2200      	movs	r2, #0
 800106e:	63da      	str	r2, [r3, #60]	@ 0x3c
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, Motorspeed);
 8001070:	4b2f      	ldr	r3, [pc, #188]	@ (8001130 <Motor_Steer+0x140>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001078:	641a      	str	r2, [r3, #64]	@ 0x40
			while(count < -target)
 800107a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800107e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001082:	425b      	negs	r3, r3
 8001084:	429a      	cmp	r2, r3
 8001086:	dbeb      	blt.n	8001060 <Motor_Steer+0x70>
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001088:	4b29      	ldr	r3, [pc, #164]	@ (8001130 <Motor_Steer+0x140>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2200      	movs	r2, #0
 800108e:	63da      	str	r2, [r3, #60]	@ 0x3c
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001090:	4b27      	ldr	r3, [pc, #156]	@ (8001130 <Motor_Steer+0x140>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2200      	movs	r2, #0
 8001096:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001098:	e043      	b.n	8001122 <Motor_Steer+0x132>
		Motorspeed = MOTOR_SPEED_TILE_OFF -1 ;
 800109a:	23b3      	movs	r3, #179	@ 0xb3
 800109c:	81bb      	strh	r3, [r7, #12]
		if(target > 0)
 800109e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	dd1c      	ble.n	80010e0 <Motor_Steer+0xf0>
					while(count < target)
 80010a6:	e00c      	b.n	80010c2 <Motor_Steer+0xd2>
						count = SlotSensor_Update();
 80010a8:	f000 f8cc 	bl	8001244 <SlotSensor_Update>
 80010ac:	4603      	mov	r3, r0
 80010ae:	73fb      	strb	r3, [r7, #15]
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, Motorspeed);
 80010b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001130 <Motor_Steer+0x140>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80010b8:	63da      	str	r2, [r3, #60]	@ 0x3c
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 80010ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001130 <Motor_Steer+0x140>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2200      	movs	r2, #0
 80010c0:	641a      	str	r2, [r3, #64]	@ 0x40
					while(count < target)
 80010c2:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	dbec      	blt.n	80010a8 <Motor_Steer+0xb8>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80010ce:	4b18      	ldr	r3, [pc, #96]	@ (8001130 <Motor_Steer+0x140>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	2200      	movs	r2, #0
 80010d4:	63da      	str	r2, [r3, #60]	@ 0x3c
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 80010d6:	4b16      	ldr	r3, [pc, #88]	@ (8001130 <Motor_Steer+0x140>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2200      	movs	r2, #0
 80010dc:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80010de:	e020      	b.n	8001122 <Motor_Steer+0x132>
		else if(target< 0)
 80010e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	da1c      	bge.n	8001122 <Motor_Steer+0x132>
			while(count < -target)
 80010e8:	e00c      	b.n	8001104 <Motor_Steer+0x114>
				count = SlotSensor_Update();
 80010ea:	f000 f8ab 	bl	8001244 <SlotSensor_Update>
 80010ee:	4603      	mov	r3, r0
 80010f0:	73fb      	strb	r3, [r7, #15]
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80010f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001130 <Motor_Steer+0x140>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2200      	movs	r2, #0
 80010f8:	63da      	str	r2, [r3, #60]	@ 0x3c
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, Motorspeed);
 80010fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001130 <Motor_Steer+0x140>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001102:	641a      	str	r2, [r3, #64]	@ 0x40
			while(count < -target)
 8001104:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110c:	425b      	negs	r3, r3
 800110e:	429a      	cmp	r2, r3
 8001110:	dbeb      	blt.n	80010ea <Motor_Steer+0xfa>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001112:	4b07      	ldr	r3, [pc, #28]	@ (8001130 <Motor_Steer+0x140>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2200      	movs	r2, #0
 8001118:	63da      	str	r2, [r3, #60]	@ 0x3c
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 800111a:	4b05      	ldr	r3, [pc, #20]	@ (8001130 <Motor_Steer+0x140>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2200      	movs	r2, #0
 8001120:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001122:	bf00      	nop
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	200000b9 	.word	0x200000b9
 8001130:	20000140 	.word	0x20000140

08001134 <ABSRotateHead>:
	Motor_Steer(target_position);


}
int8_t ABSRotateHead(int8_t target_position)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	71fb      	strb	r3, [r7, #7]

	int8_t absolute_target_position = target_position*5 - posABS;
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	461a      	mov	r2, r3
 8001142:	0092      	lsls	r2, r2, #2
 8001144:	4413      	add	r3, r2
 8001146:	b2da      	uxtb	r2, r3
 8001148:	4b14      	ldr	r3, [pc, #80]	@ (800119c <ABSRotateHead+0x68>)
 800114a:	f993 3000 	ldrsb.w	r3, [r3]
 800114e:	b2db      	uxtb	r3, r3
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	b2db      	uxtb	r3, r3
 8001154:	73fb      	strb	r3, [r7, #15]

	Motor_Steer(absolute_target_position);
 8001156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff ff48 	bl	8000ff0 <Motor_Steer>
	if(target_position*5 != posABS){posABS = target_position*5;}
 8001160:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001164:	4613      	mov	r3, r2
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	4413      	add	r3, r2
 800116a:	4a0c      	ldr	r2, [pc, #48]	@ (800119c <ABSRotateHead+0x68>)
 800116c:	f992 2000 	ldrsb.w	r2, [r2]
 8001170:	4293      	cmp	r3, r2
 8001172:	d008      	beq.n	8001186 <ABSRotateHead+0x52>
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	461a      	mov	r2, r3
 8001178:	0092      	lsls	r2, r2, #2
 800117a:	4413      	add	r3, r2
 800117c:	b2db      	uxtb	r3, r3
 800117e:	b25a      	sxtb	r2, r3
 8001180:	4b06      	ldr	r3, [pc, #24]	@ (800119c <ABSRotateHead+0x68>)
 8001182:	701a      	strb	r2, [r3, #0]
 8001184:	e004      	b.n	8001190 <ABSRotateHead+0x5c>
	else{HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);}
 8001186:	2200      	movs	r2, #0
 8001188:	2110      	movs	r1, #16
 800118a:	4805      	ldr	r0, [pc, #20]	@ (80011a0 <ABSRotateHead+0x6c>)
 800118c:	f000 ff7a 	bl	8002084 <HAL_GPIO_WritePin>
return 1;
 8001190:	2301      	movs	r3, #1


}
 8001192:	4618      	mov	r0, r3
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	200000b8 	.word	0x200000b8
 80011a0:	48000400 	.word	0x48000400

080011a4 <HeadBase>:
void HeadBase(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0

	int16_t BaseSpeed = 150;
 80011aa:	2396      	movs	r3, #150	@ 0x96
 80011ac:	80bb      	strh	r3, [r7, #4]
	Motor_Init();
 80011ae:	f7ff ff0b 	bl	8000fc8 <Motor_Init>
	uint8_t pinstate1;
	pinstate1 = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8);
 80011b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011b6:	4816      	ldr	r0, [pc, #88]	@ (8001210 <HeadBase+0x6c>)
 80011b8:	f000 ff4c 	bl	8002054 <HAL_GPIO_ReadPin>
 80011bc:	4603      	mov	r3, r0
 80011be:	71fb      	strb	r3, [r7, #7]

	while(pinstate1)
 80011c0:	e010      	b.n	80011e4 <HeadBase+0x40>
	{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80011c2:	4b14      	ldr	r3, [pc, #80]	@ (8001214 <HeadBase+0x70>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2200      	movs	r2, #0
 80011c8:	63da      	str	r2, [r3, #60]	@ 0x3c
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, BaseSpeed-1);
 80011ca:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80011ce:	1e5a      	subs	r2, r3, #1
 80011d0:	4b10      	ldr	r3, [pc, #64]	@ (8001214 <HeadBase+0x70>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	641a      	str	r2, [r3, #64]	@ 0x40

		pinstate1 = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8);
 80011d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011da:	480d      	ldr	r0, [pc, #52]	@ (8001210 <HeadBase+0x6c>)
 80011dc:	f000 ff3a 	bl	8002054 <HAL_GPIO_ReadPin>
 80011e0:	4603      	mov	r3, r0
 80011e2:	71fb      	strb	r3, [r7, #7]
	while(pinstate1)
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d1eb      	bne.n	80011c2 <HeadBase+0x1e>

	}

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80011ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001214 <HeadBase+0x70>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2200      	movs	r2, #0
 80011f0:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 80011f2:	4b08      	ldr	r3, [pc, #32]	@ (8001214 <HeadBase+0x70>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2200      	movs	r2, #0
 80011f8:	641a      	str	r2, [r3, #64]	@ 0x40
	HAL_Delay(2000);
 80011fa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80011fe:	f000 fbb5 	bl	800196c <HAL_Delay>
	Motor_Steer(3);
 8001202:	2003      	movs	r0, #3
 8001204:	f7ff fef4 	bl	8000ff0 <Motor_Steer>

}
 8001208:	bf00      	nop
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	48000c00 	.word	0x48000c00
 8001214:	20000140 	.word	0x20000140

08001218 <SlotSensor_Init>:

// Counter for slot sensor
static GPIO_PinState last_state = GPIO_PIN_RESET; // Last state of the sensor
int8_t counter = 0;

void SlotSensor_Init(void) {
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
	counter = 0;
 800121c:	4b06      	ldr	r3, [pc, #24]	@ (8001238 <SlotSensor_Init+0x20>)
 800121e:	2200      	movs	r2, #0
 8001220:	701a      	strb	r2, [r3, #0]
    // Initialize the last state
    last_state = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7);
 8001222:	2180      	movs	r1, #128	@ 0x80
 8001224:	4805      	ldr	r0, [pc, #20]	@ (800123c <SlotSensor_Init+0x24>)
 8001226:	f000 ff15 	bl	8002054 <HAL_GPIO_ReadPin>
 800122a:	4603      	mov	r3, r0
 800122c:	461a      	mov	r2, r3
 800122e:	4b04      	ldr	r3, [pc, #16]	@ (8001240 <SlotSensor_Init+0x28>)
 8001230:	701a      	strb	r2, [r3, #0]
}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	2000034d 	.word	0x2000034d
 800123c:	48001000 	.word	0x48001000
 8001240:	2000034c 	.word	0x2000034c

08001244 <SlotSensor_Update>:

int SlotSensor_Update(void) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
    GPIO_PinState current_state = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7); // Read pin state
 800124a:	2180      	movs	r1, #128	@ 0x80
 800124c:	480f      	ldr	r0, [pc, #60]	@ (800128c <SlotSensor_Update+0x48>)
 800124e:	f000 ff01 	bl	8002054 <HAL_GPIO_ReadPin>
 8001252:	4603      	mov	r3, r0
 8001254:	71fb      	strb	r3, [r7, #7]

    // Check for a change in state
    if (current_state == GPIO_PIN_SET && last_state == GPIO_PIN_RESET) {
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d10c      	bne.n	8001276 <SlotSensor_Update+0x32>
 800125c:	4b0c      	ldr	r3, [pc, #48]	@ (8001290 <SlotSensor_Update+0x4c>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d108      	bne.n	8001276 <SlotSensor_Update+0x32>
        counter++; // Increment counter on state change
 8001264:	4b0b      	ldr	r3, [pc, #44]	@ (8001294 <SlotSensor_Update+0x50>)
 8001266:	f993 3000 	ldrsb.w	r3, [r3]
 800126a:	b2db      	uxtb	r3, r3
 800126c:	3301      	adds	r3, #1
 800126e:	b2db      	uxtb	r3, r3
 8001270:	b25a      	sxtb	r2, r3
 8001272:	4b08      	ldr	r3, [pc, #32]	@ (8001294 <SlotSensor_Update+0x50>)
 8001274:	701a      	strb	r2, [r3, #0]
         // Update last state
    }
    last_state = current_state;
 8001276:	4a06      	ldr	r2, [pc, #24]	@ (8001290 <SlotSensor_Update+0x4c>)
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	7013      	strb	r3, [r2, #0]
    return counter ;
 800127c:	4b05      	ldr	r3, [pc, #20]	@ (8001294 <SlotSensor_Update+0x50>)
 800127e:	f993 3000 	ldrsb.w	r3, [r3]
}
 8001282:	4618      	mov	r0, r3
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	48001000 	.word	0x48001000
 8001290:	2000034c 	.word	0x2000034c
 8001294:	2000034d 	.word	0x2000034d

08001298 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129e:	4b0f      	ldr	r3, [pc, #60]	@ (80012dc <HAL_MspInit+0x44>)
 80012a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012a2:	4a0e      	ldr	r2, [pc, #56]	@ (80012dc <HAL_MspInit+0x44>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80012aa:	4b0c      	ldr	r3, [pc, #48]	@ (80012dc <HAL_MspInit+0x44>)
 80012ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b6:	4b09      	ldr	r3, [pc, #36]	@ (80012dc <HAL_MspInit+0x44>)
 80012b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ba:	4a08      	ldr	r2, [pc, #32]	@ (80012dc <HAL_MspInit+0x44>)
 80012bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80012c2:	4b06      	ldr	r3, [pc, #24]	@ (80012dc <HAL_MspInit+0x44>)
 80012c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ca:	603b      	str	r3, [r7, #0]
 80012cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80012ce:	f000 ff95 	bl	80021fc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40021000 	.word	0x40021000

080012e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08a      	sub	sp, #40	@ 0x28
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a2a      	ldr	r2, [pc, #168]	@ (80013a8 <HAL_SPI_MspInit+0xc8>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d14d      	bne.n	800139e <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001302:	4b2a      	ldr	r3, [pc, #168]	@ (80013ac <HAL_SPI_MspInit+0xcc>)
 8001304:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001306:	4a29      	ldr	r2, [pc, #164]	@ (80013ac <HAL_SPI_MspInit+0xcc>)
 8001308:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800130c:	6613      	str	r3, [r2, #96]	@ 0x60
 800130e:	4b27      	ldr	r3, [pc, #156]	@ (80013ac <HAL_SPI_MspInit+0xcc>)
 8001310:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001312:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001316:	613b      	str	r3, [r7, #16]
 8001318:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131a:	4b24      	ldr	r3, [pc, #144]	@ (80013ac <HAL_SPI_MspInit+0xcc>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131e:	4a23      	ldr	r2, [pc, #140]	@ (80013ac <HAL_SPI_MspInit+0xcc>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001326:	4b21      	ldr	r3, [pc, #132]	@ (80013ac <HAL_SPI_MspInit+0xcc>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001332:	4b1e      	ldr	r3, [pc, #120]	@ (80013ac <HAL_SPI_MspInit+0xcc>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001336:	4a1d      	ldr	r2, [pc, #116]	@ (80013ac <HAL_SPI_MspInit+0xcc>)
 8001338:	f043 0302 	orr.w	r3, r3, #2
 800133c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800133e:	4b1b      	ldr	r3, [pc, #108]	@ (80013ac <HAL_SPI_MspInit+0xcc>)
 8001340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	60bb      	str	r3, [r7, #8]
 8001348:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800134a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800134e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001350:	2302      	movs	r3, #2
 8001352:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001358:	2303      	movs	r3, #3
 800135a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800135c:	2305      	movs	r3, #5
 800135e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001360:	f107 0314 	add.w	r3, r7, #20
 8001364:	4619      	mov	r1, r3
 8001366:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800136a:	f000 fcf1 	bl	8001d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800136e:	2338      	movs	r3, #56	@ 0x38
 8001370:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001372:	2302      	movs	r3, #2
 8001374:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137a:	2303      	movs	r3, #3
 800137c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800137e:	2305      	movs	r3, #5
 8001380:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001382:	f107 0314 	add.w	r3, r7, #20
 8001386:	4619      	mov	r1, r3
 8001388:	4809      	ldr	r0, [pc, #36]	@ (80013b0 <HAL_SPI_MspInit+0xd0>)
 800138a:	f000 fce1 	bl	8001d50 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800138e:	2200      	movs	r2, #0
 8001390:	2100      	movs	r1, #0
 8001392:	2023      	movs	r0, #35	@ 0x23
 8001394:	f000 fbe7 	bl	8001b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001398:	2023      	movs	r0, #35	@ 0x23
 800139a:	f000 fbfe 	bl	8001b9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800139e:	bf00      	nop
 80013a0:	3728      	adds	r7, #40	@ 0x28
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40013000 	.word	0x40013000
 80013ac:	40021000 	.word	0x40021000
 80013b0:	48000400 	.word	0x48000400

080013b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a0a      	ldr	r2, [pc, #40]	@ (80013ec <HAL_TIM_Base_MspInit+0x38>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d10b      	bne.n	80013de <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013c6:	4b0a      	ldr	r3, [pc, #40]	@ (80013f0 <HAL_TIM_Base_MspInit+0x3c>)
 80013c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013ca:	4a09      	ldr	r2, [pc, #36]	@ (80013f0 <HAL_TIM_Base_MspInit+0x3c>)
 80013cc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80013d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80013d2:	4b07      	ldr	r3, [pc, #28]	@ (80013f0 <HAL_TIM_Base_MspInit+0x3c>)
 80013d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80013de:	bf00      	nop
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	40012c00 	.word	0x40012c00
 80013f0:	40021000 	.word	0x40021000

080013f4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08c      	sub	sp, #48	@ 0x30
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fc:	f107 031c 	add.w	r3, r7, #28
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a33      	ldr	r2, [pc, #204]	@ (80014e0 <HAL_TIM_Encoder_MspInit+0xec>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d128      	bne.n	8001468 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001416:	4b33      	ldr	r3, [pc, #204]	@ (80014e4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800141a:	4a32      	ldr	r2, [pc, #200]	@ (80014e4 <HAL_TIM_Encoder_MspInit+0xf0>)
 800141c:	f043 0302 	orr.w	r3, r3, #2
 8001420:	6593      	str	r3, [r2, #88]	@ 0x58
 8001422:	4b30      	ldr	r3, [pc, #192]	@ (80014e4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	61bb      	str	r3, [r7, #24]
 800142c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800142e:	4b2d      	ldr	r3, [pc, #180]	@ (80014e4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001432:	4a2c      	ldr	r2, [pc, #176]	@ (80014e4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001434:	f043 0304 	orr.w	r3, r3, #4
 8001438:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800143a:	4b2a      	ldr	r3, [pc, #168]	@ (80014e4 <HAL_TIM_Encoder_MspInit+0xf0>)
 800143c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800143e:	f003 0304 	and.w	r3, r3, #4
 8001442:	617b      	str	r3, [r7, #20]
 8001444:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Motor_B_EN_CH1_Pin|Motor_B_EN_CH2_Pin;
 8001446:	23c0      	movs	r3, #192	@ 0xc0
 8001448:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144a:	2302      	movs	r3, #2
 800144c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001452:	2300      	movs	r3, #0
 8001454:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001456:	2302      	movs	r3, #2
 8001458:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800145a:	f107 031c 	add.w	r3, r7, #28
 800145e:	4619      	mov	r1, r3
 8001460:	4821      	ldr	r0, [pc, #132]	@ (80014e8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001462:	f000 fc75 	bl	8001d50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001466:	e036      	b.n	80014d6 <HAL_TIM_Encoder_MspInit+0xe2>
  else if(htim_encoder->Instance==TIM4)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a1f      	ldr	r2, [pc, #124]	@ (80014ec <HAL_TIM_Encoder_MspInit+0xf8>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d131      	bne.n	80014d6 <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001472:	4b1c      	ldr	r3, [pc, #112]	@ (80014e4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001476:	4a1b      	ldr	r2, [pc, #108]	@ (80014e4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001478:	f043 0304 	orr.w	r3, r3, #4
 800147c:	6593      	str	r3, [r2, #88]	@ 0x58
 800147e:	4b19      	ldr	r3, [pc, #100]	@ (80014e4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001482:	f003 0304 	and.w	r3, r3, #4
 8001486:	613b      	str	r3, [r7, #16]
 8001488:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800148a:	4b16      	ldr	r3, [pc, #88]	@ (80014e4 <HAL_TIM_Encoder_MspInit+0xf0>)
 800148c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800148e:	4a15      	ldr	r2, [pc, #84]	@ (80014e4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001496:	4b13      	ldr	r3, [pc, #76]	@ (80014e4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Motor_A_EN_CH2_Pin|Motor_A_EN_CH1_Pin;
 80014a2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80014a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a8:	2302      	movs	r3, #2
 80014aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b0:	2300      	movs	r3, #0
 80014b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80014b4:	230a      	movs	r3, #10
 80014b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b8:	f107 031c 	add.w	r3, r7, #28
 80014bc:	4619      	mov	r1, r3
 80014be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014c2:	f000 fc45 	bl	8001d50 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2100      	movs	r1, #0
 80014ca:	201e      	movs	r0, #30
 80014cc:	f000 fb4b 	bl	8001b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80014d0:	201e      	movs	r0, #30
 80014d2:	f000 fb62 	bl	8001b9a <HAL_NVIC_EnableIRQ>
}
 80014d6:	bf00      	nop
 80014d8:	3730      	adds	r7, #48	@ 0x30
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40000400 	.word	0x40000400
 80014e4:	40021000 	.word	0x40021000
 80014e8:	48000800 	.word	0x48000800
 80014ec:	40000800 	.word	0x40000800

080014f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b088      	sub	sp, #32
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	f107 030c 	add.w	r3, r7, #12
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a11      	ldr	r2, [pc, #68]	@ (8001554 <HAL_TIM_MspPostInit+0x64>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d11b      	bne.n	800154a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001512:	4b11      	ldr	r3, [pc, #68]	@ (8001558 <HAL_TIM_MspPostInit+0x68>)
 8001514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001516:	4a10      	ldr	r2, [pc, #64]	@ (8001558 <HAL_TIM_MspPostInit+0x68>)
 8001518:	f043 0304 	orr.w	r3, r3, #4
 800151c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800151e:	4b0e      	ldr	r3, [pc, #56]	@ (8001558 <HAL_TIM_MspPostInit+0x68>)
 8001520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001522:	f003 0304 	and.w	r3, r3, #4
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Motor_A_CH1_Pin|Motor_A_CH2_Pin|Motor_B_CH3_Pin|Motor_A_CH4_Pin;
 800152a:	230f      	movs	r3, #15
 800152c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152e:	2302      	movs	r3, #2
 8001530:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001536:	2300      	movs	r3, #0
 8001538:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800153a:	2302      	movs	r3, #2
 800153c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800153e:	f107 030c 	add.w	r3, r7, #12
 8001542:	4619      	mov	r1, r3
 8001544:	4805      	ldr	r0, [pc, #20]	@ (800155c <HAL_TIM_MspPostInit+0x6c>)
 8001546:	f000 fc03 	bl	8001d50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800154a:	bf00      	nop
 800154c:	3720      	adds	r7, #32
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40012c00 	.word	0x40012c00
 8001558:	40021000 	.word	0x40021000
 800155c:	48000800 	.word	0x48000800

08001560 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b0a2      	sub	sp, #136	@ 0x88
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001578:	f107 0320 	add.w	r3, r7, #32
 800157c:	2254      	movs	r2, #84	@ 0x54
 800157e:	2100      	movs	r1, #0
 8001580:	4618      	mov	r0, r3
 8001582:	f005 ff1d 	bl	80073c0 <memset>
  if(huart->Instance==UART4)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a56      	ldr	r2, [pc, #344]	@ (80016e4 <HAL_UART_MspInit+0x184>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d141      	bne.n	8001614 <HAL_UART_MspInit+0xb4>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001590:	2308      	movs	r3, #8
 8001592:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001594:	2300      	movs	r3, #0
 8001596:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001598:	f107 0320 	add.w	r3, r7, #32
 800159c:	4618      	mov	r0, r3
 800159e:	f001 fb6b 	bl	8002c78 <HAL_RCCEx_PeriphCLKConfig>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80015a8:	f7ff fd08 	bl	8000fbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80015ac:	4b4e      	ldr	r3, [pc, #312]	@ (80016e8 <HAL_UART_MspInit+0x188>)
 80015ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015b0:	4a4d      	ldr	r2, [pc, #308]	@ (80016e8 <HAL_UART_MspInit+0x188>)
 80015b2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80015b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80015b8:	4b4b      	ldr	r3, [pc, #300]	@ (80016e8 <HAL_UART_MspInit+0x188>)
 80015ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80015c0:	61fb      	str	r3, [r7, #28]
 80015c2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c4:	4b48      	ldr	r3, [pc, #288]	@ (80016e8 <HAL_UART_MspInit+0x188>)
 80015c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c8:	4a47      	ldr	r2, [pc, #284]	@ (80016e8 <HAL_UART_MspInit+0x188>)
 80015ca:	f043 0304 	orr.w	r3, r3, #4
 80015ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015d0:	4b45      	ldr	r3, [pc, #276]	@ (80016e8 <HAL_UART_MspInit+0x188>)
 80015d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015d4:	f003 0304 	and.w	r3, r3, #4
 80015d8:	61bb      	str	r3, [r7, #24]
 80015da:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80015dc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80015e0:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e2:	2302      	movs	r3, #2
 80015e4:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ea:	2300      	movs	r3, #0
 80015ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 80015f0:	2305      	movs	r3, #5
 80015f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f6:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80015fa:	4619      	mov	r1, r3
 80015fc:	483b      	ldr	r0, [pc, #236]	@ (80016ec <HAL_UART_MspInit+0x18c>)
 80015fe:	f000 fba7 	bl	8001d50 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001602:	2200      	movs	r2, #0
 8001604:	2100      	movs	r1, #0
 8001606:	2034      	movs	r0, #52	@ 0x34
 8001608:	f000 faad 	bl	8001b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800160c:	2034      	movs	r0, #52	@ 0x34
 800160e:	f000 fac4 	bl	8001b9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8001612:	e063      	b.n	80016dc <HAL_UART_MspInit+0x17c>
  else if(huart->Instance==UART5)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a35      	ldr	r2, [pc, #212]	@ (80016f0 <HAL_UART_MspInit+0x190>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d15e      	bne.n	80016dc <HAL_UART_MspInit+0x17c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800161e:	2310      	movs	r3, #16
 8001620:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001622:	2300      	movs	r3, #0
 8001624:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001626:	f107 0320 	add.w	r3, r7, #32
 800162a:	4618      	mov	r0, r3
 800162c:	f001 fb24 	bl	8002c78 <HAL_RCCEx_PeriphCLKConfig>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <HAL_UART_MspInit+0xda>
      Error_Handler();
 8001636:	f7ff fcc1 	bl	8000fbc <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 800163a:	4b2b      	ldr	r3, [pc, #172]	@ (80016e8 <HAL_UART_MspInit+0x188>)
 800163c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800163e:	4a2a      	ldr	r2, [pc, #168]	@ (80016e8 <HAL_UART_MspInit+0x188>)
 8001640:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001644:	6593      	str	r3, [r2, #88]	@ 0x58
 8001646:	4b28      	ldr	r3, [pc, #160]	@ (80016e8 <HAL_UART_MspInit+0x188>)
 8001648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800164a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800164e:	617b      	str	r3, [r7, #20]
 8001650:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001652:	4b25      	ldr	r3, [pc, #148]	@ (80016e8 <HAL_UART_MspInit+0x188>)
 8001654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001656:	4a24      	ldr	r2, [pc, #144]	@ (80016e8 <HAL_UART_MspInit+0x188>)
 8001658:	f043 0304 	orr.w	r3, r3, #4
 800165c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800165e:	4b22      	ldr	r3, [pc, #136]	@ (80016e8 <HAL_UART_MspInit+0x188>)
 8001660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001662:	f003 0304 	and.w	r3, r3, #4
 8001666:	613b      	str	r3, [r7, #16]
 8001668:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800166a:	4b1f      	ldr	r3, [pc, #124]	@ (80016e8 <HAL_UART_MspInit+0x188>)
 800166c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800166e:	4a1e      	ldr	r2, [pc, #120]	@ (80016e8 <HAL_UART_MspInit+0x188>)
 8001670:	f043 0308 	orr.w	r3, r3, #8
 8001674:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001676:	4b1c      	ldr	r3, [pc, #112]	@ (80016e8 <HAL_UART_MspInit+0x188>)
 8001678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800167a:	f003 0308 	and.w	r3, r3, #8
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001682:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001686:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001688:	2302      	movs	r3, #2
 800168a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001690:	2300      	movs	r3, #0
 8001692:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8001696:	2305      	movs	r3, #5
 8001698:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800169c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80016a0:	4619      	mov	r1, r3
 80016a2:	4812      	ldr	r0, [pc, #72]	@ (80016ec <HAL_UART_MspInit+0x18c>)
 80016a4:	f000 fb54 	bl	8001d50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016a8:	2304      	movs	r3, #4
 80016aa:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ac:	2302      	movs	r3, #2
 80016ae:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b4:	2300      	movs	r3, #0
 80016b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80016ba:	2305      	movs	r3, #5
 80016bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016c0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80016c4:	4619      	mov	r1, r3
 80016c6:	480b      	ldr	r0, [pc, #44]	@ (80016f4 <HAL_UART_MspInit+0x194>)
 80016c8:	f000 fb42 	bl	8001d50 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80016cc:	2200      	movs	r2, #0
 80016ce:	2100      	movs	r1, #0
 80016d0:	2035      	movs	r0, #53	@ 0x35
 80016d2:	f000 fa48 	bl	8001b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80016d6:	2035      	movs	r0, #53	@ 0x35
 80016d8:	f000 fa5f 	bl	8001b9a <HAL_NVIC_EnableIRQ>
}
 80016dc:	bf00      	nop
 80016de:	3788      	adds	r7, #136	@ 0x88
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40004c00 	.word	0x40004c00
 80016e8:	40021000 	.word	0x40021000
 80016ec:	48000800 	.word	0x48000800
 80016f0:	40005000 	.word	0x40005000
 80016f4:	48000c00 	.word	0x48000c00

080016f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016fc:	bf00      	nop
 80016fe:	e7fd      	b.n	80016fc <NMI_Handler+0x4>

08001700 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001704:	bf00      	nop
 8001706:	e7fd      	b.n	8001704 <HardFault_Handler+0x4>

08001708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800170c:	bf00      	nop
 800170e:	e7fd      	b.n	800170c <MemManage_Handler+0x4>

08001710 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001714:	bf00      	nop
 8001716:	e7fd      	b.n	8001714 <BusFault_Handler+0x4>

08001718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800171c:	bf00      	nop
 800171e:	e7fd      	b.n	800171c <UsageFault_Handler+0x4>

08001720 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800174e:	f000 f8ef 	bl	8001930 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
	...

08001758 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800175c:	4802      	ldr	r0, [pc, #8]	@ (8001768 <TIM4_IRQHandler+0x10>)
 800175e:	f003 f821 	bl	80047a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	200001d8 	.word	0x200001d8

0800176c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001770:	4802      	ldr	r0, [pc, #8]	@ (800177c <SPI1_IRQHandler+0x10>)
 8001772:	f002 fa49 	bl	8003c08 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	200000dc 	.word	0x200000dc

08001780 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001784:	4802      	ldr	r0, [pc, #8]	@ (8001790 <UART4_IRQHandler+0x10>)
 8001786:	f004 fb6f 	bl	8005e68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000224 	.word	0x20000224

08001794 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt / UART5 wake-up interrupt through EXTI line 35.
  */
void UART5_IRQHandler(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001798:	4802      	ldr	r0, [pc, #8]	@ (80017a4 <UART5_IRQHandler+0x10>)
 800179a:	f004 fb65 	bl	8005e68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	200002b8 	.word	0x200002b8

080017a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017b0:	4a14      	ldr	r2, [pc, #80]	@ (8001804 <_sbrk+0x5c>)
 80017b2:	4b15      	ldr	r3, [pc, #84]	@ (8001808 <_sbrk+0x60>)
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017bc:	4b13      	ldr	r3, [pc, #76]	@ (800180c <_sbrk+0x64>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d102      	bne.n	80017ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017c4:	4b11      	ldr	r3, [pc, #68]	@ (800180c <_sbrk+0x64>)
 80017c6:	4a12      	ldr	r2, [pc, #72]	@ (8001810 <_sbrk+0x68>)
 80017c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ca:	4b10      	ldr	r3, [pc, #64]	@ (800180c <_sbrk+0x64>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4413      	add	r3, r2
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d207      	bcs.n	80017e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017d8:	f005 fe1e 	bl	8007418 <__errno>
 80017dc:	4603      	mov	r3, r0
 80017de:	220c      	movs	r2, #12
 80017e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017e2:	f04f 33ff 	mov.w	r3, #4294967295
 80017e6:	e009      	b.n	80017fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017e8:	4b08      	ldr	r3, [pc, #32]	@ (800180c <_sbrk+0x64>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ee:	4b07      	ldr	r3, [pc, #28]	@ (800180c <_sbrk+0x64>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4413      	add	r3, r2
 80017f6:	4a05      	ldr	r2, [pc, #20]	@ (800180c <_sbrk+0x64>)
 80017f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017fa:	68fb      	ldr	r3, [r7, #12]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3718      	adds	r7, #24
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	20020000 	.word	0x20020000
 8001808:	00000400 	.word	0x00000400
 800180c:	20000350 	.word	0x20000350
 8001810:	200004a0 	.word	0x200004a0

08001814 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001818:	4b06      	ldr	r3, [pc, #24]	@ (8001834 <SystemInit+0x20>)
 800181a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800181e:	4a05      	ldr	r2, [pc, #20]	@ (8001834 <SystemInit+0x20>)
 8001820:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001824:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001838:	480d      	ldr	r0, [pc, #52]	@ (8001870 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800183a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800183c:	f7ff ffea 	bl	8001814 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001840:	480c      	ldr	r0, [pc, #48]	@ (8001874 <LoopForever+0x6>)
  ldr r1, =_edata
 8001842:	490d      	ldr	r1, [pc, #52]	@ (8001878 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001844:	4a0d      	ldr	r2, [pc, #52]	@ (800187c <LoopForever+0xe>)
  movs r3, #0
 8001846:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001848:	e002      	b.n	8001850 <LoopCopyDataInit>

0800184a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800184a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800184c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800184e:	3304      	adds	r3, #4

08001850 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001850:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001852:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001854:	d3f9      	bcc.n	800184a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001856:	4a0a      	ldr	r2, [pc, #40]	@ (8001880 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001858:	4c0a      	ldr	r4, [pc, #40]	@ (8001884 <LoopForever+0x16>)
  movs r3, #0
 800185a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800185c:	e001      	b.n	8001862 <LoopFillZerobss>

0800185e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800185e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001860:	3204      	adds	r2, #4

08001862 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001862:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001864:	d3fb      	bcc.n	800185e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001866:	f005 fddd 	bl	8007424 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800186a:	f7ff f853 	bl	8000914 <main>

0800186e <LoopForever>:

LoopForever:
    b LoopForever
 800186e:	e7fe      	b.n	800186e <LoopForever>
  ldr   r0, =_estack
 8001870:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001874:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001878:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800187c:	08008080 	.word	0x08008080
  ldr r2, =_sbss
 8001880:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001884:	200004a0 	.word	0x200004a0

08001888 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001888:	e7fe      	b.n	8001888 <ADC1_2_IRQHandler>

0800188a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001890:	2300      	movs	r3, #0
 8001892:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001894:	2003      	movs	r0, #3
 8001896:	f000 f95b 	bl	8001b50 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800189a:	200f      	movs	r0, #15
 800189c:	f000 f80e 	bl	80018bc <HAL_InitTick>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d002      	beq.n	80018ac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	71fb      	strb	r3, [r7, #7]
 80018aa:	e001      	b.n	80018b0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018ac:	f7ff fcf4 	bl	8001298 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018b0:	79fb      	ldrb	r3, [r7, #7]

}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
	...

080018bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018c4:	2300      	movs	r3, #0
 80018c6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80018c8:	4b16      	ldr	r3, [pc, #88]	@ (8001924 <HAL_InitTick+0x68>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d022      	beq.n	8001916 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80018d0:	4b15      	ldr	r3, [pc, #84]	@ (8001928 <HAL_InitTick+0x6c>)
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	4b13      	ldr	r3, [pc, #76]	@ (8001924 <HAL_InitTick+0x68>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80018dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80018e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e4:	4618      	mov	r0, r3
 80018e6:	f000 f966 	bl	8001bb6 <HAL_SYSTICK_Config>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d10f      	bne.n	8001910 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2b0f      	cmp	r3, #15
 80018f4:	d809      	bhi.n	800190a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018f6:	2200      	movs	r2, #0
 80018f8:	6879      	ldr	r1, [r7, #4]
 80018fa:	f04f 30ff 	mov.w	r0, #4294967295
 80018fe:	f000 f932 	bl	8001b66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001902:	4a0a      	ldr	r2, [pc, #40]	@ (800192c <HAL_InitTick+0x70>)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6013      	str	r3, [r2, #0]
 8001908:	e007      	b.n	800191a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	73fb      	strb	r3, [r7, #15]
 800190e:	e004      	b.n	800191a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	73fb      	strb	r3, [r7, #15]
 8001914:	e001      	b.n	800191a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800191a:	7bfb      	ldrb	r3, [r7, #15]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20000028 	.word	0x20000028
 8001928:	20000020 	.word	0x20000020
 800192c:	20000024 	.word	0x20000024

08001930 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001934:	4b05      	ldr	r3, [pc, #20]	@ (800194c <HAL_IncTick+0x1c>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	4b05      	ldr	r3, [pc, #20]	@ (8001950 <HAL_IncTick+0x20>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4413      	add	r3, r2
 800193e:	4a03      	ldr	r2, [pc, #12]	@ (800194c <HAL_IncTick+0x1c>)
 8001940:	6013      	str	r3, [r2, #0]
}
 8001942:	bf00      	nop
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	20000354 	.word	0x20000354
 8001950:	20000028 	.word	0x20000028

08001954 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  return uwTick;
 8001958:	4b03      	ldr	r3, [pc, #12]	@ (8001968 <HAL_GetTick+0x14>)
 800195a:	681b      	ldr	r3, [r3, #0]
}
 800195c:	4618      	mov	r0, r3
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	20000354 	.word	0x20000354

0800196c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001974:	f7ff ffee 	bl	8001954 <HAL_GetTick>
 8001978:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001984:	d004      	beq.n	8001990 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001986:	4b09      	ldr	r3, [pc, #36]	@ (80019ac <HAL_Delay+0x40>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	68fa      	ldr	r2, [r7, #12]
 800198c:	4413      	add	r3, r2
 800198e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001990:	bf00      	nop
 8001992:	f7ff ffdf 	bl	8001954 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	68fa      	ldr	r2, [r7, #12]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d8f7      	bhi.n	8001992 <HAL_Delay+0x26>
  {
  }
}
 80019a2:	bf00      	nop
 80019a4:	bf00      	nop
 80019a6:	3710      	adds	r7, #16
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20000028 	.word	0x20000028

080019b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019c0:	4b0c      	ldr	r3, [pc, #48]	@ (80019f4 <__NVIC_SetPriorityGrouping+0x44>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019c6:	68ba      	ldr	r2, [r7, #8]
 80019c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019cc:	4013      	ands	r3, r2
 80019ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019e2:	4a04      	ldr	r2, [pc, #16]	@ (80019f4 <__NVIC_SetPriorityGrouping+0x44>)
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	60d3      	str	r3, [r2, #12]
}
 80019e8:	bf00      	nop
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019fc:	4b04      	ldr	r3, [pc, #16]	@ (8001a10 <__NVIC_GetPriorityGrouping+0x18>)
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	0a1b      	lsrs	r3, r3, #8
 8001a02:	f003 0307 	and.w	r3, r3, #7
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	db0b      	blt.n	8001a3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	f003 021f 	and.w	r2, r3, #31
 8001a2c:	4907      	ldr	r1, [pc, #28]	@ (8001a4c <__NVIC_EnableIRQ+0x38>)
 8001a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a32:	095b      	lsrs	r3, r3, #5
 8001a34:	2001      	movs	r0, #1
 8001a36:	fa00 f202 	lsl.w	r2, r0, r2
 8001a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	e000e100 	.word	0xe000e100

08001a50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	6039      	str	r1, [r7, #0]
 8001a5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	db0a      	blt.n	8001a7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	b2da      	uxtb	r2, r3
 8001a68:	490c      	ldr	r1, [pc, #48]	@ (8001a9c <__NVIC_SetPriority+0x4c>)
 8001a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6e:	0112      	lsls	r2, r2, #4
 8001a70:	b2d2      	uxtb	r2, r2
 8001a72:	440b      	add	r3, r1
 8001a74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a78:	e00a      	b.n	8001a90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	b2da      	uxtb	r2, r3
 8001a7e:	4908      	ldr	r1, [pc, #32]	@ (8001aa0 <__NVIC_SetPriority+0x50>)
 8001a80:	79fb      	ldrb	r3, [r7, #7]
 8001a82:	f003 030f 	and.w	r3, r3, #15
 8001a86:	3b04      	subs	r3, #4
 8001a88:	0112      	lsls	r2, r2, #4
 8001a8a:	b2d2      	uxtb	r2, r2
 8001a8c:	440b      	add	r3, r1
 8001a8e:	761a      	strb	r2, [r3, #24]
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	e000e100 	.word	0xe000e100
 8001aa0:	e000ed00 	.word	0xe000ed00

08001aa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b089      	sub	sp, #36	@ 0x24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f003 0307 	and.w	r3, r3, #7
 8001ab6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	f1c3 0307 	rsb	r3, r3, #7
 8001abe:	2b04      	cmp	r3, #4
 8001ac0:	bf28      	it	cs
 8001ac2:	2304      	movcs	r3, #4
 8001ac4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	3304      	adds	r3, #4
 8001aca:	2b06      	cmp	r3, #6
 8001acc:	d902      	bls.n	8001ad4 <NVIC_EncodePriority+0x30>
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	3b03      	subs	r3, #3
 8001ad2:	e000      	b.n	8001ad6 <NVIC_EncodePriority+0x32>
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	43da      	mvns	r2, r3
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	401a      	ands	r2, r3
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aec:	f04f 31ff 	mov.w	r1, #4294967295
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	fa01 f303 	lsl.w	r3, r1, r3
 8001af6:	43d9      	mvns	r1, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001afc:	4313      	orrs	r3, r2
         );
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3724      	adds	r7, #36	@ 0x24
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
	...

08001b0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3b01      	subs	r3, #1
 8001b18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b1c:	d301      	bcc.n	8001b22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e00f      	b.n	8001b42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b22:	4a0a      	ldr	r2, [pc, #40]	@ (8001b4c <SysTick_Config+0x40>)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3b01      	subs	r3, #1
 8001b28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b2a:	210f      	movs	r1, #15
 8001b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b30:	f7ff ff8e 	bl	8001a50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b34:	4b05      	ldr	r3, [pc, #20]	@ (8001b4c <SysTick_Config+0x40>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b3a:	4b04      	ldr	r3, [pc, #16]	@ (8001b4c <SysTick_Config+0x40>)
 8001b3c:	2207      	movs	r2, #7
 8001b3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	e000e010 	.word	0xe000e010

08001b50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f7ff ff29 	bl	80019b0 <__NVIC_SetPriorityGrouping>
}
 8001b5e:	bf00      	nop
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b086      	sub	sp, #24
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	60b9      	str	r1, [r7, #8]
 8001b70:	607a      	str	r2, [r7, #4]
 8001b72:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b74:	f7ff ff40 	bl	80019f8 <__NVIC_GetPriorityGrouping>
 8001b78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	68b9      	ldr	r1, [r7, #8]
 8001b7e:	6978      	ldr	r0, [r7, #20]
 8001b80:	f7ff ff90 	bl	8001aa4 <NVIC_EncodePriority>
 8001b84:	4602      	mov	r2, r0
 8001b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b8a:	4611      	mov	r1, r2
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff ff5f 	bl	8001a50 <__NVIC_SetPriority>
}
 8001b92:	bf00      	nop
 8001b94:	3718      	adds	r7, #24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b082      	sub	sp, #8
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff ff33 	bl	8001a14 <__NVIC_EnableIRQ>
}
 8001bae:	bf00      	nop
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b082      	sub	sp, #8
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7ff ffa4 	bl	8001b0c <SysTick_Config>
 8001bc4:	4603      	mov	r3, r0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b085      	sub	sp, #20
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d005      	beq.n	8001bf2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2204      	movs	r2, #4
 8001bea:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	73fb      	strb	r3, [r7, #15]
 8001bf0:	e037      	b.n	8001c62 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 020e 	bic.w	r2, r2, #14
 8001c00:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c0c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c10:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f022 0201 	bic.w	r2, r2, #1
 8001c20:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c26:	f003 021f 	and.w	r2, r3, #31
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2e:	2101      	movs	r1, #1
 8001c30:	fa01 f202 	lsl.w	r2, r1, r2
 8001c34:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001c3e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d00c      	beq.n	8001c62 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c52:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c56:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001c60:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2201      	movs	r2, #1
 8001c66:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3714      	adds	r7, #20
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d00d      	beq.n	8001cb4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2204      	movs	r2, #4
 8001c9c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	73fb      	strb	r3, [r7, #15]
 8001cb2:	e047      	b.n	8001d44 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f022 020e 	bic.w	r2, r2, #14
 8001cc2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f022 0201 	bic.w	r2, r2, #1
 8001cd2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cde:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ce2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce8:	f003 021f 	and.w	r2, r3, #31
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	fa01 f202 	lsl.w	r2, r1, r2
 8001cf6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001d00:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d00c      	beq.n	8001d24 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d18:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001d22:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d003      	beq.n	8001d44 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	4798      	blx	r3
    }
  }
  return status;
 8001d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
	...

08001d50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b087      	sub	sp, #28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001d5e:	e15a      	b.n	8002016 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	2101      	movs	r1, #1
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f000 814c 	beq.w	8002010 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f003 0303 	and.w	r3, r3, #3
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d005      	beq.n	8001d90 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d130      	bne.n	8001df2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	2203      	movs	r2, #3
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	43db      	mvns	r3, r3
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	4013      	ands	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	68da      	ldr	r2, [r3, #12]
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	43db      	mvns	r3, r3
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	091b      	lsrs	r3, r3, #4
 8001ddc:	f003 0201 	and.w	r2, r3, #1
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f003 0303 	and.w	r3, r3, #3
 8001dfa:	2b03      	cmp	r3, #3
 8001dfc:	d017      	beq.n	8001e2e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	2203      	movs	r2, #3
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	4013      	ands	r3, r2
 8001e14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	689a      	ldr	r2, [r3, #8]
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f003 0303 	and.w	r3, r3, #3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d123      	bne.n	8001e82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	08da      	lsrs	r2, r3, #3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	3208      	adds	r2, #8
 8001e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	220f      	movs	r2, #15
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	43db      	mvns	r3, r3
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	691a      	ldr	r2, [r3, #16]
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	f003 0307 	and.w	r3, r3, #7
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	08da      	lsrs	r2, r3, #3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3208      	adds	r2, #8
 8001e7c:	6939      	ldr	r1, [r7, #16]
 8001e7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	2203      	movs	r2, #3
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	43db      	mvns	r3, r3
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	4013      	ands	r3, r2
 8001e98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f003 0203 	and.w	r2, r3, #3
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f000 80a6 	beq.w	8002010 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ec4:	4b5b      	ldr	r3, [pc, #364]	@ (8002034 <HAL_GPIO_Init+0x2e4>)
 8001ec6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ec8:	4a5a      	ldr	r2, [pc, #360]	@ (8002034 <HAL_GPIO_Init+0x2e4>)
 8001eca:	f043 0301 	orr.w	r3, r3, #1
 8001ece:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ed0:	4b58      	ldr	r3, [pc, #352]	@ (8002034 <HAL_GPIO_Init+0x2e4>)
 8001ed2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001edc:	4a56      	ldr	r2, [pc, #344]	@ (8002038 <HAL_GPIO_Init+0x2e8>)
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	089b      	lsrs	r3, r3, #2
 8001ee2:	3302      	adds	r3, #2
 8001ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	f003 0303 	and.w	r3, r3, #3
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	220f      	movs	r2, #15
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	4013      	ands	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001f06:	d01f      	beq.n	8001f48 <HAL_GPIO_Init+0x1f8>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a4c      	ldr	r2, [pc, #304]	@ (800203c <HAL_GPIO_Init+0x2ec>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d019      	beq.n	8001f44 <HAL_GPIO_Init+0x1f4>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a4b      	ldr	r2, [pc, #300]	@ (8002040 <HAL_GPIO_Init+0x2f0>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d013      	beq.n	8001f40 <HAL_GPIO_Init+0x1f0>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a4a      	ldr	r2, [pc, #296]	@ (8002044 <HAL_GPIO_Init+0x2f4>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d00d      	beq.n	8001f3c <HAL_GPIO_Init+0x1ec>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a49      	ldr	r2, [pc, #292]	@ (8002048 <HAL_GPIO_Init+0x2f8>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d007      	beq.n	8001f38 <HAL_GPIO_Init+0x1e8>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a48      	ldr	r2, [pc, #288]	@ (800204c <HAL_GPIO_Init+0x2fc>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d101      	bne.n	8001f34 <HAL_GPIO_Init+0x1e4>
 8001f30:	2305      	movs	r3, #5
 8001f32:	e00a      	b.n	8001f4a <HAL_GPIO_Init+0x1fa>
 8001f34:	2306      	movs	r3, #6
 8001f36:	e008      	b.n	8001f4a <HAL_GPIO_Init+0x1fa>
 8001f38:	2304      	movs	r3, #4
 8001f3a:	e006      	b.n	8001f4a <HAL_GPIO_Init+0x1fa>
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e004      	b.n	8001f4a <HAL_GPIO_Init+0x1fa>
 8001f40:	2302      	movs	r3, #2
 8001f42:	e002      	b.n	8001f4a <HAL_GPIO_Init+0x1fa>
 8001f44:	2301      	movs	r3, #1
 8001f46:	e000      	b.n	8001f4a <HAL_GPIO_Init+0x1fa>
 8001f48:	2300      	movs	r3, #0
 8001f4a:	697a      	ldr	r2, [r7, #20]
 8001f4c:	f002 0203 	and.w	r2, r2, #3
 8001f50:	0092      	lsls	r2, r2, #2
 8001f52:	4093      	lsls	r3, r2
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f5a:	4937      	ldr	r1, [pc, #220]	@ (8002038 <HAL_GPIO_Init+0x2e8>)
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	089b      	lsrs	r3, r3, #2
 8001f60:	3302      	adds	r3, #2
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f68:	4b39      	ldr	r3, [pc, #228]	@ (8002050 <HAL_GPIO_Init+0x300>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	43db      	mvns	r3, r3
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	4013      	ands	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d003      	beq.n	8001f8c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f8c:	4a30      	ldr	r2, [pc, #192]	@ (8002050 <HAL_GPIO_Init+0x300>)
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f92:	4b2f      	ldr	r3, [pc, #188]	@ (8002050 <HAL_GPIO_Init+0x300>)
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fb6:	4a26      	ldr	r2, [pc, #152]	@ (8002050 <HAL_GPIO_Init+0x300>)
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001fbc:	4b24      	ldr	r3, [pc, #144]	@ (8002050 <HAL_GPIO_Init+0x300>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d003      	beq.n	8001fe0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001fe0:	4a1b      	ldr	r2, [pc, #108]	@ (8002050 <HAL_GPIO_Init+0x300>)
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001fe6:	4b1a      	ldr	r3, [pc, #104]	@ (8002050 <HAL_GPIO_Init+0x300>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4313      	orrs	r3, r2
 8002008:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800200a:	4a11      	ldr	r2, [pc, #68]	@ (8002050 <HAL_GPIO_Init+0x300>)
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	3301      	adds	r3, #1
 8002014:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	fa22 f303 	lsr.w	r3, r2, r3
 8002020:	2b00      	cmp	r3, #0
 8002022:	f47f ae9d 	bne.w	8001d60 <HAL_GPIO_Init+0x10>
  }
}
 8002026:	bf00      	nop
 8002028:	bf00      	nop
 800202a:	371c      	adds	r7, #28
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	40021000 	.word	0x40021000
 8002038:	40010000 	.word	0x40010000
 800203c:	48000400 	.word	0x48000400
 8002040:	48000800 	.word	0x48000800
 8002044:	48000c00 	.word	0x48000c00
 8002048:	48001000 	.word	0x48001000
 800204c:	48001400 	.word	0x48001400
 8002050:	40010400 	.word	0x40010400

08002054 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	460b      	mov	r3, r1
 800205e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	691a      	ldr	r2, [r3, #16]
 8002064:	887b      	ldrh	r3, [r7, #2]
 8002066:	4013      	ands	r3, r2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d002      	beq.n	8002072 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800206c:	2301      	movs	r3, #1
 800206e:	73fb      	strb	r3, [r7, #15]
 8002070:	e001      	b.n	8002076 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002072:	2300      	movs	r3, #0
 8002074:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002076:	7bfb      	ldrb	r3, [r7, #15]
}
 8002078:	4618      	mov	r0, r3
 800207a:	3714      	adds	r7, #20
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	460b      	mov	r3, r1
 800208e:	807b      	strh	r3, [r7, #2]
 8002090:	4613      	mov	r3, r2
 8002092:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002094:	787b      	ldrb	r3, [r7, #1]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800209a:	887a      	ldrh	r2, [r7, #2]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020a0:	e002      	b.n	80020a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020a2:	887a      	ldrh	r2, [r7, #2]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d141      	bne.n	8002146 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80020c2:	4b4b      	ldr	r3, [pc, #300]	@ (80021f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80020ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020ce:	d131      	bne.n	8002134 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020d0:	4b47      	ldr	r3, [pc, #284]	@ (80021f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020d6:	4a46      	ldr	r2, [pc, #280]	@ (80021f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80020dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020e0:	4b43      	ldr	r3, [pc, #268]	@ (80021f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80020e8:	4a41      	ldr	r2, [pc, #260]	@ (80021f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80020f0:	4b40      	ldr	r3, [pc, #256]	@ (80021f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2232      	movs	r2, #50	@ 0x32
 80020f6:	fb02 f303 	mul.w	r3, r2, r3
 80020fa:	4a3f      	ldr	r2, [pc, #252]	@ (80021f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80020fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002100:	0c9b      	lsrs	r3, r3, #18
 8002102:	3301      	adds	r3, #1
 8002104:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002106:	e002      	b.n	800210e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	3b01      	subs	r3, #1
 800210c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800210e:	4b38      	ldr	r3, [pc, #224]	@ (80021f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002116:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800211a:	d102      	bne.n	8002122 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1f2      	bne.n	8002108 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002122:	4b33      	ldr	r3, [pc, #204]	@ (80021f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800212a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800212e:	d158      	bne.n	80021e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e057      	b.n	80021e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002134:	4b2e      	ldr	r3, [pc, #184]	@ (80021f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002136:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800213a:	4a2d      	ldr	r2, [pc, #180]	@ (80021f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800213c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002140:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002144:	e04d      	b.n	80021e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800214c:	d141      	bne.n	80021d2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800214e:	4b28      	ldr	r3, [pc, #160]	@ (80021f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002156:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800215a:	d131      	bne.n	80021c0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800215c:	4b24      	ldr	r3, [pc, #144]	@ (80021f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800215e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002162:	4a23      	ldr	r2, [pc, #140]	@ (80021f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002164:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002168:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800216c:	4b20      	ldr	r3, [pc, #128]	@ (80021f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002174:	4a1e      	ldr	r2, [pc, #120]	@ (80021f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002176:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800217a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800217c:	4b1d      	ldr	r3, [pc, #116]	@ (80021f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2232      	movs	r2, #50	@ 0x32
 8002182:	fb02 f303 	mul.w	r3, r2, r3
 8002186:	4a1c      	ldr	r2, [pc, #112]	@ (80021f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002188:	fba2 2303 	umull	r2, r3, r2, r3
 800218c:	0c9b      	lsrs	r3, r3, #18
 800218e:	3301      	adds	r3, #1
 8002190:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002192:	e002      	b.n	800219a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	3b01      	subs	r3, #1
 8002198:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800219a:	4b15      	ldr	r3, [pc, #84]	@ (80021f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021a6:	d102      	bne.n	80021ae <HAL_PWREx_ControlVoltageScaling+0xfa>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1f2      	bne.n	8002194 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021ae:	4b10      	ldr	r3, [pc, #64]	@ (80021f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021ba:	d112      	bne.n	80021e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e011      	b.n	80021e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021c0:	4b0b      	ldr	r3, [pc, #44]	@ (80021f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80021c6:	4a0a      	ldr	r2, [pc, #40]	@ (80021f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80021d0:	e007      	b.n	80021e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021d2:	4b07      	ldr	r3, [pc, #28]	@ (80021f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80021da:	4a05      	ldr	r2, [pc, #20]	@ (80021f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021dc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021e0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3714      	adds	r7, #20
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	40007000 	.word	0x40007000
 80021f4:	20000020 	.word	0x20000020
 80021f8:	431bde83 	.word	0x431bde83

080021fc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002200:	4b05      	ldr	r3, [pc, #20]	@ (8002218 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	4a04      	ldr	r2, [pc, #16]	@ (8002218 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002206:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800220a:	6093      	str	r3, [r2, #8]
}
 800220c:	bf00      	nop
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	40007000 	.word	0x40007000

0800221c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b088      	sub	sp, #32
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e2fe      	b.n	800282c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b00      	cmp	r3, #0
 8002238:	d075      	beq.n	8002326 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800223a:	4b97      	ldr	r3, [pc, #604]	@ (8002498 <HAL_RCC_OscConfig+0x27c>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 030c 	and.w	r3, r3, #12
 8002242:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002244:	4b94      	ldr	r3, [pc, #592]	@ (8002498 <HAL_RCC_OscConfig+0x27c>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	f003 0303 	and.w	r3, r3, #3
 800224c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	2b0c      	cmp	r3, #12
 8002252:	d102      	bne.n	800225a <HAL_RCC_OscConfig+0x3e>
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	2b03      	cmp	r3, #3
 8002258:	d002      	beq.n	8002260 <HAL_RCC_OscConfig+0x44>
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	2b08      	cmp	r3, #8
 800225e:	d10b      	bne.n	8002278 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002260:	4b8d      	ldr	r3, [pc, #564]	@ (8002498 <HAL_RCC_OscConfig+0x27c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d05b      	beq.n	8002324 <HAL_RCC_OscConfig+0x108>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d157      	bne.n	8002324 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e2d9      	b.n	800282c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002280:	d106      	bne.n	8002290 <HAL_RCC_OscConfig+0x74>
 8002282:	4b85      	ldr	r3, [pc, #532]	@ (8002498 <HAL_RCC_OscConfig+0x27c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a84      	ldr	r2, [pc, #528]	@ (8002498 <HAL_RCC_OscConfig+0x27c>)
 8002288:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800228c:	6013      	str	r3, [r2, #0]
 800228e:	e01d      	b.n	80022cc <HAL_RCC_OscConfig+0xb0>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002298:	d10c      	bne.n	80022b4 <HAL_RCC_OscConfig+0x98>
 800229a:	4b7f      	ldr	r3, [pc, #508]	@ (8002498 <HAL_RCC_OscConfig+0x27c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a7e      	ldr	r2, [pc, #504]	@ (8002498 <HAL_RCC_OscConfig+0x27c>)
 80022a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022a4:	6013      	str	r3, [r2, #0]
 80022a6:	4b7c      	ldr	r3, [pc, #496]	@ (8002498 <HAL_RCC_OscConfig+0x27c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a7b      	ldr	r2, [pc, #492]	@ (8002498 <HAL_RCC_OscConfig+0x27c>)
 80022ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022b0:	6013      	str	r3, [r2, #0]
 80022b2:	e00b      	b.n	80022cc <HAL_RCC_OscConfig+0xb0>
 80022b4:	4b78      	ldr	r3, [pc, #480]	@ (8002498 <HAL_RCC_OscConfig+0x27c>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a77      	ldr	r2, [pc, #476]	@ (8002498 <HAL_RCC_OscConfig+0x27c>)
 80022ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022be:	6013      	str	r3, [r2, #0]
 80022c0:	4b75      	ldr	r3, [pc, #468]	@ (8002498 <HAL_RCC_OscConfig+0x27c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a74      	ldr	r2, [pc, #464]	@ (8002498 <HAL_RCC_OscConfig+0x27c>)
 80022c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d013      	beq.n	80022fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d4:	f7ff fb3e 	bl	8001954 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022dc:	f7ff fb3a 	bl	8001954 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b64      	cmp	r3, #100	@ 0x64
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e29e      	b.n	800282c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022ee:	4b6a      	ldr	r3, [pc, #424]	@ (8002498 <HAL_RCC_OscConfig+0x27c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d0f0      	beq.n	80022dc <HAL_RCC_OscConfig+0xc0>
 80022fa:	e014      	b.n	8002326 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fc:	f7ff fb2a 	bl	8001954 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002304:	f7ff fb26 	bl	8001954 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b64      	cmp	r3, #100	@ 0x64
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e28a      	b.n	800282c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002316:	4b60      	ldr	r3, [pc, #384]	@ (8002498 <HAL_RCC_OscConfig+0x27c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f0      	bne.n	8002304 <HAL_RCC_OscConfig+0xe8>
 8002322:	e000      	b.n	8002326 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002324:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d075      	beq.n	800241e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002332:	4b59      	ldr	r3, [pc, #356]	@ (8002498 <HAL_RCC_OscConfig+0x27c>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f003 030c 	and.w	r3, r3, #12
 800233a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800233c:	4b56      	ldr	r3, [pc, #344]	@ (8002498 <HAL_RCC_OscConfig+0x27c>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	f003 0303 	and.w	r3, r3, #3
 8002344:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	2b0c      	cmp	r3, #12
 800234a:	d102      	bne.n	8002352 <HAL_RCC_OscConfig+0x136>
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	2b02      	cmp	r3, #2
 8002350:	d002      	beq.n	8002358 <HAL_RCC_OscConfig+0x13c>
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	2b04      	cmp	r3, #4
 8002356:	d11f      	bne.n	8002398 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002358:	4b4f      	ldr	r3, [pc, #316]	@ (8002498 <HAL_RCC_OscConfig+0x27c>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002360:	2b00      	cmp	r3, #0
 8002362:	d005      	beq.n	8002370 <HAL_RCC_OscConfig+0x154>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d101      	bne.n	8002370 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e25d      	b.n	800282c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002370:	4b49      	ldr	r3, [pc, #292]	@ (8002498 <HAL_RCC_OscConfig+0x27c>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	061b      	lsls	r3, r3, #24
 800237e:	4946      	ldr	r1, [pc, #280]	@ (8002498 <HAL_RCC_OscConfig+0x27c>)
 8002380:	4313      	orrs	r3, r2
 8002382:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002384:	4b45      	ldr	r3, [pc, #276]	@ (800249c <HAL_RCC_OscConfig+0x280>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff fa97 	bl	80018bc <HAL_InitTick>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d043      	beq.n	800241c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e249      	b.n	800282c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d023      	beq.n	80023e8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023a0:	4b3d      	ldr	r3, [pc, #244]	@ (8002498 <HAL_RCC_OscConfig+0x27c>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a3c      	ldr	r2, [pc, #240]	@ (8002498 <HAL_RCC_OscConfig+0x27c>)
 80023a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ac:	f7ff fad2 	bl	8001954 <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023b4:	f7ff face 	bl	8001954 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e232      	b.n	800282c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023c6:	4b34      	ldr	r3, [pc, #208]	@ (8002498 <HAL_RCC_OscConfig+0x27c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d0f0      	beq.n	80023b4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d2:	4b31      	ldr	r3, [pc, #196]	@ (8002498 <HAL_RCC_OscConfig+0x27c>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	061b      	lsls	r3, r3, #24
 80023e0:	492d      	ldr	r1, [pc, #180]	@ (8002498 <HAL_RCC_OscConfig+0x27c>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	604b      	str	r3, [r1, #4]
 80023e6:	e01a      	b.n	800241e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023e8:	4b2b      	ldr	r3, [pc, #172]	@ (8002498 <HAL_RCC_OscConfig+0x27c>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a2a      	ldr	r2, [pc, #168]	@ (8002498 <HAL_RCC_OscConfig+0x27c>)
 80023ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f4:	f7ff faae 	bl	8001954 <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023fc:	f7ff faaa 	bl	8001954 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e20e      	b.n	800282c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800240e:	4b22      	ldr	r3, [pc, #136]	@ (8002498 <HAL_RCC_OscConfig+0x27c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1f0      	bne.n	80023fc <HAL_RCC_OscConfig+0x1e0>
 800241a:	e000      	b.n	800241e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800241c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0308 	and.w	r3, r3, #8
 8002426:	2b00      	cmp	r3, #0
 8002428:	d041      	beq.n	80024ae <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d01c      	beq.n	800246c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002432:	4b19      	ldr	r3, [pc, #100]	@ (8002498 <HAL_RCC_OscConfig+0x27c>)
 8002434:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002438:	4a17      	ldr	r2, [pc, #92]	@ (8002498 <HAL_RCC_OscConfig+0x27c>)
 800243a:	f043 0301 	orr.w	r3, r3, #1
 800243e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002442:	f7ff fa87 	bl	8001954 <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002448:	e008      	b.n	800245c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800244a:	f7ff fa83 	bl	8001954 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d901      	bls.n	800245c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e1e7      	b.n	800282c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800245c:	4b0e      	ldr	r3, [pc, #56]	@ (8002498 <HAL_RCC_OscConfig+0x27c>)
 800245e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d0ef      	beq.n	800244a <HAL_RCC_OscConfig+0x22e>
 800246a:	e020      	b.n	80024ae <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800246c:	4b0a      	ldr	r3, [pc, #40]	@ (8002498 <HAL_RCC_OscConfig+0x27c>)
 800246e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002472:	4a09      	ldr	r2, [pc, #36]	@ (8002498 <HAL_RCC_OscConfig+0x27c>)
 8002474:	f023 0301 	bic.w	r3, r3, #1
 8002478:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800247c:	f7ff fa6a 	bl	8001954 <HAL_GetTick>
 8002480:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002482:	e00d      	b.n	80024a0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002484:	f7ff fa66 	bl	8001954 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b02      	cmp	r3, #2
 8002490:	d906      	bls.n	80024a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e1ca      	b.n	800282c <HAL_RCC_OscConfig+0x610>
 8002496:	bf00      	nop
 8002498:	40021000 	.word	0x40021000
 800249c:	20000024 	.word	0x20000024
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024a0:	4b8c      	ldr	r3, [pc, #560]	@ (80026d4 <HAL_RCC_OscConfig+0x4b8>)
 80024a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1ea      	bne.n	8002484 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0304 	and.w	r3, r3, #4
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f000 80a6 	beq.w	8002608 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024bc:	2300      	movs	r3, #0
 80024be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024c0:	4b84      	ldr	r3, [pc, #528]	@ (80026d4 <HAL_RCC_OscConfig+0x4b8>)
 80024c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d101      	bne.n	80024d0 <HAL_RCC_OscConfig+0x2b4>
 80024cc:	2301      	movs	r3, #1
 80024ce:	e000      	b.n	80024d2 <HAL_RCC_OscConfig+0x2b6>
 80024d0:	2300      	movs	r3, #0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00d      	beq.n	80024f2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024d6:	4b7f      	ldr	r3, [pc, #508]	@ (80026d4 <HAL_RCC_OscConfig+0x4b8>)
 80024d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024da:	4a7e      	ldr	r2, [pc, #504]	@ (80026d4 <HAL_RCC_OscConfig+0x4b8>)
 80024dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80024e2:	4b7c      	ldr	r3, [pc, #496]	@ (80026d4 <HAL_RCC_OscConfig+0x4b8>)
 80024e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80024ee:	2301      	movs	r3, #1
 80024f0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024f2:	4b79      	ldr	r3, [pc, #484]	@ (80026d8 <HAL_RCC_OscConfig+0x4bc>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d118      	bne.n	8002530 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024fe:	4b76      	ldr	r3, [pc, #472]	@ (80026d8 <HAL_RCC_OscConfig+0x4bc>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a75      	ldr	r2, [pc, #468]	@ (80026d8 <HAL_RCC_OscConfig+0x4bc>)
 8002504:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002508:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800250a:	f7ff fa23 	bl	8001954 <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002510:	e008      	b.n	8002524 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002512:	f7ff fa1f 	bl	8001954 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e183      	b.n	800282c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002524:	4b6c      	ldr	r3, [pc, #432]	@ (80026d8 <HAL_RCC_OscConfig+0x4bc>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0f0      	beq.n	8002512 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d108      	bne.n	800254a <HAL_RCC_OscConfig+0x32e>
 8002538:	4b66      	ldr	r3, [pc, #408]	@ (80026d4 <HAL_RCC_OscConfig+0x4b8>)
 800253a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800253e:	4a65      	ldr	r2, [pc, #404]	@ (80026d4 <HAL_RCC_OscConfig+0x4b8>)
 8002540:	f043 0301 	orr.w	r3, r3, #1
 8002544:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002548:	e024      	b.n	8002594 <HAL_RCC_OscConfig+0x378>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	2b05      	cmp	r3, #5
 8002550:	d110      	bne.n	8002574 <HAL_RCC_OscConfig+0x358>
 8002552:	4b60      	ldr	r3, [pc, #384]	@ (80026d4 <HAL_RCC_OscConfig+0x4b8>)
 8002554:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002558:	4a5e      	ldr	r2, [pc, #376]	@ (80026d4 <HAL_RCC_OscConfig+0x4b8>)
 800255a:	f043 0304 	orr.w	r3, r3, #4
 800255e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002562:	4b5c      	ldr	r3, [pc, #368]	@ (80026d4 <HAL_RCC_OscConfig+0x4b8>)
 8002564:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002568:	4a5a      	ldr	r2, [pc, #360]	@ (80026d4 <HAL_RCC_OscConfig+0x4b8>)
 800256a:	f043 0301 	orr.w	r3, r3, #1
 800256e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002572:	e00f      	b.n	8002594 <HAL_RCC_OscConfig+0x378>
 8002574:	4b57      	ldr	r3, [pc, #348]	@ (80026d4 <HAL_RCC_OscConfig+0x4b8>)
 8002576:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800257a:	4a56      	ldr	r2, [pc, #344]	@ (80026d4 <HAL_RCC_OscConfig+0x4b8>)
 800257c:	f023 0301 	bic.w	r3, r3, #1
 8002580:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002584:	4b53      	ldr	r3, [pc, #332]	@ (80026d4 <HAL_RCC_OscConfig+0x4b8>)
 8002586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800258a:	4a52      	ldr	r2, [pc, #328]	@ (80026d4 <HAL_RCC_OscConfig+0x4b8>)
 800258c:	f023 0304 	bic.w	r3, r3, #4
 8002590:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d016      	beq.n	80025ca <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800259c:	f7ff f9da 	bl	8001954 <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025a2:	e00a      	b.n	80025ba <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025a4:	f7ff f9d6 	bl	8001954 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e138      	b.n	800282c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025ba:	4b46      	ldr	r3, [pc, #280]	@ (80026d4 <HAL_RCC_OscConfig+0x4b8>)
 80025bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d0ed      	beq.n	80025a4 <HAL_RCC_OscConfig+0x388>
 80025c8:	e015      	b.n	80025f6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ca:	f7ff f9c3 	bl	8001954 <HAL_GetTick>
 80025ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025d0:	e00a      	b.n	80025e8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025d2:	f7ff f9bf 	bl	8001954 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e121      	b.n	800282c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025e8:	4b3a      	ldr	r3, [pc, #232]	@ (80026d4 <HAL_RCC_OscConfig+0x4b8>)
 80025ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1ed      	bne.n	80025d2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80025f6:	7ffb      	ldrb	r3, [r7, #31]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d105      	bne.n	8002608 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025fc:	4b35      	ldr	r3, [pc, #212]	@ (80026d4 <HAL_RCC_OscConfig+0x4b8>)
 80025fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002600:	4a34      	ldr	r2, [pc, #208]	@ (80026d4 <HAL_RCC_OscConfig+0x4b8>)
 8002602:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002606:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0320 	and.w	r3, r3, #32
 8002610:	2b00      	cmp	r3, #0
 8002612:	d03c      	beq.n	800268e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d01c      	beq.n	8002656 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800261c:	4b2d      	ldr	r3, [pc, #180]	@ (80026d4 <HAL_RCC_OscConfig+0x4b8>)
 800261e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002622:	4a2c      	ldr	r2, [pc, #176]	@ (80026d4 <HAL_RCC_OscConfig+0x4b8>)
 8002624:	f043 0301 	orr.w	r3, r3, #1
 8002628:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262c:	f7ff f992 	bl	8001954 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002634:	f7ff f98e 	bl	8001954 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e0f2      	b.n	800282c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002646:	4b23      	ldr	r3, [pc, #140]	@ (80026d4 <HAL_RCC_OscConfig+0x4b8>)
 8002648:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d0ef      	beq.n	8002634 <HAL_RCC_OscConfig+0x418>
 8002654:	e01b      	b.n	800268e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002656:	4b1f      	ldr	r3, [pc, #124]	@ (80026d4 <HAL_RCC_OscConfig+0x4b8>)
 8002658:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800265c:	4a1d      	ldr	r2, [pc, #116]	@ (80026d4 <HAL_RCC_OscConfig+0x4b8>)
 800265e:	f023 0301 	bic.w	r3, r3, #1
 8002662:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002666:	f7ff f975 	bl	8001954 <HAL_GetTick>
 800266a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800266c:	e008      	b.n	8002680 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800266e:	f7ff f971 	bl	8001954 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e0d5      	b.n	800282c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002680:	4b14      	ldr	r3, [pc, #80]	@ (80026d4 <HAL_RCC_OscConfig+0x4b8>)
 8002682:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1ef      	bne.n	800266e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	69db      	ldr	r3, [r3, #28]
 8002692:	2b00      	cmp	r3, #0
 8002694:	f000 80c9 	beq.w	800282a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002698:	4b0e      	ldr	r3, [pc, #56]	@ (80026d4 <HAL_RCC_OscConfig+0x4b8>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f003 030c 	and.w	r3, r3, #12
 80026a0:	2b0c      	cmp	r3, #12
 80026a2:	f000 8083 	beq.w	80027ac <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d15e      	bne.n	800276c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ae:	4b09      	ldr	r3, [pc, #36]	@ (80026d4 <HAL_RCC_OscConfig+0x4b8>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a08      	ldr	r2, [pc, #32]	@ (80026d4 <HAL_RCC_OscConfig+0x4b8>)
 80026b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ba:	f7ff f94b 	bl	8001954 <HAL_GetTick>
 80026be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026c0:	e00c      	b.n	80026dc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026c2:	f7ff f947 	bl	8001954 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d905      	bls.n	80026dc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e0ab      	b.n	800282c <HAL_RCC_OscConfig+0x610>
 80026d4:	40021000 	.word	0x40021000
 80026d8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026dc:	4b55      	ldr	r3, [pc, #340]	@ (8002834 <HAL_RCC_OscConfig+0x618>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d1ec      	bne.n	80026c2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026e8:	4b52      	ldr	r3, [pc, #328]	@ (8002834 <HAL_RCC_OscConfig+0x618>)
 80026ea:	68da      	ldr	r2, [r3, #12]
 80026ec:	4b52      	ldr	r3, [pc, #328]	@ (8002838 <HAL_RCC_OscConfig+0x61c>)
 80026ee:	4013      	ands	r3, r2
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	6a11      	ldr	r1, [r2, #32]
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80026f8:	3a01      	subs	r2, #1
 80026fa:	0112      	lsls	r2, r2, #4
 80026fc:	4311      	orrs	r1, r2
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002702:	0212      	lsls	r2, r2, #8
 8002704:	4311      	orrs	r1, r2
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800270a:	0852      	lsrs	r2, r2, #1
 800270c:	3a01      	subs	r2, #1
 800270e:	0552      	lsls	r2, r2, #21
 8002710:	4311      	orrs	r1, r2
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002716:	0852      	lsrs	r2, r2, #1
 8002718:	3a01      	subs	r2, #1
 800271a:	0652      	lsls	r2, r2, #25
 800271c:	4311      	orrs	r1, r2
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002722:	06d2      	lsls	r2, r2, #27
 8002724:	430a      	orrs	r2, r1
 8002726:	4943      	ldr	r1, [pc, #268]	@ (8002834 <HAL_RCC_OscConfig+0x618>)
 8002728:	4313      	orrs	r3, r2
 800272a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800272c:	4b41      	ldr	r3, [pc, #260]	@ (8002834 <HAL_RCC_OscConfig+0x618>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a40      	ldr	r2, [pc, #256]	@ (8002834 <HAL_RCC_OscConfig+0x618>)
 8002732:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002736:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002738:	4b3e      	ldr	r3, [pc, #248]	@ (8002834 <HAL_RCC_OscConfig+0x618>)
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	4a3d      	ldr	r2, [pc, #244]	@ (8002834 <HAL_RCC_OscConfig+0x618>)
 800273e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002742:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002744:	f7ff f906 	bl	8001954 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800274c:	f7ff f902 	bl	8001954 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e066      	b.n	800282c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800275e:	4b35      	ldr	r3, [pc, #212]	@ (8002834 <HAL_RCC_OscConfig+0x618>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d0f0      	beq.n	800274c <HAL_RCC_OscConfig+0x530>
 800276a:	e05e      	b.n	800282a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800276c:	4b31      	ldr	r3, [pc, #196]	@ (8002834 <HAL_RCC_OscConfig+0x618>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a30      	ldr	r2, [pc, #192]	@ (8002834 <HAL_RCC_OscConfig+0x618>)
 8002772:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002776:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002778:	f7ff f8ec 	bl	8001954 <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002780:	f7ff f8e8 	bl	8001954 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e04c      	b.n	800282c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002792:	4b28      	ldr	r3, [pc, #160]	@ (8002834 <HAL_RCC_OscConfig+0x618>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1f0      	bne.n	8002780 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800279e:	4b25      	ldr	r3, [pc, #148]	@ (8002834 <HAL_RCC_OscConfig+0x618>)
 80027a0:	68da      	ldr	r2, [r3, #12]
 80027a2:	4924      	ldr	r1, [pc, #144]	@ (8002834 <HAL_RCC_OscConfig+0x618>)
 80027a4:	4b25      	ldr	r3, [pc, #148]	@ (800283c <HAL_RCC_OscConfig+0x620>)
 80027a6:	4013      	ands	r3, r2
 80027a8:	60cb      	str	r3, [r1, #12]
 80027aa:	e03e      	b.n	800282a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	69db      	ldr	r3, [r3, #28]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d101      	bne.n	80027b8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e039      	b.n	800282c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80027b8:	4b1e      	ldr	r3, [pc, #120]	@ (8002834 <HAL_RCC_OscConfig+0x618>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	f003 0203 	and.w	r2, r3, #3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d12c      	bne.n	8002826 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d6:	3b01      	subs	r3, #1
 80027d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027da:	429a      	cmp	r2, r3
 80027dc:	d123      	bne.n	8002826 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d11b      	bne.n	8002826 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027f8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d113      	bne.n	8002826 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002808:	085b      	lsrs	r3, r3, #1
 800280a:	3b01      	subs	r3, #1
 800280c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800280e:	429a      	cmp	r2, r3
 8002810:	d109      	bne.n	8002826 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800281c:	085b      	lsrs	r3, r3, #1
 800281e:	3b01      	subs	r3, #1
 8002820:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002822:	429a      	cmp	r2, r3
 8002824:	d001      	beq.n	800282a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e000      	b.n	800282c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800282a:	2300      	movs	r3, #0
}
 800282c:	4618      	mov	r0, r3
 800282e:	3720      	adds	r7, #32
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40021000 	.word	0x40021000
 8002838:	019f800c 	.word	0x019f800c
 800283c:	feeefffc 	.word	0xfeeefffc

08002840 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800284a:	2300      	movs	r3, #0
 800284c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e11e      	b.n	8002a96 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002858:	4b91      	ldr	r3, [pc, #580]	@ (8002aa0 <HAL_RCC_ClockConfig+0x260>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 030f 	and.w	r3, r3, #15
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	429a      	cmp	r2, r3
 8002864:	d910      	bls.n	8002888 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002866:	4b8e      	ldr	r3, [pc, #568]	@ (8002aa0 <HAL_RCC_ClockConfig+0x260>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f023 020f 	bic.w	r2, r3, #15
 800286e:	498c      	ldr	r1, [pc, #560]	@ (8002aa0 <HAL_RCC_ClockConfig+0x260>)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	4313      	orrs	r3, r2
 8002874:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002876:	4b8a      	ldr	r3, [pc, #552]	@ (8002aa0 <HAL_RCC_ClockConfig+0x260>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 030f 	and.w	r3, r3, #15
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	429a      	cmp	r2, r3
 8002882:	d001      	beq.n	8002888 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e106      	b.n	8002a96 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b00      	cmp	r3, #0
 8002892:	d073      	beq.n	800297c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	2b03      	cmp	r3, #3
 800289a:	d129      	bne.n	80028f0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800289c:	4b81      	ldr	r3, [pc, #516]	@ (8002aa4 <HAL_RCC_ClockConfig+0x264>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d101      	bne.n	80028ac <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e0f4      	b.n	8002a96 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80028ac:	f000 f99e 	bl	8002bec <RCC_GetSysClockFreqFromPLLSource>
 80028b0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	4a7c      	ldr	r2, [pc, #496]	@ (8002aa8 <HAL_RCC_ClockConfig+0x268>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d93f      	bls.n	800293a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80028ba:	4b7a      	ldr	r3, [pc, #488]	@ (8002aa4 <HAL_RCC_ClockConfig+0x264>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d009      	beq.n	80028da <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d033      	beq.n	800293a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d12f      	bne.n	800293a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80028da:	4b72      	ldr	r3, [pc, #456]	@ (8002aa4 <HAL_RCC_ClockConfig+0x264>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80028e2:	4a70      	ldr	r2, [pc, #448]	@ (8002aa4 <HAL_RCC_ClockConfig+0x264>)
 80028e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028e8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80028ea:	2380      	movs	r3, #128	@ 0x80
 80028ec:	617b      	str	r3, [r7, #20]
 80028ee:	e024      	b.n	800293a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d107      	bne.n	8002908 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028f8:	4b6a      	ldr	r3, [pc, #424]	@ (8002aa4 <HAL_RCC_ClockConfig+0x264>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d109      	bne.n	8002918 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e0c6      	b.n	8002a96 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002908:	4b66      	ldr	r3, [pc, #408]	@ (8002aa4 <HAL_RCC_ClockConfig+0x264>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002910:	2b00      	cmp	r3, #0
 8002912:	d101      	bne.n	8002918 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e0be      	b.n	8002a96 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002918:	f000 f8ce 	bl	8002ab8 <HAL_RCC_GetSysClockFreq>
 800291c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	4a61      	ldr	r2, [pc, #388]	@ (8002aa8 <HAL_RCC_ClockConfig+0x268>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d909      	bls.n	800293a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002926:	4b5f      	ldr	r3, [pc, #380]	@ (8002aa4 <HAL_RCC_ClockConfig+0x264>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800292e:	4a5d      	ldr	r2, [pc, #372]	@ (8002aa4 <HAL_RCC_ClockConfig+0x264>)
 8002930:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002934:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002936:	2380      	movs	r3, #128	@ 0x80
 8002938:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800293a:	4b5a      	ldr	r3, [pc, #360]	@ (8002aa4 <HAL_RCC_ClockConfig+0x264>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f023 0203 	bic.w	r2, r3, #3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	4957      	ldr	r1, [pc, #348]	@ (8002aa4 <HAL_RCC_ClockConfig+0x264>)
 8002948:	4313      	orrs	r3, r2
 800294a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800294c:	f7ff f802 	bl	8001954 <HAL_GetTick>
 8002950:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002952:	e00a      	b.n	800296a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002954:	f7fe fffe 	bl	8001954 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002962:	4293      	cmp	r3, r2
 8002964:	d901      	bls.n	800296a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e095      	b.n	8002a96 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800296a:	4b4e      	ldr	r3, [pc, #312]	@ (8002aa4 <HAL_RCC_ClockConfig+0x264>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 020c 	and.w	r2, r3, #12
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	429a      	cmp	r2, r3
 800297a:	d1eb      	bne.n	8002954 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d023      	beq.n	80029d0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	2b00      	cmp	r3, #0
 8002992:	d005      	beq.n	80029a0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002994:	4b43      	ldr	r3, [pc, #268]	@ (8002aa4 <HAL_RCC_ClockConfig+0x264>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	4a42      	ldr	r2, [pc, #264]	@ (8002aa4 <HAL_RCC_ClockConfig+0x264>)
 800299a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800299e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0308 	and.w	r3, r3, #8
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d007      	beq.n	80029bc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80029ac:	4b3d      	ldr	r3, [pc, #244]	@ (8002aa4 <HAL_RCC_ClockConfig+0x264>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80029b4:	4a3b      	ldr	r2, [pc, #236]	@ (8002aa4 <HAL_RCC_ClockConfig+0x264>)
 80029b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80029ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029bc:	4b39      	ldr	r3, [pc, #228]	@ (8002aa4 <HAL_RCC_ClockConfig+0x264>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	4936      	ldr	r1, [pc, #216]	@ (8002aa4 <HAL_RCC_ClockConfig+0x264>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	608b      	str	r3, [r1, #8]
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	2b80      	cmp	r3, #128	@ 0x80
 80029d4:	d105      	bne.n	80029e2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80029d6:	4b33      	ldr	r3, [pc, #204]	@ (8002aa4 <HAL_RCC_ClockConfig+0x264>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	4a32      	ldr	r2, [pc, #200]	@ (8002aa4 <HAL_RCC_ClockConfig+0x264>)
 80029dc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80029e0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029e2:	4b2f      	ldr	r3, [pc, #188]	@ (8002aa0 <HAL_RCC_ClockConfig+0x260>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 030f 	and.w	r3, r3, #15
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d21d      	bcs.n	8002a2c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f0:	4b2b      	ldr	r3, [pc, #172]	@ (8002aa0 <HAL_RCC_ClockConfig+0x260>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f023 020f 	bic.w	r2, r3, #15
 80029f8:	4929      	ldr	r1, [pc, #164]	@ (8002aa0 <HAL_RCC_ClockConfig+0x260>)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a00:	f7fe ffa8 	bl	8001954 <HAL_GetTick>
 8002a04:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a06:	e00a      	b.n	8002a1e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a08:	f7fe ffa4 	bl	8001954 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e03b      	b.n	8002a96 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1e:	4b20      	ldr	r3, [pc, #128]	@ (8002aa0 <HAL_RCC_ClockConfig+0x260>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 030f 	and.w	r3, r3, #15
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d1ed      	bne.n	8002a08 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0304 	and.w	r3, r3, #4
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d008      	beq.n	8002a4a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a38:	4b1a      	ldr	r3, [pc, #104]	@ (8002aa4 <HAL_RCC_ClockConfig+0x264>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	4917      	ldr	r1, [pc, #92]	@ (8002aa4 <HAL_RCC_ClockConfig+0x264>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0308 	and.w	r3, r3, #8
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d009      	beq.n	8002a6a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a56:	4b13      	ldr	r3, [pc, #76]	@ (8002aa4 <HAL_RCC_ClockConfig+0x264>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	490f      	ldr	r1, [pc, #60]	@ (8002aa4 <HAL_RCC_ClockConfig+0x264>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a6a:	f000 f825 	bl	8002ab8 <HAL_RCC_GetSysClockFreq>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa4 <HAL_RCC_ClockConfig+0x264>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	091b      	lsrs	r3, r3, #4
 8002a76:	f003 030f 	and.w	r3, r3, #15
 8002a7a:	490c      	ldr	r1, [pc, #48]	@ (8002aac <HAL_RCC_ClockConfig+0x26c>)
 8002a7c:	5ccb      	ldrb	r3, [r1, r3]
 8002a7e:	f003 031f 	and.w	r3, r3, #31
 8002a82:	fa22 f303 	lsr.w	r3, r2, r3
 8002a86:	4a0a      	ldr	r2, [pc, #40]	@ (8002ab0 <HAL_RCC_ClockConfig+0x270>)
 8002a88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002a8a:	4b0a      	ldr	r3, [pc, #40]	@ (8002ab4 <HAL_RCC_ClockConfig+0x274>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7fe ff14 	bl	80018bc <HAL_InitTick>
 8002a94:	4603      	mov	r3, r0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3718      	adds	r7, #24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40022000 	.word	0x40022000
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	04c4b400 	.word	0x04c4b400
 8002aac:	08007f10 	.word	0x08007f10
 8002ab0:	20000020 	.word	0x20000020
 8002ab4:	20000024 	.word	0x20000024

08002ab8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b087      	sub	sp, #28
 8002abc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002abe:	4b2c      	ldr	r3, [pc, #176]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 030c 	and.w	r3, r3, #12
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	d102      	bne.n	8002ad0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002aca:	4b2a      	ldr	r3, [pc, #168]	@ (8002b74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002acc:	613b      	str	r3, [r7, #16]
 8002ace:	e047      	b.n	8002b60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002ad0:	4b27      	ldr	r3, [pc, #156]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f003 030c 	and.w	r3, r3, #12
 8002ad8:	2b08      	cmp	r3, #8
 8002ada:	d102      	bne.n	8002ae2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002adc:	4b26      	ldr	r3, [pc, #152]	@ (8002b78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ade:	613b      	str	r3, [r7, #16]
 8002ae0:	e03e      	b.n	8002b60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002ae2:	4b23      	ldr	r3, [pc, #140]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 030c 	and.w	r3, r3, #12
 8002aea:	2b0c      	cmp	r3, #12
 8002aec:	d136      	bne.n	8002b5c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002aee:	4b20      	ldr	r3, [pc, #128]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	f003 0303 	and.w	r3, r3, #3
 8002af6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002af8:	4b1d      	ldr	r3, [pc, #116]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	091b      	lsrs	r3, r3, #4
 8002afe:	f003 030f 	and.w	r3, r3, #15
 8002b02:	3301      	adds	r3, #1
 8002b04:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2b03      	cmp	r3, #3
 8002b0a:	d10c      	bne.n	8002b26 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b0c:	4a1a      	ldr	r2, [pc, #104]	@ (8002b78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b14:	4a16      	ldr	r2, [pc, #88]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b16:	68d2      	ldr	r2, [r2, #12]
 8002b18:	0a12      	lsrs	r2, r2, #8
 8002b1a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b1e:	fb02 f303 	mul.w	r3, r2, r3
 8002b22:	617b      	str	r3, [r7, #20]
      break;
 8002b24:	e00c      	b.n	8002b40 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b26:	4a13      	ldr	r2, [pc, #76]	@ (8002b74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b2e:	4a10      	ldr	r2, [pc, #64]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b30:	68d2      	ldr	r2, [r2, #12]
 8002b32:	0a12      	lsrs	r2, r2, #8
 8002b34:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b38:	fb02 f303 	mul.w	r3, r2, r3
 8002b3c:	617b      	str	r3, [r7, #20]
      break;
 8002b3e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b40:	4b0b      	ldr	r3, [pc, #44]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	0e5b      	lsrs	r3, r3, #25
 8002b46:	f003 0303 	and.w	r3, r3, #3
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002b50:	697a      	ldr	r2, [r7, #20]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b58:	613b      	str	r3, [r7, #16]
 8002b5a:	e001      	b.n	8002b60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002b60:	693b      	ldr	r3, [r7, #16]
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	371c      	adds	r7, #28
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	40021000 	.word	0x40021000
 8002b74:	00f42400 	.word	0x00f42400
 8002b78:	016e3600 	.word	0x016e3600

08002b7c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b80:	4b03      	ldr	r3, [pc, #12]	@ (8002b90 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b82:	681b      	ldr	r3, [r3, #0]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	20000020 	.word	0x20000020

08002b94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002b98:	f7ff fff0 	bl	8002b7c <HAL_RCC_GetHCLKFreq>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	4b06      	ldr	r3, [pc, #24]	@ (8002bb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	0a1b      	lsrs	r3, r3, #8
 8002ba4:	f003 0307 	and.w	r3, r3, #7
 8002ba8:	4904      	ldr	r1, [pc, #16]	@ (8002bbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002baa:	5ccb      	ldrb	r3, [r1, r3]
 8002bac:	f003 031f 	and.w	r3, r3, #31
 8002bb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	08007f20 	.word	0x08007f20

08002bc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002bc4:	f7ff ffda 	bl	8002b7c <HAL_RCC_GetHCLKFreq>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	4b06      	ldr	r3, [pc, #24]	@ (8002be4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	0adb      	lsrs	r3, r3, #11
 8002bd0:	f003 0307 	and.w	r3, r3, #7
 8002bd4:	4904      	ldr	r1, [pc, #16]	@ (8002be8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002bd6:	5ccb      	ldrb	r3, [r1, r3]
 8002bd8:	f003 031f 	and.w	r3, r3, #31
 8002bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	40021000 	.word	0x40021000
 8002be8:	08007f20 	.word	0x08007f20

08002bec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b087      	sub	sp, #28
 8002bf0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002bf2:	4b1e      	ldr	r3, [pc, #120]	@ (8002c6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	f003 0303 	and.w	r3, r3, #3
 8002bfa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002bfc:	4b1b      	ldr	r3, [pc, #108]	@ (8002c6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	091b      	lsrs	r3, r3, #4
 8002c02:	f003 030f 	and.w	r3, r3, #15
 8002c06:	3301      	adds	r3, #1
 8002c08:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	2b03      	cmp	r3, #3
 8002c0e:	d10c      	bne.n	8002c2a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c10:	4a17      	ldr	r2, [pc, #92]	@ (8002c70 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c18:	4a14      	ldr	r2, [pc, #80]	@ (8002c6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c1a:	68d2      	ldr	r2, [r2, #12]
 8002c1c:	0a12      	lsrs	r2, r2, #8
 8002c1e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002c22:	fb02 f303 	mul.w	r3, r2, r3
 8002c26:	617b      	str	r3, [r7, #20]
    break;
 8002c28:	e00c      	b.n	8002c44 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c2a:	4a12      	ldr	r2, [pc, #72]	@ (8002c74 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c32:	4a0e      	ldr	r2, [pc, #56]	@ (8002c6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c34:	68d2      	ldr	r2, [r2, #12]
 8002c36:	0a12      	lsrs	r2, r2, #8
 8002c38:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002c3c:	fb02 f303 	mul.w	r3, r2, r3
 8002c40:	617b      	str	r3, [r7, #20]
    break;
 8002c42:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c44:	4b09      	ldr	r3, [pc, #36]	@ (8002c6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	0e5b      	lsrs	r3, r3, #25
 8002c4a:	f003 0303 	and.w	r3, r3, #3
 8002c4e:	3301      	adds	r3, #1
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002c54:	697a      	ldr	r2, [r7, #20]
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c5c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002c5e:	687b      	ldr	r3, [r7, #4]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	371c      	adds	r7, #28
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr
 8002c6c:	40021000 	.word	0x40021000
 8002c70:	016e3600 	.word	0x016e3600
 8002c74:	00f42400 	.word	0x00f42400

08002c78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c80:	2300      	movs	r3, #0
 8002c82:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c84:	2300      	movs	r3, #0
 8002c86:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f000 8098 	beq.w	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c96:	2300      	movs	r3, #0
 8002c98:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c9a:	4b43      	ldr	r3, [pc, #268]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d10d      	bne.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ca6:	4b40      	ldr	r3, [pc, #256]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002caa:	4a3f      	ldr	r2, [pc, #252]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cb2:	4b3d      	ldr	r3, [pc, #244]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cba:	60bb      	str	r3, [r7, #8]
 8002cbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cc2:	4b3a      	ldr	r3, [pc, #232]	@ (8002dac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a39      	ldr	r2, [pc, #228]	@ (8002dac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002cc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ccc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002cce:	f7fe fe41 	bl	8001954 <HAL_GetTick>
 8002cd2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cd4:	e009      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cd6:	f7fe fe3d 	bl	8001954 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d902      	bls.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	74fb      	strb	r3, [r7, #19]
        break;
 8002ce8:	e005      	b.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cea:	4b30      	ldr	r3, [pc, #192]	@ (8002dac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d0ef      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002cf6:	7cfb      	ldrb	r3, [r7, #19]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d159      	bne.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002cfc:	4b2a      	ldr	r3, [pc, #168]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d06:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d01e      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d019      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d18:	4b23      	ldr	r3, [pc, #140]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d22:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d24:	4b20      	ldr	r3, [pc, #128]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d2a:	4a1f      	ldr	r2, [pc, #124]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d34:	4b1c      	ldr	r3, [pc, #112]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d3a:	4a1b      	ldr	r2, [pc, #108]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d44:	4a18      	ldr	r2, [pc, #96]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d016      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d56:	f7fe fdfd 	bl	8001954 <HAL_GetTick>
 8002d5a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d5c:	e00b      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d5e:	f7fe fdf9 	bl	8001954 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d902      	bls.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	74fb      	strb	r3, [r7, #19]
            break;
 8002d74:	e006      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d76:	4b0c      	ldr	r3, [pc, #48]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d0ec      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002d84:	7cfb      	ldrb	r3, [r7, #19]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10b      	bne.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d8a:	4b07      	ldr	r3, [pc, #28]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d90:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d98:	4903      	ldr	r1, [pc, #12]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002da0:	e008      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002da2:	7cfb      	ldrb	r3, [r7, #19]
 8002da4:	74bb      	strb	r3, [r7, #18]
 8002da6:	e005      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002da8:	40021000 	.word	0x40021000
 8002dac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002db0:	7cfb      	ldrb	r3, [r7, #19]
 8002db2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002db4:	7c7b      	ldrb	r3, [r7, #17]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d105      	bne.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dba:	4ba7      	ldr	r3, [pc, #668]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dbe:	4aa6      	ldr	r2, [pc, #664]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dc4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00a      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dd2:	4ba1      	ldr	r3, [pc, #644]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dd8:	f023 0203 	bic.w	r2, r3, #3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	499d      	ldr	r1, [pc, #628]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00a      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002df4:	4b98      	ldr	r3, [pc, #608]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dfa:	f023 020c 	bic.w	r2, r3, #12
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	4995      	ldr	r1, [pc, #596]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0304 	and.w	r3, r3, #4
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00a      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e16:	4b90      	ldr	r3, [pc, #576]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e1c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	498c      	ldr	r1, [pc, #560]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0308 	and.w	r3, r3, #8
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00a      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e38:	4b87      	ldr	r3, [pc, #540]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e3e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	4984      	ldr	r1, [pc, #528]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0310 	and.w	r3, r3, #16
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00a      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e5a:	4b7f      	ldr	r3, [pc, #508]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e60:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	497b      	ldr	r1, [pc, #492]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0320 	and.w	r3, r3, #32
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00a      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e7c:	4b76      	ldr	r3, [pc, #472]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e82:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	4973      	ldr	r1, [pc, #460]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00a      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e9e:	4b6e      	ldr	r3, [pc, #440]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ea4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	69db      	ldr	r3, [r3, #28]
 8002eac:	496a      	ldr	r1, [pc, #424]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00a      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ec0:	4b65      	ldr	r3, [pc, #404]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ec6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	4962      	ldr	r1, [pc, #392]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00a      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ee2:	4b5d      	ldr	r3, [pc, #372]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ee8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef0:	4959      	ldr	r1, [pc, #356]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00a      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002f04:	4b54      	ldr	r3, [pc, #336]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f06:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002f0a:	f023 0203 	bic.w	r2, r3, #3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f12:	4951      	ldr	r1, [pc, #324]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00a      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f26:	4b4c      	ldr	r3, [pc, #304]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f2c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f34:	4948      	ldr	r1, [pc, #288]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d015      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f48:	4b43      	ldr	r3, [pc, #268]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f4e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f56:	4940      	ldr	r1, [pc, #256]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f66:	d105      	bne.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f68:	4b3b      	ldr	r3, [pc, #236]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	4a3a      	ldr	r2, [pc, #232]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f72:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d015      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f80:	4b35      	ldr	r3, [pc, #212]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f86:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f8e:	4932      	ldr	r1, [pc, #200]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f9e:	d105      	bne.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fa0:	4b2d      	ldr	r3, [pc, #180]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	4a2c      	ldr	r2, [pc, #176]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fa6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002faa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d015      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002fb8:	4b27      	ldr	r3, [pc, #156]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fbe:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fc6:	4924      	ldr	r1, [pc, #144]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fd2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fd6:	d105      	bne.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fd8:	4b1f      	ldr	r3, [pc, #124]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	4a1e      	ldr	r2, [pc, #120]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fe2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d015      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ff0:	4b19      	ldr	r3, [pc, #100]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ff6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ffe:	4916      	ldr	r1, [pc, #88]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003000:	4313      	orrs	r3, r2
 8003002:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800300a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800300e:	d105      	bne.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003010:	4b11      	ldr	r3, [pc, #68]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	4a10      	ldr	r2, [pc, #64]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003016:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800301a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d019      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003028:	4b0b      	ldr	r3, [pc, #44]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800302a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800302e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003036:	4908      	ldr	r1, [pc, #32]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003038:	4313      	orrs	r3, r2
 800303a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003042:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003046:	d109      	bne.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003048:	4b03      	ldr	r3, [pc, #12]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	4a02      	ldr	r2, [pc, #8]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800304e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003052:	60d3      	str	r3, [r2, #12]
 8003054:	e002      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003056:	bf00      	nop
 8003058:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d015      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003068:	4b29      	ldr	r3, [pc, #164]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800306a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800306e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003076:	4926      	ldr	r1, [pc, #152]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003078:	4313      	orrs	r3, r2
 800307a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003082:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003086:	d105      	bne.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003088:	4b21      	ldr	r3, [pc, #132]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	4a20      	ldr	r2, [pc, #128]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800308e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003092:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d015      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80030a0:	4b1b      	ldr	r3, [pc, #108]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030a6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030ae:	4918      	ldr	r1, [pc, #96]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030be:	d105      	bne.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80030c0:	4b13      	ldr	r3, [pc, #76]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	4a12      	ldr	r2, [pc, #72]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030ca:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d015      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80030d8:	4b0d      	ldr	r3, [pc, #52]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80030de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030e6:	490a      	ldr	r1, [pc, #40]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80030f6:	d105      	bne.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030f8:	4b05      	ldr	r3, [pc, #20]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	4a04      	ldr	r2, [pc, #16]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003102:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003104:	7cbb      	ldrb	r3, [r7, #18]
}
 8003106:	4618      	mov	r0, r3
 8003108:	3718      	adds	r7, #24
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	40021000 	.word	0x40021000

08003114 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e09d      	b.n	8003262 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312a:	2b00      	cmp	r3, #0
 800312c:	d108      	bne.n	8003140 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003136:	d009      	beq.n	800314c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	61da      	str	r2, [r3, #28]
 800313e:	e005      	b.n	800314c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d106      	bne.n	800316c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f7fe f8ba 	bl	80012e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2202      	movs	r2, #2
 8003170:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003182:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800318c:	d902      	bls.n	8003194 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800318e:	2300      	movs	r3, #0
 8003190:	60fb      	str	r3, [r7, #12]
 8003192:	e002      	b.n	800319a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003194:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003198:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80031a2:	d007      	beq.n	80031b4 <HAL_SPI_Init+0xa0>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80031ac:	d002      	beq.n	80031b4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80031c4:	431a      	orrs	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	431a      	orrs	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	695b      	ldr	r3, [r3, #20]
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	431a      	orrs	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031e2:	431a      	orrs	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	69db      	ldr	r3, [r3, #28]
 80031e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80031ec:	431a      	orrs	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a1b      	ldr	r3, [r3, #32]
 80031f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031f6:	ea42 0103 	orr.w	r1, r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031fe:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	430a      	orrs	r2, r1
 8003208:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	0c1b      	lsrs	r3, r3, #16
 8003210:	f003 0204 	and.w	r2, r3, #4
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003218:	f003 0310 	and.w	r3, r3, #16
 800321c:	431a      	orrs	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003222:	f003 0308 	and.w	r3, r3, #8
 8003226:	431a      	orrs	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003230:	ea42 0103 	orr.w	r1, r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	430a      	orrs	r2, r1
 8003240:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	69da      	ldr	r2, [r3, #28]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003250:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b088      	sub	sp, #32
 800326e:	af00      	add	r7, sp, #0
 8003270:	60f8      	str	r0, [r7, #12]
 8003272:	60b9      	str	r1, [r7, #8]
 8003274:	603b      	str	r3, [r7, #0]
 8003276:	4613      	mov	r3, r2
 8003278:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800327a:	2300      	movs	r3, #0
 800327c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003284:	2b01      	cmp	r3, #1
 8003286:	d101      	bne.n	800328c <HAL_SPI_Transmit+0x22>
 8003288:	2302      	movs	r3, #2
 800328a:	e15f      	b.n	800354c <HAL_SPI_Transmit+0x2e2>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003294:	f7fe fb5e 	bl	8001954 <HAL_GetTick>
 8003298:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800329a:	88fb      	ldrh	r3, [r7, #6]
 800329c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d002      	beq.n	80032b0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80032aa:	2302      	movs	r3, #2
 80032ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032ae:	e148      	b.n	8003542 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d002      	beq.n	80032bc <HAL_SPI_Transmit+0x52>
 80032b6:	88fb      	ldrh	r3, [r7, #6]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d102      	bne.n	80032c2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032c0:	e13f      	b.n	8003542 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2203      	movs	r2, #3
 80032c6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	88fa      	ldrh	r2, [r7, #6]
 80032da:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	88fa      	ldrh	r2, [r7, #6]
 80032e0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800330c:	d10f      	bne.n	800332e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800331c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800332c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003338:	2b40      	cmp	r3, #64	@ 0x40
 800333a:	d007      	beq.n	800334c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800334a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003354:	d94f      	bls.n	80033f6 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d002      	beq.n	8003364 <HAL_SPI_Transmit+0xfa>
 800335e:	8afb      	ldrh	r3, [r7, #22]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d142      	bne.n	80033ea <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003368:	881a      	ldrh	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003374:	1c9a      	adds	r2, r3, #2
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800337e:	b29b      	uxth	r3, r3
 8003380:	3b01      	subs	r3, #1
 8003382:	b29a      	uxth	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003388:	e02f      	b.n	80033ea <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b02      	cmp	r3, #2
 8003396:	d112      	bne.n	80033be <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800339c:	881a      	ldrh	r2, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033a8:	1c9a      	adds	r2, r3, #2
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	3b01      	subs	r3, #1
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80033bc:	e015      	b.n	80033ea <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033be:	f7fe fac9 	bl	8001954 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d803      	bhi.n	80033d6 <HAL_SPI_Transmit+0x16c>
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d4:	d102      	bne.n	80033dc <HAL_SPI_Transmit+0x172>
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d106      	bne.n	80033ea <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80033e8:	e0ab      	b.n	8003542 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1ca      	bne.n	800338a <HAL_SPI_Transmit+0x120>
 80033f4:	e080      	b.n	80034f8 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d002      	beq.n	8003404 <HAL_SPI_Transmit+0x19a>
 80033fe:	8afb      	ldrh	r3, [r7, #22]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d174      	bne.n	80034ee <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003408:	b29b      	uxth	r3, r3
 800340a:	2b01      	cmp	r3, #1
 800340c:	d912      	bls.n	8003434 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003412:	881a      	ldrh	r2, [r3, #0]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800341e:	1c9a      	adds	r2, r3, #2
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003428:	b29b      	uxth	r3, r3
 800342a:	3b02      	subs	r3, #2
 800342c:	b29a      	uxth	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003432:	e05c      	b.n	80034ee <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	330c      	adds	r3, #12
 800343e:	7812      	ldrb	r2, [r2, #0]
 8003440:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003446:	1c5a      	adds	r2, r3, #1
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003450:	b29b      	uxth	r3, r3
 8003452:	3b01      	subs	r3, #1
 8003454:	b29a      	uxth	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800345a:	e048      	b.n	80034ee <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b02      	cmp	r3, #2
 8003468:	d12b      	bne.n	80034c2 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800346e:	b29b      	uxth	r3, r3
 8003470:	2b01      	cmp	r3, #1
 8003472:	d912      	bls.n	800349a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003478:	881a      	ldrh	r2, [r3, #0]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003484:	1c9a      	adds	r2, r3, #2
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800348e:	b29b      	uxth	r3, r3
 8003490:	3b02      	subs	r3, #2
 8003492:	b29a      	uxth	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003498:	e029      	b.n	80034ee <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	330c      	adds	r3, #12
 80034a4:	7812      	ldrb	r2, [r2, #0]
 80034a6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ac:	1c5a      	adds	r2, r3, #1
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	3b01      	subs	r3, #1
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80034c0:	e015      	b.n	80034ee <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034c2:	f7fe fa47 	bl	8001954 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d803      	bhi.n	80034da <HAL_SPI_Transmit+0x270>
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d8:	d102      	bne.n	80034e0 <HAL_SPI_Transmit+0x276>
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d106      	bne.n	80034ee <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80034ec:	e029      	b.n	8003542 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1b1      	bne.n	800345c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	6839      	ldr	r1, [r7, #0]
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f000 fe0d 	bl	800411c <SPI_EndRxTxTransaction>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d002      	beq.n	800350e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2220      	movs	r2, #32
 800350c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d10a      	bne.n	800352c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003516:	2300      	movs	r3, #0
 8003518:	613b      	str	r3, [r7, #16]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	613b      	str	r3, [r7, #16]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	613b      	str	r3, [r7, #16]
 800352a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003530:	2b00      	cmp	r3, #0
 8003532:	d002      	beq.n	800353a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	77fb      	strb	r3, [r7, #31]
 8003538:	e003      	b.n	8003542 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2201      	movs	r2, #1
 800353e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800354a:	7ffb      	ldrb	r3, [r7, #31]
}
 800354c:	4618      	mov	r0, r3
 800354e:	3720      	adds	r7, #32
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b088      	sub	sp, #32
 8003558:	af02      	add	r7, sp, #8
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	603b      	str	r3, [r7, #0]
 8003560:	4613      	mov	r3, r2
 8003562:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003564:	2300      	movs	r3, #0
 8003566:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b01      	cmp	r3, #1
 8003572:	d002      	beq.n	800357a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003574:	2302      	movs	r3, #2
 8003576:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003578:	e11a      	b.n	80037b0 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003582:	d112      	bne.n	80035aa <HAL_SPI_Receive+0x56>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d10e      	bne.n	80035aa <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2204      	movs	r2, #4
 8003590:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003594:	88fa      	ldrh	r2, [r7, #6]
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	4613      	mov	r3, r2
 800359c:	68ba      	ldr	r2, [r7, #8]
 800359e:	68b9      	ldr	r1, [r7, #8]
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f000 f90e 	bl	80037c2 <HAL_SPI_TransmitReceive>
 80035a6:	4603      	mov	r3, r0
 80035a8:	e107      	b.n	80037ba <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d101      	bne.n	80035b8 <HAL_SPI_Receive+0x64>
 80035b4:	2302      	movs	r3, #2
 80035b6:	e100      	b.n	80037ba <HAL_SPI_Receive+0x266>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035c0:	f7fe f9c8 	bl	8001954 <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d002      	beq.n	80035d2 <HAL_SPI_Receive+0x7e>
 80035cc:	88fb      	ldrh	r3, [r7, #6]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d102      	bne.n	80035d8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80035d6:	e0eb      	b.n	80037b0 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2204      	movs	r2, #4
 80035dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	68ba      	ldr	r2, [r7, #8]
 80035ea:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	88fa      	ldrh	r2, [r7, #6]
 80035f0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	88fa      	ldrh	r2, [r7, #6]
 80035f8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003622:	d908      	bls.n	8003636 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	685a      	ldr	r2, [r3, #4]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003632:	605a      	str	r2, [r3, #4]
 8003634:	e007      	b.n	8003646 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	685a      	ldr	r2, [r3, #4]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003644:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800364e:	d10f      	bne.n	8003670 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800365e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800366e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800367a:	2b40      	cmp	r3, #64	@ 0x40
 800367c:	d007      	beq.n	800368e <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800368c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003696:	d86f      	bhi.n	8003778 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003698:	e034      	b.n	8003704 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d117      	bne.n	80036d8 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f103 020c 	add.w	r2, r3, #12
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b4:	7812      	ldrb	r2, [r2, #0]
 80036b6:	b2d2      	uxtb	r2, r2
 80036b8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036be:	1c5a      	adds	r2, r3, #1
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	3b01      	subs	r3, #1
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80036d6:	e015      	b.n	8003704 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036d8:	f7fe f93c 	bl	8001954 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d803      	bhi.n	80036f0 <HAL_SPI_Receive+0x19c>
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ee:	d102      	bne.n	80036f6 <HAL_SPI_Receive+0x1a2>
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d106      	bne.n	8003704 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003702:	e055      	b.n	80037b0 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800370a:	b29b      	uxth	r3, r3
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1c4      	bne.n	800369a <HAL_SPI_Receive+0x146>
 8003710:	e038      	b.n	8003784 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	2b01      	cmp	r3, #1
 800371e:	d115      	bne.n	800374c <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68da      	ldr	r2, [r3, #12]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372a:	b292      	uxth	r2, r2
 800372c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003732:	1c9a      	adds	r2, r3, #2
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800373e:	b29b      	uxth	r3, r3
 8003740:	3b01      	subs	r3, #1
 8003742:	b29a      	uxth	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800374a:	e015      	b.n	8003778 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800374c:	f7fe f902 	bl	8001954 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	429a      	cmp	r2, r3
 800375a:	d803      	bhi.n	8003764 <HAL_SPI_Receive+0x210>
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003762:	d102      	bne.n	800376a <HAL_SPI_Receive+0x216>
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d106      	bne.n	8003778 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003776:	e01b      	b.n	80037b0 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800377e:	b29b      	uxth	r3, r3
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1c6      	bne.n	8003712 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	6839      	ldr	r1, [r7, #0]
 8003788:	68f8      	ldr	r0, [r7, #12]
 800378a:	f000 fc6f 	bl	800406c <SPI_EndRxTransaction>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d002      	beq.n	800379a <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2220      	movs	r2, #32
 8003798:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d002      	beq.n	80037a8 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	75fb      	strb	r3, [r7, #23]
 80037a6:	e003      	b.n	80037b0 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80037b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3718      	adds	r7, #24
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b08a      	sub	sp, #40	@ 0x28
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	60f8      	str	r0, [r7, #12]
 80037ca:	60b9      	str	r1, [r7, #8]
 80037cc:	607a      	str	r2, [r7, #4]
 80037ce:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80037d0:	2301      	movs	r3, #1
 80037d2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80037d4:	2300      	movs	r3, #0
 80037d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d101      	bne.n	80037e8 <HAL_SPI_TransmitReceive+0x26>
 80037e4:	2302      	movs	r3, #2
 80037e6:	e20a      	b.n	8003bfe <HAL_SPI_TransmitReceive+0x43c>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037f0:	f7fe f8b0 	bl	8001954 <HAL_GetTick>
 80037f4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80037fc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003804:	887b      	ldrh	r3, [r7, #2]
 8003806:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003808:	887b      	ldrh	r3, [r7, #2]
 800380a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800380c:	7efb      	ldrb	r3, [r7, #27]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d00e      	beq.n	8003830 <HAL_SPI_TransmitReceive+0x6e>
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003818:	d106      	bne.n	8003828 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d102      	bne.n	8003828 <HAL_SPI_TransmitReceive+0x66>
 8003822:	7efb      	ldrb	r3, [r7, #27]
 8003824:	2b04      	cmp	r3, #4
 8003826:	d003      	beq.n	8003830 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003828:	2302      	movs	r3, #2
 800382a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800382e:	e1e0      	b.n	8003bf2 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d005      	beq.n	8003842 <HAL_SPI_TransmitReceive+0x80>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d002      	beq.n	8003842 <HAL_SPI_TransmitReceive+0x80>
 800383c:	887b      	ldrh	r3, [r7, #2]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d103      	bne.n	800384a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003848:	e1d3      	b.n	8003bf2 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b04      	cmp	r3, #4
 8003854:	d003      	beq.n	800385e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2205      	movs	r2, #5
 800385a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	887a      	ldrh	r2, [r7, #2]
 800386e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	887a      	ldrh	r2, [r7, #2]
 8003876:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	68ba      	ldr	r2, [r7, #8]
 800387e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	887a      	ldrh	r2, [r7, #2]
 8003884:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	887a      	ldrh	r2, [r7, #2]
 800388a:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80038a0:	d802      	bhi.n	80038a8 <HAL_SPI_TransmitReceive+0xe6>
 80038a2:	8a3b      	ldrh	r3, [r7, #16]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d908      	bls.n	80038ba <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	685a      	ldr	r2, [r3, #4]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80038b6:	605a      	str	r2, [r3, #4]
 80038b8:	e007      	b.n	80038ca <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	685a      	ldr	r2, [r3, #4]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80038c8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038d4:	2b40      	cmp	r3, #64	@ 0x40
 80038d6:	d007      	beq.n	80038e8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80038e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80038f0:	f240 8081 	bls.w	80039f6 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d002      	beq.n	8003902 <HAL_SPI_TransmitReceive+0x140>
 80038fc:	8a7b      	ldrh	r3, [r7, #18]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d16d      	bne.n	80039de <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003906:	881a      	ldrh	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003912:	1c9a      	adds	r2, r3, #2
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800391c:	b29b      	uxth	r3, r3
 800391e:	3b01      	subs	r3, #1
 8003920:	b29a      	uxth	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003926:	e05a      	b.n	80039de <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b02      	cmp	r3, #2
 8003934:	d11b      	bne.n	800396e <HAL_SPI_TransmitReceive+0x1ac>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800393a:	b29b      	uxth	r3, r3
 800393c:	2b00      	cmp	r3, #0
 800393e:	d016      	beq.n	800396e <HAL_SPI_TransmitReceive+0x1ac>
 8003940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003942:	2b01      	cmp	r3, #1
 8003944:	d113      	bne.n	800396e <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800394a:	881a      	ldrh	r2, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003956:	1c9a      	adds	r2, r3, #2
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003960:	b29b      	uxth	r3, r3
 8003962:	3b01      	subs	r3, #1
 8003964:	b29a      	uxth	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800396a:	2300      	movs	r3, #0
 800396c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f003 0301 	and.w	r3, r3, #1
 8003978:	2b01      	cmp	r3, #1
 800397a:	d11c      	bne.n	80039b6 <HAL_SPI_TransmitReceive+0x1f4>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003982:	b29b      	uxth	r3, r3
 8003984:	2b00      	cmp	r3, #0
 8003986:	d016      	beq.n	80039b6 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68da      	ldr	r2, [r3, #12]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003992:	b292      	uxth	r2, r2
 8003994:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800399a:	1c9a      	adds	r2, r3, #2
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	3b01      	subs	r3, #1
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80039b2:	2301      	movs	r3, #1
 80039b4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80039b6:	f7fd ffcd 	bl	8001954 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d80b      	bhi.n	80039de <HAL_SPI_TransmitReceive+0x21c>
 80039c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039cc:	d007      	beq.n	80039de <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80039dc:	e109      	b.n	8003bf2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d19f      	bne.n	8003928 <HAL_SPI_TransmitReceive+0x166>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d199      	bne.n	8003928 <HAL_SPI_TransmitReceive+0x166>
 80039f4:	e0e3      	b.n	8003bbe <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d003      	beq.n	8003a06 <HAL_SPI_TransmitReceive+0x244>
 80039fe:	8a7b      	ldrh	r3, [r7, #18]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	f040 80cf 	bne.w	8003ba4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d912      	bls.n	8003a36 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a14:	881a      	ldrh	r2, [r3, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a20:	1c9a      	adds	r2, r3, #2
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	3b02      	subs	r3, #2
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003a34:	e0b6      	b.n	8003ba4 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	330c      	adds	r3, #12
 8003a40:	7812      	ldrb	r2, [r2, #0]
 8003a42:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a48:	1c5a      	adds	r2, r3, #1
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	3b01      	subs	r3, #1
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a5c:	e0a2      	b.n	8003ba4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d134      	bne.n	8003ad6 <HAL_SPI_TransmitReceive+0x314>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d02f      	beq.n	8003ad6 <HAL_SPI_TransmitReceive+0x314>
 8003a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d12c      	bne.n	8003ad6 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d912      	bls.n	8003aac <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a8a:	881a      	ldrh	r2, [r3, #0]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a96:	1c9a      	adds	r2, r3, #2
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	3b02      	subs	r3, #2
 8003aa4:	b29a      	uxth	r2, r3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003aaa:	e012      	b.n	8003ad2 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	330c      	adds	r3, #12
 8003ab6:	7812      	ldrb	r2, [r2, #0]
 8003ab8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003abe:	1c5a      	adds	r2, r3, #1
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	3b01      	subs	r3, #1
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f003 0301 	and.w	r3, r3, #1
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d148      	bne.n	8003b76 <HAL_SPI_TransmitReceive+0x3b4>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d042      	beq.n	8003b76 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d923      	bls.n	8003b44 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68da      	ldr	r2, [r3, #12]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b06:	b292      	uxth	r2, r2
 8003b08:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b0e:	1c9a      	adds	r2, r3, #2
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	3b02      	subs	r3, #2
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d81f      	bhi.n	8003b72 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	685a      	ldr	r2, [r3, #4]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003b40:	605a      	str	r2, [r3, #4]
 8003b42:	e016      	b.n	8003b72 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f103 020c 	add.w	r2, r3, #12
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b50:	7812      	ldrb	r2, [r2, #0]
 8003b52:	b2d2      	uxtb	r2, r2
 8003b54:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b5a:	1c5a      	adds	r2, r3, #1
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b72:	2301      	movs	r3, #1
 8003b74:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003b76:	f7fd feed 	bl	8001954 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d803      	bhi.n	8003b8e <HAL_SPI_TransmitReceive+0x3cc>
 8003b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b8c:	d102      	bne.n	8003b94 <HAL_SPI_TransmitReceive+0x3d2>
 8003b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d107      	bne.n	8003ba4 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003ba2:	e026      	b.n	8003bf2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f47f af57 	bne.w	8003a5e <HAL_SPI_TransmitReceive+0x29c>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f47f af50 	bne.w	8003a5e <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003bbe:	69fa      	ldr	r2, [r7, #28]
 8003bc0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f000 faaa 	bl	800411c <SPI_EndRxTxTransaction>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d005      	beq.n	8003bda <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003be8:	e003      	b.n	8003bf2 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003bfa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3728      	adds	r7, #40	@ 0x28
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
	...

08003c08 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b088      	sub	sp, #32
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d10e      	bne.n	8003c48 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d009      	beq.n	8003c48 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d004      	beq.n	8003c48 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	4798      	blx	r3
    return;
 8003c46:	e0ce      	b.n	8003de6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d009      	beq.n	8003c66 <HAL_SPI_IRQHandler+0x5e>
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d004      	beq.n	8003c66 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	4798      	blx	r3
    return;
 8003c64:	e0bf      	b.n	8003de6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	f003 0320 	and.w	r3, r3, #32
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d10a      	bne.n	8003c86 <HAL_SPI_IRQHandler+0x7e>
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d105      	bne.n	8003c86 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f000 80b0 	beq.w	8003de6 <HAL_SPI_IRQHandler+0x1de>
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	f003 0320 	and.w	r3, r3, #32
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 80aa 	beq.w	8003de6 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d023      	beq.n	8003ce4 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b03      	cmp	r3, #3
 8003ca6:	d011      	beq.n	8003ccc <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cac:	f043 0204 	orr.w	r2, r3, #4
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	617b      	str	r3, [r7, #20]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	617b      	str	r3, [r7, #20]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	617b      	str	r3, [r7, #20]
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	e00b      	b.n	8003ce4 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ccc:	2300      	movs	r3, #0
 8003cce:	613b      	str	r3, [r7, #16]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	613b      	str	r3, [r7, #16]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	613b      	str	r3, [r7, #16]
 8003ce0:	693b      	ldr	r3, [r7, #16]
        return;
 8003ce2:	e080      	b.n	8003de6 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	f003 0320 	and.w	r3, r3, #32
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d014      	beq.n	8003d18 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cf2:	f043 0201 	orr.w	r2, r3, #1
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	60fb      	str	r3, [r7, #12]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	60fb      	str	r3, [r7, #12]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d14:	601a      	str	r2, [r3, #0]
 8003d16:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00c      	beq.n	8003d3c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d26:	f043 0208 	orr.w	r2, r3, #8
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003d2e:	2300      	movs	r3, #0
 8003d30:	60bb      	str	r3, [r7, #8]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	60bb      	str	r3, [r7, #8]
 8003d3a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d04f      	beq.n	8003de4 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	685a      	ldr	r2, [r3, #4]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003d52:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d104      	bne.n	8003d70 <HAL_SPI_IRQHandler+0x168>
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	f003 0301 	and.w	r3, r3, #1
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d034      	beq.n	8003dda <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685a      	ldr	r2, [r3, #4]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f022 0203 	bic.w	r2, r2, #3
 8003d7e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d011      	beq.n	8003dac <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d8c:	4a17      	ldr	r2, [pc, #92]	@ (8003dec <HAL_SPI_IRQHandler+0x1e4>)
 8003d8e:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7fd ff73 	bl	8001c80 <HAL_DMA_Abort_IT>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d005      	beq.n	8003dac <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003da4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d016      	beq.n	8003de2 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003db8:	4a0c      	ldr	r2, [pc, #48]	@ (8003dec <HAL_SPI_IRQHandler+0x1e4>)
 8003dba:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7fd ff5d 	bl	8001c80 <HAL_DMA_Abort_IT>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00a      	beq.n	8003de2 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dd0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8003dd8:	e003      	b.n	8003de2 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 f808 	bl	8003df0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003de0:	e000      	b.n	8003de4 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8003de2:	bf00      	nop
    return;
 8003de4:	bf00      	nop
  }
}
 8003de6:	3720      	adds	r7, #32
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	08003e05 	.word	0x08003e05

08003df0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e10:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f7ff ffe5 	bl	8003df0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003e26:	bf00      	nop
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
	...

08003e30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b088      	sub	sp, #32
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	603b      	str	r3, [r7, #0]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e40:	f7fd fd88 	bl	8001954 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e48:	1a9b      	subs	r3, r3, r2
 8003e4a:	683a      	ldr	r2, [r7, #0]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003e50:	f7fd fd80 	bl	8001954 <HAL_GetTick>
 8003e54:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e56:	4b39      	ldr	r3, [pc, #228]	@ (8003f3c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	015b      	lsls	r3, r3, #5
 8003e5c:	0d1b      	lsrs	r3, r3, #20
 8003e5e:	69fa      	ldr	r2, [r7, #28]
 8003e60:	fb02 f303 	mul.w	r3, r2, r3
 8003e64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e66:	e054      	b.n	8003f12 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e6e:	d050      	beq.n	8003f12 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e70:	f7fd fd70 	bl	8001954 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	69fa      	ldr	r2, [r7, #28]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d902      	bls.n	8003e86 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d13d      	bne.n	8003f02 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	685a      	ldr	r2, [r3, #4]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003e94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e9e:	d111      	bne.n	8003ec4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ea8:	d004      	beq.n	8003eb4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003eb2:	d107      	bne.n	8003ec4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ec2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ec8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ecc:	d10f      	bne.n	8003eee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003edc:	601a      	str	r2, [r3, #0]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003eec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e017      	b.n	8003f32 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d101      	bne.n	8003f0c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	689a      	ldr	r2, [r3, #8]
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	68ba      	ldr	r2, [r7, #8]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	bf0c      	ite	eq
 8003f22:	2301      	moveq	r3, #1
 8003f24:	2300      	movne	r3, #0
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	461a      	mov	r2, r3
 8003f2a:	79fb      	ldrb	r3, [r7, #7]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d19b      	bne.n	8003e68 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3720      	adds	r7, #32
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	20000020 	.word	0x20000020

08003f40 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b08a      	sub	sp, #40	@ 0x28
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
 8003f4c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003f52:	f7fd fcff 	bl	8001954 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f5a:	1a9b      	subs	r3, r3, r2
 8003f5c:	683a      	ldr	r2, [r7, #0]
 8003f5e:	4413      	add	r3, r2
 8003f60:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003f62:	f7fd fcf7 	bl	8001954 <HAL_GetTick>
 8003f66:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	330c      	adds	r3, #12
 8003f6e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003f70:	4b3d      	ldr	r3, [pc, #244]	@ (8004068 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	4613      	mov	r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	4413      	add	r3, r2
 8003f7a:	00da      	lsls	r2, r3, #3
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	0d1b      	lsrs	r3, r3, #20
 8003f80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f82:	fb02 f303 	mul.w	r3, r2, r3
 8003f86:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003f88:	e060      	b.n	800404c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003f90:	d107      	bne.n	8003fa2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d104      	bne.n	8003fa2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003fa0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa8:	d050      	beq.n	800404c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003faa:	f7fd fcd3 	bl	8001954 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	6a3b      	ldr	r3, [r7, #32]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d902      	bls.n	8003fc0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d13d      	bne.n	800403c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	685a      	ldr	r2, [r3, #4]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003fce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003fd8:	d111      	bne.n	8003ffe <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fe2:	d004      	beq.n	8003fee <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fec:	d107      	bne.n	8003ffe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ffc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004002:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004006:	d10f      	bne.n	8004028 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004016:	601a      	str	r2, [r3, #0]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004026:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e010      	b.n	800405e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004042:	2300      	movs	r3, #0
 8004044:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	3b01      	subs	r3, #1
 800404a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	689a      	ldr	r2, [r3, #8]
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	4013      	ands	r3, r2
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	429a      	cmp	r2, r3
 800405a:	d196      	bne.n	8003f8a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3728      	adds	r7, #40	@ 0x28
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	20000020 	.word	0x20000020

0800406c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b086      	sub	sp, #24
 8004070:	af02      	add	r7, sp, #8
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004080:	d111      	bne.n	80040a6 <SPI_EndRxTransaction+0x3a>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800408a:	d004      	beq.n	8004096 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004094:	d107      	bne.n	80040a6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040a4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	9300      	str	r3, [sp, #0]
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	2200      	movs	r2, #0
 80040ae:	2180      	movs	r1, #128	@ 0x80
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f7ff febd 	bl	8003e30 <SPI_WaitFlagStateUntilTimeout>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d007      	beq.n	80040cc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040c0:	f043 0220 	orr.w	r2, r3, #32
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e023      	b.n	8004114 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040d4:	d11d      	bne.n	8004112 <SPI_EndRxTransaction+0xa6>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040de:	d004      	beq.n	80040ea <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040e8:	d113      	bne.n	8004112 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	9300      	str	r3, [sp, #0]
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f7ff ff22 	bl	8003f40 <SPI_WaitFifoStateUntilTimeout>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d007      	beq.n	8004112 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004106:	f043 0220 	orr.w	r2, r3, #32
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e000      	b.n	8004114 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	3710      	adds	r7, #16
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af02      	add	r7, sp, #8
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	9300      	str	r3, [sp, #0]
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	2200      	movs	r2, #0
 8004130:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	f7ff ff03 	bl	8003f40 <SPI_WaitFifoStateUntilTimeout>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d007      	beq.n	8004150 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004144:	f043 0220 	orr.w	r2, r3, #32
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e027      	b.n	80041a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	9300      	str	r3, [sp, #0]
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	2200      	movs	r2, #0
 8004158:	2180      	movs	r1, #128	@ 0x80
 800415a:	68f8      	ldr	r0, [r7, #12]
 800415c:	f7ff fe68 	bl	8003e30 <SPI_WaitFlagStateUntilTimeout>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d007      	beq.n	8004176 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800416a:	f043 0220 	orr.w	r2, r3, #32
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e014      	b.n	80041a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	9300      	str	r3, [sp, #0]
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	2200      	movs	r2, #0
 800417e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f7ff fedc 	bl	8003f40 <SPI_WaitFifoStateUntilTimeout>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d007      	beq.n	800419e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004192:	f043 0220 	orr.w	r2, r3, #32
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e000      	b.n	80041a0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3710      	adds	r7, #16
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e049      	b.n	800424e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d106      	bne.n	80041d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f7fd f8f0 	bl	80013b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2202      	movs	r2, #2
 80041d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	3304      	adds	r3, #4
 80041e4:	4619      	mov	r1, r3
 80041e6:	4610      	mov	r0, r2
 80041e8:	f000 fe88 	bl	8004efc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3708      	adds	r7, #8
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}

08004256 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004256:	b580      	push	{r7, lr}
 8004258:	b082      	sub	sp, #8
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d101      	bne.n	8004268 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e049      	b.n	80042fc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800426e:	b2db      	uxtb	r3, r3
 8004270:	2b00      	cmp	r3, #0
 8004272:	d106      	bne.n	8004282 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 f841 	bl	8004304 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2202      	movs	r2, #2
 8004286:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	3304      	adds	r3, #4
 8004292:	4619      	mov	r1, r3
 8004294:	4610      	mov	r0, r2
 8004296:	f000 fe31 	bl	8004efc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2201      	movs	r2, #1
 80042ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2201      	movs	r2, #1
 80042ee:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3708      	adds	r7, #8
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d109      	bne.n	800433c <HAL_TIM_PWM_Start+0x24>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800432e:	b2db      	uxtb	r3, r3
 8004330:	2b01      	cmp	r3, #1
 8004332:	bf14      	ite	ne
 8004334:	2301      	movne	r3, #1
 8004336:	2300      	moveq	r3, #0
 8004338:	b2db      	uxtb	r3, r3
 800433a:	e03c      	b.n	80043b6 <HAL_TIM_PWM_Start+0x9e>
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	2b04      	cmp	r3, #4
 8004340:	d109      	bne.n	8004356 <HAL_TIM_PWM_Start+0x3e>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b01      	cmp	r3, #1
 800434c:	bf14      	ite	ne
 800434e:	2301      	movne	r3, #1
 8004350:	2300      	moveq	r3, #0
 8004352:	b2db      	uxtb	r3, r3
 8004354:	e02f      	b.n	80043b6 <HAL_TIM_PWM_Start+0x9e>
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	2b08      	cmp	r3, #8
 800435a:	d109      	bne.n	8004370 <HAL_TIM_PWM_Start+0x58>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004362:	b2db      	uxtb	r3, r3
 8004364:	2b01      	cmp	r3, #1
 8004366:	bf14      	ite	ne
 8004368:	2301      	movne	r3, #1
 800436a:	2300      	moveq	r3, #0
 800436c:	b2db      	uxtb	r3, r3
 800436e:	e022      	b.n	80043b6 <HAL_TIM_PWM_Start+0x9e>
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	2b0c      	cmp	r3, #12
 8004374:	d109      	bne.n	800438a <HAL_TIM_PWM_Start+0x72>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b01      	cmp	r3, #1
 8004380:	bf14      	ite	ne
 8004382:	2301      	movne	r3, #1
 8004384:	2300      	moveq	r3, #0
 8004386:	b2db      	uxtb	r3, r3
 8004388:	e015      	b.n	80043b6 <HAL_TIM_PWM_Start+0x9e>
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	2b10      	cmp	r3, #16
 800438e:	d109      	bne.n	80043a4 <HAL_TIM_PWM_Start+0x8c>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004396:	b2db      	uxtb	r3, r3
 8004398:	2b01      	cmp	r3, #1
 800439a:	bf14      	ite	ne
 800439c:	2301      	movne	r3, #1
 800439e:	2300      	moveq	r3, #0
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	e008      	b.n	80043b6 <HAL_TIM_PWM_Start+0x9e>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	bf14      	ite	ne
 80043b0:	2301      	movne	r3, #1
 80043b2:	2300      	moveq	r3, #0
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e0a6      	b.n	800450c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d104      	bne.n	80043ce <HAL_TIM_PWM_Start+0xb6>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2202      	movs	r2, #2
 80043c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043cc:	e023      	b.n	8004416 <HAL_TIM_PWM_Start+0xfe>
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	2b04      	cmp	r3, #4
 80043d2:	d104      	bne.n	80043de <HAL_TIM_PWM_Start+0xc6>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2202      	movs	r2, #2
 80043d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043dc:	e01b      	b.n	8004416 <HAL_TIM_PWM_Start+0xfe>
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	2b08      	cmp	r3, #8
 80043e2:	d104      	bne.n	80043ee <HAL_TIM_PWM_Start+0xd6>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2202      	movs	r2, #2
 80043e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043ec:	e013      	b.n	8004416 <HAL_TIM_PWM_Start+0xfe>
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	2b0c      	cmp	r3, #12
 80043f2:	d104      	bne.n	80043fe <HAL_TIM_PWM_Start+0xe6>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2202      	movs	r2, #2
 80043f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80043fc:	e00b      	b.n	8004416 <HAL_TIM_PWM_Start+0xfe>
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	2b10      	cmp	r3, #16
 8004402:	d104      	bne.n	800440e <HAL_TIM_PWM_Start+0xf6>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2202      	movs	r2, #2
 8004408:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800440c:	e003      	b.n	8004416 <HAL_TIM_PWM_Start+0xfe>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2202      	movs	r2, #2
 8004412:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2201      	movs	r2, #1
 800441c:	6839      	ldr	r1, [r7, #0]
 800441e:	4618      	mov	r0, r3
 8004420:	f001 f9e6 	bl	80057f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a3a      	ldr	r2, [pc, #232]	@ (8004514 <HAL_TIM_PWM_Start+0x1fc>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d018      	beq.n	8004460 <HAL_TIM_PWM_Start+0x148>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a39      	ldr	r2, [pc, #228]	@ (8004518 <HAL_TIM_PWM_Start+0x200>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d013      	beq.n	8004460 <HAL_TIM_PWM_Start+0x148>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a37      	ldr	r2, [pc, #220]	@ (800451c <HAL_TIM_PWM_Start+0x204>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d00e      	beq.n	8004460 <HAL_TIM_PWM_Start+0x148>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a36      	ldr	r2, [pc, #216]	@ (8004520 <HAL_TIM_PWM_Start+0x208>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d009      	beq.n	8004460 <HAL_TIM_PWM_Start+0x148>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a34      	ldr	r2, [pc, #208]	@ (8004524 <HAL_TIM_PWM_Start+0x20c>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d004      	beq.n	8004460 <HAL_TIM_PWM_Start+0x148>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a33      	ldr	r2, [pc, #204]	@ (8004528 <HAL_TIM_PWM_Start+0x210>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d101      	bne.n	8004464 <HAL_TIM_PWM_Start+0x14c>
 8004460:	2301      	movs	r3, #1
 8004462:	e000      	b.n	8004466 <HAL_TIM_PWM_Start+0x14e>
 8004464:	2300      	movs	r3, #0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d007      	beq.n	800447a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004478:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a25      	ldr	r2, [pc, #148]	@ (8004514 <HAL_TIM_PWM_Start+0x1fc>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d022      	beq.n	80044ca <HAL_TIM_PWM_Start+0x1b2>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800448c:	d01d      	beq.n	80044ca <HAL_TIM_PWM_Start+0x1b2>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a26      	ldr	r2, [pc, #152]	@ (800452c <HAL_TIM_PWM_Start+0x214>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d018      	beq.n	80044ca <HAL_TIM_PWM_Start+0x1b2>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a24      	ldr	r2, [pc, #144]	@ (8004530 <HAL_TIM_PWM_Start+0x218>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d013      	beq.n	80044ca <HAL_TIM_PWM_Start+0x1b2>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a23      	ldr	r2, [pc, #140]	@ (8004534 <HAL_TIM_PWM_Start+0x21c>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d00e      	beq.n	80044ca <HAL_TIM_PWM_Start+0x1b2>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a19      	ldr	r2, [pc, #100]	@ (8004518 <HAL_TIM_PWM_Start+0x200>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d009      	beq.n	80044ca <HAL_TIM_PWM_Start+0x1b2>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a18      	ldr	r2, [pc, #96]	@ (800451c <HAL_TIM_PWM_Start+0x204>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d004      	beq.n	80044ca <HAL_TIM_PWM_Start+0x1b2>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a18      	ldr	r2, [pc, #96]	@ (8004528 <HAL_TIM_PWM_Start+0x210>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d115      	bne.n	80044f6 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	689a      	ldr	r2, [r3, #8]
 80044d0:	4b19      	ldr	r3, [pc, #100]	@ (8004538 <HAL_TIM_PWM_Start+0x220>)
 80044d2:	4013      	ands	r3, r2
 80044d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2b06      	cmp	r3, #6
 80044da:	d015      	beq.n	8004508 <HAL_TIM_PWM_Start+0x1f0>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044e2:	d011      	beq.n	8004508 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f042 0201 	orr.w	r2, r2, #1
 80044f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044f4:	e008      	b.n	8004508 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f042 0201 	orr.w	r2, r2, #1
 8004504:	601a      	str	r2, [r3, #0]
 8004506:	e000      	b.n	800450a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004508:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	40012c00 	.word	0x40012c00
 8004518:	40013400 	.word	0x40013400
 800451c:	40014000 	.word	0x40014000
 8004520:	40014400 	.word	0x40014400
 8004524:	40014800 	.word	0x40014800
 8004528:	40015000 	.word	0x40015000
 800452c:	40000400 	.word	0x40000400
 8004530:	40000800 	.word	0x40000800
 8004534:	40000c00 	.word	0x40000c00
 8004538:	00010007 	.word	0x00010007

0800453c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b086      	sub	sp, #24
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d101      	bne.n	8004550 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e097      	b.n	8004680 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b00      	cmp	r3, #0
 800455a:	d106      	bne.n	800456a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f7fc ff45 	bl	80013f4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2202      	movs	r2, #2
 800456e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	6812      	ldr	r2, [r2, #0]
 800457c:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8004580:	f023 0307 	bic.w	r3, r3, #7
 8004584:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	3304      	adds	r3, #4
 800458e:	4619      	mov	r1, r3
 8004590:	4610      	mov	r0, r2
 8004592:	f000 fcb3 	bl	8004efc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	697a      	ldr	r2, [r7, #20]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045be:	f023 0303 	bic.w	r3, r3, #3
 80045c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	689a      	ldr	r2, [r3, #8]
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	021b      	lsls	r3, r3, #8
 80045ce:	4313      	orrs	r3, r2
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80045dc:	f023 030c 	bic.w	r3, r3, #12
 80045e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80045e8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	68da      	ldr	r2, [r3, #12]
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	69db      	ldr	r3, [r3, #28]
 80045f6:	021b      	lsls	r3, r3, #8
 80045f8:	4313      	orrs	r3, r2
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	011a      	lsls	r2, r3, #4
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	031b      	lsls	r3, r3, #12
 800460c:	4313      	orrs	r3, r2
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	4313      	orrs	r3, r2
 8004612:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800461a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004622:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	685a      	ldr	r2, [r3, #4]
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	695b      	ldr	r3, [r3, #20]
 800462c:	011b      	lsls	r3, r3, #4
 800462e:	4313      	orrs	r3, r2
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	4313      	orrs	r3, r2
 8004634:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2201      	movs	r2, #1
 800467a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3718      	adds	r7, #24
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004698:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80046a0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80046a8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80046b0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d110      	bne.n	80046da <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80046b8:	7bfb      	ldrb	r3, [r7, #15]
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d102      	bne.n	80046c4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80046be:	7b7b      	ldrb	r3, [r7, #13]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d001      	beq.n	80046c8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e069      	b.n	800479c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2202      	movs	r2, #2
 80046cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2202      	movs	r2, #2
 80046d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046d8:	e031      	b.n	800473e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	2b04      	cmp	r3, #4
 80046de:	d110      	bne.n	8004702 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80046e0:	7bbb      	ldrb	r3, [r7, #14]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d102      	bne.n	80046ec <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80046e6:	7b3b      	ldrb	r3, [r7, #12]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d001      	beq.n	80046f0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e055      	b.n	800479c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2202      	movs	r2, #2
 80046f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2202      	movs	r2, #2
 80046fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004700:	e01d      	b.n	800473e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004702:	7bfb      	ldrb	r3, [r7, #15]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d108      	bne.n	800471a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004708:	7bbb      	ldrb	r3, [r7, #14]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d105      	bne.n	800471a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800470e:	7b7b      	ldrb	r3, [r7, #13]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d102      	bne.n	800471a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004714:	7b3b      	ldrb	r3, [r7, #12]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d001      	beq.n	800471e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e03e      	b.n	800479c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2202      	movs	r2, #2
 8004722:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2202      	movs	r2, #2
 800472a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2202      	movs	r2, #2
 8004732:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2202      	movs	r2, #2
 800473a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d003      	beq.n	800474c <HAL_TIM_Encoder_Start+0xc4>
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	2b04      	cmp	r3, #4
 8004748:	d008      	beq.n	800475c <HAL_TIM_Encoder_Start+0xd4>
 800474a:	e00f      	b.n	800476c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2201      	movs	r2, #1
 8004752:	2100      	movs	r1, #0
 8004754:	4618      	mov	r0, r3
 8004756:	f001 f84b 	bl	80057f0 <TIM_CCxChannelCmd>
      break;
 800475a:	e016      	b.n	800478a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2201      	movs	r2, #1
 8004762:	2104      	movs	r1, #4
 8004764:	4618      	mov	r0, r3
 8004766:	f001 f843 	bl	80057f0 <TIM_CCxChannelCmd>
      break;
 800476a:	e00e      	b.n	800478a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2201      	movs	r2, #1
 8004772:	2100      	movs	r1, #0
 8004774:	4618      	mov	r0, r3
 8004776:	f001 f83b 	bl	80057f0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2201      	movs	r2, #1
 8004780:	2104      	movs	r1, #4
 8004782:	4618      	mov	r0, r3
 8004784:	f001 f834 	bl	80057f0 <TIM_CCxChannelCmd>
      break;
 8004788:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f042 0201 	orr.w	r2, r2, #1
 8004798:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3710      	adds	r7, #16
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	f003 0302 	and.w	r3, r3, #2
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d020      	beq.n	8004808 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f003 0302 	and.w	r3, r3, #2
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d01b      	beq.n	8004808 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f06f 0202 	mvn.w	r2, #2
 80047d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2201      	movs	r2, #1
 80047de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	f003 0303 	and.w	r3, r3, #3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d003      	beq.n	80047f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 fb66 	bl	8004ec0 <HAL_TIM_IC_CaptureCallback>
 80047f4:	e005      	b.n	8004802 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 fb58 	bl	8004eac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 fb69 	bl	8004ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	f003 0304 	and.w	r3, r3, #4
 800480e:	2b00      	cmp	r3, #0
 8004810:	d020      	beq.n	8004854 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f003 0304 	and.w	r3, r3, #4
 8004818:	2b00      	cmp	r3, #0
 800481a:	d01b      	beq.n	8004854 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f06f 0204 	mvn.w	r2, #4
 8004824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2202      	movs	r2, #2
 800482a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004836:	2b00      	cmp	r3, #0
 8004838:	d003      	beq.n	8004842 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 fb40 	bl	8004ec0 <HAL_TIM_IC_CaptureCallback>
 8004840:	e005      	b.n	800484e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 fb32 	bl	8004eac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 fb43 	bl	8004ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	f003 0308 	and.w	r3, r3, #8
 800485a:	2b00      	cmp	r3, #0
 800485c:	d020      	beq.n	80048a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f003 0308 	and.w	r3, r3, #8
 8004864:	2b00      	cmp	r3, #0
 8004866:	d01b      	beq.n	80048a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f06f 0208 	mvn.w	r2, #8
 8004870:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2204      	movs	r2, #4
 8004876:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	69db      	ldr	r3, [r3, #28]
 800487e:	f003 0303 	and.w	r3, r3, #3
 8004882:	2b00      	cmp	r3, #0
 8004884:	d003      	beq.n	800488e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 fb1a 	bl	8004ec0 <HAL_TIM_IC_CaptureCallback>
 800488c:	e005      	b.n	800489a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 fb0c 	bl	8004eac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f000 fb1d 	bl	8004ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	f003 0310 	and.w	r3, r3, #16
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d020      	beq.n	80048ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f003 0310 	and.w	r3, r3, #16
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d01b      	beq.n	80048ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f06f 0210 	mvn.w	r2, #16
 80048bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2208      	movs	r2, #8
 80048c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	69db      	ldr	r3, [r3, #28]
 80048ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d003      	beq.n	80048da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 faf4 	bl	8004ec0 <HAL_TIM_IC_CaptureCallback>
 80048d8:	e005      	b.n	80048e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 fae6 	bl	8004eac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 faf7 	bl	8004ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00c      	beq.n	8004910 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f003 0301 	and.w	r3, r3, #1
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d007      	beq.n	8004910 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f06f 0201 	mvn.w	r2, #1
 8004908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 fac4 	bl	8004e98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004916:	2b00      	cmp	r3, #0
 8004918:	d104      	bne.n	8004924 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00c      	beq.n	800493e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800492a:	2b00      	cmp	r3, #0
 800492c:	d007      	beq.n	800493e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004936:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f001 f8b3 	bl	8005aa4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00c      	beq.n	8004962 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800494e:	2b00      	cmp	r3, #0
 8004950:	d007      	beq.n	8004962 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800495a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f001 f8ab 	bl	8005ab8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00c      	beq.n	8004986 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004972:	2b00      	cmp	r3, #0
 8004974:	d007      	beq.n	8004986 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800497e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 fab1 	bl	8004ee8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	f003 0320 	and.w	r3, r3, #32
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00c      	beq.n	80049aa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f003 0320 	and.w	r3, r3, #32
 8004996:	2b00      	cmp	r3, #0
 8004998:	d007      	beq.n	80049aa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f06f 0220 	mvn.w	r2, #32
 80049a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f001 f873 	bl	8005a90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00c      	beq.n	80049ce <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d007      	beq.n	80049ce <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80049c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f001 f87f 	bl	8005acc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00c      	beq.n	80049f2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d007      	beq.n	80049f2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80049ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f001 f877 	bl	8005ae0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d00c      	beq.n	8004a16 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d007      	beq.n	8004a16 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004a0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f001 f86f 	bl	8005af4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00c      	beq.n	8004a3a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d007      	beq.n	8004a3a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8004a32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f001 f867 	bl	8005b08 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a3a:	bf00      	nop
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
	...

08004a44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b086      	sub	sp, #24
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a50:	2300      	movs	r3, #0
 8004a52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d101      	bne.n	8004a62 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a5e:	2302      	movs	r3, #2
 8004a60:	e0ff      	b.n	8004c62 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2201      	movs	r2, #1
 8004a66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2b14      	cmp	r3, #20
 8004a6e:	f200 80f0 	bhi.w	8004c52 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004a72:	a201      	add	r2, pc, #4	@ (adr r2, 8004a78 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a78:	08004acd 	.word	0x08004acd
 8004a7c:	08004c53 	.word	0x08004c53
 8004a80:	08004c53 	.word	0x08004c53
 8004a84:	08004c53 	.word	0x08004c53
 8004a88:	08004b0d 	.word	0x08004b0d
 8004a8c:	08004c53 	.word	0x08004c53
 8004a90:	08004c53 	.word	0x08004c53
 8004a94:	08004c53 	.word	0x08004c53
 8004a98:	08004b4f 	.word	0x08004b4f
 8004a9c:	08004c53 	.word	0x08004c53
 8004aa0:	08004c53 	.word	0x08004c53
 8004aa4:	08004c53 	.word	0x08004c53
 8004aa8:	08004b8f 	.word	0x08004b8f
 8004aac:	08004c53 	.word	0x08004c53
 8004ab0:	08004c53 	.word	0x08004c53
 8004ab4:	08004c53 	.word	0x08004c53
 8004ab8:	08004bd1 	.word	0x08004bd1
 8004abc:	08004c53 	.word	0x08004c53
 8004ac0:	08004c53 	.word	0x08004c53
 8004ac4:	08004c53 	.word	0x08004c53
 8004ac8:	08004c11 	.word	0x08004c11
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68b9      	ldr	r1, [r7, #8]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f000 fac6 	bl	8005064 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	699a      	ldr	r2, [r3, #24]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f042 0208 	orr.w	r2, r2, #8
 8004ae6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	699a      	ldr	r2, [r3, #24]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f022 0204 	bic.w	r2, r2, #4
 8004af6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	6999      	ldr	r1, [r3, #24]
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	691a      	ldr	r2, [r3, #16]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	430a      	orrs	r2, r1
 8004b08:	619a      	str	r2, [r3, #24]
      break;
 8004b0a:	e0a5      	b.n	8004c58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68b9      	ldr	r1, [r7, #8]
 8004b12:	4618      	mov	r0, r3
 8004b14:	f000 fb40 	bl	8005198 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	699a      	ldr	r2, [r3, #24]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	699a      	ldr	r2, [r3, #24]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	6999      	ldr	r1, [r3, #24]
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	021a      	lsls	r2, r3, #8
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	619a      	str	r2, [r3, #24]
      break;
 8004b4c:	e084      	b.n	8004c58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68b9      	ldr	r1, [r7, #8]
 8004b54:	4618      	mov	r0, r3
 8004b56:	f000 fbb3 	bl	80052c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	69da      	ldr	r2, [r3, #28]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f042 0208 	orr.w	r2, r2, #8
 8004b68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	69da      	ldr	r2, [r3, #28]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f022 0204 	bic.w	r2, r2, #4
 8004b78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	69d9      	ldr	r1, [r3, #28]
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	691a      	ldr	r2, [r3, #16]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	430a      	orrs	r2, r1
 8004b8a:	61da      	str	r2, [r3, #28]
      break;
 8004b8c:	e064      	b.n	8004c58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68b9      	ldr	r1, [r7, #8]
 8004b94:	4618      	mov	r0, r3
 8004b96:	f000 fc25 	bl	80053e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	69da      	ldr	r2, [r3, #28]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ba8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	69da      	ldr	r2, [r3, #28]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	69d9      	ldr	r1, [r3, #28]
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	021a      	lsls	r2, r3, #8
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	61da      	str	r2, [r3, #28]
      break;
 8004bce:	e043      	b.n	8004c58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68b9      	ldr	r1, [r7, #8]
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f000 fc98 	bl	800550c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f042 0208 	orr.w	r2, r2, #8
 8004bea:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f022 0204 	bic.w	r2, r2, #4
 8004bfa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	691a      	ldr	r2, [r3, #16]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	430a      	orrs	r2, r1
 8004c0c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004c0e:	e023      	b.n	8004c58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68b9      	ldr	r1, [r7, #8]
 8004c16:	4618      	mov	r0, r3
 8004c18:	f000 fce2 	bl	80055e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c2a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c3a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	021a      	lsls	r2, r3, #8
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004c50:	e002      	b.n	8004c58 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	75fb      	strb	r3, [r7, #23]
      break;
 8004c56:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c60:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3718      	adds	r7, #24
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop

08004c6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c76:	2300      	movs	r3, #0
 8004c78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d101      	bne.n	8004c88 <HAL_TIM_ConfigClockSource+0x1c>
 8004c84:	2302      	movs	r3, #2
 8004c86:	e0f6      	b.n	8004e76 <HAL_TIM_ConfigClockSource+0x20a>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2202      	movs	r2, #2
 8004c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004ca6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004caa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004cb2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68ba      	ldr	r2, [r7, #8]
 8004cba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a6f      	ldr	r2, [pc, #444]	@ (8004e80 <HAL_TIM_ConfigClockSource+0x214>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	f000 80c1 	beq.w	8004e4a <HAL_TIM_ConfigClockSource+0x1de>
 8004cc8:	4a6d      	ldr	r2, [pc, #436]	@ (8004e80 <HAL_TIM_ConfigClockSource+0x214>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	f200 80c6 	bhi.w	8004e5c <HAL_TIM_ConfigClockSource+0x1f0>
 8004cd0:	4a6c      	ldr	r2, [pc, #432]	@ (8004e84 <HAL_TIM_ConfigClockSource+0x218>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	f000 80b9 	beq.w	8004e4a <HAL_TIM_ConfigClockSource+0x1de>
 8004cd8:	4a6a      	ldr	r2, [pc, #424]	@ (8004e84 <HAL_TIM_ConfigClockSource+0x218>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	f200 80be 	bhi.w	8004e5c <HAL_TIM_ConfigClockSource+0x1f0>
 8004ce0:	4a69      	ldr	r2, [pc, #420]	@ (8004e88 <HAL_TIM_ConfigClockSource+0x21c>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	f000 80b1 	beq.w	8004e4a <HAL_TIM_ConfigClockSource+0x1de>
 8004ce8:	4a67      	ldr	r2, [pc, #412]	@ (8004e88 <HAL_TIM_ConfigClockSource+0x21c>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	f200 80b6 	bhi.w	8004e5c <HAL_TIM_ConfigClockSource+0x1f0>
 8004cf0:	4a66      	ldr	r2, [pc, #408]	@ (8004e8c <HAL_TIM_ConfigClockSource+0x220>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	f000 80a9 	beq.w	8004e4a <HAL_TIM_ConfigClockSource+0x1de>
 8004cf8:	4a64      	ldr	r2, [pc, #400]	@ (8004e8c <HAL_TIM_ConfigClockSource+0x220>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	f200 80ae 	bhi.w	8004e5c <HAL_TIM_ConfigClockSource+0x1f0>
 8004d00:	4a63      	ldr	r2, [pc, #396]	@ (8004e90 <HAL_TIM_ConfigClockSource+0x224>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	f000 80a1 	beq.w	8004e4a <HAL_TIM_ConfigClockSource+0x1de>
 8004d08:	4a61      	ldr	r2, [pc, #388]	@ (8004e90 <HAL_TIM_ConfigClockSource+0x224>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	f200 80a6 	bhi.w	8004e5c <HAL_TIM_ConfigClockSource+0x1f0>
 8004d10:	4a60      	ldr	r2, [pc, #384]	@ (8004e94 <HAL_TIM_ConfigClockSource+0x228>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	f000 8099 	beq.w	8004e4a <HAL_TIM_ConfigClockSource+0x1de>
 8004d18:	4a5e      	ldr	r2, [pc, #376]	@ (8004e94 <HAL_TIM_ConfigClockSource+0x228>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	f200 809e 	bhi.w	8004e5c <HAL_TIM_ConfigClockSource+0x1f0>
 8004d20:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004d24:	f000 8091 	beq.w	8004e4a <HAL_TIM_ConfigClockSource+0x1de>
 8004d28:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004d2c:	f200 8096 	bhi.w	8004e5c <HAL_TIM_ConfigClockSource+0x1f0>
 8004d30:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d34:	f000 8089 	beq.w	8004e4a <HAL_TIM_ConfigClockSource+0x1de>
 8004d38:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d3c:	f200 808e 	bhi.w	8004e5c <HAL_TIM_ConfigClockSource+0x1f0>
 8004d40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d44:	d03e      	beq.n	8004dc4 <HAL_TIM_ConfigClockSource+0x158>
 8004d46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d4a:	f200 8087 	bhi.w	8004e5c <HAL_TIM_ConfigClockSource+0x1f0>
 8004d4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d52:	f000 8086 	beq.w	8004e62 <HAL_TIM_ConfigClockSource+0x1f6>
 8004d56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d5a:	d87f      	bhi.n	8004e5c <HAL_TIM_ConfigClockSource+0x1f0>
 8004d5c:	2b70      	cmp	r3, #112	@ 0x70
 8004d5e:	d01a      	beq.n	8004d96 <HAL_TIM_ConfigClockSource+0x12a>
 8004d60:	2b70      	cmp	r3, #112	@ 0x70
 8004d62:	d87b      	bhi.n	8004e5c <HAL_TIM_ConfigClockSource+0x1f0>
 8004d64:	2b60      	cmp	r3, #96	@ 0x60
 8004d66:	d050      	beq.n	8004e0a <HAL_TIM_ConfigClockSource+0x19e>
 8004d68:	2b60      	cmp	r3, #96	@ 0x60
 8004d6a:	d877      	bhi.n	8004e5c <HAL_TIM_ConfigClockSource+0x1f0>
 8004d6c:	2b50      	cmp	r3, #80	@ 0x50
 8004d6e:	d03c      	beq.n	8004dea <HAL_TIM_ConfigClockSource+0x17e>
 8004d70:	2b50      	cmp	r3, #80	@ 0x50
 8004d72:	d873      	bhi.n	8004e5c <HAL_TIM_ConfigClockSource+0x1f0>
 8004d74:	2b40      	cmp	r3, #64	@ 0x40
 8004d76:	d058      	beq.n	8004e2a <HAL_TIM_ConfigClockSource+0x1be>
 8004d78:	2b40      	cmp	r3, #64	@ 0x40
 8004d7a:	d86f      	bhi.n	8004e5c <HAL_TIM_ConfigClockSource+0x1f0>
 8004d7c:	2b30      	cmp	r3, #48	@ 0x30
 8004d7e:	d064      	beq.n	8004e4a <HAL_TIM_ConfigClockSource+0x1de>
 8004d80:	2b30      	cmp	r3, #48	@ 0x30
 8004d82:	d86b      	bhi.n	8004e5c <HAL_TIM_ConfigClockSource+0x1f0>
 8004d84:	2b20      	cmp	r3, #32
 8004d86:	d060      	beq.n	8004e4a <HAL_TIM_ConfigClockSource+0x1de>
 8004d88:	2b20      	cmp	r3, #32
 8004d8a:	d867      	bhi.n	8004e5c <HAL_TIM_ConfigClockSource+0x1f0>
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d05c      	beq.n	8004e4a <HAL_TIM_ConfigClockSource+0x1de>
 8004d90:	2b10      	cmp	r3, #16
 8004d92:	d05a      	beq.n	8004e4a <HAL_TIM_ConfigClockSource+0x1de>
 8004d94:	e062      	b.n	8004e5c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004da6:	f000 fd03 	bl	80057b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004db8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68ba      	ldr	r2, [r7, #8]
 8004dc0:	609a      	str	r2, [r3, #8]
      break;
 8004dc2:	e04f      	b.n	8004e64 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004dd4:	f000 fcec 	bl	80057b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	689a      	ldr	r2, [r3, #8]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004de6:	609a      	str	r2, [r3, #8]
      break;
 8004de8:	e03c      	b.n	8004e64 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004df6:	461a      	mov	r2, r3
 8004df8:	f000 fc5e 	bl	80056b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2150      	movs	r1, #80	@ 0x50
 8004e02:	4618      	mov	r0, r3
 8004e04:	f000 fcb7 	bl	8005776 <TIM_ITRx_SetConfig>
      break;
 8004e08:	e02c      	b.n	8004e64 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e16:	461a      	mov	r2, r3
 8004e18:	f000 fc7d 	bl	8005716 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2160      	movs	r1, #96	@ 0x60
 8004e22:	4618      	mov	r0, r3
 8004e24:	f000 fca7 	bl	8005776 <TIM_ITRx_SetConfig>
      break;
 8004e28:	e01c      	b.n	8004e64 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e36:	461a      	mov	r2, r3
 8004e38:	f000 fc3e 	bl	80056b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2140      	movs	r1, #64	@ 0x40
 8004e42:	4618      	mov	r0, r3
 8004e44:	f000 fc97 	bl	8005776 <TIM_ITRx_SetConfig>
      break;
 8004e48:	e00c      	b.n	8004e64 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4619      	mov	r1, r3
 8004e54:	4610      	mov	r0, r2
 8004e56:	f000 fc8e 	bl	8005776 <TIM_ITRx_SetConfig>
      break;
 8004e5a:	e003      	b.n	8004e64 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e60:	e000      	b.n	8004e64 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004e62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3710      	adds	r7, #16
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	00100070 	.word	0x00100070
 8004e84:	00100060 	.word	0x00100060
 8004e88:	00100050 	.word	0x00100050
 8004e8c:	00100040 	.word	0x00100040
 8004e90:	00100030 	.word	0x00100030
 8004e94:	00100020 	.word	0x00100020

08004e98 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004ea0:	bf00      	nop
 8004ea2:	370c      	adds	r7, #12
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004eb4:	bf00      	nop
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ec8:	bf00      	nop
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004edc:	bf00      	nop
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ef0:	bf00      	nop
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a4c      	ldr	r2, [pc, #304]	@ (8005040 <TIM_Base_SetConfig+0x144>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d017      	beq.n	8004f44 <TIM_Base_SetConfig+0x48>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f1a:	d013      	beq.n	8004f44 <TIM_Base_SetConfig+0x48>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a49      	ldr	r2, [pc, #292]	@ (8005044 <TIM_Base_SetConfig+0x148>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d00f      	beq.n	8004f44 <TIM_Base_SetConfig+0x48>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a48      	ldr	r2, [pc, #288]	@ (8005048 <TIM_Base_SetConfig+0x14c>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d00b      	beq.n	8004f44 <TIM_Base_SetConfig+0x48>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a47      	ldr	r2, [pc, #284]	@ (800504c <TIM_Base_SetConfig+0x150>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d007      	beq.n	8004f44 <TIM_Base_SetConfig+0x48>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a46      	ldr	r2, [pc, #280]	@ (8005050 <TIM_Base_SetConfig+0x154>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d003      	beq.n	8004f44 <TIM_Base_SetConfig+0x48>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a45      	ldr	r2, [pc, #276]	@ (8005054 <TIM_Base_SetConfig+0x158>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d108      	bne.n	8004f56 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a39      	ldr	r2, [pc, #228]	@ (8005040 <TIM_Base_SetConfig+0x144>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d023      	beq.n	8004fa6 <TIM_Base_SetConfig+0xaa>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f64:	d01f      	beq.n	8004fa6 <TIM_Base_SetConfig+0xaa>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a36      	ldr	r2, [pc, #216]	@ (8005044 <TIM_Base_SetConfig+0x148>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d01b      	beq.n	8004fa6 <TIM_Base_SetConfig+0xaa>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a35      	ldr	r2, [pc, #212]	@ (8005048 <TIM_Base_SetConfig+0x14c>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d017      	beq.n	8004fa6 <TIM_Base_SetConfig+0xaa>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a34      	ldr	r2, [pc, #208]	@ (800504c <TIM_Base_SetConfig+0x150>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d013      	beq.n	8004fa6 <TIM_Base_SetConfig+0xaa>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a33      	ldr	r2, [pc, #204]	@ (8005050 <TIM_Base_SetConfig+0x154>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d00f      	beq.n	8004fa6 <TIM_Base_SetConfig+0xaa>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a33      	ldr	r2, [pc, #204]	@ (8005058 <TIM_Base_SetConfig+0x15c>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d00b      	beq.n	8004fa6 <TIM_Base_SetConfig+0xaa>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a32      	ldr	r2, [pc, #200]	@ (800505c <TIM_Base_SetConfig+0x160>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d007      	beq.n	8004fa6 <TIM_Base_SetConfig+0xaa>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a31      	ldr	r2, [pc, #196]	@ (8005060 <TIM_Base_SetConfig+0x164>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d003      	beq.n	8004fa6 <TIM_Base_SetConfig+0xaa>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a2c      	ldr	r2, [pc, #176]	@ (8005054 <TIM_Base_SetConfig+0x158>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d108      	bne.n	8004fb8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	689a      	ldr	r2, [r3, #8]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a18      	ldr	r2, [pc, #96]	@ (8005040 <TIM_Base_SetConfig+0x144>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d013      	beq.n	800500c <TIM_Base_SetConfig+0x110>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a1a      	ldr	r2, [pc, #104]	@ (8005050 <TIM_Base_SetConfig+0x154>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d00f      	beq.n	800500c <TIM_Base_SetConfig+0x110>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a1a      	ldr	r2, [pc, #104]	@ (8005058 <TIM_Base_SetConfig+0x15c>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d00b      	beq.n	800500c <TIM_Base_SetConfig+0x110>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a19      	ldr	r2, [pc, #100]	@ (800505c <TIM_Base_SetConfig+0x160>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d007      	beq.n	800500c <TIM_Base_SetConfig+0x110>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a18      	ldr	r2, [pc, #96]	@ (8005060 <TIM_Base_SetConfig+0x164>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d003      	beq.n	800500c <TIM_Base_SetConfig+0x110>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a13      	ldr	r2, [pc, #76]	@ (8005054 <TIM_Base_SetConfig+0x158>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d103      	bne.n	8005014 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	691a      	ldr	r2, [r3, #16]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	2b01      	cmp	r3, #1
 8005024:	d105      	bne.n	8005032 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	f023 0201 	bic.w	r2, r3, #1
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	611a      	str	r2, [r3, #16]
  }
}
 8005032:	bf00      	nop
 8005034:	3714      	adds	r7, #20
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	40012c00 	.word	0x40012c00
 8005044:	40000400 	.word	0x40000400
 8005048:	40000800 	.word	0x40000800
 800504c:	40000c00 	.word	0x40000c00
 8005050:	40013400 	.word	0x40013400
 8005054:	40015000 	.word	0x40015000
 8005058:	40014000 	.word	0x40014000
 800505c:	40014400 	.word	0x40014400
 8005060:	40014800 	.word	0x40014800

08005064 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005064:	b480      	push	{r7}
 8005066:	b087      	sub	sp, #28
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a1b      	ldr	r3, [r3, #32]
 8005078:	f023 0201 	bic.w	r2, r3, #1
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005092:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f023 0303 	bic.w	r3, r3, #3
 800509e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	f023 0302 	bic.w	r3, r3, #2
 80050b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a30      	ldr	r2, [pc, #192]	@ (8005180 <TIM_OC1_SetConfig+0x11c>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d013      	beq.n	80050ec <TIM_OC1_SetConfig+0x88>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a2f      	ldr	r2, [pc, #188]	@ (8005184 <TIM_OC1_SetConfig+0x120>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d00f      	beq.n	80050ec <TIM_OC1_SetConfig+0x88>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a2e      	ldr	r2, [pc, #184]	@ (8005188 <TIM_OC1_SetConfig+0x124>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d00b      	beq.n	80050ec <TIM_OC1_SetConfig+0x88>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a2d      	ldr	r2, [pc, #180]	@ (800518c <TIM_OC1_SetConfig+0x128>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d007      	beq.n	80050ec <TIM_OC1_SetConfig+0x88>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a2c      	ldr	r2, [pc, #176]	@ (8005190 <TIM_OC1_SetConfig+0x12c>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d003      	beq.n	80050ec <TIM_OC1_SetConfig+0x88>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a2b      	ldr	r2, [pc, #172]	@ (8005194 <TIM_OC1_SetConfig+0x130>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d10c      	bne.n	8005106 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	f023 0308 	bic.w	r3, r3, #8
 80050f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	697a      	ldr	r2, [r7, #20]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	f023 0304 	bic.w	r3, r3, #4
 8005104:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a1d      	ldr	r2, [pc, #116]	@ (8005180 <TIM_OC1_SetConfig+0x11c>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d013      	beq.n	8005136 <TIM_OC1_SetConfig+0xd2>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a1c      	ldr	r2, [pc, #112]	@ (8005184 <TIM_OC1_SetConfig+0x120>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d00f      	beq.n	8005136 <TIM_OC1_SetConfig+0xd2>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a1b      	ldr	r2, [pc, #108]	@ (8005188 <TIM_OC1_SetConfig+0x124>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d00b      	beq.n	8005136 <TIM_OC1_SetConfig+0xd2>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a1a      	ldr	r2, [pc, #104]	@ (800518c <TIM_OC1_SetConfig+0x128>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d007      	beq.n	8005136 <TIM_OC1_SetConfig+0xd2>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a19      	ldr	r2, [pc, #100]	@ (8005190 <TIM_OC1_SetConfig+0x12c>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d003      	beq.n	8005136 <TIM_OC1_SetConfig+0xd2>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a18      	ldr	r2, [pc, #96]	@ (8005194 <TIM_OC1_SetConfig+0x130>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d111      	bne.n	800515a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800513c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005144:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	693a      	ldr	r2, [r7, #16]
 800514c:	4313      	orrs	r3, r2
 800514e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	699b      	ldr	r3, [r3, #24]
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	4313      	orrs	r3, r2
 8005158:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	685a      	ldr	r2, [r3, #4]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	697a      	ldr	r2, [r7, #20]
 8005172:	621a      	str	r2, [r3, #32]
}
 8005174:	bf00      	nop
 8005176:	371c      	adds	r7, #28
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr
 8005180:	40012c00 	.word	0x40012c00
 8005184:	40013400 	.word	0x40013400
 8005188:	40014000 	.word	0x40014000
 800518c:	40014400 	.word	0x40014400
 8005190:	40014800 	.word	0x40014800
 8005194:	40015000 	.word	0x40015000

08005198 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005198:	b480      	push	{r7}
 800519a:	b087      	sub	sp, #28
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a1b      	ldr	r3, [r3, #32]
 80051a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6a1b      	ldr	r3, [r3, #32]
 80051ac:	f023 0210 	bic.w	r2, r3, #16
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80051c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	021b      	lsls	r3, r3, #8
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	4313      	orrs	r3, r2
 80051de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	f023 0320 	bic.w	r3, r3, #32
 80051e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	011b      	lsls	r3, r3, #4
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a2c      	ldr	r2, [pc, #176]	@ (80052a8 <TIM_OC2_SetConfig+0x110>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d007      	beq.n	800520c <TIM_OC2_SetConfig+0x74>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a2b      	ldr	r2, [pc, #172]	@ (80052ac <TIM_OC2_SetConfig+0x114>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d003      	beq.n	800520c <TIM_OC2_SetConfig+0x74>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a2a      	ldr	r2, [pc, #168]	@ (80052b0 <TIM_OC2_SetConfig+0x118>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d10d      	bne.n	8005228 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005212:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	011b      	lsls	r3, r3, #4
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	4313      	orrs	r3, r2
 800521e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005226:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a1f      	ldr	r2, [pc, #124]	@ (80052a8 <TIM_OC2_SetConfig+0x110>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d013      	beq.n	8005258 <TIM_OC2_SetConfig+0xc0>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a1e      	ldr	r2, [pc, #120]	@ (80052ac <TIM_OC2_SetConfig+0x114>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d00f      	beq.n	8005258 <TIM_OC2_SetConfig+0xc0>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a1e      	ldr	r2, [pc, #120]	@ (80052b4 <TIM_OC2_SetConfig+0x11c>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d00b      	beq.n	8005258 <TIM_OC2_SetConfig+0xc0>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a1d      	ldr	r2, [pc, #116]	@ (80052b8 <TIM_OC2_SetConfig+0x120>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d007      	beq.n	8005258 <TIM_OC2_SetConfig+0xc0>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a1c      	ldr	r2, [pc, #112]	@ (80052bc <TIM_OC2_SetConfig+0x124>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d003      	beq.n	8005258 <TIM_OC2_SetConfig+0xc0>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a17      	ldr	r2, [pc, #92]	@ (80052b0 <TIM_OC2_SetConfig+0x118>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d113      	bne.n	8005280 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800525e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005266:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	695b      	ldr	r3, [r3, #20]
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	693a      	ldr	r2, [r7, #16]
 8005270:	4313      	orrs	r3, r2
 8005272:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	699b      	ldr	r3, [r3, #24]
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	693a      	ldr	r2, [r7, #16]
 800527c:	4313      	orrs	r3, r2
 800527e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	693a      	ldr	r2, [r7, #16]
 8005284:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	685a      	ldr	r2, [r3, #4]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	697a      	ldr	r2, [r7, #20]
 8005298:	621a      	str	r2, [r3, #32]
}
 800529a:	bf00      	nop
 800529c:	371c      	adds	r7, #28
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	40012c00 	.word	0x40012c00
 80052ac:	40013400 	.word	0x40013400
 80052b0:	40015000 	.word	0x40015000
 80052b4:	40014000 	.word	0x40014000
 80052b8:	40014400 	.word	0x40014400
 80052bc:	40014800 	.word	0x40014800

080052c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b087      	sub	sp, #28
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a1b      	ldr	r3, [r3, #32]
 80052ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a1b      	ldr	r3, [r3, #32]
 80052d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	69db      	ldr	r3, [r3, #28]
 80052e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f023 0303 	bic.w	r3, r3, #3
 80052fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	4313      	orrs	r3, r2
 8005304:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800530c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	021b      	lsls	r3, r3, #8
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	4313      	orrs	r3, r2
 8005318:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a2b      	ldr	r2, [pc, #172]	@ (80053cc <TIM_OC3_SetConfig+0x10c>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d007      	beq.n	8005332 <TIM_OC3_SetConfig+0x72>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a2a      	ldr	r2, [pc, #168]	@ (80053d0 <TIM_OC3_SetConfig+0x110>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d003      	beq.n	8005332 <TIM_OC3_SetConfig+0x72>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a29      	ldr	r2, [pc, #164]	@ (80053d4 <TIM_OC3_SetConfig+0x114>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d10d      	bne.n	800534e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005338:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	021b      	lsls	r3, r3, #8
 8005340:	697a      	ldr	r2, [r7, #20]
 8005342:	4313      	orrs	r3, r2
 8005344:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800534c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a1e      	ldr	r2, [pc, #120]	@ (80053cc <TIM_OC3_SetConfig+0x10c>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d013      	beq.n	800537e <TIM_OC3_SetConfig+0xbe>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a1d      	ldr	r2, [pc, #116]	@ (80053d0 <TIM_OC3_SetConfig+0x110>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d00f      	beq.n	800537e <TIM_OC3_SetConfig+0xbe>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a1d      	ldr	r2, [pc, #116]	@ (80053d8 <TIM_OC3_SetConfig+0x118>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d00b      	beq.n	800537e <TIM_OC3_SetConfig+0xbe>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a1c      	ldr	r2, [pc, #112]	@ (80053dc <TIM_OC3_SetConfig+0x11c>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d007      	beq.n	800537e <TIM_OC3_SetConfig+0xbe>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a1b      	ldr	r2, [pc, #108]	@ (80053e0 <TIM_OC3_SetConfig+0x120>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d003      	beq.n	800537e <TIM_OC3_SetConfig+0xbe>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a16      	ldr	r2, [pc, #88]	@ (80053d4 <TIM_OC3_SetConfig+0x114>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d113      	bne.n	80053a6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005384:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800538c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	695b      	ldr	r3, [r3, #20]
 8005392:	011b      	lsls	r3, r3, #4
 8005394:	693a      	ldr	r2, [r7, #16]
 8005396:	4313      	orrs	r3, r2
 8005398:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	699b      	ldr	r3, [r3, #24]
 800539e:	011b      	lsls	r3, r3, #4
 80053a0:	693a      	ldr	r2, [r7, #16]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	693a      	ldr	r2, [r7, #16]
 80053aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	685a      	ldr	r2, [r3, #4]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	697a      	ldr	r2, [r7, #20]
 80053be:	621a      	str	r2, [r3, #32]
}
 80053c0:	bf00      	nop
 80053c2:	371c      	adds	r7, #28
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr
 80053cc:	40012c00 	.word	0x40012c00
 80053d0:	40013400 	.word	0x40013400
 80053d4:	40015000 	.word	0x40015000
 80053d8:	40014000 	.word	0x40014000
 80053dc:	40014400 	.word	0x40014400
 80053e0:	40014800 	.word	0x40014800

080053e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b087      	sub	sp, #28
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a1b      	ldr	r3, [r3, #32]
 80053f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a1b      	ldr	r3, [r3, #32]
 80053f8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	69db      	ldr	r3, [r3, #28]
 800540a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005412:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005416:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800541e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	021b      	lsls	r3, r3, #8
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	4313      	orrs	r3, r2
 800542a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005432:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	031b      	lsls	r3, r3, #12
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	4313      	orrs	r3, r2
 800543e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a2c      	ldr	r2, [pc, #176]	@ (80054f4 <TIM_OC4_SetConfig+0x110>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d007      	beq.n	8005458 <TIM_OC4_SetConfig+0x74>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a2b      	ldr	r2, [pc, #172]	@ (80054f8 <TIM_OC4_SetConfig+0x114>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d003      	beq.n	8005458 <TIM_OC4_SetConfig+0x74>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a2a      	ldr	r2, [pc, #168]	@ (80054fc <TIM_OC4_SetConfig+0x118>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d10d      	bne.n	8005474 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800545e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	031b      	lsls	r3, r3, #12
 8005466:	697a      	ldr	r2, [r7, #20]
 8005468:	4313      	orrs	r3, r2
 800546a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005472:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a1f      	ldr	r2, [pc, #124]	@ (80054f4 <TIM_OC4_SetConfig+0x110>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d013      	beq.n	80054a4 <TIM_OC4_SetConfig+0xc0>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a1e      	ldr	r2, [pc, #120]	@ (80054f8 <TIM_OC4_SetConfig+0x114>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d00f      	beq.n	80054a4 <TIM_OC4_SetConfig+0xc0>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a1e      	ldr	r2, [pc, #120]	@ (8005500 <TIM_OC4_SetConfig+0x11c>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d00b      	beq.n	80054a4 <TIM_OC4_SetConfig+0xc0>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a1d      	ldr	r2, [pc, #116]	@ (8005504 <TIM_OC4_SetConfig+0x120>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d007      	beq.n	80054a4 <TIM_OC4_SetConfig+0xc0>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a1c      	ldr	r2, [pc, #112]	@ (8005508 <TIM_OC4_SetConfig+0x124>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d003      	beq.n	80054a4 <TIM_OC4_SetConfig+0xc0>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a17      	ldr	r2, [pc, #92]	@ (80054fc <TIM_OC4_SetConfig+0x118>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d113      	bne.n	80054cc <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80054aa:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80054b2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	695b      	ldr	r3, [r3, #20]
 80054b8:	019b      	lsls	r3, r3, #6
 80054ba:	693a      	ldr	r2, [r7, #16]
 80054bc:	4313      	orrs	r3, r2
 80054be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	699b      	ldr	r3, [r3, #24]
 80054c4:	019b      	lsls	r3, r3, #6
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	693a      	ldr	r2, [r7, #16]
 80054d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	685a      	ldr	r2, [r3, #4]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	621a      	str	r2, [r3, #32]
}
 80054e6:	bf00      	nop
 80054e8:	371c      	adds	r7, #28
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	40012c00 	.word	0x40012c00
 80054f8:	40013400 	.word	0x40013400
 80054fc:	40015000 	.word	0x40015000
 8005500:	40014000 	.word	0x40014000
 8005504:	40014400 	.word	0x40014400
 8005508:	40014800 	.word	0x40014800

0800550c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800550c:	b480      	push	{r7}
 800550e:	b087      	sub	sp, #28
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a1b      	ldr	r3, [r3, #32]
 8005520:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800553a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800553e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	4313      	orrs	r3, r2
 8005548:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005550:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	041b      	lsls	r3, r3, #16
 8005558:	693a      	ldr	r2, [r7, #16]
 800555a:	4313      	orrs	r3, r2
 800555c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a19      	ldr	r2, [pc, #100]	@ (80055c8 <TIM_OC5_SetConfig+0xbc>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d013      	beq.n	800558e <TIM_OC5_SetConfig+0x82>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a18      	ldr	r2, [pc, #96]	@ (80055cc <TIM_OC5_SetConfig+0xc0>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d00f      	beq.n	800558e <TIM_OC5_SetConfig+0x82>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a17      	ldr	r2, [pc, #92]	@ (80055d0 <TIM_OC5_SetConfig+0xc4>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d00b      	beq.n	800558e <TIM_OC5_SetConfig+0x82>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a16      	ldr	r2, [pc, #88]	@ (80055d4 <TIM_OC5_SetConfig+0xc8>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d007      	beq.n	800558e <TIM_OC5_SetConfig+0x82>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a15      	ldr	r2, [pc, #84]	@ (80055d8 <TIM_OC5_SetConfig+0xcc>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d003      	beq.n	800558e <TIM_OC5_SetConfig+0x82>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a14      	ldr	r2, [pc, #80]	@ (80055dc <TIM_OC5_SetConfig+0xd0>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d109      	bne.n	80055a2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005594:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	695b      	ldr	r3, [r3, #20]
 800559a:	021b      	lsls	r3, r3, #8
 800559c:	697a      	ldr	r2, [r7, #20]
 800559e:	4313      	orrs	r3, r2
 80055a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	697a      	ldr	r2, [r7, #20]
 80055a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	685a      	ldr	r2, [r3, #4]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	693a      	ldr	r2, [r7, #16]
 80055ba:	621a      	str	r2, [r3, #32]
}
 80055bc:	bf00      	nop
 80055be:	371c      	adds	r7, #28
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr
 80055c8:	40012c00 	.word	0x40012c00
 80055cc:	40013400 	.word	0x40013400
 80055d0:	40014000 	.word	0x40014000
 80055d4:	40014400 	.word	0x40014400
 80055d8:	40014800 	.word	0x40014800
 80055dc:	40015000 	.word	0x40015000

080055e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b087      	sub	sp, #28
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a1b      	ldr	r3, [r3, #32]
 80055f4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800560e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005612:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	021b      	lsls	r3, r3, #8
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	4313      	orrs	r3, r2
 800561e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005626:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	051b      	lsls	r3, r3, #20
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	4313      	orrs	r3, r2
 8005632:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a1a      	ldr	r2, [pc, #104]	@ (80056a0 <TIM_OC6_SetConfig+0xc0>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d013      	beq.n	8005664 <TIM_OC6_SetConfig+0x84>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a19      	ldr	r2, [pc, #100]	@ (80056a4 <TIM_OC6_SetConfig+0xc4>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d00f      	beq.n	8005664 <TIM_OC6_SetConfig+0x84>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a18      	ldr	r2, [pc, #96]	@ (80056a8 <TIM_OC6_SetConfig+0xc8>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d00b      	beq.n	8005664 <TIM_OC6_SetConfig+0x84>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a17      	ldr	r2, [pc, #92]	@ (80056ac <TIM_OC6_SetConfig+0xcc>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d007      	beq.n	8005664 <TIM_OC6_SetConfig+0x84>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a16      	ldr	r2, [pc, #88]	@ (80056b0 <TIM_OC6_SetConfig+0xd0>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d003      	beq.n	8005664 <TIM_OC6_SetConfig+0x84>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a15      	ldr	r2, [pc, #84]	@ (80056b4 <TIM_OC6_SetConfig+0xd4>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d109      	bne.n	8005678 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800566a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	695b      	ldr	r3, [r3, #20]
 8005670:	029b      	lsls	r3, r3, #10
 8005672:	697a      	ldr	r2, [r7, #20]
 8005674:	4313      	orrs	r3, r2
 8005676:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	697a      	ldr	r2, [r7, #20]
 800567c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	685a      	ldr	r2, [r3, #4]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	621a      	str	r2, [r3, #32]
}
 8005692:	bf00      	nop
 8005694:	371c      	adds	r7, #28
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	40012c00 	.word	0x40012c00
 80056a4:	40013400 	.word	0x40013400
 80056a8:	40014000 	.word	0x40014000
 80056ac:	40014400 	.word	0x40014400
 80056b0:	40014800 	.word	0x40014800
 80056b4:	40015000 	.word	0x40015000

080056b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b087      	sub	sp, #28
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6a1b      	ldr	r3, [r3, #32]
 80056c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6a1b      	ldr	r3, [r3, #32]
 80056ce:	f023 0201 	bic.w	r2, r3, #1
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80056e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	011b      	lsls	r3, r3, #4
 80056e8:	693a      	ldr	r2, [r7, #16]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	f023 030a 	bic.w	r3, r3, #10
 80056f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056f6:	697a      	ldr	r2, [r7, #20]
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	621a      	str	r2, [r3, #32]
}
 800570a:	bf00      	nop
 800570c:	371c      	adds	r7, #28
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr

08005716 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005716:	b480      	push	{r7}
 8005718:	b087      	sub	sp, #28
 800571a:	af00      	add	r7, sp, #0
 800571c:	60f8      	str	r0, [r7, #12]
 800571e:	60b9      	str	r1, [r7, #8]
 8005720:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6a1b      	ldr	r3, [r3, #32]
 8005726:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6a1b      	ldr	r3, [r3, #32]
 800572c:	f023 0210 	bic.w	r2, r3, #16
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	699b      	ldr	r3, [r3, #24]
 8005738:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005740:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	031b      	lsls	r3, r3, #12
 8005746:	693a      	ldr	r2, [r7, #16]
 8005748:	4313      	orrs	r3, r2
 800574a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005752:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	011b      	lsls	r3, r3, #4
 8005758:	697a      	ldr	r2, [r7, #20]
 800575a:	4313      	orrs	r3, r2
 800575c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	693a      	ldr	r2, [r7, #16]
 8005762:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	697a      	ldr	r2, [r7, #20]
 8005768:	621a      	str	r2, [r3, #32]
}
 800576a:	bf00      	nop
 800576c:	371c      	adds	r7, #28
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr

08005776 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005776:	b480      	push	{r7}
 8005778:	b085      	sub	sp, #20
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
 800577e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800578c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005790:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005792:	683a      	ldr	r2, [r7, #0]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	4313      	orrs	r3, r2
 8005798:	f043 0307 	orr.w	r3, r3, #7
 800579c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	609a      	str	r2, [r3, #8]
}
 80057a4:	bf00      	nop
 80057a6:	3714      	adds	r7, #20
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b087      	sub	sp, #28
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	607a      	str	r2, [r7, #4]
 80057bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80057ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	021a      	lsls	r2, r3, #8
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	431a      	orrs	r2, r3
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	697a      	ldr	r2, [r7, #20]
 80057da:	4313      	orrs	r3, r2
 80057dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	697a      	ldr	r2, [r7, #20]
 80057e2:	609a      	str	r2, [r3, #8]
}
 80057e4:	bf00      	nop
 80057e6:	371c      	adds	r7, #28
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b087      	sub	sp, #28
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	f003 031f 	and.w	r3, r3, #31
 8005802:	2201      	movs	r2, #1
 8005804:	fa02 f303 	lsl.w	r3, r2, r3
 8005808:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6a1a      	ldr	r2, [r3, #32]
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	43db      	mvns	r3, r3
 8005812:	401a      	ands	r2, r3
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6a1a      	ldr	r2, [r3, #32]
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	f003 031f 	and.w	r3, r3, #31
 8005822:	6879      	ldr	r1, [r7, #4]
 8005824:	fa01 f303 	lsl.w	r3, r1, r3
 8005828:	431a      	orrs	r2, r3
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	621a      	str	r2, [r3, #32]
}
 800582e:	bf00      	nop
 8005830:	371c      	adds	r7, #28
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
	...

0800583c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800583c:	b480      	push	{r7}
 800583e:	b085      	sub	sp, #20
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800584c:	2b01      	cmp	r3, #1
 800584e:	d101      	bne.n	8005854 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005850:	2302      	movs	r3, #2
 8005852:	e074      	b.n	800593e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2202      	movs	r2, #2
 8005860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a34      	ldr	r2, [pc, #208]	@ (800594c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d009      	beq.n	8005892 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a33      	ldr	r2, [pc, #204]	@ (8005950 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d004      	beq.n	8005892 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a31      	ldr	r2, [pc, #196]	@ (8005954 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d108      	bne.n	80058a4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005898:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80058aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a21      	ldr	r2, [pc, #132]	@ (800594c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d022      	beq.n	8005912 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058d4:	d01d      	beq.n	8005912 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a1f      	ldr	r2, [pc, #124]	@ (8005958 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d018      	beq.n	8005912 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a1d      	ldr	r2, [pc, #116]	@ (800595c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d013      	beq.n	8005912 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a1c      	ldr	r2, [pc, #112]	@ (8005960 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d00e      	beq.n	8005912 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a15      	ldr	r2, [pc, #84]	@ (8005950 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d009      	beq.n	8005912 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a18      	ldr	r2, [pc, #96]	@ (8005964 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d004      	beq.n	8005912 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a11      	ldr	r2, [pc, #68]	@ (8005954 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d10c      	bne.n	800592c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005918:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	68ba      	ldr	r2, [r7, #8]
 8005920:	4313      	orrs	r3, r2
 8005922:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68ba      	ldr	r2, [r7, #8]
 800592a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3714      	adds	r7, #20
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	40012c00 	.word	0x40012c00
 8005950:	40013400 	.word	0x40013400
 8005954:	40015000 	.word	0x40015000
 8005958:	40000400 	.word	0x40000400
 800595c:	40000800 	.word	0x40000800
 8005960:	40000c00 	.word	0x40000c00
 8005964:	40014000 	.word	0x40014000

08005968 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005972:	2300      	movs	r3, #0
 8005974:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800597c:	2b01      	cmp	r3, #1
 800597e:	d101      	bne.n	8005984 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005980:	2302      	movs	r3, #2
 8005982:	e078      	b.n	8005a76 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	4313      	orrs	r3, r2
 8005998:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	695b      	ldr	r3, [r3, #20]
 80059dc:	4313      	orrs	r3, r2
 80059de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ea:	4313      	orrs	r3, r2
 80059ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	699b      	ldr	r3, [r3, #24]
 80059f8:	041b      	lsls	r3, r3, #16
 80059fa:	4313      	orrs	r3, r2
 80059fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	69db      	ldr	r3, [r3, #28]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a1c      	ldr	r2, [pc, #112]	@ (8005a84 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d009      	beq.n	8005a2a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a1b      	ldr	r2, [pc, #108]	@ (8005a88 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d004      	beq.n	8005a2a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a19      	ldr	r2, [pc, #100]	@ (8005a8c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d11c      	bne.n	8005a64 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a34:	051b      	lsls	r3, r3, #20
 8005a36:	4313      	orrs	r3, r2
 8005a38:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	6a1b      	ldr	r3, [r3, #32]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a52:	4313      	orrs	r3, r2
 8005a54:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a60:	4313      	orrs	r3, r2
 8005a62:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3714      	adds	r7, #20
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	40012c00 	.word	0x40012c00
 8005a88:	40013400 	.word	0x40013400
 8005a8c:	40015000 	.word	0x40015000

08005a90 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a98:	bf00      	nop
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005aac:	bf00      	nop
 8005aae:	370c      	adds	r7, #12
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005ac0:	bf00      	nop
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005ad4:	bf00      	nop
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005afc:	bf00      	nop
 8005afe:	370c      	adds	r7, #12
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005b10:	bf00      	nop
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d101      	bne.n	8005b2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e042      	b.n	8005bb4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d106      	bne.n	8005b46 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f7fb fd0d 	bl	8001560 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2224      	movs	r2, #36	@ 0x24
 8005b4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f022 0201 	bic.w	r2, r2, #1
 8005b5c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d002      	beq.n	8005b6c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 ffbe 	bl	8006ae8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 fcbf 	bl	80064f0 <UART_SetConfig>
 8005b72:	4603      	mov	r3, r0
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d101      	bne.n	8005b7c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e01b      	b.n	8005bb4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	685a      	ldr	r2, [r3, #4]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	689a      	ldr	r2, [r3, #8]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005b9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f042 0201 	orr.w	r2, r2, #1
 8005baa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f001 f83d 	bl	8006c2c <UART_CheckIdleState>
 8005bb2:	4603      	mov	r3, r0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3708      	adds	r7, #8
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b08a      	sub	sp, #40	@ 0x28
 8005bc0:	af02      	add	r7, sp, #8
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	603b      	str	r3, [r7, #0]
 8005bc8:	4613      	mov	r3, r2
 8005bca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bd2:	2b20      	cmp	r3, #32
 8005bd4:	d17b      	bne.n	8005cce <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d002      	beq.n	8005be2 <HAL_UART_Transmit+0x26>
 8005bdc:	88fb      	ldrh	r3, [r7, #6]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d101      	bne.n	8005be6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e074      	b.n	8005cd0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2221      	movs	r2, #33	@ 0x21
 8005bf2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005bf6:	f7fb fead 	bl	8001954 <HAL_GetTick>
 8005bfa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	88fa      	ldrh	r2, [r7, #6]
 8005c00:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	88fa      	ldrh	r2, [r7, #6]
 8005c08:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c14:	d108      	bne.n	8005c28 <HAL_UART_Transmit+0x6c>
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	691b      	ldr	r3, [r3, #16]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d104      	bne.n	8005c28 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	61bb      	str	r3, [r7, #24]
 8005c26:	e003      	b.n	8005c30 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c30:	e030      	b.n	8005c94 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	9300      	str	r3, [sp, #0]
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	2180      	movs	r1, #128	@ 0x80
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	f001 f89f 	bl	8006d80 <UART_WaitOnFlagUntilTimeout>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d005      	beq.n	8005c54 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2220      	movs	r2, #32
 8005c4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005c50:	2303      	movs	r3, #3
 8005c52:	e03d      	b.n	8005cd0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d10b      	bne.n	8005c72 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	881b      	ldrh	r3, [r3, #0]
 8005c5e:	461a      	mov	r2, r3
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c68:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	3302      	adds	r3, #2
 8005c6e:	61bb      	str	r3, [r7, #24]
 8005c70:	e007      	b.n	8005c82 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	781a      	ldrb	r2, [r3, #0]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	3301      	adds	r3, #1
 8005c80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	b29a      	uxth	r2, r3
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d1c8      	bne.n	8005c32 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	9300      	str	r3, [sp, #0]
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	2140      	movs	r1, #64	@ 0x40
 8005caa:	68f8      	ldr	r0, [r7, #12]
 8005cac:	f001 f868 	bl	8006d80 <UART_WaitOnFlagUntilTimeout>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d005      	beq.n	8005cc2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2220      	movs	r2, #32
 8005cba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e006      	b.n	8005cd0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2220      	movs	r2, #32
 8005cc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	e000      	b.n	8005cd0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005cce:	2302      	movs	r3, #2
  }
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3720      	adds	r7, #32
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b08a      	sub	sp, #40	@ 0x28
 8005cdc:	af02      	add	r7, sp, #8
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	603b      	str	r3, [r7, #0]
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005cee:	2b20      	cmp	r3, #32
 8005cf0:	f040 80b5 	bne.w	8005e5e <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d002      	beq.n	8005d00 <HAL_UART_Receive+0x28>
 8005cfa:	88fb      	ldrh	r3, [r7, #6]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d101      	bne.n	8005d04 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e0ad      	b.n	8005e60 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2222      	movs	r2, #34	@ 0x22
 8005d10:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2200      	movs	r2, #0
 8005d18:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d1a:	f7fb fe1b 	bl	8001954 <HAL_GetTick>
 8005d1e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	88fa      	ldrh	r2, [r7, #6]
 8005d24:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	88fa      	ldrh	r2, [r7, #6]
 8005d2c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d38:	d10e      	bne.n	8005d58 <HAL_UART_Receive+0x80>
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d105      	bne.n	8005d4e <HAL_UART_Receive+0x76>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005d48:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005d4c:	e02d      	b.n	8005daa <HAL_UART_Receive+0xd2>
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	22ff      	movs	r2, #255	@ 0xff
 8005d52:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005d56:	e028      	b.n	8005daa <HAL_UART_Receive+0xd2>
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d10d      	bne.n	8005d7c <HAL_UART_Receive+0xa4>
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d104      	bne.n	8005d72 <HAL_UART_Receive+0x9a>
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	22ff      	movs	r2, #255	@ 0xff
 8005d6c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005d70:	e01b      	b.n	8005daa <HAL_UART_Receive+0xd2>
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	227f      	movs	r2, #127	@ 0x7f
 8005d76:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005d7a:	e016      	b.n	8005daa <HAL_UART_Receive+0xd2>
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d84:	d10d      	bne.n	8005da2 <HAL_UART_Receive+0xca>
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d104      	bne.n	8005d98 <HAL_UART_Receive+0xc0>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	227f      	movs	r2, #127	@ 0x7f
 8005d92:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005d96:	e008      	b.n	8005daa <HAL_UART_Receive+0xd2>
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	223f      	movs	r2, #63	@ 0x3f
 8005d9c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005da0:	e003      	b.n	8005daa <HAL_UART_Receive+0xd2>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005db0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dba:	d108      	bne.n	8005dce <HAL_UART_Receive+0xf6>
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d104      	bne.n	8005dce <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	61bb      	str	r3, [r7, #24]
 8005dcc:	e003      	b.n	8005dd6 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005dd6:	e036      	b.n	8005e46 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	9300      	str	r3, [sp, #0]
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	2200      	movs	r2, #0
 8005de0:	2120      	movs	r1, #32
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	f000 ffcc 	bl	8006d80 <UART_WaitOnFlagUntilTimeout>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d005      	beq.n	8005dfa <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2220      	movs	r2, #32
 8005df2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8005df6:	2303      	movs	r3, #3
 8005df8:	e032      	b.n	8005e60 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d10c      	bne.n	8005e1a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e06:	b29a      	uxth	r2, r3
 8005e08:	8a7b      	ldrh	r3, [r7, #18]
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	b29a      	uxth	r2, r3
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005e12:	69bb      	ldr	r3, [r7, #24]
 8005e14:	3302      	adds	r3, #2
 8005e16:	61bb      	str	r3, [r7, #24]
 8005e18:	e00c      	b.n	8005e34 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e20:	b2da      	uxtb	r2, r3
 8005e22:	8a7b      	ldrh	r3, [r7, #18]
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	4013      	ands	r3, r2
 8005e28:	b2da      	uxtb	r2, r3
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	3301      	adds	r3, #1
 8005e32:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	b29a      	uxth	r2, r3
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d1c2      	bne.n	8005dd8 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2220      	movs	r2, #32
 8005e56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	e000      	b.n	8005e60 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8005e5e:	2302      	movs	r3, #2
  }
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3720      	adds	r7, #32
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b0ba      	sub	sp, #232	@ 0xe8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	69db      	ldr	r3, [r3, #28]
 8005e76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005e8e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005e92:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005e96:	4013      	ands	r3, r2
 8005e98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005e9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d11b      	bne.n	8005edc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ea8:	f003 0320 	and.w	r3, r3, #32
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d015      	beq.n	8005edc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005eb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005eb4:	f003 0320 	and.w	r3, r3, #32
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d105      	bne.n	8005ec8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005ebc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ec0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d009      	beq.n	8005edc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f000 82e3 	beq.w	8006498 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	4798      	blx	r3
      }
      return;
 8005eda:	e2dd      	b.n	8006498 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005edc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f000 8123 	beq.w	800612c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005ee6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005eea:	4b8d      	ldr	r3, [pc, #564]	@ (8006120 <HAL_UART_IRQHandler+0x2b8>)
 8005eec:	4013      	ands	r3, r2
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d106      	bne.n	8005f00 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005ef2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005ef6:	4b8b      	ldr	r3, [pc, #556]	@ (8006124 <HAL_UART_IRQHandler+0x2bc>)
 8005ef8:	4013      	ands	r3, r2
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	f000 8116 	beq.w	800612c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f04:	f003 0301 	and.w	r3, r3, #1
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d011      	beq.n	8005f30 <HAL_UART_IRQHandler+0xc8>
 8005f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d00b      	beq.n	8005f30 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f26:	f043 0201 	orr.w	r2, r3, #1
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f34:	f003 0302 	and.w	r3, r3, #2
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d011      	beq.n	8005f60 <HAL_UART_IRQHandler+0xf8>
 8005f3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f40:	f003 0301 	and.w	r3, r3, #1
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d00b      	beq.n	8005f60 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2202      	movs	r2, #2
 8005f4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f56:	f043 0204 	orr.w	r2, r3, #4
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f64:	f003 0304 	and.w	r3, r3, #4
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d011      	beq.n	8005f90 <HAL_UART_IRQHandler+0x128>
 8005f6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f70:	f003 0301 	and.w	r3, r3, #1
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d00b      	beq.n	8005f90 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2204      	movs	r2, #4
 8005f7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f86:	f043 0202 	orr.w	r2, r3, #2
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005f90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f94:	f003 0308 	and.w	r3, r3, #8
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d017      	beq.n	8005fcc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fa0:	f003 0320 	and.w	r3, r3, #32
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d105      	bne.n	8005fb4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005fa8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005fac:	4b5c      	ldr	r3, [pc, #368]	@ (8006120 <HAL_UART_IRQHandler+0x2b8>)
 8005fae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d00b      	beq.n	8005fcc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2208      	movs	r2, #8
 8005fba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fc2:	f043 0208 	orr.w	r2, r3, #8
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005fcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d012      	beq.n	8005ffe <HAL_UART_IRQHandler+0x196>
 8005fd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fdc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d00c      	beq.n	8005ffe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005fec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ff4:	f043 0220 	orr.w	r2, r3, #32
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006004:	2b00      	cmp	r3, #0
 8006006:	f000 8249 	beq.w	800649c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800600a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800600e:	f003 0320 	and.w	r3, r3, #32
 8006012:	2b00      	cmp	r3, #0
 8006014:	d013      	beq.n	800603e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006016:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800601a:	f003 0320 	and.w	r3, r3, #32
 800601e:	2b00      	cmp	r3, #0
 8006020:	d105      	bne.n	800602e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006022:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006026:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800602a:	2b00      	cmp	r3, #0
 800602c:	d007      	beq.n	800603e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006032:	2b00      	cmp	r3, #0
 8006034:	d003      	beq.n	800603e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006044:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006052:	2b40      	cmp	r3, #64	@ 0x40
 8006054:	d005      	beq.n	8006062 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006056:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800605a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800605e:	2b00      	cmp	r3, #0
 8006060:	d054      	beq.n	800610c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 fef9 	bl	8006e5a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006072:	2b40      	cmp	r3, #64	@ 0x40
 8006074:	d146      	bne.n	8006104 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	3308      	adds	r3, #8
 800607c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006080:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006084:	e853 3f00 	ldrex	r3, [r3]
 8006088:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800608c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006090:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006094:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	3308      	adds	r3, #8
 800609e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80060a2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80060a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80060ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80060b2:	e841 2300 	strex	r3, r2, [r1]
 80060b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80060ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d1d9      	bne.n	8006076 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d017      	beq.n	80060fc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060d2:	4a15      	ldr	r2, [pc, #84]	@ (8006128 <HAL_UART_IRQHandler+0x2c0>)
 80060d4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060dc:	4618      	mov	r0, r3
 80060de:	f7fb fdcf 	bl	8001c80 <HAL_DMA_Abort_IT>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d019      	beq.n	800611c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80060f6:	4610      	mov	r0, r2
 80060f8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060fa:	e00f      	b.n	800611c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 f9e1 	bl	80064c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006102:	e00b      	b.n	800611c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 f9dd 	bl	80064c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800610a:	e007      	b.n	800611c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 f9d9 	bl	80064c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800611a:	e1bf      	b.n	800649c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800611c:	bf00      	nop
    return;
 800611e:	e1bd      	b.n	800649c <HAL_UART_IRQHandler+0x634>
 8006120:	10000001 	.word	0x10000001
 8006124:	04000120 	.word	0x04000120
 8006128:	08006f27 	.word	0x08006f27

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006130:	2b01      	cmp	r3, #1
 8006132:	f040 8153 	bne.w	80063dc <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800613a:	f003 0310 	and.w	r3, r3, #16
 800613e:	2b00      	cmp	r3, #0
 8006140:	f000 814c 	beq.w	80063dc <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006148:	f003 0310 	and.w	r3, r3, #16
 800614c:	2b00      	cmp	r3, #0
 800614e:	f000 8145 	beq.w	80063dc <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	2210      	movs	r2, #16
 8006158:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006164:	2b40      	cmp	r3, #64	@ 0x40
 8006166:	f040 80bb 	bne.w	80062e0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006178:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800617c:	2b00      	cmp	r3, #0
 800617e:	f000 818f 	beq.w	80064a0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006188:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800618c:	429a      	cmp	r2, r3
 800618e:	f080 8187 	bcs.w	80064a0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006198:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f003 0320 	and.w	r3, r3, #32
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	f040 8087 	bne.w	80062be <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80061bc:	e853 3f00 	ldrex	r3, [r3]
 80061c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80061c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80061c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	461a      	mov	r2, r3
 80061d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80061da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80061de:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80061e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80061ea:	e841 2300 	strex	r3, r2, [r1]
 80061ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80061f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d1da      	bne.n	80061b0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	3308      	adds	r3, #8
 8006200:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006202:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006204:	e853 3f00 	ldrex	r3, [r3]
 8006208:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800620a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800620c:	f023 0301 	bic.w	r3, r3, #1
 8006210:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	3308      	adds	r3, #8
 800621a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800621e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006222:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006224:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006226:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800622a:	e841 2300 	strex	r3, r2, [r1]
 800622e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006230:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006232:	2b00      	cmp	r3, #0
 8006234:	d1e1      	bne.n	80061fa <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	3308      	adds	r3, #8
 800623c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800623e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006240:	e853 3f00 	ldrex	r3, [r3]
 8006244:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006246:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006248:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800624c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	3308      	adds	r3, #8
 8006256:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800625a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800625c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800625e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006260:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006262:	e841 2300 	strex	r3, r2, [r1]
 8006266:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006268:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800626a:	2b00      	cmp	r3, #0
 800626c:	d1e3      	bne.n	8006236 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2220      	movs	r2, #32
 8006272:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006282:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006284:	e853 3f00 	ldrex	r3, [r3]
 8006288:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800628a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800628c:	f023 0310 	bic.w	r3, r3, #16
 8006290:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	461a      	mov	r2, r3
 800629a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800629e:	65bb      	str	r3, [r7, #88]	@ 0x58
 80062a0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80062a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80062a6:	e841 2300 	strex	r3, r2, [r1]
 80062aa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80062ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d1e4      	bne.n	800627c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062b8:	4618      	mov	r0, r3
 80062ba:	f7fb fc88 	bl	8001bce <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2202      	movs	r2, #2
 80062c2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	1ad3      	subs	r3, r2, r3
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	4619      	mov	r1, r3
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 f8fd 	bl	80064d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80062de:	e0df      	b.n	80064a0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	1ad3      	subs	r3, r2, r3
 80062f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	f000 80d1 	beq.w	80064a4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8006302:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006306:	2b00      	cmp	r3, #0
 8006308:	f000 80cc 	beq.w	80064a4 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006314:	e853 3f00 	ldrex	r3, [r3]
 8006318:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800631a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800631c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006320:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	461a      	mov	r2, r3
 800632a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800632e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006330:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006332:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006334:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006336:	e841 2300 	strex	r3, r2, [r1]
 800633a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800633c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800633e:	2b00      	cmp	r3, #0
 8006340:	d1e4      	bne.n	800630c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	3308      	adds	r3, #8
 8006348:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800634a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800634c:	e853 3f00 	ldrex	r3, [r3]
 8006350:	623b      	str	r3, [r7, #32]
   return(result);
 8006352:	6a3b      	ldr	r3, [r7, #32]
 8006354:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006358:	f023 0301 	bic.w	r3, r3, #1
 800635c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	3308      	adds	r3, #8
 8006366:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800636a:	633a      	str	r2, [r7, #48]	@ 0x30
 800636c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800636e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006370:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006372:	e841 2300 	strex	r3, r2, [r1]
 8006376:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800637a:	2b00      	cmp	r3, #0
 800637c:	d1e1      	bne.n	8006342 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2220      	movs	r2, #32
 8006382:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	e853 3f00 	ldrex	r3, [r3]
 800639e:	60fb      	str	r3, [r7, #12]
   return(result);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f023 0310 	bic.w	r3, r3, #16
 80063a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	461a      	mov	r2, r3
 80063b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80063b4:	61fb      	str	r3, [r7, #28]
 80063b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b8:	69b9      	ldr	r1, [r7, #24]
 80063ba:	69fa      	ldr	r2, [r7, #28]
 80063bc:	e841 2300 	strex	r3, r2, [r1]
 80063c0:	617b      	str	r3, [r7, #20]
   return(result);
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d1e4      	bne.n	8006392 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2202      	movs	r2, #2
 80063cc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80063ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80063d2:	4619      	mov	r1, r3
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 f87f 	bl	80064d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80063da:	e063      	b.n	80064a4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80063dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d00e      	beq.n	8006406 <HAL_UART_IRQHandler+0x59e>
 80063e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d008      	beq.n	8006406 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80063fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 fdd2 	bl	8006fa8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006404:	e051      	b.n	80064aa <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800640a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800640e:	2b00      	cmp	r3, #0
 8006410:	d014      	beq.n	800643c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006412:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800641a:	2b00      	cmp	r3, #0
 800641c:	d105      	bne.n	800642a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800641e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006422:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006426:	2b00      	cmp	r3, #0
 8006428:	d008      	beq.n	800643c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800642e:	2b00      	cmp	r3, #0
 8006430:	d03a      	beq.n	80064a8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	4798      	blx	r3
    }
    return;
 800643a:	e035      	b.n	80064a8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800643c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006440:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006444:	2b00      	cmp	r3, #0
 8006446:	d009      	beq.n	800645c <HAL_UART_IRQHandler+0x5f4>
 8006448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800644c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006450:	2b00      	cmp	r3, #0
 8006452:	d003      	beq.n	800645c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 fd7c 	bl	8006f52 <UART_EndTransmit_IT>
    return;
 800645a:	e026      	b.n	80064aa <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800645c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006460:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006464:	2b00      	cmp	r3, #0
 8006466:	d009      	beq.n	800647c <HAL_UART_IRQHandler+0x614>
 8006468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800646c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006470:	2b00      	cmp	r3, #0
 8006472:	d003      	beq.n	800647c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 fdab 	bl	8006fd0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800647a:	e016      	b.n	80064aa <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800647c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006480:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006484:	2b00      	cmp	r3, #0
 8006486:	d010      	beq.n	80064aa <HAL_UART_IRQHandler+0x642>
 8006488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800648c:	2b00      	cmp	r3, #0
 800648e:	da0c      	bge.n	80064aa <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 fd93 	bl	8006fbc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006496:	e008      	b.n	80064aa <HAL_UART_IRQHandler+0x642>
      return;
 8006498:	bf00      	nop
 800649a:	e006      	b.n	80064aa <HAL_UART_IRQHandler+0x642>
    return;
 800649c:	bf00      	nop
 800649e:	e004      	b.n	80064aa <HAL_UART_IRQHandler+0x642>
      return;
 80064a0:	bf00      	nop
 80064a2:	e002      	b.n	80064aa <HAL_UART_IRQHandler+0x642>
      return;
 80064a4:	bf00      	nop
 80064a6:	e000      	b.n	80064aa <HAL_UART_IRQHandler+0x642>
    return;
 80064a8:	bf00      	nop
  }
}
 80064aa:	37e8      	adds	r7, #232	@ 0xe8
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80064b8:	bf00      	nop
 80064ba:	370c      	adds	r7, #12
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80064cc:	bf00      	nop
 80064ce:	370c      	adds	r7, #12
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	460b      	mov	r3, r1
 80064e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80064e4:	bf00      	nop
 80064e6:	370c      	adds	r7, #12
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064f4:	b08c      	sub	sp, #48	@ 0x30
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80064fa:	2300      	movs	r3, #0
 80064fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	689a      	ldr	r2, [r3, #8]
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	431a      	orrs	r2, r3
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	695b      	ldr	r3, [r3, #20]
 800650e:	431a      	orrs	r2, r3
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	69db      	ldr	r3, [r3, #28]
 8006514:	4313      	orrs	r3, r2
 8006516:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	4baa      	ldr	r3, [pc, #680]	@ (80067c8 <UART_SetConfig+0x2d8>)
 8006520:	4013      	ands	r3, r2
 8006522:	697a      	ldr	r2, [r7, #20]
 8006524:	6812      	ldr	r2, [r2, #0]
 8006526:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006528:	430b      	orrs	r3, r1
 800652a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	68da      	ldr	r2, [r3, #12]
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	430a      	orrs	r2, r1
 8006540:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	699b      	ldr	r3, [r3, #24]
 8006546:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a9f      	ldr	r2, [pc, #636]	@ (80067cc <UART_SetConfig+0x2dc>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d004      	beq.n	800655c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	6a1b      	ldr	r3, [r3, #32]
 8006556:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006558:	4313      	orrs	r3, r2
 800655a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006566:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800656a:	697a      	ldr	r2, [r7, #20]
 800656c:	6812      	ldr	r2, [r2, #0]
 800656e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006570:	430b      	orrs	r3, r1
 8006572:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800657a:	f023 010f 	bic.w	r1, r3, #15
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	430a      	orrs	r2, r1
 8006588:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a90      	ldr	r2, [pc, #576]	@ (80067d0 <UART_SetConfig+0x2e0>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d125      	bne.n	80065e0 <UART_SetConfig+0xf0>
 8006594:	4b8f      	ldr	r3, [pc, #572]	@ (80067d4 <UART_SetConfig+0x2e4>)
 8006596:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800659a:	f003 0303 	and.w	r3, r3, #3
 800659e:	2b03      	cmp	r3, #3
 80065a0:	d81a      	bhi.n	80065d8 <UART_SetConfig+0xe8>
 80065a2:	a201      	add	r2, pc, #4	@ (adr r2, 80065a8 <UART_SetConfig+0xb8>)
 80065a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a8:	080065b9 	.word	0x080065b9
 80065ac:	080065c9 	.word	0x080065c9
 80065b0:	080065c1 	.word	0x080065c1
 80065b4:	080065d1 	.word	0x080065d1
 80065b8:	2301      	movs	r3, #1
 80065ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065be:	e116      	b.n	80067ee <UART_SetConfig+0x2fe>
 80065c0:	2302      	movs	r3, #2
 80065c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065c6:	e112      	b.n	80067ee <UART_SetConfig+0x2fe>
 80065c8:	2304      	movs	r3, #4
 80065ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065ce:	e10e      	b.n	80067ee <UART_SetConfig+0x2fe>
 80065d0:	2308      	movs	r3, #8
 80065d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065d6:	e10a      	b.n	80067ee <UART_SetConfig+0x2fe>
 80065d8:	2310      	movs	r3, #16
 80065da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065de:	e106      	b.n	80067ee <UART_SetConfig+0x2fe>
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a7c      	ldr	r2, [pc, #496]	@ (80067d8 <UART_SetConfig+0x2e8>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d138      	bne.n	800665c <UART_SetConfig+0x16c>
 80065ea:	4b7a      	ldr	r3, [pc, #488]	@ (80067d4 <UART_SetConfig+0x2e4>)
 80065ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065f0:	f003 030c 	and.w	r3, r3, #12
 80065f4:	2b0c      	cmp	r3, #12
 80065f6:	d82d      	bhi.n	8006654 <UART_SetConfig+0x164>
 80065f8:	a201      	add	r2, pc, #4	@ (adr r2, 8006600 <UART_SetConfig+0x110>)
 80065fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065fe:	bf00      	nop
 8006600:	08006635 	.word	0x08006635
 8006604:	08006655 	.word	0x08006655
 8006608:	08006655 	.word	0x08006655
 800660c:	08006655 	.word	0x08006655
 8006610:	08006645 	.word	0x08006645
 8006614:	08006655 	.word	0x08006655
 8006618:	08006655 	.word	0x08006655
 800661c:	08006655 	.word	0x08006655
 8006620:	0800663d 	.word	0x0800663d
 8006624:	08006655 	.word	0x08006655
 8006628:	08006655 	.word	0x08006655
 800662c:	08006655 	.word	0x08006655
 8006630:	0800664d 	.word	0x0800664d
 8006634:	2300      	movs	r3, #0
 8006636:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800663a:	e0d8      	b.n	80067ee <UART_SetConfig+0x2fe>
 800663c:	2302      	movs	r3, #2
 800663e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006642:	e0d4      	b.n	80067ee <UART_SetConfig+0x2fe>
 8006644:	2304      	movs	r3, #4
 8006646:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800664a:	e0d0      	b.n	80067ee <UART_SetConfig+0x2fe>
 800664c:	2308      	movs	r3, #8
 800664e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006652:	e0cc      	b.n	80067ee <UART_SetConfig+0x2fe>
 8006654:	2310      	movs	r3, #16
 8006656:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800665a:	e0c8      	b.n	80067ee <UART_SetConfig+0x2fe>
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a5e      	ldr	r2, [pc, #376]	@ (80067dc <UART_SetConfig+0x2ec>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d125      	bne.n	80066b2 <UART_SetConfig+0x1c2>
 8006666:	4b5b      	ldr	r3, [pc, #364]	@ (80067d4 <UART_SetConfig+0x2e4>)
 8006668:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800666c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006670:	2b30      	cmp	r3, #48	@ 0x30
 8006672:	d016      	beq.n	80066a2 <UART_SetConfig+0x1b2>
 8006674:	2b30      	cmp	r3, #48	@ 0x30
 8006676:	d818      	bhi.n	80066aa <UART_SetConfig+0x1ba>
 8006678:	2b20      	cmp	r3, #32
 800667a:	d00a      	beq.n	8006692 <UART_SetConfig+0x1a2>
 800667c:	2b20      	cmp	r3, #32
 800667e:	d814      	bhi.n	80066aa <UART_SetConfig+0x1ba>
 8006680:	2b00      	cmp	r3, #0
 8006682:	d002      	beq.n	800668a <UART_SetConfig+0x19a>
 8006684:	2b10      	cmp	r3, #16
 8006686:	d008      	beq.n	800669a <UART_SetConfig+0x1aa>
 8006688:	e00f      	b.n	80066aa <UART_SetConfig+0x1ba>
 800668a:	2300      	movs	r3, #0
 800668c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006690:	e0ad      	b.n	80067ee <UART_SetConfig+0x2fe>
 8006692:	2302      	movs	r3, #2
 8006694:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006698:	e0a9      	b.n	80067ee <UART_SetConfig+0x2fe>
 800669a:	2304      	movs	r3, #4
 800669c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066a0:	e0a5      	b.n	80067ee <UART_SetConfig+0x2fe>
 80066a2:	2308      	movs	r3, #8
 80066a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066a8:	e0a1      	b.n	80067ee <UART_SetConfig+0x2fe>
 80066aa:	2310      	movs	r3, #16
 80066ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066b0:	e09d      	b.n	80067ee <UART_SetConfig+0x2fe>
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a4a      	ldr	r2, [pc, #296]	@ (80067e0 <UART_SetConfig+0x2f0>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d125      	bne.n	8006708 <UART_SetConfig+0x218>
 80066bc:	4b45      	ldr	r3, [pc, #276]	@ (80067d4 <UART_SetConfig+0x2e4>)
 80066be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066c2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80066c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80066c8:	d016      	beq.n	80066f8 <UART_SetConfig+0x208>
 80066ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80066cc:	d818      	bhi.n	8006700 <UART_SetConfig+0x210>
 80066ce:	2b80      	cmp	r3, #128	@ 0x80
 80066d0:	d00a      	beq.n	80066e8 <UART_SetConfig+0x1f8>
 80066d2:	2b80      	cmp	r3, #128	@ 0x80
 80066d4:	d814      	bhi.n	8006700 <UART_SetConfig+0x210>
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d002      	beq.n	80066e0 <UART_SetConfig+0x1f0>
 80066da:	2b40      	cmp	r3, #64	@ 0x40
 80066dc:	d008      	beq.n	80066f0 <UART_SetConfig+0x200>
 80066de:	e00f      	b.n	8006700 <UART_SetConfig+0x210>
 80066e0:	2300      	movs	r3, #0
 80066e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066e6:	e082      	b.n	80067ee <UART_SetConfig+0x2fe>
 80066e8:	2302      	movs	r3, #2
 80066ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066ee:	e07e      	b.n	80067ee <UART_SetConfig+0x2fe>
 80066f0:	2304      	movs	r3, #4
 80066f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066f6:	e07a      	b.n	80067ee <UART_SetConfig+0x2fe>
 80066f8:	2308      	movs	r3, #8
 80066fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066fe:	e076      	b.n	80067ee <UART_SetConfig+0x2fe>
 8006700:	2310      	movs	r3, #16
 8006702:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006706:	e072      	b.n	80067ee <UART_SetConfig+0x2fe>
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a35      	ldr	r2, [pc, #212]	@ (80067e4 <UART_SetConfig+0x2f4>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d12a      	bne.n	8006768 <UART_SetConfig+0x278>
 8006712:	4b30      	ldr	r3, [pc, #192]	@ (80067d4 <UART_SetConfig+0x2e4>)
 8006714:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006718:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800671c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006720:	d01a      	beq.n	8006758 <UART_SetConfig+0x268>
 8006722:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006726:	d81b      	bhi.n	8006760 <UART_SetConfig+0x270>
 8006728:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800672c:	d00c      	beq.n	8006748 <UART_SetConfig+0x258>
 800672e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006732:	d815      	bhi.n	8006760 <UART_SetConfig+0x270>
 8006734:	2b00      	cmp	r3, #0
 8006736:	d003      	beq.n	8006740 <UART_SetConfig+0x250>
 8006738:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800673c:	d008      	beq.n	8006750 <UART_SetConfig+0x260>
 800673e:	e00f      	b.n	8006760 <UART_SetConfig+0x270>
 8006740:	2300      	movs	r3, #0
 8006742:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006746:	e052      	b.n	80067ee <UART_SetConfig+0x2fe>
 8006748:	2302      	movs	r3, #2
 800674a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800674e:	e04e      	b.n	80067ee <UART_SetConfig+0x2fe>
 8006750:	2304      	movs	r3, #4
 8006752:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006756:	e04a      	b.n	80067ee <UART_SetConfig+0x2fe>
 8006758:	2308      	movs	r3, #8
 800675a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800675e:	e046      	b.n	80067ee <UART_SetConfig+0x2fe>
 8006760:	2310      	movs	r3, #16
 8006762:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006766:	e042      	b.n	80067ee <UART_SetConfig+0x2fe>
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a17      	ldr	r2, [pc, #92]	@ (80067cc <UART_SetConfig+0x2dc>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d13a      	bne.n	80067e8 <UART_SetConfig+0x2f8>
 8006772:	4b18      	ldr	r3, [pc, #96]	@ (80067d4 <UART_SetConfig+0x2e4>)
 8006774:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006778:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800677c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006780:	d01a      	beq.n	80067b8 <UART_SetConfig+0x2c8>
 8006782:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006786:	d81b      	bhi.n	80067c0 <UART_SetConfig+0x2d0>
 8006788:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800678c:	d00c      	beq.n	80067a8 <UART_SetConfig+0x2b8>
 800678e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006792:	d815      	bhi.n	80067c0 <UART_SetConfig+0x2d0>
 8006794:	2b00      	cmp	r3, #0
 8006796:	d003      	beq.n	80067a0 <UART_SetConfig+0x2b0>
 8006798:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800679c:	d008      	beq.n	80067b0 <UART_SetConfig+0x2c0>
 800679e:	e00f      	b.n	80067c0 <UART_SetConfig+0x2d0>
 80067a0:	2300      	movs	r3, #0
 80067a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067a6:	e022      	b.n	80067ee <UART_SetConfig+0x2fe>
 80067a8:	2302      	movs	r3, #2
 80067aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067ae:	e01e      	b.n	80067ee <UART_SetConfig+0x2fe>
 80067b0:	2304      	movs	r3, #4
 80067b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067b6:	e01a      	b.n	80067ee <UART_SetConfig+0x2fe>
 80067b8:	2308      	movs	r3, #8
 80067ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067be:	e016      	b.n	80067ee <UART_SetConfig+0x2fe>
 80067c0:	2310      	movs	r3, #16
 80067c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067c6:	e012      	b.n	80067ee <UART_SetConfig+0x2fe>
 80067c8:	cfff69f3 	.word	0xcfff69f3
 80067cc:	40008000 	.word	0x40008000
 80067d0:	40013800 	.word	0x40013800
 80067d4:	40021000 	.word	0x40021000
 80067d8:	40004400 	.word	0x40004400
 80067dc:	40004800 	.word	0x40004800
 80067e0:	40004c00 	.word	0x40004c00
 80067e4:	40005000 	.word	0x40005000
 80067e8:	2310      	movs	r3, #16
 80067ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4aae      	ldr	r2, [pc, #696]	@ (8006aac <UART_SetConfig+0x5bc>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	f040 8097 	bne.w	8006928 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80067fa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80067fe:	2b08      	cmp	r3, #8
 8006800:	d823      	bhi.n	800684a <UART_SetConfig+0x35a>
 8006802:	a201      	add	r2, pc, #4	@ (adr r2, 8006808 <UART_SetConfig+0x318>)
 8006804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006808:	0800682d 	.word	0x0800682d
 800680c:	0800684b 	.word	0x0800684b
 8006810:	08006835 	.word	0x08006835
 8006814:	0800684b 	.word	0x0800684b
 8006818:	0800683b 	.word	0x0800683b
 800681c:	0800684b 	.word	0x0800684b
 8006820:	0800684b 	.word	0x0800684b
 8006824:	0800684b 	.word	0x0800684b
 8006828:	08006843 	.word	0x08006843
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800682c:	f7fc f9b2 	bl	8002b94 <HAL_RCC_GetPCLK1Freq>
 8006830:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006832:	e010      	b.n	8006856 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006834:	4b9e      	ldr	r3, [pc, #632]	@ (8006ab0 <UART_SetConfig+0x5c0>)
 8006836:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006838:	e00d      	b.n	8006856 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800683a:	f7fc f93d 	bl	8002ab8 <HAL_RCC_GetSysClockFreq>
 800683e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006840:	e009      	b.n	8006856 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006842:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006846:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006848:	e005      	b.n	8006856 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800684a:	2300      	movs	r3, #0
 800684c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006854:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006858:	2b00      	cmp	r3, #0
 800685a:	f000 8130 	beq.w	8006abe <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006862:	4a94      	ldr	r2, [pc, #592]	@ (8006ab4 <UART_SetConfig+0x5c4>)
 8006864:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006868:	461a      	mov	r2, r3
 800686a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800686c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006870:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	685a      	ldr	r2, [r3, #4]
 8006876:	4613      	mov	r3, r2
 8006878:	005b      	lsls	r3, r3, #1
 800687a:	4413      	add	r3, r2
 800687c:	69ba      	ldr	r2, [r7, #24]
 800687e:	429a      	cmp	r2, r3
 8006880:	d305      	bcc.n	800688e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006888:	69ba      	ldr	r2, [r7, #24]
 800688a:	429a      	cmp	r2, r3
 800688c:	d903      	bls.n	8006896 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006894:	e113      	b.n	8006abe <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006898:	2200      	movs	r2, #0
 800689a:	60bb      	str	r3, [r7, #8]
 800689c:	60fa      	str	r2, [r7, #12]
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068a2:	4a84      	ldr	r2, [pc, #528]	@ (8006ab4 <UART_SetConfig+0x5c4>)
 80068a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	2200      	movs	r2, #0
 80068ac:	603b      	str	r3, [r7, #0]
 80068ae:	607a      	str	r2, [r7, #4]
 80068b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80068b8:	f7f9 fd1a 	bl	80002f0 <__aeabi_uldivmod>
 80068bc:	4602      	mov	r2, r0
 80068be:	460b      	mov	r3, r1
 80068c0:	4610      	mov	r0, r2
 80068c2:	4619      	mov	r1, r3
 80068c4:	f04f 0200 	mov.w	r2, #0
 80068c8:	f04f 0300 	mov.w	r3, #0
 80068cc:	020b      	lsls	r3, r1, #8
 80068ce:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80068d2:	0202      	lsls	r2, r0, #8
 80068d4:	6979      	ldr	r1, [r7, #20]
 80068d6:	6849      	ldr	r1, [r1, #4]
 80068d8:	0849      	lsrs	r1, r1, #1
 80068da:	2000      	movs	r0, #0
 80068dc:	460c      	mov	r4, r1
 80068de:	4605      	mov	r5, r0
 80068e0:	eb12 0804 	adds.w	r8, r2, r4
 80068e4:	eb43 0905 	adc.w	r9, r3, r5
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	469a      	mov	sl, r3
 80068f0:	4693      	mov	fp, r2
 80068f2:	4652      	mov	r2, sl
 80068f4:	465b      	mov	r3, fp
 80068f6:	4640      	mov	r0, r8
 80068f8:	4649      	mov	r1, r9
 80068fa:	f7f9 fcf9 	bl	80002f0 <__aeabi_uldivmod>
 80068fe:	4602      	mov	r2, r0
 8006900:	460b      	mov	r3, r1
 8006902:	4613      	mov	r3, r2
 8006904:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006906:	6a3b      	ldr	r3, [r7, #32]
 8006908:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800690c:	d308      	bcc.n	8006920 <UART_SetConfig+0x430>
 800690e:	6a3b      	ldr	r3, [r7, #32]
 8006910:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006914:	d204      	bcs.n	8006920 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	6a3a      	ldr	r2, [r7, #32]
 800691c:	60da      	str	r2, [r3, #12]
 800691e:	e0ce      	b.n	8006abe <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006926:	e0ca      	b.n	8006abe <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	69db      	ldr	r3, [r3, #28]
 800692c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006930:	d166      	bne.n	8006a00 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006932:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006936:	2b08      	cmp	r3, #8
 8006938:	d827      	bhi.n	800698a <UART_SetConfig+0x49a>
 800693a:	a201      	add	r2, pc, #4	@ (adr r2, 8006940 <UART_SetConfig+0x450>)
 800693c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006940:	08006965 	.word	0x08006965
 8006944:	0800696d 	.word	0x0800696d
 8006948:	08006975 	.word	0x08006975
 800694c:	0800698b 	.word	0x0800698b
 8006950:	0800697b 	.word	0x0800697b
 8006954:	0800698b 	.word	0x0800698b
 8006958:	0800698b 	.word	0x0800698b
 800695c:	0800698b 	.word	0x0800698b
 8006960:	08006983 	.word	0x08006983
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006964:	f7fc f916 	bl	8002b94 <HAL_RCC_GetPCLK1Freq>
 8006968:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800696a:	e014      	b.n	8006996 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800696c:	f7fc f928 	bl	8002bc0 <HAL_RCC_GetPCLK2Freq>
 8006970:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006972:	e010      	b.n	8006996 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006974:	4b4e      	ldr	r3, [pc, #312]	@ (8006ab0 <UART_SetConfig+0x5c0>)
 8006976:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006978:	e00d      	b.n	8006996 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800697a:	f7fc f89d 	bl	8002ab8 <HAL_RCC_GetSysClockFreq>
 800697e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006980:	e009      	b.n	8006996 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006982:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006986:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006988:	e005      	b.n	8006996 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800698a:	2300      	movs	r3, #0
 800698c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006994:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006998:	2b00      	cmp	r3, #0
 800699a:	f000 8090 	beq.w	8006abe <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069a2:	4a44      	ldr	r2, [pc, #272]	@ (8006ab4 <UART_SetConfig+0x5c4>)
 80069a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069a8:	461a      	mov	r2, r3
 80069aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80069b0:	005a      	lsls	r2, r3, #1
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	085b      	lsrs	r3, r3, #1
 80069b8:	441a      	add	r2, r3
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	fbb2 f3f3 	udiv	r3, r2, r3
 80069c2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069c4:	6a3b      	ldr	r3, [r7, #32]
 80069c6:	2b0f      	cmp	r3, #15
 80069c8:	d916      	bls.n	80069f8 <UART_SetConfig+0x508>
 80069ca:	6a3b      	ldr	r3, [r7, #32]
 80069cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069d0:	d212      	bcs.n	80069f8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80069d2:	6a3b      	ldr	r3, [r7, #32]
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	f023 030f 	bic.w	r3, r3, #15
 80069da:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80069dc:	6a3b      	ldr	r3, [r7, #32]
 80069de:	085b      	lsrs	r3, r3, #1
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	f003 0307 	and.w	r3, r3, #7
 80069e6:	b29a      	uxth	r2, r3
 80069e8:	8bfb      	ldrh	r3, [r7, #30]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	8bfa      	ldrh	r2, [r7, #30]
 80069f4:	60da      	str	r2, [r3, #12]
 80069f6:	e062      	b.n	8006abe <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80069fe:	e05e      	b.n	8006abe <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a00:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006a04:	2b08      	cmp	r3, #8
 8006a06:	d828      	bhi.n	8006a5a <UART_SetConfig+0x56a>
 8006a08:	a201      	add	r2, pc, #4	@ (adr r2, 8006a10 <UART_SetConfig+0x520>)
 8006a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a0e:	bf00      	nop
 8006a10:	08006a35 	.word	0x08006a35
 8006a14:	08006a3d 	.word	0x08006a3d
 8006a18:	08006a45 	.word	0x08006a45
 8006a1c:	08006a5b 	.word	0x08006a5b
 8006a20:	08006a4b 	.word	0x08006a4b
 8006a24:	08006a5b 	.word	0x08006a5b
 8006a28:	08006a5b 	.word	0x08006a5b
 8006a2c:	08006a5b 	.word	0x08006a5b
 8006a30:	08006a53 	.word	0x08006a53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a34:	f7fc f8ae 	bl	8002b94 <HAL_RCC_GetPCLK1Freq>
 8006a38:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a3a:	e014      	b.n	8006a66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a3c:	f7fc f8c0 	bl	8002bc0 <HAL_RCC_GetPCLK2Freq>
 8006a40:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a42:	e010      	b.n	8006a66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a44:	4b1a      	ldr	r3, [pc, #104]	@ (8006ab0 <UART_SetConfig+0x5c0>)
 8006a46:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006a48:	e00d      	b.n	8006a66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a4a:	f7fc f835 	bl	8002ab8 <HAL_RCC_GetSysClockFreq>
 8006a4e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a50:	e009      	b.n	8006a66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006a58:	e005      	b.n	8006a66 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006a64:	bf00      	nop
    }

    if (pclk != 0U)
 8006a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d028      	beq.n	8006abe <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a70:	4a10      	ldr	r2, [pc, #64]	@ (8006ab4 <UART_SetConfig+0x5c4>)
 8006a72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a76:	461a      	mov	r2, r3
 8006a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a7a:	fbb3 f2f2 	udiv	r2, r3, r2
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	085b      	lsrs	r3, r3, #1
 8006a84:	441a      	add	r2, r3
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a8e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a90:	6a3b      	ldr	r3, [r7, #32]
 8006a92:	2b0f      	cmp	r3, #15
 8006a94:	d910      	bls.n	8006ab8 <UART_SetConfig+0x5c8>
 8006a96:	6a3b      	ldr	r3, [r7, #32]
 8006a98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a9c:	d20c      	bcs.n	8006ab8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006a9e:	6a3b      	ldr	r3, [r7, #32]
 8006aa0:	b29a      	uxth	r2, r3
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	60da      	str	r2, [r3, #12]
 8006aa8:	e009      	b.n	8006abe <UART_SetConfig+0x5ce>
 8006aaa:	bf00      	nop
 8006aac:	40008000 	.word	0x40008000
 8006ab0:	00f42400 	.word	0x00f42400
 8006ab4:	08007f28 	.word	0x08007f28
      }
      else
      {
        ret = HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	2201      	movs	r2, #1
 8006aca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006ada:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3730      	adds	r7, #48	@ 0x30
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006ae8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006af4:	f003 0308 	and.w	r3, r3, #8
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d00a      	beq.n	8006b12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	430a      	orrs	r2, r1
 8006b10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b16:	f003 0301 	and.w	r3, r3, #1
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d00a      	beq.n	8006b34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	430a      	orrs	r2, r1
 8006b32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b38:	f003 0302 	and.w	r3, r3, #2
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d00a      	beq.n	8006b56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	430a      	orrs	r2, r1
 8006b54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b5a:	f003 0304 	and.w	r3, r3, #4
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d00a      	beq.n	8006b78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	430a      	orrs	r2, r1
 8006b76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b7c:	f003 0310 	and.w	r3, r3, #16
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d00a      	beq.n	8006b9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	430a      	orrs	r2, r1
 8006b98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b9e:	f003 0320 	and.w	r3, r3, #32
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00a      	beq.n	8006bbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	430a      	orrs	r2, r1
 8006bba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d01a      	beq.n	8006bfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	430a      	orrs	r2, r1
 8006bdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006be2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006be6:	d10a      	bne.n	8006bfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	430a      	orrs	r2, r1
 8006bfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00a      	beq.n	8006c20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	430a      	orrs	r2, r1
 8006c1e:	605a      	str	r2, [r3, #4]
  }
}
 8006c20:	bf00      	nop
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b098      	sub	sp, #96	@ 0x60
 8006c30:	af02      	add	r7, sp, #8
 8006c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c3c:	f7fa fe8a 	bl	8001954 <HAL_GetTick>
 8006c40:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 0308 	and.w	r3, r3, #8
 8006c4c:	2b08      	cmp	r3, #8
 8006c4e:	d12f      	bne.n	8006cb0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006c54:	9300      	str	r3, [sp, #0]
 8006c56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 f88e 	bl	8006d80 <UART_WaitOnFlagUntilTimeout>
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d022      	beq.n	8006cb0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c72:	e853 3f00 	ldrex	r3, [r3]
 8006c76:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	461a      	mov	r2, r3
 8006c86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c88:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c8a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c90:	e841 2300 	strex	r3, r2, [r1]
 8006c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d1e6      	bne.n	8006c6a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2220      	movs	r2, #32
 8006ca0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cac:	2303      	movs	r3, #3
 8006cae:	e063      	b.n	8006d78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 0304 	and.w	r3, r3, #4
 8006cba:	2b04      	cmp	r3, #4
 8006cbc:	d149      	bne.n	8006d52 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cbe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006cc2:	9300      	str	r3, [sp, #0]
 8006cc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f000 f857 	bl	8006d80 <UART_WaitOnFlagUntilTimeout>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d03c      	beq.n	8006d52 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce0:	e853 3f00 	ldrex	r3, [r3]
 8006ce4:	623b      	str	r3, [r7, #32]
   return(result);
 8006ce6:	6a3b      	ldr	r3, [r7, #32]
 8006ce8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006cec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cf6:	633b      	str	r3, [r7, #48]	@ 0x30
 8006cf8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cfa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006cfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cfe:	e841 2300 	strex	r3, r2, [r1]
 8006d02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d1e6      	bne.n	8006cd8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	3308      	adds	r3, #8
 8006d10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	e853 3f00 	ldrex	r3, [r3]
 8006d18:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f023 0301 	bic.w	r3, r3, #1
 8006d20:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	3308      	adds	r3, #8
 8006d28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d2a:	61fa      	str	r2, [r7, #28]
 8006d2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d2e:	69b9      	ldr	r1, [r7, #24]
 8006d30:	69fa      	ldr	r2, [r7, #28]
 8006d32:	e841 2300 	strex	r3, r2, [r1]
 8006d36:	617b      	str	r3, [r7, #20]
   return(result);
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d1e5      	bne.n	8006d0a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2220      	movs	r2, #32
 8006d42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d4e:	2303      	movs	r3, #3
 8006d50:	e012      	b.n	8006d78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2220      	movs	r2, #32
 8006d56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2220      	movs	r2, #32
 8006d5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2200      	movs	r2, #0
 8006d72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006d76:	2300      	movs	r3, #0
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3758      	adds	r7, #88	@ 0x58
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	603b      	str	r3, [r7, #0]
 8006d8c:	4613      	mov	r3, r2
 8006d8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d90:	e04f      	b.n	8006e32 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d98:	d04b      	beq.n	8006e32 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d9a:	f7fa fddb 	bl	8001954 <HAL_GetTick>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	1ad3      	subs	r3, r2, r3
 8006da4:	69ba      	ldr	r2, [r7, #24]
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d302      	bcc.n	8006db0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d101      	bne.n	8006db4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006db0:	2303      	movs	r3, #3
 8006db2:	e04e      	b.n	8006e52 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f003 0304 	and.w	r3, r3, #4
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d037      	beq.n	8006e32 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	2b80      	cmp	r3, #128	@ 0x80
 8006dc6:	d034      	beq.n	8006e32 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	2b40      	cmp	r3, #64	@ 0x40
 8006dcc:	d031      	beq.n	8006e32 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	69db      	ldr	r3, [r3, #28]
 8006dd4:	f003 0308 	and.w	r3, r3, #8
 8006dd8:	2b08      	cmp	r3, #8
 8006dda:	d110      	bne.n	8006dfe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2208      	movs	r2, #8
 8006de2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006de4:	68f8      	ldr	r0, [r7, #12]
 8006de6:	f000 f838 	bl	8006e5a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2208      	movs	r2, #8
 8006dee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2200      	movs	r2, #0
 8006df6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e029      	b.n	8006e52 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	69db      	ldr	r3, [r3, #28]
 8006e04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e0c:	d111      	bne.n	8006e32 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006e16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e18:	68f8      	ldr	r0, [r7, #12]
 8006e1a:	f000 f81e 	bl	8006e5a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2220      	movs	r2, #32
 8006e22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006e2e:	2303      	movs	r3, #3
 8006e30:	e00f      	b.n	8006e52 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	69da      	ldr	r2, [r3, #28]
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	4013      	ands	r3, r2
 8006e3c:	68ba      	ldr	r2, [r7, #8]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	bf0c      	ite	eq
 8006e42:	2301      	moveq	r3, #1
 8006e44:	2300      	movne	r3, #0
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	461a      	mov	r2, r3
 8006e4a:	79fb      	ldrb	r3, [r7, #7]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d0a0      	beq.n	8006d92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3710      	adds	r7, #16
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}

08006e5a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e5a:	b480      	push	{r7}
 8006e5c:	b095      	sub	sp, #84	@ 0x54
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e6a:	e853 3f00 	ldrex	r3, [r3]
 8006e6e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e72:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e80:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e82:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e84:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e86:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e88:	e841 2300 	strex	r3, r2, [r1]
 8006e8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d1e6      	bne.n	8006e62 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	3308      	adds	r3, #8
 8006e9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9c:	6a3b      	ldr	r3, [r7, #32]
 8006e9e:	e853 3f00 	ldrex	r3, [r3]
 8006ea2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006eaa:	f023 0301 	bic.w	r3, r3, #1
 8006eae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	3308      	adds	r3, #8
 8006eb6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006eb8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006eba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ebc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ebe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ec0:	e841 2300 	strex	r3, r2, [r1]
 8006ec4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d1e3      	bne.n	8006e94 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d118      	bne.n	8006f06 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	e853 3f00 	ldrex	r3, [r3]
 8006ee0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	f023 0310 	bic.w	r3, r3, #16
 8006ee8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	461a      	mov	r2, r3
 8006ef0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ef2:	61bb      	str	r3, [r7, #24]
 8006ef4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef6:	6979      	ldr	r1, [r7, #20]
 8006ef8:	69ba      	ldr	r2, [r7, #24]
 8006efa:	e841 2300 	strex	r3, r2, [r1]
 8006efe:	613b      	str	r3, [r7, #16]
   return(result);
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d1e6      	bne.n	8006ed4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2220      	movs	r2, #32
 8006f0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006f1a:	bf00      	nop
 8006f1c:	3754      	adds	r7, #84	@ 0x54
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr

08006f26 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f26:	b580      	push	{r7, lr}
 8006f28:	b084      	sub	sp, #16
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f32:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2200      	movs	r2, #0
 8006f38:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f44:	68f8      	ldr	r0, [r7, #12]
 8006f46:	f7ff fabd 	bl	80064c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f4a:	bf00      	nop
 8006f4c:	3710      	adds	r7, #16
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}

08006f52 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f52:	b580      	push	{r7, lr}
 8006f54:	b088      	sub	sp, #32
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	e853 3f00 	ldrex	r3, [r3]
 8006f66:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f6e:	61fb      	str	r3, [r7, #28]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	461a      	mov	r2, r3
 8006f76:	69fb      	ldr	r3, [r7, #28]
 8006f78:	61bb      	str	r3, [r7, #24]
 8006f7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f7c:	6979      	ldr	r1, [r7, #20]
 8006f7e:	69ba      	ldr	r2, [r7, #24]
 8006f80:	e841 2300 	strex	r3, r2, [r1]
 8006f84:	613b      	str	r3, [r7, #16]
   return(result);
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d1e6      	bne.n	8006f5a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2220      	movs	r2, #32
 8006f90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f7ff fa88 	bl	80064b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fa0:	bf00      	nop
 8006fa2:	3720      	adds	r7, #32
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006fb0:	bf00      	nop
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b083      	sub	sp, #12
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006fc4:	bf00      	nop
 8006fc6:	370c      	adds	r7, #12
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr

08006fd0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006fd8:	bf00      	nop
 8006fda:	370c      	adds	r7, #12
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr

08006fe4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b085      	sub	sp, #20
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d101      	bne.n	8006ffa <HAL_UARTEx_DisableFifoMode+0x16>
 8006ff6:	2302      	movs	r3, #2
 8006ff8:	e027      	b.n	800704a <HAL_UARTEx_DisableFifoMode+0x66>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2224      	movs	r2, #36	@ 0x24
 8007006:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f022 0201 	bic.w	r2, r2, #1
 8007020:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007028:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	68fa      	ldr	r2, [r7, #12]
 8007036:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2220      	movs	r2, #32
 800703c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	3714      	adds	r7, #20
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr

08007056 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007056:	b580      	push	{r7, lr}
 8007058:	b084      	sub	sp, #16
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
 800705e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007066:	2b01      	cmp	r3, #1
 8007068:	d101      	bne.n	800706e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800706a:	2302      	movs	r3, #2
 800706c:	e02d      	b.n	80070ca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2201      	movs	r2, #1
 8007072:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2224      	movs	r2, #36	@ 0x24
 800707a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f022 0201 	bic.w	r2, r2, #1
 8007094:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	683a      	ldr	r2, [r7, #0]
 80070a6:	430a      	orrs	r2, r1
 80070a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 f850 	bl	8007150 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	68fa      	ldr	r2, [r7, #12]
 80070b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2220      	movs	r2, #32
 80070bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80070c8:	2300      	movs	r3, #0
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3710      	adds	r7, #16
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80070d2:	b580      	push	{r7, lr}
 80070d4:	b084      	sub	sp, #16
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
 80070da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d101      	bne.n	80070ea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80070e6:	2302      	movs	r3, #2
 80070e8:	e02d      	b.n	8007146 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2201      	movs	r2, #1
 80070ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2224      	movs	r2, #36	@ 0x24
 80070f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f022 0201 	bic.w	r2, r2, #1
 8007110:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	683a      	ldr	r2, [r7, #0]
 8007122:	430a      	orrs	r2, r1
 8007124:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 f812 	bl	8007150 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	68fa      	ldr	r2, [r7, #12]
 8007132:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2220      	movs	r2, #32
 8007138:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2200      	movs	r2, #0
 8007140:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007144:	2300      	movs	r3, #0
}
 8007146:	4618      	mov	r0, r3
 8007148:	3710      	adds	r7, #16
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
	...

08007150 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007150:	b480      	push	{r7}
 8007152:	b085      	sub	sp, #20
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800715c:	2b00      	cmp	r3, #0
 800715e:	d108      	bne.n	8007172 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2201      	movs	r2, #1
 8007164:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2201      	movs	r2, #1
 800716c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007170:	e031      	b.n	80071d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007172:	2308      	movs	r3, #8
 8007174:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007176:	2308      	movs	r3, #8
 8007178:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	0e5b      	lsrs	r3, r3, #25
 8007182:	b2db      	uxtb	r3, r3
 8007184:	f003 0307 	and.w	r3, r3, #7
 8007188:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	0f5b      	lsrs	r3, r3, #29
 8007192:	b2db      	uxtb	r3, r3
 8007194:	f003 0307 	and.w	r3, r3, #7
 8007198:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800719a:	7bbb      	ldrb	r3, [r7, #14]
 800719c:	7b3a      	ldrb	r2, [r7, #12]
 800719e:	4911      	ldr	r1, [pc, #68]	@ (80071e4 <UARTEx_SetNbDataToProcess+0x94>)
 80071a0:	5c8a      	ldrb	r2, [r1, r2]
 80071a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80071a6:	7b3a      	ldrb	r2, [r7, #12]
 80071a8:	490f      	ldr	r1, [pc, #60]	@ (80071e8 <UARTEx_SetNbDataToProcess+0x98>)
 80071aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80071ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80071b0:	b29a      	uxth	r2, r3
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80071b8:	7bfb      	ldrb	r3, [r7, #15]
 80071ba:	7b7a      	ldrb	r2, [r7, #13]
 80071bc:	4909      	ldr	r1, [pc, #36]	@ (80071e4 <UARTEx_SetNbDataToProcess+0x94>)
 80071be:	5c8a      	ldrb	r2, [r1, r2]
 80071c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80071c4:	7b7a      	ldrb	r2, [r7, #13]
 80071c6:	4908      	ldr	r1, [pc, #32]	@ (80071e8 <UARTEx_SetNbDataToProcess+0x98>)
 80071c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80071ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80071ce:	b29a      	uxth	r2, r3
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80071d6:	bf00      	nop
 80071d8:	3714      	adds	r7, #20
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr
 80071e2:	bf00      	nop
 80071e4:	08007f40 	.word	0x08007f40
 80071e8:	08007f48 	.word	0x08007f48

080071ec <malloc>:
 80071ec:	4b02      	ldr	r3, [pc, #8]	@ (80071f8 <malloc+0xc>)
 80071ee:	4601      	mov	r1, r0
 80071f0:	6818      	ldr	r0, [r3, #0]
 80071f2:	f000 b82d 	b.w	8007250 <_malloc_r>
 80071f6:	bf00      	nop
 80071f8:	2000002c 	.word	0x2000002c

080071fc <free>:
 80071fc:	4b02      	ldr	r3, [pc, #8]	@ (8007208 <free+0xc>)
 80071fe:	4601      	mov	r1, r0
 8007200:	6818      	ldr	r0, [r3, #0]
 8007202:	f000 b935 	b.w	8007470 <_free_r>
 8007206:	bf00      	nop
 8007208:	2000002c 	.word	0x2000002c

0800720c <sbrk_aligned>:
 800720c:	b570      	push	{r4, r5, r6, lr}
 800720e:	4e0f      	ldr	r6, [pc, #60]	@ (800724c <sbrk_aligned+0x40>)
 8007210:	460c      	mov	r4, r1
 8007212:	6831      	ldr	r1, [r6, #0]
 8007214:	4605      	mov	r5, r0
 8007216:	b911      	cbnz	r1, 800721e <sbrk_aligned+0x12>
 8007218:	f000 f8ee 	bl	80073f8 <_sbrk_r>
 800721c:	6030      	str	r0, [r6, #0]
 800721e:	4621      	mov	r1, r4
 8007220:	4628      	mov	r0, r5
 8007222:	f000 f8e9 	bl	80073f8 <_sbrk_r>
 8007226:	1c43      	adds	r3, r0, #1
 8007228:	d103      	bne.n	8007232 <sbrk_aligned+0x26>
 800722a:	f04f 34ff 	mov.w	r4, #4294967295
 800722e:	4620      	mov	r0, r4
 8007230:	bd70      	pop	{r4, r5, r6, pc}
 8007232:	1cc4      	adds	r4, r0, #3
 8007234:	f024 0403 	bic.w	r4, r4, #3
 8007238:	42a0      	cmp	r0, r4
 800723a:	d0f8      	beq.n	800722e <sbrk_aligned+0x22>
 800723c:	1a21      	subs	r1, r4, r0
 800723e:	4628      	mov	r0, r5
 8007240:	f000 f8da 	bl	80073f8 <_sbrk_r>
 8007244:	3001      	adds	r0, #1
 8007246:	d1f2      	bne.n	800722e <sbrk_aligned+0x22>
 8007248:	e7ef      	b.n	800722a <sbrk_aligned+0x1e>
 800724a:	bf00      	nop
 800724c:	20000358 	.word	0x20000358

08007250 <_malloc_r>:
 8007250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007254:	1ccd      	adds	r5, r1, #3
 8007256:	f025 0503 	bic.w	r5, r5, #3
 800725a:	3508      	adds	r5, #8
 800725c:	2d0c      	cmp	r5, #12
 800725e:	bf38      	it	cc
 8007260:	250c      	movcc	r5, #12
 8007262:	2d00      	cmp	r5, #0
 8007264:	4606      	mov	r6, r0
 8007266:	db01      	blt.n	800726c <_malloc_r+0x1c>
 8007268:	42a9      	cmp	r1, r5
 800726a:	d904      	bls.n	8007276 <_malloc_r+0x26>
 800726c:	230c      	movs	r3, #12
 800726e:	6033      	str	r3, [r6, #0]
 8007270:	2000      	movs	r0, #0
 8007272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007276:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800734c <_malloc_r+0xfc>
 800727a:	f000 f869 	bl	8007350 <__malloc_lock>
 800727e:	f8d8 3000 	ldr.w	r3, [r8]
 8007282:	461c      	mov	r4, r3
 8007284:	bb44      	cbnz	r4, 80072d8 <_malloc_r+0x88>
 8007286:	4629      	mov	r1, r5
 8007288:	4630      	mov	r0, r6
 800728a:	f7ff ffbf 	bl	800720c <sbrk_aligned>
 800728e:	1c43      	adds	r3, r0, #1
 8007290:	4604      	mov	r4, r0
 8007292:	d158      	bne.n	8007346 <_malloc_r+0xf6>
 8007294:	f8d8 4000 	ldr.w	r4, [r8]
 8007298:	4627      	mov	r7, r4
 800729a:	2f00      	cmp	r7, #0
 800729c:	d143      	bne.n	8007326 <_malloc_r+0xd6>
 800729e:	2c00      	cmp	r4, #0
 80072a0:	d04b      	beq.n	800733a <_malloc_r+0xea>
 80072a2:	6823      	ldr	r3, [r4, #0]
 80072a4:	4639      	mov	r1, r7
 80072a6:	4630      	mov	r0, r6
 80072a8:	eb04 0903 	add.w	r9, r4, r3
 80072ac:	f000 f8a4 	bl	80073f8 <_sbrk_r>
 80072b0:	4581      	cmp	r9, r0
 80072b2:	d142      	bne.n	800733a <_malloc_r+0xea>
 80072b4:	6821      	ldr	r1, [r4, #0]
 80072b6:	1a6d      	subs	r5, r5, r1
 80072b8:	4629      	mov	r1, r5
 80072ba:	4630      	mov	r0, r6
 80072bc:	f7ff ffa6 	bl	800720c <sbrk_aligned>
 80072c0:	3001      	adds	r0, #1
 80072c2:	d03a      	beq.n	800733a <_malloc_r+0xea>
 80072c4:	6823      	ldr	r3, [r4, #0]
 80072c6:	442b      	add	r3, r5
 80072c8:	6023      	str	r3, [r4, #0]
 80072ca:	f8d8 3000 	ldr.w	r3, [r8]
 80072ce:	685a      	ldr	r2, [r3, #4]
 80072d0:	bb62      	cbnz	r2, 800732c <_malloc_r+0xdc>
 80072d2:	f8c8 7000 	str.w	r7, [r8]
 80072d6:	e00f      	b.n	80072f8 <_malloc_r+0xa8>
 80072d8:	6822      	ldr	r2, [r4, #0]
 80072da:	1b52      	subs	r2, r2, r5
 80072dc:	d420      	bmi.n	8007320 <_malloc_r+0xd0>
 80072de:	2a0b      	cmp	r2, #11
 80072e0:	d917      	bls.n	8007312 <_malloc_r+0xc2>
 80072e2:	1961      	adds	r1, r4, r5
 80072e4:	42a3      	cmp	r3, r4
 80072e6:	6025      	str	r5, [r4, #0]
 80072e8:	bf18      	it	ne
 80072ea:	6059      	strne	r1, [r3, #4]
 80072ec:	6863      	ldr	r3, [r4, #4]
 80072ee:	bf08      	it	eq
 80072f0:	f8c8 1000 	streq.w	r1, [r8]
 80072f4:	5162      	str	r2, [r4, r5]
 80072f6:	604b      	str	r3, [r1, #4]
 80072f8:	4630      	mov	r0, r6
 80072fa:	f000 f82f 	bl	800735c <__malloc_unlock>
 80072fe:	f104 000b 	add.w	r0, r4, #11
 8007302:	1d23      	adds	r3, r4, #4
 8007304:	f020 0007 	bic.w	r0, r0, #7
 8007308:	1ac2      	subs	r2, r0, r3
 800730a:	bf1c      	itt	ne
 800730c:	1a1b      	subne	r3, r3, r0
 800730e:	50a3      	strne	r3, [r4, r2]
 8007310:	e7af      	b.n	8007272 <_malloc_r+0x22>
 8007312:	6862      	ldr	r2, [r4, #4]
 8007314:	42a3      	cmp	r3, r4
 8007316:	bf0c      	ite	eq
 8007318:	f8c8 2000 	streq.w	r2, [r8]
 800731c:	605a      	strne	r2, [r3, #4]
 800731e:	e7eb      	b.n	80072f8 <_malloc_r+0xa8>
 8007320:	4623      	mov	r3, r4
 8007322:	6864      	ldr	r4, [r4, #4]
 8007324:	e7ae      	b.n	8007284 <_malloc_r+0x34>
 8007326:	463c      	mov	r4, r7
 8007328:	687f      	ldr	r7, [r7, #4]
 800732a:	e7b6      	b.n	800729a <_malloc_r+0x4a>
 800732c:	461a      	mov	r2, r3
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	42a3      	cmp	r3, r4
 8007332:	d1fb      	bne.n	800732c <_malloc_r+0xdc>
 8007334:	2300      	movs	r3, #0
 8007336:	6053      	str	r3, [r2, #4]
 8007338:	e7de      	b.n	80072f8 <_malloc_r+0xa8>
 800733a:	230c      	movs	r3, #12
 800733c:	6033      	str	r3, [r6, #0]
 800733e:	4630      	mov	r0, r6
 8007340:	f000 f80c 	bl	800735c <__malloc_unlock>
 8007344:	e794      	b.n	8007270 <_malloc_r+0x20>
 8007346:	6005      	str	r5, [r0, #0]
 8007348:	e7d6      	b.n	80072f8 <_malloc_r+0xa8>
 800734a:	bf00      	nop
 800734c:	2000035c 	.word	0x2000035c

08007350 <__malloc_lock>:
 8007350:	4801      	ldr	r0, [pc, #4]	@ (8007358 <__malloc_lock+0x8>)
 8007352:	f000 b88b 	b.w	800746c <__retarget_lock_acquire_recursive>
 8007356:	bf00      	nop
 8007358:	2000049c 	.word	0x2000049c

0800735c <__malloc_unlock>:
 800735c:	4801      	ldr	r0, [pc, #4]	@ (8007364 <__malloc_unlock+0x8>)
 800735e:	f000 b886 	b.w	800746e <__retarget_lock_release_recursive>
 8007362:	bf00      	nop
 8007364:	2000049c 	.word	0x2000049c

08007368 <siscanf>:
 8007368:	b40e      	push	{r1, r2, r3}
 800736a:	b530      	push	{r4, r5, lr}
 800736c:	b09c      	sub	sp, #112	@ 0x70
 800736e:	ac1f      	add	r4, sp, #124	@ 0x7c
 8007370:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8007374:	f854 5b04 	ldr.w	r5, [r4], #4
 8007378:	f8ad 2014 	strh.w	r2, [sp, #20]
 800737c:	9002      	str	r0, [sp, #8]
 800737e:	9006      	str	r0, [sp, #24]
 8007380:	f7f8 ff58 	bl	8000234 <strlen>
 8007384:	4b0b      	ldr	r3, [pc, #44]	@ (80073b4 <siscanf+0x4c>)
 8007386:	9003      	str	r0, [sp, #12]
 8007388:	9007      	str	r0, [sp, #28]
 800738a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800738c:	480a      	ldr	r0, [pc, #40]	@ (80073b8 <siscanf+0x50>)
 800738e:	9401      	str	r4, [sp, #4]
 8007390:	2300      	movs	r3, #0
 8007392:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007394:	9314      	str	r3, [sp, #80]	@ 0x50
 8007396:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800739a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800739e:	462a      	mov	r2, r5
 80073a0:	4623      	mov	r3, r4
 80073a2:	a902      	add	r1, sp, #8
 80073a4:	6800      	ldr	r0, [r0, #0]
 80073a6:	f000 f905 	bl	80075b4 <__ssvfiscanf_r>
 80073aa:	b01c      	add	sp, #112	@ 0x70
 80073ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80073b0:	b003      	add	sp, #12
 80073b2:	4770      	bx	lr
 80073b4:	080073bd 	.word	0x080073bd
 80073b8:	2000002c 	.word	0x2000002c

080073bc <__seofread>:
 80073bc:	2000      	movs	r0, #0
 80073be:	4770      	bx	lr

080073c0 <memset>:
 80073c0:	4402      	add	r2, r0
 80073c2:	4603      	mov	r3, r0
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d100      	bne.n	80073ca <memset+0xa>
 80073c8:	4770      	bx	lr
 80073ca:	f803 1b01 	strb.w	r1, [r3], #1
 80073ce:	e7f9      	b.n	80073c4 <memset+0x4>

080073d0 <strncpy>:
 80073d0:	b510      	push	{r4, lr}
 80073d2:	3901      	subs	r1, #1
 80073d4:	4603      	mov	r3, r0
 80073d6:	b132      	cbz	r2, 80073e6 <strncpy+0x16>
 80073d8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80073dc:	f803 4b01 	strb.w	r4, [r3], #1
 80073e0:	3a01      	subs	r2, #1
 80073e2:	2c00      	cmp	r4, #0
 80073e4:	d1f7      	bne.n	80073d6 <strncpy+0x6>
 80073e6:	441a      	add	r2, r3
 80073e8:	2100      	movs	r1, #0
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d100      	bne.n	80073f0 <strncpy+0x20>
 80073ee:	bd10      	pop	{r4, pc}
 80073f0:	f803 1b01 	strb.w	r1, [r3], #1
 80073f4:	e7f9      	b.n	80073ea <strncpy+0x1a>
	...

080073f8 <_sbrk_r>:
 80073f8:	b538      	push	{r3, r4, r5, lr}
 80073fa:	4d06      	ldr	r5, [pc, #24]	@ (8007414 <_sbrk_r+0x1c>)
 80073fc:	2300      	movs	r3, #0
 80073fe:	4604      	mov	r4, r0
 8007400:	4608      	mov	r0, r1
 8007402:	602b      	str	r3, [r5, #0]
 8007404:	f7fa f9d0 	bl	80017a8 <_sbrk>
 8007408:	1c43      	adds	r3, r0, #1
 800740a:	d102      	bne.n	8007412 <_sbrk_r+0x1a>
 800740c:	682b      	ldr	r3, [r5, #0]
 800740e:	b103      	cbz	r3, 8007412 <_sbrk_r+0x1a>
 8007410:	6023      	str	r3, [r4, #0]
 8007412:	bd38      	pop	{r3, r4, r5, pc}
 8007414:	20000498 	.word	0x20000498

08007418 <__errno>:
 8007418:	4b01      	ldr	r3, [pc, #4]	@ (8007420 <__errno+0x8>)
 800741a:	6818      	ldr	r0, [r3, #0]
 800741c:	4770      	bx	lr
 800741e:	bf00      	nop
 8007420:	2000002c 	.word	0x2000002c

08007424 <__libc_init_array>:
 8007424:	b570      	push	{r4, r5, r6, lr}
 8007426:	4d0d      	ldr	r5, [pc, #52]	@ (800745c <__libc_init_array+0x38>)
 8007428:	4c0d      	ldr	r4, [pc, #52]	@ (8007460 <__libc_init_array+0x3c>)
 800742a:	1b64      	subs	r4, r4, r5
 800742c:	10a4      	asrs	r4, r4, #2
 800742e:	2600      	movs	r6, #0
 8007430:	42a6      	cmp	r6, r4
 8007432:	d109      	bne.n	8007448 <__libc_init_array+0x24>
 8007434:	4d0b      	ldr	r5, [pc, #44]	@ (8007464 <__libc_init_array+0x40>)
 8007436:	4c0c      	ldr	r4, [pc, #48]	@ (8007468 <__libc_init_array+0x44>)
 8007438:	f000 fd22 	bl	8007e80 <_init>
 800743c:	1b64      	subs	r4, r4, r5
 800743e:	10a4      	asrs	r4, r4, #2
 8007440:	2600      	movs	r6, #0
 8007442:	42a6      	cmp	r6, r4
 8007444:	d105      	bne.n	8007452 <__libc_init_array+0x2e>
 8007446:	bd70      	pop	{r4, r5, r6, pc}
 8007448:	f855 3b04 	ldr.w	r3, [r5], #4
 800744c:	4798      	blx	r3
 800744e:	3601      	adds	r6, #1
 8007450:	e7ee      	b.n	8007430 <__libc_init_array+0xc>
 8007452:	f855 3b04 	ldr.w	r3, [r5], #4
 8007456:	4798      	blx	r3
 8007458:	3601      	adds	r6, #1
 800745a:	e7f2      	b.n	8007442 <__libc_init_array+0x1e>
 800745c:	08008078 	.word	0x08008078
 8007460:	08008078 	.word	0x08008078
 8007464:	08008078 	.word	0x08008078
 8007468:	0800807c 	.word	0x0800807c

0800746c <__retarget_lock_acquire_recursive>:
 800746c:	4770      	bx	lr

0800746e <__retarget_lock_release_recursive>:
 800746e:	4770      	bx	lr

08007470 <_free_r>:
 8007470:	b538      	push	{r3, r4, r5, lr}
 8007472:	4605      	mov	r5, r0
 8007474:	2900      	cmp	r1, #0
 8007476:	d041      	beq.n	80074fc <_free_r+0x8c>
 8007478:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800747c:	1f0c      	subs	r4, r1, #4
 800747e:	2b00      	cmp	r3, #0
 8007480:	bfb8      	it	lt
 8007482:	18e4      	addlt	r4, r4, r3
 8007484:	f7ff ff64 	bl	8007350 <__malloc_lock>
 8007488:	4a1d      	ldr	r2, [pc, #116]	@ (8007500 <_free_r+0x90>)
 800748a:	6813      	ldr	r3, [r2, #0]
 800748c:	b933      	cbnz	r3, 800749c <_free_r+0x2c>
 800748e:	6063      	str	r3, [r4, #4]
 8007490:	6014      	str	r4, [r2, #0]
 8007492:	4628      	mov	r0, r5
 8007494:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007498:	f7ff bf60 	b.w	800735c <__malloc_unlock>
 800749c:	42a3      	cmp	r3, r4
 800749e:	d908      	bls.n	80074b2 <_free_r+0x42>
 80074a0:	6820      	ldr	r0, [r4, #0]
 80074a2:	1821      	adds	r1, r4, r0
 80074a4:	428b      	cmp	r3, r1
 80074a6:	bf01      	itttt	eq
 80074a8:	6819      	ldreq	r1, [r3, #0]
 80074aa:	685b      	ldreq	r3, [r3, #4]
 80074ac:	1809      	addeq	r1, r1, r0
 80074ae:	6021      	streq	r1, [r4, #0]
 80074b0:	e7ed      	b.n	800748e <_free_r+0x1e>
 80074b2:	461a      	mov	r2, r3
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	b10b      	cbz	r3, 80074bc <_free_r+0x4c>
 80074b8:	42a3      	cmp	r3, r4
 80074ba:	d9fa      	bls.n	80074b2 <_free_r+0x42>
 80074bc:	6811      	ldr	r1, [r2, #0]
 80074be:	1850      	adds	r0, r2, r1
 80074c0:	42a0      	cmp	r0, r4
 80074c2:	d10b      	bne.n	80074dc <_free_r+0x6c>
 80074c4:	6820      	ldr	r0, [r4, #0]
 80074c6:	4401      	add	r1, r0
 80074c8:	1850      	adds	r0, r2, r1
 80074ca:	4283      	cmp	r3, r0
 80074cc:	6011      	str	r1, [r2, #0]
 80074ce:	d1e0      	bne.n	8007492 <_free_r+0x22>
 80074d0:	6818      	ldr	r0, [r3, #0]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	6053      	str	r3, [r2, #4]
 80074d6:	4408      	add	r0, r1
 80074d8:	6010      	str	r0, [r2, #0]
 80074da:	e7da      	b.n	8007492 <_free_r+0x22>
 80074dc:	d902      	bls.n	80074e4 <_free_r+0x74>
 80074de:	230c      	movs	r3, #12
 80074e0:	602b      	str	r3, [r5, #0]
 80074e2:	e7d6      	b.n	8007492 <_free_r+0x22>
 80074e4:	6820      	ldr	r0, [r4, #0]
 80074e6:	1821      	adds	r1, r4, r0
 80074e8:	428b      	cmp	r3, r1
 80074ea:	bf04      	itt	eq
 80074ec:	6819      	ldreq	r1, [r3, #0]
 80074ee:	685b      	ldreq	r3, [r3, #4]
 80074f0:	6063      	str	r3, [r4, #4]
 80074f2:	bf04      	itt	eq
 80074f4:	1809      	addeq	r1, r1, r0
 80074f6:	6021      	streq	r1, [r4, #0]
 80074f8:	6054      	str	r4, [r2, #4]
 80074fa:	e7ca      	b.n	8007492 <_free_r+0x22>
 80074fc:	bd38      	pop	{r3, r4, r5, pc}
 80074fe:	bf00      	nop
 8007500:	2000035c 	.word	0x2000035c

08007504 <_sungetc_r>:
 8007504:	b538      	push	{r3, r4, r5, lr}
 8007506:	1c4b      	adds	r3, r1, #1
 8007508:	4614      	mov	r4, r2
 800750a:	d103      	bne.n	8007514 <_sungetc_r+0x10>
 800750c:	f04f 35ff 	mov.w	r5, #4294967295
 8007510:	4628      	mov	r0, r5
 8007512:	bd38      	pop	{r3, r4, r5, pc}
 8007514:	8993      	ldrh	r3, [r2, #12]
 8007516:	f023 0320 	bic.w	r3, r3, #32
 800751a:	8193      	strh	r3, [r2, #12]
 800751c:	6853      	ldr	r3, [r2, #4]
 800751e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007520:	b2cd      	uxtb	r5, r1
 8007522:	b18a      	cbz	r2, 8007548 <_sungetc_r+0x44>
 8007524:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007526:	429a      	cmp	r2, r3
 8007528:	dd08      	ble.n	800753c <_sungetc_r+0x38>
 800752a:	6823      	ldr	r3, [r4, #0]
 800752c:	1e5a      	subs	r2, r3, #1
 800752e:	6022      	str	r2, [r4, #0]
 8007530:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007534:	6863      	ldr	r3, [r4, #4]
 8007536:	3301      	adds	r3, #1
 8007538:	6063      	str	r3, [r4, #4]
 800753a:	e7e9      	b.n	8007510 <_sungetc_r+0xc>
 800753c:	4621      	mov	r1, r4
 800753e:	f000 fb34 	bl	8007baa <__submore>
 8007542:	2800      	cmp	r0, #0
 8007544:	d0f1      	beq.n	800752a <_sungetc_r+0x26>
 8007546:	e7e1      	b.n	800750c <_sungetc_r+0x8>
 8007548:	6921      	ldr	r1, [r4, #16]
 800754a:	6822      	ldr	r2, [r4, #0]
 800754c:	b141      	cbz	r1, 8007560 <_sungetc_r+0x5c>
 800754e:	4291      	cmp	r1, r2
 8007550:	d206      	bcs.n	8007560 <_sungetc_r+0x5c>
 8007552:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8007556:	42a9      	cmp	r1, r5
 8007558:	d102      	bne.n	8007560 <_sungetc_r+0x5c>
 800755a:	3a01      	subs	r2, #1
 800755c:	6022      	str	r2, [r4, #0]
 800755e:	e7ea      	b.n	8007536 <_sungetc_r+0x32>
 8007560:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8007564:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007568:	6363      	str	r3, [r4, #52]	@ 0x34
 800756a:	2303      	movs	r3, #3
 800756c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800756e:	4623      	mov	r3, r4
 8007570:	f803 5f46 	strb.w	r5, [r3, #70]!
 8007574:	6023      	str	r3, [r4, #0]
 8007576:	2301      	movs	r3, #1
 8007578:	e7de      	b.n	8007538 <_sungetc_r+0x34>

0800757a <__ssrefill_r>:
 800757a:	b510      	push	{r4, lr}
 800757c:	460c      	mov	r4, r1
 800757e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8007580:	b169      	cbz	r1, 800759e <__ssrefill_r+0x24>
 8007582:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007586:	4299      	cmp	r1, r3
 8007588:	d001      	beq.n	800758e <__ssrefill_r+0x14>
 800758a:	f7ff ff71 	bl	8007470 <_free_r>
 800758e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007590:	6063      	str	r3, [r4, #4]
 8007592:	2000      	movs	r0, #0
 8007594:	6360      	str	r0, [r4, #52]	@ 0x34
 8007596:	b113      	cbz	r3, 800759e <__ssrefill_r+0x24>
 8007598:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800759a:	6023      	str	r3, [r4, #0]
 800759c:	bd10      	pop	{r4, pc}
 800759e:	6923      	ldr	r3, [r4, #16]
 80075a0:	6023      	str	r3, [r4, #0]
 80075a2:	2300      	movs	r3, #0
 80075a4:	6063      	str	r3, [r4, #4]
 80075a6:	89a3      	ldrh	r3, [r4, #12]
 80075a8:	f043 0320 	orr.w	r3, r3, #32
 80075ac:	81a3      	strh	r3, [r4, #12]
 80075ae:	f04f 30ff 	mov.w	r0, #4294967295
 80075b2:	e7f3      	b.n	800759c <__ssrefill_r+0x22>

080075b4 <__ssvfiscanf_r>:
 80075b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075b8:	460c      	mov	r4, r1
 80075ba:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80075be:	2100      	movs	r1, #0
 80075c0:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80075c4:	49a5      	ldr	r1, [pc, #660]	@ (800785c <__ssvfiscanf_r+0x2a8>)
 80075c6:	91a0      	str	r1, [sp, #640]	@ 0x280
 80075c8:	f10d 0804 	add.w	r8, sp, #4
 80075cc:	49a4      	ldr	r1, [pc, #656]	@ (8007860 <__ssvfiscanf_r+0x2ac>)
 80075ce:	4fa5      	ldr	r7, [pc, #660]	@ (8007864 <__ssvfiscanf_r+0x2b0>)
 80075d0:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80075d4:	4606      	mov	r6, r0
 80075d6:	91a1      	str	r1, [sp, #644]	@ 0x284
 80075d8:	9300      	str	r3, [sp, #0]
 80075da:	7813      	ldrb	r3, [r2, #0]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	f000 8158 	beq.w	8007892 <__ssvfiscanf_r+0x2de>
 80075e2:	5cf9      	ldrb	r1, [r7, r3]
 80075e4:	f011 0108 	ands.w	r1, r1, #8
 80075e8:	f102 0501 	add.w	r5, r2, #1
 80075ec:	d019      	beq.n	8007622 <__ssvfiscanf_r+0x6e>
 80075ee:	6863      	ldr	r3, [r4, #4]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	dd0f      	ble.n	8007614 <__ssvfiscanf_r+0x60>
 80075f4:	6823      	ldr	r3, [r4, #0]
 80075f6:	781a      	ldrb	r2, [r3, #0]
 80075f8:	5cba      	ldrb	r2, [r7, r2]
 80075fa:	0712      	lsls	r2, r2, #28
 80075fc:	d401      	bmi.n	8007602 <__ssvfiscanf_r+0x4e>
 80075fe:	462a      	mov	r2, r5
 8007600:	e7eb      	b.n	80075da <__ssvfiscanf_r+0x26>
 8007602:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8007604:	3201      	adds	r2, #1
 8007606:	9245      	str	r2, [sp, #276]	@ 0x114
 8007608:	6862      	ldr	r2, [r4, #4]
 800760a:	3301      	adds	r3, #1
 800760c:	3a01      	subs	r2, #1
 800760e:	6062      	str	r2, [r4, #4]
 8007610:	6023      	str	r3, [r4, #0]
 8007612:	e7ec      	b.n	80075ee <__ssvfiscanf_r+0x3a>
 8007614:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007616:	4621      	mov	r1, r4
 8007618:	4630      	mov	r0, r6
 800761a:	4798      	blx	r3
 800761c:	2800      	cmp	r0, #0
 800761e:	d0e9      	beq.n	80075f4 <__ssvfiscanf_r+0x40>
 8007620:	e7ed      	b.n	80075fe <__ssvfiscanf_r+0x4a>
 8007622:	2b25      	cmp	r3, #37	@ 0x25
 8007624:	d012      	beq.n	800764c <__ssvfiscanf_r+0x98>
 8007626:	4699      	mov	r9, r3
 8007628:	6863      	ldr	r3, [r4, #4]
 800762a:	2b00      	cmp	r3, #0
 800762c:	f340 8093 	ble.w	8007756 <__ssvfiscanf_r+0x1a2>
 8007630:	6822      	ldr	r2, [r4, #0]
 8007632:	7813      	ldrb	r3, [r2, #0]
 8007634:	454b      	cmp	r3, r9
 8007636:	f040 812c 	bne.w	8007892 <__ssvfiscanf_r+0x2de>
 800763a:	6863      	ldr	r3, [r4, #4]
 800763c:	3b01      	subs	r3, #1
 800763e:	6063      	str	r3, [r4, #4]
 8007640:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8007642:	3201      	adds	r2, #1
 8007644:	3301      	adds	r3, #1
 8007646:	6022      	str	r2, [r4, #0]
 8007648:	9345      	str	r3, [sp, #276]	@ 0x114
 800764a:	e7d8      	b.n	80075fe <__ssvfiscanf_r+0x4a>
 800764c:	9141      	str	r1, [sp, #260]	@ 0x104
 800764e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8007650:	7853      	ldrb	r3, [r2, #1]
 8007652:	2b2a      	cmp	r3, #42	@ 0x2a
 8007654:	bf02      	ittt	eq
 8007656:	2310      	moveq	r3, #16
 8007658:	1c95      	addeq	r5, r2, #2
 800765a:	9341      	streq	r3, [sp, #260]	@ 0x104
 800765c:	220a      	movs	r2, #10
 800765e:	46a9      	mov	r9, r5
 8007660:	f819 1b01 	ldrb.w	r1, [r9], #1
 8007664:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8007668:	2b09      	cmp	r3, #9
 800766a:	d91e      	bls.n	80076aa <__ssvfiscanf_r+0xf6>
 800766c:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8007868 <__ssvfiscanf_r+0x2b4>
 8007670:	2203      	movs	r2, #3
 8007672:	4650      	mov	r0, sl
 8007674:	f7f8 fdec 	bl	8000250 <memchr>
 8007678:	b138      	cbz	r0, 800768a <__ssvfiscanf_r+0xd6>
 800767a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800767c:	eba0 000a 	sub.w	r0, r0, sl
 8007680:	2301      	movs	r3, #1
 8007682:	4083      	lsls	r3, r0
 8007684:	4313      	orrs	r3, r2
 8007686:	9341      	str	r3, [sp, #260]	@ 0x104
 8007688:	464d      	mov	r5, r9
 800768a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800768e:	2b78      	cmp	r3, #120	@ 0x78
 8007690:	d806      	bhi.n	80076a0 <__ssvfiscanf_r+0xec>
 8007692:	2b57      	cmp	r3, #87	@ 0x57
 8007694:	d810      	bhi.n	80076b8 <__ssvfiscanf_r+0x104>
 8007696:	2b25      	cmp	r3, #37	@ 0x25
 8007698:	d0c5      	beq.n	8007626 <__ssvfiscanf_r+0x72>
 800769a:	d857      	bhi.n	800774c <__ssvfiscanf_r+0x198>
 800769c:	2b00      	cmp	r3, #0
 800769e:	d065      	beq.n	800776c <__ssvfiscanf_r+0x1b8>
 80076a0:	2303      	movs	r3, #3
 80076a2:	9347      	str	r3, [sp, #284]	@ 0x11c
 80076a4:	230a      	movs	r3, #10
 80076a6:	9342      	str	r3, [sp, #264]	@ 0x108
 80076a8:	e078      	b.n	800779c <__ssvfiscanf_r+0x1e8>
 80076aa:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80076ac:	fb02 1103 	mla	r1, r2, r3, r1
 80076b0:	3930      	subs	r1, #48	@ 0x30
 80076b2:	9143      	str	r1, [sp, #268]	@ 0x10c
 80076b4:	464d      	mov	r5, r9
 80076b6:	e7d2      	b.n	800765e <__ssvfiscanf_r+0xaa>
 80076b8:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80076bc:	2a20      	cmp	r2, #32
 80076be:	d8ef      	bhi.n	80076a0 <__ssvfiscanf_r+0xec>
 80076c0:	a101      	add	r1, pc, #4	@ (adr r1, 80076c8 <__ssvfiscanf_r+0x114>)
 80076c2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80076c6:	bf00      	nop
 80076c8:	0800777b 	.word	0x0800777b
 80076cc:	080076a1 	.word	0x080076a1
 80076d0:	080076a1 	.word	0x080076a1
 80076d4:	080077d5 	.word	0x080077d5
 80076d8:	080076a1 	.word	0x080076a1
 80076dc:	080076a1 	.word	0x080076a1
 80076e0:	080076a1 	.word	0x080076a1
 80076e4:	080076a1 	.word	0x080076a1
 80076e8:	080076a1 	.word	0x080076a1
 80076ec:	080076a1 	.word	0x080076a1
 80076f0:	080076a1 	.word	0x080076a1
 80076f4:	080077eb 	.word	0x080077eb
 80076f8:	080077d1 	.word	0x080077d1
 80076fc:	08007753 	.word	0x08007753
 8007700:	08007753 	.word	0x08007753
 8007704:	08007753 	.word	0x08007753
 8007708:	080076a1 	.word	0x080076a1
 800770c:	0800778d 	.word	0x0800778d
 8007710:	080076a1 	.word	0x080076a1
 8007714:	080076a1 	.word	0x080076a1
 8007718:	080076a1 	.word	0x080076a1
 800771c:	080076a1 	.word	0x080076a1
 8007720:	080077fb 	.word	0x080077fb
 8007724:	08007795 	.word	0x08007795
 8007728:	08007773 	.word	0x08007773
 800772c:	080076a1 	.word	0x080076a1
 8007730:	080076a1 	.word	0x080076a1
 8007734:	080077f7 	.word	0x080077f7
 8007738:	080076a1 	.word	0x080076a1
 800773c:	080077d1 	.word	0x080077d1
 8007740:	080076a1 	.word	0x080076a1
 8007744:	080076a1 	.word	0x080076a1
 8007748:	0800777b 	.word	0x0800777b
 800774c:	3b45      	subs	r3, #69	@ 0x45
 800774e:	2b02      	cmp	r3, #2
 8007750:	d8a6      	bhi.n	80076a0 <__ssvfiscanf_r+0xec>
 8007752:	2305      	movs	r3, #5
 8007754:	e021      	b.n	800779a <__ssvfiscanf_r+0x1e6>
 8007756:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007758:	4621      	mov	r1, r4
 800775a:	4630      	mov	r0, r6
 800775c:	4798      	blx	r3
 800775e:	2800      	cmp	r0, #0
 8007760:	f43f af66 	beq.w	8007630 <__ssvfiscanf_r+0x7c>
 8007764:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8007766:	2800      	cmp	r0, #0
 8007768:	f040 808b 	bne.w	8007882 <__ssvfiscanf_r+0x2ce>
 800776c:	f04f 30ff 	mov.w	r0, #4294967295
 8007770:	e08b      	b.n	800788a <__ssvfiscanf_r+0x2d6>
 8007772:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8007774:	f042 0220 	orr.w	r2, r2, #32
 8007778:	9241      	str	r2, [sp, #260]	@ 0x104
 800777a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800777c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007780:	9241      	str	r2, [sp, #260]	@ 0x104
 8007782:	2210      	movs	r2, #16
 8007784:	2b6e      	cmp	r3, #110	@ 0x6e
 8007786:	9242      	str	r2, [sp, #264]	@ 0x108
 8007788:	d902      	bls.n	8007790 <__ssvfiscanf_r+0x1dc>
 800778a:	e005      	b.n	8007798 <__ssvfiscanf_r+0x1e4>
 800778c:	2300      	movs	r3, #0
 800778e:	9342      	str	r3, [sp, #264]	@ 0x108
 8007790:	2303      	movs	r3, #3
 8007792:	e002      	b.n	800779a <__ssvfiscanf_r+0x1e6>
 8007794:	2308      	movs	r3, #8
 8007796:	9342      	str	r3, [sp, #264]	@ 0x108
 8007798:	2304      	movs	r3, #4
 800779a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800779c:	6863      	ldr	r3, [r4, #4]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	dd39      	ble.n	8007816 <__ssvfiscanf_r+0x262>
 80077a2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80077a4:	0659      	lsls	r1, r3, #25
 80077a6:	d404      	bmi.n	80077b2 <__ssvfiscanf_r+0x1fe>
 80077a8:	6823      	ldr	r3, [r4, #0]
 80077aa:	781a      	ldrb	r2, [r3, #0]
 80077ac:	5cba      	ldrb	r2, [r7, r2]
 80077ae:	0712      	lsls	r2, r2, #28
 80077b0:	d438      	bmi.n	8007824 <__ssvfiscanf_r+0x270>
 80077b2:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80077b4:	2b02      	cmp	r3, #2
 80077b6:	dc47      	bgt.n	8007848 <__ssvfiscanf_r+0x294>
 80077b8:	466b      	mov	r3, sp
 80077ba:	4622      	mov	r2, r4
 80077bc:	a941      	add	r1, sp, #260	@ 0x104
 80077be:	4630      	mov	r0, r6
 80077c0:	f000 f86c 	bl	800789c <_scanf_chars>
 80077c4:	2801      	cmp	r0, #1
 80077c6:	d064      	beq.n	8007892 <__ssvfiscanf_r+0x2de>
 80077c8:	2802      	cmp	r0, #2
 80077ca:	f47f af18 	bne.w	80075fe <__ssvfiscanf_r+0x4a>
 80077ce:	e7c9      	b.n	8007764 <__ssvfiscanf_r+0x1b0>
 80077d0:	220a      	movs	r2, #10
 80077d2:	e7d7      	b.n	8007784 <__ssvfiscanf_r+0x1d0>
 80077d4:	4629      	mov	r1, r5
 80077d6:	4640      	mov	r0, r8
 80077d8:	f000 f9ae 	bl	8007b38 <__sccl>
 80077dc:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80077de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077e2:	9341      	str	r3, [sp, #260]	@ 0x104
 80077e4:	4605      	mov	r5, r0
 80077e6:	2301      	movs	r3, #1
 80077e8:	e7d7      	b.n	800779a <__ssvfiscanf_r+0x1e6>
 80077ea:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80077ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077f0:	9341      	str	r3, [sp, #260]	@ 0x104
 80077f2:	2300      	movs	r3, #0
 80077f4:	e7d1      	b.n	800779a <__ssvfiscanf_r+0x1e6>
 80077f6:	2302      	movs	r3, #2
 80077f8:	e7cf      	b.n	800779a <__ssvfiscanf_r+0x1e6>
 80077fa:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80077fc:	06c3      	lsls	r3, r0, #27
 80077fe:	f53f aefe 	bmi.w	80075fe <__ssvfiscanf_r+0x4a>
 8007802:	9b00      	ldr	r3, [sp, #0]
 8007804:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8007806:	1d19      	adds	r1, r3, #4
 8007808:	9100      	str	r1, [sp, #0]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	07c0      	lsls	r0, r0, #31
 800780e:	bf4c      	ite	mi
 8007810:	801a      	strhmi	r2, [r3, #0]
 8007812:	601a      	strpl	r2, [r3, #0]
 8007814:	e6f3      	b.n	80075fe <__ssvfiscanf_r+0x4a>
 8007816:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007818:	4621      	mov	r1, r4
 800781a:	4630      	mov	r0, r6
 800781c:	4798      	blx	r3
 800781e:	2800      	cmp	r0, #0
 8007820:	d0bf      	beq.n	80077a2 <__ssvfiscanf_r+0x1ee>
 8007822:	e79f      	b.n	8007764 <__ssvfiscanf_r+0x1b0>
 8007824:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8007826:	3201      	adds	r2, #1
 8007828:	9245      	str	r2, [sp, #276]	@ 0x114
 800782a:	6862      	ldr	r2, [r4, #4]
 800782c:	3a01      	subs	r2, #1
 800782e:	2a00      	cmp	r2, #0
 8007830:	6062      	str	r2, [r4, #4]
 8007832:	dd02      	ble.n	800783a <__ssvfiscanf_r+0x286>
 8007834:	3301      	adds	r3, #1
 8007836:	6023      	str	r3, [r4, #0]
 8007838:	e7b6      	b.n	80077a8 <__ssvfiscanf_r+0x1f4>
 800783a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800783c:	4621      	mov	r1, r4
 800783e:	4630      	mov	r0, r6
 8007840:	4798      	blx	r3
 8007842:	2800      	cmp	r0, #0
 8007844:	d0b0      	beq.n	80077a8 <__ssvfiscanf_r+0x1f4>
 8007846:	e78d      	b.n	8007764 <__ssvfiscanf_r+0x1b0>
 8007848:	2b04      	cmp	r3, #4
 800784a:	dc0f      	bgt.n	800786c <__ssvfiscanf_r+0x2b8>
 800784c:	466b      	mov	r3, sp
 800784e:	4622      	mov	r2, r4
 8007850:	a941      	add	r1, sp, #260	@ 0x104
 8007852:	4630      	mov	r0, r6
 8007854:	f000 f87c 	bl	8007950 <_scanf_i>
 8007858:	e7b4      	b.n	80077c4 <__ssvfiscanf_r+0x210>
 800785a:	bf00      	nop
 800785c:	08007505 	.word	0x08007505
 8007860:	0800757b 	.word	0x0800757b
 8007864:	08007f70 	.word	0x08007f70
 8007868:	08007f50 	.word	0x08007f50
 800786c:	4b0a      	ldr	r3, [pc, #40]	@ (8007898 <__ssvfiscanf_r+0x2e4>)
 800786e:	2b00      	cmp	r3, #0
 8007870:	f43f aec5 	beq.w	80075fe <__ssvfiscanf_r+0x4a>
 8007874:	466b      	mov	r3, sp
 8007876:	4622      	mov	r2, r4
 8007878:	a941      	add	r1, sp, #260	@ 0x104
 800787a:	4630      	mov	r0, r6
 800787c:	f3af 8000 	nop.w
 8007880:	e7a0      	b.n	80077c4 <__ssvfiscanf_r+0x210>
 8007882:	89a3      	ldrh	r3, [r4, #12]
 8007884:	065b      	lsls	r3, r3, #25
 8007886:	f53f af71 	bmi.w	800776c <__ssvfiscanf_r+0x1b8>
 800788a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800788e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007892:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8007894:	e7f9      	b.n	800788a <__ssvfiscanf_r+0x2d6>
 8007896:	bf00      	nop
 8007898:	00000000 	.word	0x00000000

0800789c <_scanf_chars>:
 800789c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078a0:	4615      	mov	r5, r2
 80078a2:	688a      	ldr	r2, [r1, #8]
 80078a4:	4680      	mov	r8, r0
 80078a6:	460c      	mov	r4, r1
 80078a8:	b932      	cbnz	r2, 80078b8 <_scanf_chars+0x1c>
 80078aa:	698a      	ldr	r2, [r1, #24]
 80078ac:	2a00      	cmp	r2, #0
 80078ae:	bf14      	ite	ne
 80078b0:	f04f 32ff 	movne.w	r2, #4294967295
 80078b4:	2201      	moveq	r2, #1
 80078b6:	608a      	str	r2, [r1, #8]
 80078b8:	6822      	ldr	r2, [r4, #0]
 80078ba:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800794c <_scanf_chars+0xb0>
 80078be:	06d1      	lsls	r1, r2, #27
 80078c0:	bf5f      	itttt	pl
 80078c2:	681a      	ldrpl	r2, [r3, #0]
 80078c4:	1d11      	addpl	r1, r2, #4
 80078c6:	6019      	strpl	r1, [r3, #0]
 80078c8:	6816      	ldrpl	r6, [r2, #0]
 80078ca:	2700      	movs	r7, #0
 80078cc:	69a0      	ldr	r0, [r4, #24]
 80078ce:	b188      	cbz	r0, 80078f4 <_scanf_chars+0x58>
 80078d0:	2801      	cmp	r0, #1
 80078d2:	d107      	bne.n	80078e4 <_scanf_chars+0x48>
 80078d4:	682b      	ldr	r3, [r5, #0]
 80078d6:	781a      	ldrb	r2, [r3, #0]
 80078d8:	6963      	ldr	r3, [r4, #20]
 80078da:	5c9b      	ldrb	r3, [r3, r2]
 80078dc:	b953      	cbnz	r3, 80078f4 <_scanf_chars+0x58>
 80078de:	2f00      	cmp	r7, #0
 80078e0:	d031      	beq.n	8007946 <_scanf_chars+0xaa>
 80078e2:	e022      	b.n	800792a <_scanf_chars+0x8e>
 80078e4:	2802      	cmp	r0, #2
 80078e6:	d120      	bne.n	800792a <_scanf_chars+0x8e>
 80078e8:	682b      	ldr	r3, [r5, #0]
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	f819 3003 	ldrb.w	r3, [r9, r3]
 80078f0:	071b      	lsls	r3, r3, #28
 80078f2:	d41a      	bmi.n	800792a <_scanf_chars+0x8e>
 80078f4:	6823      	ldr	r3, [r4, #0]
 80078f6:	06da      	lsls	r2, r3, #27
 80078f8:	bf5e      	ittt	pl
 80078fa:	682b      	ldrpl	r3, [r5, #0]
 80078fc:	781b      	ldrbpl	r3, [r3, #0]
 80078fe:	f806 3b01 	strbpl.w	r3, [r6], #1
 8007902:	682a      	ldr	r2, [r5, #0]
 8007904:	686b      	ldr	r3, [r5, #4]
 8007906:	3201      	adds	r2, #1
 8007908:	602a      	str	r2, [r5, #0]
 800790a:	68a2      	ldr	r2, [r4, #8]
 800790c:	3b01      	subs	r3, #1
 800790e:	3a01      	subs	r2, #1
 8007910:	606b      	str	r3, [r5, #4]
 8007912:	3701      	adds	r7, #1
 8007914:	60a2      	str	r2, [r4, #8]
 8007916:	b142      	cbz	r2, 800792a <_scanf_chars+0x8e>
 8007918:	2b00      	cmp	r3, #0
 800791a:	dcd7      	bgt.n	80078cc <_scanf_chars+0x30>
 800791c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007920:	4629      	mov	r1, r5
 8007922:	4640      	mov	r0, r8
 8007924:	4798      	blx	r3
 8007926:	2800      	cmp	r0, #0
 8007928:	d0d0      	beq.n	80078cc <_scanf_chars+0x30>
 800792a:	6823      	ldr	r3, [r4, #0]
 800792c:	f013 0310 	ands.w	r3, r3, #16
 8007930:	d105      	bne.n	800793e <_scanf_chars+0xa2>
 8007932:	68e2      	ldr	r2, [r4, #12]
 8007934:	3201      	adds	r2, #1
 8007936:	60e2      	str	r2, [r4, #12]
 8007938:	69a2      	ldr	r2, [r4, #24]
 800793a:	b102      	cbz	r2, 800793e <_scanf_chars+0xa2>
 800793c:	7033      	strb	r3, [r6, #0]
 800793e:	6923      	ldr	r3, [r4, #16]
 8007940:	443b      	add	r3, r7
 8007942:	6123      	str	r3, [r4, #16]
 8007944:	2000      	movs	r0, #0
 8007946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800794a:	bf00      	nop
 800794c:	08007f70 	.word	0x08007f70

08007950 <_scanf_i>:
 8007950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007954:	4698      	mov	r8, r3
 8007956:	4b74      	ldr	r3, [pc, #464]	@ (8007b28 <_scanf_i+0x1d8>)
 8007958:	460c      	mov	r4, r1
 800795a:	4682      	mov	sl, r0
 800795c:	4616      	mov	r6, r2
 800795e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007962:	b087      	sub	sp, #28
 8007964:	ab03      	add	r3, sp, #12
 8007966:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800796a:	4b70      	ldr	r3, [pc, #448]	@ (8007b2c <_scanf_i+0x1dc>)
 800796c:	69a1      	ldr	r1, [r4, #24]
 800796e:	4a70      	ldr	r2, [pc, #448]	@ (8007b30 <_scanf_i+0x1e0>)
 8007970:	2903      	cmp	r1, #3
 8007972:	bf08      	it	eq
 8007974:	461a      	moveq	r2, r3
 8007976:	68a3      	ldr	r3, [r4, #8]
 8007978:	9201      	str	r2, [sp, #4]
 800797a:	1e5a      	subs	r2, r3, #1
 800797c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007980:	bf88      	it	hi
 8007982:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007986:	4627      	mov	r7, r4
 8007988:	bf82      	ittt	hi
 800798a:	eb03 0905 	addhi.w	r9, r3, r5
 800798e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007992:	60a3      	strhi	r3, [r4, #8]
 8007994:	f857 3b1c 	ldr.w	r3, [r7], #28
 8007998:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800799c:	bf98      	it	ls
 800799e:	f04f 0900 	movls.w	r9, #0
 80079a2:	6023      	str	r3, [r4, #0]
 80079a4:	463d      	mov	r5, r7
 80079a6:	f04f 0b00 	mov.w	fp, #0
 80079aa:	6831      	ldr	r1, [r6, #0]
 80079ac:	ab03      	add	r3, sp, #12
 80079ae:	7809      	ldrb	r1, [r1, #0]
 80079b0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80079b4:	2202      	movs	r2, #2
 80079b6:	f7f8 fc4b 	bl	8000250 <memchr>
 80079ba:	b328      	cbz	r0, 8007a08 <_scanf_i+0xb8>
 80079bc:	f1bb 0f01 	cmp.w	fp, #1
 80079c0:	d159      	bne.n	8007a76 <_scanf_i+0x126>
 80079c2:	6862      	ldr	r2, [r4, #4]
 80079c4:	b92a      	cbnz	r2, 80079d2 <_scanf_i+0x82>
 80079c6:	6822      	ldr	r2, [r4, #0]
 80079c8:	2108      	movs	r1, #8
 80079ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80079ce:	6061      	str	r1, [r4, #4]
 80079d0:	6022      	str	r2, [r4, #0]
 80079d2:	6822      	ldr	r2, [r4, #0]
 80079d4:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80079d8:	6022      	str	r2, [r4, #0]
 80079da:	68a2      	ldr	r2, [r4, #8]
 80079dc:	1e51      	subs	r1, r2, #1
 80079de:	60a1      	str	r1, [r4, #8]
 80079e0:	b192      	cbz	r2, 8007a08 <_scanf_i+0xb8>
 80079e2:	6832      	ldr	r2, [r6, #0]
 80079e4:	1c51      	adds	r1, r2, #1
 80079e6:	6031      	str	r1, [r6, #0]
 80079e8:	7812      	ldrb	r2, [r2, #0]
 80079ea:	f805 2b01 	strb.w	r2, [r5], #1
 80079ee:	6872      	ldr	r2, [r6, #4]
 80079f0:	3a01      	subs	r2, #1
 80079f2:	2a00      	cmp	r2, #0
 80079f4:	6072      	str	r2, [r6, #4]
 80079f6:	dc07      	bgt.n	8007a08 <_scanf_i+0xb8>
 80079f8:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80079fc:	4631      	mov	r1, r6
 80079fe:	4650      	mov	r0, sl
 8007a00:	4790      	blx	r2
 8007a02:	2800      	cmp	r0, #0
 8007a04:	f040 8085 	bne.w	8007b12 <_scanf_i+0x1c2>
 8007a08:	f10b 0b01 	add.w	fp, fp, #1
 8007a0c:	f1bb 0f03 	cmp.w	fp, #3
 8007a10:	d1cb      	bne.n	80079aa <_scanf_i+0x5a>
 8007a12:	6863      	ldr	r3, [r4, #4]
 8007a14:	b90b      	cbnz	r3, 8007a1a <_scanf_i+0xca>
 8007a16:	230a      	movs	r3, #10
 8007a18:	6063      	str	r3, [r4, #4]
 8007a1a:	6863      	ldr	r3, [r4, #4]
 8007a1c:	4945      	ldr	r1, [pc, #276]	@ (8007b34 <_scanf_i+0x1e4>)
 8007a1e:	6960      	ldr	r0, [r4, #20]
 8007a20:	1ac9      	subs	r1, r1, r3
 8007a22:	f000 f889 	bl	8007b38 <__sccl>
 8007a26:	f04f 0b00 	mov.w	fp, #0
 8007a2a:	68a3      	ldr	r3, [r4, #8]
 8007a2c:	6822      	ldr	r2, [r4, #0]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d03d      	beq.n	8007aae <_scanf_i+0x15e>
 8007a32:	6831      	ldr	r1, [r6, #0]
 8007a34:	6960      	ldr	r0, [r4, #20]
 8007a36:	f891 c000 	ldrb.w	ip, [r1]
 8007a3a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8007a3e:	2800      	cmp	r0, #0
 8007a40:	d035      	beq.n	8007aae <_scanf_i+0x15e>
 8007a42:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8007a46:	d124      	bne.n	8007a92 <_scanf_i+0x142>
 8007a48:	0510      	lsls	r0, r2, #20
 8007a4a:	d522      	bpl.n	8007a92 <_scanf_i+0x142>
 8007a4c:	f10b 0b01 	add.w	fp, fp, #1
 8007a50:	f1b9 0f00 	cmp.w	r9, #0
 8007a54:	d003      	beq.n	8007a5e <_scanf_i+0x10e>
 8007a56:	3301      	adds	r3, #1
 8007a58:	f109 39ff 	add.w	r9, r9, #4294967295
 8007a5c:	60a3      	str	r3, [r4, #8]
 8007a5e:	6873      	ldr	r3, [r6, #4]
 8007a60:	3b01      	subs	r3, #1
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	6073      	str	r3, [r6, #4]
 8007a66:	dd1b      	ble.n	8007aa0 <_scanf_i+0x150>
 8007a68:	6833      	ldr	r3, [r6, #0]
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	6033      	str	r3, [r6, #0]
 8007a6e:	68a3      	ldr	r3, [r4, #8]
 8007a70:	3b01      	subs	r3, #1
 8007a72:	60a3      	str	r3, [r4, #8]
 8007a74:	e7d9      	b.n	8007a2a <_scanf_i+0xda>
 8007a76:	f1bb 0f02 	cmp.w	fp, #2
 8007a7a:	d1ae      	bne.n	80079da <_scanf_i+0x8a>
 8007a7c:	6822      	ldr	r2, [r4, #0]
 8007a7e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8007a82:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8007a86:	d1bf      	bne.n	8007a08 <_scanf_i+0xb8>
 8007a88:	2110      	movs	r1, #16
 8007a8a:	6061      	str	r1, [r4, #4]
 8007a8c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007a90:	e7a2      	b.n	80079d8 <_scanf_i+0x88>
 8007a92:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8007a96:	6022      	str	r2, [r4, #0]
 8007a98:	780b      	ldrb	r3, [r1, #0]
 8007a9a:	f805 3b01 	strb.w	r3, [r5], #1
 8007a9e:	e7de      	b.n	8007a5e <_scanf_i+0x10e>
 8007aa0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007aa4:	4631      	mov	r1, r6
 8007aa6:	4650      	mov	r0, sl
 8007aa8:	4798      	blx	r3
 8007aaa:	2800      	cmp	r0, #0
 8007aac:	d0df      	beq.n	8007a6e <_scanf_i+0x11e>
 8007aae:	6823      	ldr	r3, [r4, #0]
 8007ab0:	05d9      	lsls	r1, r3, #23
 8007ab2:	d50d      	bpl.n	8007ad0 <_scanf_i+0x180>
 8007ab4:	42bd      	cmp	r5, r7
 8007ab6:	d909      	bls.n	8007acc <_scanf_i+0x17c>
 8007ab8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007abc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007ac0:	4632      	mov	r2, r6
 8007ac2:	4650      	mov	r0, sl
 8007ac4:	4798      	blx	r3
 8007ac6:	f105 39ff 	add.w	r9, r5, #4294967295
 8007aca:	464d      	mov	r5, r9
 8007acc:	42bd      	cmp	r5, r7
 8007ace:	d028      	beq.n	8007b22 <_scanf_i+0x1d2>
 8007ad0:	6822      	ldr	r2, [r4, #0]
 8007ad2:	f012 0210 	ands.w	r2, r2, #16
 8007ad6:	d113      	bne.n	8007b00 <_scanf_i+0x1b0>
 8007ad8:	702a      	strb	r2, [r5, #0]
 8007ada:	6863      	ldr	r3, [r4, #4]
 8007adc:	9e01      	ldr	r6, [sp, #4]
 8007ade:	4639      	mov	r1, r7
 8007ae0:	4650      	mov	r0, sl
 8007ae2:	47b0      	blx	r6
 8007ae4:	f8d8 3000 	ldr.w	r3, [r8]
 8007ae8:	6821      	ldr	r1, [r4, #0]
 8007aea:	1d1a      	adds	r2, r3, #4
 8007aec:	f8c8 2000 	str.w	r2, [r8]
 8007af0:	f011 0f20 	tst.w	r1, #32
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	d00f      	beq.n	8007b18 <_scanf_i+0x1c8>
 8007af8:	6018      	str	r0, [r3, #0]
 8007afa:	68e3      	ldr	r3, [r4, #12]
 8007afc:	3301      	adds	r3, #1
 8007afe:	60e3      	str	r3, [r4, #12]
 8007b00:	6923      	ldr	r3, [r4, #16]
 8007b02:	1bed      	subs	r5, r5, r7
 8007b04:	445d      	add	r5, fp
 8007b06:	442b      	add	r3, r5
 8007b08:	6123      	str	r3, [r4, #16]
 8007b0a:	2000      	movs	r0, #0
 8007b0c:	b007      	add	sp, #28
 8007b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b12:	f04f 0b00 	mov.w	fp, #0
 8007b16:	e7ca      	b.n	8007aae <_scanf_i+0x15e>
 8007b18:	07ca      	lsls	r2, r1, #31
 8007b1a:	bf4c      	ite	mi
 8007b1c:	8018      	strhmi	r0, [r3, #0]
 8007b1e:	6018      	strpl	r0, [r3, #0]
 8007b20:	e7eb      	b.n	8007afa <_scanf_i+0x1aa>
 8007b22:	2001      	movs	r0, #1
 8007b24:	e7f2      	b.n	8007b0c <_scanf_i+0x1bc>
 8007b26:	bf00      	nop
 8007b28:	08007f04 	.word	0x08007f04
 8007b2c:	08007d8d 	.word	0x08007d8d
 8007b30:	08007e6d 	.word	0x08007e6d
 8007b34:	08007f64 	.word	0x08007f64

08007b38 <__sccl>:
 8007b38:	b570      	push	{r4, r5, r6, lr}
 8007b3a:	780b      	ldrb	r3, [r1, #0]
 8007b3c:	4604      	mov	r4, r0
 8007b3e:	2b5e      	cmp	r3, #94	@ 0x5e
 8007b40:	bf0b      	itete	eq
 8007b42:	784b      	ldrbeq	r3, [r1, #1]
 8007b44:	1c4a      	addne	r2, r1, #1
 8007b46:	1c8a      	addeq	r2, r1, #2
 8007b48:	2100      	movne	r1, #0
 8007b4a:	bf08      	it	eq
 8007b4c:	2101      	moveq	r1, #1
 8007b4e:	3801      	subs	r0, #1
 8007b50:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8007b54:	f800 1f01 	strb.w	r1, [r0, #1]!
 8007b58:	42a8      	cmp	r0, r5
 8007b5a:	d1fb      	bne.n	8007b54 <__sccl+0x1c>
 8007b5c:	b90b      	cbnz	r3, 8007b62 <__sccl+0x2a>
 8007b5e:	1e50      	subs	r0, r2, #1
 8007b60:	bd70      	pop	{r4, r5, r6, pc}
 8007b62:	f081 0101 	eor.w	r1, r1, #1
 8007b66:	54e1      	strb	r1, [r4, r3]
 8007b68:	4610      	mov	r0, r2
 8007b6a:	4602      	mov	r2, r0
 8007b6c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007b70:	2d2d      	cmp	r5, #45	@ 0x2d
 8007b72:	d005      	beq.n	8007b80 <__sccl+0x48>
 8007b74:	2d5d      	cmp	r5, #93	@ 0x5d
 8007b76:	d016      	beq.n	8007ba6 <__sccl+0x6e>
 8007b78:	2d00      	cmp	r5, #0
 8007b7a:	d0f1      	beq.n	8007b60 <__sccl+0x28>
 8007b7c:	462b      	mov	r3, r5
 8007b7e:	e7f2      	b.n	8007b66 <__sccl+0x2e>
 8007b80:	7846      	ldrb	r6, [r0, #1]
 8007b82:	2e5d      	cmp	r6, #93	@ 0x5d
 8007b84:	d0fa      	beq.n	8007b7c <__sccl+0x44>
 8007b86:	42b3      	cmp	r3, r6
 8007b88:	dcf8      	bgt.n	8007b7c <__sccl+0x44>
 8007b8a:	3002      	adds	r0, #2
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	3201      	adds	r2, #1
 8007b90:	4296      	cmp	r6, r2
 8007b92:	54a1      	strb	r1, [r4, r2]
 8007b94:	dcfb      	bgt.n	8007b8e <__sccl+0x56>
 8007b96:	1af2      	subs	r2, r6, r3
 8007b98:	3a01      	subs	r2, #1
 8007b9a:	1c5d      	adds	r5, r3, #1
 8007b9c:	42b3      	cmp	r3, r6
 8007b9e:	bfa8      	it	ge
 8007ba0:	2200      	movge	r2, #0
 8007ba2:	18ab      	adds	r3, r5, r2
 8007ba4:	e7e1      	b.n	8007b6a <__sccl+0x32>
 8007ba6:	4610      	mov	r0, r2
 8007ba8:	e7da      	b.n	8007b60 <__sccl+0x28>

08007baa <__submore>:
 8007baa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bae:	460c      	mov	r4, r1
 8007bb0:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8007bb2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007bb6:	4299      	cmp	r1, r3
 8007bb8:	d11d      	bne.n	8007bf6 <__submore+0x4c>
 8007bba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007bbe:	f7ff fb47 	bl	8007250 <_malloc_r>
 8007bc2:	b918      	cbnz	r0, 8007bcc <__submore+0x22>
 8007bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8007bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bcc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007bd0:	63a3      	str	r3, [r4, #56]	@ 0x38
 8007bd2:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8007bd6:	6360      	str	r0, [r4, #52]	@ 0x34
 8007bd8:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8007bdc:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007be0:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8007be4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007be8:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8007bec:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8007bf0:	6020      	str	r0, [r4, #0]
 8007bf2:	2000      	movs	r0, #0
 8007bf4:	e7e8      	b.n	8007bc8 <__submore+0x1e>
 8007bf6:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8007bf8:	0077      	lsls	r7, r6, #1
 8007bfa:	463a      	mov	r2, r7
 8007bfc:	f000 f81d 	bl	8007c3a <_realloc_r>
 8007c00:	4605      	mov	r5, r0
 8007c02:	2800      	cmp	r0, #0
 8007c04:	d0de      	beq.n	8007bc4 <__submore+0x1a>
 8007c06:	eb00 0806 	add.w	r8, r0, r6
 8007c0a:	4601      	mov	r1, r0
 8007c0c:	4632      	mov	r2, r6
 8007c0e:	4640      	mov	r0, r8
 8007c10:	f000 f805 	bl	8007c1e <memcpy>
 8007c14:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8007c18:	f8c4 8000 	str.w	r8, [r4]
 8007c1c:	e7e9      	b.n	8007bf2 <__submore+0x48>

08007c1e <memcpy>:
 8007c1e:	440a      	add	r2, r1
 8007c20:	4291      	cmp	r1, r2
 8007c22:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c26:	d100      	bne.n	8007c2a <memcpy+0xc>
 8007c28:	4770      	bx	lr
 8007c2a:	b510      	push	{r4, lr}
 8007c2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c34:	4291      	cmp	r1, r2
 8007c36:	d1f9      	bne.n	8007c2c <memcpy+0xe>
 8007c38:	bd10      	pop	{r4, pc}

08007c3a <_realloc_r>:
 8007c3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c3e:	4680      	mov	r8, r0
 8007c40:	4615      	mov	r5, r2
 8007c42:	460c      	mov	r4, r1
 8007c44:	b921      	cbnz	r1, 8007c50 <_realloc_r+0x16>
 8007c46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c4a:	4611      	mov	r1, r2
 8007c4c:	f7ff bb00 	b.w	8007250 <_malloc_r>
 8007c50:	b92a      	cbnz	r2, 8007c5e <_realloc_r+0x24>
 8007c52:	f7ff fc0d 	bl	8007470 <_free_r>
 8007c56:	2400      	movs	r4, #0
 8007c58:	4620      	mov	r0, r4
 8007c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c5e:	f000 f907 	bl	8007e70 <_malloc_usable_size_r>
 8007c62:	4285      	cmp	r5, r0
 8007c64:	4606      	mov	r6, r0
 8007c66:	d802      	bhi.n	8007c6e <_realloc_r+0x34>
 8007c68:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007c6c:	d8f4      	bhi.n	8007c58 <_realloc_r+0x1e>
 8007c6e:	4629      	mov	r1, r5
 8007c70:	4640      	mov	r0, r8
 8007c72:	f7ff faed 	bl	8007250 <_malloc_r>
 8007c76:	4607      	mov	r7, r0
 8007c78:	2800      	cmp	r0, #0
 8007c7a:	d0ec      	beq.n	8007c56 <_realloc_r+0x1c>
 8007c7c:	42b5      	cmp	r5, r6
 8007c7e:	462a      	mov	r2, r5
 8007c80:	4621      	mov	r1, r4
 8007c82:	bf28      	it	cs
 8007c84:	4632      	movcs	r2, r6
 8007c86:	f7ff ffca 	bl	8007c1e <memcpy>
 8007c8a:	4621      	mov	r1, r4
 8007c8c:	4640      	mov	r0, r8
 8007c8e:	f7ff fbef 	bl	8007470 <_free_r>
 8007c92:	463c      	mov	r4, r7
 8007c94:	e7e0      	b.n	8007c58 <_realloc_r+0x1e>
	...

08007c98 <_strtol_l.constprop.0>:
 8007c98:	2b24      	cmp	r3, #36	@ 0x24
 8007c9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c9e:	4686      	mov	lr, r0
 8007ca0:	4690      	mov	r8, r2
 8007ca2:	d801      	bhi.n	8007ca8 <_strtol_l.constprop.0+0x10>
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d106      	bne.n	8007cb6 <_strtol_l.constprop.0+0x1e>
 8007ca8:	f7ff fbb6 	bl	8007418 <__errno>
 8007cac:	2316      	movs	r3, #22
 8007cae:	6003      	str	r3, [r0, #0]
 8007cb0:	2000      	movs	r0, #0
 8007cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cb6:	4834      	ldr	r0, [pc, #208]	@ (8007d88 <_strtol_l.constprop.0+0xf0>)
 8007cb8:	460d      	mov	r5, r1
 8007cba:	462a      	mov	r2, r5
 8007cbc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007cc0:	5d06      	ldrb	r6, [r0, r4]
 8007cc2:	f016 0608 	ands.w	r6, r6, #8
 8007cc6:	d1f8      	bne.n	8007cba <_strtol_l.constprop.0+0x22>
 8007cc8:	2c2d      	cmp	r4, #45	@ 0x2d
 8007cca:	d12d      	bne.n	8007d28 <_strtol_l.constprop.0+0x90>
 8007ccc:	782c      	ldrb	r4, [r5, #0]
 8007cce:	2601      	movs	r6, #1
 8007cd0:	1c95      	adds	r5, r2, #2
 8007cd2:	f033 0210 	bics.w	r2, r3, #16
 8007cd6:	d109      	bne.n	8007cec <_strtol_l.constprop.0+0x54>
 8007cd8:	2c30      	cmp	r4, #48	@ 0x30
 8007cda:	d12a      	bne.n	8007d32 <_strtol_l.constprop.0+0x9a>
 8007cdc:	782a      	ldrb	r2, [r5, #0]
 8007cde:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007ce2:	2a58      	cmp	r2, #88	@ 0x58
 8007ce4:	d125      	bne.n	8007d32 <_strtol_l.constprop.0+0x9a>
 8007ce6:	786c      	ldrb	r4, [r5, #1]
 8007ce8:	2310      	movs	r3, #16
 8007cea:	3502      	adds	r5, #2
 8007cec:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007cf0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	fbbc f9f3 	udiv	r9, ip, r3
 8007cfa:	4610      	mov	r0, r2
 8007cfc:	fb03 ca19 	mls	sl, r3, r9, ip
 8007d00:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007d04:	2f09      	cmp	r7, #9
 8007d06:	d81b      	bhi.n	8007d40 <_strtol_l.constprop.0+0xa8>
 8007d08:	463c      	mov	r4, r7
 8007d0a:	42a3      	cmp	r3, r4
 8007d0c:	dd27      	ble.n	8007d5e <_strtol_l.constprop.0+0xc6>
 8007d0e:	1c57      	adds	r7, r2, #1
 8007d10:	d007      	beq.n	8007d22 <_strtol_l.constprop.0+0x8a>
 8007d12:	4581      	cmp	r9, r0
 8007d14:	d320      	bcc.n	8007d58 <_strtol_l.constprop.0+0xc0>
 8007d16:	d101      	bne.n	8007d1c <_strtol_l.constprop.0+0x84>
 8007d18:	45a2      	cmp	sl, r4
 8007d1a:	db1d      	blt.n	8007d58 <_strtol_l.constprop.0+0xc0>
 8007d1c:	fb00 4003 	mla	r0, r0, r3, r4
 8007d20:	2201      	movs	r2, #1
 8007d22:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d26:	e7eb      	b.n	8007d00 <_strtol_l.constprop.0+0x68>
 8007d28:	2c2b      	cmp	r4, #43	@ 0x2b
 8007d2a:	bf04      	itt	eq
 8007d2c:	782c      	ldrbeq	r4, [r5, #0]
 8007d2e:	1c95      	addeq	r5, r2, #2
 8007d30:	e7cf      	b.n	8007cd2 <_strtol_l.constprop.0+0x3a>
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d1da      	bne.n	8007cec <_strtol_l.constprop.0+0x54>
 8007d36:	2c30      	cmp	r4, #48	@ 0x30
 8007d38:	bf0c      	ite	eq
 8007d3a:	2308      	moveq	r3, #8
 8007d3c:	230a      	movne	r3, #10
 8007d3e:	e7d5      	b.n	8007cec <_strtol_l.constprop.0+0x54>
 8007d40:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007d44:	2f19      	cmp	r7, #25
 8007d46:	d801      	bhi.n	8007d4c <_strtol_l.constprop.0+0xb4>
 8007d48:	3c37      	subs	r4, #55	@ 0x37
 8007d4a:	e7de      	b.n	8007d0a <_strtol_l.constprop.0+0x72>
 8007d4c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007d50:	2f19      	cmp	r7, #25
 8007d52:	d804      	bhi.n	8007d5e <_strtol_l.constprop.0+0xc6>
 8007d54:	3c57      	subs	r4, #87	@ 0x57
 8007d56:	e7d8      	b.n	8007d0a <_strtol_l.constprop.0+0x72>
 8007d58:	f04f 32ff 	mov.w	r2, #4294967295
 8007d5c:	e7e1      	b.n	8007d22 <_strtol_l.constprop.0+0x8a>
 8007d5e:	1c53      	adds	r3, r2, #1
 8007d60:	d108      	bne.n	8007d74 <_strtol_l.constprop.0+0xdc>
 8007d62:	2322      	movs	r3, #34	@ 0x22
 8007d64:	f8ce 3000 	str.w	r3, [lr]
 8007d68:	4660      	mov	r0, ip
 8007d6a:	f1b8 0f00 	cmp.w	r8, #0
 8007d6e:	d0a0      	beq.n	8007cb2 <_strtol_l.constprop.0+0x1a>
 8007d70:	1e69      	subs	r1, r5, #1
 8007d72:	e006      	b.n	8007d82 <_strtol_l.constprop.0+0xea>
 8007d74:	b106      	cbz	r6, 8007d78 <_strtol_l.constprop.0+0xe0>
 8007d76:	4240      	negs	r0, r0
 8007d78:	f1b8 0f00 	cmp.w	r8, #0
 8007d7c:	d099      	beq.n	8007cb2 <_strtol_l.constprop.0+0x1a>
 8007d7e:	2a00      	cmp	r2, #0
 8007d80:	d1f6      	bne.n	8007d70 <_strtol_l.constprop.0+0xd8>
 8007d82:	f8c8 1000 	str.w	r1, [r8]
 8007d86:	e794      	b.n	8007cb2 <_strtol_l.constprop.0+0x1a>
 8007d88:	08007f70 	.word	0x08007f70

08007d8c <_strtol_r>:
 8007d8c:	f7ff bf84 	b.w	8007c98 <_strtol_l.constprop.0>

08007d90 <_strtoul_l.constprop.0>:
 8007d90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007d94:	4e34      	ldr	r6, [pc, #208]	@ (8007e68 <_strtoul_l.constprop.0+0xd8>)
 8007d96:	4686      	mov	lr, r0
 8007d98:	460d      	mov	r5, r1
 8007d9a:	4628      	mov	r0, r5
 8007d9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007da0:	5d37      	ldrb	r7, [r6, r4]
 8007da2:	f017 0708 	ands.w	r7, r7, #8
 8007da6:	d1f8      	bne.n	8007d9a <_strtoul_l.constprop.0+0xa>
 8007da8:	2c2d      	cmp	r4, #45	@ 0x2d
 8007daa:	d12f      	bne.n	8007e0c <_strtoul_l.constprop.0+0x7c>
 8007dac:	782c      	ldrb	r4, [r5, #0]
 8007dae:	2701      	movs	r7, #1
 8007db0:	1c85      	adds	r5, r0, #2
 8007db2:	f033 0010 	bics.w	r0, r3, #16
 8007db6:	d109      	bne.n	8007dcc <_strtoul_l.constprop.0+0x3c>
 8007db8:	2c30      	cmp	r4, #48	@ 0x30
 8007dba:	d12c      	bne.n	8007e16 <_strtoul_l.constprop.0+0x86>
 8007dbc:	7828      	ldrb	r0, [r5, #0]
 8007dbe:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8007dc2:	2858      	cmp	r0, #88	@ 0x58
 8007dc4:	d127      	bne.n	8007e16 <_strtoul_l.constprop.0+0x86>
 8007dc6:	786c      	ldrb	r4, [r5, #1]
 8007dc8:	2310      	movs	r3, #16
 8007dca:	3502      	adds	r5, #2
 8007dcc:	f04f 38ff 	mov.w	r8, #4294967295
 8007dd0:	2600      	movs	r6, #0
 8007dd2:	fbb8 f8f3 	udiv	r8, r8, r3
 8007dd6:	fb03 f908 	mul.w	r9, r3, r8
 8007dda:	ea6f 0909 	mvn.w	r9, r9
 8007dde:	4630      	mov	r0, r6
 8007de0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8007de4:	f1bc 0f09 	cmp.w	ip, #9
 8007de8:	d81c      	bhi.n	8007e24 <_strtoul_l.constprop.0+0x94>
 8007dea:	4664      	mov	r4, ip
 8007dec:	42a3      	cmp	r3, r4
 8007dee:	dd2a      	ble.n	8007e46 <_strtoul_l.constprop.0+0xb6>
 8007df0:	f1b6 3fff 	cmp.w	r6, #4294967295
 8007df4:	d007      	beq.n	8007e06 <_strtoul_l.constprop.0+0x76>
 8007df6:	4580      	cmp	r8, r0
 8007df8:	d322      	bcc.n	8007e40 <_strtoul_l.constprop.0+0xb0>
 8007dfa:	d101      	bne.n	8007e00 <_strtoul_l.constprop.0+0x70>
 8007dfc:	45a1      	cmp	r9, r4
 8007dfe:	db1f      	blt.n	8007e40 <_strtoul_l.constprop.0+0xb0>
 8007e00:	fb00 4003 	mla	r0, r0, r3, r4
 8007e04:	2601      	movs	r6, #1
 8007e06:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007e0a:	e7e9      	b.n	8007de0 <_strtoul_l.constprop.0+0x50>
 8007e0c:	2c2b      	cmp	r4, #43	@ 0x2b
 8007e0e:	bf04      	itt	eq
 8007e10:	782c      	ldrbeq	r4, [r5, #0]
 8007e12:	1c85      	addeq	r5, r0, #2
 8007e14:	e7cd      	b.n	8007db2 <_strtoul_l.constprop.0+0x22>
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d1d8      	bne.n	8007dcc <_strtoul_l.constprop.0+0x3c>
 8007e1a:	2c30      	cmp	r4, #48	@ 0x30
 8007e1c:	bf0c      	ite	eq
 8007e1e:	2308      	moveq	r3, #8
 8007e20:	230a      	movne	r3, #10
 8007e22:	e7d3      	b.n	8007dcc <_strtoul_l.constprop.0+0x3c>
 8007e24:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8007e28:	f1bc 0f19 	cmp.w	ip, #25
 8007e2c:	d801      	bhi.n	8007e32 <_strtoul_l.constprop.0+0xa2>
 8007e2e:	3c37      	subs	r4, #55	@ 0x37
 8007e30:	e7dc      	b.n	8007dec <_strtoul_l.constprop.0+0x5c>
 8007e32:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8007e36:	f1bc 0f19 	cmp.w	ip, #25
 8007e3a:	d804      	bhi.n	8007e46 <_strtoul_l.constprop.0+0xb6>
 8007e3c:	3c57      	subs	r4, #87	@ 0x57
 8007e3e:	e7d5      	b.n	8007dec <_strtoul_l.constprop.0+0x5c>
 8007e40:	f04f 36ff 	mov.w	r6, #4294967295
 8007e44:	e7df      	b.n	8007e06 <_strtoul_l.constprop.0+0x76>
 8007e46:	1c73      	adds	r3, r6, #1
 8007e48:	d106      	bne.n	8007e58 <_strtoul_l.constprop.0+0xc8>
 8007e4a:	2322      	movs	r3, #34	@ 0x22
 8007e4c:	f8ce 3000 	str.w	r3, [lr]
 8007e50:	4630      	mov	r0, r6
 8007e52:	b932      	cbnz	r2, 8007e62 <_strtoul_l.constprop.0+0xd2>
 8007e54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e58:	b107      	cbz	r7, 8007e5c <_strtoul_l.constprop.0+0xcc>
 8007e5a:	4240      	negs	r0, r0
 8007e5c:	2a00      	cmp	r2, #0
 8007e5e:	d0f9      	beq.n	8007e54 <_strtoul_l.constprop.0+0xc4>
 8007e60:	b106      	cbz	r6, 8007e64 <_strtoul_l.constprop.0+0xd4>
 8007e62:	1e69      	subs	r1, r5, #1
 8007e64:	6011      	str	r1, [r2, #0]
 8007e66:	e7f5      	b.n	8007e54 <_strtoul_l.constprop.0+0xc4>
 8007e68:	08007f70 	.word	0x08007f70

08007e6c <_strtoul_r>:
 8007e6c:	f7ff bf90 	b.w	8007d90 <_strtoul_l.constprop.0>

08007e70 <_malloc_usable_size_r>:
 8007e70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e74:	1f18      	subs	r0, r3, #4
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	bfbc      	itt	lt
 8007e7a:	580b      	ldrlt	r3, [r1, r0]
 8007e7c:	18c0      	addlt	r0, r0, r3
 8007e7e:	4770      	bx	lr

08007e80 <_init>:
 8007e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e82:	bf00      	nop
 8007e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e86:	bc08      	pop	{r3}
 8007e88:	469e      	mov	lr, r3
 8007e8a:	4770      	bx	lr

08007e8c <_fini>:
 8007e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e8e:	bf00      	nop
 8007e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e92:	bc08      	pop	{r3}
 8007e94:	469e      	mov	lr, r3
 8007e96:	4770      	bx	lr
